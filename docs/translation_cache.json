{
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / IMcDbDwgFiler": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/IMcDbDwgFiler",
  "用于处理 AutoCAD DWG 文件的读写操作。这个接口提供了一组方法，允许开发者在 AutoCAD 插件中进行 DWG 文件的读取和写入。": "Used for handling read and write operations of AutoCAD DWG files. This interface provides a set of methods that allow developers to read and write DWG files in the AutoCAD plugin.",
  "  // 自定义实体类 继承 McDbCustomEntity\r": "//Custom Entity Class Inherits McDbCCustoms Entity",
  "       // 定义实体内 pt1、pt2 两个点对象\r": "//Define two point objects, pt1 and pt2, within the entity",
  "       // 读取自定义实体的数据字段 pt1、pt2\r": "//Read the data field pt1 of the custom entity pt2",
  "       // 写入自定义实体的数据字段 pt1、pt2\r": "//Write the data field pt1 to the custom entity pt2",
  "构造函数": "Constructor function",
  "| `type` | [`MxCADCloneType`](../enums/2d.MxCADCloneType.md) | 克隆类型 |": "|Type | [MxCADCloneType] (../enums/2d. MxCADCloneType. md) | Clone Type|",
  "获取对象的类型信息": "Retrieve the type information of the object",
  "克隆类型": "Clone type",
  "从打开的 DWG 文件中读取一个浮点数。": "Read a floating-point number from an open DWG file.",
  "| `name` | `string` | 浮点数名称 |": "|Name | String | Floating Point Number Name|",
  "ret 是否成功获取 | val 浮点数值": "Whether ret successfully obtained | val floating-point value",
  "从打开的 DWG 文件中读取一个长整数。": "Read a long integer from the opened DWG file.",
  "| `name` | `string` | 长整数名称 |": "|Name | string | Long integer name|",
  "ret 是否成功获取 | val 长整数值": "Whether ret successfully obtained | val long integer value",
  "从打开的 DWG 文件中读取一个点对象。": "Read a point object from an open DWG file.",
  "| `name` | `string` | 点对象名称 |": "|Name | String | Point Object Name|",
  "ret 是否成功获取 | val 点对象数组": "Whether ret successfully obtained | val point object array",
  "从打开的 DWG 文件中读取一组点对象。": "Read a set of point objects from an open DWG file.",
  "| `name` | `string` | 点对象数组名称 |": "|Name | String | Point Object Array Name|",
  "从打开的 DWG 文件中读取一个字符串。": "Read a string from an open DWG file.",
  "| `name` | `string` | 字符串名称 |": "|Name | String | String Name|",
  "ret 是否成功获取 | val 字符串值": "Did ret successfully obtain the | val string value",
  "向已打开的 DWG 文件中写入一个浮点数。": "Write a floating-point number to an opened DWG file.",
  "| `val` | `number` | 浮点数值 |": "|Val | number | Floating point numerical value|",
  "向已打开的 DWG 文件中写入一个长整数。": "Write a long integer to an opened DWG file.",
  "| `val` | `number` | 长整数值 |": "|Val | number | long integer value|",
  "向已打开的 DWG 文件中写入一个点对象。": "Write a point object to an opened DWG file.",
  "| `val` | [`McGePoint3d`](2d.McGePoint3d.md) | 点对象 |": "|Val | [McGePoint3d] (2d. McGePoint3d. md) | Point Object|",
  "向已打开的 DWG 文件中写入一组点对象。": "Write a set of point objects to an opened DWG file.",
  "| `vals` | [`McGePoint3d`](2d.McGePoint3d.md)[] | 点对象数组 |": "|Vals | McGePoint3d (2d. McGePoint3d. md) | Point Object Array|",
  "向已打开的 DWG 文件中写入一个字符串。": "Write a string to an opened DWG file.",
  "| `val` | `string` | 字符串值 |": "|Val | string | string value|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McAppType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McAppType",
  "McAppType 类，提供了 MxCAD 的一些基本操作。": "The McAppType class provides some basic operations for MxCAD.",
  "得当前程序的数字日期版本信息": "Obtain the numerical date version information of the current program",
  "数字日期版本信息": "Digital date version information",
  "全局参数的初始设置": "Initial setting of global parameters",
  "| `ini` | `any` | 初始设置值 ini.UseUtf8: c++程序是否使用utf8编码格式。 ini.McGeTol: 几何计算时，点和向量变量判断是否相等的精度范围，默认值是1.0E-7。 |": "|Ini | any | Initial setting value ini UseUtf8: Does the C++program use the Utf8 encoding format. ini.McGeTol:  The accuracy range for determining whether point and vector variables are equal in geometric calculations is 1.0E-7 by default|",
  "配置需要通过网络加载的bigfont shx字体": "Configure the bigfont shx font that needs to be loaded through the network",
  "// MxCAD创建成功\r": "//MxCAD created successfully",
  "| `fontfiles` | `string` \\| `string`[] | `undefined` | 加载的字体文件 |": "|Fontfiles | string \\ | string [] | undefined | loaded font file|",
  "配置需要通过网络加载的shx字体": "Configure the shx font that needs to be loaded through the network",
  "配置需要通过网络加载的Truetype字体": "Configure Truetype fonts that need to be loaded through the network",
  "  MxCpp.App.addNetworkLoadingTrueTypeFont([\"simsun\",\"syadobe\"],[\"思原宋体\",\"思原黑体\"],[\"stadobe.otf\",\"syadobe.otf\"]);\r": "MxCpp. App. addNetworkLoadingTrueTypeFont ([\"simsun\", \"syadobe\"], [\"siyuan songti\", \"siyuan blackbody\"], [\"stadobe. otf\", \"syadobe. otf\");",
  "| `fontname` | `string`[] | `undefined` | 字体名 |": "|Fontname | string [] | undefined | Font name|",
  "| `fontzhName` | `string`[] | `undefined` | 字体中文名 |": "|FontzhName | string [] | undefined | Chinese font name|",
  "| `fontfile` | `string`[] | `undefined` | 加载字体文件 |": "|Fontfile | string [] | undefined | Load font file|",
  "创建克隆对象。": "Create a cloned object.",
  "// 获取目标对象\r": "//Obtain the target object",
  "const obj = MxCpp.App.objectIdToObject(val.id);// 对象id转 McDbObject 对象\r": "const obj = MxCpp.App.objectIdToObject(val.id);//  Convert object ID to McDbObject object",
  "const obj_clone = MxCpp.App.createCloneObject(obj?.getImp());// 克隆目标对象\r": "const obj_clone = MxCpp.App.createCloneObject(obj?.getImp());//  Clone target object",
  "| `clonobjImp` | `any` | 被克隆的对象。 |": "|ClonojImp | any | The object that has been cloned|",
  "返回创建的 McDbObject 对象。": "Return the created McDbObject object.",
  "销毁对象。": "Destruction of objects.",
  "| `pObject` | `McRxObjectImp` | 要销毁的对象。 |": "|PObject | McRxObject Imp | Object to be destroyed|",
  "获取当前的 MxDraw 对象。": "Retrieve the current MxDraw object.",
  "//添加图层\r": "//Add Layer",
  "// 获取当前cad对象\r": "//Retrieve the current CAD object",
  "// 获取图层表\r": "//Get layer table",
  "  let newLayer = new McDbLayerTableRecord();// 构造新图层记录对象\r": "let newLayer = new McDbLayerTableRecord();//  Construct a new layer to record objects",
  "  newLayer.name = \"xxx11\";// 设置新图层名为：\"xxx11\"\r": "newLayer.name = \"xxx11\";//  Set the new layer name as: \"xxx11\"",
  "  layerTable.add(newLayer);// 图层表新增图层记录对象\r": "layerTable.add(newLayer);//  Add layer record objects to the layer table",
  "返回当前的 McObject 对象。": "Return the current McObject object.",
  "获取 imp 对象。": "Retrieve the imp object.",
  "返回 imp 对象。": "Return the imp object.",
  "获取最后一次调用的结果。": "Get the result of the last call.",
  "console.log(\"最后一次调用结果：\", result);\r": "Console.log (Last call result: \", result);",
  "返回最后一次调用的结果": "Return the result of the last call",
  "得到当前支持的所有bigfont shx字体.": "Get all currently supported bigfont shx fonts",
  "字体数组": "Font array",
  "得到当前支持的所有shx字体.": "Get all currently supported shx fonts",
  "得到当前支持的所有TrueType字体.": "Get all currently supported TrueType fonts",
  "name 字体名| zhname 字体中文名 | file 字体文件": "Name Font Name | zhname Font Chinese Name | file Font File",
  "得当前程序的版本信息": "Obtain the version information of the current program",
  "console.log(\"版本信息\", version);\r": "Console.log (\"version information\", version);",
  "版本信息": "Version information",
  "初始化 McAppType 对象。": "Initialize the McAppType object.",
  "| `imp` | `any` | 传入的 imp 对象。 |": "|'imp' | 'any' | The imp object passed in|",
  "通知cad程序，将来要使用的字体需要加载，方便后面程序使用.": "Notify the CAD program that the fonts to be used in the future need to be loaded for ease of use in subsequent programs",
  "  //修改文字样式\r": "//Modify Text Style",
  "  //清空当前显示内容\r": "//Clear the current display content",
  "    // 添加一个黑体文字样式\r": "//Add a bold text style",
  "    // 添加一个宋体文字样式\r": "//Add a Song typeface text style",
  "    // 设置当前样式为黑体\r": "//Set the current style to bold",
  "    let idText = mxcad.drawText(0, 3500, \"绘图控件TrueType文字测试\", 100, 0, 0, 1);\r": "Let idText=mxcad.drawText (0, 3500, \"TrueType Text Test for Drawing Control\", 100, 0, 0, 1);",
  "    // 修改文字样式为宋体\r": "//Change the text style to Song typeface",
  "| `vecShxFonst` | `string`[] | shx字体 |": "|VecShxFonst | string [] | shx font|",
  "| `vecBigShxFonst` | `string`[] | bigfont shx字体 |": "|VecBigShxFonst | string [] | bigfont shx font|",
  "| `vecTureTypeFonts` | `string`[] | Truetype字体 |": "|VecTureTypeFonts | string [] | Truetype fonts|",
  "| `retCall` | () => `void` | 回调函数 |": "|RetCall | ()=>void | callback function|",
  "将 RGB 值转换为索引。": "Convert RGB values to indexes.",
  "| `red` | `number` | `undefined` | 红色值。 |": "|Red | number | undefined | red value|",
  "| `green` | `number` | `undefined` | 绿色值。 |": "|Green | number | undefined | Green value|",
  "| `blue` | `number` | `undefined` | 蓝色值。 |": "|Blue | number | undefined | blue value|",
  "| `bAutoNearest` | `boolean` | `true` | 是否自动获取最近的颜色值。 |": "|BAutoNearest | boolean | true | Automatically retrieve the most recent color value|",
  "返回转换后的索引值。": "Return the converted index value.",
  "判断一个对象id是否指类类型名对象": "Determine whether an object ID refers to a class type name object",
  "// 选择目标对象\r": "//Select target object",
  "selEntity.setMessage(\"选择对象\");\r": "SelEntity. setMessage (\"Select Object\");",
  "// 判断目标对象是为多段线类\r": "//Determine if the target object is a polyline class",
  "  console.log(\"目标对象为多段线\")\r": "Console.log (\"Target object is polyline\")",
  "  console.log(\"目标对象不为多段线\")  \r": "Console.log (\"Target object is not a polyline\")",
  "| `lIdIndex` | `number` | 对象id索引 |": "|LIdIDEX | Number | Object ID Index|",
  "| `className` | `string` | 对象名称 |": "|ClassName | string | Object Name|",
  "返回布尔值": "Return Boolean value",
  "将对象 id 转换为 McDbObject 对象。": "Convert the object ID to a McDbObject object.",
  "| `lIdIndex` | `number` | 对象的 id。 |": "|The ID of the 'lIdInDdex' | 'number' | object|",
  "返回转换后的 McDbObject 对象，如果转换失败，则返回 null。": "Return the converted McDbObject object, and if the conversion fails, return null.",
  "恢复几何计算时，点和向量变量判断是否相等的默认精度范围值": "The default accuracy range value for determining whether point and vector variables are equal when restoring geometric calculations",
  "配置默认的TrueType字体": "Configure default TrueType fonts",
  "//设置默认TrueType字体为Arial.ttf\r": "//Set the default TrueType font to Arial.ttf",
  "| `sTrueTypeFontName` | `string` | TrueType字体名 |": "|STrueTypeFontName | string | TrueType font name|",
  "设置默认的视区的背景色.": "Set the default viewport background color",
  "| `red` | `number` | 红色值。 |": "|Red | Number | Red value|",
  "| `green` | `number` | 绿色值。 |": "|Green | Number | Green value|",
  "| `blue` | `number` | 蓝色值。 |": "|Blue | Number | Blue value|",
  "配置字体加载位置，默值是fonts": "Configure font loading location, default value is fonts",
  "| `path` | `string` | 字体文件路径 |": "|Path | string | Font file path|",
  "设置几何计算时，点和向量变量判断是否相等的精度范围，默认值是1.0E-7": "When setting geometric calculations, the accuracy range for determining whether point and vector variables are equal is set to 1.0E-7 by default",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McCmColor": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McCMColor",
  "表示一个颜色对象，可以通过颜色索引或 RGB 值来设置颜色。": "Representing a color object, colors can be set through color indices or RGB values.",
  "  //设置对象颜色\r": "//Set object color",
  "  // 修改对象颜色\r": "//Modify object color",
  "    // 选择标注对象\r": "//Select annotation object",
  "    getEntity.setMessage(\"选择标注对象\");\r": "GetEntity. setMessage (\"Select Annotation Object\");",
  "    let ent = id.getMcDbEntity();// 获取目标McDbEntity对象\r": "let ent = id.getMcDbEntity();//  Get the target McDbEntity object",
  "    ent.trueColor = new McCmColor(255, 0, 255);// 修改对象颜色\r": "ent.trueColor = new McCmColor(255, 0, 255);//  Modify object color",
  "构造函数。设置 RGB 值。": "Constructor. Set RGB values.",
  "| `red?` | `number` \\| `object` | 红 |": "| `red?` | ` Number ` \\ | ` object ` | Red|",
  "| `green?` | `number` | 绿 |": "| `green?` | ` Number ` | Green|",
  "| `blue?` | `number` | 蓝 |": "| `blue?` | ` Number | Blue|",
  "获取或设置rgb值中的蓝色值，设置数值范围0~255。": "Get or set the blue value in RGB, and set the numerical range from 0 to 255.",
  "获取或设置颜色索引。": "Get or set color index.",
  "color.colorIndex = ColorIndexType.kBylayer;//设置颜色随层\r": "color.colorIndex = ColorIndexType.kBylayer;// Set color to follow layers",
  "获取或设置rgb值中的绿色值，设置数值范围0~255。": "Get or set the green value in RGB, and set the numerical range to 0-255.",
  "方法。": "method.",
  "获取或设置rgb值中的红色值，设置数值范围0~255。": "Get or set the red value in RGB, and set the numerical range from 0 to 255.",
  "刻隆一个颜色对象": "Kelon, a color object",
  "返回克隆后的颜色对象": "Return the cloned color object",
  "复制颜色对象的值。": "Copy the value of a color object.",
  "| `val` | [`McCmColor`](2d.McCmColor.md) | 颜色对象 |": "|Val | [McCMColor] (2d. McCmColor. md) | Color Object|",
  "得到颜色说明字符串": "Obtain color description string",
  "颜色说明字符串": "Color description string",
  "得到颜色值字符串，十六进制格式，layerId:颜色随层时会取layerId指向的层颜色，blkRefId:颜色随块时，会取blkRefId指向的块颜色": "Obtain a color value string in hexadecimal format, layerId: The color will take the color of the layer pointed to by layerId when changing layers, blkRefId: When the color follows the block, the block color pointed to by blkRefId will be taken",
  "| `layerId?` | [`McObjectId`](2d.McObjectId.md) | 图层ID |": "| `layerId?` |  [` McObjectid `] (2d. McObjectid. md) | Layer ID|",
  "| `blkRefId?` | [`McObjectId`](2d.McObjectId.md) | 块记录ID |": "| `blkRefId?` |  [` McObjectid `] (2d. McObjectid. md) | Block record ID|",
  "颜色值字符串": "Color value string",
  "获取内部实现对象": "Retrieve internal implementation objects",
  "内部实现对象": "Internal implementation object",
  "获取 css 颜色的样式 如rgb(0, 0, 0)": "Get CSS color styles such as RGB (0,0,0)",
  "设置颜色索引,根据颜色索引值设置颜色类型。": "Set color index and set color type based on the color index value.",
  "color.setColorIndex(ColorIndexType.kBylayer);//设置颜色随层\r": "color.setColorIndex(ColorIndexType.kBylayer);// Set color to follow layers",
  "| `colorIndex` | `number` | 颜色索引。 |": "|ColorIndex | Number | Color Index|",
  "设置 RGB 值。": "Set RGB values.",
  "color.setRGB(255,0,0);//红色\r": "color.setRGB(255,0,0);// red",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDb2LineAngularDimension": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDb2LineAngularDimension",
  "角度标注尺寸类。": "Angle annotation dimension class.",
  " // 下面代码演示了，先选择需要测量角度的两条边，再设置角度标注位置，最后绘制出角度标注对象。\r": "//The following code demonstrates that first, select the two edges that need to measure the angle, then set the angle annotation position, and finally draw the angle annotation object.",
  "   const angleDim = new McDb2LineAngularDimension();// 构造新角度标注尺寸对象\r": "const angleDim = new McDb2LineAngularDimension();//  Construct new angle dimension objects",
  "   // 设置角边1起点\r": "//Set the starting point of corner 1",
  "   getPoint1.setMessage(\"\\n指定线1起点:\");\r": "GetPoint1.setMessage (\"\\ nSpecify the starting point of line 1: \");",
  "   // 设置角边1终点 \r": "//Set the endpoint of corner 1",
  "   getPoint1.setMessage(\"\\n指定线1终点:\");\r": "GetPoint1.setMessage (\"\\ nSpecify the endpoint of Line 1: \");",
  "   // 设置角边2起点\r": "//Set the starting point of corner 2",
  "   getPoint3.setMessage(\"\\n指定线2起点:\");\r": "GetPoint3. setMessage (\"\\ nSpecify the starting point of line 2: \");",
  "   // 设置角边2终点 \r": "//Set corner edge 2 endpoint",
  "   getPoint4.setMessage(\"\\n指定线2终点:\");\r": "GetPoint4. setMessage (\"\\ nSpecify the endpoint of Line 2: \");",
  "   // 设置角度标注位置\r": "//Set angle annotation position",
  "   getPoint3.setMessage(\"\\n指定标注点:\");\r": "GetPoint3. setMessage (\"\\ nSpecify annotation point: \");",
  "   // 绘制角度标注尺寸对象\r": "//Draw angle dimension objects",
  "| `imp?` | `any` | 内部实现对象 |": "| `imp?` | ` Any ` | Internal implementation object|",
  "内部实现对象。": "Internal implementation object.",
  "获取或设置角度标注在圆弧上的点": "Get or set the angle annotation point on the arc",
  "   getArcPoint.setMessage(\"\\n指定标注点:\");\r": "GetArcPoint.setMessage (\"\\ nSpecify annotation point: \");",
  "   console.log(\"输出文本标注点\" , angleDim.arcPoint)\r": "Console.log (\"Output Text Annotation Points\", angleDim. arcPoint)",
  "角度标注在圆弧上的点": "Points marked with angles on the arc",
  "得到对象颜色索引": "Obtain object color index",
  "设置对象颜色索引": "Set object color index",
  "| `val` | `number` | 颜色索引（ColorIndexType） |": "|Val | number | ColorIndexType|",
  "设置标注样式id": "Set annotation style ID",
  "//设置 dim 为有效标注实体\r": "//Set dim as a valid annotation entity",
  "console.log(\"标注样式id：\", dim.dimensionStyle)\r": "Console.log (\"Annotation Style ID: \", dim.dimensionStyle)",
  "获取或设置标注文本": "Get or set annotation text",
  "dim.dimensionText = \"测试文本\";\r": "Dim.dimensionText=\"Test Text\";",
  "console.log(\"标注文本：\", dim.dimensionText)// 测试文本\r": "Console.log (\"Annotation Text:\", dim. dimensionText)//Test Text",
  "对象的显示顺序": "Display order of objects",
  "// 假设ent为有效实例对象\r": "//Assuming ent is a valid instance object",
  "if (!await ss.userSelect(\"\\n选择对象\")) return;\r": "If (! Await ss.userSelect) return;",
  "//得到当前图上对象的最大，小最显示顺序.\r": "//Obtain the maximum and minimum display order of objects on the current graph",
  "// 把对象放到最上面。\r": "//Place the object at the top.",
  "| `order` | `number` | 顺序值 |": "|Order | number | sequential value|",
  "得到对象的DXF组码的类型名，这个和AutoCAD中的DXF组码是一样。\r": "Obtain the type name of the object's DXF group code, which is the same as the DXF group code in AutoCAD.",
  "比如直线的类型名为：McDbLine，DXF0组码值: LINE,DXF0组码值可以用来构造集时的类型过滤。": "For example, the type name of the line is McDbLine, and the group code value for DXF0 is: LINE and DXF0 group code values can be used for type filtering when constructing sets.",
  "获取或设置高度": "Get or set height",
  "console.log(\"获取高度：\", dim.elevation)\r": "Console.log (\"Get height: \", dim.elevation)",
  "获取或设置水平旋转角度": "Get or set the horizontal rotation angle",
  "console.log(\"水平旋转角度：\", dim.horizontalRotation)// 45\r": "Console.log (\"Horizontal rotation angle: \", dim.horizontalRotation)// 45",
  "水平旋转角度": "Horizontal rotation angle",
  "得到对象图层名": "Obtain the layer name of the object",
  "设置对象图层名": "Set object layer name",
  "| `val` | `string` | 图层名 |": "|Val | string | Layer Name|",
  "获取图层ID对象": "Get layer ID object",
  "设置图层Id对象": "Set Layer Id Object",
  "const layerId = mxcad.addLayer(\"测试图层\")\r": "Const layerId=mxcad. addLayer (Test Layer)",
  "得到对象线型名": "Obtain the object line type name",
  "设置对象线型名": "Set object line type name",
  "| `val` | `string` | 线型名 |": "|Val | string | Line type name|",
  "获取实体对象线型ID": "Get entity object line type ID",
  "设置实体对象线型ID": "Set entity object line type ID",
  "得到对象线型比例": "Obtain the proportion of object line types",
  "设置对象线型比例": "Set object line type scale",
  "| `val` | `number` | 线型比例 |": "|Val | number | Line type ratio|",
  "得到对象线重": "Obtain object line weight",
  "设置对象线重": "Set object line weight",
  "| `val` | `number` | 线重 |": "|Val | number | line weight|",
  "返回对象的normal": "Return the normal of the object",
  "设置对象的normal": "Set the normal of the object",
  "获取对象名称。": "Get the object name.",
  "返回对象名": "Return object name",
  "获取或设置文本附着点": "Get or set text attachment point",
  "dim.textAttachment = McDb.AttachmentPoin.kMiddleCenter//设置中心点对齐\r": "Dim.textAttachment=McDb. AttachmentPoin.kMiddleCenter//Set center point alignment",
  "console.log(\"文本附着点：\", dim.textAttachment)// 5\r": "Console.log (\"Text attachment point: \", dim.textAttachment)// 5",
  "文本附着点": "Text attachment point",
  "获取文本位置": "Get text location",
  "文本位置": "Text location",
  "设置文本位置": "Set text position",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 文本位置 |": "|Pt | McGePoint3d (2d. McGePoint3d. md) | Text Position|",
  "获取或设置文本旋转角度": "Get or set text rotation angle",
  "console.log(\"旋转角度：\", dim.textRotation)\r": "Console.log (\"Rotation angle: \", dim.textRotation)",
  "得到对象文字样式": "Obtain the text style of the object",
  "设置对象文字样式": "Set object text style",
  "| `val` | `string` | 文字样式名 |": "|Val | string | Text style name|",
  "获取实体文字样式": "Get entity text style",
  "设置实体的文字样式": "Set the text style of the entity",
  "得到对象颜色": "Obtain the color of the object",
  "设置对象颜色": "Set object color",
  "对象是否可见": "Is the object visible",
  "设置是否可见": "Set whether it is visible",
  "| `val` | `boolean` | 布尔值 |": "|Val | boolean | Boolean value|",
  "获取或设置角度标注第一个参考线的结束点": "Get or set the endpoint of the first reference line for angle annotation",
  "   getPoint2.setMessage(\"\\n指定线1终点:\");\r": "GetPoint2.setMessage (\"\\ nSpecify the endpoint of Line 1: \");",
  "角度标注第一个参考线的结束点": "Angle annotation of the end point of the first reference line",
  "获取或设置角度标注第一个参考线的开始点": "Get or set the starting point of the first reference line for angle annotation",
  "角度标注第一个参考线的开始点": "Angle annotation of the starting point of the first reference line",
  "获取或设置角度标注第二个参考线的结束点": "Get or set the endpoint of the second reference line for angle annotation",
  "角度标注第二个参考线的结束点": "Angle annotation of the end point of the second reference line",
  "获取或设置角度标注第二个参考线的开始点": "Get or set the starting point of the second reference line for angle annotation",
  "角度标注第二个参考线的开始点": "Angle annotation of the starting point of the second reference line",
  "得到标注对象中的所有文字内容": "Obtain all textual content in the annotated object",
  "//遍历dim中的所有文字\r": "//Traverse all the text in dim",
  "与其他实体相交, 得到交点": "Intersection with other entities to obtain the intersection point",
  "| `intersectObject` | [`McDbEntity`](2d.McDbEntity.md) | 需要相交的是实体对象 |": "|IntersectObject | [McDbEntity] (2d. McDbEntity. md) | The entity object that needs to intersect is the entity object|",
  "| `exOption` | [`Intersect`](../enums/2d.McDb.Intersect.md) | 相交的选项 |": "|ExOption | Intersection (../enums/2d. McDb. Intersect. md) | Intersection options|",
  "得到所有交点": "Obtain all intersection points",
  "设置对象被改变的状态，可自动触发更新显示函数，更新显示。\r": "Setting the state of the object to be changed can automatically trigger the update display function to update the display.",
  "比如块表记录更新了，需要通知块引用更新显示，可以调用该函数。": "For example, if the block table record is updated and the block reference needs to be notified to update the display, this function can be called.",
  "//假设obj为一个数据库对象\r": "//Assuming obj is a database object",
  "克隆对象。": "Clone objects.",
  "克隆出的对象。": "The cloned object.",
  "通过参数计算角度标注": "Calculate angle annotation through parameters",
  "   // 设置计算维度所需的参数\r": "//Set the parameters required for calculating dimensions",
  "   // 调用 compute 方法计算维度\r": "//Call the compute method to calculate dimensions",
  "       console.log(\"计算成功\");\r": "Console.log (\"calculation successful\");",
  "       console.error(\"计算失败\");\r": "Console. error (\"calculation failed\");",
  "| `dAngleVertexX` | `number` | 角度向量X轴值 |": "|DAngle VertexX | number | X-axis value of angle vector|",
  "| `dAngleVertexY` | `number` | 角度向量Y轴值 |": "|DAngle VertexY | number | Y-axis value of angle vector|",
  "| `dFirstEndPointX` | `number` | 标注线1结束点X轴值 |": "|DFirstEndPointX | number | End point X-axis value of annotation line 1|",
  "| `dFirstEndPointY` | `number` | 标注线1结束点Y轴值 |": "|DFirstEndPointY | number | Y-axis value of the endpoint of annotation line 1|",
  "| `dSecondEndPointX` | `number` | 标注线2结束点X轴值 |": "|DSecondEndPointX | number | End point X-axis value of annotation line 2|",
  "| `dSecondEndPointY` | `number` | 标注线2结束点Y轴值 |": "|DSecondEndPointY | number | Y-axis value of the endpoint of annotation line 2|",
  "| `dTextPointX` | `number` | 标注文字X轴值 |": "|DTextPointX | number | Annotation text X-axis value|",
  "| `dTextPointY` | `number` | 标注文字Y轴值 |": "|DTextPointY | number | Y-axis value of annotation text|",
  "创建对象的扩展字典数据.": "Create extended dictionary data for objects",
  "删除实体指定应用程序名称相关的数据": "Delete data related to entity specified application name",
  "  //删除成功\r": "//Delete successfully",
  "  //删除失败\r": "//Delete failed",
  "| `appName` | `string` | 扩展数据名称 |": "|AppName | string | Extended Data Name|",
  "禁用对象的自动更新显示.": "Disable automatic update display of objects",
  "| `isDisable` | `boolean` | 是否禁用对象自动更新显示 |": "|IsDisable | boolean | Do you want to disable automatic object update display|",
  "删除对象。": "Delete object.",
  "是否删除成功。": "Whether the deletion was successful.",
  "打碎对象，返回打后对象数据链表": "Break the object and return the linked list of the object's data after being broken",
  "getEnt.setMessage(\"选择打碎对象:\");\r": "GetEnt.setMessage (\"Select object to break: \");",
  "// 打碎对象\r": "//Smash objects",
  "resbuf 数据": "Rebuf data",
  "获取实体中包含的所有 XData 记录的应用程序名（AppName）": "Get the application name (AppName) of all XData records contained in the entity",
  "计算面积": "Calculate Area",
  "console.log(\"圆面积：\", area)\r": "Console.log (\"Circle area: \", area)",
  "val 面积值 | ret 是否获取成功": "Is the val area value | ret successfully obtained",
  "得到对象的最小外包": "Obtain the minimum outsourcing of the object",
  "text.textString = \"测试Test\";\r": "Text.textString=\"Test Test\";",
  "得到对象所在的数据库": "Get the database where the object is located",
  "返回数据库": "Return to database",
  "获取对象的索引ID": "Get the index ID of the object",
  "获取标注变量浮点数值": "Get floating-point values of annotated variables",
  "| `iType` | `number` | 标注变量类型 |": "|IType | Number | Annotate variable types|",
  "标注变量浮点数值": "Annotate variable floating-point values",
  "获取标注变量整数值": "Obtain integer values of annotated variables",
  "标注变量整数值": "Annotate the integer value of the variable",
  "获取标注变量对象 ID": "Obtain the ID of the annotated variable object",
  "标注变量对象 ID": "Annotate variable object ID",
  "获取标注变量字符串值": "Get the string value of the annotation variable",
  "标注变量字符串值": "Annotate variable string values",
  "得到对象的扩展字典数据.": "Obtain the extended dictionary data of the object",
  "扩展字典数据": "Expand dictionary data",
  "获取对象的控制点": "Get the control points of the object",
  "得到对象句柄": "Obtain object handle",
  "返回对象句柄": "Return object handle",
  "获取内部实现对象。": "Retrieve internal implementation objects.",
  "获取 JSON 格式的字符串。": "Retrieve a string in JSON format.",
  "JSON 格式的字符串。": "A string in JSON format.",
  "获取对象 ID。": "Get the object ID.",
  "对象 ID。": "Object ID.",
  "得到对象拥用者的id": "Obtain the ID of the object owner",
  "得到对象的扩展数据": "Obtain the extended data of the object",
  "| `appName` | `string` | `\"\"` | 扩展数据名 |": "|AppName | string | \"\" | Extended Data Name|",
  "获取实体的指定 XData 类型中的 double 值": "Retrieve the double value from the specified XData type of the entity",
  "double 值": "Double value",
  "获取实体的指定 XData 类型中的 long（整数）值": "Retrieve the long (integer) value from the specified XData type of the entity",
  "long 值": "Long value",
  "获取实体的指定 XData 类型中的点对象": "Retrieve point objects from the specified XData type of entity",
  "获取结果及三维点对象": "Obtain results and 3D point objects",
  "获取与特定实体关联的 XData 信息，并以字符串形式返回": "Retrieve XData information associated with a specific entity and return it in string form",
  "val XData信息 | ret 是否返回成功": "Val XData information | whether ret returns success",
  "设置对象是否高亮": "Set whether the object is highlighted",
  "| `isHighlight` | `boolean` | 是否高亮 |": "|IsHighlight | boolean | Is it highlighted|",
  "初始化临时对象。": "Initialize temporary objects.",
  "| `imp` | `any` | 内部实现对象。 |": "|'imp' | 'any' | Internal implementation object|",
  "对象是否已经删除": "Has the object been deleted",
  "是否有扩展字典数据.": "Is there any extended dictionary data available",
  "判断对象类型": "Determine object type",
  "console.log(isKind); // 输出: true 或 false\r": "console.log(isKind); //  Output: True or false",
  "| `sObjectName` | `string` | 类型名 |": "|SOrtName | string | Type Name|",
  "返回对象是否是目标类型": "Return whether the object is of the target type",
  "判断是否为空对象": "Determine if it is an empty object",
  "console.log(obj.isNull()); // 输出: true 或 false\r": "console.log(obj.isNull()); //  Output: True or false",
  "是否使用默认文本位置": "Do you want to use the default text position",
  "   //使用默认文本位置\r": "//Use default text location",
  "   //未使用默认文本位置\r": "//Default text position not used",
  "镜向对象": "Mirror oriented object",
  "| `point1` | [`McGePoint3d`](2d.McGePoint3d.md) | 镜像基点 |": "|Point1 | [McGePoint3d] (2d. McGePoint3d. md) | Mirror Base Point|",
  "移动对象": "move objects",
  "| `fromPoint` | [`McGePoint3d`](2d.McGePoint3d.md) | 移动开始点 |": "|From Point | [McGePoint3d] (2d. McGePoint3d. md) | Move the starting point|",
  "| `toPoint` | [`McGePoint3d`](2d.McGePoint3d.md) | 移动结束点 |": "|ToPoint | [McGePoint3d] (2d. McGePoint3d. md) | Move End Point|",
  "移动对象的控制点": "Control points for moving objects",
  "| `iIndex` | `number` | 索引 |": "|IIndex | Number | Index|",
  "| `dXOffset` | `number` | X轴偏移量 |": "|DXOffset | number | X-axis offset|",
  "| `dYOffset` | `number` | Y轴偏移量 |": "|DYOffset | number | Y-axis offset|",
  "| `dZOffset` | `number` | Z轴偏移量 |": "|DZOffset | number | Z-axis offset|",
  "需要更新标注块": "Need to update annotation block",
  "重新计算标注块": "Recalculate annotation blocks",
  "旋转对象": "Rotate object",
  "| `basePoint` | [`McGePoint3d`](2d.McGePoint3d.md) | 旋转基点 |": "|BasePoint | [McGePoint3d] (2d. McGePoint3d. md) | Rotate the base point|",
  "| `dRotationAngle` | `number` | 旋转角度 |": "|DRotationAngle | number | Rotation angle|",
  "缩放对象": "Scaling objects",
  "| `basePoint` | [`McGePoint3d`](2d.McGePoint3d.md) | 缩放基点 |": "|BasePoint | [McGePoint3d] (2d. McGePoint3d. md) | Scale Base Point|",
  "| `dScaleFactor` | `number` | 缩放因子（<1 缩小； >1 放大） |": "|DScaleFactor | number | scaling factor (<1 zoom out;>1 zoom in)|",
  "设置标注变量浮点数值": "Set floating-point values for annotation variables",
  "| `val` | `number` | 标注变量浮点数值 |": "|Val | number | Annotation variable floating-point value|",
  "设置标注变量整数值": "Set integer values for annotation variables",
  "| `val` | `number` | 标注变量整数值 |": "|Val | number | Annotate the integer value of the variable|",
  "设置标注变量对象 ID": "Set annotation variable object ID",
  "| `val` | [`McObjectId`](2d.McObjectId.md) | 标注变量对象 ID |": "|Val | [McObjectid] (2d. McObjectid. md) | Annotate variable object ID|",
  "设置标注变量字符串值": "Set annotation variable string value",
  "| `val` | `string` | 标注变量字符串值 |": "|Val | string | Annotate variable string value|",
  "设置 JSON 格式的字符串。": "Set a string in JSON format.",
  "| `str` | `string` | JSON 格式的字符串。 |": "|Str | string | JSON formatted string|",
  "是否设置成功。": "Is the setting successful.",
  "设置对象的扩展数据": "Set extended data for objects",
  "//设置扩展数据\r": "//Set extended data",
  "| `xdata` | [`MxCADResbuf`](2d.MxCADResbuf.md) | 扩展数据链表 |": "|Xdata | [MxCADResbuf] (2d. MxCADResbuf. md) | Extended data linked list|",
  "设置实体的指定 XData 类型中的 double 值": "Set the double value in the specified XData type of the entity",
  "  //设置成功\r": "//Setting successful",
  "  //设置失败\r": "//Setting failed",
  "| `val` | `number` | double 值 |": "|Val | number | double value|",
  "布尔值": "Boolean value",
  "设置实体的指定 XData 类型中的 long（整数）值": "Set the long (integer) value in the specified XData type of the entity",
  "| `val` | `number` | long 值 |": "|Val | number | long value|",
  "设置实体的指定 XData 类型中的点对象": "Set the point object in the specified XData type of the entity",
  "设置与特定实体关联的 XData 信息，并以字符串形式设置": "Set XData information associated with a specific entity and set it in string form",
  "是否设置成功": "Is the setting successful",
  "同步实体的数据。这个方法可能是在修改了实体的属性或者附加了新的数据之后调用的，以确保所有的改变都被正确地保存到实体的数据库记录中。": "Synchronize entity data. This method may be called after modifying the entity's attributes or attaching new data to ensure that all changes are correctly saved to the entity's database records.",
  "  //同步成功\r": "//Synchronization successful",
  "  //同步失败\r": "//Synchronization failed",
  "| `_toCpp` | `boolean` | `true` | 是否同步数据 |": "|_toCpp | boolean | true | Whether to synchronize data|",
  "变换对象": "Transform object",
  "   matrix.setToTranslation(new McGeVector3d(20,0,0));//平移\r": "matrix.setToTranslation(new McGeVector3d(20,0,0));// translation",
  "| `transformationMatrix` | [`McGeMatrix3d`](2d.McGeMatrix3d.md) | 变换矩阵 |": "|TransformationMatrix | [McGeMatrix3d] (2d. McGeMatrix3d. md) | Transformation Matrix|",
  "反删除对象。": "Anti delete object.",
  "显示调用对象更新显示.": "Display the updated display of the calling object",
  "使用默认文本位": "Use default text bits",
  "使用设置的文本位置": "Use the set text position",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbAlignedDimension": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbAlignedDimension",
  "对齐标注尺寸类。": "Align dimension classes.",
  "  //绘制对齐标注\r": "//Draw alignment annotations",
  "  const mDimension = new McDbAlignedDimension() // 构造对齐标注对象 \r": "Const mDimension=new McDbAligndDimension()//Construct aligned annotation objects",
  "  mDimension.xLine1Point = new McGePoint3d(-1800, 800) // 设置对象第一条线的端点\r": "MDimension.xLine1Point=new McGePoint3d (-1800, 800)//Set the endpoint of the first line of the object",
  "  mDimension.xLine2Point = new McGePoint3d(1800,800) // 设置对象第二条线的端点\r": "MDimension.xLine2Point=new McGePoint3d (1800800)//Set the endpoint of the second line of the object",
  "  mDimension.dimLinePoint = new McGePoint3d(800, 500) // 设置对象标注线的端点\r": "MDimension. dimLinePoint=new McGePoint3d (800, 500)//Set the endpoints of object annotation lines",
  "  mDimension.textAttachment = McDb.AttachmentPoint.kTopLeft // 设置对象文本对齐方式\r": "MDimension. textAttachment=McDb. AttachmentPoint. kTopLeft//Set object text alignment",
  "  mDimension.trueColor = new McCmColor(200, 255, 0) // 设置对象颜色\r": "MDimension. TrueColor=new McCMColor (200, 255, 0)//Set object color",
  "  mDimension.oblique = 0 // 设置对象倾斜角度\r": "MDimension.oblique=0//Set object tilt angle",
  "  MxCpp.getCurrentMxCAD().drawEntity(mDimension); //绘制对齐标注对象\r": "MxCpp.getCurrentMxCAD().drawEntity(mDimension); // Draw aligned annotation objects",
  "获取标注线的端点": "Get the endpoint of the annotation line",
  "//mDimension 为有效对齐标注尺寸\r": "//MDimension effectively aligns annotation dimensions",
  "标注线的端点": "Endpoint of annotation line",
  "设置标注线的端点": "Set the endpoints of annotation lines",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 标注线的端点 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | Endpoint of annotation line|",
  "获取倾斜角度": "Obtain the tilt angle",
  "倾斜角度": "Tilt angle",
  "设置倾斜角度": "Set the tilt angle",
  "| `val` | `number` | 倾斜角度 |": "|Val | number | Tilt angle|",
  "获取第一条线的端点": "Get the endpoint of the first line",
  "第一条线的端点": "The endpoint of the first line",
  "设置第一条线的端点": "Set the endpoint of the first line",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 第一条线的端点 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | Endpoint of the first line|",
  "获取第二条线的端点": "Get the endpoint of the second line",
  "第二条线的端点": "The endpoint of the second line",
  "设置第二条线的端点": "Set the endpoint of the second line",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 第二条线的端点 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | Endpoint of the second line|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbArc": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbArc",
  "表示一个圆弧。": "Represents a circular arc.",
  "  // 绘制圆弧\r": "//Draw an arc",
  "  const arc = new McDbArc() // 构造新圆弧对象\r": "Const arc=new McDbArc()//Construct a new arc object",
  "  arc.center = new McGePoint3d(0,0,0) // 设置圆弧圆心\r": "Arc.center=new McGePoint3d (0,0,0)//Set the center of the arc",
  "  arc.radius = 20 // 设置圆弧半径\r": "Arc.radius=20//Set the radius of the arc",
  "  arc.startAngle = Math.PI / 2 // 设置圆弧开始角度\r": "Arc.startAngle=Math.PI/2//Set the starting angle of the arc",
  "  arc.endAngle = Math.PI * 3 / 2 // 设置圆弧结束角度\r": "Arc.EndAngle=Math. PI * 3/2//Set the end angle of the arc",
  "  arc.trueColor = new McCmColor(255, 233, 0) // 设置圆弧颜色\r": "Arc.trueColor=new McCMColor (255, 233, 0)//Set the color of the arc",
  "  MxCpp.getCurrentMxCAD().drawEntity(arc) // 绘制圆弧\r": "MxCpp. getCurrentMxCAD(). drawEntity (arc)//Draw an arc",
  "构造函数。": "Constructor.",
  "| `imp?` | `any` | 内部对象。 |": "| `imp?` | ` Any ` | Internal object|",
  "获取圆心坐标。": "Obtain the center coordinates.",
  "console.log(\"圆心\",center);//(0,0,0)\r": "Console.log (\"center\", center);//(0,0,0)",
  "设置圆心坐标。": "Set the center coordinates.",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 圆心坐标。 |": "|Pt | McGePoint3d (2d. McGePoint3d. md) | Center coordinates|",
  "获取结束角度。": "Obtain the end angle.",
  "// arc 为有效圆弧实例\r": "//Arc is an effective arc instance",
  "设置结束角度。": "Set the end angle.",
  "| `r` | `number` | 角度。 |": "|R | number | angle|",
  "获取圆半径。": "Obtain the radius of the circle.",
  "设置圆半径。": "Set the radius of the circle.",
  "| `r` | `number` | 圆半径。 |": "|R | number | circle radius|",
  "获取开始角度。": "Obtain the starting angle.",
  "设置开始角度。": "Set the starting angle.",
  "3点计算圆弧": "Calculate the arc at 3 points",
  "得到一个点到曲线的最近点": "Obtain the closest point from a point to the curve",
  "  //获取pt到circle上最近的点\r": "//Get pt to the nearest point on the circle",
  "| `givenPnt` | [`McGePoint3d`](2d.McGePoint3d.md) | 参考点 |": "|GivenPnt | [McGePoint3d] (2d. McGePoint3d. md) | Reference Point|",
  "| `isExtend` | `boolean` | 是否延展实体 |": "|IsExtend | boolean | Whether to extend entity|",
  "点对象及执行结果。": "Point objects and execution results.",
  "获取参数位置上的距离。": "Get the distance at the parameter location.",
  "// 假设curve为有效曲线实例对象\r": "//Assuming curve is an effective curve instance object",
  "| `param` | `number` | 参数位置。 |": "|Parameter position:|",
  "距离及执行结果。": "Distance and execution results.",
  "获取曲线上点的距离位置。": "Obtain the distance and position of points on the curve.",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 距离位置。 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | Distance position|",
  "点及执行结果。": "Points and execution results.",
  "获取结束参数。": "Get the end parameter.",
  "结束参数及执行结果。": "End parameters and execution results.",
  "得到曲线的结束点": "Obtain the endpoint of the curve",
  "曲线的结束点及执行结果。": "The endpoint and execution result of the curve.",
  "通过曲线上某点得到曲线的一阶导数": "Obtain the first derivative of the curve through a certain point on the curve",
  "const vec = circle.getFirstDeriv(new McGePoint3d(20,0,0));//目标点切向量\r": "const vec = circle.getFirstDeriv(new McGePoint3d(20,0,0));// Target point tangent vector",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 曲线上的点 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | Points on the curve|",
  "曲线一阶导数及执行结果。": "The first derivative of the curve and its execution result.",
  "通过曲线参数得到曲线的一阶导数": "Obtain the first derivative of the curve through curve parameters",
  "| `param` | `number` | 曲线参数 |": "|Param | number | curve parameters|",
  "得到曲线长度": "Obtain the length of the curve",
  "   let aryId = await MxCADUtility.userSelect(\"选择目标曲线\", filter);\r": "Let aryId=await MxCADUtility. userSelect (\"Select target curve\", filter);",
  "获取距离位置上的参数。": "Obtain parameters at the distance position.",
  "| `dist` | `number` | 距离位置。 |": "|Dist | Number | Distance Position|",
  "参数及执行结果。": "Parameters and execution results.",
  "得到曲线某点位置的曲线参数": "Obtain the curve parameters at a certain point on the curve",
  "曲线参数及执行结果。": "Curve parameters and execution results.",
  "获取距离位置上的点。": "Obtain the point at the distance position.",
  "得到曲线参数所在的点坐标": "Obtain the coordinates of the point where the curve parameters are located",
  "把曲线离散成一堆点": "Discretize the curve into a pile of points",
  "| `dApproxEps` | `number` | `0.0001` | 采样间隔 |": "|DApproxEps | number | 0.0001 | sampling interval|",
  "获取起始参数。": "Get the starting parameters.",
  "起始参数及执行结果。": "Initial parameters and execution results.",
  "得到曲线的开始点": "Obtain the starting point of the curve",
  "曲线的开始点及执行结果。": "The starting point and execution result of the curve.",
  "得到偏移曲线": "Obtain offset curve",
  "   getEvent.setMessage('指定偏移对象');\r": "GetEvent.setMessage ('Specify offset object ');",
  "   getoOffPt.setMessage('指定偏移点');\r": "GetoOffPt.setMessage ('specify offset point ');",
  "| `dOffsetDist` | `number` | 偏移距离 |": "|DOffsetDist | number | offset distance|",
  "| `ptOffsetRef` | [`McGePoint3d`](2d.McGePoint3d.md) | 偏移点 |": "|PtOffsetRef | [McGePoint3d] (2d. McGePoint3d. md) | Offset point|",
  "偏移后的对象数组。": "Offset object array.",
  "| `x` | `number` | 圆心 x 坐标。 |": "|X | number | The x-coordinate of the center of the circle|",
  "| `y` | `number` | 圆心 y 坐标。 |": "|Y | number | The y-coordinate of the center of the circle|",
  "| `z?` | `number` | 圆心 z 坐标。 |": "| `z?` | ` Number ` | Center z-coordinate|",
  "打断曲线": "Detach Curves ",
  "// PointsArr:断点数组 event:McDbCurve\r": "//PointsArr: breakpoint array event: McDbCurve",
  "| `pts` | [`McGePoint3d`](2d.McGePoint3d.md)[] | 断点数组 |": "|Pts | McGePoint3d (2d. McGePoint3d. md) | breakpoint array|",
  "打断后的曲线数组。": "Interrupted curve array.",
  "根据曲线参数打断曲线": "Break the curve based on the curve parameters",
  "| `params` | `number`[] | 曲线参数数组 |": "|Params | number [] | curve parameter array|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbAttribute": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbAttribute",
  "块引用中的属性定义文字类": "Attribute definition text class in block reference",
  "   // 遍历块中的属性文字 ent:块实体\r": "//Traverse the attribute text ent in the block: block entity",
  "   // 在块中插入属性文字 ent:块实体\r": "//Insert attribute text ent: block entity in the block",
  "   const blkrecId = blkRef.blockTableRecordId; // 获取块表记录id\r": "const blkrecId = blkRef.blockTableRecordId; //  Retrieve the block table record ID",
  "   let blkRecord: any = blkrecId.getMcDbBlockTableRecord();// 获取块表记录对象\r": "let blkRecord: any = blkrecId.getMcDbBlockTableRecord();//  Retrieve block table record object",
  "   let ids = blkRecord.getAllEntityId(); // 获取块表记录中所有实例对象ID\r": "let ids = blkRecord.getAllEntityId(); //  Retrieve all instance object IDs from the block table record",
  "       // 筛选 McDbAttributeDefinition 对象\r": "//Filter McDbAttributeDefinition objects",
  "       let tag = attribDef.tag; // 获取属性标签\r": "let tag = attribDef.tag; //  Get attribute labels",
  "       let txt = attribDef.textString; // 获取文字的字符串": "let txt = attribDef.textString; //  Retrieve the string of text",
  "       let attrib = new McDbAttribute(); // 构造新属性定义文字对象\r": "let attrib = new McDbAttribute(); //  Construct a new attribute definition text object",
  "       attrib.position = attribDef.position; // 设置对象位置\r": "attrib.position = attribDef.position; //  Set object position",
  "       attrib.alignmentPoint = attribDef.alignmentPoint // 设置对象对齐位置\r": "Attribution. alignmentPoint=attribution Def. alignmentPoint//Set object alignment position",
  "       attrib.height = attribDef.height ; // 设置对象字高\r": "attrib.height = attribDef.height ; //  Set object font height",
  "       attrib.trueColor = attribDef.trueColor // 设置对象颜色\r": "Attributes. trueColor=attributes Def. trueColor//Set object color",
  "       attrib.widthFactor = attribDef.widthFactor; // 设置对象宽度因子\r": "attrib.widthFactor = attribDef.widthFactor; //  Set object width factor",
  "       // 设置文字的字符串\r": "//Set the string of text",
  "       attrib.tag = tag;// 设置属性标签\r": "attrib.tag = tag;//  Set attribute labels",
  "       attrib.transformBy(blkRef.blockTransform); // 块转换\r": "attrib.transformBy(blkRef.blockTransform); //  Block conversion",
  "| `imp?` | `any` | 实现对象。 |": "| `imp?` | ` Any ` | Implement object|",
  "获取文字的对齐点。": "Get the alignment point of the text.",
  "// 假设text为有效文本实体\r": "//Assuming text is a valid text entity",
  "设置文字的对齐点。": "Set the alignment point of the text.",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 三维点向量 |": "|Pt | McGePoint3d (2d. McGePoint3d. md) | 3D point vector|",
  "获取文字的高度。": "Get the height of the text.",
  "设置文字高度": "Set text height",
  "| `val` | `number` | 高度 |": "|Val | number | height|",
  "获取文字的水平对齐方式。": "Obtain the horizontal alignment of the text.",
  "设置文字的水平对齐方式。": "Set the horizontal alignment of text.",
  "| `val` | [`TextHorzMode`](../enums/2d.McDb.TextHorzMode.md) | 文字水平对齐方式 |": "|Val | [TextHorzMode] (../enums/2d. McDb. TextHorzMode. md) | Horizontal alignment of text|",
  "获取块属性文字是否可见": "Obtain whether the block attribute text is visible",
  "  //属性可见\r": "//Visible attributes",
  "  //属性不可见\r": "//Attribute is not visible",
  "设置块属性文字是否不可见": "Set whether block attribute text is invisible",
  "attrib.isInvisible = false;// 设置属性可见\r": "attrib.isInvisible = false;//  Set attribute visibility",
  "attrib.isInvisible = true;// 设置属性不可见": "attrib.isInvisible = true;//  Setting attributes to be invisible",
  "获取文字的倾斜角度。": "Obtain the tilt angle of the text.",
  "设置文字的倾斜角度。": "Set the tilt angle of the text.",
  "获取文字的位置。": "Retrieve the location of the text.",
  "设置文字的位置。": "Set the position of the text.",
  "获取文字的旋转角度。": "Get the rotation angle of the text.",
  "设置文字的旋转角度。": "Set the rotation angle of the text.",
  "获取文字的字符串。": "Retrieve a string of text.",
  "设置文字的字符串。": "Set the string of text.",
  "text.textString = \"测试文本\";\r": "Text.textString=\"Test Text\";",
  "console.log(text.textString)//测试文本\r": "Console. log (text. textString)//Test Text",
  "| `val` | `string` | 字符串 |": "|Val | string | string|",
  "获取文字的垂直对齐方式。": "Get the vertical alignment of the text.",
  "设置文字的垂直对齐方式。": "Set the vertical alignment of text.",
  "| `val` | [`TextVertMode`](../enums/2d.McDb.TextVertMode.md) | 文字垂直对齐方式 |": "|Val | [TextVertMode] (../enums/2d. McDb. TextVertMode. md) | Vertical alignment of text|",
  "获取文字的宽度因子。": "Get the width factor of the text.",
  "设置文字的宽度因子。": "Set the width factor of the text.",
  "| `val` | `number` | 宽度因子 |": "|Val | number | width factor|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbAttributeDefinition": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbAttributeDefinition",
  "用于定义块属性的属性定义，并提供了一些方法来获取和设置属性的各种参数": "Used to define attribute definitions for block properties, and provides methods to obtain and set various parameters of attributes",
  "获取指示属性是否是常量": "Get whether the indicator property is a constant",
  "设置指示属性是否是常量": "Set whether the indicator property is a constant",
  "attribute.isConstant = true; // 设置属性为常量\r": "attribute.isConstant = true; //  Set properties as constants",
  "console.log(attribute.isConstant); // 获取属性是否是常量\r": "console.log(attribute.isConstant); //  Obtain whether the attribute is a constant",
  "获取是否可见": "Get whether it is visible or not",
  "attribute.isInvisible = true; // 设置属性为不可见\r": "attribute.isInvisible = true; //  Set attribute to invisible",
  "attribute.isInvisible = false; // 设置属性为可见\r": "attribute.isInvisible = false; //  Set attribute to visible",
  "console.log(attribute.isInvisible); // 获取属性是否可见\r": "console.log(attribute.isInvisible); //  Obtain whether the attribute is visible",
  "获取属性是否预设": "Get whether the attribute is preset",
  "设置属性是否预设": "Set whether the attribute is preset or not",
  "attribute.isPreset = true; // 设置属性预设\r": "attribute.isPreset = true; //  Set attribute presets",
  "console.log(attribute.isPreset); // 获取属性是否预设\r": "console.log(attribute.isPreset); //  Get whether the attribute is preset",
  "获取属性是否可验证": "Is the attribute verifiable",
  "设置属性是否可验证": "Is the property verifiable",
  "attribute.isVerifiable = true; // 设置属性可验证\r": "attribute.isVerifiable = true; //  Set properties for verification",
  "console.log(attribute.isVerifiable); // 获取属性是否可验证\r": "console.log(attribute.isVerifiable); //  Is the attribute verifiable",
  "获取插入块实例时，提示用户输入值的文本": "When obtaining an inserted block instance, prompt the user to enter the text of the value",
  "设置插入块实例时，提示用户输入值的文本": "When setting the insertion block instance, prompt the user to enter the text of the value",
  "attribute.prompt = \"Enter value here\"; // 设置属性的提示文本\r": "attribute.prompt = \"Enter value here\"; //  Prompt text for setting attributes",
  "console.log(attribute.prompt); // 获取属性的提示文本\r": "console.log(attribute.prompt); //  Prompt text for obtaining attributes",
  "设置文字的字符串": "Set the string of text",
  "attribute.tag = \"TagName\"; // 设置属性标签\r": "attribute.tag = \"TagName\"; //  Set attribute labels",
  "console.log(attribute.tag); // 获取属性标签\r": "console.log(attribute.tag); //  Get attribute labels",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbBackgroundEntity": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbContextEntity",
  "背景绘制对象": "Background drawing object",
  "清空所有背景显示": "Clear all background displays",
  "清空背景显示": "Clear background display",
  "返回背景显示使用的数据库对象.": "Return the database object used for background display",
  "是否显示背景对象": "Whether to display background objects",
  "设置是否显示背景对象": "Set whether to display background objects",
  "显示背景时使用指定颜色替换显示": "Replace the display with the specified color when displaying the background",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbBlockReference": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbBlockReference",
  "表示一个 CAD 图块引用实体，一个块参考用于放置、缩放和显示它参考的McDbBlockTableRecord中的一个实体集合的实例": "Represents a CAD block reference entity, a block reference used to place, scale, and display an instance of a set of entities in the McDbBlockTableRecord it references",
  "//插入图块\r": "//Insert block",
  "   // blkFilePath:图块路径，插入图块\r": "//BlkFilePath: Block path, insert block",
  "       // 插入图块\r": "//Insert block",
  "   // 构造一个新图块引用实体对象\r": "//Construct a new block to reference entity objects",
  "   // 设置图块记录对象ID\r": "//Set block record object ID",
  "   // 得到图块的最小外包\r": "//Obtain the minimum outsourcing of the block",
  "   // 设置图块插入点\r": "//Set block insertion point",
  "   getPoint.setMessage(\"\\指定插入基点\");\r": "GetPoint.setMessage (\"\\ Specify insertion base point\");",
  "   // 动态绘制图块\r": "//Dynamically drawing blocks",
  "   blkRef.position = pt;// 设置块位置\r": "blkRef.position = pt;//  Set block position",
  "   let newBlkRefId = mxcad.drawEntity(blkRef);// 绘制图块\r": "let newBlkRefId = mxcad.drawEntity(blkRef);//  Draw blocks",
  "初始化一个新的 McDbBlockReference 实例。": "Initialize a new McDbBlockReference instance.",
  "| `imp?` | `any` | 可选，用于初始化实例的 C++ 对象。 |": "| `imp?` | ` Any ` | Optional, used to initialize the C++object of the instance|",
  "获取块名": "Get block name",
  "// blkRef 为有效CAD 图块引用实体\r": "//BlkRef is a valid CAD block reference entity",
  "块名": "Block name",
  "获取或设置该实体所引用的图块的 ID。": "Get or set the ID of the block referenced by the entity.",
  "  let blkRecId = blkTable.add(new McDbBlockTableRecord());//图块记录\r": "let blkRecId = blkTable.add(new McDbBlockTableRecord());// Block Record",
  "获取或设置该实体所引用的图块的变换矩阵。": "Retrieve or set the transformation matrix of the block referenced by the entity.",
  "获取或设置该实体的位置。": "Retrieve or set the location of the entity.",
  "获取或设置该实体的旋转角度。": "Get or set the rotation angle of the entity.",
  "   import { McDbBlockReference } from 'mxcad'; // 假设这是你的类和库": "import { McDbBlockReference } from 'mxcad'; //  Assuming this is your class and library",
  "   console.log('Current rotation:', rotation); // 输出当前旋转角度\r": "console.log('Current rotation:', rotation); //  Output the current rotation angle",
  "获取或设置该实体的缩放因子。": "Get or set the scaling factor of the entity.",
  "   // 获取初始缩放因子\r": "//Obtain the initial scaling factor",
  "   console.log('Initial Scale Factors:', initialScaleFactors); // 输出初始缩放因子\r": "console.log('Initial Scale Factors:', initialScaleFactors); //  Output initial scaling factor",
  "   // 设置新的缩放因子\r": "//Set a new scaling factor",
  "   const newScaleFactors = new McGePoint3d(2, 2, 2); // 假设将缩放因子设置为 (2, 2, 2)\r": "const newScaleFactors = new McGePoint3d(2, 2, 2); //  Assuming the scaling factor is set to (2, 2, 2)",
  "   // 再次获取缩放因子\r": "//Retrieve the scaling factor again",
  "   console.log('Updated Scale Factors:', updatedScaleFactors); // 输出更新后的缩放因子\r": "console.log('Updated Scale Factors:', updatedScaleFactors); //  Output updated scaling factor",
  "添加属性文字对象": "Add attribute text object",
  "| `attrib` | [`McDbAttribute`](2d.McDbAttribute.md) | 属性定义文字 |": "|Attribute | [McDbAttribute] (2d. McDbAttribute. md) | Attribute Definition Text|",
  "对象Id": "Object Id",
  "清空当前剪切边界显示缓存，当前边界对象被修改后，使用该函数清理缓存，更新显示.": "Clear the current cutting boundary display cache. After the current boundary object is modified, use this function to clear the cache and update the display",
  "通过块表记录中的属性定义创建属性文字对象": "Create attribute text objects by defining attributes in block table records",
  "  //创建成功\r": "//Created successfully",
  "  //创建失败\r": "//Creation failed",
  "创建剪切边界对象，如果剪切边界已经存在就直接返回": "Create a cutting boundary object, and if the cutting boundary already exists, return it directly",
  "得到块引用的所有属性文字对象id": "Obtain all attribute text object IDs for block references",
  "属性文字对象id数组": "Attribute Text Object ID Array",
  "得到剪切边界对象": "Obtain the cutting boundary object",
  "设置和获取对象的缩放比例": "Set and retrieve the scaling ratio of objects",
  "   // 设置缩放比例为 2\r": "//Set the zoom ratio to 2",
  "   // 获取缩放比例\r": "//Get zoom ratio",
  "   console.log('Current Scale:', scale); // 输出当前缩放比例\r": "console.log('Current Scale:', scale); //  Output the current scaling ratio",
  "| `val` | `number` | 缩放比例 |": "|Val | number | scaling ratio|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbBlockTable": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbBlockTable",
  "数据库中的块表类，块表中存放着块表记录。": "The block table class in the database stores block table records.",
  "//遍历图纸中的所有图块\r": "//Traverse all blocks in the drawing",
  "// 获取块表对象\r": "//Get block table object",
  "// 获取块表中的所有记录对象id\r": "//Retrieve all record object IDs from the block table",
  "//遍历记录对象id，获取块表记录对象详情\r": "//Traverse the record object ID to obtain the details of the block table record object",
  "| `imp?` | `any` | 内部实现对象。 |": "| `imp?` | ` Any ` | Internal implementation object|",
  "向块表中添加图块记录。": "Add block records to the block table.",
  "| `rec` | `string` \\| [`McDbBlockTableRecord`](2d.McDbBlockTableRecord.md) | 图块记录对象。 |": "|Rec | string \\ | [McDbBlockTableRecord] (2d. McDbBlockTableRecord. md) | Block record object|",
  "新增图块记录对象ID。": "Add block record object ID.",
  "查找块表中的图块记录。": "Search for block records in the block table.",
  "blkRec.name = \"测试图块\";\r": "BlkRec.name=\"Test Block\";",
  "const objId = blockTable.get(\"测试图块\");\r": "Const objId=blockTable.get (\"test block\");",
  "| `sName` | `string` | `undefined` | 图块记录名称。 |": "|SName | string | undefined | Block record name|",
  "| `skipDeleted` | `boolean` | `true` | 是否跳过已删除图块记录。 |": "|SkipDeleted | boolean | true | Do you want to skip deleted tile records|",
  "图块记录对象ID。": "Block record object ID.",
  "获取块表中的所有图块记录的ID。": "Retrieve the IDs of all block records in the block table.",
  "ret 图块记录ID数组。": "Ret block record ID array.",
  "检查块表中是否存在指定名称的图块记录。": "Check if there is a block record with the specified name in the block table.",
  "const res = blockTable.has(\"测试图块\");\r": "Const res=blockTable.Has (\"test block\");",
  "| `sName` | `string` | 图块记录名称。 |": "|SName | string | Block record name|",
  "布尔值。": "Boolean value.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbBlockTableRecord": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbBlockTableRecord",
  "数据库的块表记录对象，实现了对图块的属性相关操作函数。": "The block table of the database records objects and implements attribute related operation functions for graph blocks.",
  "   // 添加图块\r": "//Add Block",
  "   // 根据ObjectId再次得到刚刚添加的图块记录\r": "//Retrieve the newly added block record again based on the Object ID",
  "   // 添加两条线段再图块记录中 这里每条线段的具体属性比如开始点和结束点自行赋值\r": "//Add two line segments and assign specific attributes to each segment in the block record, such as the starting and ending points",
  "   // 设置图块的基点 一般是包围盒内的点， 可以任意指定\r": "//The base point for setting the block is usually the point inside the bounding box, which can be arbitrarily specified",
  "   // 实例化块参照 这里需要设置我们刚刚添加图块记录得到的ObjectId\r": "//Instantaneous block reference here requires setting the Object Id obtained from the block record we just added",
  "   // 最后设置位置 渲染图块\r": "//Finally, set the position to render the image block",
  "   // 改块颜色\r": "//Change the color of the block",
  "       // 选择目标块\r": "//Select target block",
  "       filter.AddMcDbEntityTypes(\"INSERT\");// 设置过滤器，选择块对象\r": "filter.AddMcDbEntityTypes(\"INSERT\");//  Set filters and select block objects",
  "       getBlockEvent.setMessage('选择需要修改基点的块');\r": "GetBlockEvent. setMessage ('Select the block that needs to modify the base point');",
  "       // 块实体\r": "//Block entity",
  "       Mx_ModyfBlockRecordEntityColor(blkRec);// 设置块颜色类型为随块": "Mx_ModyfBlockRecordEntityColor(blkRec);//  Set the block color type to follow the block",
  "       // 设置块颜色\r": "//Set block color",
  "       getColor.setMessage('输入颜色索引(0~256)');\r": "GetColor.setMessage ('Enter color index (0~256)');",
  "   // 设置块颜色类型\r": "//Set block color type",
  "获取或设置名称。": "Get or set the name.",
  "// 假设blkRec为一个有效的块表记录对象\r": "//Assuming blkRec is a valid block table record object",
  "blkRec.name = \"测试图块名\";\r": "BlkRec.name=\"Test Block Name\";",
  "console.log(blkRec.name);//测试图块名\r": "console.log(blkRec.name);// Test block name",
  "图块原点": "Block origin",
  "console.log(\"图块原点\", blkRec.origin)//(0,0,0)\r": "Console.log (\"Block Origin\", blkRec. origin)//(0,0,0)",
  "三维点向量": "3D point vector",
  "给图块添加对应实体": "Add corresponding entities to the block",
  "| `pEntity` | [`McDbEntity`](2d.McDbEntity.md) | 实体 |": "|PEntity | [McDbEntity] (2d. McDbEntity. md) | Entity|",
  "对象id": "Object ID",
  "获取图块中所有实体的对象ID": "Get the object IDs of all entities in the block",
  "得到图块最小外包，获取图块的最大点和最小点": "Obtain the minimum outsourcing of the block, and obtain the maximum and minimum points of the block",
  "  console.log(\"最小点\", retVal.minPt);\r": "Console.log (\"minimum point\", retVal. minPt);",
  "  console.log(\"最大点\", retVal.maxPt);\r": "Console.log (\"maximum point\", retVal. maxPt);",
  "minPt:最小点 | maxPt:最大点 | ret:是否获取成功": "minPt: Minimum point | maxPt: Maximum point | ret: Was it successfully obtained",
  "返回块表记录中所有对象的最小，最大显示顺序.": "Return the minimum and maximum display order of all objects in the block table record",
  "// 获取最小和最大绘制顺序\r": "//Obtain the minimum and maximum drawing order",
  "// 打印结果\r": "//Print results",
  "console.log(\"最小绘制顺序:\", minDrawOrder);\r": "Console.log (Minimum drawing order: \", minDrawOrder);",
  "console.log(\"最大绘制顺序:\", maxDrawOrder);\r": "Console.log (Maximum drawing order: \", maxDrawOrder);",
  "minDrawOrder: 最小显示顺序 | maxDrawOrder: 最大显示顺序": "minDrawOrder:  Minimum Display Order | maxDrawOrder: Maximum Display Order",
  "使边界框缓冲区无效化，强制重新计算或更新边界框信息": "Invalidate the bounding box buffer, force recalculation or update of bounding box information",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbCircle": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbCircle",
  "表示圆实体类。": "Represents the class of circular solids.",
  "//绘制一个圆心在原点，半径为20的圆\r": "//Draw a circle with a center at the origin and a radius of 20",
  " //交互绘圆\r": "//Interactive Circle Drawing",
  "   // 获取当前绘线颜色\r": "//Get the current line color",
  "   circle.trueColor = new McCmColor(drawColor) //设置圆颜色\r": "Circle. trueColor=new McCMColor (drawColor)//Set the color of the circle",
  "   // 循环取点\r": "//Loop sampling",
  "       getPoint.setKeyWords(\"[三点(3P)/两点(2P)]\");// 设置关键词\r": "GetPoint. setKeyWords (\"[3P/2P]\");//Set keywords",
  "       // 设置圆心    \r": "//Set the center of the circle",
  "           getPoint.setMessage(\"\\n指定圆的圆心\");\r": "GetPoint.setMessage (\"\\ nSpecify the center of a circle\");",
  "       // 设置半径\r": "//Set radius",
  "           getDist.setKeyWords(\"[直径(D)]\");\r": "GetDist. setKeyWords (\"[diameter (D)]\");",
  "           getDist.setMessage(_ML_String(\"McDbCircle_Radius\", \"指定圆的\" + (isRadius ? \"半径\" : \"直径\")));\r": "GetDist.setMessage (aML_String (\"McDbCircle-Radius\", \"specifying circle\"+(isRadius? \"Radius\": \"diameter\")));",
  "           // 动态绘制圆\r": "//Dynamically draw circles",
  "           getDist.setMessage(_ML_String(\"McDbCircle_Diameter\", \"指定圆的直径\"));\r": "GetDist. setMessage (_String (\"McDbCircle_Diameter\", \"Specify the diameter of the circle\");",
  "           getPoint.setMessage(\"指定圆上的第一个点\")\r": "GetPoint.setMessage (\"Specify the first point on the circle\")",
  "           getPoint.setMessage(\"指定圆上的第二个点\")\r": "GetPoint.setMessage (\"Specify the second point on the circle\")",
  "           getPoint.setMessage(\"指定圆上的第三个点\")\r": "GetPoint.setMessage (\"Specify the third point on the circle\")",
  "           getPoint.setMessage(\"指定圆直径的第一个端点\")\r": "GetPoint.setMessage (\"Specify the first endpoint of the circle diameter\")",
  "           getPoint.setMessage(\"指定圆直径的第二个端点\")\r": "GetPoint.setMessage (\"Specify the second endpoint of the circle diameter\")",
  "//绘制一个圆心在原点，半径为10的圆\r": "//Draw a circle with a center at the origin and a radius of 10",
  "circle.setCenter(20, 10, 0)//设置圆心在(20, 10, 0);\r": "Circle. setCenter (20, 10, 0)//Set the center of the circle to (20, 10, 0);",
  "circle.setCenter(0, 0, 0)//设置圆心在(0,0,0)\r": "Circle. setCenter (0,0,0)//Set the center of the circle to (0,0,0)",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbCurve": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbCurve",
  "表示数据库曲线。实现了曲线的相关操作，如求曲线的长度，最近点，面积，曲线上任一点在曲线上的长度 切向方向，曲线交点，坐标变换，打断，偏移，离散等功能。": "Representing the database curve. Implemented operations related to curves, such as calculating the length, nearest point, area, tangential direction of any point on the curve, intersection points, coordinate transformation, interruption, offset, discretization, and other functions.",
  "// 下面代码演示了，选择一个曲线，然后选择其它曲线，计算曲线与这个曲线的交点，然后在交点处打断曲线。\r": "//The following code demonstrates selecting a curve, then selecting another curve, calculating the intersection point between the curve and this curve, and then breaking the curve at the intersection point.",
  "       // 选择参考曲线\r": "//Select reference curve",
  "       eventObj.setMessage(\"请选择参考曲线\");\r": "EventObj.setMessage (\"Please select reference curve\");",
  "       let event = await eventObj_id.getMcDbEntity()//获取实例对象\r": "Let event=await eventObj_id. getMcDbEntity ()//Get instance object",
  "       let curve = event.clone();// 克隆曲线\r": "let curve = event.clone();//  Clone Curve",
  "       //设置过滤器 选中圆类、圆弧类、直线类、多段线类、椭圆类\r": "//Set filters to select circles, arcs, lines, polylines, and ellipses",
  "       let aryId = await MxCADUtility.userSelect(\"选择打断对象\", filter);//选中对象的id\r": "Let aryId=await MxCADUtility. userSelect (\"select interrupt object\", filter);//ID of the selected object",
  "       // 遍历选中的曲线对象\r": "//Traverse the selected curve object",
  "               let breakEvent: McDbCurve = (await id.getMcDbEntity()) as McDbCurve;// 获取打断曲线的实例\r": "let breakEvent: McDbCurve = (await id.getMcDbEntity()) as McDbCurve;//  Obtain an instance of a broken curve",
  "               let breakArr = breakEvent.IntersectWith(curve as McDbEntity, McDb.Intersect.kOnBothOperands);//与实体相交的点集合\r": "let breakArr = breakEvent.IntersectWith(curve as McDbEntity, McDb.Intersect.kOnBothOperands);// Set of points intersecting with entities",
  "                   //有交点的对象\r": "//Objects with intersection points",
  "                   let arr: McGePoint3d[] = [];//交点数组\r": "let arr: McGePoint3d[] = [];// Intersection array",
  "                       let closePoint = breakEvent.getClosestPointTo(pt, false);//曲线上离鼠标位置最近的点\r": "let closePoint = breakEvent.getClosestPointTo(pt, false);// The point on the curve closest to the mouse position",
  "                       let vec = breakEvent.getFirstDeriv(closePoint.val);//断点所在位置的向量\r": "let vec = breakEvent.getFirstDeriv(closePoint.val);// The vector at the location of the breakpoint",
  "                       vec.val.normalize().mult(MxFun.viewCoordLong2Cad(10));//断开的距离\r": "vec.val.normalize().mult(MxFun.viewCoordLong2Cad(10));// Distance of disconnection",
  "                   let breakcurve = breakEvent.splitCurves(breakPoint);// 根据端点截取曲线\r": "let breakcurve = breakEvent.splitCurves(breakPoint);//  Cut the curve based on the endpoints",
  "                   // 重绘打断后的曲线\r": "//Redraw the broken curve",
  "                   breakEvent.erase() // 删除原曲线\r": "BreakEvent. erase()//Delete the original curve",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbCustomEntity": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbCustomEntity",
  "自定义实体。": "Custom entity.",
  "   // 新创建 McDbTestLineCustomEntity 类继承 McDbCustomEntity\r": "//Create a new McDbTestLineCustomizing Entity class to inherit McDbCustomizing Entity",
  "   // 定义McDbTestLineCustomEntity内部的点对象 pt1、pt2\r": "//Define the point object pt1 inside McDbtTestLineCustomizing Entity pt2",
  "   // 构造函数\r": "//Constructor function",
  "   // 创建函数\r": "//Create Function",
  "   // 获取类名\r": "//Get class name",
  "   // 读取自定义实体数据pt1、pt2\r": "//Read custom entity data pt1 pt2",
  "   // 写入自定义实体数据pt1、pt2\r": "//Write custom entity data pt1 pt2",
  "   // 处理夹点编辑效果\r": "//Processing grip editing effects",
  "   // 设置对象编辑点位\r": "//Set object editing point",
  "   // 绘制实体\r": "//Draw entities",
  "   // 设置pt1\r": "//Set PT1",
  "   // 设置pt2   \r": "//Set PT2",
  "   // 获取pt1\r": "//Get pt1",
  "   // 获取pt2\r": "//Obtain PT2",
  "复制实体": "Copy entity",
  "const customEnt = new McDbCustomEntity();// 构造新自定义实体对象\r": "const customEnt = new McDbCustomEntity();//  Construct a new custom entity object",
  "const cloneEnt = customEnt.clone();// 复制实体\r": "const cloneEnt = customEnt.clone();//  Copy entity",
  "新创建一个自定义对象 (默认调用该对象的构造函数来创建新的对象)": "Create a new custom object (by default, call its constructor to create a new object)",
  "从 DWG 文件中读取自定义实体的数据字段": "Read custom entity data fields from DWG files",
  " // 新创建 McDbTestLineCustomEntity 类继承 McDbCustomEntity\r": "//Create a new McDbTestLineCustomizing Entity class to inherit McDbCustomizing Entity",
  "   // 读取自定义实体的数据字段pt1、pt2\r": "//Read the data field pt1 of the custom entity pt2",
  "将自定义实体的数据字段写入到 DWG 文件中": "Write the data fields of custom entities to a DWG file",
  "   // 写入自定义实体的数据字段pt1、pt2\r": "//Write the data field pt1 to the custom entity pt2",
  "获取自定义对象的夹点。": "Get the grip of the custom object.",
  "夹点对象数组": "Pinch object array",
  "获取自定义实体的类型名称。": "Get the type name of the custom entity.",
  "自定义实体的类型名称": "Custom entity type name",
  "移动自定义对象的夹点。": "Move the grip of custom objects.",
  "  // 新创建 McDbTestLineCustomEntity 类继承 McDbCustomEntity\r": "//Create a new McDbTestLineCustomizing Entity class to inherit McDbCustomizing Entity",
  "       // 定义McDbTestLineCustomEntity内部的点对象 pt1、pt2\r": "//Define the point object pt1 inside McDbtTestLineCustomizing Entity pt2",
  "       // 移动自定义对象的夹点。\r": "//Move the grip of custom objects.",
  "| `_iIndex` | `number` | 夹点索引 |": "|` _iIndex ` | ` number ` | Grip Index|",
  "| `_dXOffset` | `number` | X轴偏移量 |": "|` d_XOffset ` | ` number ` | X-axis offset|",
  "| `_dYOffset` | `number` | Y轴偏移量 |": "|3dYOffset | number | Y-axis offset|",
  "| `_dZOffset` | `number` | Z轴偏移量 |": "|3dZOffset | number | Z-axis offset|",
  "自定义实体注册": "Custom Entity Registration",
  "// McDbTestLineCustomEntity 自定义实体\r": "//McDbtTestLineCustomizing Entity Custom Entity",
  "  new McDbTestLineCustomEntity().rxInit();// 自定义实体注册\r": "new McDbTestLineCustomEntity().rxInit();//  Custom Entity Registration",
  "  MxFun.addCommand(\"MxTest_DrawCustomEntity\");// 注册绘制实体命令\r": "MxFun.addCommand(\"MxTest_DrawCustomEntity\");//  Register drawing entity command",
  "js 对像的数据与McDbCustomEntity::m_mapData的同步。": "JS object data and McDbCCustoms Entity: Synchronization of m_mapData.",
  "获取自定义对象矩阵坐标变换": "Get custom object matrix coordinate transformation",
  "绘制自定义实体": "Draw custom entities",
  "     // 定义McDbTestLineCustomEntity内部的点对象 pt1、pt2\r": "//Define the point object pt1 inside McDbtTestLineCustomizing Entity pt2",
  "     //绘制实体\r": "//Draw entities",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbDatabase": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbDatabase",
  "表示数据库，图形中的所有信息都存放在该对象中，调用mxcad.getDatabase()函数得到控件的数据库。": "Represents a database. All information in the graph is stored in this object. Call the mxcad. getDatabase() function to get the database of the control.",
  "获取块表": "Get block table",
  "返回当前空间块表记录": "Return the current space block table record",
  "块表记录": "Block table record",
  "获取标注样式表。": "Retrieve the annotation style sheet.",
  "线型表。": "Linear table.",
  "获取层表": "Get layer table",
  "获取线型表": "Get line type table",
  "获取文字样式表": "Get Text Style Sheet",
  "得到UCS用户坐标系变换矩阵": "Obtain the UCS user coordinate system transformation matrix",
  "设置UCS用户坐标系变换矩阵": "Set UCS user coordinate system transformation matrix",
  "把一堆对象创建一个组": "Create a group from a pile of objects",
  "得到图纸的组字典对象。": "Obtain the group dictionary object of the drawing.",
  "设置当前文字样式id.": "Set the current text style id",
  "获取块表。": "Retrieve the block table.",
  "块表。": "Block table.",
  "获取当前颜色索引。": "Retrieve the current color index.",
  "当前颜色索引（ColorIndexType）。": "Current Color Index (ColorIndexType).",
  "返回当前标注样式id.": "Return the current annotation style id",
  "获取当前绘图使用的颜色": "Get the color used in the current drawing",
  "返回当前层id.": "Return the current layer ID",
  "获取当前层名称。": "Get the current layer name.",
  "当前层名称。": "Current layer name.",
  "获取当前线型名称。": "Get the current line type name.",
  "当前线型名称。": "The current line type name.",
  "获取当前线型比例。": "Get the current line type scale.",
  "当前线型比例。": "Current line type scale.",
  "返回当前使用的线重.": "Return the current line weight used",
  "返回当前线型id.": "Return the current line type ID",
  "返回当前文字样式id.": "Return the current text style id",
  "获取当前文字样式名称。": "Get the current text style name.",
  "当前文字样式名称。": "The current text style name.",
  "获取当前CAD颜色。": "Retrieve the current CAD color.",
  "当前CAD颜色。": "Current CAD color.",
  "得到对象所在组中的所有对象id": "Get all object IDs in the group where the object is located",
  "获取层表。": "Retrieve the layer table.",
  "  //隐藏目标对象所在图层\r": "//Hide the layer where the target object is located",
  "     selEntity1.setMessage(\"选择要隐藏的对象\")\r": "SelElement1.setMessage (\"Select Objects to Hide\")",
  "层表。": "Layer table.",
  "获取线型表。": "Retrieve the line type table.",
  "   //得所有线型\r": "//Get all line types",
  "得到图纸的字典对象。": "Obtain the dictionary object of the drawing.",
  "  // 写扩展记录\r": "//Write extension records",
  "获取文字样式表。": "Retrieve the text style sheet.",
  " //获取所有文字样式\r": "//Get all text styles",
  "文字样式表。": "Text style sheet.",
  "根据对象的句柄返回对象id.": "Return the object ID based on the handle of the object",
  "// 传入句柄并获取相应的对象 ID\r": "//Pass in the handle and obtain the corresponding object ID",
  "const handle = \"ABCD1234\"; // 假设这是一个有效的句柄\r": "const handle = \"ABCD1234\"; //  Assuming this is a valid handle",
  "// 确保获取的对象 ID 是有效的\r": "//Ensure that the obtained object ID is valid",
  "插入图块": "Insert block",
  "当前数据库是否被修改": "Has the current database been modified",
  "  console.log(\"已修改\")\r": "Console.log (\"Modified\")",
  "  console.log(\"未修改\")\r": "Console.log (\"unmodified\")",
  "读取文件。": "Read files.",
  "把当前数据库修改状态重置成未修改状态": "Reset the current database modification status to unmodified status",
  "保存文件。": "Save the file.",
  "设置当前颜色索引（ColorIndexType）。": "Set the current color index (ColorIndexType).",
  "设置当前标注样式id.": "Set the current annotation style id",
  "设置当前层名称。": "Set the current layer name.",
  "dataBase.setCurrentlyLayerName(\"测试图层\");\r": "DataBase. setCurrentlyLayerName (\"Test Layer\");",
  "| `sName` | `string` | 层名称。 |": "|SName | string | layer name|",
  "设置当前线型名称。": "Set the current line type name.",
  "dataBase.setCurrentlyLineTypeName(\"测试线型\");\r": "DataBase. setCurrentlyLineTypeName (\"test line type\");",
  "| `sName` | `string` | 线型名称。 |": "|SName | string | Line type name|",
  "设置当前线型比例。": "Set the current line type scale.",
  "| `val` | `number` | 线型比例。 |": "|Val | number | Line proportion|",
  "设置当前使用的线重.": "Set the current line weight used",
  "设置当前文字样式名称。": "Set the current text style name.",
  "dataBase.setCurrentlyTextStyle(\"测试文字样式\");\r": "DataBase.setCurrentlyStyle (\"Test Text Style\");",
  "| `sName` | `string` | 文字样式名称。 |": "|SName | string | Text style name|",
  "设置当前CAD颜色。": "Set the current CAD color.",
  "| `color` | [`McCmColor`](2d.McCmColor.md) | CAD颜色。 |": "|Color | [McCMColor] (2d. McCmColor. md) | CAD color|",
  "写块": "Write a block",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbDictionary": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbDictionary",
  "数据库中的字典类，用户的自定义数据可以存放在字典中，它可以理解一个映射表，字符串是关键字，可以映射到任何一个对象。字典中可以再包含字典。": "The dictionary class in the database allows users to store custom data in a dictionary, which can understand a mapping table where strings are keywords that can be mapped to any object. The dictionary can contain additional dictionaries.",
  "//遍历字典\r": "//Traverse the dictionary",
  "  // 获取当前CAD对象\r": "//Retrieve the current CAD object",
  "  // 获取数据库中的字典对象\r": "//Retrieve dictionary objects from the database",
  "  // 获取字典中所有的对象名\r": "//Retrieve all object names from the dictionary",
  "  // 遍历对象名\r": "//Traverse object names",
  "      MxTest_DictionaryData(dict);// 递归遍历字典对象\r": "MxTest_DictionaryData(dict);//  Recursive traversal of dictionary objects",
  "向字典中添加对象": "Add objects to the dictionary",
  "| `sName` | `string` | 对象名称 |": "|SName | string | Object Name|",
  "| `obj` | [`McDbObject`](2d.McDbObject.md) | 对象 |": "|Obj | [McDbObject] (2d. McDbObject. md) | Object|",
  "对象ID": "Object ID",
  "获取字典中的所有对象。": "Retrieve all objects from the dictionary.",
  "对象ID数组": "Object ID array",
  "获取字典中所有的对象名。": "Retrieve all object names from the dictionary.",
  "对象名数组": "Object name array",
  "获取字典中指定对象": "Retrieve the specified object from the dictionary",
  "const objId = dict.getAt(\"测试字典\");\r": "Const objId=dict.getAt (\"test dictionary\");",
  "| `sName` | `string` | `undefined` | 对象名称 |": "|SName | string | undefined | Object name|",
  "| `isGetErased` | `boolean` | `false` | 是否获取已删除的对象 |": "|Is it possible to retrieve deleted objects|",
  "移除指定对象": "Remove specified object",
  "const res = dict.remove(\"测试字典\");\r": "Const res=dict.remove (\"test dictionary\");",
  "  //移除成功\r": "//Removal successful",
  "  //移除失败\r": "//Removal failed",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbDimension": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbDimension",
  "表示AutoCAD中所有标注实体类型的类的基类": "The base class representing all annotated entity types in AutoCAD",
  "| `imp?` | `any` | 实现对象 |": "| `imp?` | ` Any | Implement object|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbDimStyleTable": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbDimStyleTable",
  "表示数据库注样式表，所有的注样式都存放在这里。": "Represents a database annotation style sheet, where all annotation styles are stored.",
  "向标注样式表中添加标注样式记录。": "Add annotation style records to the annotation style sheet.",
  "| `rec` | [`McDbDimStyleTableRecord`](2d.McDbDimStyleTableRecord.md) | 标注样式记录。 |": "|Rec | [McDbDimStyleTableRecord] (2d. McDbDimStyleTableRecord. md) | Annotation style record|",
  "新增线型记录对象ID。": "Add a new line type record object ID.",
  "查找标注样式表中的标注样式记录。": "Search for annotation style records in the annotation style sheet.",
  "| `sName` | `string` | `undefined` | 标注样式名称。 |": "|SName | string | undefined | Label style name|",
  "| `skipDeleted` | `boolean` | `true` | 是否跳过已删除标注样式。 |": "|SkipDeleted | boolean | true | Do you want to skip deleted annotation styles|",
  "标注样式记录对象ID。": "Annotation style records object ID.",
  "获取所有的注样式。": "Retrieve all annotation styles.",
  "| `skipDeleted` | `boolean` | `true` | 是否跳过已删除注样式。 |": "|SkipDeleted | boolean | true | Do you want to skip deleted annotation styles|",
  "注样式ID数组": "Annotation style ID array",
  "检查找标注样式表中是否存在指定名称的找标注样式记录。": "Check if there are any annotation style records with the specified name in the annotation style table.",
  "| `sName` | `string` | `undefined` | 找标注样式名称。 |": "|SName | string | undefined | Find the annotation style name|",
  "| `skipDeleted` | `boolean` | `true` | 是否跳过已删除找标注样式。 |": "|SkipDeleted | boolean | true | Do you want to skip deleted annotation styles|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbDimStyleTableRecord": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbdDimStyleTableRecord",
  "表示一个标注样式记录对象，实现了标注样式的属性相关操作函数。": "Represents a annotation style record object that implements attribute related operation functions for annotation styles.",
  "获取或设置标注样式名称。": "Get or set the annotation style name.",
  "得到标注样式的double类型的属性。": "Obtain the double type property of the annotation style.",
  "得到标注样式的整数类型的属性。": "Obtain integer type properties for annotation styles.",
  "得到标注样式的string类型的属性。": "Obtain the string type attribute of the annotation style.",
  "设置标注样式的double类型的属性。": "Set the double type property of the annotation style.",
  "设置标注样式的整数类型的属性。": "Set integer type properties for annotation styles.",
  "设置标注样式的string类型的属性。": "Set string type properties for annotation styles.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbEllipse": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbEllipse",
  "表示椭圆椭圆弧实体。它包含了创建、修改了获取椭圆椭圆弧属性的方法。": "Represents an elliptical arc entity. It includes methods for creating and modifying ellipsoidal arc properties.",
  "   //绘制椭圆弧\r": "//Draw an elliptical arc",
  "   const ellipse_arc = new McDbEllipse() // 构造椭圆对象\r": "Const ellipse_arc=new McDbEllipse()//Construct an elliptical object",
  "   ellipse_arc.center = new McGePoint3d(-380, -200) // 设置对象圆心\r": "Ellipse_arc.center=new McGePoint3d (-380, -200)//Set object center point",
  "   ellipse_arc.majorAxis = new McGeVector3d(0, 150, 0) // 设置对象主轴向量\r": "Ellipse_arc.majorAxis=new McGeVector3d (0, 150, 0)//Set the object's principal axis vector",
  "   ellipse_arc.minorAxis = new McGeVector3d(280, 0, 0) // 设置对象副轴向量\r": "Ellipse_arc.minorAxis=new McGeVector3d (280, 0, 0)//Set the object's secondary axis vector",
  "   ellipse_arc.startAngle = Math.PI / 2 // 设置对象开始角度\r": "Ellipse_arc. startAngle=Math. PI/2//Set the starting angle of the object",
  "   ellipse_arc.endAngle = Math.PI * 3 / 2 // 设置对象结束角度\r": "Ellipse_rc.endAngle=Math. PI * 3/2//Set the end angle of the object",
  "   ellipse_arc.trueColor = new McCmColor(0, 255, 255) //设置对象颜色\r": "Ellipse_arc.trueColor=new McCMColor (0, 255, 255)//Set object color",
  "   MxCpp.getCurrentMxCAD().drawEntity(ellipse_arc) // 绘制椭圆对象": "MxCpp. getCurrentMxCAD(). drawEntity (ellipse_arc)//Draw an elliptical object",
  "   //绘制椭圆\r": "//Draw an ellipse",
  "   const ellipse = new McDbEllipse() // 构造椭圆对象\r": "Const ellipse=new McDbEllipse()//Construct an elliptical object",
  "   ellipse.center = new McGePoint3d(-200, -200) // 设置对象圆心\r": "Ellipse.center=new McGePoint3d (-200, -200)//Set the center of the object",
  "   ellipse.majorAxis = new McGeVector3d(0, 300, 0) // 设置对象主轴向量\r": "Ellipse.majorAxis=new McGeVector3d (0, 300, 0)//Set the object's principal axis vector",
  "   ellipse.radiusRatio = 0.5 // 设置椭圆的副轴长度与主轴长度的比值\r": "Ellipse.radiusRatio=0.5//Set the ratio of the length of the secondary axis to the length of the main axis of the ellipse",
  "   ellipse.trueColor = new McCmColor(255, 233, 0) //设置对象颜色\r": "Ellipse.trueColor=new McCMColor (255, 233, 0)//Set object color",
  "   MxCpp.getCurrentMxCAD().drawEntity(ellipse) // 绘制椭圆对象\r": "MxCpp. getCurrentMxCAD(). rawEntity (ellipse)//Draw an elliptical object",
  "获取椭圆弧的结束角度": "Obtain the end angle of the elliptical arc",
  "//ellipse 为有效椭圆弧实例对象\r": "//Ellipse is a valid elliptical arc instance object",
  "设置椭圆弧的结束角度": "Set the end angle of the elliptical arc",
  "获取主轴向量": "Obtain the main axis vector",
  "设置主轴向量。": "Set the main axis vector.",
  "获取副轴向量": "Obtain the secondary axis vector",
  "设置副轴向量。": "Set the secondary axis vector.",
  "获取椭圆的副轴长度与主轴长度的比值": "Obtain the ratio of the length of the secondary axis to the length of the main axis of an ellipse",
  "设置椭圆的副轴长度与主轴长度的比值": "Set the ratio of the length of the secondary axis to the length of the main axis of the ellipse",
  "获取椭圆弧的开始角度": "Obtain the starting angle of the elliptical arc",
  "设置椭圆弧的开始角度": "Set the starting angle of the elliptical arc",
  "设置主轴向量": "Set the main axis vector",
  "| `x` | `number` | x 坐标。 |": "|X | number | x coordinate|",
  "| `y` | `number` | y 坐标。 |": "|Y | number | y coordinate|",
  "| `z?` | `number` | z 坐标。 |": "| `z?` | ` Number ` | z coordinate|",
  "设置副轴向量": "Set the secondary axis vector",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbEntity": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbEntity",
  "具有一个图形表示的所有数据库对象的基类，包括了显示实体的通用属性操作，如线型，图层，文字样式，颜色，几何外包等": "The base class for all database objects with a graphical representation, including general property operations for displaying entities such as line types, layers, text styles, colors, geometric outsourcing, etc",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbGroup": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbGroup",
  "组对象": "Group Object",
  "  选择一堆对象，把他们创建到一个组中 。\r": "Select a bunch of objects and create them into a group.",
  "  if (!await ss.userSelect(\"选择要做成组的对象:\")) return;\r": "If (! Await ss. userSelect): \")) return;",
  "说明内容": "Explanation Content",
  "是否选择操作": "Do you want to choose an operation",
  "组名": "Group Name",
  "向组添加对象": "Add objects to the group",
  "向组添加对象数组": "Add object array to group",
  "清空组": "Clear group",
  "得到组中所有对象": "Get all objects in the group",
  "组中是否有该对象": "Is there this object in the group",
  "得到组中所有对象数量": "Get the number of all objects in the group",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbHatch": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbHatch",
  "表示图案填充类，实现实心颜色填充和各种图案填充效果": "Representing pattern filling classes, achieving solid color filling and various pattern filling effects",
  "  //选点填充\r": "//Select point filling",
  "   console.log(\"\\n指定填充区域内部一点:\");\r": "Console.log (\"\\ n Specify a point inside the filled area: \");",
  "       console.log(\"没有找到闭合区域\\n\")\r": "Console.log (\"Closed area not found \\ n\")",
  "   // 清除填充图案效果\r": "//Clear the fill pattern effect",
  "   // 添加图案填充定义\r": "//Add Pattern Fill Definition",
  "   // 设置填充图案\r": "//Set Fill Pattern",
  "   // 设置填充颜色\r": "//Set Fill Color",
  "   // 绘制填充对象\r": "//Draw Fill Object",
  "闭合区域次数": "Number of closed areas",
  "// hatch 为图案填充实例对象\r": "//Hatch is an instance object for pattern filling",
  "图案定义的数量": "The number of pattern definitions",
  "获取填充图案角度": "Obtain the angle of the fill pattern",
  "设置填充图案角度": "Set the angle of the fill pattern",
  "获取填充图案是否是双倍": "Obtain whether the fill pattern is double",
  "  //填充图案为双倍\r": "//Double the filling pattern",
  "  //填充图案不为双倍\r": "//The filling pattern is not double",
  "设置填充图案是否为双倍": "Set the fill pattern to double",
  "获取填充图案缩放比例": "Get the scaling ratio of the fill pattern",
  "设置填充图案缩放比例": "Set the scaling ratio of the fill pattern",
  "获取填充图案空间": "Obtain the space for filling patterns",
  "设置填充图案空间": "Set the space for filling patterns",
  "添加图案定义": "Add pattern definition",
  "  //添加成功\r": "//Added successfully",
  "  //添加失败\r": "//Add failed",
  "| `angle` | `number` | 角度 如 45 |": "|Angle | number | angle such as 45|",
  "| `baseX` | `number` | 基点x坐标 |": "|BaseX | number | Base point x coordinate|",
  "| `baseY` | `number` | 基点y坐标 |": "|BaseY | number | base point y coordinate|",
  "| `offsetX` | `number` | 偏移x坐标 |": "|Offset X | number | offset x coordinate|",
  "| `offsetY` | `number` | 偏移y坐标 |": "|Offset Y | number | offset y coordinate|",
  "| `dashes` | `number`[] | 短划线数据 |": "|Dashes | number [] | dash data|",
  "是否成功添加图案定义": "Did you successfully add the pattern definition",
  "追加圆构造的闭合区域": "Add a closed area for circle construction",
  "   //追加成功\r": "//Added successfully",
  "   //追加失败\r": "//Addition failed",
  "| `dCenX` | `number` | `undefined` | 圆心X轴坐标 |": "|DCenX | number | undefined | X-axis coordinate of the center of the circle|",
  "| `dCenY` | `number` | `undefined` | 圆心Y轴坐标 |": "|DCenY | number | undefined | Y-axis coordinate of the center of the circle|",
  "| `dR` | `number` | `undefined` | 圆半径 |": "|DR | number | undefined | radius of circle|",
  "| `dPrecision` | `number` | `0` | 精度参数，默认值为 0。 |": "|DPrecision | number | 0 | Precision parameter, default value is 0|",
  "| `loopType` | `number` | `McDb.HatchLoopType.kPolyline` | 循环类型参数，默认值为 McDb.HatchLoopType.kPolyline |": "| `loopType` | `number` | `McDb. HatchLoopType. kPolyline ` | Loop type parameter, default value is McDb HatchLoopType.kPolyline |",
  "追加结果": "Additional Results",
  "追加闭合区域": "Add closed area",
  "     //设置成功\r": "//Setting successful",
  "     //设置失败\r": "//Setting failed",
  "| `vertices` | [`McGePoint3dArray`](2d.McGePoint3dArray.md) | `undefined` | 坐标集合 |": "|Vertices | [McGePoint3dArray] (2d. McGePoint3dArray. md) | undefined | Coordinate set|",
  "| `bulges` | `number`[] | `[]` | 凸度集合 |": "|Bulges | number [] | convexity set|",
  "| `loopType` | `number` | `McDb.HatchLoopType.kPolyline` | 闭合区域类型 |": "| `loopType` | `number` | `McDb. HatchLoopType.kPolyline | Closed Area Type|",
  "返回追加结果": "Return additional results",
  "清空图案定义": "Clear pattern definition",
  "  //清空成功\r": "//Cleared successfully",
  "  //清空失败\r": "//Clearing failed",
  "获取索引的值": "Retrieve the value of the index",
  "| `loopIndex` | `number` | index 闭合区域的索引 |": "|LoopIndex | number | index of closed area|",
  "ret 是否成功获取 | lootype 类型 | vertices 坐标集合 | bulges凸度集合": "Whether ret successfully obtained | lootype type | verticals coordinate set | bulges convexity set",
  "获取对应图案定义的数据": "Obtain data corresponding to the pattern definition",
  "| `index` | `number` | 索引 |": "|Index | number | index|",
  "ret 是否成功获取 | angle 角度 | baseX, baseY 基点位置 | offsetX, offsetY 偏移位置 | aryDashes 短划线数据": "Whether ret successfully obtained | angle | baseX, BaseY base point position | offsetX, OffsetY offset position | aryDashes dash data",
  "填充样式": "Fill style",
  "检查填充对象是否为实体填充": "Check if the filled object is solid filled",
  "  //实体填充\r": "//Entity filling",
  "  //非实体填充\r": "//Non entity filling",
  "某次闭合区域索引中的类型": "Types in a closed area index",
  "填充图案名称": "Fill pattern name",
  "填充图案类型": "Fill pattern type",
  "删除所有闭合区域": "Delete all closed areas",
  "删除某个索引下的闭合区域": "Delete a closed region under a certain index",
  "| `loopIndex` | `number` | 移除的循环的索引 |": "|LoopIndex | number | Index of removed loops|",
  "对当前定义的填充图案数据进行缩放。": "Scale the currently defined fill pattern data.",
  "设置填充样式": "Set fill style",
  "设置某个索引下的闭合区域数据": "Set closed area data under a certain index",
  "  console.log(\"循环设置成功！\");\r": "Console.log (\"Loop setting successful! \");",
  "  console.log(\"循环设置失败...\");\r": "Console.log (\"Loop setting failed \");",
  "| `loopIndex` | `number` | `undefined` | 闭合区域索引 |": "|LoopIndex | number | undefined | Closed area index|",
  "| `bulges` | `number`[] | `undefined` | 凸度集合 |": "|Bulges | number [] | undefined | convexity set|",
  "设置填充图案": "Set Fill Pattern",
  "| `type` | `number` | 填充图案的来源类型 |": "|Type | Number | Source type of fill pattern|",
  "| `patName` | `string` | 填充图案名称 |": "|PatName | string | Fill pattern name|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbLayerTable": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbLayerTable",
  "表示数据库层表，所有图层信息都存放在层表中。": "Represents a database layer table, where all layer information is stored.",
  "//获取所有图层\r": "//Get all layers",
  "// 获取当前cad对象的图层表\r": "//Retrieve the layer table of the current CAD object",
  "// 获取图层表中的所有记录对象ID\r": "//Retrieve all record object IDs from the layer table",
  "// 遍历图层表记录对象\r": "//Traverse the layer table to record objects",
  "向图层表中添加图层记录。": "Add layer records to the layer table.",
  "| `rec` | [`McDbLayerTableRecord`](2d.McDbLayerTableRecord.md) | 图层表记录对象。 |": "|Rec | [McDbLayerTableRecord] (2d. McDbLayerTableRecord. md) | Layer table record object|",
  "新增图层记录对象ID。": "Add layer record object ID.",
  "查找图层表中的图层记录。": "Search for layer records in the layer table.",
  "layerRec.name = \"测试图层\"\r": "LayerRec.name=\"Test Layer\"",
  "const id = layerTable.get(\"测试图层\")\r": "Const id=layerTable. get (\"test layer\")",
  "| `sName` | `string` | `undefined` | 图层名称。 |": "|SName | string | undefined | Layer name|",
  "| `skipDeleted` | `boolean` | `true` | 是否跳过已删除图层。 |": "|SkipDeleted | boolean | true | Do you want to skip deleted layers|",
  "图层记录对象ID。": "Layer record object ID.",
  "获取层表中的所有图层记录的ID。": "Retrieve the IDs of all layer records in the layer table.",
  "图层ID数组": "Layer ID array",
  "检查图层表中是否存在指定名称的图层记录。": "Check if there is a layer record with the specified name in the layer table.",
  "const res = layerTable.has(\"测试图层\");\r": "Const res=layerTable. has (\"test layer\");",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbLayerTableRecord": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbLayerTableRecord",
  "表示一个图层表记录对象，实现了对图层的属性相关操作函数。": "Represents a layer table that records objects and implements attribute related operation functions for layers.",
  "// 构造新图层表记录对象\r": "//Construct a new layer table to record objects",
  "// 设置图层颜色\r": "//Set layer color",
  "// 设置图层是否被冻结\r": "//Set whether the layer is frozen",
  "// 设置图层是否被锁定\r": "//Set whether the layer is locked",
  "// 设置图层是否被关闭\r": "//Set whether the layer is turned off",
  "// 设置图层线宽\r": "//Set layer line width",
  "// 设置图层名\r": "//Set layer name",
  "layer.name = \"图层名称\"\r": "Layer.name=\"Layer Name\"",
  "// 获取当前图层表\r": "//Retrieve the current layer table",
  "// 向图表中添加图层\r": "//Add layers to the chart",
  "获取或设置图层颜色。": "Get or set the layer color.",
  "获取或设置图层是否被冻结。": "Get or set whether the layer is frozen.",
  "获取或设置图层是否被锁定。": "Get or set whether the layer is locked.",
  "获取或设置图层是否被关闭。": "Get or set whether the layer is turned off.",
  "获取或设置图层线宽。": "Get or set layer line width.",
  "获取或设置图层线型对象 ID。": "Get or set the layer line type object ID.",
  "获取或设置图层名称。": "Get or set the layer name.",
  "layerRec.name = \"测试图层\";\r": "LayerRec.name=\"Test Layer\";",
  "console.log(layerRec.name)//测试图层\r": "Console. log (layerRec. name)//Test layer",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbLine": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbLine",
  "表示一个直线对象。": "Represents a straight line object.",
  "//参数绘直线 pt1,pt2是直线的两个点。\r": "//Draw a straight line pt1 and pt2 as the two points of the line.",
  "const line = new McDbLine(); // 构造直线对象\r": "const line = new McDbLine(); //  Construct a straight line object",
  "line.startPoint = pt1; // 设置直线起点\r": "line.startPoint = pt1; //  Set the starting point of the straight line",
  "line.endPoint = pt2; // 设置直线终点\r": "line.endPoint = pt2; //  Set the endpoint of a straight line",
  "MxCpp.getCurrentMxCAD().drawEntity(line); // 绘制直线\r": "MxCpp.getCurrentMxCAD().drawEntity(line); //  draw a straight line",
  "  //交互绘线，点击画布选择直线的起始点。\r": "//Interactive line drawing, click on the canvas to select the starting point of the line.",
  "   // 取起始点\r": "//Take the starting point",
  "   getPoint.setMessage(\"\\n指定第一点:\");\r": "GetPoint.setMessage (\"\\ nSpecify the first point: \");",
  "   getPoint.setMessage(\"\\n指定下一个点:\");\r": "GetPoint.setMessage (\"\\ nSpecify the next point: \");",
  "// 创建 McGePoint3d 对象表示起点和终点\r": "//Create McGePoint3d objects to represent the starting and ending points",
  "// 通过 McGePoint3d 对象创建 McDbLine 对象\r": "//Create McDbLine objects using McGePoint3d objects",
  "// 或者直接传入坐标值创建 McDbLine 对象\r": "//Alternatively, you can directly input coordinate values to create a McDbLine object",
  "获取终点。": "Obtain the endpoint.",
  "设置终点。": "Set the endpoint.",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 新的终点。 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | New endpoint|",
  "获取起点。": "Get the starting point.",
  "设置起点。": "Set the starting point.",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 新的起点。 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | New starting point|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbLinetypeTable": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbLinetypeTable",
  "表示数据库线型表，所有的线型定义都存放在这里。": "Represents the database line type table, where all line type definitions are stored.",
  "// 获取所有线型\r": "//Get all line types",
  "// 获取当前CAD对象\r": "//Retrieve the current CAD object",
  "// 获取数据库线型表\r": "//Retrieve database line type table",
  "// 获取线性表中的所有线型表记录对象ID\r": "//Retrieve all line type table record object IDs from the linear table",
  "// 遍历线型表记录对象\r": "//Traverse the line type table to record objects",
  "向线型表中添加线型记录。": "Add line type records to the line type table.",
  "| `rec` | [`McDbLinetypeTableRecord`](2d.McDbLinetypeTableRecord.md) | 线型表记录对象。 |": "|Rec | [McDbLinetypeTableRecord] (2d. McDbLinetypeTableRecord. md) | Line type table record object|",
  "查找线型表中的线型记录。": "Search for line type records in the line type table.",
  "| `sName` | `string` | `undefined` | 线型名称。 |": "|SName | string | undefined | Line type name|",
  "| `skipDeleted` | `boolean` | `true` | 是否跳过已删除线型。 |": "|SkipDeleted | boolean | true | Do you want to skip deleted linetypes|",
  "线型记录对象ID。": "Line type records the object ID.",
  "获取线型表中的所有线型记录的ID。": "Retrieve the IDs of all line type records in the line type table.",
  "ret 线型ID数组。": "Ret line type ID array.",
  "检查线型表中是否存在指定名称的线型记录。": "Check if there is a line type record with the specified name in the line type table.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbLinetypeTableRecord": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbLinetypeTableRecord",
  "表示一个线型表记录对象，实现了对线型的属性相关操作函数。": "Represents a line type table that records objects and implements attribute related operation functions for line types.",
  " // 添加线型\r": "//Add line type",
  "   // 拿到当前线型样式表\r": "//Get the current line style sheet",
  "   // 构造新线型表记录对象\r": "//Construct a new line type table to record objects",
  "   // 设置线型对象的虚线数量\r": "//Set the number of dashed lines for line type objects",
  "   // 设置线型对象的名字\r": "//Set the name of the line type object",
  "   // 添加线型\r": "//Add line type",
  "获取或设置线型说明字符串。": "Get or set the line type description string.",
  "linetypeRec.comments = \"说明字符串\"\r": "LinetypeRec.coments=\"Explanation string\"",
  "console.log(linetypeRec.comments) // 说明字符串\r": "Console. log (linetypeRec. comments)//Explanation string",
  "获取或设置线型是否根据绘图比例进行缩放。": "Gets or sets whether the line type is scaled according to the drawing scale.",
  "获取或设置线型名称。": "Get or set the linetype name.",
  "linetypeRec.name = \"测试线型\"\r": "LinetypeRec.name=\"Test Linetype\"",
  "console.log(linetypeRec.name) // 测试线型\r": "Console. log (linetypeRec. name)//Test line type",
  "获取或设置线型的虚线数量。": "Get or set the number of dashed lines for the line type.",
  "获取或设置指定索引处的虚线长度。": "Gets or sets the length of the dashed line at the specified index.",
  "| `index` | `number` | 线型定义数组中索引。 |": "|Index | Number | Line type defines the index in the array|",
  "设置指定形状是否按照用户坐标系（UCS）方向排列。": "Set whether the specified shape is arranged in the direction of the User Coordinate System (UCS).",
  " //设置成功\r": "//Setting successful",
  " //设置失败\r": "//Setting failed",
  "| `isUcsOriented` | `boolean` | 是否按照用户坐标系（UCS）方向排列 |": "|Is the 'isUcsOriented' | 'boolean' | arranged in the direction of the User Coordinate System (UCS)|",
  "设置指定索引处的形状旋转角度。": "Set the rotation angle of the shape at the specified index.",
  "| `rotation` | `number` | 旋转角度 |": "|Rotation | number | Rotation angle|",
  "设置指定索引处的文本信息。": "Set the text information at the specified index.",
  "linetypeRec.setTextAt(0, \"测试文本\");\r": "LinetypeRec. setTextAt (0, \"test text\");",
  "| `text` | `string` | 文本信息 |": "|Text | string | Text information|",
  "获取指定形状是否按照用户坐标系（UCS）方向排列。": "Retrieve whether the specified shape is arranged in the direction of the User Coordinate System (UCS).",
  "获取或设置指定索引处的形状编号。": "Get or set the shape number at the specified index.",
  "// 设置指定索引处的形状编号为新值\r": "//Set the shape number at the specified index to a new value",
  "   //设置成功\r": "//Setting successful",
  "   //设置失败\r": "//Setting failed",
  "获取或设置指定索引处的形状偏移量。": "Get or set the shape offset at the specified index.",
  "// 设置指定索引处的形状偏移量为新值\r": "//Set the shape offset at the specified index to a new value",
  "偏移向量": "Offset vector",
  "获取指定索引处的形状旋转角度。": "Get the rotation angle of the shape at the specified index.",
  "旋转角度": "Rotation angle",
  "获取或设置指定索引处的形状缩放比例。": "Gets or sets the scaling ratio of the shape at the specified index.",
  "获取或设置指定索引处的形状样式。": "Retrieve or set the shape style at the specified index.",
  "// 设置指定索引处的形状样式为新值\r": "//Set the shape style at the specified index to a new value",
  "获取或设置指定索引处的文本信息。": "Retrieve or set text information at a specified index.",
  "文本信息": "Text information",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbMText": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDBMText",
  "多行文本实体类": "Multi line text entity class",
  " // 绘制多行文本\r": "//Draw multiple lines of text",
  " const mText = new McDbMText();// 构造新多行文本对象\r": "const mText = new McDbMText();//  Construct a new multiline text object",
  " mText.textHeight = 10;// 设置文本高度\r": "mText.textHeight = 10;//  Set text height",
  " mText.attachment = McDb.AttachmentPoint.kMiddleLeft;// 设置文本对齐方式\r": "mText.attachment = McDb.AttachmentPoint.kMiddleLeft;//  Set text alignment method",
  " mText.contents = '控件：\\\\P 多行文本'; // 设置文本内容\r": "MText. contents='Control:\\ \\P Multi line Text '// Set text content",
  " mText.location = new McGePoint3d(0,0,0); // 设置文本位置\r": "mText.location = new McGePoint3d(0,0,0); //  Set text position",
  " MxCpp.getCurrentMxCAD().drawEntity(mText); // 绘制多行文本\r": "MxCpp.getCurrentMxCAD().drawEntity(mText); //  Draw multiple lines of text",
  "获取附着点": "Get attachment point",
  "//mText 为有效多行文本\r": "//MText is valid multiline text",
  "附着点": "Attachment point",
  "设置附着点": "Set attachment point",
  "| `val` | [`AttachmentPoint`](../enums/2d.McDb.AttachmentPoint.md) | 附着点 |": "|Val | [AttachmentPoint] (../enums/2d. McDb. AttachmentPoint. md) | Attachment Point|",
  "获取文本内容": "Retrieve text content",
  "文本内容": "Text Content",
  "设置文本内容": "Set text content",
  "mText.contents = \"测试文本1 \\\\P 测试文本2\";\r": "MText. contents=\"Test Text 1 \\ \\ P Test Text 2\";",
  "| `val` | `string` | 文本内容 |": "|Val | string | Text Content|",
  "获取位置": "Get location",
  "位置点": "Location point",
  "设置位置": "Set location",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 位置点 |": "|Pt | McGePoint3d (2d. McGePoint3d. md) | Position Point|",
  "获取旋转角度": "Obtain rotation angle",
  "设置旋转角度": "Set rotation angle",
  "| `val` | `number` | 旋转角度 |": "|Val | number | rotation angle|",
  "获取文本高度": "Get text height",
  "文本高度": "Text height",
  "设置文本高度": "Set text height",
  "| `val` | `number` | 文本高度 |": "|Val | number | Text height|",
  "获取宽度": "Get width",
  "宽度": "width",
  "设置宽度": "Set width",
  "| `val` | `number` | 宽度 |": "|Val | number | width|",
  "获取文本不带格式控制符的内容": "Retrieve content without formatting controls in the text",
  "不带格式控制符的内容": "Content without format control symbols",
  "重新计算多行文档的格式控制符对多行文本的显示数据。": "Recalculate the display data of format control symbols for multi line text in multi line documents.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbObject": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbObject",
  "表示一个数据库对象，并提供了数据库中的对象的一些基本操作函数，如内存的分配，对象删除，对象Id，归档等操作。": "Represents a database object and provides some basic operation functions for objects in the database, such as memory allocation, object deletion, object ID, archiving, and other operations.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbObjectArray": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbObject Array",
  "McDbObject 的一个数组，该数组存储了多个 McDbObject 对象的引用。": "An array of McDbObject that stores references to multiple McDbObject objects.",
  " // 创建一个 McDbObjectArray 实例\r": "//Create an instance of McDbObject Array",
  "对象数组": "object array",
  "清空数组": "Clear the array",
  "遍历对象": "Traverse objects",
  "数组长度": "Array length",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbPoint": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbPoint",
  "表示一个点对象。": "Represents a point object.",
  "//绘制一个点对象\r": "//Draw a point object",
  "   const point = new McDbPoint() // 构造一个点对象\r": "Const point=new McDbPoint()//Construct a point object",
  "   point.trueColor = color // 设置点对象颜色\r": "Point.trueColor=color//Set the color of the point object",
  "   point.setPosition(0, 0) // 设置点对象位置\r": "Point. setPosition (0,0)//Set the position of the point object",
  "   MxCpp.getCurrentMxCAD().drawEntity(point) // 绘制点对象\r": "MxCpp. getCurrentMxCAD(). drawEntity (point)//Draw point object",
  "获取点坐标。": "Obtain point coordinates.",
  "设置点坐标。": "Set point coordinates.",
  "| `x` | `number` | X坐标 |": "|X | number | X coordinate|",
  "| `y` | `number` | Y坐标 |": "|Y | number | Y coordinate|",
  "| `z?` | `number` | Z坐标 |": "| `z?` | ` Number ` | Z coordinate|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbPolyline": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbPolyline",
  "多段线类": "Multi segment line category",
  "//绘制线宽为10的矩形，pt1,pt2,pt3,pt4为矩形的4点个顶点\r": "//Draw a rectangle with a line width of 10, where pt1, pt2, pt3, and pt4 are the 4 vertices of the rectangle",
  "pl.constantWidth = 10;// 设置多段线线宽为10\r": "pl.constantWidth = 10;//  Set the polyline width to 10",
  "// 设置多段线端点\r": "//Set polyline endpoints",
  "pl.isClosed = true; // 设置多段线是否闭合\r": "pl.isClosed = true; //  Set whether the polyline is closed",
  "MxCpp.getCurrentMxCAD().drawEntity(pl); // 绘制多段线\r": "MxCpp.getCurrentMxCAD().drawEntity(pl); //  Draw polylines",
  " // 绘制中心矩形：指定矩形宽高与中心点，动态绘制矩形\r": "//Draw Center Rectangle: Specify the width, height, and center point of the rectangle to dynamically draw it",
  "   // 设置矩形宽度\r": "//Set rectangle width",
  "   getWidth.setMessage(\"\\n请输入矩形宽度<5>\");\r": "GetWidth. setMessage (\"\\ n Please enter rectangle width<5>\");",
  "   // 设置矩形高度\r": "//Set the height of the rectangle",
  "   getHeight.setMessage(\"\\n请输入矩形高度<10>\");\r": "GetHeight. setMessage (\"\\ n Please enter rectangle height<10>\");",
  "   // 设置矩形的中心点\r": "//Set the center point of the rectangle",
  "   getCenterPt.setMessage(\"请点击确定矩形中心\");\r": "GetCenterPt.setMessage (\"Please click to confirm the center of the rectangle\");",
  "   // 根据矩形的中心点和宽高计算矩形的四个顶点\r": "//Calculate the four vertices of the rectangle based on its center point and width/height",
  "   let pl = new McDbPolyline;// 构造一个多段线对象\r": "let pl = new McDbPolyline;//  Construct a polyline object",
  "   // 依次添加矩形顶点\r": "//Add rectangular vertices in sequence",
  "   pl.isClosed = true; // 设置多段线闭合\r": "pl.isClosed = true; //  Set polyline closure",
  "   mxcad.drawEntity(pl); // 绘制多段线对象\r": "mxcad.drawEntity(pl); //  Draw polyline objects",
  "获取常量宽度": "Get constant width",
  "// pl 为有效多段线对象\r": "//PL is a valid polyline object",
  "设置常量宽度": "Set constant width",
  "pl.constantWidth = 10;//设置多线段常量宽度为10\r": "pl.constantWidth = 10;// Set the constant width of multiple line segments to 10",
  "| `val` | `number` | 常量宽度 |": "|Val | number | Constant width|",
  "获取是否闭合": "Get whether it is closed or not",
  "pl.isClosed = true;//设置多线段闭合 \r": "pl.isClosed = true;// Set multi segment closure",
  "设置是否闭合": "Set whether to close or not",
  "| `val` | `boolean` | 是否闭合 |": "|Val | boolean | Is it closed|",
  "在指定位置添加顶点": "Add vertices at the specified location",
  "| `pt` | `Vector3` \\| [`McGePoint3d`](2d.McGePoint3d.md) | `undefined` | 点 |": "|Pt | Vector3 | [McGePoint3d] (2d. McGePoint3d. md) | undefined | Point|",
  "| `bulge` | `number` | `0` | 凸度 |": "|Bulge | number | 0 | convexity|",
  "| `startWidth` | `number` | `0` | 起始宽度 |": "|StartWidth | number | 0 | starting width|",
  "| `endWidth` | `number` | `0` | 结束宽度 |": "|EndWidth | number | 0 | End width|",
  "| `index` | `number` | `0` | 位置 |": "|Index | number | 0 | position|",
  "获取指定位置的凸度": "Obtain the convexity of the specified position",
  "| `index` | `number` | 位置 |": "|Index | number | position|",
  "获取指定位置的点": "Get the point at the specified location",
  "val: 点, ret: 返回值": "val:  Point, ret:  Return value",
  "设置多线段类型": "Set multiple line segment types",
  "获取指定位置的起始和结束宽度": "Get the starting and ending width of the specified location",
  "  //获取失败\r": "//Acquisition failed",
  "val1: 起始宽度, val2: 结束宽度, ret: 返回值": "val1:  Starting width, val2:  End width, ret:  Return value",
  "获取顶点数量": "Obtain the number of vertices",
  "判断一个点是否在多线段组成闭合区域内": "Determine whether a point is within a closed area composed of multiple line segments",
  "移除指定位置的顶点": "Remove vertices from the specified location",
  "设置指定位置的凸度": "Set the convexity of the specified position",
  "| `bulge` | `number` | 凸度 |": "|Bulge | number | convexity|",
  "设置指定位置的点": "Set the point at the specified location",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 点 |": "|Pt | McGePoint3d (2d. McGePoint3d. md) | Point|",
  "返回多线段类型": "Return multiple line segment types",
  "| `type` | [`PolylineType`](../enums/2d.McDb.PolylineType.md) | 多线段类型 |": "|Type | PolylineType (../enums/2d. McDb. PolylineType. md) | Multi line segment type|",
  "修改线段的开始宽度，和结束宽度": "Modify the starting and ending width of the line segment",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbProxyEntity": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbProxyEntity",
  "代理实体类型，是一种特殊类型的实体，其几何形状和属性信息存储在外部源中，例如外部文件或数据库。": "Proxy entity type is a special type of entity whose geometric shape and attribute information are stored in external sources, such as external files or databases.",
  "//遍历代理实体中的文字\r": "//Traverse the text in the proxy entity",
  "let ss = new MxCADSelectionSet();// 构造选择集对象\r": "let ss = new MxCADSelectionSet();//  Construct selection set objects",
  "// 设置过滤器\r": "//Set filter",
  "ss.allSelect(filter);// 筛选图纸上所有的文本、图块、代理实体对象\r": "ss.allSelect(filter);//  Filter all text, blocks, and proxy entity objects on the drawing",
  "// 遍历选择对象\r": "//Traverse and select objects",
  "     console.log(\"遍历文字\", val);\r": "Console.log (Traverse Text, val);",
  "获取代理实体的所有原始实体ID": "Obtain all original entity IDs of the proxy entity",
  "// proxyEntity 为有效代理实体\r": "//ProxyEntity is a valid proxy entity",
  "  console.log(\"实体ID\", id);\r": "Console.log (\"entity ID\", id);",
  "获取代理实体中所有的文本内容": "Retrieve all text content from the proxy entity",
  "  console.log(\"遍历文字\", val);\r": "Console.log (Traverse Text, val);",
  "文本数组": "Text array",
  "获取代理实体的原始类名。": "Retrieve the original class name of the proxy entity.",
  "console.log(\"原始类名\", originalName)\r": "Console.log (\"original class name\", originalName)",
  "原始类名": "Original class name",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbRasterImage": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbRasterImage",
  "光栅图片类，该类用于在CAD中显示光栅图形": "Grating image class, which is used to display raster graphics in CAD",
  "// 创建一个新的 McDbRasterImage 实例\r": "//Create a new instance of McDbRasterImage",
  "获取图像对象的裁剪边界": "Obtain the cropping boundary of the image object",
  "//假设 rasterImage 为光栅图片实例\r": "//Assuming RasterImage is an instance of a raster image",
  "console.log(clipBoundaryPoints); // 输出裁剪边界的点数组\r": "console.log(clipBoundaryPoints); //  Output the set of points for cropping boundaries",
  "获取裁剪边界的类型": "Obtain the type of clipping boundary",
  "console.log(type); // 输出裁剪边界的类型\r": "console.log(type); //  Output the type of clipping boundary",
  "返回dwg文件中的图片的宽高像素。\r": "Return the width, height, and pixels of the image in the DWG file.",
  "获取图像的方向": "Obtain the direction of the image",
  "console.log(orientation.origin); // 输出原点\r": "console.log(orientation.origin); //  Output origin point",
  "console.log(orientation.uCorner); // 输出沿X轴的向量\r": "console.log(orientation.uCorner); //  Output a vector along the X-axis",
  "console.log(orientation.vOnPlane); // 输出沿Y轴的向量\r": "console.log(orientation.vOnPlane); //  Output a vector along the Y-axis",
  "origin: 原点 | uCorner: 沿X轴的向量 | vOnPlane: 沿Y轴的向量": "origin:  Origin | uCorner: vector along the X-axis | vPnP lane: vector along the Y-axis",
  "获取图像的定义I": "Definition of Image Acquisition I",
  "console.log(imageId.id); // 输出图像的定义 ID\r": "console.log(imageId.id); //  Definition ID of output image",
  "设置图像对象的裁剪边界": "Set the cropping boundary of image objects",
  "const clipBoundaryType = McDb.ClipBoundaryType.kRectangular; // 举例，裁剪类型为矩形\r": "const clipBoundaryType = McDb.ClipBoundaryType.kRectangular; //  For example, the cropping type is rectangular",
  "const clipBoundaryPoints = new McGePoint3dArray(); // 假设已经填充了裁剪边界的点\r": "const clipBoundaryPoints = new McGePoint3dArray(); //  Assuming that the points with cropped boundaries have already been filled",
  "| `type` | [`ClipBoundaryType`](../enums/2d.McDb.ClipBoundaryType.md) | 裁剪边界的类型 |": "|Type | [ClipBoundaryType] (../enums/2d. McDb. ClipBoundaryType. md) | Type of clipping boundary|",
  "| `aryPoint` | [`McGePoint3dArray`](2d.McGePoint3dArray.md) | 裁剪边界点数组 |": "|AryPoint | [McGePoint3dArray] (2d. McGePoint3dArray. md) | Crop boundary point group|",
  "返回一个布尔值，指示设置是否成功。": "Return a Boolean value indicating whether the setting was successful.",
  "设置保存dwg文件时，图片的宽高像素。\r": "Set the width, height, and pixels of the image when saving DWG files.",
  "设置图像的定义ID": "Set the definition ID for the image",
  "// 20 : 图片id\r": "//20: Image ID",
  "| `imageId` | [`McObjectId`](2d.McObjectId.md) | 图像的定义 ID |": "|ImageId | [McObject Id] (2d. McObject Id. md) | Definition ID of the image|",
  "设置或获取图像的方向": "Set or retrieve the direction of the image",
  "  // 设置失败\r": "//Setting failed",
  "| `origin` | [`McGePoint3d`](2d.McGePoint3d.md) | 原点 |": "|Origin | [McGePoint3d] (2d. McGePoint3d. md) | Origin|",
  "| `uCorner` | [`McGeVector3d`](2d.McGeVector3d.md) | 沿X轴的向量 |": "|UCorner | [McGeVector3d] (2d. McGeVector3d. md) | Vector along the X-axis|",
  "| `vOnPlane` | [`McGeVector3d`](2d.McGeVector3d.md) | 沿Y轴的向量 |": "|VPnP lane | [McGeVector3d] (2d. McGeVector3d. md) | Vector along the Y-axis|",
  "返回一个布尔值，指示设置是否成功": "Return a Boolean value indicating whether the setting was successful",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbRasterImageDef": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbRasterImageDef",
  "获取或设置栅格图像文件的路径。": "Get or set the path of the raster image file.",
  "console.log(\"文件路径:\", pathName);\r": "Console.log (file path: \", pathName);",
  "| `sPathName` | `string` | 文件的路径 |": "|The path of the 'sPathName' | 'string' | file|",
  "将栅格图像保存为 Base64 编码的字符串": "Save raster image as a Base64 encoded string",
  "  //保存成\r": "//Preserving Success",
  "  //保存失败\r": "//Save failed",
  "| `sUrl` | `string` | 格栅图像路径 |": "|SURL | string | Grid image path|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbRotatedDimension": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbRotatedDimension",
  "旋转标注尺寸类。": "Rotate dimension classes.",
  "   //旋转标注\r": "//Rotate annotation",
  "   const rDimension = new McDbRotatedDimension()  // 构造旋转标注对象    \r": "Const rDimension=new McDbRotatedDimension ()//Construct a rotated annotation object",
  "   rDimension.xLine1Point = new McGePoint3d(-1800, -800) // 设置对象第一条线的端点\r": "RDimension.xLine1Point=new McGePoint3d (-1800, -800)//Set the endpoint of the first line of the object",
  "   rDimension.xLine2Point = new McGePoint3d(1800, -800) // 设置对象第二条线的端点\r": "RDimension.xLine2Point=new McGePoint3d (1800, -800)//Set the endpoint of the second line of the object",
  "   rDimension.dimLinePoint = new McGePoint3d(-800, -500) // 设置对象标注线的端点\r": "RDimension.dimLinePoint=new McGePoint3d (-800, -500)//Set the endpoints of object annotation lines",
  "   rDimension.textAttachment = McDb.AttachmentPoint.kTopLeft // 设置对象文本对齐方式\r": "RDimension.textAttachment=McDb.AttachmentPoint.kTopLeft//Set object text alignment",
  "   rDimension.textRotation = 0.6 // 设置对象文字旋转角度\r": "RDimension.textRotation=0.6//Set the rotation angle of the object text",
  "   rDimension.trueColor = new McCmColor(200, 255, 0) // 设置对象颜色\r": "RDimension.trueColor=new McCMColor (200, 255, 0)//Set object color",
  "   rDimension.oblique = 0  // 设置对象倾斜角度\r": "RDimension.oblique=0//Set object tilt angle",
  "   rDimension.rotation = 0 // 设置对象旋转角度\r": "RDimension.rotation=0//Set object rotation angle",
  "   rDimension.dimensionText = \"标注文本\" // 设置对象文本内容\r": "RDimension.dimensionText=\"Annotation Text\"//Set object text content",
  "   MxCpp.getCurrentMxCAD().drawEntity(rDimension);//绘制旋转标注对象\r": "MxCpp.getCurrentMxCAD().drawEntity(rDimension);// Draw rotated annotation objects",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbSpatialFilter": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDDbPatchalFilter",
  "表示一个 CAD 图块的剪切边界对象": "Representing the cutting boundary object of a CAD block",
  "初始化一个新的 McDbSpatialFilter 实例。": "Initialize a new instance of McDDbPatchalFilter.",
  "返回剪切边界数组点.": "Return the cut boundary array points",
  "是否启用剪切边界": "Do you want to enable cutting boundaries",
  "剪切边界是否反向": "Is the cutting boundary reversed",
  "设置剪切边界数组点，点坐标是块引用的块表记录中的坐标。": "Set the cutting boundary array points, where the point coordinates are the coordinates in the block table record referenced by the block.",
  "设置是否启用剪切边界": "Set whether to enable cutting boundaries",
  "设置剪切边界反向": "Set the cutting boundary in reverse",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbSpline": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDDbSplit",
  "样条线对象": "Spline object",
  "得到样条线的拟合数据.": "Obtain the fitting data of the spline",
  "得到样条线的数据.": "Obtain spline data",
  "设置样条线的拟合数据.": "Set the fitting data for spline lines",
  "设置样条线的数据.": "Set spline data",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbText": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbtext",
  "表示一个 CAD 文字实体。": "Represents a CAD text entity.",
  "//绘垂直中间对齐的文字 pt(McGePoint3d) 文字位置点\r": "//Draw vertical center aligned text pt (McGePoint3d) text position point",
  "const text = new McDbText(); // 构造文字实体对象\r": "const text = new McDbText(); //  Constructing Text Entity Objects",
  "text.textString = \"测试文字\"; // 设置对象内容\r": "Text.textString=\"Test Text\";//Set Object Content",
  "text.horizontalMode = McDb.TextHorzMode.kTextMid; // 设置文字对齐方式\r": "text.horizontalMode = McDb.TextHorzMode.kTextMid; //  Set text alignment method",
  "text.alignmentPoint = text.position = pt; // 设置文字对齐点和文字位置\r": "text.alignmentPoint = text.position = pt; //  Set text alignment points and text positions",
  "MxCpp.getCurrentMxCAD().drawEntity(text); // 绘制文字对象": "MxCpp.getCurrentMxCAD().drawEntity(text); //  Draw text objects",
  "  // 按线对齐:选择文字对象按目标直线方向对齐\r": "//Align by Line: Select text objects and align them in the direction of the target line",
  "       // 选择目标直线对象\r": "//Select target line object",
  "       getLineObj.setMessage(\"请选择目标对齐线对象(选择直线)\");\r": "GetLineObj.setMessage (\"Please select the target alignment line object (choose a straight line)\");",
  "       // 选择目标文字对象\r": "//Select target text object",
  "       getTextObj.setMessage(\"请选择目标文字对象\");\r": "GetTextObj.setMessage (\"Please select the target text object\");",
  "       // 计算直线与文字对象角度\r": "//Calculate the angle between a straight line and a text object",
  "       const line_v = lineObj.getFirstDeriv(lineObj.getStartPoint().val);// 直线初始点切向量\r": "const line_v = lineObj.getFirstDeriv(lineObj.getStartPoint().val);//  Tangent vector at the initial point of a straight line",
  "       let angle1 = line_v.val.angleTo2(McGeVector3d.kXAxis, McGeVector3d.kNegateZAxis);//直线与水平方向角度\r": "let angle1 = line_v.val.angleTo2(McGeVector3d.kXAxis, McGeVector3d.kNegateZAxis);// Angle between straight line and horizontal direction",
  "       let angle2 = textObj.rotation;//文字初始角度\r": "let angle2 = textObj.rotation;// Initial angle of text",
  "       textObj.rotate(textObj.position, angle1 - angle2) // 文字对象旋转\r": "TextObj. rotate (textObj. position, angle1-angle 2)//Rotate the text object",
  "       mxcad.updateDisplay() // 更新显示\r": "Mxcad. updateDisplay ()//Update Display",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbTextStyleTable": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbTextCtyleTable",
  "表示数据库文字样式表。": "Represents a database text style sheet.",
  "// 获取所有文字样式\r": "//Get all text styles",
  "// 获取数据库文字样式表\r": "//Retrieve database text style sheet",
  "// 获取文字样式表中的所有文字样式表记录对象ID\r": "//Retrieve all text style sheet record object IDs from the text style sheet",
  "// 遍历文字样式表记录对象\r": "//Traverse the text style sheet to record objects",
  "向文字样式表中添加文字样式记录。": "Add text style records to the text style sheet.",
  "| `rec` | [`McDbTextStyleTableRecord`](2d.McDbTextStyleTableRecord.md) | 文字样式表记录对象。 |": "|'rec '| ['DcDbTextCtyleTableRecord'] (2d. McDbTextCtyleTableRecord. md) | Text style sheet record object|",
  "新增文字样式记录对象ID。": "Add a new text style record object ID.",
  "查找文字样式表中的文字样式记录。": "Search for text style records in the text style sheet.",
  "newTextStyleRecord.name = \"测试文字样式\";\r": "NewTextCtyleRecord.name=\"Test Text Style\";",
  "const objId = textSyleTable.get(\"测试文字样式\")\r": "Const objId=textSyleTable.get (\"Test Text Style\")",
  "| `sName` | `string` | `undefined` | 文字样式名称。 |": "|SName | string | undefined | Text style name|",
  "| `skipDeleted` | `boolean` | `true` | 是否跳过已删除文字样式。 |": "|SkipDeleted | boolean | true | Do you want to skip deleted text styles|",
  "文字样式记录对象ID。": "Text style records object ID.",
  "获取文字样式表中的所有文字样式记录的ID。": "Retrieve the IDs of all text style records in the text style sheet.",
  "ret 文字样式ID数组。": "Ret text style ID array.",
  "检查文字样式表中是否存在指定名称的文字样式记录。": "Check if there is a text style record with the specified name in the text style sheet.",
  "const res = textSyleTable.has(\"测试文字样式\");\r": "Const res=textSyleTable.Has (\"Test Text Style\");",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbTextStyleTableRecord": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbTextCtyleTableRecord",
  "表示一个文字样式表记录对象，实现了对文字的属性相关操作函数。": "Represents a text style sheet that records objects and implements attribute related operation functions for text.",
  "// 添加文字样式\r": "//Add Text Style",
  "   // 拿到当前文字样式表\r": "//Get the current text style sheet",
  "   // 构造一个文字样式表记录对象\r": "//Construct a text style sheet to record objects",
  "   // 设置对象文件名\r": "//Set object file name",
  "   // 设置对象大字体名称\r": "//Set the large font name for the object",
  "   // 设置对象文字大小\r": "//Set object text size",
  "   // 设置对象名\r": "//Set object name",
  "   // 设置对象宽度因子\r": "//Set object width factor",
  "   // 添加文字样式\r": "//Add Text Style",
  "大字体文件名称": "Large font file name",
  "newTextStyleRecord.bigFontFileName = \"测试\";\r": "NewTextCtyleRecord. bigFontFileName=\"Test\";",
  "console.log(\"大字体名称：\",newTextStyleRecord.bigFontFileName)\r": "Console.log (\"Large font name: \",newTextStyleRecord.bigFontFileName)",
  "字体文件名称": "Font file name",
  "newTextStyleRecord.fileName = \"测试字体名\";\r": "NewTextCtyleRecord. FileName=\"Test Font Name\";",
  "console.log(\"当前字体文件名：\",newTextStyleRecord.fileName)\r": "Console.log (current font file name: \",newTextStyleRecord.fileName)",
  "获取或设置文本样式表记录的一组标志位": "Get or set a set of flags for a text style sheet record",
  "// 获取标志位的当前值\r": "//Get the current value of the flag bit",
  "console.log(\"当前标志位:\", currentFlagBits);\r": "Console.log (current flag: \", currentFlagBits);",
  "// 设置新的标志位值\r": "//Set a new flag value",
  "const newFlagBits = 0b101010; // 例如：使用二进制字面量来表示新的标志位值\r": "const newFlagBits = 0b101010; //  For example, using binary literals to represent new flag values",
  "console.log(\"设置后的标志位:\", newTextStyleRecord.flagBits);\r": "Console.log (\"flag set: \", newTextStyleRecord.flagBits);",
  "获取或设置文本样式是否使用形状字体": "Get or set whether to use shape fonts for text styles",
  "获取或设置文本样式是否使用斜体": "Get or set whether to use italics for text style",
  "获取或设置文字样式名称。": "Get or set the name of the text style.",
  "newTextStyleRecord.name = \"测试文字样式\"\r": "NewTextCtyleRecord. name=\"Test Text Style\"",
  "console.log(newTextStyleRecord.name) // 测试文字样式\r": "Console. log (newTextCtyleRecord. name)//Test text style",
  "文字大小(高度)": "Text size (height)",
  "获取字体样式": "Get font style",
  "sTypeface: 字体名称 | bold: 是否粗体 | italic: 是否斜体 | charset: 字符集 | pitchAndFamily: 字体间距和风格": "sTypeface:  Font Name | bold: bold or not | italic: italic or not | charset: character set | pitchAndFamily: font spacing and style",
  "设置字体样式": "Set font style",
  "// 设置字体\r": "//Set font",
  "const typeface = \"Arial\"; // 字体名称\r": "const typeface = \"Arial\"; //  Font Name",
  "const isBold = true; // 是否粗体\r": "const isBold = true; //  Is it bold",
  "const isItalic = false; // 是否斜体\r": "const isItalic = false; //  Is it italicized",
  "const charset = 0; // 字符集\r": "const charset = 0; //  character set",
  "const pitchAndFamily = 0; // 字体间距和风格\r": "const pitchAndFamily = 0; //  Font spacing and style",
  "// 检查设置是否成功\r": "//Check if the settings are successful",
  "| `sTypeface` | `string` | 字体名称 |": "|STypeface | string | Font Name|",
  "| `bold` | `boolean` | 是否粗体 |": "|Bold | boolean | Is it bold|",
  "| `italic` | `boolean` | 是否斜体 |": "|Italic | boolean | italic or not|",
  "| `charset` | `number` | 字符集 |": "|Charset | number | character set|",
  "| `pitchAndFamily` | `number` | 字体间距和风格 |": "|PitchAndFamily | number | Font spacing and style|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbWipeout": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbWipeout",
  "Wipeout类": "Wipeout class",
  "构造函数。\r": "Constructor.",
  "获取Wipeout类边界": "Get Wipeout class boundary",
  "设置Wipeout类边界": "Set Wipeout class boundary",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McDbXrecord": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McDbXrecord",
  "扩展记录类型，实体可以设置它的扩展记录，用于存放更多的信息。": "Extended record types allow entities to set their extended records for storing more information.",
  "// 写扩展记录\r": "//Write extension records",
  "// 获取当前CAD对象的字典对象\r": "//Retrieve the dictionary object of the current CAD object",
  "// 获取字典中指定对象\"MyDict\"\r": "//Retrieve the specified object 'MyDict' from the dictionary",
  "   // 向字典中添加对象\r": "//Add objects to the dictionary",
  "   let xrec = new McDbXrecord();// 构造新扩展记录类型\r": "let xrec = new McDbXrecord();//  Construct a new extended record type",
  "   let data = new MxCADResbuf();// 构造resbuf对象\r": "let data = new MxCADResbuf();//  Construct respuff object",
  "   data.AddString(\"TestData\");// 添加字符串到 resbuf 中\r": "data.AddString(\"TestData\");//  Add string to respuff",
  "   xrec.setData(data);// 设置扩展记录中的数据\r": "xrec.setData(data);//  Set data in extended records",
  "   myDict.addObject(\"MyRecord\", xrec); // 向字典中添加对象\r": "myDict.addObject(\"MyRecord\", xrec); //  Add objects to the dictionary",
  "// 读取扩展数据。\r": "//Read extended data.",
  "  // 选择目标对象\r": "//Select target object",
  "  selEntity.setMessage(\"选择对象\");\r": "SelEntity. setMessage (\"Select Object\");",
  "  // 获取实例对象\r": "//Get instance object",
  "  // 读取扩展数据\r": "//Read extended data",
  "// 创建一个 McDbXrecord 对象\r": "//Create a McDbXrecord object",
  "获取扩展记录中的数据。": "Retrieve data from the extended record.",
  "设置扩展记录中的数据。": "Set the data in the extended record.",
  "| `xdata` | [`MxCADResbuf`](2d.MxCADResbuf.md) | resbuf 数据 |": "|Xdata | [MxCADResbuff] (2d. MxCADResbuff. md) | respuff data|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McGeBound": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McGeBound",
  "范围对象": "Scope Object",
  "| `pts?` | [`McGePoint3dArray`](2d.McGePoint3dArray.md) \\| [`McGePoint3d`](2d.McGePoint3d.md)[] | 三维点数组 |": "| `pts?` |  McGePoint3dArray (2d. McGePoint3dArray. md) \\ | McGePoint3d (2d. McGePoint3d. md) [] | 3D point array|",
  "是否有效": "Is it effective",
  " // 创建 McGeBound 实例\r": "//Create a McGeBound instance",
  " // 访问是否有效属性并设置其值\r": "//Accessing whether the attribute is valid and setting its value",
  "最大点": "Maximum point",
  " // 访问最大点属性并设置其值\r": "//Access the maximum point attribute and set its value",
  "最小点": "Minimum point",
  " // 访问最小点属性并设置其值\r": "//Access the minimum point attribute and set its value",
  "添加一个点": "Add a point",
  "// 创建 McGeBound 实例\r": "//Create a McGeBound instance",
  "  // 添加一个点到边界\r": "//Add a point to the boundary",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 三维点对象 |": "|Pt | McGePoint3d (2d. McGePoint3d. md) | 3D point object|",
  "添加一组点": "Add a set of points",
  "  // 创建 McGeBound 实例\r": "//Create a McGeBound instance",
  "  // 创建一组点\r": "//Create a set of points",
  "  // 添加一组点到边界\r": "//Add a set of points to the boundary",
  "| `pts` | [`McGePoint3dArray`](2d.McGePoint3dArray.md) \\| [`McGePoint3d`](2d.McGePoint3d.md)[] | 三维点对象数组 |": "|Pts | McGePoint3dArray (2d. McGePoint3dArray. md) \\ | McGePoint3d (2d. McGePoint3d. md) [] | 3D point object array|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McGeDoubleArray": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McGeDoubleArray",
  "双精度浮点数数组": "Double precision floating-point array",
  "| `imp?` | `object` | 内部实现对象 |": "| `imp?` | ` Object | Internal implementation object|",
  "添加一个值": "Add a value",
  "  // 创建数组实例\r": "//Create an array instance",
  "| `val` | `number` | 双精度浮点数 |": "|Val | number | Double precision floating-point number|",
  "通过数组索引得到数据元素的值": "Retrieve the values of data elements through array indexing",
  "  // 获取特定索引位置的值 \r": "//Get the value of a specific index location",
  "  const value = array.at(2); // 假设索引为2的位置有值\r": "const value = array.at(2); //  Assuming that the position with index 2 has a value",
  "| `index` | `number` | 数组索引 |": "|Index | number | array index|",
  "// array 表示一个McGeDoubleArray数组\r": "//Array represents a McGeDoubleArray array",
  "复制对象的值": "Copy the value of the object",
  " // array1 表示一个双精度浮点数数组\r": "//Array1 represents a double precision floating-point array",
  " // 现在array2与array1具有相同的值\r": "//Now array2 and array1 have the same value",
  "| `val` | [`McGeDoubleArray`](2d.McGeDoubleArray.md) | 双精度浮点数数组 |": "|Val | [McGeDoubleArray] (2d. McGeDoubleArray. md) | Double precision floating-point array|",
  "遍历数组": "Traverse the array",
  "| `call` | (`val`: `number`, `index`: `number`) => `void` | 回调函数 |": "|Call | (val: number, index: number)=>void | callback function|",
  "返回数组长度": "Return the length of the array",
  "通过数组索引设置数据元素的值": "Set the value of data elements through array indexing",
  "  array.setAt(1, 3.14159); // 将索引为1的位置的值设置为3.14159\r": "array.setAt(1, 3.14159); //  Set the value of the position with index 1 to 3.14159",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McGeLongArray": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McGeLongArray",
  "整数数组": "Integer array",
  " // 创建一个新的 McGeLongArray 实例\r": "//Create a new instance of McGeLongArray",
  " // 通过传入一个对象初始化 McGeLongArray\r": "//Initialize McGeLongArray by passing in an object",
  "向数组中添加一个值": "Add a value to an array",
  "| `val` | `number` | 整数值 |": "|Val | number | integer value|",
  "根据数组索引得到数据元素的值": "Obtain the values of data elements based on the array index",
  "  console.log(array.at(0)); // 输出: 5\r": "console.log(array.at(0)); //  Output: five",
  "  console.log(array.at(1)); // 输出: 10\r": "console.log(array.at(1)); //  Output: ten",
  "返回元素值": "Return element value",
  "// array为整数数组\r": "//Array is an integer array",
  "  // 复制 array2 的值到 array1\r": "//Copy the value of array2 to array1",
  "| `val` | [`McGeLongArray`](2d.McGeLongArray.md) | 整数数组 |": "|Val | [McGeLongArray] (2d. McGeLongArray. md) | Integer array|",
  "从 McObjectId 数组中复制值": "Copy values from the McObjectid array",
  "//objectIdArray 为一个对象id数组\r": "//ObjectIdArray is an array of object IDs",
  "| `aryId` | [`McObjectId`](2d.McObjectId.md)[] | McObjectId 数组 |": "|AryId | [McObject Id] (2d. McObject Id. md) [] | McObject Id array|",
  "  // 输出:\r": "//Output:",
  "  console.log(array.length()); // 输出: 0\r": "console.log(array.length()); //  Output: 0",
  "  console.log(array.at(0)); // 输出: 15\r": "console.log(array.at(0)); //  Output: fifteen",
  "| `index` | `number` | 数组索引值 |": "|Index | number | array index value|",
  "| `val` | `number` | 整数数值 |": "|Val | number | integer numerical value|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McGeMatrix3d": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McGeMatrix3d",
  "表示三维矩阵对象": "Representing a three-dimensional matrix object",
  "乘法的单位矩阵": "The identity matrix of multiplication",
  "获取矩阵在XY平面的旋转角度因子。\r": "Obtain the rotation angle factor of the matrix in the XY plane.",
  "@returns旋转角度因子。": "@Returns rotation angle factor.",
  "刻隆一个三维矩阵对象": "Create a three-dimensional matrix object for Kelon",
  "// matrix1 一个三维矩阵对象\r": "//Matrix1 is a three-dimensional matrix object",
  "三维矩阵对象": "3D matrix object",
  "| `val` | [`McGeMatrix3d`](2d.McGeMatrix3d.md) | 三维矩阵对象 |": "|Val | [McGeMatrix3d] (2d. McGeMatrix3d. md) | 3D matrix object|",
  "复制后的三维矩阵对象\r": "Copy the 3D matrix object",
  "求矩阵的行列式。": "Find the determinant of a matrix.",
  "// matrix 表示一个三维矩阵对象\r": "//Matrix represents a three-dimensional matrix object",
  "矩阵的行列式。": "The determinant of a matrix.",
  "获取矩阵中指定位置的元素值。": "Retrieve the element values at the specified position in the matrix.",
  "| `row` | `number` | 行索引。 |": "|Row | Number | Row index|",
  "| `col` | `number` | 列索引。 |": "|Col | number | column index|",
  "指定位置的元素值。": "The element value at the specified location.",
  "求矩阵的逆矩阵。": "Find the inverse matrix of the matrix.",
  "// matrix表示一个三维矩阵对象\r": "//Matrix represents a three-dimensional matrix object",
  "判断矩阵是否与指定的矩阵相等。": "Determine whether the matrix is equal to the specified matrix.",
  "// matrix1 matrix2 表示两个三维矩阵对象\r": "//Matrix1 and Matrix2 represent two three-dimensional matrix objects",
  "| `mat` | [`McGeMatrix3d`](2d.McGeMatrix3d.md) | 指定的矩阵。 |": "|` mat ` | [` McGeMatrix3d `] (2d. McGeMatrix3d. md) | The specified matrix|",
  "如果相等返回 true，否则返回 false。": "If they are equal, return true; otherwise, return false.",
  "判断矩阵是否为奇异矩阵。": "Determine whether the matrix is a singular matrix.",
  "如果是奇异矩阵返回 true，否则返回 false。": "If it is a singular matrix, return true; otherwise, return false.",
  "右乘指定的矩阵。": "Right multiply the specified matrix.",
  "// matrix1 表示一个三维矩阵对象\r": "//Matrix1 represents a three-dimensional matrix object",
  "返回右乘后的矩阵": "Return the matrix after right multiplication",
  "左乘指定的矩阵。": "Left multiply the specified matrix.",
  "| `leftSide` | [`McGeMatrix3d`](2d.McGeMatrix3d.md) | 左侧矩阵。 |": "|LeftSide | McGeMatrix3d (2d. McGeMatrix3d. md) | Left side matrix|",
  "返回左乘后的矩阵": "Return the matrix after left multiplication",
  "获取矩阵的缩放因子。": "Obtain the scaling factor of the matrix.",
  "矩阵的缩放因子。": "The scaling factor of the matrix.",
  "将矩阵设置为指定的坐标系。": "Set the matrix to the specified coordinate system.",
  "| `origin` | [`McGePoint3d`](2d.McGePoint3d.md) | 坐标系原点。 |": "|Origin | [McGePoint3d] (2d. McGePoint3d. md) | Coordinate system origin|",
  "| `xAxis` | [`McGeVector3d`](2d.McGeVector3d.md) | X 轴向量。 |": "|XAxis | [McGeVector3d] (2d. McGeVector3d. md) | X-axis vector|",
  "| `yAxis` | [`McGeVector3d`](2d.McGeVector3d.md) | Y 轴向量。 |": "|YAxis | [McGeVector3d] (2d. McGeVector3d. md) | Y-axis vector|",
  "| `zAxis` | [`McGeVector3d`](2d.McGeVector3d.md) | Z 轴向量。 |": "|ZAxis | [McGeVector3d] (2d. McGeVector3d. md) | Z-axis vector|",
  "设置矩阵中指定位置的元素值。": "Set the element values at the specified position in the matrix.",
  "| `val` | `number` | 指定位置的元素值。 |": "|Val | number | The value of the element at the specified location|",
  "将矩阵设置为镜向矩阵": "Set the matrix as a mirror matrix",
  " matrix.setMirror(new McGeVector3d(0, 0, 0), new McGeVector3d(20, 0, 0));//平移\r": "matrix.setMirror(new McGeVector3d(0, 0, 0), new McGeVector3d(20, 0, 0));// translation",
  "将矩阵设置为单位矩阵。": "Set the matrix to an identity matrix.",
  "将矩阵设置为两个矩阵的乘积。": "Set the matrix as the product of two matrices.",
  "| `mat1` | [`McGeMatrix3d`](2d.McGeMatrix3d.md) | 第一个矩阵。 |": "|Mat1 | [McGeMatrix3d] (2d. McGeMatrix3d. md) | First matrix|",
  "| `mat2` | [`McGeMatrix3d`](2d.McGeMatrix3d.md) | 第二个矩阵。 |": "|Mat2 | [McGeMatrix3d] (2d. McGeMatrix3d. md) | Second matrix|",
  "将矩阵设置为绕指定轴旋转指定角度的矩阵。": "Set the matrix to rotate around a specified axis by a specified angle.",
  " matrix.setToRotation(Math.PI, McGeVector3d.kZAxis / 180.0, new McGeVector3d(20,10,0));//平移\r": "matrix.setToRotation(Math.PI, McGeVector3d.kZAxis / 180.0, new McGeVector3d(20,10,0));// translation",
  "| `angle` | `number` | 旋转角度。 |": "|Angle | number | rotation angle|",
  "| `axis` | [`McGeVector3d`](2d.McGeVector3d.md) | 旋转轴向量。 |": "|Axis | [McGeVector3d] (2d. McGeVector3d. md) | Rotation axis vector|",
  "| `center` | [`McGePoint3d`](2d.McGePoint3d.md) | 旋转中心点。 |": "|Center | [McGePoint3d] (2d. McGePoint3d. md) | Rotate the center point|",
  "将矩阵设置为缩放矩阵。": "Set the matrix as a scaling matrix.",
  " matrix.setToScaling(0.5, new McGeVector3d(0, 0, 0));//平移\r": "matrix.setToScaling(0.5, new McGeVector3d(0, 0, 0));// translation",
  "| `scaleAll` | `number` | 缩放因子。 |": "|ScaleAll | number | scaling factor|",
  "| `center` | [`McGePoint3d`](2d.McGePoint3d.md) | 缩放中心点。 |": "|Center | [McGePoint3d] (2d. McGePoint3d. md) | Scale the center point|",
  "将矩阵设置为平移矩阵。": "Set the matrix as a translation matrix.",
  " matrix.setToTranslation(new McGeVector3d(20,10,0));//平移\r": "matrix.setToTranslation(new McGeVector3d(20,10,0));// translation",
  "| `vec` | [`McGeVector3d`](2d.McGeVector3d.md) | 平移向量。 |": "|Vec | [McGeVector3d] (2d. McGeVector3d. md) | Translation vector|",
  "将矩阵转置。": "Transpose the matrix.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McGePoint3d": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McGePoint3d",
  "表示三维点的对象。": "An object that represents a three-dimensional point.",
  "| `dX?` | `number` \\| `object` | X 坐标。 |": "| `dX?` | ` Number ` \\ | ` object ` | X coordinate|",
  "| `dY?` | `number` | Y 坐标。 |": "| `dY?` | ` Number ` | Y coordinate|",
  "| `dZ?` | `number` | Z 坐标。 |": "| `dZ?` | ` Number ` | Z coordinate|",
  "坐标系的原点": "Origin of coordinate system",
  "获取或设置 X 坐标。": "Get or set the X coordinate.",
  "console.log(point.x)//输出10\r": "Console. log (point. x)//Output 10",
  "获取或设置 Y 坐标。": "Get or set the Y coordinate.",
  "console.log(point.y)//输出10\r": "Console. log (point. y)//Output 10",
  "获取或设置 Z 坐标。": "Get or set the Z coordinate.",
  "console.log(point.z)//输出10\r": "Console. log (point. z)//Output 10",
  "计算点加上向量后的新位置": "Calculate the new position of the point after adding the vector",
  "| `vec` | [`McGeVector3d`](2d.McGeVector3d.md) | 向量 |": "|Vec | [McGeVector3d] (2d. McGeVector3d. md) | Vector|",
  "计算后的点对象": "Calculated point object",
  "刻隆一个点对象": "Kerong, a point object",
  "三维点对象": "3D point object",
  "复制点对象的值": "Copy the value of a point object",
  "复制后的点对象": "Copy the point object",
  "计算两点距离": "Calculate the distance between two points",
  "| `pnt` | [`McGePoint3d`](2d.McGePoint3d.md) | 三维点对象 |": "|Pnt | McGePoint3d (2d. McGePoint3d. md) | 3D point object|",
  "两点距离": "Distance between two points",
  "判断两个点是否相等": "Determine whether two points are equal",
  "console.log(res)//输出false\r": "Console. log (res)//Output false",
  "将three.js 的向量设置成点": "Set the vector of Three.js to points",
  "返回两点相减后得到的一个新的向量": "Return a new vector obtained by subtracting two points",
  "计算点减去向量后的新位置": "Calculate the new position of the point after subtracting the vector",
  "将当前对象的坐标信息转换为 THREE.Vector3 类的实例": "Convert the coordinate information of the current object to THREE Instances of Vector3 class",
  "THREE.Vector3实例对象": "THREE. Vector3 instance object",
  "使用矩阵变换该点": "Transform the point using a matrix",
  "  matrix.setToTranslation(new McGeVector3d(10,10,0));//平移\r": "matrix.setToTranslation(new McGeVector3d(10,10,0));// translation",
  "| `leftSide` | [`McGeMatrix3d`](2d.McGeMatrix3d.md) | 变换矩阵 |": "|LeftSide | McGeMatrix3d (2d. McGeMatrix3d. md) | Transformation Matrix|",
  "变换后的点对象": "The transformed point object",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McGePoint3dArray": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McGePoint3dArray",
  "表示三维点的数组": "Array representing three-dimensional points",
  "  // 创建一个新的 McGePoint3dArray 实例\r": "//Create a new instance of McGePoint3dArray",
  "  // 通过传入一个对象初始化 McGePoint3dArray\r": "//Initialize McGePoint3dArray by passing in an object",
  "| `val` | [`McGePoint3d`](2d.McGePoint3d.md) | 三维点对象 |": "|Val | [McGePoint3d] (2d. McGePoint3d. md) | 3D point object|",
  "根据数组索引值得到数据元素的值": "Obtain the value of a data element based on the array index value",
  "  console.log(point); // 输出: McGePoint3d { x: 1, y: 2, z: 3 }\r": "console.log(point); //  Output: McGePoint3d { x: 1, y: 2, z: 3 }",
  "| `val` | [`McGePoint3dArray`](2d.McGePoint3dArray.md) \\| [`McGePoint3d`](2d.McGePoint3d.md)[] | 三维点的数组 |": "|Val | [McGePoint3dArray] (2d. McGePoint3dArray. md) \\ | [McGePoint3d] (2d. McGePoint3d. md) [] | Array of 3D points|",
  "| `call` | (`val`: [`McGePoint3d`](2d.McGePoint3d.md), `index`: `number`) => `void` | 回调函数 |": "|Call | (val: [McGePoint3d] (2d. McGePoint3d. md), index: number=>void | callback function|",
  "返回数组为空": "Return an empty array",
  "  console.log(array.isEmpty()); // 输出: true": "console.log(array.isEmpty()); //  Output: true",
  "  console.log(array.isEmpty()); // 输出: false\r": "console.log(array.isEmpty()); //  Output: false",
  " console.log(array.length()); // 输出: 0  \r": "console.log(array.length()); //  Output: 0",
  "  console.log(array.at(0)); // 输出: McGePoint3d { x: 7, y: 8, z: 9 }\r": "console.log(array.at(0)); //  Output: McGePoint3d { x: 7, y: 8, z: 9 }",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McGeStringArray": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McGeSringArray",
  "表示字符串的数组": "Array representing strings",
  "  // 创建一个新的 McGeStringArray 实例\r": "//Create a new instance of McGeSringArray",
  "  // 通过传入一个对象初始化 McGeStringArray\r": "//Initialize McGeSringArray by passing in an object",
  "| `imp?` | `object` | 内部构造函数 |": "| `imp?` | ` Object ` | Internal constructor|",
  "  console.log(array.at(0)); // 输出: \"apple\"\r": "console.log(array.at(0)); //  Output: \"apple\"",
  "  console.log(array.at(1)); // 输出: \"banana\"\r": "console.log(array.at(1)); //  Output: \"banana\"",
  "| `index` | `number` | `undefined` | 数组索引 |": "|Index | number | undefined | array index|",
  "字符串": "character string",
  "| `call` | (`val`: `string`, `index`: `number`) => `void` | `undefined` | 回调函数 |": "|Call | (val: string, index: number)=>void | undefined | callback function|",
  "console.log(array.length()); // 输出: 0\r": "console.log(array.length()); //  Output: 0",
  "  console.log(array.at(0)); // 输出: \"orange\"\r": "console.log(array.at(0)); //  Output: \"orange\"",
  "| `val` | `string` | `undefined` | 字符串 |": "|Val | string | undefined | string|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McGeVector3d": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McGeVector3d",
  "表示三维向量的对象。": "An object that represents a three-dimensional vector.",
  "//求失量与X轴的夹角 \r": "//Find the angle between the loss and the X-axis",
  "//求出vetFx逆时针到vetT的角度\r": "//Find the angle from vetPx counterclockwise to vetT",
  "//判断向量vetT在向量VetFX的左边,还是在右边的调用\r": "//Determine whether vector vetT is on the left or right side of vector VetFX in the call",
  "      //向量vetT在vetFX的左边.\r": "//The vector vetT is to the left of vetFX",
  "     //向量vetT在vetFX的右边.\r": "//The vector vetT is to the right of vetFX",
  "  // 或\r": "//Or",
  "    //  vetFX在vetT的左边。\r": "//VetFX is on the left side of vetT.",
  "0长度向量": "0 length vector",
  "Z轴单位向量, 指向负 Z 轴方向": "Z-axis unit vector, pointing towards the negative Z-axis direction",
  "X轴单位向量, 指向正 X 轴方向": "X-axis unit vector, pointing towards the positive X-axis direction",
  "Y轴单位向量, 指向正 Y 轴方向": "Y-axis unit vector, pointing towards the positive Y-axis direction",
  "Z轴单位向量, 指向正 Z 轴方向": "Z-axis unit vector, pointing towards the positive Z-axis direction",
  "获取或设置向量 X 坐标。": "Get or set the X coordinate of the vector.",
  "获取或设置向量 Y 坐标。": "Get or set the Y coordinate of the vector.",
  "获取或设置向量 Z 坐标。": "Get or set the Z-coordinate of the vector.",
  "计算两向量在[0, Pi]范围内所夹的角度": "Calculate the angle between two vectors within the range of [0, Pi]",
  "计算两向量在[0, 2*Pi]范围内所夹的角度": "Calculate the angle between two vectors within the range of [0,2 * Pi]",
  "刻隆一个向量对象": "Kelon, a vector object",
  "三维向量对象": "3D vector object",
  "| `val` | [`McGeVector3d`](2d.McGeVector3d.md) | 三维向量对象 |": "|Val | [McGeVector3d] (2d. McGeVector3d. md) | 3D Vector Object|",
  "复制后的三维向量对象": "Copy the 3D vector object",
  "两向量的交叉积": "The cross product of two vectors",
  "两向量的点积": "Dot product of two vectors",
  "//判断两个向量方向相同还是相反\r": "//Determine whether two vectors have the same or opposite direction",
  "     //向量返向.\r": "//Vector reversal",
  "// 两个向量点乘如果等于0,表示向量垂直。\r": "//If the dot product of two vectors is equal to 0, it means that the vectors are perpendicular.",
  "// 两个向量点乘如果等于1,表示向量方向完全向同。\r": "//If the dot product of two vectors is equal to 1, it means that the vector directions are completely in the same direction.",
  "// 两个向量点乘如果等于-1,表示向量方向完全反向。\r": "//If the dot product of two vectors is equal to -1, it means that the direction of the vectors is completely opposite.",
  "| `vec` | [`McGeVector3d`](2d.McGeVector3d.md) | 三维向量对象 |": "|Vec | [McGeVector3d] (2d. McGeVector3d. md) | 3D vector object|",
  "点积结果": "Dot product result",
  "判断比较两个向量是否相等": "Determine whether comparing two vectors is equal",
  "布尔值\r": "Boolean value",
  "检查当前向量是否为单位长度": "Check if the current vector is of unit length",
  "是否为零向量": "Is it a zero vector",
  "获取向量长度": "Obtain vector length",
  "向量长度": "Vector length",
  "向量与某个值相乘，修改向量长度": "Multiply a vector with a certain value, modify the length of the vector",
  "| `val` | `number` | 数字 |": "|Val | number | Number|",
  "向量取反": "Vector inversion",
  "向量归一化操作": "Vector normalization operation",
  "垂直向量": "Vertical vector",
  "旋转": "rotate",
  "| `ang` | `number` | 旋转角度。 |": "|'ang' | 'number' | Rotation angle|",
  "| `axis?` | [`McGeVector3d`](2d.McGeVector3d.md) | 旋转轴向量 |": "| `axis?` |  [McGeVector3d] (2d. McGeVector3d. md) | Rotation axis vector|",
  "转换为THREE.Vector3": "Convert to THREE Vector3",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McObject": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McObject",
  "McObject 类, 封装了与 MxCAD 对象相关的功能，并提供了一些方法来操作和管理这些功能": "The McObject class encapsulates the functionality related to MxCAD objects and provides methods to manipulate and manage these functionalities",
  "| `imp?` | `any` | 对象实现 |": "| `imp?` | ` Any ` | Object Implementation|",
  "返回数据库对象": "Return database object",
  "获取绘制颜色": "Get drawing colors",
  "返回绘制颜色": "Return to drawing color",
  "设置绘制颜色": "Set drawing color",
  "| `val` | [`McCmColor`](2d.McCmColor.md) | 绘制颜色 |": "|Val | [McCMColor] (2d. McCmColor. md) | Draw colors|",
  "设置绘制颜色索引": "Set color index for drawing",
  "val 颜色索引类型": "Val color index type",
  "| `val` | `number` | 颜色索引类型 |": "|Val | number | color index type|",
  "获取当前绘制的标注样式": "Get the currently drawn annotation style",
  "设置当前绘制的标注样式": "Set the annotation style for the current drawing",
  "| `val` | `string` | 样式名称 |": "|Val | string | Style Name|",
  "获取绘制图层": "Get drawing layers",
  "返回绘制图层": "Return to drawing layer",
  "设置绘制图层": "Set drawing layer",
  "| `val` | `string` | 绘制图层 |": "|Val | string | Draw layers|",
  "获取绘制线型比例": "Obtain the scale of the drawn line type",
  "返回绘制线型比例": "Return to drawing line type scale",
  "设置绘制线型比例": "Set the drawing line scale",
  "| `val` | `number` | 绘制线型比例 |": "|Val | number | Draw line type scale|",
  "获取绘制线宽": "Get drawing line width",
  "返回绘制线宽": "Return to drawing line width",
  "设置绘制线宽": "Set drawing line width",
  "| `val` | [`LineWeight`](../enums/2d.McDb.LineWeight.md) | 绘制线宽 |": "|Val | [LineWeight] (../enums/2d. McDb. LineWeight. md) | Draw line width|",
  "获取当前绘制的线宽": "Get the current drawn line width",
  "设置当前绘制的线宽": "Set the current drawn line width",
  "| `val` | `number` | 线宽 |": "|Val | number | line width|",
  "获取绘制线型": "Obtain the drawing line type",
  "返回绘制线型": "Return to drawing line type",
  "设置绘制线型": "Set drawing line type",
  "| `val` | `string` | 绘制线型 |": "|Val | string | Draw line types|",
  "获取当前绘制的线型定义": "Get the current line type definition drawn",
  "设置当前绘制的线型定义": "Set the line type definition for the current drawing",
  "| `val` | `string` | 线型定义 |": "|Val | string | Line type definition|",
  "获取绘制文字样式": "Get the style of drawing text",
  "返回绘制文字样式": "Return to drawing text style",
  "设置绘制文字样式": "Set the style for drawing text",
  "| `val` | `string` | 绘制文字样式 |": "|Val | string | Draw text styles|",
  "返回调用draw开头的绘图数，使用数据库的当前默认属性。": "Return the number of drawings starting with the call 'draw', using the current default properties of the database.",
  "设置调用draw开头的绘图数，使用数据库的当前默认属性": "Set the number of drawings starting with 'draw' when calling, using the current default properties of the database",
  "| `val` | `boolean` | 线宽 |": "|Val | boolean | Line width|",
  "返回与MxCAD对象绑定的MxDraw对象。": "Return the MxDraw object bound to the MxCAD object.",
  "MxDraw对象": "MxDraw object",
  "添加使用TrueType字体的文字样式": "Add text styles using TrueType fonts",
  "| `sTrueTypeFontName` | `string` | `\"\"` | TrueType字体名,为空使用默认TrueType字体. |": "|STrueTypeFontName | string | \"\" | TrueType font name, if left blank, use the default TrueType font|",
  "| `dXScale` | `number` | `1.0` | X 方向缩放比例 |": "|DXScale | number | 1.0 | X-direction scaling ratio|",
  "把对象添加当前选择中": "Add the object to the current selection",
  "| `id` | [`McObjectId`](2d.McObjectId.md) \\| [`McObjectId`](2d.McObjectId.md)[] | `undefined` | 对象id |": "|Id | [McObjectid] (2d. McObjectid. md) \\ | [McObjectid] (2d. McObjectid. md) [] | undefined | Object ID|",
  "添加标注样式": "Add annotation style",
  "pszDoubleData 双精度型数据\r": "PszDoubleData Double Precision Data",
  "| 系统变量 | 值 | 功能说明 |\r": "|System Variables | Values | Function Description|",
  "| dimaltf | 143 | 控制换算单位的乘数 |\r": "|Dimaltf | 143 | Control the multiplier for converting units|",
  "| dimasz | 41  | 控制尺寸线和引线箭头的大小。并控制基线的大小。|\r": "|Dimasz | 41 | Control the size of dimension lines and lead arrows. And control the size of the baseline|",
  "| dimcen | 141 | 控制圆或圆弧圆心标记以及中心线的绘制。|\r": "|Dimcen | 141 | Control the marking of circle or arc centers and the drawing of centerlines|",
  "| dimdle |  46  | 当使用小斜线代替箭头进行标注时，设置尺寸线超出尺寸界线的距离。|\r": "|Dimdle | 46 | When using a small diagonal line instead of an arrow for annotation, set the distance from the dimension line beyond the dimension boundary line|",
  "| dimdli |  43 | 控制基线标注中尺寸线的间距。|\r": "|Dimdli | 43 | Control the spacing of dimension lines in baseline annotation|",
  "| dimexe |  44 | 将命名标注样式及其设置输出到外部文件。|\r": "|Dimexe | 44 | Export named annotation styles and their settings to an external file|",
  "| dimexo |  42 | 指定尺寸界线偏离原点的距离。|\r": "|Dimexo | 42 | Specify the distance from the origin of the dimension extension line|",
  "| dimgap |  147 | 设置当打断尺寸线以符合标注文字时，标注文字周围的距离。|\r": "|Dimgap | 147 | Set the distance around the annotation text when the dimension line is broken to conform to the annotation text|",
  "| dimlfac | 144 | 为线性标注测量值设置比例因子。|\r": "|Dimlfac | 144 | Set the scaling factor for linear annotation measurement values|",
  "| dimrnd |  45 | 将所有标注距离舍入为指定值。|\r": "|Dimrnd | 45 | Rounds all annotated distances to the specified value|",
  "| dimscale | 40 | 设置应用于标注变量（用于指定尺寸、距离或偏移量）的全局比例因子。|\r": "|Dimscale | 40 | Set the global scale factor applied to the annotation variable (used to specify size, distance, or offset)|",
  "| dimtfac | 146 | 与通过 DIMTXT 系统变量设置一样，指定分数和公差值的文字高度相对于标注文字高度的比例因子。|\r": "|Dimtfac | 146 | As set through the DIMTXT system variable, specify the scaling factor of the text height of the score and tolerance values relative to the annotation text height|",
  "| dimtm  |  48 | 为标注文字设置最小（即最低）公差限制。|\r": "|Dimtm | 48 | Set the minimum (i.e. lowest) tolerance limit for the annotation text|",
  "| dimtp  |  47 | 为标注文字设置最大（即最高）公差限制。|\r": "|Dimtp | 47 | Set the maximum (i.e. highest) tolerance limit for the annotation text|",
  "| dimtsz |  142 | 指定线性标注、半径标注以及直径标注中绘制的代替箭头的小斜线的尺寸。|\r": "|Dimtsz | 142 | Specify the size of the small diagonal lines drawn instead of arrows in linear, radius, and diameter annotations|",
  "| dimtvp |  145 | 控制标注文字在尺寸线上方或下方的垂直位置。|\r": "|Dimtvp | 145 | Control the vertical position of the annotation text above or below the dimension line|",
  "| dimtxt |  140 | 指定标注文字的高度（除非当前文字样式具有固定的高度）。|\r": "|Dimtxt | 140 | Specify the height of the annotation text (unless the current text style has a fixed height)|",
  "| dimaltrnd | 148 | 舍入换算标注单位。|": "|Dimaltrnd | 148 | Rounding conversion annotation unit|",
  "pszIntData 整型数据\r": "PszIntData integer data",
  "| dimadec | 179 | 控制角度标注中显示的精度小数位数。|\r": "|Dimadec | 179 | Control the precision decimal places displayed in the angle annotation|",
  "| dimalt | 170 | 控制标注中换算单位的显示。|\r": "|Dimalt | 170 | Controls the display of conversion units in annotations|",
  "| dimaltd | 171 | 控制换算单位中的小数位数。|\r": "|Dimaltd | 171 | Control the number of decimal places in the conversion unit|",
  "| dimalttd | 274 | 设置换算标注单位中的公差值的小数位数。|\r": "|Dimalttd | 274 | Set the decimal place for the tolerance value in the conversion annotation unit|",
  "| dimalttz | 286 | 控制对公差值的消零处理。|\r": "|Dimalttz | 286 | Control the zeroing process of tolerance values|",
  "| dimaltu | 273 | 为所有标注子样式（角度标注除外）的换算单位设定单位格式。|\r": "|Dimaltu | 273 | Set the unit format for the conversion units of all annotation sub styles (excluding angular annotations)|",
  "| dimaltz | 285 | 控制对换算单位标注值的消零处理。|\r": "|Dimaltz | 285 | Control the zeroing process for the annotation values of conversion units|",
  "| dimaunit | 275 | 为角度标注设定单位格式。|\r": "|Dimaunit | 275 | Set the unit format for angle annotation|",
  "| dimclrd | 176 | 为尺寸线、箭头和标注引线指定颜色。|\r": "|Dimclrd | 176 | Specify colors for dimension lines, arrows, and dimension leaders|",
  "| dimclre | 177 | 为尺寸界线、圆心标记和中心线指定颜色。|\r": "|Dimctre | 177 | Specify colors for dimension lines, center marks, and centerlines|",
  "| dimclrt | 178 | 为标注文字指定颜色。|\r": "|Dimclrt | 178 | Specify the color for the annotation text|",
  "| dimdec | 271 | 设置标注主单位中显示的小数位数。|\r": "|Dimdec | 271 | Set the number of decimal places displayed in the primary unit of the annotation|",
  "| dimfit | 287 | 尺寸界线内的空间不足以同时放下标注文字和箭头时，此系统变量将确定这两者的排列方式。|\r": "|When the space within the dimension line is insufficient to accommodate both the annotation text and the arrow, this system variable will determine the arrangement of both|",
  "| dimjust | 280 | 控制标注文字的水平位置。|\r": "|Dimjust | 280 | Control the horizontal position of the annotation text|",
  "| dimlim | 72 | 生成标注界限作为默认文字。|\r": "|Dimlim | 72 | Generate annotation boundaries as default text|",
  "| dimsah | 173 | 控制尺寸线箭头块的显示。|\r": "|Dimsah | 173 | Control the display of dimension line arrow blocks|",
  "| dimsd1 | 281 | 控制是否隐去第一条尺寸线和箭头。|\r": "|Dimsd1 | 281 | Control whether to hide the first dimension line and arrow|",
  "| dimsd2 | 282 | 控制是否隐去第二条尺寸线和箭头。|\r": "|Dimsd2 | 282 | Control whether to hide the second dimension line and arrow|",
  "| dimse1 | 75 | 控制是否隐去第一条尺寸界线。|\r": "|Dimse1 | 75 | Control whether to hide the first dimension line|",
  "| dimse2 | 76 | 控制是否隐去第二条尺寸界线。|\r": "|Dimse2 | 76 | Control whether to hide the second dimension line|",
  "| dimsoxd | 175 | 如果尺寸界线内没有足够的空间，则隐去箭头。|\r": "|Dimsoxd | 175 | If there is not enough space within the dimension line, hide the arrow|",
  "| dimtad | 77 | 控制文字相对于尺寸线的垂直位置。|\r": "|Dimtad | 77 | Control the vertical position of the text relative to the dimension line|",
  "| dimtdec | 272 | 设置标注主单位的公差值中显示的小数位数。|\r": "|Dimtdec | 272 | Set the number of decimal places displayed in the tolerance value of the primary unit of the annotation|",
  "| dimtih | 73 | 控制所有标注类型（坐标标注除外）的标注文字在尺寸界线内的位置。 |\r": "|Dimtih | 73 | Controls the position of annotation text for all annotation types (excluding coordinate annotations) within the dimension lines|",
  "| dimtix | 174 | 在尺寸界线之间绘制文字。|\r": "|Dimtix | 174 | Draw text between dimension lines|",
  "| dimtofl | 172 | 控制是否在尺寸界线之间绘制尺寸线（即使标注文字被放置在尺寸界线之外）。|\r": "|Dimtofl | 172 | Controls whether dimension lines are drawn between dimension lines (even if the dimension text is placed outside the dimension lines)|",
  "| dimtoh | 74 | 控制标注文字在尺寸界线外的位置。|\r": "|Dimitoh | 74 | Control the position of the annotation text outside the dimension line|",
  "| dimtol | 71 | 将公差附在标注文字中。|\r": "|Ditol | 71 | Attach the tolerance in the annotation text|",
  "| dimtolj | 283 | 设置公差值相对于表面标注文字的垂直对正方式。|\r": "|Dimtolj | 283 | Set the vertical alignment of tolerance values relative to surface annotation text|",
  "| dimzin  | 78 | 控制针对主单位值的消零处理。|\r": "|Dimzin | 78 | Control the zeroing process for the main unit value|",
  "| dimupt | 288 | 控制用户定位文字的选项。|\r": "|Dimupt | 288 | Control the option for users to locate text|",
  "| dimtzin | 284 | 控制对公差值的消零处理。|\r": "|Dimtzin | 284 | Control the zeroing process of tolerance values|",
  "| dimfrac | 276 | 设置分数格式。|\r": "|Dimfrac | 276 | Set score format|",
  "| dimlunit | 277 | 为所有标注类型（角度标注除外）设置单位。|\r": "|Dimlunit | 277 | Set units for all annotation types (excluding angular annotations)|",
  "| dimatfit | 289 | 尺寸界线内的空间不足以同时放下标注文字和箭头时，此系统变量将确定这两者的排列方式。|\r": "|When the space within the dimension line is insufficient to accommodate both the annotation text and the arrow, this system variable will determine the arrangement of both|",
  "| dimtmove | 279 | 设置标注文字的移动规则。|\r": "|Dimtmove | 279 | Set the movement rules for annotation text|",
  "| dimazin | 79 | 针对角度标注进行消零处理。|": "|Dimazin | 79 | Zero elimination processing for angle annotation|",
  "pszStringData 字符串型数据\r": "PszStringData string type data",
  "| dimapost | 4 | 指定用于所有标注类型（角度标注除外）的换算标注测量值的文字前缀或后缀（或两者都指定）。|\r": "|Dimapost | 4 | Specify the text prefix or suffix (or both) used for converting dimension measurements for all dimension types (excluding angular dimensions)|",
  "| dimpost | 3 | 为标注测量值指定文字前缀或后缀（或两者）。|": "|Dimpost | 3 | Specify a text prefix or suffix (or both) for annotating measurement values|",
  "pszIdData ID 型数据\r": "PszIdData ID type data",
  "| dimblk | 342 | 为尺寸线的第二个端点设置箭头 。|\r": "|Dimblk | 342 | Set an arrow for the second endpoint of the dimension line|",
  "| dimblk1 | 343 | 为尺寸线的第一个端点设置箭头。|\r": "|Dimblk1 | 343 | Set an arrow for the first endpoint of the dimension line|",
  "| dimblk2 | 344 | 为尺寸线的第二个端点设置箭头。|\r": "|Dimblk2 | 344 | Set an arrow for the second endpoint of the dimension line|",
  "| dimldrblk | 341 | 指定引线箭头的类型。|\r": "|Dimldrblk | 341 | Specify the type of leader arrow|",
  "| dimtxsty | 340 | 指定标注的文字样式。|": "|Dimtxsty | 340 | Specify the text style for the annotation|",
  "// MyDimStyle2：样式名称\r": "//MyDimStyle2: Style Name",
  "// \"41,0.18,141,0.09,40,200\"：双精度型数据\r": "//41, 0.18141, 0.09, 40200 \": Double precision data",
  "// \"77,1,271,3\": 整型数据\r": "//77,1271,3 \": integer data",
  "// 其中数值两两一组，如 \"41,0.18\"：dimasz系统变量值设置为0.18；\"77,1\"：dimtad系统变量值设置为1\r": "//Among them, the values are set in pairs, such as \"41,0.18\": the value of the dimasz system variable is set to 0.18; 77,1 \": The value of the dimtad system variable is set to 1",
  "增加一个%%c前缀 '3,\"%%c<>\"'\r": "Add a%% c prefix '3, \"%%c<>\"'",
  "| `pszName` | `string` | 样式名称 |": "|PszName | string | Style Name|",
  "| `pszDoubleData` | `string` | 双精度型数据 |": "|PszDoubleData | string | Double precision data|",
  "| `pszIntData` | `string` | 整型数据 |": "|PszIntData | string | integer data|",
  "| `pszStringData` | `string` | 字符串型数据 |": "|` pszStringData ` | ` string ` | String data|",
  "| `pszIdData` | `string` | ID 型数据 |": "|PszIdData | string | ID type data|",
  "添加一个图片定义到cad数据库中 。": "Add an image definition to the CAD database.",
  "| `imageUrl` | `string` | `undefined` | 图片路径 |": "|ImageURL | string | undefined | Image path|",
  "| `sName` | `string` | `\"\"` | 图片定义名称 |": "|SName | string | \"\" | Image Definition Name|",
  "添加图层": "Add Layer",
  "mxcad.addLayer(\"图层名称\")\r": "Mxcad. addLayer (\"Layer Name\")",
  "添加线型": "Add line type",
  "//定义虚线数据据,\"MyLineType\"是线型名，\"6,-8\"是虚线的一个单位定义，6是实线长，-8是空格长。\r": "//Define dashed data, \"MyLineType\" is the line name, \"6, -8\" is a unit definition of the dashed line, 6 is the length of the solid line, and -8 is the length of the space.",
  "增加一个图案定义": "Add a pattern definition",
  "   //45 = angle 是图案线角度.\r": "//45=angle is the angle of the pattern line",
  "   //0 = x-origin 是第一个填充线经过的点位置X坐标\r": "//0=x-origin is the X-coordinate of the point where the first fill line passes through",
  "   //0 = y-origin 是第一个填充线经过的点位置Y坐标\r": "//0=y-origin is the Y coordinate of the point where the first fill line passes through",
  "   //0 = delta-x   是下一个填充线相对前一个线的X方向偏移\r": "//0=delta-x is the X-direction offset of the next fill line relative to the previous line",
  "   //0.125 = delta-y   是下一个填充线相对前一个线的Y方向偏移\r": "//0.125=delta-y is the Y-direction offset of the next fill line relative to the previous line",
  "| `sName` | `string` | 图案名称 |": "|SName | string | Pattern Name|",
  "| `sDefinitionData` | `string` | 图案默认定义数据 |": "|SDefinitionData | string | Pattern default definition data|",
  "添加一个系统变量名，用于变量对像修改后，事件通知.\r": "Add a system variable name for event notification after variable object modification",
  "变量对像修改事件名：sysVarChanged": "Variable object modification event name: sysVarChanged",
  "添加文字样式": "Add Text Style",
  "触发一个系统事件的调用": "Call to trigger a system event",
  "| `param?` | `any` | 事件参数 |": "| `param?` | ` Any | Event Parameters|",
  "清除背景绘制对象": "Clear background drawing objects",
  "清除当前所有选择": "Clear all current selections",
  "创建mxcad对象 。": "Create an MXCAD object.",
  "// 创建mxcad示例对象\r": "//Create an MXCAD sample object",
  "// canvas元素的id\r": "//The ID of the canvas element",
  "// 获取加载wasm相关文件(wasm/js/worker.js)路径位置\r": "//Retrieve the path location for loading wasm related files (wasm/js/worker. js)",
  "// 需要初始化打开的文件url路径\r": "//Need to initialize the URL path of the opened file",
  "// 提供加载字体的目录路径\r": "//Provide the directory path for loading fonts",
  "| `config` | [`MxCadConfig`](../interfaces/2d.MxCadConfig.md) | createMxCad 的参数配置 |": "|` config ` | [` MxCadConfig `] (../interfaces/2d. MxCadConfig. md) | Parameter configuration for creating MxCad|",
  "销毁指定的 McRxObjectImp 对象": "Destroy the specified McRxObject Imp object",
  "| `pObjectImp` | `McRxObjectImp` | 待销毁的 McRxObjectImp 对象 |": "|PObject Imp | McRx Object Imp | McRx Object Imp object to be destroyed|",
  "绘制圆弧": "Draw an arc",
  "| `dCenterX` | `number` | 圆心 X 坐标 |": "|DCenterX | number | X coordinate of the center of the circle|",
  "| `dCenterY` | `number` | 圆心 Y 坐标 |": "|DCenterY | number | Y coordinate of the center|",
  "| `dRadius` | `number` | 半径 |": "|DRadius | number | radius|",
  "| `dStartAng` | `number` | 起始角度，单位为弧度 |": "|DStartAng | number | Starting angle, in radians|",
  "| `dEndAng` | `number` | 结束角度，单位为弧度 |": "|DEndAng | number | End angle, in radians|",
  "成功返回 1，失败返回 0": "Success returns 1, failure returns 0",
  "//由圆弧上三个点绘制圆弧\r": "//Draw an arc from three points on the arc",
  "| `dStartPointX` | `number` | 起始点 X 坐标 |": "|DStartPointX | number | starting point X coordinate|",
  "| `dStartPointY` | `number` | 起始点 Y 坐标 |": "|DStartPointY | number | Starting point Y coordinate|",
  "| `dMidPointX` | `number` | 中间点 X 坐标 |": "|DMidPointX | number | X coordinate of the midpoint|",
  "| `dMidPointY` | `number` | 中间点 Y 坐标 |": "|DMidPointY | number | Y coordinate of the midpoint|",
  "| `dEndPointX` | `number` | 结束点 X 坐标 |": "|DEndPointX | number | End point X coordinate|",
  "| `dEndPointY` | `number` | 结束点 Y 坐标 |": "|DEndPointY | number | End point Y coordinate|",
  "  //由圆弧上的开始点，结束度和凸度会圆弧\r": "//The starting point, ending degree, and convexity on the arc will form an arc",
  "| `dBulge` | `number` | 凸度 |": "|DBulge | number | convexity|",
  "绘制块参照": "Draw block reference",
  "| `dPosX` | `number` | 参照位置 X 坐标 |": "|DPosX | number | Reference position X coordinate|",
  "| `dPosY` | `number` | 参照位置 Y 坐标 |": "|DPosY | number | Reference position Y coordinate|",
  "| `dScale` | `number` | 缩放比例 |": "|DScale | number | scaling ratio|",
  "| `dAng` | `number` | 旋转角度，单位为弧度 |": "|DAng | number | Rotation angle, in radians|",
  "块对象id": "Block object ID",
  "绘制圆": "Draw a circle",
  "绘制对齐标注": "Draw alignment annotations",
  "| `dExtLine1PointX` | `number` | 第一条尺线起点 X 坐标 |": "|DExtLine1PointX | number | X-coordinate of the starting point of the first ruler line|",
  "| `dExtLine1PointY` | `number` | 第一条尺线起点 Y 坐标 |": "|DExtLine1PointY | number | Y coordinate of the starting point of the first ruler line|",
  "| `dExtLine2PointX` | `number` | 第二条尺线起点 X 坐标 |": "|DExtLine2PointX | number | X-coordinate of the starting point of the second ruler line|",
  "| `dExtLine2PointY` | `number` | 第二条尺线起点 Y 坐标 |": "|DExtLine2PointY | number | Y coordinate of the starting point of the second ruler line|",
  "| `dTextPositionX` | `number` | 文本位置 X 坐标 |": "|DTextPositionX | number | Text Position X Coordinate|",
  "| `dTextPositionY` | `number` | 文本位置 Y 坐标 |": "|DTextPositionY | number | Y coordinate of text position|",
  "绘制角度标注": "Draw angle annotation",
  "| `dAngleVertexX` | `number` | 角度顶点 X 坐标 |": "|DAngle VertexX | number | angle vertex X coordinate|",
  "| `dAngleVertexY` | `number` | 角度顶点 Y 坐标 |": "|DAngle VertexY | number | Y-coordinate of angle vertex|",
  "| `dFirstEndPointX` | `number` | 第一条尺线起点 X 坐标 |": "|DFirstEndPointX | number | X-coordinate of the starting point of the first ruler line|",
  "| `dFirstEndPointY` | `number` | 第一条尺线起点 Y 坐标 |": "|DFirstEndPointY | number | Y coordinate of the starting point of the first ruler line|",
  "| `dSecondEndPointX` | `number` | 第二条尺线起点 X 坐标 |": "|DSecondEndPointX | number | X coordinate of the starting point of the second ruler line|",
  "| `dSecondEndPointY` | `number` | 第二条尺线起点 Y 坐标 |": "|DSecondEndPointY | number | Y coordinate of the starting point of the second ruler line|",
  "| `dTextPointX` | `number` | 文本位置 X 坐标 |": "|DTextPointX | number | Text Position X Coordinate|",
  "| `dTextPointY` | `number` | 文本位置 Y 坐标 |": "|DTextPointY | number | Text Position Y Coordinate|",
  "绘制直径标注": "Draw diameter annotation",
  "| `dChordPointX` | `number` | 弦线端点 X 坐标 |": "|DChordPointX | number | Chord endpoint X coordinate|",
  "| `dChordPointY` | `number` | 弦线端点 Y 坐标 |": "|DChordPointY | number | chord endpoint Y coordinate|",
  "| `dFarChordPointX` | `number` | 弦线远端点 X 坐标 |": "|DFarChordPointX | number | X coordinate of the far end point of the string|",
  "| `dFarChordPointY` | `number` | 弦线远端点 Y 坐标 |": "|DFarChordPointY | number | Y-coordinate of the far end point of the string|",
  "| `dLeaderLength` | `number` | 引线长度 |": "|DLeaderLength | number | lead length|",
  "直径标注对象id": "Diameter annotation object ID",
  "绘制标注线性尺寸": "Draw linear dimensions for annotation",
  "| `dDefinitionPointX` | `number` | 定义点 X 坐标 |": "|DDefinitionPointX | number | Define the coordinates of point X|",
  "| `dDefinitionPointY` | `number` | 定义点 Y 坐标 |": "|DDefinitionPointY | number | Define the coordinates of point Y|",
  "| `dDeaderEndPointX` | `number` | 标注终点 X 坐标 |": "|DDeaderEndPointX | number | Annotate the X coordinate of the endpoint|",
  "| `dDeaderEndPointY` | `number` | 标注终点 Y 坐标 |": "|DDeaderEndPointY | number | Annotate the Y coordinate of the endpoint|",
  "| `isUseXAxis` | `boolean` | 是否沿 X 轴方向标注 |": "|Is' isUseXAxis' | 'boolean' | labeled along the X-axis direction|",
  "线性尺寸对象id": "Linear size object ID",
  "绘制标注径向尺寸": "Draw radial dimensions for annotation",
  "| `dCenterX` | `number` | 中心点 X 坐标 |": "|DCenterX | number | X coordinate of the center point|",
  "| `dCenterY` | `number` | 中心点 Y 坐标 |": "|DCenterY | number | Y coordinate of the center point|",
  "| `dLeaderLength` | `number` | 标注线长度 |": "|DLeaderLength | number | Length of annotation line|",
  "径向尺寸对象id": "Radial dimension object ID",
  "绘制旋转标注": "Draw rotation annotation",
  "| `dDimLineLocationX` | `number` | 标注线位置 X 坐标 |": "|DDimLinePositionX | number | annotation line position X coordinate|",
  "| `dDimLineLocationY` | `number` | 标注线位置 Y 坐标 |": "|DDimLinePositionY | number | Y coordinate of annotation line position|",
  "| `dRotationAngle` | `number` | 旋转角度，单位为弧度 |": "|DRotationAngle | number | Rotation angle, in radians|",
  "旋转标注对象id": "Rotate annotation object ID",
  "绘制椭圆": "Draw an ellipse",
  "| `dCenterX` | `number` | 椭圆中心 X 坐标 |": "|DCenterX | number | X-coordinate of ellipse center|",
  "| `dCenterY` | `number` | 椭圆中心 Y 坐标 |": "|DCenterY | number | Y coordinate of ellipse center|",
  "| `dMajorAxisX` | `number` | 长轴 X 坐标 |": "|DMajorAxisX | number | long axis X coordinate|",
  "| `dMajorAxisY` | `number` | 长轴 Y 坐标 |": "|DMajorAxisY | number | Long axis Y coordinate|",
  "| `dRadiusRatio` | `number` | 短轴与长轴的比例 |": "|DRadiusRatio | number | ratio of minor axis to major axis|",
  "绘制椭圆弧": "Draw an elliptical arc",
  "绘制实体": "Draw entities",
  "| `entity` | [`McDbEntity`](2d.McDbEntity.md) | `undefined` | 实体对象 |": "|Entity | [McDbEntity] (2d. McDbEntity. md) | undefined | Entity object|",
  "绘制结果": "Draw Results",
  "绘制填充对象": "Draw Fill Object",
  "绘制对象id": "Draw object ID",
  "绘制一个图片": "Draw an image",
  "| `dPosX` | `number` | `undefined` | 图片 X 坐标 |": "|DPosX | number | undefined | X coordinate of image|",
  "| `dPosY` | `number` | `undefined` | 图片 Y 坐标 |": "|DPosY | number | undefined | Y coordinate of image|",
  "| `dWidth` | `number` | `undefined` | 图片宽度 |": "|DWidth | number | undefined | image width|",
  "| `dHeight` | `number` | `undefined` | 图片高度 |": "|DHeight | number | undefined | Image height|",
  "| `dAng` | `number` | `undefined` | 图片角度,单位是度 |": "|DAng | number | undefined | Image angle, in degrees|",
  "绘制直线": "draw a straight line",
  "| `dX1` | `number` | 起点 X 坐标 |": "|DX1 | number | Starting point X coordinate|",
  "| `dY1` | `number` | 起点 Y 坐标 |": "|DY1 | number | Starting point Y coordinate|",
  "| `dX2` | `number` | 终点 X 坐标 |": "|DX2 | number | endpoint X coordinate|",
  "| `dY2` | `number` | 终点 Y 坐标 |": "|DY2 | number | End point Y coordinate|",
  "绘制多行文本": "Draw multiple lines of text",
  "mxcad.drawMText(0, -100, \"控件:\\\\P多行文字测试\", 50, 400, 0, 1);\r": "Mxcad.drawMText (0, -100, \"Control:\\ \\P Multi line Text Test \", 50, 400, 0, 1);",
  "| `dPosX` | `number` | 文本位置 X 坐标 |": "|DPosX | number | Text Position X Coordinate|",
  "| `dPosY` | `number` | 文本位置 Y 坐标 |": "|DPosY | number | Y coordinate of text position|",
  "| `dHeight` | `number` | 文本高度 |": "|DHeight | number | Text height|",
  "| `dWidth` | `number` | 文本宽度 |": "|DWidth | number | Text width|",
  "| `dRotation` | `number` | 旋转角度，单位为弧度 |": "|DRotation | number | Rotation angle, in radians|",
  "| `iAttachment` | [`AttachmentPoint`](../enums/2d.McDb.AttachmentPoint.md) | 对齐方式 |": "|IAttachment | [AttachmentPoint] (../enums/2d. McDb. AttachmentPoint. md) | Alignment Method|",
  "多行文本对象id": "Multi line text object ID",
  "将路径转换为填充图案": "Convert the path to a fill pattern",
  "   // 实心圆\r": "//Solid circle",
  "       getCenter.setMessage('请确定圆心位置\\n');\r": "GetCenter.setMessage ('Please confirm the center position ');",
  "       getRadius.setBasePt(center);// 设置距离基点为圆心\r": "getRadius.setBasePt(center);//  Set the distance base point as the center of the circle",
  "       getRadius.setMessage('请输入圆半径');\r": "GetRadius.setMessage ('Please enter circle radius');",
  "       mxcad.pathCircle(center.x, center.y, radius);//设置圆路径\r": "mxcad.pathCircle(center.x, center.y, radius);// Set circular path",
  "       mxcad.drawPathToHatch();// 绘制实心圆\r": "mxcad.drawPathToHatch();//  Draw a solid circle",
  "| `dPatternScale` | `number` | `1.0` | 图案缩放比例 |": "|DPatternScale | number | 1.0 | Pattern scaling ratio|",
  "转换结果": "Conversion results",
  "将路径转换为折线": "Convert the path to a polyline",
  "将路径转换为样条曲线": "Convert the path to a spline curve",
  "绘制点": "Draw points",
  "| `dX` | `number` | X 坐标 |": "|DX | number | X coordinate|",
  "| `dY` | `number` | Y 坐标 |": "|DY | number | Y coordinate|",
  "| `dX1` | `number` | 第一个点 X 坐标 |": "|DX1 | number | X coordinate of the first point|",
  "| `dY1` | `number` | 第一个点 Y 坐标 |": "|DY1 | number | Y coordinate of the first point|",
  "| `dX2` | `number` | 第二个点 X 坐标 |": "|DX2 | number | X coordinate of the second point|",
  "| `dY2` | `number` | 第二个点 Y 坐标 |": "|DY2 | number | Y coordinate of the second point|",
  "| `dX3` | `number` | 第三个点 X 坐标 |": "|DX3 | number | X coordinate of the third point|",
  "| `dY3` | `number` | 第三个点 Y 坐标 |": "|DY3 | number | Y coordinate of the third point|",
  "| `dX4` | `number` | 第四个点 X 坐标 |": "|DX4 | number | X coordinate of the fourth point|",
  "| `dY4` | `number` | 第四个点 Y 坐标 |": "|DY4 | number | Y coordinate of the fourth point|",
  "实体对象id": "Entity Object ID",
  "绘制单行文本": "Draw a single line of text",
  "mxcad.drawText(0, 1900, \"绘图控件文字测试\", 100, 0, 0, 1);\r": "Mxcad.drawText (0, 1900, \"Drawing Control Text Test\", 100, 0, 0, 1);",
  "| `pszText` | `string` | 文本内容 |": "|PszText | string | Text Content|",
  "| `horizontalMode` | [`TextHorzMode`](../enums/2d.McDb.TextHorzMode.md) | 横向对齐方式 |": "|HorizontalMode | [TextHorzMode] (../enums/2d. McDb. TextHorzMode. md) | Horizontal alignment method|",
  "| `verticalMode` | [`TextVertMode`](../enums/2d.McDb.TextVertMode.md) | 纵向对齐方式 |": "|Vertical Mode | [TextVertMode] (../enums/2d. McDb. TextVertMode. md) | Vertical Alignment Method|",
  "得到所有布局名": "Get all layout names",
  "返回当前背景对象": "Return the current background object",
  "返回当前数据库中设置的绘制颜色，它会自动依据背景色，把黑白色转换。": "Returns the drawing color set in the current database, which will automatically convert black and white based on the background color.",
  "获取当前文件名": "Get the current file name",
  "当前文件名": "Current file name",
  "获取数据库对象": "Retrieve database objects",
  "数据库对象": "Database objects",
  "返加MxCpp对象，它会在MxDraw模块中调用。": "Add back the MxCpp object, which will be called in the MxDraw module.",
  "获取系统变量的浮点数值": "Get floating-point values of system variables",
  "| `varName` | `string` | 变量名称 |": "|VarName | string | Variable Name|",
  "变量的浮点数值": "Floating point values of variables",
  "获取系统变量的整数值": "Get the integer value of a system variable",
  "变量的整数值": "The integer value of a variable",
  "获取系统变量的点数值": "Obtain the point values of system variables",
  "变量的点数值": "Point values of variables",
  "获取系统变量的字符串值": "Retrieve the string value of a system variable",
  "变量的字符串值": "The string value of a variable",
  "返回当前视区的显示范围,cad坐标。": "Return the display range and CAD coordinates of the current viewport.",
  "当前视区显示范围": "Current viewport display range",
  "初始化用户授权服务url.": "Initialize user authorization service url",
  "初始对象": "Initial object",
  "| `imp` | `any` | 对象实现，默认该函数会被系统自动调用。 |": "|Implement the 'imp' | 'any' | object, and by default, this function will be automatically called by the system|",
  "初始化对象模型": "Initialize object model",
  "| `mxObject` | `any` | 初始化[mxdraw](https://mxcadx.gitee.io/mxdraw_docs) 创建的绘图控件 |": "|MxObject | any | Initialize [mxdraw]（ https://mxcadx.gitee.io/mxdraw_docs ）Created drawing controls|",
  "初始化用户注册数据.": "Initialize user registration data",
  "| `sRegist` | `string` | 注册数据 |": "|SRegist | string | Registration data|",
  "插件图块文件": "Plugin block file",
  "| `sFileUrl` | `string` | `undefined` | 网络文件路径 该文件为mxweb格式 |": "|SFileURL | string | undefined | Network file path This file is in mxweb format|",
  "| `sBlkName` | `string` | `undefined` | 插入的图块的块名 |": "|SBlkName | string | undefined | The block name of the inserted block|",
  "| `isWorkThread` | `boolean` | `true` | 是否使用工作线程打开文件，默认为 true |": "|IsWorkThread | boolean | true | Whether to use a worker thread to open the file, default to true|",
  "| `fetchAttributes` | `number` | `0` | 1：EMSCRIPTEN_FETCH_LOAD_TO_MEMORY,把图纸数据加载内存中，0:EMSCRIPTEN_FETCH_LOAD_TO_MEMORY \\| EMSCRIPTEN_FETCH_PERSIST_FILE \\| EMSCRIPTEN_FETCH_APPEND，把图纸数据加到IndexedDB。 |": "| `fetchAttributes` | `number` | `0` | 1： EMSCRIPTEN_FETCH_LOAD_TO_MEMORY, Load the drawing data into memory, 0: EMSCRIPTEN_FETCH_LOAD_TO_MEMORY \\| EMSCRIPTEN_FETCH_PERSIST_FILE \\| EMSCRIPTEN_FETCH_APPEND， Add the drawing data to IndexedDB|",
  "| `isUpdataInsertBlock` | `boolean` | `false` | 是否更新已经存在的块，默认不会更新 |": "|IsUpdataInsertBlock | boolean | false | Update existing blocks, default not updated|",
  "| `isUpdataSameNameBlock` | `boolean` | `false` | 是插入块的过程中，如果发现原数据库已经相同名称的块，是否也一同更新，默认不会更新 |": "|IsUpdataSameNameBlock | boolean | false | During the process of inserting a block, if a block with the same name is found in the original database, will it also be updated? By default, it will not be updated|",
  "当前程序是否是试用版本.": "Is the current program a trial version",
  "加载另一个dwg文件当前背景对象绘制.": "Load another DWG file to draw the current background object",
  "加载一个外部图片到当前上下文，方便后面使用。": "Load an external image into the current context for future use.",
  "| `call` | (`image`: `any`) => `void` | `undefined` | 回调函数 |": "|Call | (image: any)=>void | undefined | callback function|",
  "清空当前图上内容，新建一个文件": "Clear the content of the current image and create a new file",
  "将 lIdIndex 转换成 McDbObject 对象": "Convert lIdInDex to McDbObject object",
  "| `lIdIndex` | `number` | 对象 ID |": "|LIdIDEX | number | Object ID|",
  "与 ID 对应的 McDbObject 对象，如果对象不存在则返回 null": "McDbObject object corresponding to ID, returns null if the object does not exist",
  "关闭事件监听": "Turn off event monitoring",
  "// e:事件函数,这里指代在mxcad.on(\"selectChange\", e)中注册的函数\r": "//E: Event function, referring to the function registered in mxcad. on (\"selectChange\", e)",
  "| `name` | `string` | 监听事件名 |": "|Name | String | Listening Event Name|",
  "| `fun?` | [`Function`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function ) | 监听事件 |": "| `fun?` |  [`Function`](  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function ）Monitoring events|",
  "监听对象选择事件": "Monitor object selection event",
  "监听文件完全打开": "Monitor file fully open",
  "监听项目初始化": "Monitoring project initialization",
  "监听 mxdraw 初始化": "Monitor MXdraw initialization",
  "监听 mxdraw 初始化前的事件": "Monitor events before mxdraw initialization",
  "监听 mxcad 初始化": "Monitor MXCAD initialization",
  "监听数据库修改事件": "Monitor database modification events",
  "系统变量被修改": "System variables have been modified",
  "图形数据库初始化": "Graphic database initialization",
  "图层数据发生了变化": "The layer data has changed",
  "线型数据发生了变化": "The line type data has changed",
  "打开网络文件": "Open network files",
  "| `sFileUrl` | `string` | `undefined` | 网络文件路径 |": "|SFileURL | string | undefined | Network file path|",
  "| `retCall?` | (`iRet`: `number`) => `void` | `undefined` | 回调函数，可选参数，打开文件完成后的回调函数，参数为打开文件的结果,0表示成功，其他值表示失败 |": "| `retCall?` |  (iRet: number)=>void | undefined | callback function, optional parameter, callback function after opening the file, parameter is the result of opening the file, 0 indicates success, other values indicate failure|",
  "是否成功打开文件": "Did you successfully open the file",
  "根据圆对象创建一个路径": "Create a path based on a circular object",
  "从当前位置画一条直线到指定位置": "Draw a straight line from the current position to the specified location",
  "从当前位置画一条直线到指定位置，同时指定起始宽度、终止宽度和凸度": "Draw a straight line from the current position to the specified position, while specifying the starting width, ending width, and convexity",
  "| `dStartWidth` | `number` | 起始宽度 |": "|DStartWidth | number | Starting width|",
  "| `dEndWidth` | `number` | 终止宽度 |": "|DEndWidth | number | End width|",
  "闭合路径": "Closed path",
  "把当前路径做上排除标记，主要用于填充的绘制，把这个路径组成的闭合区域在填充中挖去": "Mark the current path as an exclusion marker, mainly used for filling and drawing. Dig out the closed area composed of this path in the filling process",
  "  //绘制一个实心有圆弧边界填充,中间挖去一块.\r": "//Draw a solid object with a curved boundary filling, and cut a piece in the middle",
  "  // 把上面定义的路径定义填充排除区域.\r": "//Fill in the exclusion area with the path definition defined above",
  "| `isExclude` | `boolean` | 是否排除 |": "|IsExclude | boolean | Exclude or not|",
  "将路径移动到指定位置": "Move the path to the specified location",
  "移动路径到指定位置，同时指定起始宽度、终止宽度和凸度": "Move the path to the specified location, while specifying the starting width, ending width, and convexity",
  "反回退，重做。": "Reverse rollback, redo.",
  "重绘图上所有对象，在调用ZoomAll,ZoomW后，因为是异步执行，可能需要延迟调用Regen才会启作用。": "After redrawing all objects on the graph and calling ZoomAll and ZoomW, it may be necessary to delay the call to Regen before it takes effect due to asynchronous execution.",
  "  //绘制一个带有宽度的圆\r": "//Draw a circle with width",
  "   //设计当前线型为\"CircleLineType\"\r": "//Design the current line type as' CircleLineType '",
  "保存文件": "Save file",
  "| `filename?` | `string` | `undefined` | 另存为的新文件名称 |": "| `filename?` | ` String | undefined | Save as new file name|",
  "| `call?` | (`data`: `any`) => `void` | `undefined` | 回调函数，可选参数，文件保存完成后的回调函数，参数为文件数据 |": "| `call?` |  (` data `: ` any `)=>` void ` | ` undefined ` | callback function, optional parameter, callback function after saving the file, parameter is file data|",
  "| `isDownland` | `boolean` | `true` | 是否下载文件，默认为 true |": "|IsDownland | boolean | true | Whether to download files, default to true|",
  "| `isShowSaveFileDialog` | `boolean` | `true` | 是否显示保存文件对话框，默认为 true |": "|IsShowSaveFileDialogue | boolean | true | Whether to display the save file dialog box, default is true|",
  "是否成功保存文件": "Has the file been successfully saved",
  "将文件保存并转换为网络路径下载": "Save and convert the file to a network path for download",
  "| `sSaveProgramUrl` | `string` | 后端 POST请求接口, 接口具体实现: 先下载MxDraw云图开发包<https://www.mxdraw.com/download.html>并解压 找到MxDrawCloudServer\\Bin\\MxCAD\\MxCADSaveFile\\server.js 可以找到对应的实现接口\"/mxcad/savefiledwg\", \"/mxcad/savefiledwg\":保存dwg文件到服务器 \"/mxcad/savefile\":保存mxweb文件到服务器 如果没有找到则在该项目下寻找这个接口的定义, 必须符合该接口的定义才能作为参数 |": "|SSaveProgramURL | string | Backend POST request interface, specific implementation of the interface: First download the MxDraw cloud map development package< https://www.mxdraw.com/download.html >And unzip and find MxDrawCloudServer \\ Bin \\ MXCAD \\ MXCADSaveFile \\ serverless. js. You can find the corresponding implementation interface \"/mxcad/savefiledwg\", \"/mxcad/savefiledwg\": save the dwg file to the server \"/mxcad/savefile\": save the mxweb file to the server. If not found, search for the definition of this interface under this project. It must comply with the definition of this interface to be used as a parameter|",
  "| `call` | (`iResult`: `number`, `sServerResult`: `string`) => `void` | 保存文件的结果回调 这里接收到的参数请自己根据接口定义中保存图纸的位置, ref.file 不是完整请求路径，只是保存后的图纸名称 |": "|Call | (iResult: number, ServerResult: string)=>void | Save file result callback. The parameters received here should be based on the location where the drawing is saved according to the interface definition, Ref.file is not the complete request path, it is only the name of the saved drawing|",
  "设置对象的一些属性设置": "Set some property settings for objects",
  "启用undo\r": "Enable undo",
  "| `val` | `object` | 属性设置内容. 1. DisplayPrecision 显示精度设置，默认为0,可以取0 ~1000,1000为最高精度了 2. EnableUndo 启用undo功能，默认是没有启动的 |": "|Val | object | Property setting content 1. Display Precision display precision setting, default is 0, can take 0~10001000 as the highest precision. 2 Enable undo to enable undo function, which is not started by default|",
  "设置浏览模式": "Set browsing mode",
  "设置当前文件名": "Set the current file name",
  "设置当前布局名": "Set the current layout name",
  "| `layoutName` | `string` | 布局名称 |": "|LayoutName | string | Layout Name|",
  "设置系统变量的浮点数值": "Set floating-point values for system variables",
  "| `val` | `number` | 变量的浮点数值 |": "|Val | number | Floating point value of variable|",
  "是否成功设置变量值": "Whether the variable value has been successfully set",
  "设置系统变量的整数值": "Set integer values for system variables",
  "| `val` | `number` | 变量的整数值 |": "|Val | number | The integer value of a variable|",
  "设置系统变量的点数值": "Set the point values of system variables",
  "设置系统变量的2维点数值": "Set 2D point values for system variables",
  "设置系统变量的字符串值": "Set string values for system variables",
  "| `val` | `string` | 变量的字符串值 |": "|Val | string | The string value of the variable|",
  "设置视区的背景色.": "Set the background color of the viewport",
  "显示线重": "Display line weight",
  "回退到上一个命令或标记处": "Go back to the previous command or tag",
  "在当前设置一个回退标记.": "Set a rollback flag at the current time",
  "更新显示": "update display",
  "| `isImmediate` | `boolean` | `false` | 是否立即更新 |": "|IsImmediate | boolean | false | Update now|",
  "| `delayTime` | `number` | `0` | 延迟更新时间 |": "|DelayTime | number | 0 | Delay update time|",
  "更新图层的显示": "Update the display of layers",
  "显示全部": "Show all",
  "设置显示视区的角度，单位是PI.": "Set the angle of the display viewport, in PI units",
  "| `viewangle` | `number` | 旋转角度 Math.PI |": "|Viewangle | number | Rotation angle Math PI |",
  "把当前显示范围移到指定的位置,dCenX,dCenY是DWG图纸坐标。": "Move the current display range to the specified position, dCenX, dCenY are DWG drawing coordinates.",
  "缩放当前显示范围，它是相对于当前显示范围进行缩放": "Scale the current display range, which is relative to the current display range",
  "| `scale` | `number` | scale缩放比例 |": "|Scale | number | scale scaling ratio|",
  "把当前显示范围移到指定的显示范围": "Move the current display range to the specified display range",
  "| `minPt` | [`McGePoint3d`](2d.McGePoint3d.md) | 坐标1 McGePoint3d |": "|MinPt | [McGePoint3d] (2d. McGePoint3d. md) | Coordinate 1 McGePoint3d|",
  "| `maxPt` | [`McGePoint3d`](2d.McGePoint3d.md) | 坐标2 McGePoint3d |": "|MaxPt | [McGePoint3d] (2d. McGePoint3d. md) | Coordinates 2 McGePoint3d|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McObjectId": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McObjectid",
  "McObjectId类表示一个模型对象的唯一标识符。": "The McObjectid class represents a unique identifier for a model object.",
  "创建一个McObjectId实例。": "Create an instance of McObjectid.",
  "| `id` | `number` | `0` | 对象的唯一标识符。 |": "|The unique identifier of the 'id' | 'number' | '0' | object|",
  "| `type` | [`McObjectIdType`](../enums/2d.McObjectIdType.md) | `McObjectIdType.kInvalid` | 对象的类型。 |": "|Type | [McObject IdType] (../enums/2d. McObject IdType. md) | McObject IdType. kInvalid | The type of the object|",
  "对象类型": "object type",
  "克隆对象": "Clone object",
  "// 假设objectId为一个对象id\r": "//Assuming that objectId is an object id",
  "返回克隆后的数据库对象": "Return cloned database objects",
  "// 假设objectId为一个模型对象id\r": "//Assuming objectId is a model object id",
  "| `isErase` | `boolean` | `true` | 是否删除 |": "|IsErase | boolean | true | Do you want to delete it|",
  "返回 MxCAD 块表记录对象。": "Return the MxCAD block table record object.",
  "// 假设objectId为一个块对象id\r": "//Assuming objectId is a block object id",
  "返回MxCAD McDbCurve 对象。": "Return the MxCAD McDbCurve object.",
  "// 假设objectId为一个曲线对象id\r": "//Assuming objectId is a curve object id",
  "获取自定义实体": "Get custom entity",
  "// 假设objectId为一个自定义实体id\r": "//Assuming objectId is a custom entity id",
  "获取数据库中的字典信息": "Retrieve dictionary information from the database",
  "返回 MxCAD 标注样表记录对象。": "Return the MxCAD annotation sample table record object.",
  "返回MxCAD McDbDimension 对象。": "Return the MxCAD McDbDimension object.",
  "// 假设objectId为一个标注id\r": "//Assuming objectId is a annotation id",
  "返回MxCAD McDbEntity 对象。": "Return the MxCAD McDbEntity object.",
  "// 假设objectId为一个图形对象id\r": "//Assuming objectId is a graphic object id",
  "返回 MxCAD 图层表记录对象。": "Return the recorded objects in the MxCAD layer table.",
  "// 假设objectId为一个图层对象id\r": "//Assuming objectId is a layer object id",
  "返回 MxCAD 线型表记录对象。": "Return the MxCAD line type table record object.",
  "// 假设objectId为一个线型对象id\r": "//Assuming objectId is a linear object id",
  "返回MxCAD McDbObject对象。": "Return the MxCAD McDbObject object.",
  "返回一个数据库对象": "Return a database object",
  "获取栅格图像信息": "Obtain raster image information",
  "返回 MxCAD 文字样式表记录对象。": "Return the MxCAD text style sheet record object.",
  "// 假设objectId为一个文字样式id\r": "//Assuming objectId is a text style id",
  "获取扩展记录信息": "Retrieve extended record information",
  "返回MxDraw对象。": "Return the MxDraw object.",
  "返回id指向的对象名称.": "Return the name of the object pointed to by the ID",
  "id是指向的对像，是否是删除状态.": "Is the ID pointing to the object in a deleted state",
  "判断一个对象的类型": "Determine the type of an object",
  "| `className` | `string` | 类型名 |": "|ClassName | string | Type Name|",
  "id是否为NULL.": "Is the ID NULL",
  "id是否有效.": "Is the ID valid",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McRxObject": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McRxObject",
  "表示一个 Rx 对象的基类。": "Represents the base class of an Rx object.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADPluginBase": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADPluginBase",
  "mxcad 基础配置": "MXCAD basic configuration",
  "地图默认配置": "Map default configuration",
  "插件程序使用的接口": "The interface used by the plugin program",
  "打开的文件": "Open Files",
  "注册数据": "Registration data",
  "示例代码": "Example code",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADPluginMapDefaultData": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADPluginMapDefault Data",
  "初始化、管理或查询地图相关联的默认数据": "Initialize, manage, or query default data associated with maps",
  "//设置地图加载的缺省数据\r": "//Set default data for map loading",
  "// CAD图纸与地图的对齐点.\r": "//Alignment points between CAD drawings and maps",
  "// 地图与CAD图纸的对齐位置 。\r": "//The alignment position between the map and CAD drawings.",
  "// CAD图上一个绘图单是地图上多少米.\r": "//How many meters on the map is a drawing sheet on a CAD drawing",
  "// 需要打开的cad图纸.\r": "//CAD drawings that need to be opened",
  "CAD图纸与地图的对齐点": "Alignment points between CAD drawings and maps",
  "地图与CAD图纸的对齐位置": "Alignment position between map and CAD drawing",
  "mapbox地图token": "Mapbox Map Token",
  "需要打开的cad图纸": "CAD drawings that need to be opened",
  "矢量瓦片关键词": "Vector tile keywords",
  "栅格瓦片图层列表": "List of Grid Tile Layers",
  "背景颜色": "background color ",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADPluginSampleCode": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADPluginSampleCode",
  "MxCADUI 模块提供的示例代码": "Example code provided by MxCADUI module",
  "示例代码内容": "Example code content",
  "示例代码在名称": "Example code in name",
  "示例代码在那个类型中": "Which type is the sample code in",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADResbuf": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADResbuf",
  "MxCADResbuf 类用于操作 AutoCAD 中的 resbuf 数据。": "The MxCADResbuf class is used to manipulate respuf data in AutoCAD.",
  "  // 筛选图纸中的所有文字对象\r": "//Filter all text objects in the drawing",
  "  // 定义过滤\r": "//Define filtering",
  "  // 设置选择，筛选文字对象\r": "//Set selection, filter text objects",
  "// 定义过滤器,过滤实体类型：直线，圆弧，圆，多义线\r": "//Define filters to filter entity types: line, arc, circle, polyline",
  "添加扩展数据名，用选择集过滤使用": "Add extension data name and filter using selection set",
  "添加 double 类型值到 resbuf 中。": "Add a double value to the respuff.",
  "// 定义过滤器\r": "//Define filters",
  "| `val` | `number` | `undefined` | double 类型值。 |": "|Val | number | undefined | double type value|",
  "| `lDataType` | `number` | `-10` | 数据类型。 |": "|LDataType | number | -10 | data type|",
  "添加的数据项索引。": "Index of added data items.",
  "添加 long 类型值到 resbuf 中。": "Add a long type value to the respuff.",
  "| `val` | `number` | `undefined` | long 类型值。 |": "|Val | number | undefined | long type value|",
  "添加实体类型，用于选择集过滤使用": "Add entity types for selection set filtering",
  "实体的类型表\r": "Type table of entities",
  "| 类型 | 描述 |\r": "|Type | Description|",
  "| POINT  | 文字  |\r": "|POINT | Text|",
  "| TEXT  | 文字  |\r": "|Text | Text|",
  "| MTEXT  | 多行文字  |\r": "|MTEXT | Multi line Text|",
  "| CIRCLE  | 圆  |\r": "|CIRCLE | Circle|",
  "| ARC  | 圆弧  |\r": "|ARC | Arc|",
  "| LINE  | 线  |\r": "|LINE | Line|",
  "| LWPOLYLINE | 多段线 |\r": "|LWPOLYLINE | Polyline|",
  "| INSERT | 图块 |\r": "|Insert | Block|",
  "| ELLIPSE | 椭圆 |\r": "|ELLIPSE | Ellipse|",
  "| SPLINE | 样条线 |\r": "|SPLINE | Spline Line|",
  "| LinkLine | 超链接 |": "|LinkLine | Hyperlinks|",
  "| `str` | `string` | 多个类型用,连接 例如: \"TEXT,MTEXT\" |": "|Using multiple types, such as: \"TEXT,MTEXT\" |",
  "添加 McRxObject 对象到 resbuf 中": "Add McRxObject object to respuff",
  "| `pObj` | [`McRxObject`](2d.McRxObject.md) | McRxObject示例对象 |": "|PObj | McRxObject (2d. McRxObject. md) | McRxObject Example Object|",
  "添加 ObjectId 到 resbuf 中。": "Add the Object ID to the respuff.",
  "添加点坐标到 resbuf 中。": "Add point coordinates to the respuff.",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | `undefined` | 点坐标。 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | undefined | Point coordinates|",
  "添加字符串到 resbuf 中。": "Add a string to the respuff.",
  "filter.AddString (\"测试字符串\");\r": "Filter. AddString (\"test string\");",
  "| `str` | `string` | `undefined` | 字符串。 |": "|Str | string | undefined | string|",
  "获取 resbuf 数据项中的 double 类型值。": "Retrieve the double type value from the respuff data item.",
  "| `lItem` | `number` | 数据项索引。 |": "|List | Number | Data item index|",
  "包含 double 类型值和返回值的对象。": "An object that contains a double type value and a return value.",
  "获取 resbuf 数据项中的 long 类型值。": "Retrieve the long type value from the respuff data item.",
  "包含 long 类型值和返回值的对象。": "An object that contains a long type value and a return value.",
  "获取 resbuf 数据项中的 McRxObject 对象。": "Retrieve the McRxObject object from the respuff data item.",
  "包含 数据库对象和返回值的对象。": "An object that contains database objects and return values.",
  "获取 resbuf 数据项中的 ObjectId。": "Retrieve the Object ID from the respuff data item.",
  "包含 ObjectId 和返回值的对象。": "An object that contains an Object Id and a return value.",
  "获取 resbuf 数据项中的点坐标。": "Retrieve the point coordinates from the respuff data item.",
  "包含点坐标和返回值的对象。": "An object that contains point coordinates and return values.",
  "获取 resbuf 数据项中的字符串。": "Retrieve the string from the respuff data item.",
  "| `lItem` | `number` | `undefined` | 数据项索引。 |": "|List | number | undefined | data item index|",
  "包含字符串和返回值的对象。": "An object that contains a string and a return value.",
  "清空 resbuf 数据。": "Clear the respuff data.",
  "console.log(filter.GetCount())//输出0\r": "Console. log (filter. FHIR ount())//Output 0",
  "获取 resbuf 数据项个数。": "Retrieve the number of respuff data items.",
  "resbuf 数据项个数。": "The number of respuff data items.",
  "获取 resbuf 中所有点数据。": "Retrieve all point data from the respuff.",
  "获取 resbuf 数据项中的数据的DXF值": "Retrieve the DXF value of the data in the respuff data item",
  "| `index` | `number` | 索引值 |": "|Index | number | index value|",
  "DXF值": "DXF value",
  "获取 resbuf 数据项中的数据类型。": "Retrieve the data type from the respuff data item.",
  "数据类型。": "Data type.",
  "调试输入信息": "Debugging input information",
  "filter.PrintData(\"调试信息\")\r": "Filter. PrintData (\"Debug Information\")",
  "移除指定索引的 resbuf 数据项。": "Remove the respuff data item from the specified index.",
  "移除所有 resbuf 数据项。": "Remove all respuff data items.",
  "遍历数据。": "Traverse the data.",
  "  //创建MxCADResbuf实例\r": "//Create MxCADResbuf instance",
  "  cadResbuf.AddPoint(new McGePoint3d(1,2,3));//添加一个point元素\r": "cadResbuf.AddPoint(new McGePoint3d(1,2,3));// Add a point element",
  "  cadResbuf.AddString(“Hello”);//添加一个字符串元素\r": "cadResbuf.AddString(“Hello”);// Add a string element",
  "  cadResbuf.AddDouble (3.14);//添加双精度型数据\r": "cadResbuf.AddDouble (3.14);// Add double precision data",
  "  cadResbuf.AddLong (42);//添加一个整型数据": "cadResbuf.AddLong (42);// Add an integer data",
  "  //迭代CAD Resbuf实例中的元素\r": "//Iterate elements in CAD Resuff instances",
  "   console.log(\"值:\",val);\r": "Console.log (Value: \",val);",
  "   console.log(\"类型:\",type);\r": "Console.log (Type: \",type);",
  "   //输出:\r": "//Output:",
  "   //值:{x: 1, y: 2, z: 3}\r": "//Value: {x: 1, y: 2, z: 3}",
  "   //类型:5009\r": "//Type: 5009",
  "   //值:Hello\r": "//Value: Hello",
  "   //类型:5005\r": "//Type: 5005",
  "   //取值:3.14\r": "//Value: 3.14",
  "   //类型:5001\r": "//Type: 5001",
  "   //取值:42\r": "//Value: 42",
  "   //类型:5010\r": "//Type: 5010",
  "| `call` | (`val`: `any`, `type`: `number`, `dxf`: `number`, `index`: `number`) => `void` | 接受3个参数的回调函数（val:元素的值，type:元素类型，dxf:元素的数据交换格式） |": "|Call | (val: any, type: number, dxf: number, index: number)=>void | A callback function that takes three parameters (val: the value of the element, type: Element type, dxf: Data exchange format for elements|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADSelectionSet": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADSelectionSet",
  "选择集 用于选择实体": "Selection set is used to select entities",
  "比如：通过扩展数据名DataName过滤选择图上所有PL线对象\r": "For example, filtering and selecting all PL line objects on the graph by extending the data name DataName",
  "选择是否高亮": "Choose whether to highlight or not",
  "是否循环选择": "Is there a loop selection",
  "全选": "Select All",
  "   // 得到图上，直线，圆，圆弧，多义线，在0层上的对象.\r": "//Obtain objects on the graph, including straight lines, circles, arcs, polylines, and at level 0",
  "   console.log(\"得到对象数目:\" + ss.count());\r": "Console.log (\"Get number of objects: \" + ss.count());",
  "   // 得到0层上的对象.\r": "//Obtain objects on layer 0",
  "   // 遍历对象\r": "//Traverse objects",
  "| `filter` | ``null`` \\| [`MxCADResbuf`](2d.MxCADResbuf.md) | `null` | 过滤对象 |": "|Filter | null | [MxCADResbuf] (2d. MxCADResbuf. md) | null | Filter object|",
  "获取当前选中的个数": "Get the current selected number",
  "  if (!await ss.userSelect(\"选择目标范围\")) return;\r": "If (! Await ss.userSelect) return;",
  "当前选中实体个数": "The current number of selected entities",
  "根据两个对角点选择一个实体对象的索引": "Select an index for an entity object based on two diagonal points",
  "| `dX1` | `number` | `undefined` | 角点1 X轴值 |": "|DX1 | number | undefined | X-axis value of corner 1|",
  "| `dY1` | `number` | `undefined` | 角点1 Y轴值 |": "|DY1 | number | undefined | Y-axis value of corner 1|",
  "| `dX2` | `number` | `undefined` | 角点2 X轴值 |": "|DX2 | number | undefined | X-axis value of corner 2|",
  "| `dY2` | `number` | `undefined` | 角点2 Y轴值 |": "|DY2 | number | undefined | Y-axis value of corner 2|",
  "实体对象索引": "Entity Object Index",
  "遍历已选中的实体": "Traverse the selected entities",
  "得到当前已选中的所有对象ID": "Obtain the IDs of all currently selected objects",
  "选中id对象数组": "Select ID object array",
  "得到选择形成的两个对角点": "Obtain the two diagonal points formed by the selection",
  "pt1 角点1 | pt2 角点2": "Pt1 corner point 1 | pt2 corner point 2",
  "判断选择集是否为空": "Determine if the selection set is empty",
  "根据对象索引 得到对应对象ID": "Obtain the corresponding object ID based on the object index",
  "| `lItem` | `number` | 对象索引 |": "|List | Number | Object Index|",
  "根据一个坐标点选择一个实体对象的索引": "Select an index for a physical object based on a coordinate point",
  "| `dX` | `number` | `undefined` | 坐标x |": "|DX | number | undefined | coordinate x|",
  "| `dY` | `number` | `undefined` | 坐标y |": "|DY | number | undefined | coordinate y|",
  "用户选择": "User selection",
  "  if (!await ss.userSelect(\"选择要刷的目标块:\", filter)) return;\r": "If (! Await ss. userSelect) \"Select the target block to be flashed: \", filter)) return;",
  "| `strPrompt?` | `string` | `undefined` | 字符串提示 |": "| `strPrompt?` | ` String | undefined | String prompt|",
  "| `filter` | ``null`` \\| [`MxCADResbuf`](2d.MxCADResbuf.md) | `null` | 提示 |": "|Filter | null | [MxCADResbuf] (2d. MxCADResbuf. md) | null | prompt|",
  "| `init?` | (`getPoint`: `MrxDbgUiPrPoint`) => `any` | `undefined` | 用户选择前的初始化操作 |": "| `init?` |  (` getPoint `: ` MrxDBgUiPrPoint `)=>` any ` | ` undefined ` | Initialization operation before user selection|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADTempForbiddenIntelliSelect": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADTempForbidden IntelliSelect",
  "用来临时禁用当对象选择功能": "Used to temporarily disable the object selection function",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUiPrAngle": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUiPrAngle",
  "UI交互 根据两个点计算得到角度": "UI interaction calculates angles based on two points",
  "  getAngle.setMessage(\"提示用户设置角度:\")\r": "GetAngle.setMessage (\"Prompt user to set angle: \")",
  "停止当前动态拖动": "Stop the current dynamic drag",
  "得到动态拖动的基点": "Obtain the base point for dynamic dragging",
  "基点 McGePoint3d": "McGePoint3d",
  "清除上一次的输入点数据。": "Clear the previous input point data.",
  "//以 MxCADUiPrPoint 类示例, 其他MxCADUiPr* 系列的类同理\r": "//Taking the MxCADUiPrPoint class as an example, the same applies to other classes in the MxCADUiPr * series",
  "禁用所有跟踪": "Disable all tracking",
  "//以 MxCADUiPrPoint 类示例\r": "//Example of MxCADUiPrPoint class",
  "| `isDisable` | `boolean` | `true` | 是否禁用 |": "|IsDisable | boolean | true | Is it disabled|",
  "把动态绘制的对象，保留到图上。": "Keep the dynamically drawn objects on the graph.",
  "| `callAddEntity?` | (`ent`: `Object3D`) => `void` | 回调参数ent 类型：THREE.THREE.Object3D |": "| `callAddEntity?` |  (` ent `: ` Objecti3D `)=>` void ` | callback parameter ent type: THREE.THREE.Object3D |",
  "返回光标类型": "Return cursor type",
  "返回交互操作退出的详细原因": "Return detailed reasons for interactive operation exit",
  "//以 MxCADUiPrDist 类示例\r": "//Example of MxCADUiPrList class",
  "     console.log('提示输入', val)\r": "Console.log ('prompt input', val)",
  "当前交互操作返回值类型": "The return value type of the current interactive operation",
  "返回动态输入类型": "Return dynamic input type",
  "动态输入显示类型": "Dynamic input display type",
  "返回需要的Touche输入类型": "Return the required Touche input type",
  "Touche输入类型": "Touche input type",
  "获取操作状态": "Get operation status",
  "   // 空输入\r": "//Empty input",
  "操作状态值": "Operation status value",
  "开始动态拖动": "Start dynamic dragging",
  "返回一个promise对象，包含了用户设置的角度": "Return a promise object containing the angle set by the user",
  "是否禁用动态输入框": "Do you want to disable dynamic input boxes",
  "是否禁用动态跟踪": "Do you want to disable dynamic tracking",
  "是否禁用格网追踪": "Do you want to disable grid tracking",
  "是否禁用正射追踪": "Do you want to disable ortho tracing",
  "是否禁用捕捉": "Do you want to disable capture",
  "是否禁用极轴跟踪": "Do you want to disable polar tracking",
  "测试某一个关键字是否被用户选择": "Test whether a certain keyword is selected by the user",
  "  //以 MxCADUiPrPoint 类示例\r": "//Example of MxCADUiPrPoint class",
  "  getPoint.setKeyWords(\"[选项1(A)/选项2(B)]\");\r": "GetPoint. setKeyWords (\"[Option 1 (A)/Option 2 (B)]\");",
  "   console.log('选项1')\r": "Console.log (Option 1)",
  "   console.log('选项2')\r": "Console.log (Option 2)",
  "| `matchKeyWord` | `string` | 要检测的关键字 |": "|MatchKeyWord | string | Keywords to be detected|",
  "true为真": "True is true",
  "是否输入点遍移一个距离": "Do you want to input a point to move a distance",
  "返回用户选择的关键字": "Return the keywords selected by the user",
  "选择的关键字": "Selected keywords",
  "返回关键字列表": "Return keyword list",
  "//以 MxCADUiPrPoint 类示例，其他MxCADUiPr* 系列的类同理\r": "//Taking the MxCADUiPrPoint class as an example, the same applies to other classes in the MxCADUiPr * series",
  "  console.log(\"关键词列表\", keyList)// 关键词列表 [选项1(A)/选项2(B)]\r": "Console.log (\"Keyword List\", keyList)//Keyword List [Option 1 (A)/Option 2 (B)]",
  "关键词列表": "Keyword List",
  "提示字符串": "Prompt string",
  " //以 MxCADUiPrPoint 类示例, 其他MxCADUiPr* 系列的类同理\r": "//Taking the MxCADUiPrPoint class as an example, the same applies to other classes in the MxCADUiPr * series",
  "  getPoint.setMessage(\"测试信息\");\r": "GetPoint.setMessage (\"Test Message\");",
  "  console.log(getPoint.message());//测试信息\r": "console.log(getPoint.message());// Test information",
  "提示消息": "Reminder message",
  "设置动态拖动的基点": "Set the base point for dynamic dragging",
  "| `basePt` | [`McGePoint3d`](2d.McGePoint3d.md) | 基点 McGePoint3d |": "|BasePt | [McGePoint3d] (2d. McGePoint3d. md) | Base point McGePoint3d|",
  "设置光标类型": "Set cursor type",
  "  getPoint.setMessage(\"指定文字起点:\")\r": "GetPoint.setMessage (\"Specify text starting point: \")",
  "| `type` | `MxCursorType` | 鼠标样式类型 |": "|Type | MxCursorType | Mouse Style Type|",
  "设置是否禁用动态输入框": "Set whether to disable dynamic input boxes",
  "| `isDisable` | `boolean` | 是否禁用 |": "|IsDisable | boolean | Is it disabled|",
  "设置是否禁用动态跟踪": "Set whether to disable dynamic tracking",
  "设置是否禁用格网追踪": "Set whether to disable grid tracking",
  "设置是否禁用正射追踪": "Set whether to disable orthotracing",
  "设置是否禁用捕捉": "Set whether to disable capture",
  "设置是否禁用极轴跟踪": "Set whether to disable polar tracking",
  "设置动态输入类型": "Set dynamic input type",
  "| `type` | `DynamicInputType` | 动态输入显示类型 |": "|Type | DynamicInputType | Dynamic Input Display Type|",
  "设置需要的Touche输入类型,默认值是 MxType.InputToucheType.kGetBegan": "Set the required Touche input type, default value is MxType InputToucheType.kGetBegan",
  "| `toucheType` | `number` | toucheType类型 |": "|ToucheType | Number | ToucheType Type|",
  "设置关键字列表": "Set keyword list",
  "  //以 MxCADUiPrPoint 类示例, 其他MxCADUiPr* 系列的类同理\r": "//Taking the MxCADUiPrPoint class as an example, the same applies to other classes in the MxCADUiPr * series",
  "  getPoint.setKeyWords(\"[选项1(A)/选项2(B)]\")\r": "GetPoint. setKeyWords (\"[Option 1 (A)/Option 2 (B)]\")",
  "| `keyWordList` | `string` | 关键词列表 |": "|KeyWordList | string | Keyword List|",
  "设置上一次的输入点。": "Set the previous input point.",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 点对象 |": "|Pt | McGePoint3d (2d. McGePoint3d. md) | Point Object|",
  "设置提示字符串": "Set prompt string",
  "  getPoint.setMessage(\"\\n提示消息\")\r": "GetPoint.setMessage (\"prompt message\")",
  "| `message` | `string` | 提示消息 |": "|` message ` | ` string ` | prompt message|",
  "设置输入点遍移一个距离": "Set the input point to move a distance",
  "设置使用动态拖动的基点": "Set the base point for using dynamic dragging",
  "| `useIt` | `boolean` | 是否设置 默认为false |": "|UseIt | boolean | Set default to false|",
  "设置交互过程的动态绘制调用对象": "Set the dynamic drawing calling object for the interaction process",
  "| `pDraw` | (`currentPoint`: [`McGePoint3d`](2d.McGePoint3d.md), `pWorldDraw`: `McEdGetPointWorldDrawObject`) => `void` | McEdGetPointWorldDrawObject \\| 动态绘制调用对象 |": "|PDraw | (CurrentPoint: [McGePoint3d] (2d. McGePoint3d. md), pWorldDraw: McEdGetPointWorldDrawObject)=>void | McEdGetPointWorldDrawObject \\ | Dynamic Drawing Calling Object|",
  "设置输入控制设置": "Set input control settings",
  "// 以 MxCADUiPrInt 类示例\r": "//Example of MxCADUiPrInt class",
  "  getInt.setMessage(\"输入整数:\");\r": "GetInt.setMessage (\"Enter integer: \");",
  "返回输入控制设置": "Return to input control settings",
  "得到获取的距离": "Obtain the distance obtained",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUiPrBase": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUiPrBase",
  "MxCADUiPrBase 作为 MxCADUiPr* 系列的基类，提供了一些基础的功能。": "As the base class of the MxCADUiPr * series, MxCADUiPrBase provides some basic functionalities.",
  "| `imp` | `any` | 内部实现对象 |": "|Imp | any | Internal implementation object|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUiPrDist": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUiPrList",
  "UI交互获取距离": "UI interaction obtains distance",
  "根据两个点确定一段距离": "Determine a distance based on two points",
  "  getDist.setMessage(\"提示用户设置距离:\")\r": "GetDist.setMessage (\"Prompt user to set distance: \")",
  "返回一个promise对象，包含了用户设置的距离": "Return a promise object containing the distance set by the user",
  "得以获取的距离": "The distance that can be obtained",
  "返回距离值": "Return distance value",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUiPrEntity": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUiPrEntity",
  "UI交互 根据用户鼠标点击的坐标得到对应的实体": "UI interaction obtains corresponding entities based on the coordinates clicked by the user's mouse",
  "  getEnt.setMessage(\"选择目标对象\");\r": "GetEnt. setMessage (\"Select Target Object\");",
  "  // 通过ID对象得到图形数据对象\r": "//Obtain graphic data objects through ID objects",
  "得以获取对象时的输入点的CAD图纸坐标.": "The CAD drawing coordinates of the input point when obtaining the object",
  "点对象 MdGePoint3d": "Point Object MdGePoint3d",
  "获取MxCADUiPrEntity设置的过滤器详情": "Get filter details for MxCADUiPrEntity settings",
  "过滤器": "filter",
  "返回一个promise对象，包含了用户选择的对象": "Return a promise object containing the object selected by the user",
  "得到获取对象时的输入点": "Obtain the input point for obtaining the object",
  "获取对象时的输入点": "Input point for obtaining objects",
  "设置或获取过滤器": "Set or retrieve filters",
  "| `filter` | [`MxCADResbuf`](2d.MxCADResbuf.md) | 过滤器 |": "|Filter | [MxCADResbuf] (2d. MxCADResbuf. md) | Filter|",
  "得以获取对象时的id": "The ID when obtaining the object",
  "返回对象id": "Return object ID",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUiPrInt": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUiPrInt",
  "UI交互 根据用户输入得到整型数字": "UI interaction obtains integer numbers based on user input",
  "  getInt.setMessage(\"提示用户输入数字:\")\r": "GetInt. setMessage prompts the user to enter a number: \")",
  "返回一个promise对象，包含了用户输入的整数": "Return a promise object containing an integer input by the user",
  "得以获取的整数": "Obtained integers",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUiPrKeyWord": "[mxcad_2d API Document] (../README. md)/[2d] (../modules/2d. md)/MxCADUiPrKeyWord",
  "UI交互 根据用户输入得到关键词": "UI interaction obtains keywords based on user input",
  "  getKey.setMessage(\"提示用户关键词 A、 B、 C:\")\r": "GetKey.setMessage (\"Prompt user for keyword A B、 C:\")",
  "getType.setMessage('选择连接方式');\r": "GetType.setMessage ('Select Connection Method ');",
  "getType.setKeyWords('[手动逐个连线(H)/自动批量连线(A)]')\r": "GetType.setKeyWords ('[Manual Connect One by One (H)/Automatic Batch Connect (A)] ')",
  "返回一个promise对象，包含了用户输入的关键字": "Return a promise object containing the keywords entered by the user",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUiPrPoint": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUiPrPoint",
  "UI交互取点 (鼠标点击画布)": "UI interaction point selection (mouse click on canvas)",
  "  getPoint.setMessage(\"请设置第一个点\")\r": "GetPoint.setMessage (\"Please set the first point\")",
  "得到文档坐标.": "Obtain document coordinates",
  "运行go方法, 将返回用户交互的Promise任务": "Run the go method to return the Promise task for user interaction",
  "当鼠标点击画布后 Promise完成, 得到其点击的坐标点\r": "When the mouse clicks on the canvas, the Promise is completed and the coordinates of the clicked point are obtained",
  "其他交互操作方式将返回null 如按下Esc取消键或在交互中输入对应的关键词": "Other interaction methods will return null, such as pressing the Esc cancel key or entering the corresponding keyword in the interaction",
  "返回一个promise对象，包含了用户点击页面得到的坐标点": "Return a promise object containing the coordinate points obtained by the user clicking on the page",
  "设置动态拖动的基点用于动态绘制。": "Set the base point for dynamic dragging for dynamic drawing.",
  "| `useIt` | `boolean` | 是否设置,setBasePt会自设置true. |": "|UseIt | boolean | Whether to set, setBasePt will automatically set true|",
  "得以获取的点": "Points that can be obtained",
  "点坐标": "Point coordinates",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUiPrString": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUiPrString",
  "UI交互 根据用户输入得到字符串": "UI interaction obtains strings based on user input",
  "  getStr.setMessage(\"提示用户输入字符串:\")\r": "GetStr. setMessage (\"Prompt user to enter string: \")",
  "返回一个promise对象，包含了用户输入的字符串": "Return a promise object containing the string input by the user",
  "获取用户输入的字符串": "Retrieve the string input by the user",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUtilityClass": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUtilityClass",
  "MxCADUtilityClass 类提供了一系列与绘图相关的工具方法。": "The MxCADUtilityClass class provides a series of drawing related tool methods.",
  "//点选\r": "//Click to select",
  "// 选中对象设置高亮\r": "//Select object and set highlight",
  "通过一个点坐标填充对应位置实体的填充": "Fill the corresponding position entity with a point coordinate",
  "  getPoint.setMessage(\"\\n指定填充区域内部一点:\");\r": "GetPoint.setMessage (\"\\ nSpecify a point inside the filled area: \");",
  "返回一个填充对象": "Return a filled object",
  "计算凸度": "Calculate convexity",
  "| `pt1` | [`McGePoint3d`](2d.McGePoint3d.md) | 开始点 |": "|Pt1 | McGePoint3d (2d. McGePoint3d. md) | Start Point|",
  "| `pt2` | [`McGePoint3d`](2d.McGePoint3d.md) | 中点 |": "|Pt2 | [McGePoint3d] (2d. McGePoint3d. md) | Midpoint|",
  "| `pt3` | [`McGePoint3d`](2d.McGePoint3d.md) | 结束点 |": "|Pt3 | McGePoint3d (2d. McGePoint3d. md) | End Point|",
  "计算凸度结果": "Calculate the convexity result",
  "eraseObject 方法用于删除指定的图形对象": "The eraseObject method is used to delete a specified graphic object",
  "| `lId` | `number` | `undefined` | 需要删除的图形对象的 ID |": "|Id | number | undefined | ID of the graphic object that needs to be deleted|",
  "返回一个布尔值，表示是否删除成功": "Return a Boolean value indicating whether the deletion was successful",
  "findEntAtPoint 方法用于在指定坐标点附近查找图形对象": "The findEntAtPoint method is used to search for graphic objects near a specified coordinate point",
  "  getPoint.setMessage('请选择对象\\n');\r": "GetPoint.setMessage ('Please select object ');",
  "| `dX` | `number` | `undefined` | 坐标点的 X 坐标值 |": "|DX | number | undefined | X coordinate value of the coordinate point|",
  "| `dY` | `number` | `undefined` | 坐标点的 Y 坐标值 |": "|DY | number | undefined | Y coordinate value of the coordinate point|",
  "| `dZ` | `number` | `undefined` | 坐标点的 Z 坐标值 |": "|DZ | number | undefined | Z coordinate value of the coordinate point|",
  "| `dSearhRange` | `number` | `-1` | 查找范围，默认为 -1（表示查找整个绘图区域） |": "|DSearhRange | number | -1 | Search range, default is -1 (indicating search for the entire drawing area)|",
  "| `filter` | ``null`` \\| [`MxCADResbuf`](2d.MxCADResbuf.md) | `null` | 过滤器，用于过滤查找到的图形对象，默认为 null（表示不进行过滤） |": "|` filter ` | ` null ` \\ | [` MxCADResbuf `] (2d. MxCADResbuf. md) | ` null ` | Filter, used to filter the found graphic objects, default to null (indicating no filtering)|",
  "返回查找到的图形对象的 ID": "Return the ID of the found graphic object",
  "获取角点(鼠标点击的两个点)": "Get corner points (two points clicked by the mouse)",
  "const ret = await MxCADUtility.getCorner(\"测试\");\r": "Const ret=await MxCADUtility. getCorner (\"test\");",
  "| `pt1?` | [`McGePoint3d`](2d.McGePoint3d.md) | `undefined` | 第一个点 (已知一个角点的情况) |": "| `pt1?` |  [McGePoint3d] (2d. McGePoint3d. md) | ` undefined ` | First point (when a corner point is known)|",
  "| `detailedResult?` | (`retcode`: `DetailedResult`) => `any` | `undefined` | DetailedResult 交互结果讲台的回调 |": "| `detailedResult?` |  (` retcode `: ` DetailedResult `)=>` any ` | ` undefined ` | DetailedResult Interaction Result Platform callback|",
  "| `drawSelectCroner` | `boolean` | `false` | 绘制选择对象的选框(true有背景false无背景) |": "|DrawSelectCroner | boolean | false | Draw a checkbox for the selected object (true with background, false without background)|",
  "| `isDisableAllTrace` | `boolean` | `false` | 是否禁用所有跟踪 |": "|IsDisabAllTrace | boolean | false | Do you want to disable all traces|",
  "返回一个 Promise，其中包含两个角点对象": "Return a Promise containing two corner objects",
  "得到当前选中的对象。": "Get the currently selected object.",
  "得到图上当前选择对象时，选择范围点.": "When obtaining the current selected object on the graph, select the range point",
  "point1 角点1 | point2 角点2 | isvalid 是否有效": "Point1 Corner 1 | Point2 Corner 2 | Is invalid",
  "获取多个实体形成的包围盒": "Obtain a bounding box formed by multiple entities",
  "  let aryId = await MxCADUtility.userSelect(\"选择目标对象\");\r": "Let aryId=await MxCADUtility. userSelect (\"Select Target Object\");",
  "  console.log(\"最小点\"，ext.minPt)\r": "Console.log (\"minimum point\", ext.minPt)",
  "  console.log(\"最大点\", ext.maxPt)\r": "Console.log (\"maximum point\", ext.maxPt)",
  "| `aryId` | [`McObjectId`](2d.McObjectId.md)[] | 实体对象ID数组 |": "|AryId | [McObject Id] (2d. McObject Id. md) [] | Entity Object ID Array|",
  "minPt 最小点 | maxPt 最大点": "MinPt minimum point | maxPt maximum point",
  "计算文字的外包框": "Outsourcing box for calculating text",
  "highlightEntity 方法用于高亮指定的图形对象": "The highlightEntity method is used to highlight a specified graphic object",
  "| `lId` | `number` | `undefined` | 需要高亮的图形对象的 ID |": "|Id | number | undefined | ID of the graphic object that needs to be highlighted|",
  "| `isHighlight` | `boolean` | `true` | 是否需要高亮，默认为 true |": "|IsHighlight | boolean | true | Whether to highlight, default to true|",
  "初始化": "initialization",
  "判断一个点是否在闭合区域内": "Determine whether a point is within a closed area",
  "selectEnt 方法用于在指定位置选择图形对象": "The selectEnt method is used to select graphic objects at a specified location",
  "let retIds = await MxCADUtility.selectEnt(\"\\n选择删除对象\", filter);\r": "Let retIds=await MxCADUtility. setEnt (\"\\ nSelect to delete object\", filter);",
  "| `strPrompt?` | `string` | `undefined` | 选择时的提示信息，默认为 null（表示不显示提示信息） |": "| `strPrompt?` | ` String | undefined | The prompt message when selecting, default to null (indicating no prompt message displayed)|",
  "| `filter` | ``null`` \\| [`MxCADResbuf`](2d.MxCADResbuf.md) | `null` | 过滤器，用于过滤选择到的图形对象，默认为 null（表示不进行过滤） |": "|` filter ` | ` null ` \\ | [` MxCADResbuf `] (2d. MxCADResbuf. md) | ` null ` | Filter, used to filter selected graphic objects, default to null (indicating no filtering)|",
  "| `isSelectMxDraw` | `boolean` | `true` | 是否选择批注图形 默认true |": "|IsSelectMxDraw | boolean | true | Whether to select annotation graphics default to true|",
  "| `init?` | (`getPoint`: `MrxDbgUiPrPoint`) => `any` | `undefined` | 选择图形前初始化函数( 会在实例化[mxdraw取点类](https://mxcadx.gitee.io/mxdraw_api_docs/classes/MrxDbgUiPrPoint.html)时触发，得到取点实例) |": "| `init?` |  (` getPoint `: ` MrxDBgUiPrPoint `)=>` any ` | ` undefined ` | Initialize the function before selecting the shape (will be instantiated with the [mxdraw point class])（ https://mxcadx.gitee.io/mxdraw_api_docs/classes/MrxDbgUiPrPoint.html ）Triggered at the moment, obtain a point instance)|",
  "| `callbackGetPoint?` | (`point`: [`McGePoint3d`](2d.McGePoint3d.md)) => `void` | `undefined` | 回调函数 获取选中图形时的坐标点 |": "| `callbackGetPoint?` |  (` point `: [` McGePoint3d `] (2d. McGePoint3d. md))=>` void ` | ` undefined ` | The callback function retrieves the coordinate points of the selected shape|",
  "返回一个 Promise，其中包含选择到的图形对象的 ID 数组": "Return a Promise containing an array of IDs for the selected graphic object",
  "返回一个 Promise，其中包含得到选择的对象ID": "Return a Promise containing the selected object ID",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADWorldDraw": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADWorldDraw",
  "在 AutoCAD 中实现自定义的绘图逻辑，例如绘制图形、标注、符号等。": "Implement custom drawing logic in AutoCAD, such as drawing graphics, annotations, symbols, etc.",
  "       // 绘制自定义实体\r": "//Draw custom entities",
  "           // 构造一个新多段线对象pl\r": "//Construct a new polyline object pl",
  "           // pl新增点对象\r": "//PL adds new point objects",
  "           // 绘制pl多段线\r": "//Draw PL polylines",
  "| `lPtrWorldDraw` | `number` | 传递指向绘图设备的指针 |": "|LPtrWorldDraw | number | Pass a pointer to the drawing device|",
  "内部对象实现": "Internal object implementation",
  "设置或获取颜色": "Set or retrieve colors",
  "| `val` | [`McCmColor`](2d.McCmColor.md) | 颜色对象（McCmColor） |": "|Val | [McCMColor] (2d. McCmColor. md) | Color Object (McCMColor)|",
  "绘制实例对象": "Draw instance objects",
  "绘制一个用于捕捉使用的对象.": "Draw an object for capturing and using",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCompare": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCompare",
  "MxCompare 两个图纸比较": "Comparison of two MxCompare drawings",
  "把当前控件显示的内容和database的图纸进行比较": "Compare the content displayed by the current control with the drawing of the database",
  "得到图纸比较结果": "Obtain the comparison results of the drawings",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCoordConvertType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCoordConvertType",
  "坐标转换类型": "Coordinate Conversion Type",
  "cad坐标转文档坐标": "Convert CAD coordinates to document coordinates",
  "| `pt` | [`McGePoint3d`](2d.McGePoint3d.md) | 三维点的对象 |": "|Pt | [McGePoint3d] (2d. McGePoint3d. md) | Object of 3D Points|",
  "三维点的对象": "Objects of 3D points",
  "THREE.js点对象": "THREE. js Point Object",
  "| `x` | `number` | X轴坐标 |": "|X | number | X-axis coordinate|",
  "| `y` | `number` | Y轴坐标 |": "|Y | number | Y-axis coordinate|",
  "| `z` | `number` | Z轴坐标 |": "|Z | number | Z-axis coordinate|",
  "文档坐标转cad坐标": "Convert document coordinates to CAD coordinates",
  "| `pt` | `Vector3` | THREE.js点对象 |": "|Pt | Vector3 | THREE. js Point Object|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCppType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCppType",
  "MxCppType 类封装了一系列与 CAD 相关的操作，包括创建点、向量、获取当前对象等": "The MxCppType class encapsulates a series of CAD related operations, including creating points, vectors, obtaining the current object, etc",
  "Mx AI实例": "Mx AI instance",
  "McAppType 实例": "McAppType instance",
  "PropertiesWindow 属必窗口功能调用实例": "Attributes Window is a mandatory window function calling instance",
  "// 属性界面上，对象属性被修改事件。\r": "//On the property interface, the event of object property being modified.",
  "MxCpp 程序集": "MxCpp assembly",
  "//获取与修剪相关的信息\r": "//Obtain information related to pruning",
  "把hex格式的Gb2312编码的转成utf8": "Convert hex formatted Gb2312 encoding to UTF-8",
  "| `strHex` | `string` | Gb2312编码 |": "|StrHex | string | Gb2312 encoding|",
  "把utf8转成hex格式的Gb2312编码": "Convert UTF8 to hex formatted Gb2312 encoding",
  "const stringToEncode = \"你好\";\r": "Const stringToEncode=\"Hello\";",
  "| `str` | `string` | 字符串 |": "|Str | String | String|",
  "获取上一次调用的结果": "Get the result of the last call",
  "调用结果": "Call result",
  "返回当前活动的CAD对象的数据库对象.": "Return the database object of the current active CAD object",
  "返回当前活动的CAD对象": "Return the current active CAD object",
  "创建新的 McGePoint3d 实例": "Create a new McGePoint3d instance",
  "| `pt?` | `any` | 点坐标 |": "| `pt?` | ` Any | Point coordinates|",
  "McGePoint3d 实例": "McGePoint3d instance",
  "创建新的 McGeVector3d 实例": "Create a new McGeVector3d instance",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxModifyColor": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxModifyColor",
  "MxModifyColor 批量修改图上对象颜色": "MxModifyColor batch modification of object colors on the image",
  "修改图上对象颜色。": "Modify the color of objects on the image.",
  "恢复图上对象颜色。": "Restore the color of objects on the image.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxPropertiesWindowCustom": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxProperties Window Custom",
  "MxPropertiesWindowCustom 属性窗口添加自定义属性.": "Add custom properties to the MxProperties Window Custom properties window",
  "属性UI程序调用，获取给定实体的自定义属性": "Attribute UI program call to obtain custom attributes of a given entity",
  "插件程序程序调用，注册返回对象自定属性函数。": "Plugin program call, register and return object custom property functions.",
  "  // 属性界面上，得到对象属性事件。\r": "//On the property interface, obtain the object property event.",
  "插件程序程序调用，注册设置对象自定属性函数。": "Plugin program call, register and set object custom property functions.",
  "  // 属性界面上，对象属性被修改事件。\r": "//On the property interface, the event of object property being modified.",
  "属性UI程序调用，设置给定实体的自定义属性": "Attribute UI program call, set custom attributes for a given entity",
  "插件程序程序调用，设置该对象状态支持自定义属性在属性窗口显示。": "The plugin program is called to set the state of the object to support custom properties displayed in the property window.",
  "  // 设置对象扩展属性值。\r": "//Set object extension property values.",
  "    selEntity1.setMessage(\"选择要需要开启自定义属性的对象\");\r": "SelElement1.setMessage (\"Select the object to enable custom properties\");",
  "    // 设置对象扩展属性值。\r": "//Set object extension property values.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxPropertiesWindowCustomValue": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxProperties Window Custom Value",
  "自定义属性窗口需要的值": "The values required for customizing the property window",
  "自定义属性窗口类型": "Custom attribute window type",
  "是否只读": "Read only or not",
  "自定义属性窗口名": "Custom attribute window name",
  "自定义属性窗口值": "Custom attribute window value",
  "[mxcad_2d API 文档](../README.md) / [mapbox](../modules/mapbox.md) / MxMap": "[mxcad_2d API documentation] (../README. md)/[mapbox] (../modules/mapbox. md)/MxMap",
  "cad地图对象": "CAD map object",
  "mxcad对象": "MXCAD object",
  "将经度坐标转换为墨卡托投影下的坐标": "Convert longitude coordinates to coordinates under Mercator projection",
  "| `len` | `number` | 经度 |": "|Len | number | longitude|",
  "墨卡托投影下的坐标": "Coordinates under Mercator projection",
  "cad到mapbox的墨卡托坐标系": "CAD to Mapbox Mercator Coordinate System",
  "| `pt` | `Vector3` | 三维点对象 |": "|Pt | Vector3 | 3D point object|",
  "cad坐标转换为经度和纬度": "Convert CAD coordinates to longitude and latitude",
  "经纬度": "Latitude and longitude",
  "创建地图": "Create a map",
  "| `map` | `any` | map对象 |": "|Map | any | map object|",
  "获取mapbox的map对象": "Get the map object of mapbox",
  "map对象": "Map object",
  "获取当前mxdraw对象": "Retrieve the current mxdraw object",
  "mxdraw对象": "Mxdraw object",
  "初始化mapbox": "Initialize mapbox",
  "经纬度到cad坐标": "From latitude and longitude to CAD coordinates",
  "| `lng` | `number` | 经度 |": "|Lng | number | longitude|",
  "| `lat` | `number` | 纬度 |": "|Lat | number | latitude|",
  "经纬度到mapbox的墨卡托坐标系坐标": "Coordinate from latitude and longitude to the Mercator coordinate system of Mapbox",
  "| `lat` | `number` | 维度 |": "|Lat | number | dimension|",
  "将地理坐标系下的坐标（经度和纬度）转换为平面坐标系下的坐标（米）": "Convert the coordinates (longitude and latitude) in the geographic coordinate system to the coordinates (meters) in the planar coordinate system",
  "平面坐标": "Plane coordinates",
  "地图墨卡托坐标系到经纬度": "Map Mercator coordinate system to latitude and longitude",
  "mapbox的墨卡托坐标系到cad": "MAPBOX's Mercator Coordinate System to CAD",
  "mapbox的墨卡托坐标系到经纬度": "Mapbox's Mercator coordinate system to latitude and longitude",
  "是否超出中国范围": "Is it beyond the scope of China",
  "设置坐标点的对齐方式": "Set the alignment method of coordinate points",
  "| `originLngLatLike` | `number`[] | 经度和纬度的原点坐标 |": "|OriginLngLatLike | number [] | Origin coordinates of longitude and latitude|",
  "| `originCAD` | `number`[] | 绘图坐标系下的起始点，即AutoCAD 中的原点坐标。 |": "|OriginCAD | number [] | The starting point in the drawing coordinate system, which is the origin coordinate in AutoCAD|",
  "| `meterInCADUnits` | `number` | 地理坐标系和 AutoCAD 绘图使用的坐标单位转换 |": "|MeterInCADUnits | Number | Conversion between Geographic Coordinate Systems and Coordinate Units Used in AutoCAD Drawing|",
  "用于设置加载旧版本地图": "Used to set up loading of old version maps",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / ColorIndexType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/ColorIndexType",
  "颜色索引类型": "Color index type",
  "青色": "Blue color",
  "蓝色": "blue",
  "随块": "Follow the block",
  "随层": "Follow the layer",
  "绿色": "green",
  "洋红色": "Magenta color",
  "红色": "red",
  "白色(反色)": "White (reversed color)",
  "黄色": "yellow",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / ColorMethod": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/ColorMethod",
  "颜色方法类型": "Color method type",
  "颜色索引值": "Color index value",
  "颜色随块": "Color follows block",
  "颜色值": "Color Value",
  "颜色随层": "Color varies with layers",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / DxfCode": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/DxfCode",
  "Dxf组码": "Dxf group code",
  "XData 类型": "XData type",
  "颜色": "colour",
  "双精度浮点数": "Double precision floating-point number",
  "实体": "entity",
  "实体ID": "Entity ID",
  "实体类型": "Entity type",
  "扩展数据名称": "Extended Data Name",
  "实体图层": "Entity Layer",
  "长整型": "Long integer",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / FetchAttributes": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/FetchAttributes",
  "枚举 Fetch 属性类型": "Enumeration of Fetch attribute types",
  "追加数据": "Add data",
  "将获取的数据加载到内存中": "Load the obtained data into memory",
  "持久化文件": "Persistent file",
  "替换数据": "Replace data",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / AttachmentPoint": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/AttachmentPoint",
  "实体附着点枚举。": "Entity attachment point enumeration.",
  "底部中间对齐": "Bottom center alignment",
  "左下对齐": "Bottom left alignment",
  "右下对齐": "Align to the bottom right",
  "中心点对齐": "Center point alignment",
  "中左对齐": "Center left alignment",
  "中右对齐": "Right right alignment",
  "中上对齐": "Mid to upper alignment",
  "左上对齐": "Top left alignment",
  "右上对齐": "Right top alignment",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / ClipBoundaryType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/ClipBoundaryType",
  "指定裁剪操作中使用的边界类型": "Specify the boundary type used in the clipping operation",
  "无效的裁剪边界类型": "Invalid clipping boundary type",
  "多边形裁剪边界类型": "Polygon clipping boundary type",
  "矩形裁剪边界类型": "Rectangular clipping boundary type",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / HatchEdgeType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/HatchEdgeType",
  "表示填充区域中的边的曲线类型": "The curve type representing the edges in the filled area",
  "圆弧类型的边": "Edge of arc type",
  "椭圆弧类型的边": "Edge of elliptical arc type",
  "表示直线类型的边": "Representing edges of straight line type",
  "样条曲线类型的边": "Edge of spline curve type",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / HatchLoopType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/HatchLoopType",
  "表示图案填充中不同类型的闭合区域": "Representing different types of closed areas in pattern filling",
  "默认填充闭合区域类型": "Default Fill Closed Area Type",
  "派生填充闭合区域类型 表示从其他图形元素派生而来的填充区域": "Derived filled closed area type represents filled areas derived from other graphic elements",
  "外部填充闭合区域类型 表示外部轮廓或边界": "External fill closed area type represents external contour or boundary",
  "未闭合填充闭合区域类型 表示填充区域的边界没有闭合": "The unclosed filled closed area type indicates that the boundary of the filled area is not closed",
  "最外层填充闭合区域类型 表示填充区域的最外层边界": "The outermost filled closed area type represents the outermost boundary of the filled area",
  "多段线填充闭合区域类型 表示由多个线段组成的区域": "The polyline filled closed area type represents an area composed of multiple line segments",
  "自相交填充闭合区域类型 表示填充区域的边界自相交": "The self intersecting filling closed area type represents the boundary self intersecting of the filling area",
  "文本岛填充闭合区域类型  表示包含文本的孤立区域": "Text island filling closed area type represents isolated areas containing text",
  "文本框填充闭合区域类型 表示包含文本的区域": "Text box filling closed area type represents the area containing text",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / HatchPatternType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/HatchPatternType",
  "表示填充图案的来源类型": "Indicate the source type of the fill pattern",
  "自定义定义的填充图案": "Custom defined fill patterns",
  "预定义的填充图案": "Pre-defined fill patterns",
  "用户自定义的填充图案": "User defined fill patterns",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / HatchStyle": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/HatchStyle",
  "表示填充图案的风格": "Indicate the style of the fill pattern",
  "忽略风格 表示在某些情况下应忽略填充图案的风格 在特定的绘图需求下，不需要显示填充图案的情况": "Neglecting style representation should be ignored in certain situations where the style of the fill pattern does not need to be displayed for specific drawing requirements",
  "普通风格 标准的、普通的填充图案风格": "Standard, ordinary fill pattern style",
  "外部风格 填充会强调区域的外部边界 用于使外部区域在绘图中更为显眼": "External style filling emphasizes the external boundaries of the area to make it more prominent in the drawing",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / Intersect": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/Intersection",
  "相交的类型\r": "Intersection type",
  "调用 [IntersectWith](../classes/2d.McDbEntity.md#intersectwith) 方法的第二个参数": "Call the second parameter of the [IntersectWith()] method (../classes/2d. McDbEntity. md # intersecttwist)",
  "只延伸作为参数的实体\r": "Only extend entities as parameters",
  "指 [IntersectWith](../classes/2d.McDbEntity.md#intersectwith) 的第一个参数": "Refers to the first parameter of [IntersectWith] (../classes/2d. McDbEntity. md # intersecttwist)",
  "两个实体都延伸": "Both entities extend",
  "只延伸原实体\r": "Extend only the original entity",
  "指调用 [IntersectWith](../classes/2d.McDbEntity.md#intersectwith) 方法的实例本身": "Refers to the instance itself that calls the [IntersectWith] method (../classes/2d. McDbEntity. md # intersecttwist)",
  "两个实体都不延伸": "Neither entity extends",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / LineWeight": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/LineWeight",
  "线宽枚举。": "Line width enumeration.",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / PolylineType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/PolylineType",
  "多线类型": "Multi line type",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / TextHorzMode": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/TextHorzMode",
  "文本水平对齐方式枚举。": "Enumeration of text horizontal alignment methods.",
  "水平对齐": "horizontal alignment",
  "居中对齐": "Center Alignment",
  "自适应": "self-adaption",
  "左对齐": "Left aligned",
  "垂直中间对齐": "Vertical center alignment",
  "右对齐": "Right aligned",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / [McDb](../modules/2d.McDb.md) / TextVertMode": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/[McDb] (../modules/2d. McDb. md)/TextVertMode",
  "文本垂直对齐方式枚举。": "Enumeration of vertical alignment of text.",
  "基线对齐": "Baseline alignment",
  "底部对齐": "Align Bottom ",
  "顶部对齐": "Align Top ",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / McObjectIdType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/McObject IdType",
  "枚举类型 McObjectIdType 表示对象的类型。": "The enumeration type McObjectidType represents the type of an object.",
  "- kMxCAD：  CAD 对象。\r": "- kMxCAD：   CAD objects.",
  "- kMxDraw： 绘图对象。\r": "-KMxDraw: Drawing object.",
  "- kInvalid：无效对象。": "-KInvalid: Invalid object.",
  "无效对象": "Invalid object",
  "CAD 对象": "CAD Objects",
  "绘图对象": "Drawing object",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADCloneType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADCloneType",
  "指定执行克隆操作时的行为类型": "Specify the behavior type when performing cloning operations",
  "数据归档": "Data archiving",
  "正常Clone": "Normal Clone",
  "动态拖动Clone": "Dynamically drag Clone",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADSelectionSetStatus": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADSelectionEtStatus",
  "选择集状态枚举": "Select set state enumeration",
  "当交互构造选择集时，用户按下了 Esc 键取消。": "When constructing the selection set for interaction, the user pressed the Esc key to cancel.",
  "输入了关键值": "Entered key values",
  "当交互构造选择集时，用户直接按下了 Enter 键。": "When constructing the selection set for interaction, the user directly pressed the Enter key.",
  "拒绝执行的无效请求(关键字错误)。": "Invalid request rejected for execution (keyword error).",
  "构造选择集成功": "Successfully constructed selection set",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxPropertiesWindowCustomValueType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxProperties Window Custom Value Type",
  "自定义属性窗口的值的类型": "The type of value in the custom attribute window",
  "整数": "integer",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCadConfig": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCadConfig",
  "createMxCad 的参数配置": "Parameter configuration for creating MxCad",
  "    // 提供要打开的文件 注意../assets/test.mxweb 是相对路径下的文件地址, \r": "//Please note that when providing the file to be opened/ Assets/test.mxweb is the file address in the relative path,",
  "    // 在vite中可用通过这样的方式得到该文件正确的的网络地址\r": "//In Vite, the correct network address of the file can be obtained through this method",
  "    // 提供加载字体的目录路径\r": "//Provide the directory path for loading fonts",
  "    viewBackgroundColor:{red:0,green:0,blue:0}, //黑色背景\r": "viewBackgroundColor:{red:0,green:0,blue:0}, // Black background",
  "    middlePan:false, //禁用鼠标中间键操作\r": "middlePan:false, // Disable middle mouse button operation",
  "    multipleSelect: true, // 开启多选\r": "multipleSelect: true, //  Enable multiple selection",
  "      console.log(\"成功打开文件！\")\r": "Console.log (successfully opened file! \")",
  "授权服务": "Authorized Services",
  "true或1,启用浏览模式，CAD对象不能选中\r": "True or 1, enable browsing mode, CAD objects cannot be selected",
  "/*2,启用浏览模式，CAD对象能选中,但不能夹点编辑": "/*2. Enable browsing mode, CAD objects can be selected, but grip editing is not possible",
  "当通过 MxFun.getCurrentDraw 未发现当前mxDraw实例时，\r": "When the current mxDraw instance is not found through MxFun.getCurrentDraw,",
  "会通过 canvas属性(值可以是css选择器字符串也可以是一个canvas元素)来创建mxdraw实例\r": "It will create an mxdraw instance through the canvas attribute (the value can be a CSS selector string or a canvas element)",
  "如果想要获得这个mxDraw实例 只需要调用mxdraw包中导出的 MxFun.getCurrentDraw方法即可\r": "If you want to obtain this mxDraw instance, you only need to call the MxFun.getCurrentDraw method exported from the mxdraw package",
  "如果gis模式下，canvas变量不会使用，会自动使用mapbox的canvas.": "If the canvas variable is not used in GIS mode, mapbox's canvas will be automatically used",
  "是否启用选择功能，默认是使用": "Whether to enable the selection function, default is to use",
  "是否启用Undo,默认没有启用": "Whether to enable 'undo', it is not enabled by default",
  "需要初始化打开的文件url路径": "Need to initialize the URL path of the opened file",
  "字体文件加载路径，默认是fonts": "Font file loading path, default is fonts",
  "获取加载wasm相关文件(wasm/js/worker.js)路径位置": "Retrieve the path location for loading wasm related files (wasm/js/worker. js)",
  "本质上locateFile配置函数就是返回wasm相关文件在自己的服务器上的位置\r": "Essentially, the locateFile configuration function returns the location of wasm related files on its own server",
  "          在npm包中`node_modules/mxcad/dist/wasm/2d/`下的文件就是支持2d的相关wasm文件": "The files under 'node_rodules/mxcad/dist/wasm/2d/' in the npm package are the relevant wasm files that support 2D",
  "| `fileName` | `string` | wasm相关的文件名称 |": "|FileName | String | Wasm related file names|",
  "| `base?` | `string` \\| [`URL`]( https://developer.mozilla.org/en-US/docs/Web/API/URL ) | 相对于js调用位置的http URL绝对路径 |": "| `base?` | ` string` \\| [`URL`](  https://developer.mozilla.org/en-US/docs/Web/API/URL ）Absolute path of HTTP URL relative to JS call location|",
  "filePath 默认采用base + fileName": "FilePath defaults to using base+fileName",
  "地图模块": "Map module",
  "iMethod = 0,中键不移动视区，左键移动\r": "iMethod = 0, Middle button does not move the viewport, left button moves",
  "iMethod = 1,中键移动视区，左键不移动\r": "iMethod = 1, Middle button moves the viewport, left button does not move",
  "iMethod = 2,中键移动视区，左键移动视区": "iMethod = 2, Middle click to move the viewport, left click to move the viewport",
  "多选模式,默认值是false": "Multiple choice mode, default value is false",
  "服务器上可供加载的字体列表": "List of fonts available for loading on the server",
  "mxdraw和mxcad 核心代码加载完成初始化的回调\r": "Callback for initialization of mxdraw and mxcad core code loading completion",
  "onInit默认值函数如下实例所示（请根据你的业务需求自行修改）": "The default value function of onInit is shown in the following example (please modify it according to your business needs)",
  "      // 启用对象选择功能.\r": "//Enable object selection function",
  "      // 选择类型\r": "//Select type",
  "      // 是否开启多个选择\r": "//Do you want to enable multiple selections",
  "监听打开文件成功回调事件": "Monitor successful file opening callback event",
  "打开文件参数设置，如，打开文件不使用缓存：{fetchAttributes:FetchAttributes.EMSCRIPTEN_FETCH_LOAD_TO_MEMORY}": "Open file parameter settings, such as not using cache when opening files: {fetchAttributes:FetchAttributes.EMSCRIPTEN_FETCH_LOAD_TO_MEMORY}",
  "注册文件": "Registration documents",
  "视区背景颜色": "Visual area background color",
  "WebAssembly 模块二进制文件 默认情况无需配置 *": "WebAssembly module binary files do not require configuration by default*",
  "是否使用webgl1方式启动": "Do you want to start using WebGL1 mode",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADUI": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADUI",
  "MxCADUI 模块提供插件程序使用的接口.": "The MxCADUI module provides interfaces for plugin programs to use",
  "获取mxServerConfig.json文件配置": "Get the mxServerConfig. json file configuration",
  "获取文件下载配置": "Get file download configuration",
  "| `plugin` | [`MxCADPluginBase`](../classes/2d.MxCADPluginBase.md) | 基础配置 |": "|Plugin | [MxCADPluginBase] (../classes/2d. MxCADPluginBase. md) | Basic Configuration|",
  "mxmap对象": "Mxmap object",
  "上传一个文件，并格式转换，然用于后续处理。": "Upload a file, format it, and use it for subsequent processing.",
  "[mxcad_2d API 文档](../README.md) / [2d](2d.md) / McDb": "[mxcad_2d API documentation] (../README. md)/[2d] (2d. md)/McDb",
  "McDb 命名空间包含 AutoCAD 中的一些常用枚举。": "The McDb namespace contains some commonly used enumerations in AutoCAD.",
  "[mxcad_2d API 文档](../README.md) / 2d": "[mxcad_2d API documentation] (../README. md)/2d",
  "包含用于显示cad图纸的2d相关导出, 所有导出的内容都可以通过mxcad包导入直接使用": "Contains 2D related exports for displaying CAD drawings, and all exported content can be imported directly using the MXCAD package",
  "用于指定在创建颜色时可以接受的不同类型的参数形式": "Used to specify different types of parameter forms that can be accepted when creating colors",
  "McCmColor的JSON版本": "The JSON version of McCMColor",
  "THREE.Color 构造函数参数类型组成的元组：字符串、数字、THREE.Color": "The tuple composed of the parameter types of the THREE. Color constructor: string, number THREE.Color",
  "提供了一系列与绘图相关的工具方法": "Provides a series of drawing related tools and methods",
  "提供坐标转换方法": "Provide coordinate transformation methods",
  "检查浏览器类型和版本": "Check browser type and version",
  "   console.log('浏览器符合要求，可以加载 MxCAD assembly。');\r": "Console.log ('The browser meets the requirements and can load MxCAD assembly.');",
  "   // 在这里调用 loadMxCADassembly 函数加载 MxCAD assembly\r": "//Call the loadMxCADassembly function here to load MxCAD assembly",
  "   console.error('浏览器不符合要求：', browserCheckResult.error);\r": "Console.error ('Browser does not meet requirements: ', browserCheckResult.error);",
  "   // 在这里处理浏览器不符合要求的情况，可能给出用户友好的提示或者采取其他措施\r": "//Handling situations where the browser does not meet the requirements here may provide user-friendly prompts or take other measures",
  "ok 布尔值，表示浏览器是否符合要求 | error 如果浏览器不符合要求，则包含错误信息；否则为空字符串 | var 包含了浏览器信息的对象": "OK Boolean value, indicating whether the browser meets the requirements | error. If the browser does not meet the requirements, it contains an error message; Otherwise, it is an empty string | var contains an object with browser information",
  "删除对象": "delete object",
  "创建颜色对象": "Create color objects",
  "| `...ages` | [`CreateColorArgs`](2d.md#createcolorargs) | 颜色参数类型 |": "| `... Ages | [` CreateColorArgs `] (2d. md # creatcolors) | Color parameter type|",
  "颜色对象": "Color Object",
  "创建MxCad实例": "Create MxCad instance",
  "//通过创建实例实现图纸展示以下基于vite打包工具\r": "//Create an instance to display the drawings using the Vite packaging tool",
  "  // 提供要打开的文件 注意../assets/test.mxweb 是相对路径下的文件地址, \r": "//Please note that when providing the file to be opened/ Assets/test.mxweb is the file address in the relative path,",
  "  // 在vite中可用通过这样的方式得到该文件正确的的网络地址\r": "//In Vite, the correct network address of the file can be obtained through this method",
  "  // 提供加载字体的目录路径\r": "//Provide the directory path for loading fonts",
  "| `config?` | [`MxCadConfig`](../interfaces/2d.MxCadConfig.md) | 参数配置 |": "| `config?` |  [` MxCadConfig `] (../interfaces/2d. MxCadConfig. md) | Parameter Configuration|",
  "| `mxcadobj?` | [`McObject`](../classes/2d.McObject.md) | 对象 |": "| `mxcadobj?` |  [McObject] (../classes/2d. McObject. md) | Object|",
  "绘圆": "circle ",
  "绘制椭圆或椭圆弧": "Draw an ellipse or elliptical arc",
  "绘直线": "Draw a straight line",
  "绘多行文本": "Draw multiple lines of text",
  "绘多义线": "Draw polylines",
  "绘制正多边形": "Draw regular polygons",
  "绘制矩形": "draw rectangle",
  "绘制文字": "Draw Text",
  "获取颜色工具": "Get Color Tool",
  "| `...ages` | [`THREEColorArgs`](2d.md#threecolorargs) | 颜色参数 |": "| `... Ages | [THREEColorArgs] (2d. md # threecolorArgs) | Color Parameters|",
  "检索一个CAD(计算机辅助设计)过滤器": "Retrieve a CAD (Computer Aided Design) filter",
  "  // 当filter为null时，检索CAD filter\r": "//Retrieve CAD filter when filter is null",
  "  // 示例2:在提供filter时检索CAD filter\r": "//Example 2: Retrieve CAD filter when providing filter",
  "  // MxCADResbuf有一个方法getImp()返回imp\r": "//MxCADResbuf has a method getImp() that returns imp",
  "| `filter` | ``null`` \\| [`MxCADResbuf`](../classes/2d.MxCADResbuf.md) | `null` | 过滤器 |": "|Filter | null | [MxCADResbuff] (../classes/2d. MxCADResbuff. md) | null | filter|",
  "CAD过滤器imp": "CAD filter imp",
  "异步加载 MxCAD assembly，并在加载完成后执行回调函数": "Asynchronous loading of MxCAD assembly and execution of callback function after loading completion",
  "   // 调用 loadMxCADassembly 函数并处理返回的 Promise\r": "//Call the loadMxCADassembly function and process the returned Promise",
  "       console.log('MxCAD assembly 已加载');\r": "Console.log ('MxCAD assembly loaded ');",
  "       // 在这里可以对 MxCAD assembly 进行操作\r": "//Here, you can operate the MxCAD assembly",
  "     // 可选参数，你可以根据需要提供定位函数和其他参数\r": "//Optional parameters, you can provide positioning functions and other parameters as needed",
  "     console.log('MxCAD assembly 加载完成');\r": "Console.log ('MxCAD assembly loading completed ');",
  "     // 在这里可以继续处理加载完成后的 MxCAD assembly\r": "//Here, you can continue processing the MxCAD assembly after loading is complete",
  "     console.error('加载 MxCAD assembly 时出错：', error);\r": "Console.error ('Error loading MxCAD assembly:', error);",
  "| `call?` | (`MxCpp`: [`MxCppType`](../classes/2d.MxCppType.md)) => `void` | 回调函数，在加载完成后执行 |": "| `call?` |  (MxCpp: [MxCppType] (../classes/2d. MxCppType. md)=>` void ` | callback function, executed after loading is complete|",
  "| `locateFile` | (`fileName`: `string`, `base`: `string` \\| [`URL`]( https://developer.mozilla.org/en-US/docs/Web/API/URL )) => `string` | 函数用于确定 wasm 文件的位置，这里提供了一个默认的值 |": "| `locateFile` | (`fileName`: `string`, `base`: `string` \\| [`URL`](  https://developer.mozilla.org/en-US/docs/Web/API/URL ））The 'string' function is used to determine the location of the wasm file, and a default value is provided here|",
  "| `wasmBinary?` | [`ArrayBuffer`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer ) | wasm 二进制数据 |": "| `wasmBinary?` |  [`ArrayBuffer`](  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer ）Wasm binary data|",
  "| `fontspath?` | `string` | 字体文件的路径 |": "| `fontspath?` | ` String ` | Path to font file|",
  "| `networkFonts?` | `string`[] | 网络字体的数组 |": "| `networkFonts?` | ` String ` [] | Array of network fonts|",
  "返回一个 Promise 对象，其中包含 MxCppType 类型的实例": "Return a Promise object containing an instance of type MxCppType",
  "设置颜色": "Set color",
  "| `mcCmColor` | [`McCmColor`](../classes/2d.McCmColor.md) | 颜色对象 |": "|McCmColor | [McCMColor] (../classes/2d. McCMColor. md) | Color Object|",
  "[mxcad_2d API 文档](../README.md) / mapbox": "[mxcad_2d API documentation] (../README. md)/mapbox",
  "该模块包含用于GIS与CAD结合相关的导出, 所有导出的内容都可以通过mxcad包导入直接使用": "This module contains exports related to the integration of GIS and CAD, and all exported content can be directly used by importing through the MXCAD package",
  "加载GoogleCnLayer地图图层,火星坐标系": "Load Google Cloud Layer map layer, Mars coordinate system",
  "| `types` | `string`[] | 谷歌地图图层的类型 |": "|Types | string [] | Types of Google Maps Layers|",
  "| `urls?` | `string`[] | 谷歌地图图层的URL |": "| `urls?` | ` String ` [] | URL of Google Maps layer|",
  "加载地图图层": "Load map layer",
  "| `layerList` | `any`[] | 图层列表 |": "|LayerList | any [] | Layer List|",
  "| `key?` | `string` | 访问瓦片图层的 API 密钥或者令牌 |": "| `key?` | ` String | API key or token for accessing tile layers|",
  "| `providers?` | `any` | 指定瓦片图层的提供者信息 |": "| `providers?` | ` Any | Specify the provider information for the tile layer|",
  "国测局坐标（GCJ-02 坐标系）转换为GPS 坐标（WGS 84 坐标系）": "Convert the coordinates of the National Bureau of Surveying and Mapping (GCJ-02 coordinate system) to GPS coordinates (WGS 84 coordinate system)",
  "| `lng` | `any` | 经度 |": "|Lng | any | longitude|",
  "| `lat` | `any` | 纬度 |": "|Lat | any | latitude|",
  "转换后的经纬度": "Converted latitude and longitude",
  "GPS 坐标（WGS 84 坐标系）转换为国测局坐标（GCJ-02 坐标系）": "Convert GPS coordinates (WGS 84 coordinate system) to National Bureau of Surveying and Mapping coordinates (GCJ-02 coordinate system)",
  "[mxcad_2d API 文档](../README.md) / tools": "[mxcad_2d API documentation] (../README. md)/tools",
  "该模块包含用于mxcad帮助工具相关的导出, 所有导出的内容都可以通过mxcad包导入直接使用": "This module contains exports related to the MXCAD helper tool, and all exported content can be imported directly using the MXCAD package",
  "检查一个数值是否接近于零的": "Check if a value is close to zero",
  "| `val` | `number` | 数值 |": "|Val | number | numerical value|",
  "接收输入的提示字符串": "Receive input prompt string",
  "| `strId` | `string` | 字符串的ID 起一个符合定义的ID名称 |": "|StrId | string | The ID of a string starts with a defined ID name|",
  "| `str` | `string` | 提示字符串 |": "|Str | string | prompt string|",
  "将 Base64 编码的字符串解码为原始数据": "Decoding Base64 encoded strings into raw data",
  "| `str` | `string` | Base64 编码 |": "|Str | string | Base64 encoding|",
  "原始数据": "raw data",
  "将数据进行 Base64 编码": "Base64 encoding of data",
  "| `str` | `string` | 目标数据 |": "|Str | String | Target Data|",
  "Base64 编码": "Base64 encoding",
  "在浏览器中下载一个文件": "Download a file in the browser",
  "| `blob` | `any` | Blob 对象，它包含了要下载的文件的数据 |": "|Blob | any | Blob object, which contains the data of the file to be downloaded|",
  "| `filename` | `string` | 将要保存的文件的文件名 |": "|Filename | string | The file name of the file to be saved|",
  "从指定的 URL 下载文件到用户的计算机中": "Download files from the specified URL to the user's computer",
  "| `url` | `string` | 下载文件的 URL 地址 |": "|Url | string | URL address for downloading files|",
  "从指定URL中获取文件": "Retrieve files from the specified URL",
  "| `url` | `string` | 文件的 URL 地址 |": "|URL address of file 'url' | 'string'|",
  "目标文件": "Target file",
  "从指定URL中获取文件json字符串": "Retrieve the file JSON string from the specified URL",
  "json字符串": "JSON string",
  "从 IndexedDB（Indexed Database，索引数据库）中获取文件，并将其上传到指定的 URL": "Retrieve files from IndexedDB (Indexed Database) and upload them to the specified URL",
  "| `filekey` | `string` | 从 IndexedDB 中获取的文件的键（key） |": "|Filekey | string | The key of the file obtained from IndexedDB|",
  "| `url` | `string` | 数据将要发送到的目标 URL 地址，用于上传文件 |": "|URL address to which the data will be sent, used for uploading files|",
  "| `retCall` | (`code`: `number`, `message`: `string`) => `void` | 回调函数 |": "|RetCall | (code: number, message: string)=>void | callback function|",
  "| `param?` | `any` | 可选的额外参数，可以用来传递额外的数据或配置信息给上传函数 |": "| `param?` | ` Any ` | Optional additional parameters that can be used to pass additional data or configuration information to the upload function|",
  "将内存中的数据发送到指定的 URL，以实现文件上传功能": "Send data from memory to the specified URL for file upload functionality",
  "| `memoryData` | `any` | 内存中数据的对象或者数据结构 |": "|MemoryData | any | Objects or data structures of data in memory|",
  "| `url` | `string` | 数据将要发送到的目标 URL 地址 |": "|URL address to which the data will be sent | string ||",
  "| `filename` | `string` | 上传的文件的文件名 |": "|Filename | string | The file name of the uploaded file|",
  "文件下载保存（另存为只支持 Chrome86 或 Edge 86 以及 Opera 72）兼容 iE10等较低版本的浏览器": "File download and save (save as only compatible with Chrome 86, Edge 86, and Opera 72) compatible with lower versions of browsers such as iE10",
  "mxcad_2d API 文档": "Mxcad_2d API documentation",
  "# mxcad_2d API 文档": "# Mxcad_2d API documentation",
  "McObject 类, 封装了与 MxCAD 对象相关的功能，并提供了一些方法来操作和管理这些功能 测试": "The McObject class encapsulates the functionality related to MxCAD objects and provides methods to manipulate and manage these functional tests",
  "| `fun?` | [`Function`]( https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function ) | 监听事件 |": "| `fun?` |  [`Function`](  https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function ）Monitoring events|",
  "| `base?` | `string` \\| [`URL`]( https://developer.mozilla.org/docs/Web/API/URL ) | 相对于js调用位置的http URL绝对路径 |": "| `base?` | ` string` \\| [`URL`](  https://developer.mozilla.org/docs/Web/API/URL ）Absolute path of HTTP URL relative to JS call location|",
  "| `locateFile` | (`fileName`: `string`, `base`: `string` \\| [`URL`]( https://developer.mozilla.org/docs/Web/API/URL )) => `string` | 函数用于确定 wasm 文件的位置，这里提供了一个默认的值 |": "| `locateFile` | (`fileName`: `string`, `base`: `string` \\| [`URL`](  https://developer.mozilla.org/docs/Web/API/URL ））The 'string' function is used to determine the location of the wasm file, and a default value is provided here|",
  "| `wasmBinary?` | [`ArrayBuffer`]( https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer ) | wasm 二进制数据 |": "| `wasmBinary?` |  [`ArrayBuffer`](  https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer ）Wasm binary data|",
  "   if (!await ss.userSelect(\"选择要做成组的对象:\")) return;\r": "If (! Await ss. userSelect): \")) return;",
  "返回MxCAD McDbGroup 对象。": "Return the MxCAD McDbGroup object.",
  "// 假设objectId为一个Group id\r": "//Assuming that objectId is a Group ID",
  "| `ini` | `any` | 初始设置值 ini.UseUtf8: c++程序是否使用utf8编码格式。 ini.McGeTol: 几何计算时，点和向量变量判断是否相等的精度范围，默认值是1.0E-7。 ini.EnableObjectModificationEvent: 1启用对象被增加，删除通知道事件，2：启用对象被修改知道事件，默认值为0 |": "|Ini | any | Initial setting value ini UseUtf8: Does the C++program use the Utf8 encoding format. ini.McGeTol:  The accuracy range for determining whether point and vector variables are equal in geometric calculations is 1.0E-7 by default. ini.EnableObjectModificationEvent:  1. Enable object to be added, delete notification event, 2: Enable object to be modified notification event, default value is 0|",
  "new 一个McObjectId对象。": "Create a new McObjectid object.",
  "返回新创建的McObjectId": "Return the newly created McObjectid",
  "获取自定义对象名称": "Get custom object name",
  "mxdraw mxcad程序已经加载，准备创建mxdraw对象时触发": "The mxdraw mxcad program has been loaded and triggered when preparing to create an mxdraw object",
  "mxdraw对象创建了,准备初始相关参数时触发": "MXdraw object created, triggered when preparing initial related parameters",
  "mxdraw对象创建后触发": "Triggered after mxdraw object creation",
  "mxcad对象创建后,已经准备完成时触发": "Triggered when the MXCAD object is ready to be created",
  "对象被修改事件，默认不会通知，配制EnableObjectModificationEvent变量启用": "Object modification event will not be notified by default. Configure the Enable Object Modification Event variable to enable it",
  "//保存pdf文件。\r": "//Save the PDF file.",
  "| `sSaveProgramUrl` | `string` | 后端 POST请求接口, 接口具体实现: 先下载MxDraw云图开发包<https://www.mxdraw.com/download.html>并解压 找到MxDrawCloudServer\\Bin\\MxCAD\\MxCADSaveFile\\server.js 可以找到对应的实现接口\"/mxcad/savefiledwg\", \"/mxcad/savefiledwg\":保存dwg文件到服务器 \"/mxcad/savefile\":保存mxweb文件到服务器 \"/mxcad/savepdf\":保存pdf文件到服务器 如果没有找到则在该项目下寻找这个接口的定义, 必须符合该接口的定义才能作为参数 |": "|SSaveProgramURL | string | Backend POST request interface, specific implementation of the interface: First download the MxDraw cloud map development package< https://www.mxdraw.com/download.html >And unzip and find MxDrawCloudServer \\ Bin \\ MXCAD \\ MXCADSaveFile \\ serverless. js. You can find the corresponding implementation interface \"/mxcad/savefiledwg\", \"/mxcad/savefiledwg\": save the dwg file to the server \"/mxcad/savefile\": save the mxweb file to the server \"/mxcad/savefdf\": save the pdf file to the server. If not found, search for the definition of this interface under this project. It must comply with the definition of this interface to be used as a parameter|",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADMText": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADMText",
  "自定义编辑器实体类": "Custom Editor Entity Class",
  "用于在CAD中渲染和管理富文本编辑器": "Used for rendering and managing rich text editors in CAD",
  "CAD坐标转换为Slate的Point位置": "Convert CAD coordinates to Slate's Point position",
  "Slate的Point位置转换为CAD坐标": "Convert Slate's Point position to CAD coordinates",
  "获取实际渲染起始位置": "Obtain the actual rendering starting position",
  "获取行数": "Get the number of rows",
  "获取指定段落和行的位置信息": "Retrieve the position information of specified paragraphs and lines",
  "获取段落行数": "Get paragraph line count",
  "获取文本节点高度": "Get the height of text nodes",
  "矩阵变换应用": "Application of Matrix Transformation",
  "实体渲染函数": "Entity rendering function",
  "| `this` | [`MxCADMText`](2d.MxCADMText.md) | McDbCustomEditorEntity实例 |": "|This | [MxCADMText] (2d. MxCADMText. md) | McDbCCustoms EditorEntity instance|",
  "| `draw` | [`MxCADWorldDraw`](2d.MxCADWorldDraw.md) | MxCADWorldDraw实例 |": "|Draw | [MxCADWorldDraw] (2d. MxCADWorldDraw. md) | MxCADWorldDraw instance|",
  "创建编辑器": "Create Editor",
  "从McDbMText转换为MxCADMText": "Convert McDbMText to MxCADMText",
  "渲染辅助框": "Rendering auxiliary box",
  "从MxCADMText转换为McDbMText": "Convert MxCADMText to McDBMText",
  "获取编辑状态": "Get editing status",
  "设置编辑状态": "Set editing status",
  "获取最大高度": "Obtain maximum height",
  "获取最大宽度": "Obtain maximum width",
  "绑定编辑器实例": "Bind editor instance",
  "获取编辑器实例": "Get editor instance",
  "获取指定行的水平偏移量": "Get the horizontal offset of the specified row",
  "| `paragraphIndex` | `number` | 段落索引 |": "|ParagraphIndex | number | paragraph index|",
  "| `lineIndex` | `number` | 行索引 |": "|LineIndex | Number | Row Index|",
  "水平偏移量": "Horizontal offset",
  "获取左上角点": "Get the top left corner point",
  "获取总内容高度": "Obtain the total content height",
  "总内容高度": "Overall content height",
  "| `iIndex` | `number` | 夹点索引 |": "|IIndex | Number | Grip Index|",
  "删除编辑器": "Delete Editor",
  "设置角度": "Set Angle",
  "设置数据": "Setting data",
  "设置实体类型": "Set entity type",
  "设置高度": "Set height",
  "设置行距比例": "Set the line spacing ratio",
  "设置起点": "Set starting point",
  "设置终点": "Set endpoint",
  "设置文本对齐方式": "Set text alignment method",
  "设置自动换行": "Set auto wrap",
  "计算文字对象的外包框": "Calculate the bounding box of text objects",
  "得到worddraw type": "Obtain worddraw type",
  "初始化worddraw type": "Initialize worddraw type",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MxCADWorldDrawType": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MxCADWorldDrawType",
  "CADWorldDraw类型": "CADWorldDraw type",
  "打碎对象时调用的WorldDraw": "WorldDraw called when breaking objects",
  "正常WorldDraw": "Normal WorldDraw",
  "多选模式,框选功能,默认值是false": "Multiple selection mode, box selection function, default value is false",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / IMxEditorPoint": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/IMxEditorPoint",
  "[mxcad_2d API 文档](../README.md) / [2d](../modules/2d.md) / MarksStyleText": "[mxcad_2d API documentation] (../README. md)/[2d] (../modules/2d. md)/MarksStyleText",
  "得到该字体是否已经从网上加载": "Obtain whether the font has been loaded from the internet",
  "自定义编辑器实体类\r": "Custom Editor Entity Class"
}