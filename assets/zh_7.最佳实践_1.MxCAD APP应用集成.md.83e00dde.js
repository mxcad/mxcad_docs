import{_ as t,a,b as l,c as e,d as i,e as o,f as p,g as r,h as s,i as m,j as c,k as d,l as n,m as x,n as A,o as u,p as _}from"./chunks/image-14.e8ec3505.js";import{_ as D,o as h,c as f,V as C}from"./chunks/framework.24f0af87.js";const T=JSON.parse('{"title":"MxCAD APP应用集成","description":"","frontmatter":{},"headers":[],"relativePath":"zh/7.最佳实践/1.MxCAD APP应用集成.md","filePath":"zh/7.最佳实践/1.MxCAD APP应用集成.md"}'),g={name:"zh/7.最佳实践/1.MxCAD APP应用集成.md"},M=C('<h1 id="mxcad-app应用集成" tabindex="-1">MxCAD APP应用集成 <a class="header-anchor" href="#mxcad-app应用集成" aria-label="Permalink to &quot;MxCAD APP应用集成&quot;">​</a></h1><p>我们根据 mxcad 开发包开发了一个完整的在线CAD应用，它包括了绘图、编辑、文字样式设置、图层设置、线型设置等功能的实现。</p><p>我们同时提供了一个插件的开发接口，用户可以在该接口的基础上进行二次开发，这样就能够为用户减少从头开发的工作量，可以快速将一个完整的CAD项目集成到用户需要的项目中去。</p><p>我们推荐使用 iframe 技术将我们的 MxCAD App的功能集成到目标项目中。</p><p>点击 <a href="https://demo.mxdraw3d.com:3562/MxCADCode.7z" target="_blank" rel="noreferrer">下载示例demo源码</a></p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>下载实例demo源码并解压后，我们需进入<code>Edit\\2d</code>目录，我们的目标项目均存放在该目录中，其结构如下：</p><ul><li><p>dist：MxCAD APP 在线打包后的前端资源</p></li><li><p>MxCAD: MxCAD APPP 插件的二次开发项目(用户可在该基础上开发功能)</p></li><li><p>MxCADiframe: 通过 iframe 嵌入 MxCAD APP 的示例 demo</p></li></ul></div><h2 id="运行demo说明" tabindex="-1">运行Demo说明 <a class="header-anchor" href="#运行demo说明" aria-label="Permalink to &quot;运行Demo说明&quot;">​</a></h2><ol><li><p>进入 MxCAD 目录, 运行<code>npm install</code>安装依赖。</p></li><li><p>调用<code>npm run dev</code>命令运行 MxCAD APP在线CAD。</p></li></ol><p>运行后的访问<a href="http://localhost:3366/,%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%E5%9B%BE:" target="_blank" rel="noreferrer">http://localhost:3366/,效果如下图:</a></p><p><img src="'+t+'" alt="Alt text"></p><ol start="3"><li><p>调用<code>npm run build</code> 命令打包demo。</p></li><li><p>进入 MxCADiframe 目录，运行<code>npm install</code>安装依赖。</p></li><li><p>在其src/components/Home.vue 中 iframe 的 src 属性设置成刚刚MxCAD访问的网址:<a href="http://localhost:3366/" target="_blank" rel="noreferrer">http://localhost:3366/</a></p></li><li><p>运行调试 MxCADiframe 项目命令: <code>npm run serve</code>。</p></li></ol><p>运行后的效果如下图:</p><p><img src="'+a+'" alt="Alt text"></p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>若直接打开 MxCADiframe 项目出现无法获取图纸或者 iframe 提示 localhost 已拒绝连接，是因为没有启动MxCAD目录下的项目。</p></div><p>用户可参考上述 MxCADiframe 项目的实现方式，在自己的前端项目中用 iframe 嵌入 MxCad 在线编辑项目。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>MxCAD目录说明:</p><ul><li><p>基于vite 可通过npm run dev 直接运行启动服务器浏览dist目录的页面，并且修改MxCAD中.ts、.vue文件会自动编译, 自动刷新页面。</p></li><li><p>基于vite 需要手动运行<code>npm run build</code> 打包dist目录， 打包后dist目录直接放在dist/plugins中。</p></li><li><p><code>import</code> 引入 mxcad、mxdraw、vue 实际使用的是dist打包后的前端资源中的，而不是一个全新的mxcad、mxdraw、vue。</p></li><li><p>MxCAD目录下vite.config.ts 和 dist/plugins/config.json中的plugins 的配置要对应上。</p></li></ul></div><h2 id="后端服务说明" tabindex="-1">后端服务说明 <a class="header-anchor" href="#后端服务说明" aria-label="Permalink to &quot;后端服务说明&quot;">​</a></h2><p>MxCAD APP 在线CAD在运行时，会访问后面的服务接口，比如保存,打开DWG文件接口，我们需要启动 MxDraw云图开发包中的后台服务程序，因此我们需要先 <a href="https://www.mxdraw.com/download.html" target="_blank" rel="noreferrer">下载MxDraw云图开发包</a>，并通过 <a href="https://help.mxdraw.com/?pid=32" target="_blank" rel="noreferrer">MxDraw云图开发包入门文档</a> 了解如何使用该开发包。</p><ol><li><p>下载MxDraw云图开发包并解压到目标目录下。</p></li><li><p>双击运行Mx3dServer.exe应用程序 <img src="'+l+'" alt="Alt text"></p></li><li><p>点击开始web服务 <img src="'+e+'" alt="Alt text"></p></li></ol><div class="tip custom-block"><p class="custom-block-title">提示</p><p>实现上传图纸保存图纸的服务接口需要详细阅读 MxDraw云图开发包相关文档:<a href="https://help.mxdraw.com/?pid=32" target="_blank" rel="noreferrer">https://help.mxdraw.com/?pid=32</a>，然后参考MxDraw云图开发包中对应的接口源码自己根据自己的需求实现，或者直接复用MxDraw云图开发包提供好的接口。</p></div><h2 id="mxcad-app在线cad-配制说明" tabindex="-1">MxCAD APP在线CAD 配制说明 <a class="header-anchor" href="#mxcad-app在线cad-配制说明" aria-label="Permalink to &quot;MxCAD APP在线CAD 配制说明&quot;">​</a></h2><p>MxCAD APP在线CAD的dist 目录是打包后的前端资源，我们可以通过修改该目录下的配置文件配制MxCAD APP。</p><p>dist 目录下几个重要配置文件:</p><ol><li>mxUiConfig.json：UI配置文件。其部分配置属性说明如下（可查看配置文件了解更多配置详情）。</li></ol><ul><li><p>title: 浏览器标题 <img src="'+i+'" alt="Alt text"></p></li><li><p>headerTitle: 加上<code>&lt;version&gt;</code>自动替换成版本号 <img src="'+o+'" alt="Alt text"></p></li><li><p>mTitleButtonBarData: 数组元素中prompt表示提示， cmd表示一个命令，点击按钮会执行一个命令 <img src="'+p+'" alt="Alt text"></p></li><li><p>mRightButtonBarData和mLeftButtonBarData: isShow表示是否显示 <img src="'+r+'" alt="Alt text"></p></li><li><p>mMenuBarData: list菜单列表 list中可以一直嵌套list 形成多级菜单 <img src="'+s+'" alt="Alt text"></p></li><li><p>footerRightBtnSwitchData: [&quot;栅格&quot;, &quot;正交&quot;, &quot;极轴&quot;,&quot;对象捕捉&quot;, &quot;对象追踪&quot;, &quot;DYN&quot;] 显示对应名称的按钮，空数组就不显示 <img src="'+m+'" alt="Alt text"></p></li></ul><ol start="2"><li>mxServerConfig.json：服务配置文件。其部分配置属性说明如下。</li></ol><ul><li><p>uploadFileConfig: 是基于<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="noreferrer">WebUploader</a>实现的文件上传, 部分配置参数它，后端上传接口说明如下:</p></li><li><p>baseUrl: 同一个后台服务器地址，下述相对接口都是基于同一服务器地址 默认的后台服务源码位置在云图开发包中的位置: windows: <img src="'+c+'" alt="Alt text"> linux: <img src="'+d+'" alt="Alt text"></p></li><li><p>saveDwgUrl: 保存DWG文件服务地址，该接口如何实现后续可以提供开发包 默认保存文件Node服务所在位置: <img src="'+n+'" alt="Alt text"></p></li><li><p>wasmConfig：这里的配置就区分一下使用哪个wasm相关文件,具体看dist中的配置文件有详细说明</p></li></ul><ol start="3"><li>plugins/config.json: 插件配置文件。其部分属性说明如下。</li></ol><ul><li>plugins: 就是存放插件名称的文件，它会按照先后顺序依次加载对应当前目录下的js对应名称的脚本， 如有一个plugins/test.js 就填写一个test，你可以在这些js文件中写自己需要扩展的功能，可以全局在window上访问到mxcad，直接手写js并不好，而MxCAD目录就是用来打包这个js的工程，创建dist/plugins中对应的js文件，如图:</li></ul><p><img src="'+x+'" alt="Alt text"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>MxCAD工程里引入的mxcad和vue实际是访问的cadDemo中的mxcad和vue，这个js文件 就是针对cadDemo的二次开发扩展。MxCADiframe 工程是演示如何把cadDemo打包后的资源放在iframe中集成的。</p></div><h2 id="测试demo用例" tabindex="-1">测试Demo用例 <a class="header-anchor" href="#测试demo用例" aria-label="Permalink to &quot;测试Demo用例&quot;">​</a></h2><p>在 MxCAD 目录下 的 src 文件夹中我们提供了部分通过 mxcad库 实现的功能测试用例， 用户可以通过页面上的测试按钮或者命令行运行这些功能。</p><p><img src="'+A+'" alt="Alt text"></p><p>功能对应的代码也可以通过命令在源码中搜索找到对应的实现</p><p><img src="'+u+'" alt="Alt text"></p><p>开发完成插件后，运行<code>npm run build</code> 就可以打包到dist/plugins目录下。</p><p>此外，在 src 目录下有一个 <code>iframe.ts</code> 文件，与 MxCADiframe 项目中的 postMessage 对应。</p><p><img src="'+_+'" alt="Alt text"></p>',39),P=[M];function b(w,v,k,q,B,j){return h(),f("div",null,P)}const N=D(g,[["render",b]]);export{T as __pageData,N as default};
