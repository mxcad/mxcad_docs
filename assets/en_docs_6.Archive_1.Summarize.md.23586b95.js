import{_ as e,o as a,c as t,V as s}from"./chunks/framework.493c336a.js";const o="/mxcad_docs/assets/数据库结构.223a48ac.png",f=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/6.Archive/1.Summarize.md","filePath":"en/docs/6.Archive/1.Summarize.md"}'),c={name:"en/docs/6.Archive/1.Summarize.md"},r=s('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><h2 id="database-structure" tabindex="-1">Database structure <a class="header-anchor" href="#database-structure" aria-label="Permalink to &quot;Database structure&quot;">​</a></h2><p>DWG file is a database structure, all graphic information is stored in the database, after mastering the operation of the database will be able to better grasp the control development. Among them, the graph database contains the information of DWG drawings, such as symbol table (block table, layer table, text style sheet, line table, point style sheet), dictionary, pixel object coordinates and other data. The structure of the database is as follows:</p><p><img src="'+o+'" alt="Database structure"></p><h2 id="basic-object" tabindex="-1">Basic object <a class="header-anchor" href="#basic-object" aria-label="Permalink to &quot;Basic object&quot;">​</a></h2><p>DWG database stores the objects and entities that constitute graphs. Graphs are collections of objects stored in the database. Basic database objects include entities, symbol tables and dictionaries.</p><ul><li><p>Entity is a specified type of database object, the entity can be a line, circle, arc, text, curve and ellipse. The user can see the entity on the screen and can manipulate it.</p></li><li><p>Symbol tables and dictionaries are container objects used to store database objects, both of which can map a symbol name to a database object. The database consists of a fixed number of symbol tables, each containing an instance of a particular class as a symbol table record. Examples of the symbol table as <a href="./2.LayerTable.html">data layer surface table</a> (<a href="./../../api/classes/2d.McDbLayerTable.html">McDbLayerTable()</a>, Layer contains table record) and <a href="./5.BlockTable.html">watch</a> (<a href="./../../api/classes/2d.McDbBlockTable.html">McDbBlockTable()</a>, which contains block table records), all entities belong to block table records.</p></li><li><p>Dictionaries provide a more general container object for storing objects than symbol tables, A dictionary can contain any <a href="./../../api/classes/2d.McDbObject.html#class-mcdbobject">McDbObject</a> or other subclass object.</p></li></ul><h2 id="handle-and-object-id" tabindex="-1">Handle and object ID <a class="header-anchor" href="#handle-and-object-id" aria-label="Permalink to &quot;Handle and object ID&quot;">​</a></h2><p>During a single use of controls, multiple databases can be loaded, each of which has its own handle and object ID. Handle and ID can uniquely represent an object, the handle can be saved to the graph, the next open drawing will not change, ID is just the current memory address, it is faster than the handle to find the object, but it is not saved with the graph, the next open drawing will change.</p><p>With the object ID, the user can obtain a real database object, so that the user can perform related operations on the object.</p>',10),n=[r];function i(l,b,d,h,p,m){return a(),t("div",null,n)}const _=e(c,[["render",i]]);export{f as __pageData,_ as default};
