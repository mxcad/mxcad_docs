import{a5 as h,L as C,M as a,_ as w,o as T,c as D,C as l,a as P,a6 as d,Q as p,a7 as S,a8 as A,a9 as E,aa as O,ab as I,ac as k,ad as R,ae as L,af as N,ag as F,d as B,u as j,v as G,l as V,ah as U,ai as z,aj as W}from"./chunks/framework.493c336a.js";import{t as u}from"./chunks/theme.c36a47ad.js";let b={},_={};function H(e){b=e}function $(e){_=e}function ye(){q(),Y()}function q(){const e=window;e._vue||(e._vue=b)}function Y(){const e=window;e._app||(e._app=_)}const K=`import { camelize } from '@vue/shared';\r
import { capitalize } from '@vue/shared';\r
import { ComponentPropsOptions as ComponentPropsOptions_2 } from '@vue/runtime-core';\r
import { computed as computed_2 } from '@vue/reactivity';\r
import { ComputedGetter } from '@vue/reactivity';\r
import { ComputedRef } from '@vue/reactivity';\r
import { ComputedSetter } from '@vue/reactivity';\r
import { customRef } from '@vue/reactivity';\r
import { CustomRefFactory } from '@vue/reactivity';\r
import { DebuggerEvent } from '@vue/reactivity';\r
import { DebuggerEventExtraInfo } from '@vue/reactivity';\r
import { DebuggerOptions } from '@vue/reactivity';\r
import { DeepReadonly } from '@vue/reactivity';\r
import { effect } from '@vue/reactivity';\r
import { EffectScheduler } from '@vue/reactivity';\r
import { EffectScope } from '@vue/reactivity';\r
import { effectScope } from '@vue/reactivity';\r
import { getCurrentScope } from '@vue/reactivity';\r
import { IfAny } from '@vue/shared';\r
import { isProxy } from '@vue/reactivity';\r
import { isReactive } from '@vue/reactivity';\r
import { isReadonly } from '@vue/reactivity';\r
import { isRef } from '@vue/reactivity';\r
import { isShallow } from '@vue/reactivity';\r
import { LooseRequired } from '@vue/shared';\r
import { markRaw } from '@vue/reactivity';\r
import { normalizeClass } from '@vue/shared';\r
import { normalizeProps } from '@vue/shared';\r
import { normalizeStyle } from '@vue/shared';\r
import { onScopeDispose } from '@vue/reactivity';\r
import { proxyRefs } from '@vue/reactivity';\r
import { reactive } from '@vue/reactivity';\r
import { ReactiveEffect } from '@vue/reactivity';\r
import { ReactiveEffectOptions } from '@vue/reactivity';\r
import { ReactiveEffectRunner } from '@vue/reactivity';\r
import { ReactiveFlags } from '@vue/reactivity';\r
import { readonly } from '@vue/reactivity';\r
import { Ref } from '@vue/reactivity';\r
import { ref } from '@vue/reactivity';\r
import { ShallowReactive } from '@vue/reactivity';\r
import { shallowReactive } from '@vue/reactivity';\r
import { shallowReadonly } from '@vue/reactivity';\r
import { ShallowRef } from '@vue/reactivity';\r
import { shallowRef } from '@vue/reactivity';\r
import { ShallowUnwrapRef } from '@vue/reactivity';\r
import { ShapeFlags } from '@vue/shared';\r
import { SlotFlags } from '@vue/shared';\r
import { stop as stop_2 } from '@vue/reactivity';\r
import { toDisplayString } from '@vue/shared';\r
import { toHandlerKey } from '@vue/shared';\r
import { toRaw } from '@vue/reactivity';\r
import { ToRef } from '@vue/reactivity';\r
import { toRef } from '@vue/reactivity';\r
import { ToRefs } from '@vue/reactivity';\r
import { toRefs } from '@vue/reactivity';\r
import { TrackOpTypes } from '@vue/reactivity';\r
import { TriggerOpTypes } from '@vue/reactivity';\r
import { triggerRef } from '@vue/reactivity';\r
import { UnionToIntersection } from '@vue/shared';\r
import { unref } from '@vue/reactivity';\r
import { UnwrapNestedRefs } from '@vue/reactivity';\r
import { UnwrapRef } from '@vue/reactivity';\r
import { WritableComputedOptions } from '@vue/reactivity';\r
import { WritableComputedRef } from '@vue/reactivity';\r
\r
/**\r
 * Default allowed non-declared props on component in TSX\r
 */\r
export declare interface AllowedComponentProps {\r
    class?: unknown;\r
    style?: unknown;\r
}\r
\r
export declare interface App<HostElement = any> {\r
    version: string;\r
    config: AppConfig;\r
    use(plugin: Plugin_2, ...options: any[]): this;\r
    mixin(mixin: ComponentOptions): this;\r
    component(name: string): Component | undefined;\r
    component(name: string, component: Component): this;\r
    directive(name: string): Directive | undefined;\r
    directive(name: string, directive: Directive): this;\r
    mount(rootContainer: HostElement | string, isHydrate?: boolean, isSVG?: boolean): ComponentPublicInstance;\r
    unmount(): void;\r
    provide<T>(key: InjectionKey<T> | string, value: T): this;\r
    _uid: number;\r
    _component: ConcreteComponent;\r
    _props: Data | null;\r
    _container: HostElement | null;\r
    _context: AppContext;\r
    _instance: ComponentInternalInstance | null;\r
    /**\r
     * v2 compat only\r
     */\r
    filter?(name: string): Function | undefined;\r
    filter?(name: string, filter: Function): this;\r
    /* Excluded from this release type: _createRoot */\r
}\r
\r
export declare interface AppConfig {\r
    readonly isNativeTag?: (tag: string) => boolean;\r
    performance: boolean;\r
    optionMergeStrategies: Record<string, OptionMergeFunction>;\r
    globalProperties: Record<string, any>;\r
    errorHandler?: (err: unknown, instance: ComponentPublicInstance | null, info: string) => void;\r
    warnHandler?: (msg: string, instance: ComponentPublicInstance | null, trace: string) => void;\r
    /**\r
     * Options to pass to \`@vue/compiler-dom\`.\r
     * Only supported in runtime compiler build.\r
     */\r
    compilerOptions: RuntimeCompilerOptions;\r
    /**\r
     * @deprecated use config.compilerOptions.isCustomElement\r
     */\r
    isCustomElement?: (tag: string) => boolean;\r
    /**\r
     * Temporary config for opt-in to unwrap injected refs.\r
     * TODO deprecate in 3.3\r
     */\r
    unwrapInjectedRef?: boolean;\r
}\r
\r
export declare interface AppContext {\r
    app: App;\r
    config: AppConfig;\r
    mixins: ComponentOptions[];\r
    components: Record<string, Component>;\r
    directives: Record<string, Directive>;\r
    provides: Record<string | symbol, any>;\r
    /* Excluded from this release type: optionsCache */\r
    /* Excluded from this release type: propsCache */\r
    /* Excluded from this release type: emitsCache */\r
    /* Excluded from this release type: reload */\r
    /* Excluded from this release type: filters */\r
}\r
\r
declare interface AppRecord {\r
    id: number;\r
    app: App;\r
    version: string;\r
    types: Record<string, string | Symbol>;\r
}\r
\r
export declare type AsyncComponentLoader<T = any> = () => Promise<AsyncComponentResolveResult<T>>;\r
\r
export declare interface AsyncComponentOptions<T = any> {\r
    loader: AsyncComponentLoader<T>;\r
    loadingComponent?: Component;\r
    errorComponent?: Component;\r
    delay?: number;\r
    timeout?: number;\r
    suspensible?: boolean;\r
    onError?: (error: Error, retry: () => void, fail: () => void, attempts: number) => any;\r
}\r
\r
declare type AsyncComponentResolveResult<T = Component> = T | {\r
    default: T;\r
};\r
\r
export declare const BaseTransition: new () => {\r
    $props: BaseTransitionProps<any>;\r
};\r
\r
export declare interface BaseTransitionProps<HostElement = RendererElement> {\r
    mode?: 'in-out' | 'out-in' | 'default';\r
    appear?: boolean;\r
    persisted?: boolean;\r
    onBeforeEnter?: Hook<(el: HostElement) => void>;\r
    onEnter?: Hook<(el: HostElement, done: () => void) => void>;\r
    onAfterEnter?: Hook<(el: HostElement) => void>;\r
    onEnterCancelled?: Hook<(el: HostElement) => void>;\r
    onBeforeLeave?: Hook<(el: HostElement) => void>;\r
    onLeave?: Hook<(el: HostElement, done: () => void) => void>;\r
    onAfterLeave?: Hook<(el: HostElement) => void>;\r
    onLeaveCancelled?: Hook<(el: HostElement) => void>;\r
    onBeforeAppear?: Hook<(el: HostElement) => void>;\r
    onAppear?: Hook<(el: HostElement, done: () => void) => void>;\r
    onAfterAppear?: Hook<(el: HostElement) => void>;\r
    onAppearCancelled?: Hook<(el: HostElement) => void>;\r
}\r
\r
declare const enum BooleanFlags {\r
    shouldCast = 0,\r
    shouldCastTrue = 1\r
}\r
\r
export declare function callWithAsyncErrorHandling(fn: Function | Function[], instance: ComponentInternalInstance | null, type: ErrorTypes, args?: unknown[]): any[];\r
\r
export declare function callWithErrorHandling(fn: Function, instance: ComponentInternalInstance | null, type: ErrorTypes, args?: unknown[]): any;\r
\r
export { camelize }\r
\r
export { capitalize }\r
\r
/**\r
 * Use this for features with the same syntax but with mutually exclusive\r
 * behavior in 2 vs 3. Only warn if compat is enabled.\r
 * e.g. render function\r
 */\r
declare function checkCompatEnabled(key: DeprecationTypes, instance: ComponentInternalInstance | null, ...args: any[]): boolean;\r
\r
declare interface ClassComponent {\r
    new (...args: any[]): ComponentPublicInstance<any, any, any, any, any>;\r
    __vccOpts: ComponentOptions;\r
}\r
\r
export declare function cloneVNode<T, U>(vnode: VNode<T, U>, extraProps?: (Data & VNodeProps) | null, mergeRef?: boolean): VNode<T, U>;\r
\r
declare const Comment_2: unique symbol;\r
export { Comment_2 as Comment }\r
\r
declare type CompatConfig = Partial<Record<DeprecationTypes, boolean | 'suppress-warning'>> & {\r
    MODE?: 2 | 3 | ((comp: Component | null) => 2 | 3);\r
};\r
\r
/* Excluded from this release type: compatUtils */\r
\r
/**\r
 * @deprecated the default \`Vue\` export has been removed in Vue 3. The type for\r
 * the default export is provided only for migration purposes. Please use\r
 * named imports instead - e.g. \`import { createApp } from 'vue'\`.\r
 */\r
export declare type CompatVue = Pick<App, 'version' | 'component' | 'directive'> & {\r
    configureCompat: typeof configureCompat;\r
    new (options?: ComponentOptions): LegacyPublicInstance;\r
    version: string;\r
    config: AppConfig & LegacyConfig;\r
    nextTick: typeof nextTick;\r
    use(plugin: Plugin_2, ...options: any[]): CompatVue;\r
    mixin(mixin: ComponentOptions): CompatVue;\r
    component(name: string): Component | undefined;\r
    component(name: string, component: Component): CompatVue;\r
    directive(name: string): Directive | undefined;\r
    directive(name: string, directive: Directive): CompatVue;\r
    compile(template: string): RenderFunction;\r
    /**\r
     * @deprecated Vue 3 no longer supports extending constructors.\r
     */\r
    extend: (options?: ComponentOptions) => CompatVue;\r
    /**\r
     * @deprecated Vue 3 no longer needs set() for adding new properties.\r
     */\r
    set(target: any, key: string | number | symbol, value: any): void;\r
    /**\r
     * @deprecated Vue 3 no longer needs delete() for property deletions.\r
     */\r
    delete(target: any, key: string | number | symbol): void;\r
    /**\r
     * @deprecated use \`reactive\` instead.\r
     */\r
    observable: typeof reactive;\r
    /**\r
     * @deprecated filters have been removed from Vue 3.\r
     */\r
    filter(name: string, arg?: any): null;\r
    /* Excluded from this release type: cid */\r
    /* Excluded from this release type: options */\r
    /* Excluded from this release type: util */\r
    /* Excluded from this release type: super */\r
};\r
\r
declare interface CompiledSlotDescriptor {\r
    name: string;\r
    fn: Slot;\r
}\r
\r
/**\r
 * A type used in public APIs where a component type is expected.\r
 * The constructor type is an artificial type returned by defineComponent().\r
 */\r
export declare type Component<Props = any, RawBindings = any, D = any, C extends ComputedOptions = ComputedOptions, M extends MethodOptions = MethodOptions> = ConcreteComponent<Props, RawBindings, D, C, M> | ComponentPublicInstanceConstructor<Props>;\r
\r
/**\r
 * Interface for declaring custom options.\r
 *\r
 * @example\r
 * \`\`\`ts\r
 * declare module '@vue/runtime-core' {\r
 *   interface ComponentCustomOptions {\r
 *     beforeRouteUpdate?(\r
 *       to: Route,\r
 *       from: Route,\r
 *       next: () => void\r
 *     ): void\r
 *   }\r
 * }\r
 * \`\`\`\r
 */\r
export declare interface ComponentCustomOptions {\r
}\r
\r
/**\r
 * Custom properties added to component instances in any way and can be accessed through \`this\`\r
 *\r
 * @example\r
 * Here is an example of adding a property \`$router\` to every component instance:\r
 * \`\`\`ts\r
 * import { createApp } from 'vue'\r
 * import { Router, createRouter } from 'vue-router'\r
 *\r
 * declare module '@vue/runtime-core' {\r
 *   interface ComponentCustomProperties {\r
 *     $router: Router\r
 *   }\r
 * }\r
 *\r
 * // effectively adding the router to every component instance\r
 * const app = createApp({})\r
 * const router = createRouter()\r
 * app.config.globalProperties.$router = router\r
 *\r
 * const vm = app.mount('#app')\r
 * // we can access the router from the instance\r
 * vm.$router.push('/')\r
 * \`\`\`\r
 */\r
export declare interface ComponentCustomProperties {\r
}\r
\r
/**\r
 * For extending allowed non-declared props on components in TSX\r
 */\r
export declare interface ComponentCustomProps {\r
}\r
\r
declare type ComponentInjectOptions = string[] | ObjectInjectOptions;\r
\r
/**\r
 * We expose a subset of properties on the internal instance as they are\r
 * useful for advanced external libraries and tools.\r
 */\r
export declare interface ComponentInternalInstance {\r
    uid: number;\r
    type: ConcreteComponent;\r
    parent: ComponentInternalInstance | null;\r
    root: ComponentInternalInstance;\r
    appContext: AppContext;\r
    /**\r
     * Vnode representing this component in its parent's vdom tree\r
     */\r
    vnode: VNode;\r
    /* Excluded from this release type: next */\r
    /**\r
     * Root vnode of this component's own vdom tree\r
     */\r
    subTree: VNode;\r
    /**\r
     * Render effect instance\r
     */\r
    effect: ReactiveEffect;\r
    /**\r
     * Bound effect runner to be passed to schedulers\r
     */\r
    update: SchedulerJob;\r
    /* Excluded from this release type: render */\r
    /* Excluded from this release type: ssrRender */\r
    /* Excluded from this release type: provides */\r
    /* Excluded from this release type: scope */\r
    /* Excluded from this release type: accessCache */\r
    /* Excluded from this release type: renderCache */\r
    /* Excluded from this release type: components */\r
    /* Excluded from this release type: directives */\r
    /* Excluded from this release type: filters */\r
    /* Excluded from this release type: propsOptions */\r
    /* Excluded from this release type: emitsOptions */\r
    /* Excluded from this release type: inheritAttrs */\r
    /**\r
     * is custom element?\r
     */\r
    isCE?: boolean;\r
    /**\r
     * custom element specific HMR method\r
     */\r
    ceReload?: (newStyles?: string[]) => void;\r
    proxy: ComponentPublicInstance | null;\r
    exposed: Record<string, any> | null;\r
    exposeProxy: Record<string, any> | null;\r
    /* Excluded from this release type: withProxy */\r
    /* Excluded from this release type: ctx */\r
    data: Data;\r
    props: Data;\r
    attrs: Data;\r
    slots: InternalSlots;\r
    refs: Data;\r
    emit: EmitFn;\r
    /* Excluded from this release type: emitted */\r
    /* Excluded from this release type: propsDefaults */\r
    /* Excluded from this release type: setupState */\r
    /* Excluded from this release type: devtoolsRawSetupState */\r
    /* Excluded from this release type: setupContext */\r
    /* Excluded from this release type: suspense */\r
    /* Excluded from this release type: suspenseId */\r
    /* Excluded from this release type: asyncDep */\r
    /* Excluded from this release type: asyncResolved */\r
    isMounted: boolean;\r
    isUnmounted: boolean;\r
    isDeactivated: boolean;\r
    /* Excluded from this release type: bc */\r
    /* Excluded from this release type: c */\r
    /* Excluded from this release type: bm */\r
    /* Excluded from this release type: m */\r
    /* Excluded from this release type: bu */\r
    /* Excluded from this release type: u */\r
    /* Excluded from this release type: bum */\r
    /* Excluded from this release type: um */\r
    /* Excluded from this release type: rtc */\r
    /* Excluded from this release type: rtg */\r
    /* Excluded from this release type: a */\r
    /* Excluded from this release type: da */\r
    /* Excluded from this release type: ec */\r
    /* Excluded from this release type: sp */\r
    /**\r
     * For caching bound $forceUpdate on public proxy access\r
     */\r
    f?: () => void;\r
    /**\r
     * For caching bound $nextTick on public proxy access\r
     */\r
    n?: () => Promise<void>;\r
}\r
\r
declare interface ComponentInternalOptions {\r
    /* Excluded from this release type: __scopeId */\r
    /* Excluded from this release type: __cssModules */\r
    /* Excluded from this release type: __hmrId */\r
    /**\r
     * Compat build only, for bailing out of certain compatibility behavior\r
     */\r
    __isBuiltIn?: boolean;\r
    /**\r
     * This one should be exposed so that devtools can make use of it\r
     */\r
    __file?: string;\r
    /**\r
     * name inferred from filename\r
     */\r
    __name?: string;\r
}\r
\r
export declare type ComponentObjectPropsOptions<P = Data> = {\r
    [K in keyof P]: Prop<P[K]> | null;\r
};\r
\r
export declare type ComponentOptions<Props = {}, RawBindings = any, D = any, C extends ComputedOptions = any, M extends MethodOptions = any, Mixin extends ComponentOptionsMixin = any, Extends extends ComponentOptionsMixin = any, E extends EmitsOptions = any> = ComponentOptionsBase<Props, RawBindings, D, C, M, Mixin, Extends, E> & ThisType<CreateComponentPublicInstance<{}, RawBindings, D, C, M, Mixin, Extends, E, Readonly<Props>>>;\r
\r
export declare interface ComponentOptionsBase<Props, RawBindings, D, C extends ComputedOptions, M extends MethodOptions, Mixin extends ComponentOptionsMixin, Extends extends ComponentOptionsMixin, E extends EmitsOptions, EE extends string = string, Defaults = {}> extends LegacyOptions<Props, D, C, M, Mixin, Extends>, ComponentInternalOptions, ComponentCustomOptions {\r
    setup?: (this: void, props: Readonly<LooseRequired<Props & UnionToIntersection<ExtractOptionProp<Mixin>> & UnionToIntersection<ExtractOptionProp<Extends>>>>, ctx: SetupContext<E>) => Promise<RawBindings> | RawBindings | RenderFunction | void;\r
    name?: string;\r
    template?: string | object;\r
    render?: Function;\r
    components?: Record<string, Component>;\r
    directives?: Record<string, Directive>;\r
    inheritAttrs?: boolean;\r
    emits?: (E | EE[]) & ThisType<void>;\r
    expose?: string[];\r
    serverPrefetch?(): Promise<any>;\r
    compilerOptions?: RuntimeCompilerOptions;\r
    /* Excluded from this release type: ssrRender */\r
    /* Excluded from this release type: __ssrInlineRender */\r
    /* Excluded from this release type: __asyncLoader */\r
    /* Excluded from this release type: __asyncResolved */\r
    call?: (this: unknown, ...args: unknown[]) => never;\r
    __isFragment?: never;\r
    __isTeleport?: never;\r
    __isSuspense?: never;\r
    __defaults?: Defaults;\r
}\r
\r
export declare type ComponentOptionsMixin = ComponentOptionsBase<any, any, any, any, any, any, any, any, any, any>;\r
\r
export declare type ComponentOptionsWithArrayProps<PropNames extends string = string, RawBindings = {}, D = {}, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = EmitsOptions, EE extends string = string, Props = Readonly<{\r
    [key in PropNames]?: any;\r
}> & EmitsToProps<E>> = ComponentOptionsBase<Props, RawBindings, D, C, M, Mixin, Extends, E, EE, {}> & {\r
    props: PropNames[];\r
} & ThisType<CreateComponentPublicInstance<Props, RawBindings, D, C, M, Mixin, Extends, E>>;\r
\r
export declare type ComponentOptionsWithObjectProps<PropsOptions = ComponentObjectPropsOptions, RawBindings = {}, D = {}, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = EmitsOptions, EE extends string = string, Props = Readonly<ExtractPropTypes<PropsOptions>> & EmitsToProps<E>, Defaults = ExtractDefaultPropTypes<PropsOptions>> = ComponentOptionsBase<Props, RawBindings, D, C, M, Mixin, Extends, E, EE, Defaults> & {\r
    props: PropsOptions & ThisType<void>;\r
} & ThisType<CreateComponentPublicInstance<Props, RawBindings, D, C, M, Mixin, Extends, E, Props, Defaults, false>>;\r
\r
export declare type ComponentOptionsWithoutProps<Props = {}, RawBindings = {}, D = {}, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = EmitsOptions, EE extends string = string, PE = Props & EmitsToProps<E>> = ComponentOptionsBase<PE, RawBindings, D, C, M, Mixin, Extends, E, EE, {}> & {\r
    props?: undefined;\r
} & ThisType<CreateComponentPublicInstance<PE, RawBindings, D, C, M, Mixin, Extends, E>>;\r
\r
export declare type ComponentPropsOptions<P = Data> = ComponentObjectPropsOptions<P> | string[];\r
\r
export declare type ComponentProvideOptions = ObjectProvideOptions | Function;\r
\r
export declare type ComponentPublicInstance<P = {}, // props type extracted from props option\r
B = {}, // raw bindings returned from setup()\r
D = {}, // return from data()\r
C extends ComputedOptions = {}, M extends MethodOptions = {}, E extends EmitsOptions = {}, PublicProps = P, Defaults = {}, MakeDefaultsOptional extends boolean = false, Options = ComponentOptionsBase<any, any, any, any, any, any, any, any, any>> = {\r
    $: ComponentInternalInstance;\r
    $data: D;\r
    $props: MakeDefaultsOptional extends true ? Partial<Defaults> & Omit<P & PublicProps, keyof Defaults> : P & PublicProps;\r
    $attrs: Data;\r
    $refs: Data;\r
    $slots: Slots;\r
    $root: ComponentPublicInstance | null;\r
    $parent: ComponentPublicInstance | null;\r
    $emit: EmitFn<E>;\r
    $el: any;\r
    $options: Options & MergedComponentOptionsOverride;\r
    $forceUpdate: () => void;\r
    $nextTick: typeof nextTick;\r
    $watch(source: string | Function, cb: Function, options?: WatchOptions): WatchStopHandle;\r
} & P & ShallowUnwrapRef<B> & UnwrapNestedRefs<D> & ExtractComputedReturns<C> & M & ComponentCustomProperties;\r
\r
declare type ComponentPublicInstanceConstructor<T extends ComponentPublicInstance<Props, RawBindings, D, C, M> = ComponentPublicInstance<any>, Props = any, RawBindings = any, D = any, C extends ComputedOptions = ComputedOptions, M extends MethodOptions = MethodOptions> = {\r
    __isFragment?: never;\r
    __isTeleport?: never;\r
    __isSuspense?: never;\r
    new (...args: any[]): T;\r
};\r
\r
declare type ComponentWatchOptionItem = WatchOptionItem | WatchOptionItem[];\r
\r
declare type ComponentWatchOptions = Record<string, ComponentWatchOptionItem>;\r
\r
export declare const computed: typeof computed_2;\r
\r
export { ComputedGetter }\r
\r
export declare type ComputedOptions = Record<string, ComputedGetter<any> | WritableComputedOptions<any>>;\r
\r
export { ComputedRef }\r
\r
export { ComputedSetter }\r
\r
/**\r
 * Concrete component type matches its actual value: it's either an options\r
 * object, or a function. Use this where the code expects to work with actual\r
 * values, e.g. checking if its a function or not. This is mostly for internal\r
 * implementation code.\r
 */\r
export declare type ConcreteComponent<Props = {}, RawBindings = any, D = any, C extends ComputedOptions = ComputedOptions, M extends MethodOptions = MethodOptions> = ComponentOptions<Props, RawBindings, D, C, M> | FunctionalComponent<Props, any>;\r
\r
declare function configureCompat(config: CompatConfig): void;\r
\r
declare interface Constructor<P = any> {\r
    __isFragment?: never;\r
    __isTeleport?: never;\r
    __isSuspense?: never;\r
    new (...args: any[]): {\r
        $props: P;\r
    };\r
}\r
\r
export declare type CreateAppFunction<HostElement> = (rootComponent: Component, rootProps?: Data | null) => App<HostElement>;\r
\r
/**\r
 * Create a block root vnode. Takes the same exact arguments as \`createVNode\`.\r
 * A block root keeps track of dynamic nodes within the block in the\r
 * \`dynamicChildren\` array.\r
 *\r
 * @private\r
 */\r
export declare function createBlock(type: VNodeTypes | ClassComponent, props?: Record<string, any> | null, children?: any, patchFlag?: number, dynamicProps?: string[]): VNode;\r
\r
/**\r
 * @private\r
 */\r
export declare function createCommentVNode(text?: string, asBlock?: boolean): VNode;\r
\r
declare function createCompatVue(createApp: CreateAppFunction<Element>, createSingletonApp: CreateAppFunction<Element>): CompatVue;\r
\r
declare function createComponentInstance(vnode: VNode, parent: ComponentInternalInstance | null, suspense: SuspenseBoundary | null): ComponentInternalInstance;\r
\r
export declare type CreateComponentPublicInstance<P = {}, B = {}, D = {}, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = {}, PublicProps = P, Defaults = {}, MakeDefaultsOptional extends boolean = false, PublicMixin = IntersectionMixin<Mixin> & IntersectionMixin<Extends>, PublicP = UnwrapMixinsType<PublicMixin, 'P'> & EnsureNonVoid<P>, PublicB = UnwrapMixinsType<PublicMixin, 'B'> & EnsureNonVoid<B>, PublicD = UnwrapMixinsType<PublicMixin, 'D'> & EnsureNonVoid<D>, PublicC extends ComputedOptions = UnwrapMixinsType<PublicMixin, 'C'> & EnsureNonVoid<C>, PublicM extends MethodOptions = UnwrapMixinsType<PublicMixin, 'M'> & EnsureNonVoid<M>, PublicDefaults = UnwrapMixinsType<PublicMixin, 'Defaults'> & EnsureNonVoid<Defaults>> = ComponentPublicInstance<PublicP, PublicB, PublicD, PublicC, PublicM, E, PublicProps, PublicDefaults, MakeDefaultsOptional, ComponentOptionsBase<P, B, D, C, M, Mixin, Extends, E, string, Defaults>>;\r
\r
/**\r
 * @private\r
 */\r
export declare function createElementBlock(type: string | typeof Fragment, props?: Record<string, any> | null, children?: any, patchFlag?: number, dynamicProps?: string[], shapeFlag?: number): VNode<RendererNode, RendererElement, {\r
    [key: string]: any;\r
}>;\r
\r
export declare function createElementVNode(type: VNodeTypes | ClassComponent | typeof NULL_DYNAMIC_COMPONENT, props?: (Data & VNodeProps) | null, children?: unknown, patchFlag?: number, dynamicProps?: string[] | null, shapeFlag?: number | ShapeFlags, isBlockNode?: boolean, needFullChildrenNormalization?: boolean): VNode<RendererNode, RendererElement, {\r
    [key: string]: any;\r
}>;\r
\r
export declare function createHydrationRenderer(options: RendererOptions<Node, Element>): HydrationRenderer;\r
\r
/* Excluded from this release type: createPropsRestProxy */\r
\r
declare function createRecord(id: string, initialDef: HMRComponent): boolean;\r
\r
/**\r
 * The createRenderer function accepts two generic arguments:\r
 * HostNode and HostElement, corresponding to Node and Element types in the\r
 * host environment. For example, for runtime-dom, HostNode would be the DOM\r
 * \`Node\` interface and HostElement would be the DOM \`Element\` interface.\r
 *\r
 * Custom renderers can pass in the platform specific types like this:\r
 *\r
 * \`\`\` js\r
 * const { render, createApp } = createRenderer<Node, Element>({\r
 *   patchProp,\r
 *   ...nodeOps\r
 * })\r
 * \`\`\`\r
 */\r
export declare function createRenderer<HostNode = RendererNode, HostElement = RendererElement>(options: RendererOptions<HostNode, HostElement>): Renderer<HostElement>;\r
\r
/**\r
 * Compiler runtime helper for creating dynamic slots object\r
 * @private\r
 */\r
export declare function createSlots(slots: Record<string, Slot>, dynamicSlots: (CompiledSlotDescriptor | CompiledSlotDescriptor[] | undefined)[]): Record<string, Slot>;\r
\r
/**\r
 * @private\r
 */\r
export declare function createStaticVNode(content: string, numberOfNodes: number): VNode;\r
\r
declare function createSuspenseBoundary(vnode: VNode, parent: SuspenseBoundary | null, parentComponent: ComponentInternalInstance | null, container: RendererElement, hiddenContainer: RendererElement, anchor: RendererNode | null, isSVG: boolean, slotScopeIds: string[] | null, optimized: boolean, rendererInternals: RendererInternals, isHydrating?: boolean): SuspenseBoundary;\r
\r
/**\r
 * @private\r
 */\r
export declare function createTextVNode(text?: string, flag?: number): VNode;\r
\r
export declare const createVNode: typeof _createVNode;\r
\r
declare function _createVNode(type: VNodeTypes | ClassComponent | typeof NULL_DYNAMIC_COMPONENT, props?: (Data & VNodeProps) | null, children?: unknown, patchFlag?: number, dynamicProps?: string[] | null, isBlockNode?: boolean): VNode;\r
\r
export { customRef }\r
\r
export { CustomRefFactory }\r
\r
declare type Data = Record<string, unknown>;\r
\r
export { DebuggerEvent }\r
\r
export { DebuggerEventExtraInfo }\r
\r
declare type DebuggerHook = (e: DebuggerEvent) => void;\r
\r
export { DebuggerOptions }\r
\r
export { DeepReadonly }\r
\r
declare type DefaultFactory<T> = (props: Data) => T | null | undefined;\r
\r
declare type DefaultKeys<T> = {\r
    [K in keyof T]: T[K] extends {\r
        default: any;\r
    } | BooleanConstructor | {\r
        type: BooleanConstructor;\r
    } ? T[K] extends {\r
        type: BooleanConstructor;\r
        required: true;\r
    } ? never : K : never;\r
}[keyof T];\r
\r
export declare function defineAsyncComponent<T extends Component = {\r
    new (): ComponentPublicInstance;\r
}>(source: AsyncComponentLoader<T> | AsyncComponentOptions<T>): T;\r
\r
export declare type DefineComponent<PropsOrPropOptions = {}, RawBindings = {}, D = {}, C extends ComputedOptions = ComputedOptions, M extends MethodOptions = MethodOptions, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = {}, EE extends string = string, PP = PublicProps, Props = Readonly<PropsOrPropOptions extends ComponentPropsOptions ? ExtractPropTypes<PropsOrPropOptions> : PropsOrPropOptions> & ({} extends E ? {} : EmitsToProps<E>), Defaults = ExtractDefaultPropTypes<PropsOrPropOptions>> = ComponentPublicInstanceConstructor<CreateComponentPublicInstance<Props, RawBindings, D, C, M, Mixin, Extends, E, PP & Props, Defaults, true> & Props> & ComponentOptionsBase<Props, RawBindings, D, C, M, Mixin, Extends, E, EE, Defaults> & PP;\r
\r
export declare function defineComponent<Props, RawBindings = object>(setup: (props: Readonly<Props>, ctx: SetupContext) => RawBindings | RenderFunction): DefineComponent<Props, RawBindings>;\r
\r
export declare function defineComponent<Props = {}, RawBindings = {}, D = {}, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = EmitsOptions, EE extends string = string>(options: ComponentOptionsWithoutProps<Props, RawBindings, D, C, M, Mixin, Extends, E, EE>): DefineComponent<Props, RawBindings, D, C, M, Mixin, Extends, E, EE>;\r
\r
export declare function defineComponent<PropNames extends string, RawBindings, D, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = Record<string, any>, EE extends string = string>(options: ComponentOptionsWithArrayProps<PropNames, RawBindings, D, C, M, Mixin, Extends, E, EE>): DefineComponent<Readonly<{\r
    [key in PropNames]?: any;\r
}>, RawBindings, D, C, M, Mixin, Extends, E, EE>;\r
\r
export declare function defineComponent<PropsOptions extends Readonly<ComponentPropsOptions>, RawBindings, D, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = Record<string, any>, EE extends string = string>(options: ComponentOptionsWithObjectProps<PropsOptions, RawBindings, D, C, M, Mixin, Extends, E, EE>): DefineComponent<PropsOptions, RawBindings, D, C, M, Mixin, Extends, E, EE>;\r
\r
/**\r
 * Vue \`<script setup>\` compiler macro for declaring a component's emitted\r
 * events. The expected argument is the same as the component \`emits\` option.\r
 *\r
 * Example runtime declaration:\r
 * \`\`\`js\r
 * const emit = defineEmits(['change', 'update'])\r
 * \`\`\`\r
 *\r
 * Example type-based declaration:\r
 * \`\`\`ts\r
 * const emit = defineEmits<{\r
 *   (event: 'change'): void\r
 *   (event: 'update', id: number): void\r
 * }>()\r
 *\r
 * emit('change')\r
 * emit('update', 1)\r
 * \`\`\`\r
 *\r
 * This is only usable inside \`<script setup>\`, is compiled away in the\r
 * output and should **not** be actually called at runtime.\r
 */\r
export declare function defineEmits<EE extends string = string>(emitOptions: EE[]): EmitFn<EE[]>;\r
\r
export declare function defineEmits<E extends EmitsOptions = EmitsOptions>(emitOptions: E): EmitFn<E>;\r
\r
export declare function defineEmits<TypeEmit>(): TypeEmit;\r
\r
/**\r
 * Vue \`<script setup>\` compiler macro for declaring a component's exposed\r
 * instance properties when it is accessed by a parent component via template\r
 * refs.\r
 *\r
 * \`<script setup>\` components are closed by default - i.e. variables inside\r
 * the \`<script setup>\` scope is not exposed to parent unless explicitly exposed\r
 * via \`defineExpose\`.\r
 *\r
 * This is only usable inside \`<script setup>\`, is compiled away in the\r
 * output and should **not** be actually called at runtime.\r
 */\r
export declare function defineExpose<Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed): void;\r
\r
/**\r
 * Vue \`<script setup>\` compiler macro for declaring component props. The\r
 * expected argument is the same as the component \`props\` option.\r
 *\r
 * Example runtime declaration:\r
 * \`\`\`js\r
 * // using Array syntax\r
 * const props = defineProps(['foo', 'bar'])\r
 * // using Object syntax\r
 * const props = defineProps({\r
 *   foo: String,\r
 *   bar: {\r
 *     type: Number,\r
 *     required: true\r
 *   }\r
 * })\r
 * \`\`\`\r
 *\r
 * Equivalent type-based declaration:\r
 * \`\`\`ts\r
 * // will be compiled into equivalent runtime declarations\r
 * const props = defineProps<{\r
 *   foo?: string\r
 *   bar: number\r
 * }>()\r
 * \`\`\`\r
 *\r
 * This is only usable inside \`<script setup>\`, is compiled away in the\r
 * output and should **not** be actually called at runtime.\r
 */\r
export declare function defineProps<PropNames extends string = string>(props: PropNames[]): Readonly<{\r
    [key in PropNames]?: any;\r
}>;\r
\r
export declare function defineProps<PP extends ComponentObjectPropsOptions = ComponentObjectPropsOptions>(props: PP): Readonly<ExtractPropTypes<PP>>;\r
\r
export declare function defineProps<TypeProps>(): Readonly<TypeProps>;\r
\r
export declare const enum DeprecationTypes {\r
    GLOBAL_MOUNT = "GLOBAL_MOUNT",\r
    GLOBAL_MOUNT_CONTAINER = "GLOBAL_MOUNT_CONTAINER",\r
    GLOBAL_EXTEND = "GLOBAL_EXTEND",\r
    GLOBAL_PROTOTYPE = "GLOBAL_PROTOTYPE",\r
    GLOBAL_SET = "GLOBAL_SET",\r
    GLOBAL_DELETE = "GLOBAL_DELETE",\r
    GLOBAL_OBSERVABLE = "GLOBAL_OBSERVABLE",\r
    GLOBAL_PRIVATE_UTIL = "GLOBAL_PRIVATE_UTIL",\r
    CONFIG_SILENT = "CONFIG_SILENT",\r
    CONFIG_DEVTOOLS = "CONFIG_DEVTOOLS",\r
    CONFIG_KEY_CODES = "CONFIG_KEY_CODES",\r
    CONFIG_PRODUCTION_TIP = "CONFIG_PRODUCTION_TIP",\r
    CONFIG_IGNORED_ELEMENTS = "CONFIG_IGNORED_ELEMENTS",\r
    CONFIG_WHITESPACE = "CONFIG_WHITESPACE",\r
    CONFIG_OPTION_MERGE_STRATS = "CONFIG_OPTION_MERGE_STRATS",\r
    INSTANCE_SET = "INSTANCE_SET",\r
    INSTANCE_DELETE = "INSTANCE_DELETE",\r
    INSTANCE_DESTROY = "INSTANCE_DESTROY",\r
    INSTANCE_EVENT_EMITTER = "INSTANCE_EVENT_EMITTER",\r
    INSTANCE_EVENT_HOOKS = "INSTANCE_EVENT_HOOKS",\r
    INSTANCE_CHILDREN = "INSTANCE_CHILDREN",\r
    INSTANCE_LISTENERS = "INSTANCE_LISTENERS",\r
    INSTANCE_SCOPED_SLOTS = "INSTANCE_SCOPED_SLOTS",\r
    INSTANCE_ATTRS_CLASS_STYLE = "INSTANCE_ATTRS_CLASS_STYLE",\r
    OPTIONS_DATA_FN = "OPTIONS_DATA_FN",\r
    OPTIONS_DATA_MERGE = "OPTIONS_DATA_MERGE",\r
    OPTIONS_BEFORE_DESTROY = "OPTIONS_BEFORE_DESTROY",\r
    OPTIONS_DESTROYED = "OPTIONS_DESTROYED",\r
    WATCH_ARRAY = "WATCH_ARRAY",\r
    PROPS_DEFAULT_THIS = "PROPS_DEFAULT_THIS",\r
    V_ON_KEYCODE_MODIFIER = "V_ON_KEYCODE_MODIFIER",\r
    CUSTOM_DIR = "CUSTOM_DIR",\r
    ATTR_FALSE_VALUE = "ATTR_FALSE_VALUE",\r
    ATTR_ENUMERATED_COERCION = "ATTR_ENUMERATED_COERCION",\r
    TRANSITION_CLASSES = "TRANSITION_CLASSES",\r
    TRANSITION_GROUP_ROOT = "TRANSITION_GROUP_ROOT",\r
    COMPONENT_ASYNC = "COMPONENT_ASYNC",\r
    COMPONENT_FUNCTIONAL = "COMPONENT_FUNCTIONAL",\r
    COMPONENT_V_MODEL = "COMPONENT_V_MODEL",\r
    RENDER_FUNCTION = "RENDER_FUNCTION",\r
    FILTERS = "FILTERS",\r
    PRIVATE_APIS = "PRIVATE_APIS"\r
}\r
\r
export declare let devtools: DevtoolsHook;\r
\r
declare interface DevtoolsHook {\r
    enabled?: boolean;\r
    emit: (event: string, ...payload: any[]) => void;\r
    on: (event: string, handler: Function) => void;\r
    once: (event: string, handler: Function) => void;\r
    off: (event: string, handler: Function) => void;\r
    appRecords: AppRecord[];\r
}\r
\r
export declare type Directive<T = any, V = any> = ObjectDirective<T, V> | FunctionDirective<T, V>;\r
\r
export declare type DirectiveArguments = Array<[Directive] | [Directive, any] | [Directive, any, string] | [Directive, any, string, DirectiveModifiers]>;\r
\r
export declare interface DirectiveBinding<V = any> {\r
    instance: ComponentPublicInstance | null;\r
    value: V;\r
    oldValue: V | null;\r
    arg?: string;\r
    modifiers: DirectiveModifiers;\r
    dir: ObjectDirective<any, V>;\r
}\r
\r
export declare type DirectiveHook<T = any, Prev = VNode<any, T> | null, V = any> = (el: T, binding: DirectiveBinding<V>, vnode: VNode<any, T>, prevVNode: Prev) => void;\r
\r
declare type DirectiveModifiers = Record<string, boolean>;\r
\r
export { effect }\r
\r
export { EffectScheduler }\r
\r
export { EffectScope }\r
\r
export { effectScope }\r
\r
declare type EmitFn<Options = ObjectEmitsOptions, Event extends keyof Options = keyof Options> = Options extends Array<infer V> ? (event: V, ...args: any[]) => void : {} extends Options ? (event: string, ...args: any[]) => void : UnionToIntersection<{\r
    [key in Event]: Options[key] extends (...args: infer Args) => any ? (event: key, ...args: Args) => void : (event: key, ...args: any[]) => void;\r
}[Event]>;\r
\r
export declare type EmitsOptions = ObjectEmitsOptions | string[];\r
\r
declare type EmitsToProps<T extends EmitsOptions> = T extends string[] ? {\r
    [K in string & \`on\${Capitalize<T[number]>}\`]?: (...args: any[]) => any;\r
} : T extends ObjectEmitsOptions ? {\r
    [K in string & \`on\${Capitalize<string & keyof T>}\`]?: K extends \`on\${infer C}\` ? T[Uncapitalize<C>] extends null ? (...args: any[]) => any : (...args: T[Uncapitalize<C>] extends (...args: infer P) => any ? P : never) => any : never;\r
} : {};\r
\r
declare type EnsureNonVoid<T> = T extends void ? {} : T;\r
\r
declare type ErrorCapturedHook<TError = unknown> = (err: TError, instance: ComponentPublicInstance | null, info: string) => boolean | void;\r
\r
export declare const enum ErrorCodes {\r
    SETUP_FUNCTION = 0,\r
    RENDER_FUNCTION = 1,\r
    WATCH_GETTER = 2,\r
    WATCH_CALLBACK = 3,\r
    WATCH_CLEANUP = 4,\r
    NATIVE_EVENT_HANDLER = 5,\r
    COMPONENT_EVENT_HANDLER = 6,\r
    VNODE_HOOK = 7,\r
    DIRECTIVE_HOOK = 8,\r
    TRANSITION_HOOK = 9,\r
    APP_ERROR_HANDLER = 10,\r
    APP_WARN_HANDLER = 11,\r
    FUNCTION_REF = 12,\r
    ASYNC_COMPONENT_LOADER = 13,\r
    SCHEDULER = 14\r
}\r
\r
declare type ErrorTypes = LifecycleHooks | ErrorCodes;\r
\r
declare type ExtractComputedReturns<T extends any> = {\r
    [key in keyof T]: T[key] extends {\r
        get: (...args: any[]) => infer TReturn;\r
    } ? TReturn : T[key] extends (...args: any[]) => infer TReturn ? TReturn : never;\r
};\r
\r
export declare type ExtractDefaultPropTypes<O> = O extends object ? {\r
    [K in keyof Pick<O, DefaultKeys<O>>]: InferPropType<O[K]>;\r
} : {};\r
\r
declare type ExtractMixin<T> = {\r
    Mixin: MixinToOptionTypes<T>;\r
}[T extends ComponentOptionsMixin ? 'Mixin' : never];\r
\r
declare type ExtractOptionProp<T> = T extends ComponentOptionsBase<infer P, // Props\r
any, // RawBindings\r
any, // D\r
any, // C\r
any, // M\r
any, // Mixin\r
any, // Extends\r
any> ? unknown extends P ? {} : P : {};\r
\r
export declare type ExtractPropTypes<O> = {\r
    [K in keyof Pick<O, RequiredKeys<O>>]: InferPropType<O[K]>;\r
} & {\r
    [K in keyof Pick<O, OptionalKeys<O>>]?: InferPropType<O[K]>;\r
};\r
\r
export declare const Fragment: {\r
    new (): {\r
        $props: VNodeProps;\r
    };\r
    __isFragment: true;\r
};\r
\r
export declare interface FunctionalComponent<P = {}, E extends EmitsOptions = {}> extends ComponentInternalOptions {\r
    (props: P, ctx: Omit<SetupContext<E>, 'expose'>): any;\r
    props?: ComponentPropsOptions<P>;\r
    emits?: E | (keyof E)[];\r
    inheritAttrs?: boolean;\r
    displayName?: string;\r
    compatConfig?: CompatConfig;\r
}\r
\r
export declare type FunctionDirective<T = any, V = any> = DirectiveHook<T, any, V>;\r
\r
export declare const getCurrentInstance: () => ComponentInternalInstance | null;\r
\r
export { getCurrentScope }\r
\r
export declare function getTransitionRawChildren(children: VNode[], keepComment?: boolean, parentKey?: VNode['key']): VNode[];\r
\r
export declare function guardReactiveProps(props: (Data & VNodeProps) | null): (Data & VNodeProps) | null;\r
\r
export declare function h(type: string, children?: RawChildren): VNode;\r
\r
export declare function h(type: string, props?: RawProps | null, children?: RawChildren | RawSlots): VNode;\r
\r
export declare function h(type: typeof Text_2 | typeof Comment_2, children?: string | number | boolean): VNode;\r
\r
export declare function h(type: typeof Text_2 | typeof Comment_2, props?: null, children?: string | number | boolean): VNode;\r
\r
export declare function h(type: typeof Fragment, children?: VNodeArrayChildren): VNode;\r
\r
export declare function h(type: typeof Fragment, props?: RawProps | null, children?: VNodeArrayChildren): VNode;\r
\r
export declare function h(type: typeof Teleport, props: RawProps & TeleportProps, children: RawChildren): VNode;\r
\r
export declare function h(type: typeof Suspense, children?: RawChildren): VNode;\r
\r
export declare function h(type: typeof Suspense, props?: (RawProps & SuspenseProps) | null, children?: RawChildren | RawSlots): VNode;\r
\r
export declare function h<P, E extends EmitsOptions = {}>(type: FunctionalComponent<P, E>, props?: (RawProps & P) | ({} extends P ? null : never), children?: RawChildren | RawSlots): VNode;\r
\r
export declare function h(type: Component, children?: RawChildren): VNode;\r
\r
export declare function h<P>(type: ConcreteComponent | string, children?: RawChildren): VNode;\r
\r
export declare function h<P>(type: ConcreteComponent<P> | string, props?: (RawProps & P) | ({} extends P ? null : never), children?: RawChildren): VNode;\r
\r
export declare function h(type: Component, props: null, children?: RawChildren | RawSlots): VNode;\r
\r
export declare function h<P>(type: ComponentOptions<P>, props?: (RawProps & P) | ({} extends P ? null : never), children?: RawChildren | RawSlots): VNode;\r
\r
export declare function h(type: Constructor, children?: RawChildren): VNode;\r
\r
export declare function h<P>(type: Constructor<P>, props?: (RawProps & P) | ({} extends P ? null : never), children?: RawChildren | RawSlots): VNode;\r
\r
export declare function h(type: DefineComponent, children?: RawChildren): VNode;\r
\r
export declare function h<P>(type: DefineComponent<P>, props?: (RawProps & P) | ({} extends P ? null : never), children?: RawChildren | RawSlots): VNode;\r
\r
export declare function handleError(err: unknown, instance: ComponentInternalInstance | null, type: ErrorTypes, throwInDev?: boolean): void;\r
\r
declare type HMRComponent = ComponentOptions | ClassComponent;\r
\r
export declare interface HMRRuntime {\r
    createRecord: typeof createRecord;\r
    rerender: typeof rerender;\r
    reload: typeof reload;\r
}\r
\r
declare type Hook<T = () => void> = T | T[];\r
\r
declare function hydrateSuspense(node: Node, vnode: VNode, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, isSVG: boolean, slotScopeIds: string[] | null, optimized: boolean, rendererInternals: RendererInternals, hydrateNode: (node: Node, vnode: VNode, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, slotScopeIds: string[] | null, optimized: boolean) => Node | null): Node | null;\r
\r
declare function hydrateTeleport(node: Node, vnode: TeleportVNode, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, slotScopeIds: string[] | null, optimized: boolean, { o: { nextSibling, parentNode, querySelector } }: RendererInternals<Node, Element>, hydrateChildren: (node: Node | null, vnode: VNode, container: Element, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, slotScopeIds: string[] | null, optimized: boolean) => Node | null): Node | null;\r
\r
export declare interface HydrationRenderer extends Renderer<Element | ShadowRoot> {\r
    hydrate: RootHydrateFunction;\r
}\r
\r
declare type InferDefault<P, T> = T extends null | number | string | boolean | symbol | Function ? T | ((props: P) => T) : (props: P) => T;\r
\r
declare type InferDefaults<T> = {\r
    [K in keyof T]?: InferDefault<T, NotUndefined<T[K]>>;\r
};\r
\r
declare type InferPropType<T> = [T] extends [null] ? any : [T] extends [{\r
    type: null | true;\r
}] ? any : [T] extends [ObjectConstructor | {\r
    type: ObjectConstructor;\r
}] ? Record<string, any> : [T] extends [BooleanConstructor | {\r
    type: BooleanConstructor;\r
}] ? boolean : [T] extends [DateConstructor | {\r
    type: DateConstructor;\r
}] ? Date : [T] extends [(infer U)[] | {\r
    type: (infer U)[];\r
}] ? U extends DateConstructor ? Date | InferPropType<U> : InferPropType<U> : [T] extends [Prop<infer V, infer D>] ? unknown extends V ? IfAny<V, V, D> : V : T;\r
\r
export declare function initCustomFormatter(): void;\r
\r
export declare function inject<T>(key: InjectionKey<T> | string): T | undefined;\r
\r
export declare function inject<T>(key: InjectionKey<T> | string, defaultValue: T, treatDefaultAsFactory?: false): T;\r
\r
export declare function inject<T>(key: InjectionKey<T> | string, defaultValue: T | (() => T), treatDefaultAsFactory: true): T;\r
\r
export declare interface InjectionKey<T> extends Symbol {\r
}\r
\r
/* Excluded from this release type: InternalRenderFunction */\r
\r
declare type InternalSlots = {\r
    [name: string]: Slot | undefined;\r
};\r
\r
declare type IntersectionMixin<T> = IsDefaultMixinComponent<T> extends true ? OptionTypesType<{}, {}, {}, {}, {}> : UnionToIntersection<ExtractMixin<T>>;\r
\r
declare function isCompatEnabled(key: DeprecationTypes, instance: ComponentInternalInstance | null, enableForBuiltIn?: boolean): boolean;\r
\r
declare type IsDefaultMixinComponent<T> = T extends ComponentOptionsMixin ? ComponentOptionsMixin extends T ? true : false : false;\r
\r
export declare function isMemoSame(cached: VNode, memo: any[]): boolean;\r
\r
export { isProxy }\r
\r
export { isReactive }\r
\r
export { isReadonly }\r
\r
export { isRef }\r
\r
export declare const isRuntimeOnly: () => boolean;\r
\r
export { isShallow }\r
\r
export declare function isVNode(value: any): value is VNode;\r
\r
export declare const KeepAlive: {\r
    new (): {\r
        $props: VNodeProps & KeepAliveProps;\r
    };\r
    __isKeepAlive: true;\r
};\r
\r
export declare interface KeepAliveProps {\r
    include?: MatchPattern;\r
    exclude?: MatchPattern;\r
    max?: number | string;\r
}\r
\r
export declare type LegacyConfig = {\r
    /**\r
     * @deprecated \`config.silent\` option has been removed\r
     */\r
    silent?: boolean;\r
    /**\r
     * @deprecated use false compile-time feature flag instead\r
     * https://github.com/vuejs/core/tree/main/packages/vue#bundler-build-feature-flags\r
     */\r
    devtools?: boolean;\r
    /**\r
     * @deprecated use \`config.isCustomElement\` instead\r
     * https://v3-migration.vuejs.org/breaking-changes/global-api.html#config-ignoredelements-is-now-config-iscustomelement\r
     */\r
    ignoredElements?: (string | RegExp)[];\r
    /**\r
     * @deprecated\r
     * https://v3-migration.vuejs.org/breaking-changes/keycode-modifiers.html\r
     */\r
    keyCodes?: Record<string, number | number[]>;\r
    /**\r
     * @deprecated\r
     * https://v3-migration.vuejs.org/breaking-changes/global-api.html#config-productiontip-removed\r
     */\r
    productionTip?: boolean;\r
};\r
\r
declare interface LegacyOptions<Props, D, C extends ComputedOptions, M extends MethodOptions, Mixin extends ComponentOptionsMixin, Extends extends ComponentOptionsMixin> {\r
    compatConfig?: CompatConfig;\r
    [key: string]: any;\r
    data?: (this: CreateComponentPublicInstance<Props, {}, {}, {}, MethodOptions, Mixin, Extends>, vm: CreateComponentPublicInstance<Props, {}, {}, {}, MethodOptions, Mixin, Extends>) => D;\r
    computed?: C;\r
    methods?: M;\r
    watch?: ComponentWatchOptions;\r
    provide?: ComponentProvideOptions;\r
    inject?: ComponentInjectOptions;\r
    filters?: Record<string, Function>;\r
    mixins?: Mixin[];\r
    extends?: Extends;\r
    beforeCreate?(): void;\r
    created?(): void;\r
    beforeMount?(): void;\r
    mounted?(): void;\r
    beforeUpdate?(): void;\r
    updated?(): void;\r
    activated?(): void;\r
    deactivated?(): void;\r
    /** @deprecated use \`beforeUnmount\` instead */\r
    beforeDestroy?(): void;\r
    beforeUnmount?(): void;\r
    /** @deprecated use \`unmounted\` instead */\r
    destroyed?(): void;\r
    unmounted?(): void;\r
    renderTracked?: DebuggerHook;\r
    renderTriggered?: DebuggerHook;\r
    errorCaptured?: ErrorCapturedHook;\r
    /**\r
     * runtime compile only\r
     * @deprecated use \`compilerOptions.delimiters\` instead.\r
     */\r
    delimiters?: [string, string];\r
    /**\r
     * #3468\r
     *\r
     * type-only, used to assist Mixin's type inference,\r
     * typescript will try to simplify the inferred \`Mixin\` type,\r
     * with the \`__differentiator\`, typescript won't be able to combine different mixins,\r
     * because the \`__differentiator\` will be different\r
     */\r
    __differentiator?: keyof D | keyof C | keyof M;\r
}\r
\r
declare type LegacyPublicInstance = ComponentPublicInstance & LegacyPublicProperties;\r
\r
declare interface LegacyPublicProperties {\r
    $set(target: object, key: string, value: any): void;\r
    $delete(target: object, key: string): void;\r
    $mount(el?: string | Element): this;\r
    $destroy(): void;\r
    $scopedSlots: Slots;\r
    $on(event: string | string[], fn: Function): this;\r
    $once(event: string, fn: Function): this;\r
    $off(event?: string | string[], fn?: Function): this;\r
    $children: LegacyPublicProperties[];\r
    $listeners: Record<string, Function | Function[]>;\r
}\r
\r
declare type LifecycleHook<TFn = Function> = TFn[] | null;\r
\r
declare const enum LifecycleHooks {\r
    BEFORE_CREATE = "bc",\r
    CREATED = "c",\r
    BEFORE_MOUNT = "bm",\r
    MOUNTED = "m",\r
    BEFORE_UPDATE = "bu",\r
    UPDATED = "u",\r
    BEFORE_UNMOUNT = "bum",\r
    UNMOUNTED = "um",\r
    DEACTIVATED = "da",\r
    ACTIVATED = "a",\r
    RENDER_TRIGGERED = "rtg",\r
    RENDER_TRACKED = "rtc",\r
    ERROR_CAPTURED = "ec",\r
    SERVER_PREFETCH = "sp"\r
}\r
\r
declare type MapSources<T, Immediate> = {\r
    [K in keyof T]: T[K] extends WatchSource<infer V> ? Immediate extends true ? V | undefined : V : T[K] extends object ? Immediate extends true ? T[K] | undefined : T[K] : never;\r
};\r
\r
export { markRaw }\r
\r
declare type MatchPattern = string | RegExp | (string | RegExp)[];\r
\r
declare type MergedComponentOptions = ComponentOptions & MergedComponentOptionsOverride;\r
\r
declare type MergedComponentOptionsOverride = {\r
    beforeCreate?: MergedHook;\r
    created?: MergedHook;\r
    beforeMount?: MergedHook;\r
    mounted?: MergedHook;\r
    beforeUpdate?: MergedHook;\r
    updated?: MergedHook;\r
    activated?: MergedHook;\r
    deactivated?: MergedHook;\r
    /** @deprecated use \`beforeUnmount\` instead */\r
    beforeDestroy?: MergedHook;\r
    beforeUnmount?: MergedHook;\r
    /** @deprecated use \`unmounted\` instead */\r
    destroyed?: MergedHook;\r
    unmounted?: MergedHook;\r
    renderTracked?: MergedHook<DebuggerHook>;\r
    renderTriggered?: MergedHook<DebuggerHook>;\r
    errorCaptured?: MergedHook<ErrorCapturedHook>;\r
};\r
\r
/* Excluded from this release type: mergeDefaults */\r
\r
declare type MergedHook<T = () => void> = T | T[];\r
\r
export declare function mergeProps(...args: (Data & VNodeProps)[]): Data;\r
\r
export declare interface MethodOptions {\r
    [key: string]: Function;\r
}\r
\r
declare type MixinToOptionTypes<T> = T extends ComponentOptionsBase<infer P, infer B, infer D, infer C, infer M, infer Mixin, infer Extends, any, any, infer Defaults> ? OptionTypesType<P & {}, B & {}, D & {}, C & {}, M & {}, Defaults & {}> & IntersectionMixin<Mixin> & IntersectionMixin<Extends> : never;\r
\r
declare type MountChildrenFn = (children: VNodeArrayChildren, container: RendererElement, anchor: RendererNode | null, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, isSVG: boolean, slotScopeIds: string[] | null, optimized: boolean, start?: number) => void;\r
\r
declare type MountComponentFn = (initialVNode: VNode, container: RendererElement, anchor: RendererNode | null, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, isSVG: boolean, optimized: boolean) => void;\r
\r
declare type MoveFn = (vnode: VNode, container: RendererElement, anchor: RendererNode | null, type: MoveType, parentSuspense?: SuspenseBoundary | null) => void;\r
\r
declare function moveTeleport(vnode: VNode, container: RendererElement, parentAnchor: RendererNode | null, { o: { insert }, m: move }: RendererInternals, moveType?: TeleportMoveTypes): void;\r
\r
declare const enum MoveType {\r
    ENTER = 0,\r
    LEAVE = 1,\r
    REORDER = 2\r
}\r
\r
declare type MultiWatchSources = (WatchSource<unknown> | object)[];\r
\r
declare type NextFn = (vnode: VNode) => RendererNode | null;\r
\r
export declare function nextTick<T = void>(this: T, fn?: (this: T) => void): Promise<void>;\r
\r
export { normalizeClass }\r
\r
declare type NormalizedProp = null | (PropOptions & {\r
    [BooleanFlags.shouldCast]?: boolean;\r
    [BooleanFlags.shouldCastTrue]?: boolean;\r
});\r
\r
declare type NormalizedProps = Record<string, NormalizedProp>;\r
\r
declare type NormalizedPropsOptions = [NormalizedProps, string[]] | [];\r
\r
export { normalizeProps }\r
\r
export { normalizeStyle }\r
\r
declare function normalizeSuspenseChildren(vnode: VNode): void;\r
\r
declare function normalizeVNode(child: VNodeChild): VNode;\r
\r
declare type NotUndefined<T> = T extends undefined ? never : T;\r
\r
declare const NULL_DYNAMIC_COMPONENT: unique symbol;\r
\r
export declare interface ObjectDirective<T = any, V = any> {\r
    created?: DirectiveHook<T, null, V>;\r
    beforeMount?: DirectiveHook<T, null, V>;\r
    mounted?: DirectiveHook<T, null, V>;\r
    beforeUpdate?: DirectiveHook<T, VNode<any, T>, V>;\r
    updated?: DirectiveHook<T, VNode<any, T>, V>;\r
    beforeUnmount?: DirectiveHook<T, null, V>;\r
    unmounted?: DirectiveHook<T, null, V>;\r
    getSSRProps?: SSRDirectiveHook;\r
    deep?: boolean;\r
}\r
\r
export declare type ObjectEmitsOptions = Record<string, ((...args: any[]) => any) | null>;\r
\r
declare type ObjectInjectOptions = Record<string | symbol, string | symbol | {\r
    from?: string | symbol;\r
    default?: unknown;\r
}>;\r
\r
declare type ObjectProvideOptions = Record<string | symbol, unknown>;\r
\r
declare type ObjectWatchOptionItem = {\r
    handler: WatchCallback | string;\r
} & WatchOptions;\r
\r
export declare function onActivated(hook: Function, target?: ComponentInternalInstance | null): void;\r
\r
export declare const onBeforeMount: (hook: () => any, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
export declare const onBeforeUnmount: (hook: () => any, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
export declare const onBeforeUpdate: (hook: () => any, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
declare type OnCleanup = (cleanupFn: () => void) => void;\r
\r
export declare function onDeactivated(hook: Function, target?: ComponentInternalInstance | null): void;\r
\r
export declare function onErrorCaptured<TError = Error>(hook: ErrorCapturedHook<TError>, target?: ComponentInternalInstance | null): void;\r
\r
export declare const onMounted: (hook: () => any, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
export declare const onRenderTracked: (hook: DebuggerHook, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
export declare const onRenderTriggered: (hook: DebuggerHook, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
export { onScopeDispose }\r
\r
export declare const onServerPrefetch: (hook: () => any, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
export declare const onUnmounted: (hook: () => any, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
export declare const onUpdated: (hook: () => any, target?: ComponentInternalInstance | null) => false | Function | undefined;\r
\r
/**\r
 * Open a block.\r
 * This must be called before \`createBlock\`. It cannot be part of \`createBlock\`\r
 * because the children of the block are evaluated before \`createBlock\` itself\r
 * is called. The generated code typically looks like this:\r
 *\r
 * \`\`\`js\r
 * function render() {\r
 *   return (openBlock(),createBlock('div', null, [...]))\r
 * }\r
 * \`\`\`\r
 * disableTracking is true when creating a v-for fragment block, since a v-for\r
 * fragment always diffs its children.\r
 *\r
 * @private\r
 */\r
export declare function openBlock(disableTracking?: boolean): void;\r
\r
declare type OptionalKeys<T> = Exclude<keyof T, RequiredKeys<T>>;\r
\r
export declare type OptionMergeFunction = (to: unknown, from: unknown) => any;\r
\r
declare type OptionTypesKeys = 'P' | 'B' | 'D' | 'C' | 'M' | 'Defaults';\r
\r
declare type OptionTypesType<P = {}, B = {}, D = {}, C extends ComputedOptions = {}, M extends MethodOptions = {}, Defaults = {}> = {\r
    P: P;\r
    B: B;\r
    D: D;\r
    C: C;\r
    M: M;\r
    Defaults: Defaults;\r
};\r
\r
declare type PatchBlockChildrenFn = (oldChildren: VNode[], newChildren: VNode[], fallbackContainer: RendererElement, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, isSVG: boolean, slotScopeIds: string[] | null) => void;\r
\r
declare type PatchChildrenFn = (n1: VNode | null, n2: VNode, container: RendererElement, anchor: RendererNode | null, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, isSVG: boolean, slotScopeIds: string[] | null, optimized: boolean) => void;\r
\r
declare type PatchFn = (n1: VNode | null, // null means this is a mount\r
n2: VNode, container: RendererElement, anchor?: RendererNode | null, parentComponent?: ComponentInternalInstance | null, parentSuspense?: SuspenseBoundary | null, isSVG?: boolean, slotScopeIds?: string[] | null, optimized?: boolean) => void;\r
\r
declare type Plugin_2 = (PluginInstallFunction & {\r
    install?: PluginInstallFunction;\r
}) | {\r
    install: PluginInstallFunction;\r
};\r
export { Plugin_2 as Plugin }\r
\r
declare type PluginInstallFunction = (app: App, ...options: any[]) => any;\r
\r
/**\r
 * Technically we no longer need this after 3.0.8 but we need to keep the same\r
 * API for backwards compat w/ code generated by compilers.\r
 * @private\r
 */\r
export declare function popScopeId(): void;\r
\r
export declare type Prop<T, D = T> = PropOptions<T, D> | PropType<T>;\r
\r
declare type PropConstructor<T = any> = {\r
    new (...args: any[]): T & {};\r
} | {\r
    (): T;\r
} | PropMethod<T>;\r
\r
declare type PropMethod<T, TConstructor = any> = [T] extends [\r
((...args: any) => any) | undefined\r
] ? {\r
    new (): TConstructor;\r
    (): T;\r
    readonly prototype: TConstructor;\r
} : never;\r
\r
declare interface PropOptions<T = any, D = T> {\r
    type?: PropType<T> | true | null;\r
    required?: boolean;\r
    default?: D | DefaultFactory<D> | null | undefined | object;\r
    validator?(value: unknown): boolean;\r
}\r
\r
declare type PropsWithDefaults<Base, Defaults> = Base & {\r
    [K in keyof Defaults]: K extends keyof Base ? NotUndefined<Base[K]> : never;\r
};\r
\r
export declare type PropType<T> = PropConstructor<T> | PropConstructor<T>[];\r
\r
export declare function provide<T>(key: InjectionKey<T> | string | number, value: T): void;\r
\r
export { proxyRefs }\r
\r
declare type PublicProps = VNodeProps & AllowedComponentProps & ComponentCustomProps;\r
\r
/**\r
 * Set scope id when creating hoisted vnodes.\r
 * @private compiler helper\r
 */\r
export declare function pushScopeId(id: string | null): void;\r
\r
export declare function queuePostFlushCb(cb: SchedulerJobs): void;\r
\r
declare type RawChildren = string | number | boolean | VNode | VNodeArrayChildren | (() => any);\r
\r
declare type RawProps = VNodeProps & {\r
    __v_isVNode?: never;\r
    [Symbol.iterator]?: never;\r
} & Record<string, any>;\r
\r
declare type RawSlots = {\r
    [name: string]: unknown;\r
    $stable?: boolean;\r
    /* Excluded from this release type: _ctx */\r
    /* Excluded from this release type: _ */\r
};\r
\r
export { reactive }\r
\r
export { ReactiveEffect }\r
\r
export { ReactiveEffectOptions }\r
\r
export { ReactiveEffectRunner }\r
\r
export { ReactiveFlags }\r
\r
export { readonly }\r
\r
export { Ref }\r
\r
export { ref }\r
\r
/**\r
 * For runtime-dom to register the compiler.\r
 * Note the exported method uses any to avoid d.ts relying on the compiler types.\r
 */\r
export declare function registerRuntimeCompiler(_compile: any): void;\r
\r
declare function reload(id: string, newComp: HMRComponent): void;\r
\r
declare type RemoveFn = (vnode: VNode) => void;\r
\r
declare function renderComponentRoot(instance: ComponentInternalInstance): VNode;\r
\r
export declare interface Renderer<HostElement = RendererElement> {\r
    render: RootRenderFunction<HostElement>;\r
    createApp: CreateAppFunction<HostElement>;\r
}\r
\r
export declare interface RendererElement extends RendererNode {\r
}\r
\r
declare interface RendererInternals<HostNode = RendererNode, HostElement = RendererElement> {\r
    p: PatchFn;\r
    um: UnmountFn;\r
    r: RemoveFn;\r
    m: MoveFn;\r
    mt: MountComponentFn;\r
    mc: MountChildrenFn;\r
    pc: PatchChildrenFn;\r
    pbc: PatchBlockChildrenFn;\r
    n: NextFn;\r
    o: RendererOptions<HostNode, HostElement>;\r
}\r
\r
export declare interface RendererNode {\r
    [key: string]: any;\r
}\r
\r
export declare interface RendererOptions<HostNode = RendererNode, HostElement = RendererElement> {\r
    patchProp(el: HostElement, key: string, prevValue: any, nextValue: any, isSVG?: boolean, prevChildren?: VNode<HostNode, HostElement>[], parentComponent?: ComponentInternalInstance | null, parentSuspense?: SuspenseBoundary | null, unmountChildren?: UnmountChildrenFn): void;\r
    insert(el: HostNode, parent: HostElement, anchor?: HostNode | null): void;\r
    remove(el: HostNode): void;\r
    createElement(type: string, isSVG?: boolean, isCustomizedBuiltIn?: string, vnodeProps?: (VNodeProps & {\r
        [key: string]: any;\r
    }) | null): HostElement;\r
    createText(text: string): HostNode;\r
    createComment(text: string): HostNode;\r
    setText(node: HostNode, text: string): void;\r
    setElementText(node: HostElement, text: string): void;\r
    parentNode(node: HostNode): HostElement | null;\r
    nextSibling(node: HostNode): HostNode | null;\r
    querySelector?(selector: string): HostElement | null;\r
    setScopeId?(el: HostElement, id: string): void;\r
    cloneNode?(node: HostNode): HostNode;\r
    insertStaticContent?(content: string, parent: HostElement, anchor: HostNode | null, isSVG: boolean, start?: HostNode | null, end?: HostNode | null): [HostNode, HostNode];\r
}\r
\r
export declare type RenderFunction = () => VNodeChild;\r
\r
/**\r
 * v-for string\r
 * @private\r
 */\r
export declare function renderList(source: string, renderItem: (value: string, index: number) => VNodeChild): VNodeChild[];\r
\r
/**\r
 * v-for number\r
 */\r
export declare function renderList(source: number, renderItem: (value: number, index: number) => VNodeChild): VNodeChild[];\r
\r
/**\r
 * v-for array\r
 */\r
export declare function renderList<T>(source: T[], renderItem: (value: T, index: number) => VNodeChild): VNodeChild[];\r
\r
/**\r
 * v-for iterable\r
 */\r
export declare function renderList<T>(source: Iterable<T>, renderItem: (value: T, index: number) => VNodeChild): VNodeChild[];\r
\r
/**\r
 * v-for object\r
 */\r
export declare function renderList<T>(source: T, renderItem: <K extends keyof T>(value: T[K], key: K, index: number) => VNodeChild): VNodeChild[];\r
\r
/**\r
 * Compiler runtime helper for rendering \`<slot/>\`\r
 * @private\r
 */\r
export declare function renderSlot(slots: Slots, name: string, props?: Data, fallback?: () => VNodeArrayChildren, noSlotted?: boolean): VNode;\r
\r
declare type RequiredKeys<T> = {\r
    [K in keyof T]: T[K] extends {\r
        required: true;\r
    } | {\r
        default: any;\r
    } | BooleanConstructor | {\r
        type: BooleanConstructor;\r
    } ? T[K] extends {\r
        default: undefined | (() => undefined);\r
    } ? never : K : never;\r
}[keyof T];\r
\r
declare function rerender(id: string, newRender?: Function): void;\r
\r
/**\r
 * @private\r
 */\r
export declare function resolveComponent(name: string, maybeSelfReference?: boolean): ConcreteComponent | string;\r
\r
/**\r
 * @private\r
 */\r
export declare function resolveDirective(name: string): Directive | undefined;\r
\r
/**\r
 * @private\r
 */\r
export declare function resolveDynamicComponent(component: unknown): VNodeTypes;\r
\r
/* Excluded from this release type: resolveFilter */\r
\r
/* Excluded from this release type: resolveFilter_2 */\r
\r
export declare function resolveTransitionHooks(vnode: VNode, props: BaseTransitionProps<any>, state: TransitionState, instance: ComponentInternalInstance): TransitionHooks;\r
\r
export declare type RootHydrateFunction = (vnode: VNode<Node, Element>, container: (Element | ShadowRoot) & {\r
    _vnode?: VNode;\r
}) => void;\r
\r
export declare type RootRenderFunction<HostElement = RendererElement> = (vnode: VNode | null, container: HostElement, isSVG?: boolean) => void;\r
\r
/**\r
 * Subset of compiler options that makes sense for the runtime.\r
 */\r
export declare interface RuntimeCompilerOptions {\r
    isCustomElement?: (tag: string) => boolean;\r
    whitespace?: 'preserve' | 'condense';\r
    comments?: boolean;\r
    delimiters?: [string, string];\r
}\r
\r
declare interface SchedulerJob extends Function {\r
    id?: number;\r
    active?: boolean;\r
    computed?: boolean;\r
    /**\r
     * Indicates whether the effect is allowed to recursively trigger itself\r
     * when managed by the scheduler.\r
     *\r
     * By default, a job cannot trigger itself because some built-in method calls,\r
     * e.g. Array.prototype.push actually performs reads as well (#1740) which\r
     * can lead to confusing infinite loops.\r
     * The allowed cases are component update functions and watch callbacks.\r
     * Component update functions may update child component props, which in turn\r
     * trigger flush: "pre" watch callbacks that mutates state that the parent\r
     * relies on (#1801). Watch callbacks doesn't track its dependencies so if it\r
     * triggers itself again, it's likely intentional and it is the user's\r
     * responsibility to perform recursive state mutation that eventually\r
     * stabilizes (#1727).\r
     */\r
    allowRecurse?: boolean;\r
    /**\r
     * Attached by renderer.ts when setting up a component's render effect\r
     * Used to obtain component information when reporting max recursive updates.\r
     * dev only.\r
     */\r
    ownerInstance?: ComponentInternalInstance;\r
}\r
\r
declare type SchedulerJobs = SchedulerJob | SchedulerJob[];\r
\r
/**\r
 * Block tracking sometimes needs to be disabled, for example during the\r
 * creation of a tree that needs to be cached by v-once. The compiler generates\r
 * code like this:\r
 *\r
 * \`\`\` js\r
 * _cache[1] || (\r
 *   setBlockTracking(-1),\r
 *   _cache[1] = createVNode(...),\r
 *   setBlockTracking(1),\r
 *   _cache[1]\r
 * )\r
 * \`\`\`\r
 *\r
 * @private\r
 */\r
export declare function setBlockTracking(value: number): void;\r
\r
/**\r
 * Note: rendering calls maybe nested. The function returns the parent rendering\r
 * instance if present, which should be restored after the render is done:\r
 *\r
 * \`\`\`js\r
 * const prev = setCurrentRenderingInstance(i)\r
 * // ...render\r
 * setCurrentRenderingInstance(prev)\r
 * \`\`\`\r
 */\r
declare function setCurrentRenderingInstance(instance: ComponentInternalInstance | null): ComponentInternalInstance | null;\r
\r
export declare function setDevtoolsHook(hook: DevtoolsHook, target: any): void;\r
\r
export declare function setTransitionHooks(vnode: VNode, hooks: TransitionHooks): void;\r
\r
declare function setupComponent(instance: ComponentInternalInstance, isSSR?: boolean): Promise<void> | undefined;\r
\r
export declare interface SetupContext<E = EmitsOptions> {\r
    attrs: Data;\r
    slots: Slots;\r
    emit: EmitFn<E>;\r
    expose: (exposed?: Record<string, any>) => void;\r
}\r
\r
declare type SetupRenderEffectFn = (instance: ComponentInternalInstance, initialVNode: VNode, container: RendererElement, anchor: RendererNode | null, parentSuspense: SuspenseBoundary | null, isSVG: boolean, optimized: boolean) => void;\r
\r
export { ShallowReactive }\r
\r
export { shallowReactive }\r
\r
export { shallowReadonly }\r
\r
export { ShallowRef }\r
\r
export { shallowRef }\r
\r
export { ShallowUnwrapRef }\r
\r
export declare type Slot = (...args: any[]) => VNode[];\r
\r
export declare type Slots = Readonly<InternalSlots>;\r
\r
/**\r
 * Use this for features where legacy usage is still possible, but will likely\r
 * lead to runtime error if compat is disabled. (warn in all cases)\r
 */\r
declare function softAssertCompatEnabled(key: DeprecationTypes, instance: ComponentInternalInstance | null, ...args: any[]): boolean;\r
\r
export declare const ssrContextKey: unique symbol;\r
\r
declare type SSRDirectiveHook = (binding: DirectiveBinding, vnode: VNode) => Data | undefined;\r
\r
/* Excluded from this release type: ssrUtils */\r
\r
export declare const Static: unique symbol;\r
\r
export { stop_2 as stop }\r
\r
export declare const Suspense: {\r
    new (): {\r
        $props: VNodeProps & SuspenseProps;\r
    };\r
    __isSuspense: true;\r
};\r
\r
export declare interface SuspenseBoundary {\r
    vnode: VNode<RendererNode, RendererElement, SuspenseProps>;\r
    parent: SuspenseBoundary | null;\r
    parentComponent: ComponentInternalInstance | null;\r
    isSVG: boolean;\r
    container: RendererElement;\r
    hiddenContainer: RendererElement;\r
    anchor: RendererNode | null;\r
    activeBranch: VNode | null;\r
    pendingBranch: VNode | null;\r
    deps: number;\r
    pendingId: number;\r
    timeout: number;\r
    isInFallback: boolean;\r
    isHydrating: boolean;\r
    isUnmounted: boolean;\r
    effects: Function[];\r
    resolve(force?: boolean): void;\r
    fallback(fallbackVNode: VNode): void;\r
    move(container: RendererElement, anchor: RendererNode | null, type: MoveType): void;\r
    next(): RendererNode | null;\r
    registerDep(instance: ComponentInternalInstance, setupRenderEffect: SetupRenderEffectFn): void;\r
    unmount(parentSuspense: SuspenseBoundary | null, doRemove?: boolean): void;\r
}\r
\r
declare const SuspenseImpl: {\r
    name: string;\r
    __isSuspense: boolean;\r
    process(n1: VNode | null, n2: VNode, container: RendererElement, anchor: RendererNode | null, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, isSVG: boolean, slotScopeIds: string[] | null, optimized: boolean, rendererInternals: RendererInternals): void;\r
    hydrate: typeof hydrateSuspense;\r
    create: typeof createSuspenseBoundary;\r
    normalize: typeof normalizeSuspenseChildren;\r
};\r
\r
export declare interface SuspenseProps {\r
    onResolve?: () => void;\r
    onPending?: () => void;\r
    onFallback?: () => void;\r
    timeout?: string | number;\r
}\r
\r
export declare const Teleport: {\r
    new (): {\r
        $props: VNodeProps & TeleportProps;\r
    };\r
    __isTeleport: true;\r
};\r
\r
declare const TeleportImpl: {\r
    __isTeleport: boolean;\r
    process(n1: TeleportVNode | null, n2: TeleportVNode, container: RendererElement, anchor: RendererNode | null, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, isSVG: boolean, slotScopeIds: string[] | null, optimized: boolean, internals: RendererInternals): void;\r
    remove(vnode: VNode, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, optimized: boolean, { um: unmount, o: { remove: hostRemove } }: RendererInternals, doRemove: Boolean): void;\r
    move: typeof moveTeleport;\r
    hydrate: typeof hydrateTeleport;\r
};\r
\r
declare const enum TeleportMoveTypes {\r
    TARGET_CHANGE = 0,\r
    TOGGLE = 1,\r
    REORDER = 2\r
}\r
\r
export declare interface TeleportProps {\r
    to: string | RendererElement | null | undefined;\r
    disabled?: boolean;\r
}\r
\r
declare type TeleportVNode = VNode<RendererNode, RendererElement, TeleportProps>;\r
\r
declare const Text_2: unique symbol;\r
export { Text_2 as Text }\r
\r
export { toDisplayString }\r
\r
export { toHandlerKey }\r
\r
/**\r
 * For prefixing keys in v-on="obj" with "on"\r
 * @private\r
 */\r
export declare function toHandlers(obj: Record<string, any>): Record<string, any>;\r
\r
export { toRaw }\r
\r
export { ToRef }\r
\r
export { toRef }\r
\r
export { ToRefs }\r
\r
export { toRefs }\r
\r
export { TrackOpTypes }\r
\r
/**\r
 * Internal API for registering an arguments transform for createVNode\r
 * used for creating stubs in the test-utils\r
 * It is *internal* but needs to be exposed for test-utils to pick up proper\r
 * typings\r
 */\r
export declare function transformVNodeArgs(transformer?: typeof vnodeArgsTransformer): void;\r
\r
export declare interface TransitionHooks<HostElement extends RendererElement = RendererElement> {\r
    mode: BaseTransitionProps['mode'];\r
    persisted: boolean;\r
    beforeEnter(el: HostElement): void;\r
    enter(el: HostElement): void;\r
    leave(el: HostElement, remove: () => void): void;\r
    clone(vnode: VNode): TransitionHooks<HostElement>;\r
    afterLeave?(): void;\r
    delayLeave?(el: HostElement, earlyRemove: () => void, delayedLeave: () => void): void;\r
    delayedLeave?(): void;\r
}\r
\r
export declare interface TransitionState {\r
    isMounted: boolean;\r
    isLeaving: boolean;\r
    isUnmounting: boolean;\r
    leavingVNodes: Map<any, Record<string, VNode>>;\r
}\r
\r
export { TriggerOpTypes }\r
\r
export { triggerRef }\r
\r
declare type UnmountChildrenFn = (children: VNode[], parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, doRemove?: boolean, optimized?: boolean, start?: number) => void;\r
\r
declare type UnmountFn = (vnode: VNode, parentComponent: ComponentInternalInstance | null, parentSuspense: SuspenseBoundary | null, doRemove?: boolean, optimized?: boolean) => void;\r
\r
export { unref }\r
\r
declare type UnwrapMixinsType<T, Type extends OptionTypesKeys> = T extends OptionTypesType ? T[Type] : never;\r
\r
export { UnwrapNestedRefs }\r
\r
export { UnwrapRef }\r
\r
export declare function useAttrs(): SetupContext['attrs'];\r
\r
export declare function useSlots(): SetupContext['slots'];\r
\r
export declare const useSSRContext: <T = Record<string, any>>() => T | undefined;\r
\r
export declare function useTransitionState(): TransitionState;\r
\r
export declare const version: string;\r
\r
export declare interface VNode<HostNode = RendererNode, HostElement = RendererElement, ExtraProps = {\r
    [key: string]: any;\r
}> {\r
    /* Excluded from this release type: __v_isVNode */\r
    /* Excluded from this release type: __v_skip */\r
    type: VNodeTypes;\r
    props: (VNodeProps & ExtraProps) | null;\r
    key: string | number | symbol | null;\r
    ref: VNodeNormalizedRef | null;\r
    /**\r
     * SFC only. This is assigned on vnode creation using currentScopeId\r
     * which is set alongside currentRenderingInstance.\r
     */\r
    scopeId: string | null;\r
    /* Excluded from this release type: slotScopeIds */\r
    children: VNodeNormalizedChildren;\r
    component: ComponentInternalInstance | null;\r
    dirs: DirectiveBinding[] | null;\r
    transition: TransitionHooks<HostElement> | null;\r
    el: HostNode | null;\r
    anchor: HostNode | null;\r
    target: HostElement | null;\r
    targetAnchor: HostNode | null;\r
    /* Excluded from this release type: staticCount */\r
    suspense: SuspenseBoundary | null;\r
    /* Excluded from this release type: ssContent */\r
    /* Excluded from this release type: ssFallback */\r
    shapeFlag: number;\r
    patchFlag: number;\r
    /* Excluded from this release type: dynamicProps */\r
    /* Excluded from this release type: dynamicChildren */\r
    appContext: AppContext | null;\r
    /* Excluded from this release type: memo */\r
    /* Excluded from this release type: isCompatRoot */\r
    /* Excluded from this release type: ce */\r
}\r
\r
declare let vnodeArgsTransformer: ((args: Parameters<typeof _createVNode>, instance: ComponentInternalInstance | null) => Parameters<typeof _createVNode>) | undefined;\r
\r
export declare type VNodeArrayChildren = Array<VNodeArrayChildren | VNodeChildAtom>;\r
\r
export declare type VNodeChild = VNodeChildAtom | VNodeArrayChildren;\r
\r
declare type VNodeChildAtom = VNode | string | number | boolean | null | undefined | void;\r
\r
declare type VNodeMountHook = (vnode: VNode) => void;\r
\r
export declare type VNodeNormalizedChildren = string | VNodeArrayChildren | RawSlots | null;\r
\r
declare type VNodeNormalizedRef = VNodeNormalizedRefAtom | VNodeNormalizedRefAtom[];\r
\r
declare type VNodeNormalizedRefAtom = {\r
    i: ComponentInternalInstance;\r
    r: VNodeRef;\r
    k?: string;\r
    f?: boolean;\r
};\r
\r
export declare type VNodeProps = {\r
    key?: string | number | symbol;\r
    ref?: VNodeRef;\r
    ref_for?: boolean;\r
    ref_key?: string;\r
    onVnodeBeforeMount?: VNodeMountHook | VNodeMountHook[];\r
    onVnodeMounted?: VNodeMountHook | VNodeMountHook[];\r
    onVnodeBeforeUpdate?: VNodeUpdateHook | VNodeUpdateHook[];\r
    onVnodeUpdated?: VNodeUpdateHook | VNodeUpdateHook[];\r
    onVnodeBeforeUnmount?: VNodeMountHook | VNodeMountHook[];\r
    onVnodeUnmounted?: VNodeMountHook | VNodeMountHook[];\r
};\r
\r
export declare type VNodeRef = string | Ref | ((ref: Element | ComponentPublicInstance | null, refs: Record<string, any>) => void);\r
\r
export declare type VNodeTypes = string | VNode | Component | typeof Text_2 | typeof Static | typeof Comment_2 | typeof Fragment | typeof TeleportImpl | typeof SuspenseImpl;\r
\r
declare type VNodeUpdateHook = (vnode: VNode, oldVNode: VNode) => void;\r
\r
export declare function warn(msg: string, ...args: any[]): void;\r
\r
declare function warnDeprecation(key: DeprecationTypes, instance: ComponentInternalInstance | null, ...args: any[]): void;\r
\r
export declare function watch<T extends MultiWatchSources, Immediate extends Readonly<boolean> = false>(sources: [...T], cb: WatchCallback<MapSources<T, false>, MapSources<T, Immediate>>, options?: WatchOptions<Immediate>): WatchStopHandle;\r
\r
export declare function watch<T extends Readonly<MultiWatchSources>, Immediate extends Readonly<boolean> = false>(source: T, cb: WatchCallback<MapSources<T, false>, MapSources<T, Immediate>>, options?: WatchOptions<Immediate>): WatchStopHandle;\r
\r
export declare function watch<T, Immediate extends Readonly<boolean> = false>(source: WatchSource<T>, cb: WatchCallback<T, Immediate extends true ? T | undefined : T>, options?: WatchOptions<Immediate>): WatchStopHandle;\r
\r
export declare function watch<T extends object, Immediate extends Readonly<boolean> = false>(source: T, cb: WatchCallback<T, Immediate extends true ? T | undefined : T>, options?: WatchOptions<Immediate>): WatchStopHandle;\r
\r
export declare type WatchCallback<V = any, OV = any> = (value: V, oldValue: OV, onCleanup: OnCleanup) => any;\r
\r
export declare type WatchEffect = (onCleanup: OnCleanup) => void;\r
\r
export declare function watchEffect(effect: WatchEffect, options?: WatchOptionsBase): WatchStopHandle;\r
\r
declare type WatchOptionItem = string | WatchCallback | ObjectWatchOptionItem;\r
\r
export declare interface WatchOptions<Immediate = boolean> extends WatchOptionsBase {\r
    immediate?: Immediate;\r
    deep?: boolean;\r
}\r
\r
export declare interface WatchOptionsBase extends DebuggerOptions {\r
    flush?: 'pre' | 'post' | 'sync';\r
}\r
\r
export declare function watchPostEffect(effect: WatchEffect, options?: DebuggerOptions): WatchStopHandle;\r
\r
export declare type WatchSource<T = any> = Ref<T> | ComputedRef<T> | (() => T);\r
\r
export declare type WatchStopHandle = () => void;\r
\r
export declare function watchSyncEffect(effect: WatchEffect, options?: DebuggerOptions): WatchStopHandle;\r
\r
/* Excluded from this release type: withAsyncContext */\r
\r
/**\r
 * Wrap a slot function to memoize current rendering instance\r
 * @private compiler helper\r
 */\r
export declare function withCtx(fn: Function, ctx?: ComponentInternalInstance | null, isNonScopedSlot?: boolean): Function;\r
\r
/**\r
 * Vue \`<script setup>\` compiler macro for providing props default values when\r
 * using type-based \`defineProps\` declaration.\r
 *\r
 * Example usage:\r
 * \`\`\`ts\r
 * withDefaults(defineProps<{\r
 *   size?: number\r
 *   labels?: string[]\r
 * }>(), {\r
 *   size: 3,\r
 *   labels: () => ['default label']\r
 * })\r
 * \`\`\`\r
 *\r
 * This is only usable inside \`<script setup>\`, is compiled away in the output\r
 * and should **not** be actually called at runtime.\r
 */\r
export declare function withDefaults<Props, Defaults extends InferDefaults<Props>>(props: Props, defaults: Defaults): PropsWithDefaults<Props, Defaults>;\r
\r
/**\r
 * Adds directives to a VNode.\r
 */\r
export declare function withDirectives<T extends VNode>(vnode: T, directives: DirectiveArguments): T;\r
\r
export declare function withMemo(memo: any[], render: () => VNode<any, any>, cache: any[], index: number): VNode<any, any, {\r
    [key: string]: any;\r
}>;\r
\r
/**\r
 * Only for backwards compat\r
 * @private\r
 */\r
export declare const withScopeId: (_id: string) => typeof withCtx;\r
\r
export { WritableComputedOptions }\r
\r
export { WritableComputedRef }\r
\r
export { }\r

// Note: this file is auto concatenated to the end of the bundled d.ts during
// build.

declare module '@vue/reactivity' {
  export interface RefUnwrapBailTypes {
    runtimeCoreBailTypes:
      | VNode
      | {
          // directly bailing on ComponentPublicInstance results in recursion
          // so we use this as a bail hint
          $: ComponentInternalInstance
        }
  }
}

// Note: this file is auto concatenated to the end of the bundled d.ts during
// build.
type _defineProps = typeof defineProps
type _defineEmits = typeof defineEmits
type _defineExpose = typeof defineExpose
type _withDefaults = typeof withDefaults

declare global {
  const defineProps: _defineProps
  const defineEmits: _defineEmits
  const defineExpose: _defineExpose
  const withDefaults: _withDefaults
}
`,X=`import { BaseTransitionProps } from '@vue/runtime-core';\r
import { ComponentInternalInstance } from '@vue/runtime-core';\r
import { ComponentOptionsMixin } from '@vue/runtime-core';\r
import { ComponentOptionsWithArrayProps } from '@vue/runtime-core';\r
import { ComponentOptionsWithObjectProps } from '@vue/runtime-core';\r
import { ComponentOptionsWithoutProps } from '@vue/runtime-core';\r
import { ComponentPropsOptions } from '@vue/runtime-core';\r
import { ComponentPublicInstance } from '@vue/runtime-core';\r
import { ComputedOptions } from '@vue/runtime-core';\r
import { ConcreteComponent } from '@vue/runtime-core';\r
import { CreateAppFunction } from '@vue/runtime-core';\r
import { EmitsOptions } from '@vue/runtime-core';\r
import { ExtractPropTypes } from '@vue/runtime-core';\r
import { FunctionalComponent } from '@vue/runtime-core';\r
import { MethodOptions } from '@vue/runtime-core';\r
import { ObjectDirective } from '@vue/runtime-core';\r
import { RenderFunction } from '@vue/runtime-core';\r
import { RootHydrateFunction } from '@vue/runtime-core';\r
import { RootRenderFunction } from '@vue/runtime-core';\r
import { SetupContext } from '@vue/runtime-core';\r
\r
declare const ANIMATION = "animation";\r
\r
declare type AssignerFn = (value: any) => void;\r
\r
declare const BaseClass: {\r
    new (): HTMLElement;\r
    prototype: HTMLElement;\r
};\r
\r
export declare const createApp: CreateAppFunction<Element>;\r
\r
export declare const createSSRApp: CreateAppFunction<Element>;\r
\r
export declare function defineCustomElement<Props, RawBindings = object>(setup: (props: Readonly<Props>, ctx: SetupContext) => RawBindings | RenderFunction): VueElementConstructor<Props>;\r
\r
export declare function defineCustomElement<Props = {}, RawBindings = {}, D = {}, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = EmitsOptions, EE extends string = string>(options: ComponentOptionsWithoutProps<Props, RawBindings, D, C, M, Mixin, Extends, E, EE> & {\r
    styles?: string[];\r
}): VueElementConstructor<Props>;\r
\r
export declare function defineCustomElement<PropNames extends string, RawBindings, D, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = Record<string, any>, EE extends string = string>(options: ComponentOptionsWithArrayProps<PropNames, RawBindings, D, C, M, Mixin, Extends, E, EE> & {\r
    styles?: string[];\r
}): VueElementConstructor<{\r
    [K in PropNames]: any;\r
}>;\r
\r
export declare function defineCustomElement<PropsOptions extends Readonly<ComponentPropsOptions>, RawBindings, D, C extends ComputedOptions = {}, M extends MethodOptions = {}, Mixin extends ComponentOptionsMixin = ComponentOptionsMixin, Extends extends ComponentOptionsMixin = ComponentOptionsMixin, E extends EmitsOptions = Record<string, any>, EE extends string = string>(options: ComponentOptionsWithObjectProps<PropsOptions, RawBindings, D, C, M, Mixin, Extends, E, EE> & {\r
    styles?: string[];\r
}): VueElementConstructor<ExtractPropTypes<PropsOptions>>;\r
\r
export declare function defineCustomElement(options: {\r
    new (...args: any[]): ComponentPublicInstance;\r
}): VueElementConstructor;\r
\r
export declare const defineSSRCustomElement: typeof defineCustomElement;\r
\r
export declare const hydrate: RootHydrateFunction;\r
\r
/* Excluded from this release type: initDirectivesForSSR */\r
\r
declare type InnerComponentDef = ConcreteComponent & {\r
    styles?: string[];\r
};\r
\r
declare type ModelDirective<T> = ObjectDirective<T & {\r
    _assign: AssignerFn;\r
}>;\r
\r
export declare const render: RootRenderFunction<Element | ShadowRoot>;\r
\r
declare const TRANSITION = "transition";\r
\r
export declare const Transition: FunctionalComponent<TransitionProps>;\r
\r
export declare const TransitionGroup: new () => {\r
    $props: TransitionGroupProps;\r
};\r
\r
export declare type TransitionGroupProps = Omit<TransitionProps, 'mode'> & {\r
    tag?: string;\r
    moveClass?: string;\r
};\r
\r
export declare interface TransitionProps extends BaseTransitionProps<Element> {\r
    name?: string;\r
    type?: typeof TRANSITION | typeof ANIMATION;\r
    css?: boolean;\r
    duration?: number | {\r
        enter: number;\r
        leave: number;\r
    };\r
    enterFromClass?: string;\r
    enterActiveClass?: string;\r
    enterToClass?: string;\r
    appearFromClass?: string;\r
    appearActiveClass?: string;\r
    appearToClass?: string;\r
    leaveFromClass?: string;\r
    leaveActiveClass?: string;\r
    leaveToClass?: string;\r
}\r
\r
export declare function useCssModule(name?: string): Record<string, string>;\r
\r
/**\r
 * Runtime helper for SFC's CSS variable injection feature.\r
 * @private\r
 */\r
export declare function useCssVars(getter: (ctx: any) => Record<string, string>): void;\r
\r
export declare const vModelCheckbox: ModelDirective<HTMLInputElement>;\r
\r
export declare const vModelDynamic: ObjectDirective<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\r
\r
export declare const vModelRadio: ModelDirective<HTMLInputElement>;\r
\r
export declare const vModelSelect: ModelDirective<HTMLSelectElement>;\r
\r
export declare const vModelText: ModelDirective<HTMLInputElement | HTMLTextAreaElement>;\r
\r
export declare const vShow: ObjectDirective<VShowElement>;\r
\r
declare interface VShowElement extends HTMLElement {\r
    _vod: string;\r
}\r
\r
export declare class VueElement extends BaseClass {\r
    private _def;\r
    private _props;\r
    /* Excluded from this release type: _instance */\r
    private _connected;\r
    private _resolved;\r
    private _numberProps;\r
    private _styles?;\r
    constructor(_def: InnerComponentDef, _props?: Record<string, any>, hydrate?: RootHydrateFunction);\r
    connectedCallback(): void;\r
    disconnectedCallback(): void;\r
    /**\r
     * resolve inner component definition (handle possible async component)\r
     */\r
    private _resolveDef;\r
    protected _setAttr(key: string): void;\r
    /* Excluded from this release type: _getProp */\r
    /* Excluded from this release type: _setProp */\r
    private _update;\r
    private _createVNode;\r
    private _applyStyles;\r
}\r
\r
export declare type VueElementConstructor<P = {}> = {\r
    new (initialProps?: Record<string, any>): VueElement & P;\r
};\r
\r
/**\r
 * @private\r
 */\r
export declare const withKeys: (fn: Function, modifiers: string[]) => (event: KeyboardEvent) => any;\r
\r
/**\r
 * @private\r
 */\r
export declare const withModifiers: (fn: Function, modifiers: string[]) => (event: Event, ...args: unknown[]) => any;\r
\r
\r
export * from "@vue/runtime-core";\r
\r
export { }\r

// Note: this file is auto concatenated to the end of the bundled d.ts during
// build.

// This code is based on react definition in DefinitelyTyped published under the MIT license.
//      Repository: https://github.com/DefinitelyTyped/DefinitelyTyped
//      Path in the repository: types/react/index.d.ts
//
// Copyrights of original definition are:
//      AssureSign <http://www.assuresign.com>
//      Microsoft <https://microsoft.com>
//                 John Reilly <https://github.com/johnnyreilly>
//      Benoit Benezech <https://github.com/bbenezech>
//      Patricio Zavolinsky <https://github.com/pzavolinsky>
//      Digiguru <https://github.com/digiguru>
//      Eric Anderson <https://github.com/ericanderson>
//      Dovydas Navickas <https://github.com/DovydasNavickas>
//                 Josh Rutherford <https://github.com/theruther4d>
//                 Guilherme Hübner <https://github.com/guilhermehubner>
//                 Ferdy Budhidharma <https://github.com/ferdaber>
//                 Johann Rakotoharisoa <https://github.com/jrakotoharisoa>
//                 Olivier Pascal <https://github.com/pascaloliv>
//                 Martin Hochel <https://github.com/hotell>
//                 Frank Li <https://github.com/franklixuefei>
//                 Jessica Franco <https://github.com/Jessidhia>
//                 Saransh Kataria <https://github.com/saranshkataria>
//                 Kanitkorn Sujautra <https://github.com/lukyth>
//                 Sebastian Silbermann <https://github.com/eps1lon>

import { VNode } from '@vue/runtime-core'
import * as CSS from 'csstype'

export interface CSSProperties
  extends CSS.Properties<string | number>,
    CSS.PropertiesHyphen<string | number> {
  /**
   * The index signature was removed to enable closed typing for style
   * using CSSType. You're able to use type assertion or module augmentation
   * to add properties or an index signature of your own.
   *
   * For examples and more information, visit:
   * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors
   */
  [v: \`--\${string}\`]: string | number | undefined
}

type Booleanish = boolean | 'true' | 'false'
type Numberish = number | string

// All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/
interface AriaAttributes {
  /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
  'aria-activedescendant'?: string
  /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
  'aria-atomic'?: Booleanish
  /**
   * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
   * presented if they are made.
   */
  'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both'
  /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
  'aria-busy'?: Booleanish
  /**
   * Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
   * @see aria-pressed @see aria-selected.
   */
  'aria-checked'?: Booleanish | 'mixed'
  /**
   * Defines the total number of columns in a table, grid, or treegrid.
   * @see aria-colindex.
   */
  'aria-colcount'?: Numberish
  /**
   * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
   * @see aria-colcount @see aria-colspan.
   */
  'aria-colindex'?: Numberish
  /**
   * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
   * @see aria-colindex @see aria-rowspan.
   */
  'aria-colspan'?: Numberish
  /**
   * Identifies the element (or elements) whose contents or presence are controlled by the current element.
   * @see aria-owns.
   */
  'aria-controls'?: string
  /** Indicates the element that represents the current item within a container or set of related elements. */
  'aria-current'?: Booleanish | 'page' | 'step' | 'location' | 'date' | 'time'
  /**
   * Identifies the element (or elements) that describes the object.
   * @see aria-labelledby
   */
  'aria-describedby'?: string
  /**
   * Identifies the element that provides a detailed, extended description for the object.
   * @see aria-describedby.
   */
  'aria-details'?: string
  /**
   * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
   * @see aria-hidden @see aria-readonly.
   */
  'aria-disabled'?: Booleanish
  /**
   * Indicates what functions can be performed when a dragged object is released on the drop target.
   * @deprecated in ARIA 1.1
   */
  'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup'
  /**
   * Identifies the element that provides an error message for the object.
   * @see aria-invalid @see aria-describedby.
   */
  'aria-errormessage'?: string
  /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
  'aria-expanded'?: Booleanish
  /**
   * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
   * allows assistive technology to override the general default of reading in document source order.
   */
  'aria-flowto'?: string
  /**
   * Indicates an element's "grabbed" state in a drag-and-drop operation.
   * @deprecated in ARIA 1.1
   */
  'aria-grabbed'?: Booleanish
  /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
  'aria-haspopup'?: Booleanish | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog'
  /**
   * Indicates whether the element is exposed to an accessibility API.
   * @see aria-disabled.
   */
  'aria-hidden'?: Booleanish
  /**
   * Indicates the entered value does not conform to the format expected by the application.
   * @see aria-errormessage.
   */
  'aria-invalid'?: Booleanish | 'grammar' | 'spelling'
  /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
  'aria-keyshortcuts'?: string
  /**
   * Defines a string value that labels the current element.
   * @see aria-labelledby.
   */
  'aria-label'?: string
  /**
   * Identifies the element (or elements) that labels the current element.
   * @see aria-describedby.
   */
  'aria-labelledby'?: string
  /** Defines the hierarchical level of an element within a structure. */
  'aria-level'?: Numberish
  /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
  'aria-live'?: 'off' | 'assertive' | 'polite'
  /** Indicates whether an element is modal when displayed. */
  'aria-modal'?: Booleanish
  /** Indicates whether a text box accepts multiple lines of input or only a single line. */
  'aria-multiline'?: Booleanish
  /** Indicates that the user may select more than one item from the current selectable descendants. */
  'aria-multiselectable'?: Booleanish
  /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
  'aria-orientation'?: 'horizontal' | 'vertical'
  /**
   * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
   * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
   * @see aria-controls.
   */
  'aria-owns'?: string
  /**
   * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
   * A hint could be a sample value or a brief description of the expected format.
   */
  'aria-placeholder'?: string
  /**
   * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
   * @see aria-setsize.
   */
  'aria-posinset'?: Numberish
  /**
   * Indicates the current "pressed" state of toggle buttons.
   * @see aria-checked @see aria-selected.
   */
  'aria-pressed'?: Booleanish | 'mixed'
  /**
   * Indicates that the element is not editable, but is otherwise operable.
   * @see aria-disabled.
   */
  'aria-readonly'?: Booleanish
  /**
   * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
   * @see aria-atomic.
   */
  'aria-relevant'?: 'additions' | 'additions text' | 'all' | 'removals' | 'text'
  /** Indicates that user input is required on the element before a form may be submitted. */
  'aria-required'?: Booleanish
  /** Defines a human-readable, author-localized description for the role of an element. */
  'aria-roledescription'?: string
  /**
   * Defines the total number of rows in a table, grid, or treegrid.
   * @see aria-rowindex.
   */
  'aria-rowcount'?: Numberish
  /**
   * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
   * @see aria-rowcount @see aria-rowspan.
   */
  'aria-rowindex'?: Numberish
  /**
   * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
   * @see aria-rowindex @see aria-colspan.
   */
  'aria-rowspan'?: Numberish
  /**
   * Indicates the current "selected" state of various widgets.
   * @see aria-checked @see aria-pressed.
   */
  'aria-selected'?: Booleanish
  /**
   * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
   * @see aria-posinset.
   */
  'aria-setsize'?: Numberish
  /** Indicates if items in a table or grid are sorted in ascending or descending order. */
  'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other'
  /** Defines the maximum allowed value for a range widget. */
  'aria-valuemax'?: Numberish
  /** Defines the minimum allowed value for a range widget. */
  'aria-valuemin'?: Numberish
  /**
   * Defines the current value for a range widget.
   * @see aria-valuetext.
   */
  'aria-valuenow'?: Numberish
  /** Defines the human readable text alternative of aria-valuenow for a range widget. */
  'aria-valuetext'?: string
}

// Vue's style normalization supports nested arrays
export type StyleValue = string | CSSProperties | Array<StyleValue>

export interface HTMLAttributes extends AriaAttributes, EventHandlers<Events> {
  innerHTML?: string

  class?: any
  style?: StyleValue

  // Standard HTML Attributes
  accesskey?: string
  contenteditable?: Booleanish | 'inherit'
  contextmenu?: string
  dir?: string
  draggable?: Booleanish
  hidden?: Booleanish
  id?: string
  lang?: string
  placeholder?: string
  spellcheck?: Booleanish
  tabindex?: Numberish
  title?: string
  translate?: 'yes' | 'no'

  // Unknown
  radiogroup?: string // <command>, <menuitem>

  // WAI-ARIA
  role?: string

  // RDFa Attributes
  about?: string
  datatype?: string
  inlist?: any
  prefix?: string
  property?: string
  resource?: string
  typeof?: string
  vocab?: string

  // Non-standard Attributes
  autocapitalize?: string
  autocorrect?: string
  autosave?: string
  color?: string
  itemprop?: string
  itemscope?: Booleanish
  itemtype?: string
  itemid?: string
  itemref?: string
  results?: Numberish
  security?: string
  unselectable?: 'on' | 'off'

  // Living Standard
  /**
   * Hints at the type of data that might be entered by the user while editing the element or its contents
   * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute
   */
  inputmode?:
    | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search'
  /**
   * Specify that a standard HTML element should behave like a defined custom built-in element
   * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is
   */
  is?: string
}

export interface AnchorHTMLAttributes extends HTMLAttributes {
  download?: any
  href?: string
  hreflang?: string
  media?: string
  ping?: string
  rel?: string
  target?: string
  type?: string
  referrerpolicy?: string
}

export interface AreaHTMLAttributes extends HTMLAttributes {
  alt?: string
  coords?: string
  download?: any
  href?: string
  hreflang?: string
  media?: string
  rel?: string
  shape?: string
  target?: string
}

export interface AudioHTMLAttributes extends MediaHTMLAttributes {}

export interface BaseHTMLAttributes extends HTMLAttributes {
  href?: string
  target?: string
}

export interface BlockquoteHTMLAttributes extends HTMLAttributes {
  cite?: string
}

export interface ButtonHTMLAttributes extends HTMLAttributes {
  autofocus?: Booleanish
  disabled?: Booleanish
  form?: string
  formaction?: string
  formenctype?: string
  formmethod?: string
  formnovalidate?: Booleanish
  formtarget?: string
  name?: string
  type?: 'submit' | 'reset' | 'button'
  value?: string | string[] | number
}

export interface CanvasHTMLAttributes extends HTMLAttributes {
  height?: Numberish
  width?: Numberish
}

export interface ColHTMLAttributes extends HTMLAttributes {
  span?: Numberish
  width?: Numberish
}

export interface ColgroupHTMLAttributes extends HTMLAttributes {
  span?: Numberish
}

export interface DataHTMLAttributes extends HTMLAttributes {
  value?: string | string[] | number
}

export interface DetailsHTMLAttributes extends HTMLAttributes {
  open?: Booleanish
}

export interface DelHTMLAttributes extends HTMLAttributes {
  cite?: string
  datetime?: string
}

export interface DialogHTMLAttributes extends HTMLAttributes {
  open?: Booleanish
}

export interface EmbedHTMLAttributes extends HTMLAttributes {
  height?: Numberish
  src?: string
  type?: string
  width?: Numberish
}

export interface FieldsetHTMLAttributes extends HTMLAttributes {
  disabled?: Booleanish
  form?: string
  name?: string
}

export interface FormHTMLAttributes extends HTMLAttributes {
  acceptcharset?: string
  action?: string
  autocomplete?: string
  enctype?: string
  method?: string
  name?: string
  novalidate?: Booleanish
  target?: string
}

export interface HtmlHTMLAttributes extends HTMLAttributes {
  manifest?: string
}

export interface IframeHTMLAttributes extends HTMLAttributes {
  allow?: string
  allowfullscreen?: Booleanish
  allowtransparency?: Booleanish
  frameborder?: Numberish
  height?: Numberish
  marginheight?: Numberish
  marginwidth?: Numberish
  name?: string
  referrerpolicy?: string
  sandbox?: string
  scrolling?: string
  seamless?: Booleanish
  src?: string
  srcdoc?: string
  width?: Numberish
}

export interface ImgHTMLAttributes extends HTMLAttributes {
  alt?: string
  crossorigin?: 'anonymous' | 'use-credentials' | ''
  decoding?: 'async' | 'auto' | 'sync'
  height?: Numberish
  sizes?: string
  src?: string
  srcset?: string
  usemap?: string
  width?: Numberish
}

export interface InsHTMLAttributes extends HTMLAttributes {
  cite?: string
  datetime?: string
}

export interface InputHTMLAttributes extends HTMLAttributes {
  accept?: string
  alt?: string
  autocomplete?: string
  autofocus?: Booleanish
  capture?: boolean | 'user' | 'environment' // https://www.w3.org/tr/html-media-capture/#the-capture-attribute
  checked?: Booleanish | any[] | Set<any> // for IDE v-model multi-checkbox support
  crossorigin?: string
  disabled?: Booleanish
  form?: string
  formaction?: string
  formenctype?: string
  formmethod?: string
  formnovalidate?: Booleanish
  formtarget?: string
  height?: Numberish
  indeterminate?: boolean
  list?: string
  max?: Numberish
  maxlength?: Numberish
  min?: Numberish
  minlength?: Numberish
  multiple?: Booleanish
  name?: string
  pattern?: string
  placeholder?: string
  readonly?: Booleanish
  required?: Booleanish
  size?: Numberish
  src?: string
  step?: Numberish
  type?: string
  value?: any // we support :value to be bound to anything w/ v-model
  width?: Numberish
}

export interface KeygenHTMLAttributes extends HTMLAttributes {
  autofocus?: Booleanish
  challenge?: string
  disabled?: Booleanish
  form?: string
  keytype?: string
  keyparams?: string
  name?: string
}

export interface LabelHTMLAttributes extends HTMLAttributes {
  for?: string
  form?: string
}

export interface LiHTMLAttributes extends HTMLAttributes {
  value?: string | string[] | number
}

export interface LinkHTMLAttributes extends HTMLAttributes {
  as?: string
  crossorigin?: string
  href?: string
  hreflang?: string
  integrity?: string
  media?: string
  rel?: string
  sizes?: string
  type?: string
}

export interface MapHTMLAttributes extends HTMLAttributes {
  name?: string
}

export interface MenuHTMLAttributes extends HTMLAttributes {
  type?: string
}

export interface MediaHTMLAttributes extends HTMLAttributes {
  autoplay?: Booleanish
  controls?: Booleanish
  controlslist?: string
  crossorigin?: string
  loop?: Booleanish
  mediagroup?: string
  muted?: Booleanish
  playsinline?: Booleanish
  preload?: string
  src?: string
}

export interface MetaHTMLAttributes extends HTMLAttributes {
  charset?: string
  content?: string
  httpequiv?: string
  name?: string
}

export interface MeterHTMLAttributes extends HTMLAttributes {
  form?: string
  high?: Numberish
  low?: Numberish
  max?: Numberish
  min?: Numberish
  optimum?: Numberish
  value?: string | string[] | number
}

export interface QuoteHTMLAttributes extends HTMLAttributes {
  cite?: string
}

export interface ObjectHTMLAttributes extends HTMLAttributes {
  classid?: string
  data?: string
  form?: string
  height?: Numberish
  name?: string
  type?: string
  usemap?: string
  width?: Numberish
  wmode?: string
}

export interface OlHTMLAttributes extends HTMLAttributes {
  reversed?: Booleanish
  start?: Numberish
  type?: '1' | 'a' | 'A' | 'i' | 'I'
}

export interface OptgroupHTMLAttributes extends HTMLAttributes {
  disabled?: Booleanish
  label?: string
}

export interface OptionHTMLAttributes extends HTMLAttributes {
  disabled?: Booleanish
  label?: string
  selected?: Booleanish
  value?: any // we support :value to be bound to anything w/ v-model
}

export interface OutputHTMLAttributes extends HTMLAttributes {
  for?: string
  form?: string
  name?: string
}

export interface ParamHTMLAttributes extends HTMLAttributes {
  name?: string
  value?: string | string[] | number
}

export interface ProgressHTMLAttributes extends HTMLAttributes {
  max?: Numberish
  value?: string | string[] | number
}

export interface ScriptHTMLAttributes extends HTMLAttributes {
  async?: Booleanish
  charset?: string
  crossorigin?: string
  defer?: Booleanish
  integrity?: string
  nomodule?: Booleanish
  nonce?: string
  src?: string
  type?: string
}

export interface SelectHTMLAttributes extends HTMLAttributes {
  autocomplete?: string
  autofocus?: Booleanish
  disabled?: Booleanish
  form?: string
  multiple?: Booleanish
  name?: string
  required?: Booleanish
  size?: Numberish
  value?: any // we support :value to be bound to anything w/ v-model
}

export interface SourceHTMLAttributes extends HTMLAttributes {
  media?: string
  sizes?: string
  src?: string
  srcset?: string
  type?: string
}

export interface StyleHTMLAttributes extends HTMLAttributes {
  media?: string
  nonce?: string
  scoped?: Booleanish
  type?: string
}

export interface TableHTMLAttributes extends HTMLAttributes {
  cellpadding?: Numberish
  cellspacing?: Numberish
  summary?: string
}

export interface TextareaHTMLAttributes extends HTMLAttributes {
  autocomplete?: string
  autofocus?: Booleanish
  cols?: Numberish
  dirname?: string
  disabled?: Booleanish
  form?: string
  maxlength?: Numberish
  minlength?: Numberish
  name?: string
  placeholder?: string
  readonly?: boolean
  required?: Booleanish
  rows?: Numberish
  value?: string | string[] | number
  wrap?: string
}

export interface TdHTMLAttributes extends HTMLAttributes {
  align?: 'left' | 'center' | 'right' | 'justify' | 'char'
  colspan?: Numberish
  headers?: string
  rowspan?: Numberish
  scope?: string
  valign?: 'top' | 'middle' | 'bottom' | 'baseline'
}

export interface ThHTMLAttributes extends HTMLAttributes {
  align?: 'left' | 'center' | 'right' | 'justify' | 'char'
  colspan?: Numberish
  headers?: string
  rowspan?: Numberish
  scope?: string
}

export interface TimeHTMLAttributes extends HTMLAttributes {
  datetime?: string
}

export interface TrackHTMLAttributes extends HTMLAttributes {
  default?: Booleanish
  kind?: string
  label?: string
  src?: string
  srclang?: string
}

export interface VideoHTMLAttributes extends MediaHTMLAttributes {
  height?: Numberish
  playsinline?: Booleanish
  poster?: string
  width?: Numberish
  disablePictureInPicture?: Booleanish
}

export interface WebViewHTMLAttributes extends HTMLAttributes {
  allowfullscreen?: Booleanish
  allowpopups?: Booleanish
  autoFocus?: Booleanish
  autosize?: Booleanish
  blinkfeatures?: string
  disableblinkfeatures?: string
  disableguestresize?: Booleanish
  disablewebsecurity?: Booleanish
  guestinstance?: string
  httpreferrer?: string
  nodeintegration?: Booleanish
  partition?: string
  plugins?: Booleanish
  preload?: string
  src?: string
  useragent?: string
  webpreferences?: string
}

export interface SVGAttributes extends AriaAttributes, EventHandlers<Events> {
  innerHTML?: string

  /**
   * SVG Styling Attributes
   * @see https://www.w3.org/TR/SVG/styling.html#ElementSpecificStyling
   */
  class?: any
  style?: string | CSSProperties

  color?: string
  height?: Numberish
  id?: string
  lang?: string
  max?: Numberish
  media?: string
  method?: string
  min?: Numberish
  name?: string
  target?: string
  type?: string
  width?: Numberish

  // Other HTML properties supported by SVG elements in browsers
  role?: string
  tabindex?: Numberish

  // SVG Specific attributes
  'accent-height'?: Numberish
  accumulate?: 'none' | 'sum'
  additive?: 'replace' | 'sum'
  'alignment-baseline'?:
    | 'auto'
    | 'baseline'
    | 'before-edge'
    | 'text-before-edge'
    | 'middle'
    | 'central'
    | 'after-edge'
    | 'text-after-edge'
    | 'ideographic'
    | 'alphabetic'
    | 'hanging'
    | 'mathematical'
    | 'inherit'
  allowReorder?: 'no' | 'yes'
  alphabetic?: Numberish
  amplitude?: Numberish
  'arabic-form'?: 'initial' | 'medial' | 'terminal' | 'isolated'
  ascent?: Numberish
  attributeName?: string
  attributeType?: string
  autoReverse?: Numberish
  azimuth?: Numberish
  baseFrequency?: Numberish
  'baseline-shift'?: Numberish
  baseProfile?: Numberish
  bbox?: Numberish
  begin?: Numberish
  bias?: Numberish
  by?: Numberish
  calcMode?: Numberish
  'cap-height'?: Numberish
  clip?: Numberish
  'clip-path'?: string
  clipPathUnits?: Numberish
  'clip-rule'?: Numberish
  'color-interpolation'?: Numberish
  'color-interpolation-filters'?: 'auto' | 'sRGB' | 'linearRGB' | 'inherit'
  'color-profile'?: Numberish
  'color-rendering'?: Numberish
  contentScriptType?: Numberish
  contentStyleType?: Numberish
  cursor?: Numberish
  cx?: Numberish
  cy?: Numberish
  d?: string
  decelerate?: Numberish
  descent?: Numberish
  diffuseConstant?: Numberish
  direction?: Numberish
  display?: Numberish
  divisor?: Numberish
  'dominant-baseline'?: Numberish
  dur?: Numberish
  dx?: Numberish
  dy?: Numberish
  edgeMode?: Numberish
  elevation?: Numberish
  'enable-background'?: Numberish
  end?: Numberish
  exponent?: Numberish
  externalResourcesRequired?: Numberish
  fill?: string
  'fill-opacity'?: Numberish
  'fill-rule'?: 'nonzero' | 'evenodd' | 'inherit'
  filter?: string
  filterRes?: Numberish
  filterUnits?: Numberish
  'flood-color'?: Numberish
  'flood-opacity'?: Numberish
  focusable?: Numberish
  'font-family'?: string
  'font-size'?: Numberish
  'font-size-adjust'?: Numberish
  'font-stretch'?: Numberish
  'font-style'?: Numberish
  'font-variant'?: Numberish
  'font-weight'?: Numberish
  format?: Numberish
  from?: Numberish
  fx?: Numberish
  fy?: Numberish
  g1?: Numberish
  g2?: Numberish
  'glyph-name'?: Numberish
  'glyph-orientation-horizontal'?: Numberish
  'glyph-orientation-vertical'?: Numberish
  glyphRef?: Numberish
  gradientTransform?: string
  gradientUnits?: string
  hanging?: Numberish
  'horiz-adv-x'?: Numberish
  'horiz-origin-x'?: Numberish
  href?: string
  ideographic?: Numberish
  'image-rendering'?: Numberish
  in2?: Numberish
  in?: string
  intercept?: Numberish
  k1?: Numberish
  k2?: Numberish
  k3?: Numberish
  k4?: Numberish
  k?: Numberish
  kernelMatrix?: Numberish
  kernelUnitLength?: Numberish
  kerning?: Numberish
  keyPoints?: Numberish
  keySplines?: Numberish
  keyTimes?: Numberish
  lengthAdjust?: Numberish
  'letter-spacing'?: Numberish
  'lighting-color'?: Numberish
  limitingConeAngle?: Numberish
  local?: Numberish
  'marker-end'?: string
  markerHeight?: Numberish
  'marker-mid'?: string
  'marker-start'?: string
  markerUnits?: Numberish
  markerWidth?: Numberish
  mask?: string
  maskContentUnits?: Numberish
  maskUnits?: Numberish
  mathematical?: Numberish
  mode?: Numberish
  numOctaves?: Numberish
  offset?: Numberish
  opacity?: Numberish
  operator?: Numberish
  order?: Numberish
  orient?: Numberish
  orientation?: Numberish
  origin?: Numberish
  overflow?: Numberish
  'overline-position'?: Numberish
  'overline-thickness'?: Numberish
  'paint-order'?: Numberish
  'panose-1'?: Numberish
  pathLength?: Numberish
  patternContentUnits?: string
  patternTransform?: Numberish
  patternUnits?: string
  'pointer-events'?: Numberish
  points?: string
  pointsAtX?: Numberish
  pointsAtY?: Numberish
  pointsAtZ?: Numberish
  preserveAlpha?: Numberish
  preserveAspectRatio?: string
  primitiveUnits?: Numberish
  r?: Numberish
  radius?: Numberish
  refX?: Numberish
  refY?: Numberish
  renderingIntent?: Numberish
  repeatCount?: Numberish
  repeatDur?: Numberish
  requiredExtensions?: Numberish
  requiredFeatures?: Numberish
  restart?: Numberish
  result?: string
  rotate?: Numberish
  rx?: Numberish
  ry?: Numberish
  scale?: Numberish
  seed?: Numberish
  'shape-rendering'?: Numberish
  slope?: Numberish
  spacing?: Numberish
  specularConstant?: Numberish
  specularExponent?: Numberish
  speed?: Numberish
  spreadMethod?: string
  startOffset?: Numberish
  stdDeviation?: Numberish
  stemh?: Numberish
  stemv?: Numberish
  stitchTiles?: Numberish
  'stop-color'?: string
  'stop-opacity'?: Numberish
  'strikethrough-position'?: Numberish
  'strikethrough-thickness'?: Numberish
  string?: Numberish
  stroke?: string
  'stroke-dasharray'?: Numberish
  'stroke-dashoffset'?: Numberish
  'stroke-linecap'?: 'butt' | 'round' | 'square' | 'inherit'
  'stroke-linejoin'?: 'miter' | 'round' | 'bevel' | 'inherit'
  'stroke-miterlimit'?: Numberish
  'stroke-opacity'?: Numberish
  'stroke-width'?: Numberish
  surfaceScale?: Numberish
  systemLanguage?: Numberish
  tableValues?: Numberish
  targetX?: Numberish
  targetY?: Numberish
  'text-anchor'?: string
  'text-decoration'?: Numberish
  textLength?: Numberish
  'text-rendering'?: Numberish
  to?: Numberish
  transform?: string
  u1?: Numberish
  u2?: Numberish
  'underline-position'?: Numberish
  'underline-thickness'?: Numberish
  unicode?: Numberish
  'unicode-bidi'?: Numberish
  'unicode-range'?: Numberish
  'unitsPer-em'?: Numberish
  'v-alphabetic'?: Numberish
  values?: string
  'vector-effect'?: Numberish
  version?: string
  'vert-adv-y'?: Numberish
  'vert-origin-x'?: Numberish
  'vert-origin-y'?: Numberish
  'v-hanging'?: Numberish
  'v-ideographic'?: Numberish
  viewBox?: string
  viewTarget?: Numberish
  visibility?: Numberish
  'v-mathematical'?: Numberish
  widths?: Numberish
  'word-spacing'?: Numberish
  'writing-mode'?: Numberish
  x1?: Numberish
  x2?: Numberish
  x?: Numberish
  xChannelSelector?: string
  'x-height'?: Numberish
  xlinkActuate?: string
  xlinkArcrole?: string
  xlinkHref?: string
  xlinkRole?: string
  xlinkShow?: string
  xlinkTitle?: string
  xlinkType?: string
  xmlns?: string
  y1?: Numberish
  y2?: Numberish
  y?: Numberish
  yChannelSelector?: string
  z?: Numberish
  zoomAndPan?: string
}

interface IntrinsicElementAttributes {
  a: AnchorHTMLAttributes
  abbr: HTMLAttributes
  address: HTMLAttributes
  area: AreaHTMLAttributes
  article: HTMLAttributes
  aside: HTMLAttributes
  audio: AudioHTMLAttributes
  b: HTMLAttributes
  base: BaseHTMLAttributes
  bdi: HTMLAttributes
  bdo: HTMLAttributes
  blockquote: BlockquoteHTMLAttributes
  body: HTMLAttributes
  br: HTMLAttributes
  button: ButtonHTMLAttributes
  canvas: CanvasHTMLAttributes
  caption: HTMLAttributes
  cite: HTMLAttributes
  code: HTMLAttributes
  col: ColHTMLAttributes
  colgroup: ColgroupHTMLAttributes
  data: DataHTMLAttributes
  datalist: HTMLAttributes
  dd: HTMLAttributes
  del: DelHTMLAttributes
  details: DetailsHTMLAttributes
  dfn: HTMLAttributes
  dialog: DialogHTMLAttributes
  div: HTMLAttributes
  dl: HTMLAttributes
  dt: HTMLAttributes
  em: HTMLAttributes
  embed: EmbedHTMLAttributes
  fieldset: FieldsetHTMLAttributes
  figcaption: HTMLAttributes
  figure: HTMLAttributes
  footer: HTMLAttributes
  form: FormHTMLAttributes
  h1: HTMLAttributes
  h2: HTMLAttributes
  h3: HTMLAttributes
  h4: HTMLAttributes
  h5: HTMLAttributes
  h6: HTMLAttributes
  head: HTMLAttributes
  header: HTMLAttributes
  hgroup: HTMLAttributes
  hr: HTMLAttributes
  html: HtmlHTMLAttributes
  i: HTMLAttributes
  iframe: IframeHTMLAttributes
  img: ImgHTMLAttributes
  input: InputHTMLAttributes
  ins: InsHTMLAttributes
  kbd: HTMLAttributes
  keygen: KeygenHTMLAttributes
  label: LabelHTMLAttributes
  legend: HTMLAttributes
  li: LiHTMLAttributes
  link: LinkHTMLAttributes
  main: HTMLAttributes
  map: MapHTMLAttributes
  mark: HTMLAttributes
  menu: MenuHTMLAttributes
  meta: MetaHTMLAttributes
  meter: MeterHTMLAttributes
  nav: HTMLAttributes
  noindex: HTMLAttributes
  noscript: HTMLAttributes
  object: ObjectHTMLAttributes
  ol: OlHTMLAttributes
  optgroup: OptgroupHTMLAttributes
  option: OptionHTMLAttributes
  output: OutputHTMLAttributes
  p: HTMLAttributes
  param: ParamHTMLAttributes
  picture: HTMLAttributes
  pre: HTMLAttributes
  progress: ProgressHTMLAttributes
  q: QuoteHTMLAttributes
  rp: HTMLAttributes
  rt: HTMLAttributes
  ruby: HTMLAttributes
  s: HTMLAttributes
  samp: HTMLAttributes
  script: ScriptHTMLAttributes
  section: HTMLAttributes
  select: SelectHTMLAttributes
  small: HTMLAttributes
  source: SourceHTMLAttributes
  span: HTMLAttributes
  strong: HTMLAttributes
  style: StyleHTMLAttributes
  sub: HTMLAttributes
  summary: HTMLAttributes
  sup: HTMLAttributes
  table: TableHTMLAttributes
  template: HTMLAttributes
  tbody: HTMLAttributes
  td: TdHTMLAttributes
  textarea: TextareaHTMLAttributes
  tfoot: HTMLAttributes
  th: ThHTMLAttributes
  thead: HTMLAttributes
  time: TimeHTMLAttributes
  title: HTMLAttributes
  tr: HTMLAttributes
  track: TrackHTMLAttributes
  u: HTMLAttributes
  ul: HTMLAttributes
  var: HTMLAttributes
  video: VideoHTMLAttributes
  wbr: HTMLAttributes
  webview: WebViewHTMLAttributes

  // SVG
  svg: SVGAttributes

  animate: SVGAttributes
  animateMotion: SVGAttributes
  animateTransform: SVGAttributes
  circle: SVGAttributes
  clipPath: SVGAttributes
  defs: SVGAttributes
  desc: SVGAttributes
  ellipse: SVGAttributes
  feBlend: SVGAttributes
  feColorMatrix: SVGAttributes
  feComponentTransfer: SVGAttributes
  feComposite: SVGAttributes
  feConvolveMatrix: SVGAttributes
  feDiffuseLighting: SVGAttributes
  feDisplacementMap: SVGAttributes
  feDistantLight: SVGAttributes
  feDropShadow: SVGAttributes
  feFlood: SVGAttributes
  feFuncA: SVGAttributes
  feFuncB: SVGAttributes
  feFuncG: SVGAttributes
  feFuncR: SVGAttributes
  feGaussianBlur: SVGAttributes
  feImage: SVGAttributes
  feMerge: SVGAttributes
  feMergeNode: SVGAttributes
  feMorphology: SVGAttributes
  feOffset: SVGAttributes
  fePointLight: SVGAttributes
  feSpecularLighting: SVGAttributes
  feSpotLight: SVGAttributes
  feTile: SVGAttributes
  feTurbulence: SVGAttributes
  filter: SVGAttributes
  foreignObject: SVGAttributes
  g: SVGAttributes
  image: SVGAttributes
  line: SVGAttributes
  linearGradient: SVGAttributes
  marker: SVGAttributes
  mask: SVGAttributes
  metadata: SVGAttributes
  mpath: SVGAttributes
  path: SVGAttributes
  pattern: SVGAttributes
  polygon: SVGAttributes
  polyline: SVGAttributes
  radialGradient: SVGAttributes
  rect: SVGAttributes
  stop: SVGAttributes
  switch: SVGAttributes
  symbol: SVGAttributes
  text: SVGAttributes
  textPath: SVGAttributes
  tspan: SVGAttributes
  use: SVGAttributes
  view: SVGAttributes
}

export interface Events {
  // clipboard events
  onCopy: ClipboardEvent
  onCut: ClipboardEvent
  onPaste: ClipboardEvent

  // composition events
  onCompositionend: CompositionEvent
  onCompositionstart: CompositionEvent
  onCompositionupdate: CompositionEvent

  // drag drop events
  onDrag: DragEvent
  onDragend: DragEvent
  onDragenter: DragEvent
  onDragexit: DragEvent
  onDragleave: DragEvent
  onDragover: DragEvent
  onDragstart: DragEvent
  onDrop: DragEvent

  // focus events
  onFocus: FocusEvent
  onFocusin: FocusEvent
  onFocusout: FocusEvent
  onBlur: FocusEvent

  // form events
  onChange: Event
  onBeforeinput: Event
  onInput: Event
  onReset: Event
  onSubmit: Event
  onInvalid: Event

  // image events
  onLoad: Event
  onError: Event

  // keyboard events
  onKeydown: KeyboardEvent
  onKeypress: KeyboardEvent
  onKeyup: KeyboardEvent

  // mouse events
  onAuxclick: MouseEvent
  onClick: MouseEvent
  onContextmenu: MouseEvent
  onDblclick: MouseEvent
  onMousedown: MouseEvent
  onMouseenter: MouseEvent
  onMouseleave: MouseEvent
  onMousemove: MouseEvent
  onMouseout: MouseEvent
  onMouseover: MouseEvent
  onMouseup: MouseEvent

  // media events
  onAbort: Event
  onCanplay: Event
  onCanplaythrough: Event
  onDurationchange: Event
  onEmptied: Event
  onEncrypted: Event
  onEnded: Event
  onLoadeddata: Event
  onLoadedmetadata: Event
  onLoadstart: Event
  onPause: Event
  onPlay: Event
  onPlaying: Event
  onProgress: Event
  onRatechange: Event
  onSeeked: Event
  onSeeking: Event
  onStalled: Event
  onSuspend: Event
  onTimeupdate: Event
  onVolumechange: Event
  onWaiting: Event

  // selection events
  onSelect: Event

  // UI events
  onScroll: UIEvent

  // touch events
  onTouchcancel: TouchEvent
  onTouchend: TouchEvent
  onTouchmove: TouchEvent
  onTouchstart: TouchEvent

  // pointer events
  onPointerdown: PointerEvent
  onPointermove: PointerEvent
  onPointerup: PointerEvent
  onPointercancel: PointerEvent
  onPointerenter: PointerEvent
  onPointerleave: PointerEvent
  onPointerover: PointerEvent
  onPointerout: PointerEvent

  // wheel events
  onWheel: WheelEvent

  // animation events
  onAnimationstart: AnimationEvent
  onAnimationend: AnimationEvent
  onAnimationiteration: AnimationEvent

  // transition events
  onTransitionend: TransitionEvent
  onTransitionstart: TransitionEvent
}

type EventHandlers<E> = {
  [K in keyof E]?: E[K] extends Function ? E[K] : (payload: E[K]) => void
}

// use namespace import to avoid collision with generated types which use
// named imports.
import * as RuntimeCore from '@vue/runtime-core'

type ReservedProps = {
  key?: string | number | symbol
  ref?: RuntimeCore.VNodeRef
  ref_for?: boolean
  ref_key?: string
}

type ElementAttrs<T> = T & ReservedProps

type NativeElements = {
  [K in keyof IntrinsicElementAttributes]: ElementAttrs<
    IntrinsicElementAttributes[K]
  >
}

declare global {
  namespace JSX {
    interface Element extends VNode {}
    interface ElementClass {
      $props: {}
    }
    interface ElementAttributesProperty {
      $props: {}
    }
    interface IntrinsicElements extends NativeElements {
      // allow arbitrary elements
      // @ts-ignore suppress ts:2374 = Duplicate string index signature.
      [name: string]: any
    }
    interface IntrinsicAttributes extends ReservedProps {}
  }
}

// suppress ts:2669
export {}

// Note: this file is auto concatenated to the end of the bundled d.ts during
// build.

declare module '@vue/reactivity' {
  export interface RefUnwrapBailTypes {
    runtimeDOMBailTypes: Node | Window
  }
}
`;let g=!0,f;async function be(){const e=await a(()=>import("./chunks/editor.main.d83c2780.c73aa2d6.js"),["assets/chunks/editor.main.d83c2780.c73aa2d6.js","assets/chunks/framework.493c336a.js"]).then(n=>n.e);return g&&typeof f=="function"&&(g=!1,f(e)),e.languages.typescript.typescriptDefaults.setCompilerOptions({target:e.languages.typescript.ScriptTarget.Latest,allowNonTsExtensions:!0,moduleResolution:e.languages.typescript.ModuleResolutionKind.NodeJs,module:e.languages.typescript.ModuleKind.CommonJS,noEmit:!0,esModuleInterop:!0,jsx:e.languages.typescript.JsxEmit.Preserve,allowJs:!0}),e.languages.typescript.typescriptDefaults.setDiagnosticsOptions({noSemanticValidation:!1,noSyntaxValidation:!1}),e.languages.typescript.typescriptDefaults.addExtraLib(X,"jsx:type"),e.languages.typescript.typescriptDefaults.addExtraLib(`
    declare module 'vue' { ${K} }
  `,"ts:vue"),await Promise.all([(async()=>{const[{default:n},{default:t},{default:r}]=await Promise.all([a(()=>import("./chunks/editor.worker.9c35f395.dcede9b5.js"),[]),a(()=>import("./chunks/html.worker.b57725c2.47285f38.js"),[]),a(()=>import("./chunks/ts.worker.3260b66b.5dceb272.js"),[])]);window.MonacoEnvironment={getWorker(s,i){return i==="html"||i==="handlebars"||i==="razor"?new t:i==="typescript"||i==="javascript"?new r:new n}}})()]),e}function Z(e){f=e||null}const J=Symbol(),c={};function x(e,n){c[e]=n}function _e(e){const n=window;return n.importMaps||(n.importMaps=c),e=Q(e),e=e.replace(/import(.*?)from\s+['"](.*?)['"]/g,(t,r,s)=>{const i=s,m=c[i];return m?(c[`${i}`]||(c[`${i}`]=m),`const ${r} = importMaps['${s}']`):t}),e}function Q(e){return e.replace(/import(.*?)from\s+['"]vue['"]/g,(n,t)=>(t=t.replace(/\sas\s/g,":"),`const ${t} = _vue`)).replace(/import 'vue'/g,"")}const Me=()=>Math.random().toString(36).slice(2,12),ee=e=>typeof e=="object"&&e!==null,ne=e=>function(n,t,r,...s){return Array.isArray(r)&&(r=r.map(i=>Array.isArray(i)?i:ee(i)&&!i.__v_isVNode?e.createTextVNode(String(i)):i)),e.createVNode(n,t,r,...s)},te=function(e,n){n=Object.assign({ms:300,defaultDirection:"row"},n);const t=C(()=>a(()=>import("./chunks/Demo.10a78ca5.159750ed.js"),["assets/chunks/Demo.10a78ca5.159750ed.js","assets/chunks/framework.493c336a.js","assets/chunks/theme.c36a47ad.js"]));e.component("Demo",t),e.config.errorHandler=function(r){console.error(r)},H(Object.assign({},h,{createVNode:ne(h)})),$(e),e.provide(J,n),Z(n.onMonacoCreated)};const re=`import * as three from 'three';
import { Color } from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

/**\r
 * 加载MxDraw库的核心代码 才能使用Mx的其他模块\r
 * @returns Promise<{@link MxFun}>\r
 * @example\r
 * \`\`\`\r
 * Mx.loadCoreCode().then(()=> console.log("加载完成", Mx.MxFun))\r
 * \`\`\`\r
 */\r
declare function loadCoreCode(): Promise<void>;

type EventType = string | symbol;\r
type PubSubEvent = Record<EventType, (...ages: any) => any>;\r
declare class PubSub<Events extends PubSubEvent = PubSubEvent> {\r
    events: {\r
        [x: EventType]: Events[keyof Events][];\r
    };\r
    constructor();\r
    /**\r
     * 订阅\r
     * @param event 事件名称\r
     * @param callback 事件回调\r
     */\r
    on<Key extends keyof Events>(event: Key, callback: Events[keyof Events]): void;\r
    /**\r
     * 发布\r
     * @param event 事件名称\r
     * @param data 载荷\r
     */\r
    emit<Key extends keyof Events>(event: Key | number, ...data: Parameters<Events[Key]>): void;\r
    /**\r
     * 销毁事件\r
     * @param event 事件名称\r
     * @param callback 事件方法\r
     */\r
    off<Key extends keyof Events>(event: Key, callback?: Events[keyof Events]): void;\r
}

type RendererEventsType = {\r
    "click": () => void;\r
    "hover": () => void;\r
    "mousemove": () => void;\r
    "mouseout": () => void;\r
    "mouseover": () => void;\r
    "mousedown": () => void;\r
    "mouseup": () => void;\r
};\r
/**\r
 * Node 节点\r
 * @type E 事件类型 { "name": { name: string, id:number } } key-val key对应事件名称 val 对应回调值\r
 * @example\r
 * \`\`\`ts\r
 * class ObjClass extends Node<{"added": { node: Node, id: number }}> {}\r
 * \`\`\`\r
 * */\r
declare class Node<E extends PubSubEvent = PubSubEvent, T extends Node<E, Node<E, any>> = Node<E, Node<E, any>>> extends PubSub<E> {\r
    /** 它的父节点 */\r
    parent: (this | T | null);\r
    /** 它的子节点集合 */\r
    children: (this | T)[];\r
    /** 添加子节点 */\r
    add(...ages: (this | T)[]): this;\r
    /** 移除子节点 **/\r
    remove(...ages: (this | T)[]): this;\r
    /** 从父节点中移除 */\r
    removeFromParent(): this;\r
    /** 清除 children */\r
    clear(): this;\r
    /** 根据属性名称找到对应的Node节点\r
     * @param name 属性名称\r
     * @param value 属性值\r
     * @example\r
     * \`\`\`ts\r
     * new Node().getNodeByProperty("id", "23548")\r
     * \`\`\`\r
     *   */\r
    getNodeByProperty<V = any>(name: string, value: V): (this | T) | undefined;\r
    /** 根据属性名称找到对应的Node节点\r
    * @param name 属性名称\r
    * @param value 属性值\r
    * @example\r
    * \`\`\`ts\r
    * new Node().getNodeByProperty("id", "23548")\r
    * \`\`\`\r
    *   */\r
    getNodesByProperty<V = any>(name: string, value: V): (T | this)[];\r
    /** 遍历它的所有子节点包括孙子节点，直到它包含的节点全部遍历完成并都执行传入的方法\r
     * @param callback 回调函数\r
     *  */\r
    traverse(callback: (node: this) => void): void;\r
    /***\r
     * 让它的父节点依次冒泡执行传入的方法的方法\r
     * @param callback 回调函数，第一个参数是父节点, callback的返回值为false 将停止继续传递\r
     * */\r
    traverseParent<V extends (Node<any, any>) = this>(callback: (node: V) => boolean | void): void;\r
    /***\r
     * 发布\r
     * @param event — 事件名称\r
     * @param data — 载荷\r
    **/\r
    emit<Key extends keyof E>(event: number | Key, ...data: Parameters<E[Key]>): void;\r
}\r
declare class RenderOrderNode<E extends PubSubEvent = PubSubEvent, T extends Node<any, any> = Node<any, any>> extends Node<E & RendererEventsType, T> {\r
    constructor();\r
    /**\r
   * 显示顺序\r
   * */\r
    renderOrder: number;\r
    /**\r
     * 设置显示顺序 (通过显示顺序控制图层)\r
     * @param renderOrder 显示顺序\r
     */\r
    setRenderOrder(renderOrder: number): void;\r
    /**\r
     * 得到显示顺序\r
     * @returns number\r
     */\r
    getRenderOrder(): number;\r
    /**\r
     * top 同层级下最上层\r
     * **/\r
    top(): void;\r
    /**\r
     * bottom 同层级下最上层\r
     * */\r
    bottom(): void;\r
    /** 恢复默认显示顺序 */\r
    restoreDefaultRenderOrder(): void;\r
}

/** @module McGiWorldDrawType*/\r
/**\r
 * 动态绘制类型\r
 * @example \`\`\`typescript\r
\r
 * \`\`\`\r
 */\r
declare enum McGiWorldDrawType {\r
    /** 正常绘制 */\r
    kWorldDraw = 1,\r
    /** 动态拖动的绘制 */\r
    kDynDragDraw = 2,\r
    /** 对选择高亮的绘制 */\r
    kSelectDraw = 3\r
}

/**\r
 * 动态绘制类型\r
 * @example \`\`\`typescript\r
\r
 * \`\`\`\r
 */\r
declare enum MxCloneType {\r
    /** 正常Clone */\r
    kClone = 1,\r
    /** 动态拖动Clone */\r
    kDragClone = 2,\r
    /** 数据归档 */\r
    kMxFileClone = 3,\r
    /** 保存数据到DWG文件 */\r
    kSaveDwgClone = 4\r
}\r
/**\r
 * 命令标记\r
 * @example \`\`\`typescript\r
\r
 * \`\`\`\r
 */\r
declare enum MxCommandFlag {\r
    MCRX_CMD_MODAL = 0,\r
    MCRX_CMD_TRANSPARENT = 1,\r
    MCRX_CMD_NO_UNDO_MARKER = 2,\r
    MCRX_CMD_NOPRV = 4\r
}\r
/**\r
 * 控件对象缺省的绘制顺序\r
 * @example \`\`\`typescript\r
\r
 * \`\`\`\r
 */\r
declare enum MxDefaultRenderOrder {\r
    kCADMeshRenderOrder = 10,\r
    kCADCurveRenderOrder = 20,\r
    kMxEntityRenderOrder = 30,\r
    kGripRenderOrder = 110,\r
    kDynJigRenderOrder = 120\r
}\r
/**\r
 * 交互操作，需要的输入的触摸类型.\r
 * @example \`\`\`typescript\r
 * \`\`\`\r
 */\r
declare enum InputToucheType {\r
    kGetBegan = 1,\r
    kGetEnd = 2\r
}\r
type MxColorType = number | string | THREE.Color;\r
type UnstableColor = MxColorType | undefined;

type MxType_MxCloneType = MxCloneType;
declare const MxType_MxCloneType: typeof MxCloneType;
type MxType_MxCommandFlag = MxCommandFlag;
declare const MxType_MxCommandFlag: typeof MxCommandFlag;
type MxType_MxDefaultRenderOrder = MxDefaultRenderOrder;
declare const MxType_MxDefaultRenderOrder: typeof MxDefaultRenderOrder;
type MxType_InputToucheType = InputToucheType;
declare const MxType_InputToucheType: typeof InputToucheType;
type MxType_MxColorType = MxColorType;
type MxType_UnstableColor = UnstableColor;
declare namespace MxType {
  export {
    MxType_MxCloneType as MxCloneType,
    MxType_MxCommandFlag as MxCommandFlag,
    MxType_MxDefaultRenderOrder as MxDefaultRenderOrder,
    MxType_InputToucheType as InputToucheType,
    MxType_MxColorType as MxColorType,
    MxType_UnstableColor as UnstableColor,
  };
}

/** @module McGiWorldDraw*/\r
\r
/**\r
 * McGiWorldDraw 用于构建一个动态绘制回调对象的规范接口\r
 * @abstract 是  {@link MxDbEntity.worldDraw }必须实现的抽象回调方法中的回调对象 通过回调对象完成一些动态绘制任务\r
 * @example \`\`\`typescript\r
 *\r
 * \`\`\`\r
 */\r
interface McGiWorldDraw {\r
    /**\r
     * 得到WorldDraw的绘制类型.\r
     * @returns McGiWorldDrawType\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    getType(): McGiWorldDrawType;\r
    /**\r
     * 绘制一个Three.js对象\r
     * @param ent Three.js对象\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    drawEntity(ent: THREE.Object3D): void;\r
    /**\r
     * 返回动态绘制的控件对像\r
     * @returns MxDrawObject\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    getMxObject(): MxDrawObject;\r
    /**\r
     * 设置绘制颜色\r
     * @param iColor 颜色值\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setColor(iColor: UnstableColor): void;\r
    /**\r
     * 返回绘制颜色\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    getColor(): number;\r
    /**\r
     * 设置绘制的线宽\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setLineWidth(iLineWidth: number): void;\r
    /**\r
     * 返回绘制的线宽\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    getLineWidth(): number;\r
    /**\r
     * 绘制直线\r
     * @param pt1 第一个点 THREE.Vector3\r
     * @param pt2 第二个点\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    drawLine(pt1: THREE.Vector3 | number, pt2: THREE.Vector3 | number, x2?: number, y2?: number): void;\r
    /**\r
     * 绘制连续的直线\r
     * @param points 点数组\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    drawLines(points: THREE.Vector3[] | THREE.Vector2[]): void;\r
    /**\r
     * 根据几何数据绘制直线\r
     * @param points 点数组\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    drawGeometryLines(geometry: THREE.Geometry): void;\r
    /**\r
     * 绘制圆\r
     * @param cen 圆的中心点 THREE.Vector3\r
     * @param dRadius 圆的半径\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    drawCircle(cen: THREE.Vector3, dRadius: number): void;\r
    /**\r
     * 绘文本\r
     * @param sText 文本信息\r
     * @param iSize 文字大小\r
     * @param dAngle  角度\r
     * @param pt 位置\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    drawText(sText: string, iSize: number, dAngle: number, pt: THREE.Vector3, width?: number, callGetFontStyle?: (iFontSize: number) => string): THREE.Sprite | null;\r
    /**\r
     * 设置DrawOrder,默认值为100.\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setRenderOrder(iRenderOrder: number): void;\r
    /**\r
     * 得到DrawOrder\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    getRenderOrder(): number;\r
    /**\r
     * 设置宽度单位是屏幕像素，默认是屏幕像素，设置false,单位是Threejs坐标。\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setLineWidthByPixels(isPixels: boolean): void;\r
    /**\r
     * 得到宽度单位\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    getLineWidthIsPixels(): boolean;\r
    /**\r
     * 设置虚线显示数据。\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setDash(dDashArray: number, dDashRatio: number): void;\r
    /**\r
     * 得到虚线显示数据。\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    getDash(): any;\r
    /**\r
     * 设置虚线显示\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setDashLineDisplay(isDashLine: boolean): void;\r
    /**\r
     *是否虚线显示\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    isDashLineDisplay(): boolean;\r
    /**\r
     *绘制选择线。\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    drawSelectLine(pt1: THREE.Vector3 | number, pt2: THREE.Vector3 | number, x2?: number, y2?: number): void;\r
    /**\r
     * 设置变换矩阵\r
     * @param\r
     */\r
    setMatrix(matrix: THREE.Matrix4 | null): void;\r
    /**\r
     * 返回变换矩阵\r
     * @param\r
     */\r
    getMatrix(): THREE.Matrix4 | null;\r
    /**\r
     *设置透明度\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setOpacity(opacity: number): void;\r
    /**\r
     *返回透明度\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    getOpacity(): number;\r
    /**\r
     *绘制纯色填充\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    drawSolid(points: THREE.Vector3[]): void;\r
    /**\r
     *把一个对象的绘图属性设置到当前绘图上下文\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setupForEntity(ent: MxDbEntity): void;\r
    /**\r
     *设置drawEntity函数，绘制的three.js对象，附加一个扩展数据，方便在后续选择对象，得到该扩展数据.、\r
     *只会对一次的drawEntity调用有效.\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     *\r
     */\r
    setXData(xData: any): void;\r
}

type MxDbEntityEventsType = {\r
    onStartGripEidt: () => void;\r
    onEndGripEidt: () => void;\r
};\r
/**\r
 * MxDbEntity 用于构建一个自定义对象的抽象类(该类无法实例化 请通过继承的方式对其抽象方法进行实现)\r
 * @description MxDbEntity 属于 abstract class(抽象类) 主要用途是通过继承这个类实现一个用于动态绘制的图形对象\r
 * 继承实现这个类必须实现的抽象方法：（方法名称前有'Abstract'标签就是必须实现的方法）\r
 * @example \`\`\`typescript\r
 * import THREE from "three"\r
 * import { McGiWorldDraw, MxDbEntity } from "mxdraw"\r
 * class MxLineEntity extends MxDbEntity {\r
 *    constructor() {\r
 *       super(); // 在派生类的构造函数中必须调用 super()\r
 *    }\r
 *    private pt1: THREE.Vector3 = new THREE.Vector3();\r
 *    private pt2: THREE.Vector3 = new THREE.Vector3();\r
 *    worldDraw(pWorldDraw: McGiWorldDraw) {\r
 *        pWorldDraw.drawLine(this.pt1,this.pt2);\r
 *    }\r
 *    ...\r
 * }\r
 * \`\`\`\r
 */\r
type EntityEvent = MxDbEntityEventsType;\r
declare abstract class MxDbEntity extends RenderOrderNode<EntityEvent, MxDbEntity> {\r
    constructor();\r
    /** 该类注册的cmd命令名称 */\r
    static cmd: string;\r
    /** 该类注册的cmd命令绘制函数 */\r
    static draw: Function;\r
    /** 该类是否已注册 */\r
    static isRegister: boolean;\r
    /** 注册该类的cmd命令和初始化 (引入该类时自动注册 当该类的isRegister为ture时表示已经注册) */\r
    static register(): void;\r
    /** 使用该类的cmd命令 执行默认的绘制功能 */\r
    static use<T extends MxDbEntity = MxDbEntity>(callback?: (obj: T) => any, data?: any): Promise<T>;\r
    /**\r
     * 颜色值\r
     * */\r
    color: UnstableColor;\r
    /**\r
     * 设置透明度 0 ~ 1,1表示完全不透明，0表示全透明.\r
     * */\r
    opacity: number;\r
    /**\r
     * 该对象是否可见\r
     * */\r
    visible: boolean;\r
    /**\r
     * 用户自定义数据.\r
     * */\r
    userData: {\r
        [key: string]: any;\r
    };\r
    protected sGuid: string;\r
    dLineWidth: number;\r
    lineWidthByPixels: boolean;\r
    dDashArray: number;\r
    dDashRatio: number;\r
    layer: string;\r
    protected use_smallcoord_display: boolean;\r
    abstract getTypeName(): string;\r
    initGuid(guid: string): void;\r
    toSmallcoord2(mxobj: MxDrawObject, x: number, y: number, z?: number): THREE.Vector3;\r
    toSmallcoord(mxobj: MxDrawObject, pt: THREE.Vector3): THREE.Vector3;\r
    isUseSmallcoordDisplay(): boolean;\r
    setUseSmallcoordDisplay(use_smallcoord_display: boolean): void;\r
    /**\r
     * 自定义对象的绘制函数。在方法中定义如何绘制图形\r
     * @param  pWorldDraw 绘制对象{@link McGiWorldDraw }\r
     * @returns void\r
     */\r
    abstract worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /**\r
     * 返回自定义对象的夹点.\r
     * @param\r
     * @returns Array<THREE.Vector3>\r
     */\r
    abstract getGripPoints(): Array<THREE.Vector3>;\r
    /**\r
     * 移动自定义对象的夹点.\r
     * @param\r
     * @returns boolean\r
     */\r
    abstract moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    /**\r
     * 自定义对象数据输入，辅助函数.\r
     * @param obj 数据对象\r
     * @param aryProp 属性名称列表\r
     * @param hooks.getVal 交互数据输入钩子函数 return null | undefined 默认深拷贝 ; return Value 返回数据\r
     * @param hooks.getCacheVal 归档数据构子函数 return null | undefined 默认深拷贝 ; return Value 返回数据\r
     * @returns boolean\r
     * @example\r
     * \`\`\` typescript\r
     *  class MxLine extends MxDbEntity {\r
     *    dwgIn(obj) {\r
     *        // 必须调用 同步自定义数据对象输入\r
     *       this.dwgInHelp(obj,["xxx"])\r
     *    }\r
     *  }\r
     * \`\`\`\r
     */\r
    protected dwgInHelp<T extends (string | {\r
        key: string;\r
        default: any;\r
    })[]>(obj: any, aryProp: T, hooks?: {\r
        getVal?: (v: any) => any;\r
        getCacheVal?: (v: any) => any;\r
    }): boolean;\r
    /**\r
     * 自定义对象数据输出 辅助函数.\r
     * @param\r
     * @returns object\r
     * @example\r
     * \`\`\` typescript\r
     *  class MxLine extends MxDbEntity {\r
     *    dwgOut(obj) {\r
     *        // 必须调用 同步自定义数据对象输出\r
     *       this.dwgOutHelp(obj,["xxx"])\r
     *    }\r
     *  }\r
     * \`\`\`\r
     */\r
    protected dwgOutHelp(obj: any, aryProp: (string | {\r
        key: string;\r
        default: any;\r
    })[]): any;\r
    /**\r
     * 新创建一个自定义对象 (默认调用该对象的构造函数来创建新的对象)\r
     * @param { T } options\r
     * @returns MxDbEntity\r
     */\r
    create(options?: {}): any;\r
    /**\r
     * 自定义对象数据输入，必须要实现该函数\r
     * @param\r
     * @returns boolean\r
     * @example\r
     * \`\`\` typescript\r
     *  class MxLine extends MxDbEntity {\r
     *    dwgIn(obj) {\r
     *        // 必须调用 同步自定义数据对象输入\r
     *       this.onDwgIn(obj)\r
     *    }\r
     *  }\r
     * \`\`\`\r
     */\r
    abstract dwgIn(obj: {\r
        type: MxType.MxCloneType;\r
        [x: string]: any;\r
    }): boolean;\r
    /**\r
     * 自定义对象数据输出，必须要实现该函数\r
     * @param\r
     * @returns object\r
     * @example\r
     * \`\`\` typescript\r
     *  class MxLine extends MxDbEntity {\r
     *    dwgOut(obj) {\r
     *        // 必须调用 同步自定义数据对象输出\r
     *       this.onDwgOut(obj)\r
     *    }\r
     *  }\r
     * \`\`\`\r
     */\r
    abstract dwgOut(obj: {\r
        type: MxType.MxCloneType;\r
        [x: string]: any;\r
    }): object;\r
    /**\r
     * 自定义实体的矩阵 坐标变换 (需要重写该方法实现如果通过矩阵对自定义实体进行操作 默认不会进行任何操作)\r
     * @param _mat THREE.Matrix4 变化矩阵\r
     * @returns void\r
     */\r
    transformBy(_mat: THREE.Matrix4): void;\r
    /**\r
     * 缩放对像\r
     * @returns void\r
     */\r
    transformScale(ptBase: THREE.Vector3, scale: number): void;\r
    /**\r
     * 旋转对象\r
     * @returns void\r
     */\r
    transformRotate(ptBase: THREE.Vector3, angle: number): void;\r
    /**\r
     * 移动对象\r
     * @returns void\r
     */\r
    transformMove(ptMove: THREE.Vector3): void;\r
    /**\r
     * 返回对象最小外包.\r
     * @param\r
     * @returns void\r
     */\r
    getGeomExtents(): THREE.Box3 | null;\r
    /**\r
     * 对一个点到这个对象的最近点 。\r
     * iOperationType == 0正常操作求值最近点.\r
     * iOperationType == 1点选择操作求值最近点.\r
     * @param\r
     * @returns void\r
     */\r
    getClosestPointTo(pt: THREE.Vector3, iOperationType?: number): THREE.Vector3 | null;\r
    private getImp;\r
    /**\r
     * 更新显示\r
     * @param 为true 重绘时立即更新显示,默认值false\r
     * @returns boolean\r
  \r
     */\r
    setNeedUpdateDisplay(isImmediate?: boolean): boolean;\r
    /**\r
     * 返回对象所在的控件对象。\r
     * @returns {@link MxDrawObject}\r
     */\r
    getMxObject(): MxDrawObject | null;\r
    /**\r
     * 视区显示比较发生成变化，继承类可以向应该事件，更新显示大小。\r
     * @returns boolean\r
     */\r
    protected onViewChange(): boolean;\r
    /**\r
     * 得到对象的id.\r
     * @returns number\r
     */\r
    objectId(): number;\r
    /**\r
     * 删除对象\r
     * @returns boolean\r
     */\r
    erase(): boolean;\r
    /**\r
     * 设置图层\r
     * @returns boolean\r
     */\r
    setLayer(layer: string): void;\r
    /**\r
     * 得到图层\r
     * @returns boolean\r
     */\r
    getLayer(): string;\r
    /**\r
     * 设置颜色\r
     * @param color 颜色值\r
     * @returns boolean\r
     */\r
    setColor(color: MxColorType): this;\r
    /**\r
     * 得到颜色\r
     * @returns boolean\r
     */\r
    getColor(): MxColorType;\r
    /**\r
     * 复制克隆对象。\r
     * @param type {@link MxType.MxCloneType} 传入参数区分是正常拷贝还是动态拷贝\r
     * @returns MxDbEntity\r
     */\r
    clone(type?: number): any;\r
    /**\r
     * 自定义对象内部数据输入同步（重写实现dwgIn抽象方法时 必须在实现中调用 this.onDwgIn(obj)）\r
     * @param obj dwgIn抽象方法的回调数据\r
     */\r
    protected onDwgIn(obj: any): void;\r
    /**\r
     * 自定义对象内部数据输出同步（重写实现dwgIn抽象方法 必须在实现中调用 this.onDwgIn(obj)\r
     * @param obj dwgOut抽象方法的回调数据\r
     */\r
    protected onDwgOut(obj: any): void;\r
    /**\r
     * 初始自定义对象的类型信息.(如果需要实现该图形对象的保存数据和恢复数据的功能, 需要在项目中初始化一次该图形对象的类)\r
     * @returns\r
     */\r
    rxInit(): void;\r
    /**\r
     * 设置显示顺序 (通过显示顺序控制图层)\r
     * @param renderOrder 显示顺序\r
     */\r
    setRenderOrder(renderOrder: number): void;\r
    /**\r
     * 得到显示顺序\r
     * @returns number\r
     */\r
    getRenderOrder(): number;\r
    /**\r
     * 设置线宽是否随像素\r
     * @returns number\r
     */\r
    setLineWidthByPixels(isPixels: boolean): this;\r
    /**\r
     * 线宽是否随像素\r
     * @returns number\r
     */\r
    getLineWidthByPixels(): boolean;\r
    /**\r
     * 设置线宽\r
     * @returns number\r
     */\r
    setLineWidth(dLineWidth: number): this;\r
    /**\r
     * 得到线宽\r
     * @returns number\r
     */\r
    getLineWidth(): number;\r
    /**\r
     * 返回曲线长度\r
     * @returns number\r
     */\r
    getGetLength(): number;\r
    /**\r
     * 设置虚线 +实线的长度.\r
     * dDashRatio确定虚线，与实线的比率.\r
     * @returns number\r
     */\r
    setDashLen(dashLen: number): this;\r
    /**\r
     * 设置虚线，与实线的比率\r
     * @returns number\r
     */\r
    setDashRatio(dDashRatio: number): this;\r
    /**\r
     * 设置实线虚线总段数 = 1 / dashArray\r
     * @returns number\r
     */\r
    setDashArray(dDashArray: number): this;\r
    /**\r
     * 设置虚线数据\r
     * @returns number\r
     */\r
    setDash(dDashArray: number, dDashRatio: number): this;\r
    /**\r
     * 得到虚线数据\r
     * @returns number\r
     */\r
    getDash(): any;\r
    /**\r
     * 设置虚线显示。并初始化一个默认值。\r
     * @returns number\r
     */\r
    setDashLineDisplay(isDashLine: boolean): this;\r
    /**\r
     * 是否虚线显示\r
     * @returns number\r
     */\r
    isDashLineDisplay(): boolean;\r
    /**\r
     * 返回唯一标识guid\r
     * @returns string\r
     */\r
    guid(): string;\r
    /**\r
     * 修改唯一标识guid\r
     * @returns string\r
     */\r
    setGuid(val: string): string;\r
    /**\r
     * 添加一个事件处理\r
     * @returns void\r
     */\r
    addEvent: <Key extends keyof MxDbEntityEventsType | keyof RendererEventsType>(event: Key, callback: (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void)) => void;\r
    /**\r
     * 删除一个事件处理\r
     * @returns void\r
     */\r
    removeEvent: <Key extends keyof MxDbEntityEventsType | keyof RendererEventsType>(event: Key, callback?: (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | undefined) => void;\r
    private callEvent;\r
    /**\r
     * 对象结束开始编辑\r
     * @returns string\r
     */\r
    onEndGripEidt(): void;\r
    /**\r
     * 对象开始开始编辑\r
     * @returns string\r
     */\r
    onStartGripEidt(): any;\r
    /**\r
     * 把一个对象变成一个json字体串.\r
     * @returns void\r
     */\r
    toJsonString(type?: MxType.MxCloneType): string;\r
    /**\r
     * 从一个josn字符串加载数据.\r
     * @returns void\r
     */\r
    fromJsonString(str: string): boolean;\r
}

/** @module MxDbGroup */\r
/**\r
 * MxDbGroup 组对象对象.\r
 *\r
 */\r
interface MxDbGroup {\r
    name(): string;\r
    append(id: number): void;\r
    clear(): void;\r
    getAll(): number[];\r
    has(id: number): boolean;\r
    delete(id: number): boolean;\r
}

/** @module MxDbLayerTableRecord */\r
/**\r
 * MxDbDatabase 当前数据库对象.\r
 *\r
 */\r
interface MxDbLayerTableRecord {\r
    getName(): string;\r
    setVisible(visible: boolean): void;\r
    getVisible(): boolean;\r
}

/** @module MxDbDatabase */\r
\r
/**\r
 * MxDbDatabase 当前数据库对象.\r
 *\r
 */\r
declare class MxDbDatabase {\r
    private _mxDatabase;\r
    constructor(mxDatabase: any);\r
    /**\r
     * 添加图层.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    addLayer(layer: string): MxDbLayerTableRecord;\r
    /**\r
     * 显示或隐藏图层\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    showLayer(layer: string, isVisible: boolean): void;\r
    /**\r
     * 设置当前图层\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    setCurrentLayer(layer: string): MxDbLayerTableRecord;\r
    /**\r
     * 得到图层对象.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    getLayer(layer: string): MxDbLayerTableRecord;\r
    /**\r
     * 添加对象到当前数据库.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    addEntity(ent: MxDbEntity): number;\r
    /**\r
     * 根据组名，得到组对象。\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    getGroup(sName: string): MxDbGroup;\r
    /**\r
     * 添加一个组，如果组已经存在，直接返回该组。\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    addGroup(sName: string): MxDbGroup;\r
    /**\r
     * 得到一个实体所在的所有组。\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    getEntityInGroup(id: number): MxDbGroup[];\r
    /**\r
     * 删除一个组.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    deleteGroup(sName: string): MxDbGroup;\r
}

declare class MxVueComandLine {\r
    [x: string]: any;\r
    msCmdText: string;\r
    msCmdDisplay: string;\r
    msCmdTip: string;\r
    mUpDisplayFun: ((data: {\r
        msCmdTip: string;\r
        msCmdDisplay: string;\r
        msCmdText: string;\r
    }) => void) | undefined;\r
    mxFunObject: undefined;\r
    mountUpDisplayFun: (fun: ((data: {\r
        msCmdTip: string;\r
        msCmdDisplay: string;\r
        msCmdText: string;\r
    }) => void) | undefined) => void;\r
    upDisplay(): void;\r
    setCmdText: (str: string) => void;\r
    getCmdText: () => string;\r
    getCmdDisplay: () => string;\r
    setCmdDisplay: (str: string) => void;\r
    addCmdDisplay: (str: string) => void;\r
    setCmdTip: (str: string) => void;\r
    getCmdTip: () => string;\r
}\r
declare class MxDynamicInput {\r
    [x: string]: any;\r
    mType: number;\r
    mPos: number[];\r
    mTip: string;\r
    mValue1: string;\r
    mValue1Pos: number[];\r
    mValue2: string;\r
    mValue2Pos: number[];\r
    misShow: boolean;\r
    focusIndex: number;\r
    mLockValues: Map<any, any>;\r
    mOnKeydownEvent: ((arg0: any) => number) | undefined;\r
    mFocusValue: string;\r
    setFocusValue: (value: string) => void;\r
    getFocusValue: () => string;\r
    setLockValues(index: number, value: string): void;\r
    getLockValues(index: number): string;\r
    getLockValuesMap(): Map<number, string>;\r
    clearLockValuesMap(): void;\r
    getFocusIndex: () => number;\r
    setFocusIndex: (index: number) => void;\r
    mountKeydownEvent: (fun: ((arg0: any) => number) | undefined) => void;\r
    onKeydown: (keyCode: any) => number;\r
    setType: (type: number) => void;\r
    getType: () => number;\r
    isShow: () => boolean;\r
    setPos: (pos: number[]) => void;\r
    setTip: (tip: string) => void;\r
    setValue1: (val: string) => void;\r
    getValue1: () => string;\r
    setValue1Pos: (pos: number[]) => void;\r
    setValue2: (val: string) => void;\r
    getValue2: () => string;\r
    setValue2Pos: (pos: number[]) => void;\r
    setShow: (isShow: boolean) => void;\r
    getData: () => {\r
        list: Array<{\r
            value: string;\r
            readonly: boolean;\r
            show?: boolean;\r
            pos?: number[];\r
        }>;\r
        pos: number[];\r
        postype: number;\r
    } | undefined;\r
}\r
declare class MxVueInterface {\r
    [x: string]: any;\r
    mSetCoordFun: ((coordTip: string) => void) | undefined;\r
    mUpdateCursorFun: ((cursorType: string) => void) | undefined;\r
    mOnKeydownEvent: ((arg0: any) => void) | undefined;\r
    mCursorType: string;\r
    mComandLine: MxVueComandLine;\r
    mdynamicInput: MxDynamicInput;\r
    mMxEvents: {\r
        [key: string]: Function;\r
    };\r
    mxFunObject: any;\r
    mFooterData: any;\r
    mLinetypeComboxData: any;\r
    mTitle: any;\r
    mTopButtonBarData: any;\r
    mMenuBarData: any;\r
    mRighButtonBarData: any;\r
    mLeftButtonBarData: any;\r
    mTitleButtonBarData: any;\r
    mLayerComboxData: any;\r
    mColorComboxData: any;\r
    mRightMenuSnapTypeFun: any;\r
    mTsWeb_MxUiVue: any;\r
    mountSetCoordFun: (fun: ((coordTip: string) => void) | undefined) => void;\r
    mountUpdateCursorFun: (fun: ((cursorType: string) => void) | undefined) => void;\r
    mountKeydownEvent: (fun: ((arg0: any) => void) | undefined) => void;\r
    onKeydown: (keyCode: number) => void;\r
    mountsetRightMenuSnapTypeFun: (fun: ((type: number) => void) | undefined) => void;\r
    setRightMenuOSmodeValue(lOSmode: number): void;\r
    executeOperations(lUiOperations: number): void;\r
    mountTsWeb_MxUiVue(mxuiVue: any): void;\r
    setTipCoord: (str: any) => void;\r
    getCursorType: () => string;\r
    setCursorType: (curtype: string | number) => void;\r
    getTitle: () => any;\r
    getTopButtonBarData: () => any;\r
    getMenuBarData: () => any;\r
    getRighButtonBarData: () => any;\r
    getLeftButtonBarData: () => any;\r
    getTitleButtonBarData: () => any;\r
    getLayerComboxData: () => any;\r
    getColorComboxData: () => any;\r
    getLinetypeComboxData: () => any;\r
    getFooterData: () => any;\r
    sendStringToExecute: (sCmd: any) => void;\r
    getCmdLine: () => MxVueComandLine;\r
    getDynamicInput: () => MxDynamicInput;\r
    init: (mxFun: any) => void;\r
    OnMxEvent: (event: {\r
        [x: string]: any;\r
    }) => void;\r
    mountMxEvent: (name: string | number, call: any) => void;\r
    getRightMenuType(isShift: boolean): number;\r
}

/**\r
 * 创建图纸展示控件实例\r
 * @param canvasId 提供一个canvas元素或者唯一的ID或者class类亦或者Jquery选中的元素\r
 * @paramType string | HTMLCanvasElement | JQuery<HTMLElement>\r
 * @param cadFile 提供要展示的图纸名称\r
 * @paramType string\r
 * @param callback 图纸展示控件创建完成后的回调函数 回调参数mxDraw和dom\r
 * @paramType function\r
 * @param isNewFile 是否新建文件\r
 * @paramType boolean\r
 * @return void\r
 * @example\r
 * \`\`\` typescript\r
 * Mx.MxFun.createMxObject({\r
 *   canvasId: "my-app",\r
 *   cadFile： "test2.dwg",\r
 *   callback(mxDraw, { canvas, canvasParent }) {\r
 *       console.log(mxDraw, canvas, canvasParent)\r
 *   },\r
 *   isNewFile: true\r
 * })\r
 * \`\`\`\r
 */\r
declare function createMxObject(this: MxFunType, { canvasId, cadFile, callback, isNewFile, useWebsocket, isAutoResize, mapBox, isMxCAD, userIdentitySign, isCPPMxCAD }: {\r
    canvasId?: string;\r
    cadFile?: string | string[];\r
    callback?: (mxDraw: MxDrawObject, dom: {\r
        canvas: HTMLCanvasElement;\r
        canvasParent: CanvasParent;\r
    }) => void;\r
    isNewFile?: boolean;\r
    useWebsocket?: boolean;\r
    isAutoResize?: boolean;\r
    mapBox?: any;\r
    isMxCAD?: boolean;\r
    userIdentitySign?: string;\r
    isCPPMxCAD?: boolean;\r
}): void;

declare let mxUiData: MxVueInterface;\r
interface MxFunClass {\r
    /** mxdraw引入初始化(一般用于在这个阶段注册命令) */\r
    on(name: 'init'): void;\r
    /**\r
     * 注册一个系统事件的监听\r
     * init 事件会在模块加载完成后触发。\r
     * */\r
    on(eventName: string, call: any): void;\r
}\r
/**\r
 * MxFun 模块\r
 * 导出库时已实例化，只需要调用实例方法 例如：\r
 * \`\`\`typescript\r
 *  Mx.MxFun.createMxObject\r
 * \`\`\`\r
 */\r
declare class MxFunClass {\r
    createMxObject: typeof createMxObject;\r
    /**\r
     * 为程序设置服务器地址\r
     * @param MXSERVER 服务器地址\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.setMxServer("ws://localhost:5090")\r
     * \`\`\`\r
     */\r
    setMxServer(MXSERVER?: string): void;\r
    /**\r
     * 设置加载图片回调函数。\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     */\r
    setloadImageFuction(call: (url: string, onLoad?: (texture: any) => void, onError?: (event: any) => void) => void): void;\r
    /**\r
     * MxFun 模块\r
     * mxdraw模块初始化同步\r
     */\r
    onInitSync(syncInit: () => Promise<boolean>): void;\r
    /**\r
     * @internal\r
     * 内部使用\r
     * \`\`\`\r
     */\r
    callSyncInitialization(): Promise<boolean>;\r
    /**\r
     * 屏幕转文档坐标\r
     * @param  x 坐标x\r
     * @param  y 坐标y\r
     * @param  z 坐标z\r
     * @return THREE.Vector3 文档坐标\r
     * @example\r
     * \`\`\` typescript\r
     * const vector3 = Mx.MxFun.screenCoord2Doc(36, 21, 0)\r
     * console.log(vector3)\r
     * \`\`\`\r
     */\r
    screenCoord2Doc(x: number | THREE.Vector3, y?: number): THREE.Vector3;\r
    /**\r
     * 文档转屏幕坐标.\r
     * @param  x 坐标x\r
     * @param  y 坐标y\r
     * @param  z 坐标z\r
     * @return THREE.Vector3 屏幕坐标\r
     * @example\r
     * \`\`\` typescript\r
     * const vector3 = Mx.MxFun.docCoord2Screen(36, 21, 0)\r
     * console.log(vector3)\r
     * \`\`\`\r
     */\r
    docCoord2Screen(x: number | THREE.Vector3, y?: number): THREE.Vector3;\r
    /**\r
     * 获取当前绘图控件对象\r
     * @return MxDrawObjectType 当前绘图控件对象\r
     * @example\r
     * \`\`\` typescript\r
     * const mxDraw = Mx.MxFun.getCurrentDraw()\r
     * mxDraw.getScene()\r
     * \`\`\`\r
     */\r
    getCurrentDraw(): MxDrawObject;\r
    /**\r
     * 添加一个MxDbEntity实体到当前绘图对象上。\r
     * @param ent  实体对象\r
     * @returns number 返回对象的id.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    addToCurrentSpace(ent: MxDbEntity): number;\r
    /**\r
     * 初始化插件的UI数据对象。\r
     * @param uiDataObj\r
     * @return\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     */\r
    initUiDataObject(uiDataObj: typeof mxUiData): void;\r
    /**\r
     * 获取UI数据对象\r
     * @param uiDataObj\r
     * @return  mxUiData\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     */\r
    getUIData(): MxVueInterface;\r
    /**\r
     * 获得到当前数据库对象.\r
     * @return MxDbDatabase\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     */\r
    getCurrentDatabase(): MxDbDatabase;\r
    /**\r
     * 梦想开发测试\r
     * @param p\r
     * @return any\r
     * @example\r
     * \`\`\` typescript\r
     * console.log(Mx.MxFun.TestMX());\r
     * \`\`\`\r
     */\r
    testMX(p?: any): any;\r
    /**\r
     * 加载一个图片对象，返回Three.js材质对象，该函数具有缓存功能，下次加载同样的图片，可以直接返回.\r
     * @param p\r
     * @return any\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     */\r
    loadImageMaterial(imageUrlPath: string, callResult?: (material: THREE.MeshLambertMaterial) => void | null): Promise<THREE.MeshLambertMaterial | null>;\r
    /**\r
     * 在图上选择一个对象。\r
     * @param strPrompt  提示字符串\r
     * @param filter  过滤条件\r
     * @returns number 返回对象的id\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    selectEnt(strPrompt: string, filter?: any): Promise<number>;\r
    /** 初始化MxDbEntity的类型 */\r
    initMxDbEntityType: (entity: MxDbEntity) => void;\r
    /** 获取THREE */\r
    getTHREE: () => typeof three;\r
    /**\r
     * 设置加载dwg文件，直接使用html get协议加载数据，这样就不需要梦想后台服务器程序。\r
     * @param isStaticLoad 是否启用html get协议加载数据文件\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.enablStaticLoad(true)\r
     * \`\`\`\r
     */\r
    enablStaticLoad: (isStaticLoad?: boolean) => void;\r
    /**\r
     * 设置加载dwg文件，直接使用html get协议加载数据时，使用的服务器地址。\r
     * @param server 服务网络地址.\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.setStaticServer("http://localhost:3000/demo");\r
     * \`\`\`\r
     */\r
    setStaticServer: (server: string) => void;\r
    /**\r
     * 注册命令\r
     * @param cmdName 命令名\r
     * @param fun 命令函数,cmdFlag取值MxCommandFlag枚举的逻辑或\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.addCommand("draw", ()=> {\r
     *   console.log("draw")\r
     * })\r
     * \`\`\`\r
     */\r
    addCommand: (cmdName: string, fun: Function, cmdFlag?: number) => void;\r
    /**\r
     * 执行命令\r
     * @param cmdName 命令名\r
     * @return boolean 命令执行成功为true\r
     * @example\r
     * \`\`\` typescript\r
     * if(Mx.MxFun.sendStringToExecute("draw")) {\r
     *   console.log("成功执行draw命令")\r
     * }\r
     * \`\`\`\r
     */\r
    sendStringToExecute: (cmdName: string, ages?: any) => boolean;\r
    /**\r
     * 调用后台服务程序中的NodeJS用户定义函数 后台程序使用Mx.MxFun.registFun注册用户定义函数\r
     * @param funName 函数名\r
     * @param param 函数参数\r
     * @param retfun 函数返回值回调\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.call("getDrawObject", {\r
     *   cadFile: "test.dwg"\r
     * }, (res)=> {\r
     *   console.log(res)\r
     * })\r
     * \`\`\`\r
     */\r
    call: (funName: string, param?: any, retfun?: Function) => void;\r
    /**\r
     * 屏幕坐标长度转THREE.JS坐标长度\r
     * @param len 屏幕坐标长度\r
     * @return number THREE.JS坐标长度\r
     * @example\r
     * \`\`\` typescript\r
     * const len = Mx.MxFun.screenCoordLong2World(36)\r
     * console.log(len)\r
     * \`\`\`\r
     */\r
    screenCoordLong2World: (len: number) => number;\r
    /**\r
     * 屏幕坐标长度转文档坐标长度\r
     * @param len 屏幕坐标长度\r
     * @return number 文档坐标长度\r
     * @example\r
     * \`\`\` typescript\r
     * const len = Mx.MxFun.screenCoordLong2Doc(36)\r
     * console.log(len)\r
     * \`\`\`\r
     */\r
    screenCoordLong2Doc: (len: number) => number;\r
    /**\r
     * 文档坐标长度转屏幕坐标长度\r
     * @param len 文档坐标长度\r
     * @return number 屏幕坐标长度\r
     * @example\r
     * \`\`\` typescript\r
     * const len = Mx.MxFun.docCoordLong2Screen(36)\r
     * console.log(len)\r
     * \`\`\`\r
     */\r
    docCoordLong2Screen: (len: number) => number;\r
    /**\r
     * THREE.JS坐标长度转屏幕坐标长度\r
     * @param len THREE.JS坐标长度\r
     * @return number 屏幕坐标长度\r
     * @example\r
     * \`\`\` typescript\r
     * const len = Mx.MxFun.worldCoordLong2Doc(36)\r
     * console.log(len)\r
     * \`\`\`\r
     */\r
    worldCoordLong2Doc: (len: number) => number;\r
    /**\r
     * DWG文档坐标长度到ThreeJS坐标长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoordLong2World: (l: number) => number;\r
    /**\r
     * 屏幕坐标转THREE.JS坐标.\r
     * @param  x 坐标x\r
     * @param  y 坐标y\r
     * @param  z 坐标z\r
     * @return THREE.Vector3 THREE.JS坐标\r
     * @example\r
     * \`\`\` typescript\r
     * const vector3 = Mx.MxFun.screenCoord2World(36, 21, 0)\r
     * console.log(vector3)\r
     * \`\`\`\r
     */\r
    screenCoord2World: (x: number | THREE.Vector3, y?: number, z?: number) => THREE.Vector3;\r
    /**\r
     * THREE.JS坐标转屏幕坐标.,屏幕坐标的Y轴向下。坐标原点在左上角.\r
     * @param  x 坐标x\r
     * @param  y 坐标y\r
     * @param  z 坐标z\r
     * @return THREE.Vector3 屏幕坐标\r
     * @example\r
     * \`\`\` typescript\r
     * const vector3 = Mx.MxFun.worldCoord2Screen(36, 21, 0)\r
     * console.log(vector3)\r
     * \`\`\`\r
     */\r
    worldCoord2Screen: (x: number | THREE.Vector3, y?: number, z?: number) => THREE.Vector3;\r
    /**\r
     * 文档坐标转THREE.JS坐标\r
     * 说明： 文档坐标，THREE.JS坐标的X轴都是从左到右，Y轴是下到上,但是屏幕像素坐标系：X轴都是从左到右，Y轴是上到下\r
     * @param  x 坐标x\r
     * @param  y 坐标y\r
     * @param  z 坐标z\r
     * @return THREE.Vector3 THREE.JS坐标\r
     * @example\r
     * \`\`\` typescript\r
     * const vector3 = Mx.MxFun.docCoord2World(36, 21, 0)\r
     * console.log(vector3)\r
     * \`\`\`\r
     */\r
    docCoord2World: (x: number, y: number, z: number) => THREE.Vector3;\r
    /**\r
     * THREE.JS坐标转文档坐标.\r
     * @param  x 坐标x\r
     * @param  y 坐标y\r
     * @param  z 坐标z\r
     * @return THREE.Vector3 文档坐标\r
     * @example\r
     * \`\`\` typescript\r
     * const vector3 = Mx.MxFun.worldCoord2Doc(36, 21, 0)\r
     * console.log(vector3)\r
     * \`\`\`\r
     */\r
    worldCoord2Doc: (x: number, y: number, z: number) => THREE.Vector3;\r
    /**\r
     * 更新显示，使用Three.js绘制了对象，调用该函数更新显示。\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.updateDisplay()\r
     * \`\`\`\r
     */\r
    updateDisplay: () => void;\r
    /**\r
     * 设置窗口鼠标等事件的回调操作\r
     * @param fun  参数1 type： 鼠标事件类型 "mouseup"鼠标释放 、"mousedown" 鼠标按下 参数2 event：事件对象 返回值: number 为0，表示事件往下传递，如果非0，表示事件已经被处理，不要往下传递了\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.addWindowsEvent((type, event)=> {\r
     *   console.log(event)\r
     *   if(type = "mouseup") {\r
     *       console.log("鼠标释放")\r
     *   }else {\r
     *       console.log("鼠标按下")\r
     *   }\r
     *  // 事件往下传递\r
     *  // return 0\r
     *  // 事件已处理不再传递\r
     *   return -1\r
     * })\r
     * \`\`\`\r
     */\r
    addWindowsEvent: (fun: (type: string, event: any) => number) => void;\r
    /**\r
     * 当前是否有命令在运行\r
     * @return boolean\r
     * @example\r
     * \`\`\` typescript\r
     * if(Mx.MxFun.isRunningCommand()) {\r
     *    // 当前已有命令在运行\r
     * }\r
     * \`\`\`\r
     */\r
    isRunningCommand: () => boolean;\r
    /**\r
     * 当前正在运行的命令\r
     * @return any\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     */\r
    getRunningCommand: () => any;\r
    /**\r
     * 窗口缩放，把指定的范围内的图形放到视区中\r
     * @param dLBx 矩形框范围的左下角X坐标\r
     * @param dLBy 矩形框范围的左下角X坐标\r
     * @param dRTx 矩形框范围的左下角X坐标\r
     * @param dRTy 矩形框范围的左下角X坐标\r
     * @param isWorld 传入的坐标是否是thruee.js坐标，默认传文档坐标\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.zoomW(21, 22, 300, 310, false)\r
     * \`\`\`\r
     */\r
    zoomW: (dLBx: number, dLBy: number, dRTx: number, dRTy: number, isWorld?: boolean) => void;\r
    zoomAll: () => void;\r
    /**\r
     * 显示或隐藏图层\r
     * @param idLayer 图层id,或层名\r
     * @param isShow 是否显示\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.showLayer(366, true)\r
     * Mx.MxFun.showLayer("2363", fasle)\r
     * \`\`\`\r
     */\r
    showLayer: (idLayer: number | string, isShow: boolean) => void;\r
    /**\r
     * 输出字符串到命令行.\r
     * @param sval 输出字符串\r
     * @param ...val 剩余参数 命令cmd\r
     * @return void\r
     * @example\r
     * \`\`\` typescript\r
     * Mx.MxFun.acutPrintf("{0}:", "draw")\r
     * \`\`\`\r
     */\r
    acutPrintf: (format: string, ...val: string[]) => void;\r
    /**\r
     * 得到地址栏参数\r
     * @param name\r
     * @return string 地址栏参数\r
     * @example\r
     * \`\`\` typescript\r
     *  if(Mx.MxFun.getQueryString("mousetest") === "y")\r
     * \`\`\`\r
     */\r
    getQueryString: (name: string) => string;\r
    /**\r
     * 设置配制参数.\r
     * @param name\r
     * @example\r
     * \`\`\` typescript\r
     *       Mx.MxFun.setIniset({\r
     *           EnableIntelliSelect: true\r
     *       })\r
     * \`\`\`\r
     */\r
    setIniset: (iniObj: iniConfig) => void;\r
    /**\r
     * 得到当前配制参数.\r
     * @return object 配制参数.\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     */\r
    getIniSet: () => iniConfig;\r
    /**\r
     * 重新打开cad文件，该函数在控件创建完后，需要再次重新打开文件，调用。\r
     * @param sFile 打的cad文件路径\r
     * @return any\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     */\r
    openFile: (sFile: string | string[], useWebsocket?: boolean) => boolean;\r
    /**\r
     * 调用服务器后台CAD命令.\r
     * */\r
    callCommand: (cmd: string, param: string, retCall?: (param: any) => void) => void;\r
    /**\r
     * CAD坐标到文档坐标.\r
     * 默认情况下，cad等于doc,当前m_isCorrectLargeCoordinates为true时，doc变成了把cad图纸修改到小范围坐标系下的坐标。\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    cadCoord2Doc: (x: number, y: number, z: number) => THREE.Vector3;\r
    /**\r
     * 文档坐标坐标到CAD.\r
     * 默认情况下，cad等于doc,当前m_isCorrectLargeCoordinates为true时，doc变成了把cad图纸修改到小范围坐标系下的坐标。\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoord2Cad: (x: number, y: number, z: number) => THREE.Vector3;\r
    /**\r
     * 通过id得到对象.\r
     * @returns 返MxDbEntity\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getMxEntity: (id: number) => MxDbEntity | undefined;\r
    /**\r
     * 停止运行当前命令\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    stopRunCommand: () => void;\r
    /**\r
     * 设置当前运行MxCAD的MxCPP环境对象。\r
     */\r
    initMxCpp: (mxcppimp: any) => void;\r
    /**\r
     * Three.js坐标转MxCAD的DWG坐标长度\r
     */\r
    docCoordLong2Cad: (l: number) => number;\r
    /**\r
     * MxCAD的DWG坐标长度转Three.js坐标.\r
     */\r
    cadCoordLong2Doc: (l: number) => number;\r
    /**\r
     * View坐标长度转MxCAD的DWG坐标.\r
     */\r
    viewCoordLong2Cad: (l: number) => number;\r
    /**\r
     * MxCAD的DWG坐标长度转View坐标.\r
     */\r
    cadCoordLong2View: (l: number) => number;\r
    /**\r
     * 监听命令行消息动态更新的数据\r
     * 在取点对象中设置的命令以及我们提供的图形对象中是有一套命令提示和参数化绘图，而该回调函数主要用来监听消息变化\r
     * @parma callback 回调函数中data中的msCmdTip表示命令提示 msCmdText表示当前用户输入的输入内容  msCmdDisplay表示所有的消息记录\r
     * */\r
    listenForCommandLineInput(callback: ((data: {\r
        msCmdTip: string;\r
        msCmdDisplay: string;\r
        msCmdText: string;\r
    }) => void) | undefined): void;\r
    /**\r
     * 设置命令行消息数据 (在监听input输入框的onKeydown事件的回调函数中调用)\r
     * @param msCmdText 用户输入的数据 input输入框输入的文本信息\r
     * @param keyCode 按键Code input输入框的onKeydown事件的event事件对象的keyCode属性\r
     * */\r
    setCommandLineInputData(msCmdText: string, keyCode: number): void;\r
    /**\r
     * 监听指针(鼠标光标)移动变化的坐标信息\r
     * @parma callback 回调函数中返回坐标信息\r
     * */\r
    listenForCoordTip(callback: (coordTip: string) => void): void;\r
    /**\r
     * 监听光标更新\r
     * @parma cursorType当前使用的光标类型\r
     * */\r
    listenForUpdateCursor(callback: ((cursorType: string) => void) | undefined): void;\r
    /**\r
     * 返回mxfun.min.js中的THREE.JS对象，可以用它来创建mxfun.min.js中THREE对象。\r
     * */\r
    getMxFunTHREE: () => typeof three;\r
    /**\r
     * 返回mxfun.min.js中的ThreeJsTool对象\r
     * */\r
    getMxFunThreeTool(): any;\r
    /**\r
     * 创建十字光标图片\r
     * */\r
    ceneratecursor(cursorSize?: number, squareSize?: number, isRoss?: boolean, color?: string): HTMLImageElement;\r
    /**\r
     * 得到当前鼠标位置,返回的是屏幕坐标 。\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getCurrentMousePostion(): THREE.Vector3;\r
    /**\r
     * 触发一个系统事件的调用\r
     * */\r
    callEvent: (eventName: string, param?: any) => any;\r
    /**\r
     * 得到当前网页路径\r
     * init 事件会在模块加载完成后触发。\r
     * */\r
    getLocationPageUrl: () => string;\r
    /**\r
     * 得到当前主机路径\r
     * init 事件会在模块加载完成后触发。\r
     * */\r
    getHostUrl: () => string;\r
    /** 监听use或者调用自定义图形定义的绘制命令后创建图形对象的回调 */\r
    onUseCreateMxDbEntity(callback: (...ages: [MxDbEntity]) => any): void;\r
    /**\r
     * 初始快捷命令。\r
     * */\r
    initQuickCommand: (aryQuickCommand: string[][]) => void;\r
    /**\r
     * 初始化语言表\r
     * */\r
    InitLanguageString: (mapid2str: Object) => void;\r
    /**\r
     * 得以语言字符串\r
     * */\r
    getLanguageString: (id: string, sDef?: string) => string;\r
    /**\r
     * 把一个颜色变量转成一个数组颜色\r
     * */\r
    getNumberColor: (iColor: number | string | THREE.Color) => number;\r
    /**\r
     * 发送一个消息到ifarme的父窗口\r
     * */\r
    postMessageToParentFrame: (param: any) => boolean;\r
}\r
declare const MxFun: MxFunClass;

interface CanvasParent extends HTMLElement {\r
    tabindex?: number;\r
}\r
/** 控件配置 **/\r
interface iniConfig {\r
    /** 启用智能选择 */\r
    EnableIntelliSelect?: boolean;\r
    /** 启动O 捕捉功能 */\r
    EnableOsnapFunction?: boolean;\r
    /** 启动夹点编辑 */\r
    EnableGripEdit?: boolean;\r
    /** 启动多选,框选功能,默认值是false */\r
    multipleSelect?: boolean;\r
    /**自动重置渲染器 */\r
    autoResetRenderer?: boolean;\r
    /** 更正大坐标 */\r
    correctLargeCoordinates?: boolean;\r
    /** 请求标头缓存控制 */\r
    requestHeaderCacheControl?: boolean;\r
    /** 选择方式控制 1：多选，但不支持连续多选，2：多选，并支持连续多选,默认值为1 */\r
    IntelliSelectType?: number;\r
    /** 禁用动态输入框 */\r
    ForbiddenDynInput?: boolean;\r
    /** 夹点和拾取框的大小,单位是屏幕上的像素 */\r
    inputRectWidth?: number;\r
    /** 夹点颜色 */\r
    gripPointColor?: number;\r
    /** 1,使用EnableGripEdit设置，默认值是1\r
     ** 2 启用CAD对象夹点编辑\r
     ** 0 禁用AD对象夹点编辑\r
     */\r
    EnableCADEntityGripEdit?: number;\r
    /** 是使用图纸中的视区角度设置，默认为true */\r
    EnableDrawingViewAngle?: boolean;\r
    /** 是否启用命令与用户交互操作启动右键菜单，默认为false */\r
    EnableCommandRightClickMenu?: boolean;\r
    /** 是否启用触模屏命令交互操作时支持多点触模放大缩小视区，默认为true */\r
    MobileCommandOperationSupportsMultipoint?: boolean;\r
}\r
type MxFunType = MxFunClass;

/** @module MxTempMarkDraw */\r
/**\r
 * MxTempMarkDraw 绘制一个临时标记对象，该对象，在视区改变，或执行一个命令时会自动清除.\r
 *\r
 */\r
declare class MxTempMarkDraw {\r
    private imp;\r
    constructor(imp: any);\r
    /**\r
    * 清除标记\r
    * @example\r
    */\r
    clear(): void;\r
    /**\r
    * 绘制直线\r
    * @example\r
    */\r
    drawLine(pt1: THREE.Vector3, pt2: THREE.Vector3, iColor?: number, opacity?: number): void;\r
    /**\r
    * 绘制圆\r
    * @example\r
    */\r
    drawCircle(cen: THREE.Vector3, dRadius: number, iColor: number): void;\r
    /**\r
    * 绘制对象\r
     * @example\r
    */\r
    drawEntity(obj: THREE.Object3D): void;\r
    /**\r
    * 绘制圆标记\r
    * @example\r
    */\r
    drawCircleMark(cen: THREE.Vector3, dRadius: number, iColor: number): void;\r
}

/** @module MxDrawObject */\r
\r
interface MxDrawObjectType {\r
    renderer: THREE.WebGLRenderer;\r
    addEvent(arg0: string, arg1: (...parmes: any) => any): void;\r
    setIniset(arg0: iniConfig): void;\r
    getScene(): THREE.Scene;\r
    getCamera(): THREE.Camera;\r
    setMouseRightRotate(isRotate: boolean): void;\r
    getFullDisplayRange(): object;\r
    getCanvas(): HTMLCanvasElement;\r
    updateDisplay(isImmediate: boolean): void;\r
    createCanvasImageData(fun: (imageData: string) => void, param?: object): void;\r
    setViewColor(color: number): void;\r
    setSize(width: number, height: number): void;\r
    getIntersectObjects(ptMouse: THREE.Vector3): THREE.Intersection[];\r
    getViewWidth(): number;\r
    getViewHeight(): number;\r
    zoomInitialStates(): void;\r
    zoomScale(scale: number): void;\r
    zoomW(minPt: THREE.Vector3, maxPt: THREE.Vector3, isWorld?: boolean, animate?: boolean, autoRegen?: boolean): void;\r
    zoomCenter(dCenX: number, dCenY: number): void;\r
    initZoomW(pt1Doc: THREE.Vector3, pt2Doc: THREE.Vector3): void;\r
    addMxEntity(ent: any): number;\r
    eraseMxEntity(id: number): boolean;\r
    screenCoord2World(x: number, y: number, z?: number): THREE.Vector3;\r
    worldCoord2Screen(x: number, y: number, z: number): THREE.Vector3;\r
    screenCoord2Doc(x: number, y: number, z: number): THREE.Vector3;\r
    worldCoordLong2Doc(l: number): number;\r
    docCoordLong2World(l: number): number;\r
    docCoord2World(x: number, y: number, z: number): THREE.Vector3;\r
    worldCoord2Doc(x: number, y: number, z: number): THREE.Vector3;\r
    docCoord2Screen(x: number, y: number, z: number): THREE.Vector3;\r
    screenCoordLong2Doc(l: number): number;\r
    docCoordLong2Screen(l: number): number;\r
    screenCoordLong2World(l: number): number;\r
    worldCoordLong2Screen(l: number): number;\r
    initRendererParam(param: object): void;\r
    getMxAllSelect(): Array<number>;\r
    addMxCurrentSelect(id: number, isFireSelectChange: boolean, isDisplayGrid: boolean): boolean;\r
    clearMxCurrentSelect(): boolean;\r
    getMxEntityUserObject(id: number): MxDbEntity;\r
    findMxEntityAtPoint(ptMouse: THREE.Vector3, isDocCoord?: boolean, retWordDrawXDataCall?: (id: number, data: any) => void): Array<MxDbEntity>;\r
    setMouseMiddlePan(isPan: boolean | number): void;\r
    resetThreeJSControls(): void;\r
    getAllMxEntity(): Array<MxDbEntity>;\r
    enableZoom(isEnable: boolean): void;\r
    enablePan(isEnable: boolean): void;\r
    addObject(obj: THREE.Object3D | null, isAddToSelect?: boolean): void;\r
    addViewObject(obj: THREE.Object3D): void;\r
    removeViewObject(obj: THREE.Object3D): void;\r
    removeObject(obj: THREE.Object3D, isRemoveSelectObject?: boolean): void;\r
    saveMxEntityToJson(isSaveToDWG?: boolean): object;\r
    loadMxEntityFromJson(dataString: object): Promise<boolean>;\r
    eraseAllMxEntity(): void;\r
    makeCurrent(): void;\r
    getViewCenterDocCoord(): THREE.Vector3;\r
    updateCanvasSize(): void;\r
}\r
/**\r
 * mxdraw事件\r
   * @example\r
   * \`\`\`typescript\r
   * 响应夹点编辑事件\r
   *    mxcad.mxdraw.on("objectGripEdit",(grips)=>{\r
   *     grips.forEach((grip)=>{\r
   *         let id = new McObjectId(grip.id,grip.type == "mxcad" ? McObjectIdType.kMxCAD :McObjectIdType.kMxDraw);\r
   *         console.log(id.getMcDbEntity());\r
   *     });\r
   *     console.log(grips);\r
   * })\r
   * \`\`\`\r
 */\r
type MxDrawEvents = {\r
    "loadComplete": () => void;\r
    "render": () => void;\r
    "addResizeEvent": (resize: Function) => void;\r
    "initObject": () => void;\r
    "openFileComplete": (iResult: number) => void;\r
    "saveFileComplete": (iResult: number, sServerResult: string) => void;\r
    "uiSetLayerData": (layerList: {\r
        name: string;\r
        id: number;\r
        off?: number;\r
        color?: string;\r
        colorValue?: number;\r
        zerolayer?: number;\r
        isState?: boolean;\r
    }[]) => void;\r
    "viewchange": () => void;\r
    "MxEntitySelectChange": (ids: number[]) => void;\r
    "objectGripEdit": (entity: MxDbEntity) => void;\r
    "whetherEditTheGripPoint": (entity: MxDbEntity) => void;\r
    "databaseModify": () => void;\r
} & RendererEventsType;\r
/**\r
 * 引入mxdraw库不会挂载MxDrawObject 只能在以下特定函数中获取\r
 * @function\r
 * {@link MxFun.createMxObject}中callback回调参数\`mxDraw\`的构造类\r
 * @function\r
 * {@link MxFun.getCurrentDraw} 方法返回值的构造类\r
 *\r
 */\r
declare class MxDrawObject extends Node<MxDrawEvents, Node<any, any>> {\r
    private _mxdrawObj;\r
    private rootLayer;\r
    constructor(Mxdraw: MxDrawObjectType);\r
    /**\r
     * 得执行的内部MxObject对象.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getMxObjectImplement(): any;\r
    /**\r
     * @instance\r
     */\r
    renderer: THREE.WebGLRenderer;\r
    /**\r
     * 获取Three.js绘图场景\r
     * @returns THREE.Scene\r
     */\r
    getScene(): THREE.Scene;\r
    /**\r
     * 设置多选模式。\r
     */\r
    setMultipleSelect(isMultipleSelect: boolean): void;\r
    /**\r
     * 获取Three.js相机对象\r
     * @returns THREE.Camera\r
     */\r
    getCamera(): THREE.Camera;\r
    /**\r
     * 获取Three renderer渲染器\r
     * @returns THREE.WebGLRenderer\r
     */\r
    getRenderer(): THREE.WebGLRenderer;\r
    /**\r
     * 设置鼠标按下是否旋视区\r
     * @param isRotate  是否旋视区\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().setMouseRightRotate(false)\r
     * \`\`\`\r
     *\r
     */\r
    setMouseRightRotate(isRotate?: boolean): void;\r
    /**\r
     * 得到全部显示所有图形所需要的显示的范围 ，Three.js的坐标系。world坐标。\r
     * @returns {minPt: value,maxPt: value}\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().getFullDisplayRange()\r
     * \`\`\`\r
     */\r
    getFullDisplayRange(): object;\r
    /**\r
     * 获取Canvas对象.\r
     * @returns HTMLCanvasElement\r
     */\r
    getCanvas(): HTMLCanvasElement;\r
    /**\r
     * 通知Three.js更新显示\r
     * @returns void\r
     */\r
    updateDisplay(isImmediate?: boolean): void;\r
    /**\r
     * 通知Three.js生成ImgeData显示I数据.\r
     * @param fn 回调函数或者imageData\r
     * @param param 函数载荷\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().createCanvasImageData((imageData)=> {\r
     *      console.log(imageData)\r
     * })\r
     * \`\`\`\r
     */\r
    createCanvasImageData(fn: (imageData: string) => void, param?: object): void;\r
    /**\r
     * 设置视区背景色,\r
     * @param color 如0xFFFFFF 白色\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().setViewColor(0xFFFFFF)\r
     * \`\`\`\r
     */\r
    setViewColor(color: number): void;\r
    /**\r
   * 返回视区背景色,\r
   * @param color 如0xFFFFFF 白色\r
   * @returns void\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   * \`\`\`\r
   */\r
    getViewColor(): number;\r
    /**\r
     * 设置视区背景色,\r
     * @param width 宽度\r
     * @param height 宽度\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().setSize(0xFFFFFF)\r
     * \`\`\`\r
     */\r
    setSize(width: number, height: number): void;\r
    /**\r
     * 获取某屏幕点下的绘制对象，ptMouse是.,\r
     * @param ptMouse THREE.Vector2 屏幕坐标\r
     * @returns THREE.Intersection[]\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().getIntersectObjects(new THREE.Vector2(2, 3))\r
     * \`\`\`\r
     */\r
    getIntersectObjects(ptMouse: THREE.Vector3): THREE.Intersection[];\r
    /**\r
     * 添加THREE.Object3D对象到当前场景\r
     * @param obj THREE.Object3D\r
     * @param isAddToSelect 默认值为true  是否把对象添加选择对象集中,调用 getIntersectObjects可以找到\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().addObject(new THREE.Object3D(), false)\r
     * \`\`\`\r
     */\r
    addObject(obj: THREE.Object3D, isAddToSelect?: boolean): void;\r
    /**\r
     * 添加THREE.Object3D对象到视区场景，对象坐标系是窗口视区坐标系。0,0点在左下角.\r
     * @param obj THREE.Object3D\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().addViewObject(new THREE.Object3D())\r
     * \`\`\`\r
     */\r
    addViewObject(obj: THREE.Object3D): void;\r
    /**\r
     * 得到对象画布的宽度，单位屏幕像素\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().getViewWidth()\r
     * \`\`\`\r
     */\r
    getViewWidth(): number;\r
    /**\r
     * 得到对象画布的高度，单位屏幕像素\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().getViewHeight()\r
     * \`\`\`\r
     */\r
    getViewHeight(): number;\r
    /**\r
     * 删除addObject函数添加的THREE.Object3D对象\r
     * @param obj THREE.Object3D\r
     * @param isRemoveSelectObject 默认值为true  删除选择集中的对象\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().removeObject(new THREE.Object3D(), false)\r
     * \`\`\`\r
     */\r
    removeObject(obj: THREE.Object3D, isRemoveSelectObject?: boolean): void;\r
    /**\r
     * 把视区显示范围恢复到初始显示范围.\r
     * @returns void\r
     */\r
    zoomInitialStates(): void;\r
    /**\r
     * 缩放当前显示范围，它是相对于当前显示范围进行缩放\r
     * @param scale scale缩放比例\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().zoomScale(0.8)\r
     * \`\`\`\r
     */\r
    zoomScale(scale: number): void;\r
    /**\r
     * 把当前显示范围移到指定的显示范围\r
     * @param minPt 坐标1 THREE.Vector3\r
     * @param maxPt 坐标2 THREE.Vector3\r
     * @param isWorld 默认为felse DWG图纸坐标，设置为true是THREEJS坐标\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().zoomW(new THREE.Vector3(0,10,10), new THREE.Vector3(3,8,20), true)\r
     * \`\`\`\r
     */\r
    zoomW(minPt: THREE.Vector3, maxPt: THREE.Vector3, isWorld?: boolean, animate?: boolean, autoRegen?: boolean): void;\r
    /**\r
    * 保存当前显示范围.\r
    */\r
    saveZoom(): void;\r
    /**\r
  * 恢复当前显示范围.\r
  */\r
    recoverZoom(): void;\r
    /**\r
     * 把当前显示范围移到指定的位置,dCenX,dCenY是DWG图纸坐标。\r
     * @param minPt DWG图纸坐标1 THREE.Vector3\r
     * @param maxPt DWG图纸坐标2 THREE.Vector3\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().zoomCenter(new THREE.Vector3(0,10,10), new THREE.Vector3(3,8,20))\r
     * \`\`\`\r
     */\r
    zoomCenter(dCenX: number, dCenY: number): void;\r
    /**\r
     * 初始化控件默认加载后，显示视区范围，默认使用图纸转换时的显示范围。。\r
     * @param minPt DWG文档坐标1显示区域的左下角 THREE.Vector3\r
     * @param maxPt DWG文档坐标2显示区域的右上角 THREE.Vector3\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().initZoomW(new THREE.Vector3(0,10,10), new THREE.Vector3(3,8,20))\r
     *\r
     * \`\`\`\r
     */\r
    initZoomW(pt1Doc: THREE.Vector3, pt2Doc: THREE.Vector3): void;\r
    /**\r
     * 控件对象的事件监听\r
     * @param eventNaem 事件名称\r
     * @param fun 回调函数\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().addEvent("addResizeEvent", ()=> {})\r
     * Mx.MxFun.getCurrentDraw().addEvent("viewchange", ()=> {})\r
     * 图纸加载完成\r
     * Mx.MxFun.getCurrentDraw().addEvent("loadComplete", ()=> {})\r
     * 视区重绘事件.\r
     * Mx.MxFun.getCurrentDraw().addEvent("render", (renderer)=> {})\r
     * 视区大小被修改事件.,viewsize={viewWidth:viewWidth,viewHeight:viewHeight}\r
     * Mx.MxFun.getCurrentDraw().addEvent("viewsizechange", (viewsize)=> {})\r
     * 实体选择状态发生改变的事件.\r
     * Mx.MxFun.getCurrentDraw().addEvent("MxEntitySelectChange", (aryId:Array<number>)=> {})\r
     * \`\`\`\r
     */\r
    addEvent(eventNaem: keyof MxDrawEvents, fun: MxDrawEvents[keyof MxDrawEvents]): void;\r
    on(event: keyof MxDrawEvents, callback: MxDrawEvents[keyof MxDrawEvents]): void;\r
    off(event: keyof MxDrawEvents, callback: MxDrawEvents[keyof MxDrawEvents]): boolean;\r
    /**\r
     * 移除事件函数。\r
     * @param options { eventNaem: string, fun:any; }\r
     * @returns boolean\r
     * @example\r
     * \`\`\`\r
     */\r
    removeEventFuction(eventNaem: keyof MxDrawEvents, fun: MxDrawEvents[keyof MxDrawEvents]): boolean;\r
    /**\r
     * INI设置\r
     * @param options { EnableOsnapFunction: boolean; }\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxFun.getCurrentDraw().setIniset(options: { EnableOsnapFunction: true })\r
     *\r
     * \`\`\`\r
     */\r
    setIniset(options: iniConfig): void;\r
    /**\r
     * 返回当前视区的显示范围,cad坐标。\r
     * @returns {pt1:THREE.Vector3,pt2:THREE.Vector3,pt3:THREE.Vector3,pt4:THREE.Vector3}\r
     */\r
    getViewDocCoord(): {\r
        pt1: THREE.Vector3;\r
        pt2: THREE.Vector3;\r
        pt3: THREE.Vector3;\r
        pt4: THREE.Vector3;\r
    };\r
    /**\r
     * 屏幕坐标到ThreeJS坐标\r
     * @returns THREE.Vector3\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    screenCoord2World(x: number, y: number, z?: number): THREE.Vector3;\r
    /**\r
     * ThreeJS坐标到屏幕坐标,屏幕坐标的Y轴向下。坐标原点在左上角.\r
     * @returns THREE.Vector3\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    worldCoord2Screen(x: number, y: number, z: number): THREE.Vector3;\r
    /**\r
     * 屏幕坐标到DWG文档坐标\r
     * @returns THREE.Vector3\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    screenCoord2Doc(x: number, y: number): THREE.Vector3;\r
    /**\r
     * ThreeJS坐标长度到DWG文档坐标长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    worldCoordLong2Doc(l: number): number;\r
    /**\r
     * DWG文档坐标长度到ThreeJS坐标长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoordLong2World(l: number): number;\r
    /**\r
     * DWG文档坐标到ThreeJS坐标\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoord2World(x: number, y: number, z: number): THREE.Vector3;\r
    /**\r
     * DWG文档坐标到ThreeJS坐标\r
     * @returns THREE.Vector3\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoord2World2(pt: THREE.Vector3): THREE.Vector3;\r
    /**\r
     * ThreeJS坐标到DWG文档坐标\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    worldCoord2Doc(x: number, y: number, z: number): THREE.Vector3;\r
    /**\r
     * ThreeJS坐标到DWG文档坐标\r
     * @returns THREE.Vector3\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    worldCoord2Doc2(pt: THREE.Vector3): THREE.Vector3;\r
    /**\r
     * DWG文档坐标到屏幕坐标\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoord2Screen(x: number, y: number): THREE.Vector3;\r
    /**\r
     * 屏幕坐标长度到DWG文档坐标长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    screenCoordLong2Doc(l: number): number;\r
    /**\r
     * DWG文档坐标长度到屏幕坐标长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoordLong2Screen(l: number): number;\r
    /**\r
     * 屏幕坐标长度到ThreeJS坐标长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    screenCoordLong2World(l: number): number;\r
    /**\r
     * ThreeJS坐标长度到屏幕坐标长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    worldCoordLong2Screen(l: number): number;\r
    /**\r
     * 初始WebGL Renderer的创建参数,该函数在MxFun.createMxObject函数调用时，调用。\r
     * @param param\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * mxObj.initRendererParam({preserveDrawingBuffer: true})\r
     *\r
     * \`\`\`\r
     */\r
    initRendererParam(param: object): void;\r
    /**\r
     * 添加一个自定义实体到图上。\r
     * @param ent 自定义实体对象\r
     * @returns number 返回对象的id.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    addMxEntity(ent: MxDbEntity): number;\r
    /**\r
     * 得到图上当前选择的对象.\r
     * @returns Array<number> 返回对象的id数组.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getMxCurrentSelect(): Array<number>;\r
    /**\r
   * 得到图上当前选择的MxCAD对象.\r
   * @returns Array<number> 返回对象的id数组.\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   *\r
   * \`\`\`\r
   */\r
    getMxCADCurrentSelect(): Array<number>;\r
    /**\r
   * 得到图上当前选择对象时，选择范围点.\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   *\r
   * \`\`\`\r
   */\r
    getSelectPoints(): {\r
        point1: THREE.Vector3;\r
        point2: THREE.Vector3;\r
        isvalid: boolean;\r
    };\r
    /**\r
     * 把mxdraw对象添加到当前选择集中\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    addMxCurrentSelect(id: number, isFireSelectChange?: boolean, isDisplayGrid?: boolean): boolean;\r
    /**\r
   * 把MxCAD对象添加到当前选择中.\r
   * @returns void\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   *\r
   * \`\`\`\r
   */\r
    addMxCADCurrentSelect(id: number, isFireSelectChange?: boolean, isDisplayGrid?: boolean): boolean;\r
    /**\r
   * 触发选择状态改变事件\r
   * @returns void\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   *\r
   * \`\`\`\r
   */\r
    fireSelectChange(isMxCAD: boolean): void;\r
    /**\r
     * 清除当前所有选择\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    clearMxCurrentSelect(): boolean;\r
    /**\r
     *通过id获取绘制的对象.\r
     * @param id 返回对象的id\r
     * @returns MxDbEntity\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getMxEntity(id: number): MxDbEntity;\r
    /**\r
     * 查找某点位置处的用户自绘对象.\r
     * @param ptMouse 查找的点位 THREE.Vector3,默认是文档坐标\r
     * @returns MxDbEntity[] 返回用户自绘对象数组\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    findMxEntityAtPoint(ptMouse: THREE.Vector3, isDocCoord?: boolean, retWordDrawXDataCall?: (id: number, data: any) => void): Array<MxDbEntity>;\r
    /**\r
     *得到所有用户自绘对象.\r
     * @returns MxDbEntity[] 返回用户自绘对象数组\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getAllMxEntity(): Array<MxDbEntity>;\r
    /**\r
   * 设置鼠标中键移动视区。\r
   * @param iMethod 设置是否可以鼠标中键移动视区,iMethod= true,iMethod=1\r
   * iMethod = 0,中键不移动视区，左键移动\r
   * iMethod = 1,中键移动视区，左键不移动\r
   * iMethod = 2,中键移动视区，左键移动视区\r
   * @returns\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   *\r
   * \`\`\`\r
   */\r
    setViewMovementMethod(iMethod: boolean | number): void;\r
    /**\r
     * setMouseMiddlePan函数与setViewMovementMethod一样，为了兼容老程序暂没删除，将来会删除\r
     */\r
    setMouseMiddlePan(iPan: boolean | number): void;\r
    /**\r
     *重新设置ThreeJS Controls状态.\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    resetThreeJSControls(): void;\r
    /**\r
     * 启用或禁用鼠标中键滚动缩放视区\r
     * @param isEnable 是否启用\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    enableZoom(isEnable: boolean): void;\r
    /**\r
     * 启用或禁用鼠标移动视区\r
     * @param isEnable 是否启用\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    enablePan(isEnable: boolean): void;\r
    /**\r
     * 删除MxEntity\r
     * @param id 实体id.\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    eraseMxEntity(id: number): boolean;\r
    /**\r
     * 移除安视图坐标绘制的对象.\r
     * @param obj 对象.\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    removeViewObject(obj: THREE.Object3D): void;\r
    /**\r
     * 保存所有MxEntity的数据到json字符串.\r
     * @param\r
     * @returns json字符串\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    saveMxEntityToJson(isSaveToDWG?: boolean): string;\r
    /**\r
     * 保存所有MxEntity的数据到js对象.\r
     * @param\r
     * @returns js对象\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    saveMxEntityToObject(isSaveToDWG?: boolean): object;\r
    /**\r
     * 从json字符串恢复MxEntity\r
     * @param dataString json字符串.\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    loadMxEntityFromJson(dataString: string | object, aryPreloadSVG?: string[] | null): Promise<boolean>;\r
    /**\r
     * 删除所有的MxEntity\r
     * @param\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    eraseAllMxEntity(): void;\r
    /**\r
     * 把该控件对象，设置成当前控件.\r
     * @param\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    makeCurrent(): void;\r
    /**\r
     * 得到视区中心的文档坐标.\r
     * @param\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getViewCenterDocCoord(): THREE.Vector3;\r
    /**\r
     * 画布大小，自动修改到它父亲div大小。\r
     * @param\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    updateCanvasSize(): void;\r
    /**\r
     * 新建图纸.\r
     * @param ptin1,ptin2新建图纸的显示范围.\r
     * @returns\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    newFile(ptin1: THREE.Vector3 | number, ptin2: THREE.Vector3 | number, x2?: number, y2?: number): boolean;\r
    /**\r
     * 停止当前加载\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    stopAllLoading(): void;\r
    /**\r
     * 得到Three.js的 OrbitControls对象.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    getOrbitControls(): OrbitControls;\r
    /**\r
     * 禁用或启用视区的移动，放大，缩小等操作.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    enableViewControls(isEnable: boolean): void;\r
    /**\r
     * 得到当前图形数据库对象\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    getMxDatabase(): MxDbDatabase;\r
    /**\r
   * 得到临时标记绘制对象\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   * \`\`\`\r
   */\r
    getTempMarkDraw(): MxTempMarkDraw;\r
    /**\r
     * 设置鼠标中键的滚动的缩放比例,在PC上，默认值4，手机上默认值，1.5\r
     * 返回之前设置值。\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    setZoomSpeed(zoomSpeed: number): number;\r
    /**\r
     * 重新计数Renderer状态, this.renderer.info.reset();\r
     * @return\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     */\r
    resetRenderer(): any;\r
    /**\r
     * 设置服务器发送文件请求时，需要带的参数.注意：带参数后，可能会出现跨域访问失败\r
     * @return\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\` mxobj.setRequestHeader("{'data':'value1'}");\r
     */\r
    setRequestHeader(val: string): any;\r
    /**\r
     * 在MxCAD模式下，关闭与服务器的socket连接 。\r
     * @return\r
     * @example\r
     */\r
    closeWebSocket(): any;\r
    /**\r
     * CAD坐标到文档坐标.\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    cadCoord2Doc(x: number, y: number, z: number): THREE.Vector3;\r
    cadCoord2Doc2(pt: THREE.Vector3): THREE.Vector3;\r
    toSmallcoord(pt: THREE.Vector3): THREE.Vector3;\r
    toSmallcoord2(x: number, y: number, z?: number): THREE.Vector3;\r
    /**\r
     * 文档坐标坐标到CAD.\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoord2Cad(x: number, y: number, z: number): THREE.Vector3;\r
    docCoord2Cad2(pt: THREE.Vector3): THREE.Vector3;\r
    /**\r
   * 视区坐标到CAD坐标.\r
   * @returns number\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   *\r
   * \`\`\`\r
   */\r
    viewCoord2Cad(x: number, y: number, z: number): THREE.Vector3;\r
    /**\r
     *CAD坐标到视区坐标.\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    cadCoord2View(x: number, y: number, z: number): THREE.Vector3;\r
    /**\r
     *CAD长度到视区长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    cadCoordLong2View(l: number): number;\r
    /**\r
     *视区长度到CAD长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    viewCoordLong2Cad(l: number): number;\r
    /**\r
     *Doc长度到CAD长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    docCoordLong2Cad(l: number): number;\r
    /**\r
     *CAD长度到Doc长度\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    cadCoordLong2Doc(l: number): number;\r
    /**\r
     * 设置视区的旋转角度\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    setViewAngle(ang: number): void;\r
    /**\r
     * 得到视区的旋转角度\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getViewAngle(): number;\r
    /**\r
     * 得到系统变量\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getSysVar(sName: string): any;\r
    /**\r
     * 设置系统变量\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    setSysVar(sName: string, val: any): void;\r
    /**\r
     * 是否是CppMxCAD模式运行.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    isMxCAD(): boolean;\r
    /**\r
     * 得到所有布局名\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getAllLayoutName(): string[];\r
    /**\r
     * 得到数据库Json字符串数据.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getDtabaseJsonString(): string;\r
    /**\r
     * 跳转另一个布局页面.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    gotoLayout(layout: string): void;\r
    /**\r
     * 初始cpp对象.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    initMxCpp(mcppObjectImp: any): void;\r
    /**\r
     * 当前是否支持 opengles3\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    isWebgl2(): boolean;\r
    /**\r
     * 返回对象的ID.\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    getId(): number;\r
    /**\r
     * 添加鼠标键盘响应事件.\r
     * @example\r
     * \`\`\`typescript\r
     * // mousedown,touchstart,mouseup,mousemove,touchend,touchmove\r
     * //事件返回0,事件会继续传递，返回1事件不再被后续程序处理.\r
     * mxobj.addControlsEvent("touchstart",(event)=>{\r
     *         return 0;\r
     *       })\r
     *\r
     * \`\`\`\r
     */\r
    addControlsEvent(type: string, call: (event: any) => number, isFront?: boolean): number;\r
    /**\r
     * 清除图上所有数据\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     *\r
     * \`\`\`\r
     */\r
    clearAllObject(): any;\r
    /**\r
    * 设置点选支持多选，默认不支持。\r
    * @example\r
    * \`\`\`typescript\r
    *\r
    *\r
    * \`\`\`\r
    */\r
    setPointMultipleSelect(isMultipleSelect?: boolean): void;\r
    /**\r
    * 当前是否为白色白背景色\r
    * @example\r
    * \`\`\`typescript\r
    *\r
    *\r
    * \`\`\`\r
    */\r
    isWhiteViewColor(): boolean;\r
    /**\r
   * 根据当前颜色，自动对color进行反色，比如：背景色是白色，自动取黑色.\r
   * @example\r
   * \`\`\`typescript\r
   *\r
   *\r
   * \`\`\`\r
   */\r
    automaticInversionColor(color: number): number;\r
    /**\r
    * 启动或停止动画渲染\r
    * @example\r
    * \`\`\`typescript\r
    *\r
    *\r
    * \`\`\`\r
    */\r
    renderLoop(isLoop?: boolean): void;\r
}

/**\r
 * 使用canvas大小调整侦听器 (只有在 {@link MxFun.createMxObject} 的callbakc回调中调用才有效) 不调用该方法则默认使用window窗口监听从而自动调整画布大小，canvas大小或者其canvas父级元素变化不会自动调整。\r
 * > 注意：调用方法会加载[element-resize-event-polyfill](https://www.npmjs.com/package/element-resize-event-polyfill)}依赖包  可以通过resize监听dom元素大小变化 \`dom.addEventListener('resize', callback)\`\r
 * > 注意: MxFun.createMxObject 方法调用后默认会依据canvasParent父级元素作为自动调整的参考大小 所以传入的canvas也会默认监听canvas父级元素，适配大小请将canvas和canvasParent当作一个整体。\r
 * @param mxdrawObj 调用{@link MxFun.createMxObject}的callback回调函数拿到的 mxDraw 对象参数\r
 * @param canvas 调用{@link MxFun?.createMxObject}的callback回调函数拿到的dom.canvas作为要监听的元素\r
 * @param time 大小监听节流函数节流时间 默认 100\r
 * @param autoAdjust 是否自动调整大小 默认true\r
 * @param callback 监听回调\r
 */\r
declare function useCanvasResizeListener(mxdrawObj: MxDrawObject, canvas: HTMLCanvasElement, time?: number): Promise<void>;

/** @module McGePoint3d */\r
/**\r
 * McGePoint3d\r
 * @example \`\`\`typescript\r
 * \`\`\`\r
 */\r
interface McGePoint3d {\r
    x: number;\r
    y: number;\r
    z: number;\r
}

/** @module McGePoint3dArray */\r
\r
/**\r
 * McGePoint3dArray\r
 * @example \`\`\`typescript\r
 * \`\`\`\r
 */\r
interface McGePoint3dArray {\r
    /**\r
     *\r
     * @returns\r
     */\r
    append(pt: McGePoint3d): void;\r
}

interface MxassemblyType {\r
    McGePoint3d: any;\r
    McGePoint3dArray: any;\r
    McGeTool: any;\r
}\r
declare class MxassemblyClass {\r
    constructor();\r
    private mxassembly;\r
    private initImp;\r
    NewMcGePoint3d(x?: number, y?: number, z?: number): McGePoint3d;\r
    NewMcGePoint3dArray(aryPoint?: Array<THREE.Vector3>): McGePoint3dArray;\r
}\r
/**\r
 * Mxassembly 模块\r
 * 导出库时已实例化，只需要调用实例方法 例如：\r
 * \`\`\`typescript\r
 * \`\`\`\r
 */\r
declare const Mxassembly: MxassemblyClass;

declare class Store<T extends {}> {\r
    actions: {\r
        [x: string | number]: Function;\r
    };\r
    mutations: {\r
        [x: string | number]: Function;\r
    };\r
    state: T;\r
    status: string;\r
    events: PubSub<{\r
        "MxUiMain": (call: Function) => void;\r
        "MxMain": (call: Function) => void;\r
        "use:create:MxDbEntity": (obj: MxDbEntity) => void;\r
        "use:error": (e: any) => void;\r
        "MxDbEntityRegister": () => void;\r
        "stateChange": (state: any) => void;\r
    }>;\r
    constructor(params: {\r
        state: T;\r
        mutations: {\r
            [x: string | number]: Function;\r
        };\r
        actions: {\r
            [x: string | number]: Function;\r
        };\r
    });\r
    /**\r
     * 调用active方法 触发修改状态前的异步行为\r
     * @param actionKey 方法名称\r
     * @param payload 执行参数\r
     */\r
    dispatch<T>(actionKey: string | number, payload: T | any): boolean;\r
    /**\r
     * 调用mutation 的方法 修改state中属性的状态\r
     * @param mutationKey 方法名称\r
     * @param payload 执行参数\r
     */\r
    commit<T>(mutationKey: string | number, payload: T | any): boolean;\r
}

type stateType = {\r
    [x: string]: any;\r
    MxFun: any | null;\r
    Mxassembly: MxassemblyType | null;\r
    isCreateDrawObj: boolean;\r
};\r
declare const store: Store<stateType>;

/**\r
 * MxThreeJS 模块\r
 * ##### 使用说明:\r
 *\r
 * > 基于three.js实现创建直线对象、加载图片、SVG等功能，以下是使用的流程:\r
 * - 模块中大部分方法返回的{@link http://www.yanhuangxueyuan.com/threejs/docs/index.html#api/zh/core/Object3D | THREE.Object3D}类型继承创建的对象都可以通过取点对象{@link MrxDbgUiPrPointClass.value} 得到鼠标对应位置\r
 * - {@link MrxDbgUiPrPointClass.go}和{@link MrxDbgUiPrPointClass.goWhile}方法监听鼠标点击事件回调中通过\r
 * - {@link MxDrawObject.addObject} 方法添加到场景{@link MxDrawObject.getScene}中\r
 * - 最后调用{@link MxFun.updateDisplay} 更新视图显示完成\r
 *\r
 * > 提示: 在实际开发中MxThreeJS是配合着{@link MxDrawObject} 和 {@link MrxDbgUiPrPointClass} 完成绘制线段、文字、图片等功能,当然你也可以使用{@link http://www.yanhuangxueyuan.com/threejs/docs/index.html | three.js}来完成MxThreeJS模块的这些工作\r
 *\r
 * > 该模块导出库时已实例化为对象，只需要调用实例方法 例如：\r
 *\r
 * \`\`\`typescript\r
 * // html\r
 * <button id="line">line</button>\r
 *\r
 * // js\r
 * import Mx from "mxdraw"\r
 * import Three from "three"\r
 * Mx.loadCoreCode().then(()=> {\r
 *  Mx.MxFun.setMxServer()\r
 *  Mx.MxFun.createMxObject({\r
 *    callback(mxDraw, dom) {\r
 *      document.getElementById("line").onclick = ()=> {\r
 *       const getPoint = new Mx.MrxDbgUiPrPointClass()\r
 *       let lastPt, isLine\r
 *       getPoint.goWhile(()=> {\r
 *         const pt1 = getPoint.value()\r
 *         if(isLine) {\r
 *              const line = Mx.MxThreeJS.createLine(pt1, lastPt, 0xffffff)\r
 *              const currentDraw = Mx.MxFun.getCurrentDraw()\r
 *              currentDraw.addObject(line)\r
 *              Mx.MxFun.updateDisplay()\r
 *          }\r
 *          lastPt = pt1.clone()\r
 *          isLine = !isLine\r
 *       })\r
 *      }\r
 *    }\r
 * })\r
 * })\r
 * \`\`\`\r
 */\r
declare class MxThreeJS$1 {\r
    /**\r
     * 创建Three.js直线对象。\r
     * @param vPt1  {@link http://www.yanhuangxueyuan.com/threejs/docs/index.html#api/zh/math/Vector3 | THREE.Vector3} 点1\r
     * @param vPt2  {@link http://www.yanhuangxueyuan.com/threejs/docs/index.html#api/zh/math/Vector3 | THREE.Vector3} 点2\r
     * @param iColor 颜色Color\r
     * @returns  {@link http://www.yanhuangxueyuan.com/threejs/docs/index.html#api/zh/objects/Line |THREE.Line}\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.createLine(new Three.Vector3(1,10,0), new Three.Vector3(1,300,0), 0)\r
     * \`\`\`\r
     */\r
    createLine(vPt1: THREE.Vector3, vPt2: THREE.Vector3, iColor: number | string | THREE.Color): THREE.Line;\r
    /**\r
     * 创建Three.js圆对象。\r
     * @param mCenterPt 圆中心点\r
     * @param dRadius 圆半径\r
     * @param iColor 颜色\r
     * @returns THREE.Object3D\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.createCircle(new Three.Vector3(1,10,0), 10, 0)\r
     * \`\`\`\r
     */\r
    createCircle(mCenterPt: THREE.Vector3, dRadius: number, iColor: number | string | THREE.Color): THREE.Object3D;\r
    /**\r
     * 创建Three.js点对象。\r
     * @param mPt 点位置\r
     * @param iColor 颜色\r
     * @param size 大小\r
     * @returns THREE.Points\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.createPoint(new Three.Vector3(1,10,0), 0)\r
     * \`\`\`\r
     */\r
    createPoint(mPt: THREE.Vector3, iColor: number | string | THREE.Color, size?: number): THREE.Points;\r
    /**\r
     * 创建Three.js 文字\r
     * @param message 文字信息\r
     * @param pt 位置\r
     * @param iSize 文字大小\r
     * @param fAngle 旋转角度\r
     * @param iColor 颜色\r
     * @returns THREE.Sprite\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.creatTextSprite("hello",new Three.Vector3(1,10,0), 90, 60, 0)\r
     * \`\`\`\r
     */\r
    creatTextSprite: (message: string, pt: THREE.Vector3, iSize: number, fAngle: number, iColor: number | string | THREE.Color) => THREE.Sprite | null;\r
    /**\r
     * 计算creatTextSprite函数，创建的文字对象，的尺寸.\r
     * @param message 文字信息\r
     * @param iHeight 文字大小\r
     * @param iWidth 文字宽度.\r
     * @returns {spritewidth:number,spriteheight:number,textwidth:number,singleline:boolean}\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    clacTextSpriteSize: (message: string, iHeight: number, iWidth?: number) => {\r
        spritewidth: number;\r
        spriteheight: number;\r
        textwidth: number;\r
        singleline: boolean;\r
    };\r
    /**\r
     * 计算文字宽度.\r
     * @param message 文字信息\r
     * @param iHeight 文字大小\r
     * @returns number\r
     * @example\r
     * \`\`\`typescript\r
     *\r
     * \`\`\`\r
     */\r
    clacTextSize: (message: string, iHeight: number) => number;\r
    /**\r
     * 根据三角形数组，创建Three.js Mesh\r
     * @param points 由三个点组成的数组\r
     * @param iColor 颜色\r
     * @param opacity 透明度\r
     * @returns THREE.Mesh\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.createTriangle(\r
     * [new THREE.Vector3(1,2,2),new THREE.Vector3(1,65,4),new THREE.Vector3(12,2,2)],\r
     *  0,\r
     *  1\r
     * )\r
     * \`\`\`\r
     */\r
    createTriangle(points: Array<THREE.Vector3>, iColor: number | string | THREE.Color, opacity?: number): THREE.Mesh | null;\r
    /**\r
     * 创建连续直线\r
     * @param points 由多个点组成的数组\r
     * @param iColor 颜色\r
     * @returns THREE.Line\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.createLines([new THREE.Vector3(1,2,2),new THREE.Vector3(1,65,4),new THREE.Vector3(12,2,2)], 0)\r
     * \`\`\`\r
     */\r
    createLines(points: Array<THREE.Vector3>, iColor: number | string | THREE.Color): THREE.Line;\r
    /**\r
     * 创建虚线\r
     * @param points 由多个点组成的数组\r
     * @param iColor 颜色\r
     * @param dashSize 短划线的大小\r
     * @param gapSize 短划线之间的距离\r
     * @returns THREE.Line\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.createDashedLines([new THREE.Vector3(1,2,2),new THREE.Vector3(1,65,4),new THREE.Vector3(12,2,2)], 10, 20, 2)\r
     * \`\`\`\r
     */\r
    createDashedLines(points: Array<THREE.Vector3>, iColor: number | string | THREE.Color, dashSize: number, gapSize: number): THREE.Line;\r
    /**\r
     * 创建Image\r
     * @param pos 图片中心点位置,屏幕坐标，屏幕坐标的Y轴向上。坐标原点在左下角.\r
     * @param w 图片宽度\r
     * @param h 图片高度\r
     * @param imageUrlPath 图片URl地址\r
     * @param callResult 图片加载完成的回调 回调参数：THREE.Mesh\r
     * @returns void\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.createImage(new THREE.Vector3(12,2,2), 10, 20, "../img/icon.png", (mesh)=> {\r
     *      console.log(mesh)\r
     * })\r
     * \`\`\`\r
     */\r
    createImage: (pos: THREE.Vector3, w: number, h: number, imageUrlPath: string, callResult?: (mesh: THREE.Mesh | null) => void) => void | Promise<THREE.Mesh | null>;\r
    /**\r
     * 加载SVG\r
     * @param url SVG路径地址,该函数具有缓存功能，下次加载同样的图片，可以直接返回.\r
     * @param color 颜色\r
     * @param callResult SVG加载完成的回调 回调参数：THREE.Object3D和Array<THREE.MeshBasicMaterial>\r
     * @returns void | THREE.Object3D | null\r
     * @example\r
     * \`\`\`typescript\r
     * Mx.MxThreeJS.loadSVG("../img/icon.svg", 10, 20, 1.5, new THREE.Color(0xff0000), (threeobj, aryMeterial)=> {\r
     *      console.log(threeobj, aryMeterial)\r
     * })\r
     * \`\`\`\r
     */\r
    loadSVG: (url: string, color?: number | string | THREE.Color, callResult?: (threeobj: THREE.Object3D, aryMeterial: Array<THREE.MeshBasicMaterial>) => void, loadSet?: any) => Promise<THREE.Object3D | null>;\r
}

declare const MxThreeJS: MxThreeJS$1;

/** @module McGeTool */\r
\r
/**\r
 * McGeTool\r
 * @example \`\`\`typescript\r
 * \`\`\`\r
 */\r
declare class McGeToolClass {\r
    private mxgeTool;\r
    private initImp;\r
    /**\r
     * 计算闭合的区域面积\r
     * @param aryPoint 构成区域面积的顶点位置集合\r
     * @return number\r
     * @example\r
     * \`\`\`\r
     */\r
    calcArea(aryPoint: McGePoint3dArray | THREE.Vector3[]): number;\r
    /**\r
     * 判断点是否在一个闭合的多边形区域。\r
     * @param pt 点的坐标位置\r
     * @param aryPoint 闭合多边形区域的顶点坐标集合\r
     * @return any\r
     * @example\r
     * \`\`\` typescript\r
     *      let aryPoint:Array<THREE.Vector3> = [];\r
     *      aryPoint.push(new THREE.Vector3(0,0,0));\r
     *      aryPoint.push(new THREE.Vector3(0,100,0));\r
     *      aryPoint.push(new THREE.Vector3(100,100,0));\r
     *      aryPoint.push(new THREE.Vector3(100,0,0));\r
     *      let pt:THREE.Vector3 = new THREE.Vector3(150,150);\r
     *      if(McGeTool.pointInPolyline(pt,aryPoint) ){\r
     *        console.log("in");\r
     *      }\r
     * \`\`\`\r
     */\r
    pointInPolyline(pt: McGePoint3d, aryPoint: McGePoint3dArray | THREE.Vector3[]): boolean;\r
}\r
declare const McGeTool: McGeToolClass;

/** @module McGeTool */\r
\r
/**\r
 * MrxDbgUtils\r
 * 当常用的工具类.\r
 * @example \`\`\`typescript\r
 * \`\`\`\r
 */\r
declare class MrxDbgUtilsClass {\r
    private imp;\r
    private initImp;\r
    /**\r
     * 查找某个位置的对象.\r
     * @param pt 查找位置\r
     * @return 返回找到的对象id数组.\r
     * @example\r
     * \`\`\`\r
     */\r
    findEntAtPoint(pt: THREE.Vector3, filter?: any, mxObj?: MxDrawObject, isDocCoord?: boolean, retWordDrawXDataCall?: (id: number, data: any) => void): Promise<number[]>;\r
    /**\r
     * 交互选择对象.\r
     * @param strPrompt 提示字符串\r
     * @return 返回找到的对象id数组.\r
     * @example\r
     * \`\`\`\r
     */\r
    selectEnt(strPrompt?: string, filter?: any): Promise<number[]>;\r
    /**\r
     * 交互动态绘制一个矩形框.\r
     * @param pt1 矩形框绘制基点.\r
     * @param strPrompt 提示字符串\r
     * @example\r
     * \`\`\`\r
     */\r
    getCorner(pt1: THREE.Vector3, strPrompt?: string, drawSelectCroner?: boolean, detailedResult?: Function, isDisableAllTrace?: boolean): Promise<THREE.Vector3 | null>;\r
}\r
declare const MrxDbgUtils: MrxDbgUtilsClass;

interface MxPaintBrushPropsType {\r
    /** 基础颜色 */\r
    color?: MxColorType;\r
    /** 渲染顺序 */\r
    renderOrder?: number;\r
    /** 透明度 */\r
    opacity?: number;\r
    /** 是否可见 */\r
    visible?: boolean;\r
    /** 线段宽度 */\r
    dLineWidth?: number;\r
    /** 线段宽度是否按照屏幕尺寸计算 */\r
    lineWidthByPixels?: boolean;\r
    /** 实线虚线总段数 破折号之间的长度和间距。\r
     * @describe\r
     * 0: 表示实线了, 0.1:有10段, 0.5:表示有两段 1: 有一段*/\r
    dashArray?: number;\r
    /** 虚线长度和实线长度的比率 (0 -全实线，1 -全虚线[不可见])\r
     * @describe\r
     * 例如取值为0.5, 虚线长度 / (实线长度 + 虚线长度) = 0.5,表示，实线与虚线长度相等*/\r
    dDashRatio?: number;\r
    /** 设置图层 */\r
    layer?: string;\r
    /** 自定义数据（必须保证JSON.parse(JSON.stringify(userData))不报错） */\r
    userData?: {\r
        [key: string]: any;\r
    };\r
    /** 其它自定义对象上的属性 */\r
    [propName: string]: any;\r
}\r
/** 自定义对象绘制时使用全局默认属性的画笔对象 */\r
declare const MxPaintBrush: {\r
    /** 获取当前的画笔属性 */\r
    getProps(): MxPaintBrushPropsType;\r
    /** 设置当前画笔属性 */\r
    setProps(props: MxPaintBrushPropsType): MxPaintBrushPropsType;\r
    /** 使用画笔设置自定义对象的默认属性\r
     * @param entity MxDbEntity类的实例\r
     *  */\r
    use(entity: MxDbEntity): MxDbEntity & MxPaintBrushPropsType;\r
};

/**\r
 * McEdGetPointWorldDrawObject 用于构建一个动态绘制回调对象\r
 * @example \`\`\`typescript\r
 *  Mx.McEdGetPointWorldDrawObject()\r
 * \`\`\`\r
 */\r
declare class McEdGetPointWorldDrawObject {\r
    [x: string]: any;\r
    private _McEdGetPointWorldDraw;\r
    constructor();\r
    /**\r
     * 绘制圆\r
     * @param cen 圆心位置\r
     * @param dRadius 圆半径\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * pWorldDraw.drawCircle(new HTREE.Vector3(0,100,5), 6)\r
     * \`\`\`\r
     *\r
     */\r
    drawCircle(cen: THREE.Vector3, dRadius: number): void;\r
    /**\r
     * 绘制直线\r
     * @param pt1 开始点\r
     * @param pt2 结束点\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * pWorldDraw.drawLine(new HTREE.Vector3(0,100,5), new HTREE.Vector3(0,600,5))\r
     * \`\`\`\r
     *\r
     */\r
    drawLine(pt1: THREE.Vector3, pt2: THREE.Vector3): void;\r
    /**\r
     * 绘制一个填充区域\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     *\r
     */\r
    drawSolid(points: THREE.Vector3[], opacity?: number): void;\r
    /**\r
     * 绘制矩形框\r
     * @param pt1 矩形框对角点1\r
     * @param pt2 矩形框对角点2\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * pWorldDraw.drawRect(new HTREE.Vector3(0,100,5), new HTREE.Vector3(0,600,5))\r
     * \`\`\`\r
     *\r
     */\r
    drawRect(pt1: THREE.Vector3, pt2: THREE.Vector3): void;\r
    /**\r
     * 绘制一个Three.js对象.\r
     * @param ent THREE.Object3D对象\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * pWorldDraw.drawEntity(new THREE.Object3D()))\r
     * \`\`\`\r
     *\r
     */\r
    drawEntity(ent: THREE.Object3D | null, renderOrder?: number): void;\r
    /**\r
     * 绘制一个MxCAD数据库对象\r
     * @param mcdbEntity MxCAD数据库对象\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     *\r
     */\r
    drawMcDbEntity(mcdbEntity: any, isUseDatabaseCurrentProperties?: boolean): any;\r
    /**\r
     * 绘制一个MxCAD数据库对象\r
     * @param mcdbEntity MxCAD数据库对象\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * \`\`\`\r
     *\r
     */\r
    drawMcDbLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): any;\r
    /**\r
     * 绘制一个文档对象\r
     * @param sText 文本\r
     * @param iSize 大小\r
     * @param dAngle 角度\r
     * @param pt 位置\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * pWorldDraw.drawText("字符串" ,36 ,90 ,new HTREE.Vector3(0,100,5))\r
     * \`\`\`\r
     *\r
     */\r
    drawText(sText: string, iSize: number, dAngle: number, pt: THREE.Vector3): void;\r
    /**\r
     * 设置动态绘制回调函数。\r
     * @param call 回调函数 currentPoint 回调参数 当前位置 pWorldDraw 回调参数文档绘制对象\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * pWorldDraw.setDraw((currentPoint, pWorldDraw)=> {\r
     *\r
     * })\r
     * \`\`\`\r
     */\r
    setDraw(call: (currentPoint: THREE.Vector3, pWorldDraw?: any) => void): void;\r
    /**\r
     * 设置绘制对象颜色.\r
     * @param iColor 颜色\r
     * @returns void\r
     * @example\r
     * \`\`\` typescript\r
     * pWorldDraw.setColor(0xFFFFFF)\r
     * \`\`\`\r
     */\r
    setColor(iColor: number | string | THREE.Color): void;\r
    /**\r
     * 得到绘制对象颜色.\r
     * @returns 颜色\r
     * @example\r
     * \`\`\` typescript\r
     * pWorldDraw.getColor()\r
     * \`\`\`\r
     */\r
    getColor(): number | string | THREE.Color;\r
    /**\r
     * 动态绘制一个自定义实体\r
     * @returns\r
     * @example\r
     * \`\`\` typescript\r
     *\r
     * \`\`\`\r
     */\r
    drawCustomEntity(ent: any, renderOrder?: number): void;\r
}

/** @module MrxDbgUiPrBaseReturn*/\r
/**\r
 * MrxDbgUiPrBaseReturn枚举\r
 * @description\r
 * 用于适配{@link MrxDbgUiPrPoint.go} 和 {@link MrxDbgUiPrPoint.goWhile} 方法中的回调参数\`status\`\r
 * @example\r
 * \`\`\`\r
 * const Point = new Mx.MrxDbgUiPrPoint()\r
 * Point.go((status)=> {\r
 *  if(Mx.MrxDbgUiPrBaseReturn.kCancel === status) {\r
 *    // 取消\r
 *  }\r
 * })\r
 *\r
 * \`\`\`\r
 * @enum\r
 * */\r
declare enum MrxDbgUiPrBaseReturn {\r
    /** 取消 */\r
    kCancel = -2,\r
    /** 空输入，当输入关键字和实体时会返回此值 */\r
    kNone = -1,\r
    /** 获取用户输入成功 */\r
    kOk = 0,\r
    /** 用户输入了关键字*/\r
    kKeyWord = 1\r
}

/** @module MrxDbgUiPrPointClass */\r
\r
/** 鼠标样式类型 */\r
declare enum MxCursorType {\r
    /** 正常 */\r
    kNormal = 0,\r
    /** 矩形 */\r
    kRect = 1,\r
    /**十字 */\r
    kCross = 2\r
}\r
/** 动态输入显示类型 */\r
declare enum DynamicInputType {\r
    /** 不进行动态显示 */\r
    kNoInput = 0,\r
    /** X,Y坐标输入 */\r
    kXYCoordInput = 1,\r
    /** 输入与前一个点的距离和与水平的夹角,并能动态跟踪. */\r
    kDistanceInput = 2,\r
    /** 仅显示提示 */\r
    kDynTip = 3,\r
    /** 自动确定输入类型. */\r
    kAutoInput = 4\r
}\r
/** 当前交互操作返回值类型 */\r
declare enum DetailedResult {\r
    /** 未知操作 */\r
    kUnknown = 1,\r
    /** 移动触摸按下 */\r
    kTouchDownIn = 2,\r
    /** 移动触摸抬起 */\r
    kTouchUpIn = 3,\r
    /** 鼠标左键输入。 */\r
    kMouseLeftIn = 4,\r
    /** 鼠标左键输入抬起。 */\r
    kMouseLeftUpIn = 5,\r
    /** 鼠标右键输入 */\r
    kMouseRightIn = 6,\r
    /** 命令行输入有效内容退出,比如输入了关键字 */\r
    kKeyIn = 7,\r
    /** 坐标输入（文字提示输入对应数字也行） */\r
    kCoordIn = 8,\r
    /** 空回车输入 */\r
    kNullEnterIn = 9,\r
    /** 空回空格输入 */\r
    kNullSpaceIn = 10,\r
    /** ESC输入 */\r
    kEcsIn = 11,\r
    /** 新命令，使用当前命令退出. */\r
    kNewCommadIn = 12,\r
    /** 程序终止. */\r
    kCodeAbort = 13\r
}\r
/** 用户输入函数控制操作符 */\r
declare enum UserInputControls {\r
    /** 由正射模式控制 */\r
    kGovernedByOrthoMode = 1,\r
    /** 接受用户空输入 */\r
    kNullResponseAccepted = 2,\r
    /** 不回显Ctrl c的取消 */\r
    kDontEchoCancelForCtrlC = 4,\r
    /** 不更新最后一点 */\r
    kDontUpdateLastPoint = 8,\r
    /** 无图纸限制检查 */\r
    kNoDwgLimitsChecking = 16,\r
    /** 不接受0输入 */\r
    kNoZeroResponseAccepted = 32,\r
    /** 不接受负数输入 */\r
    kNoNegativeResponseAccepted = 64,\r
    /** 接受3d坐标 */\r
    kAccept3dCoordinates = 128,\r
    /** 接受鼠标向上移动作为指针 */\r
    kAcceptMouseUpAsPoint = 256,\r
    /** 任何空格都会终止输入 */\r
    kAnyBlankTerminatesInput = 512,\r
    /** 首字母空格终止输入 */\r
    kInitialBlankTerminatesInput = 1024,\r
    /** 接受其他输入字符串 */\r
    kAcceptOtherInputString = 2048,\r
    /** 由UCS检测控制 */\r
    kGovernedByUCSDetect = 4096,\r
    /** 无z方向正交 */\r
    kNoZDirectionOrtho = 8192,\r
    /** 接受空格输入 */\r
    kSpacesInAccepted = 16384\r
}\r
declare class MrxDbgUiPrBase {\r
    protected imp: any;\r
    protected status: MrxDbgUiPrBaseReturn;\r
    constructor(imp: any);\r
    /**\r
     * 返回关键字列表\r
     * @returns 关键词列表\r
     */\r
    keyWords(): string;\r
    /**\r
     * 设置关键字列表\r
     * @param keyWordList 关键词列表\r
     * @returns void\r
     */\r
    setKeyWords(keyWordList: string): void;\r
    /**\r
     * 提示字符串\r
     * @returns 提示消息\r
     */\r
    message(): string;\r
    /**\r
     * 设置提示字符串\r
     * @param message 提示消息\r
     * @returns 提示消息\r
     */\r
    setMessage(message: string): void;\r
    /**\r
     * 清除上一次的输入点\r
     * @returns 选择的关键字\r
     */\r
    clearLastInputPoint(): void;\r
    /**\r
     * 设置上一次的输入点。\r
     * @returns 选择的关键字\r
     */\r
    setLastInputPoint(pt: THREE.Vector3 | undefined): void;\r
    /**\r
     * 返回用户选择的关键字\r
     * @returns 选择的关键字\r
     */\r
    keyWordPicked(): string;\r
    /**\r
     * 测试某一个关键字是否被用户选择\r
     * @param matchKeyWord 要检测的关键字\r
     * @returns true为真\r
     */\r
    isKeyWordPicked(matchKeyWord: string): boolean;\r
    /**\r
     * 设置交互过程的动态绘制调用对象\r
     * @param pDraw {@link McEdGetPointWorldDrawObject | 动态绘制调用对象}\r
     * @returns void\r
     */\r
    setUserDraw(pDraw: McEdGetPointWorldDrawObject | ((currentPoint: THREE.Vector3, pWorldDraw: McEdGetPointWorldDrawObject) => void)): void;\r
    /**\r
     * 返回交互操作退出的详细原因\r
     */\r
    getDetailedResult(): DetailedResult;\r
    getStatus(): MrxDbgUiPrBaseReturn;\r
    /**\r
     * 把动态绘制的对象，保留到图上。\r
     * @param callAddEntity 回调参数ent 类型：THREE.THREE.Object3D\r
     * @returns 点对象 DWG图纸坐标\r
     */\r
    drawReserve(callAddEntity?: (ent: THREE.Object3D) => void): void;\r
    /**\r
     * 设置需要的Touche输入类型,默认值是 {@link MxType.InputToucheType.kGetBegan}\r
     */\r
    setInputToucheType(toucheType: number): void;\r
    /**\r
     * 返回需要的Touche输入类型\r
     */\r
    getInputToucheType(): number;\r
    /**\r
     * 设置光标类型\r
     */\r
    setCursorType(type: MxCursorType): void;\r
    /**\r
     * 返回光标类型\r
     */\r
    getCursorType(): MxCursorType;\r
    /**\r
     * 设置动态输入类型\r
     */\r
    setDynamicInputType(type: DynamicInputType): void;\r
    /**\r
     * 返回动态输入类型\r
     */\r
    getDynamicInputType(): DynamicInputType;\r
    /**\r
     * 是否禁用动态输入框\r
     */\r
    isDisableDynInput(): boolean;\r
    /**\r
     * 设置是否禁用动态输入框\r
     */\r
    setDisableDynInput(isDisable: boolean): void;\r
    /**\r
     * 设置是否禁用捕捉\r
     */\r
    setDisableOsnap(isDisable: boolean): void;\r
    /**\r
     * 是否输入点遍移一个距离\r
     */\r
    isOffsetInputPostion(): boolean;\r
    /**\r
     * 设置输入点遍移一个距离\r
     */\r
    setOffsetInputPostion(isOffset: boolean): void;\r
    /**\r
     * 是否禁用捕捉\r
     */\r
    isDisableOsnap(): boolean;\r
    setDisableDynamicTrace(isDisable: boolean): void;\r
    isDisableDynamicTrace(): boolean;\r
    setDisablePolarAxisTrace(isDisable: boolean): void;\r
    isDisablePolarAxisTrace(): boolean;\r
    setDisableGridTrace(isDisable: boolean): void;\r
    isDisableGridTrace(): boolean;\r
    setDisableOrthoTrace(isDisable: boolean): void;\r
    isDisableOrthoTrace(): boolean;\r
    disableAllTrace(isDisable?: boolean): void;\r
    /**\r
     * 返回输入控制设置，UserInputControls\r
     */\r
    userInputControls(): number;\r
    /**\r
     * 设置输入控制设置，UserInputControls\r
     */\r
    setUserInputControls(contros: number): void;\r
}\r
/**\r
 * MrxDbgUiPrPoint 用于构建一个取点对象\r
 * @example \`\`\`typescript\r
 *  new Mx.MrxDbgUiPrPoint()\r
 * \`\`\`\r
 */\r
declare class MrxDbgUiPrPoint extends MrxDbgUiPrBase {\r
    constructor();\r
    /**\r
     * 得以获取的点对象，Three.js坐标\r
     * @returns 点对象 THREE.THREE.Vector3\r
     */\r
    value(): THREE.Vector3;\r
    /**\r
     * 得到 MxCAD下CAD图纸坐标.\r
     * @returns 点对象 MdGePoint3d\r
     */\r
    getCADValue(): any;\r
    /**\r
     * 得以获取的点对象，DWG图纸坐标.\r
     * @returns 点对象 DWG图纸坐标\r
     */\r
    valueDocCoord(): THREE.Vector3;\r
    /**\r
     * 得到动态拖动的基点\r
     * @returns 基点 THREE.THREE.Vector3\r
     */\r
    basePt(): THREE.Vector3;\r
    /**\r
     * 设置动态拖动的基点\r
     * @param basePt 基点 THREE.THREE.Vector3\r
     * @returns 点对象 DWG图纸坐标\r
     */\r
    setBasePt(basePt: THREE.Vector3): void;\r
    /**\r
     * 设置使用动态拖动的基点\r
     * @param useIt 是否设置 默认为false\r
     * @returns void\r
     */\r
    setUseBasePt(useIt: boolean): void;\r
    /**\r
     * 开始动态拖动\r
     * @param retcall  回调参数status {@link MrxDbgUiPrBaseReturn | 状态值}\r
     * @returns void\r
     */\r
    go(retcall?: (status: MrxDbgUiPrBaseReturn) => void): Promise<THREE.Vector3 | null>;\r
    /**\r
     * 动态拖动，连续取点，直到ESC退出。\r
     * @param retcall 回调参数status {@link MrxDbgUiPrBaseReturn | 状态值}\r
     * @param exitcall 回调参数status {@link MrxDbgUiPrBaseReturn | 状态值}\r
     * @returns void\r
     */\r
    goWhile(retcall: (status: MrxDbgUiPrBaseReturn) => any, exitcall?: (status: MrxDbgUiPrBaseReturn) => any): void;\r
    /**\r
     * 停止当前动态拖动\r
     * @returns void\r
     */\r
    abort(cause: DetailedResult): void;\r
}

declare function drawMxDbImage(): void;

/**\r
 * MxDbImage 图片对象.\r
 */\r
declare class MxDbImage extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbImage;\r
    private pt1;\r
    private pt2;\r
    private imagePath;\r
    private isLoadMaterialFromPath;\r
    private material;\r
    private angle;\r
    getTypeName(): string;\r
    /** 返回图片的旋转角度,相对图片中心点旋转.\r
     * @param\r
     * */\r
    getAngle(): number;\r
    /** 设置图片的旋转角度,相对图片中心点旋转.\r
     * @param\r
     * */\r
    setAngle(angle: number): void;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /** 设置图片路径\r
     * @param sPath 路径\r
     * */\r
    setImagePath(sPath: string): void;\r
    /** 获取图片路径 */\r
    getImagePath(): string;\r
    /** 设置图片材质\r
     * @param material  THREE.MeshLambertMaterial\r
     * */\r
    setMaterial(material: THREE.MeshLambertMaterial): void;\r
    /** 加载图片材质\r
     * */\r
    loadMaterial(imagePath?: string): void;\r
    /** 设置图片对角点1\r
     * @param pt1 THREE.Vector3坐标点\r
     * */\r
    setPoint1(pt1: THREE.Vector3): void;\r
    /** 获得图片对角点1 */\r
    getPoint1(): THREE.Vector3;\r
    /** 设置图片对角点2\r
     * @param pt2 THREE.Vector3坐标点\r
     *  */\r
    setPoint2(pt2: THREE.Vector3): void;\r
    /** 获得图片对角点2 */\r
    getPoint2(): THREE.Vector3;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    create(): MxDbEntity;\r
}

/** @module MxDbSVG*/\r
/**\r
 * MxDbSVGText 为SVG提供文字数据\r
 * */\r
declare class MxDbSVGText {\r
    /** 文字的位置 */\r
    txtPos: THREE.Vector3;\r
    /** 文字内容 */\r
    txt: string;\r
    /** 文字高度 */\r
    txtHeight: number;\r
    /** 文字颜色 */\r
    color: number | string | THREE.Color | undefined;\r
    /** THREE.Sprite */\r
    _txtObject: THREE.Sprite | null;\r
    /** 比例 */\r
    _txtAspectRatio: number;\r
    /** 文字是否能独立移动 */\r
    move: boolean;\r
    /** 文字移动到距图片远处，自动绘制一个连接线 */\r
    drawConnectingLine: boolean;\r
    /** 连接线的临时绘制对象 */\r
    _connectingLine: THREE.Line | null;\r
    /** 字体样式 */\r
    fontStyle: string;\r
    /** 下划线 */\r
    underline: boolean;\r
    /** 下划线的临时绘制对象 */\r
    _underLine: THREE.Line | null;\r
}

declare function drawMxDbSVG(): Promise<void>;

/** @module MxDbSVG*/\r
\r
/**\r
 * MxDbSVG 绘制SVG图形.\r
 */\r
declare class MxDbSVG extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbSVG;\r
    private svgPos;\r
    private svg;\r
    private svgPath;\r
    private svgSize;\r
    private svgAlignmentRatio;\r
    private imagePath;\r
    private isLoadMaterialFromPath;\r
    private material;\r
    /** 延z轴旋转的数值 */\r
    svgRotate: number;\r
    /** 是否倒置SVG图形 */\r
    svgReverse: boolean;\r
    svgMirror: boolean;\r
    private svgChildColor;\r
    svgMargin: THREE.Vector2;\r
    private isSvgDirtyLocation;\r
    private isLoadFromPath;\r
    private aryText;\r
    private svgBoxSize;\r
    /** 固定尺寸，图片和文字大小，取屏幕像素绘图单位。 */\r
    fixedSize: boolean;\r
    /**使用svg的颜色 */\r
    useSvgColor: boolean;\r
    setSvgChildColor(aryColor: number[]): void;\r
    getSvgChildColor(): number[];\r
    private calcVewSize;\r
    calcSvgDrawRect(mxObj: MxDrawObject): any;\r
    private calcImageDrawRect;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /**\r
     * 设置SVG的路径\r
     * @param path 路径\r
     * @param preload 是否提前加载SVG\r
     * */\r
    setSvgPath(path: string, preload?: boolean): Promise<void>;\r
    /**\r
     * 获取SVG的路径\r
     * */\r
    getSvgPath(): string;\r
    /**\r
     * 设置SVG显示位置\r
     * @param pos  THREE.Vector3\r
     * */\r
    setSvgPostion(pos: THREE.Vector3): void;\r
    /** 设置图片路径\r
     * @param sPath 路径\r
     * */\r
    setImagePath(sPath: string, material?: THREE.MeshLambertMaterial): void;\r
    /** 获取图片路径 */\r
    getImagePath(): string;\r
    /**\r
     * 获取SVG显示位置\r
     * */\r
    getSvgPostion(): THREE.Vector3;\r
    /**\r
     * 设置SVG大小\r
     * @param size THREE.Vector2 x表示宽度y表示高度\r
     * */\r
    setSvgSize(size: THREE.Vector2): void;\r
    getSvgSize(): THREE.Vector2;\r
    /** 设置SVG 的调整比例\r
     * @param alignmentRatio THREE.Vector2\r
     *  */\r
    setSvgAlignmentRatio(alignmentRatio: THREE.Vector2): void;\r
    getSvgAlignmentRatio(): THREE.Vector2;\r
    /** 获取文字数组下标中的文字\r
     * @param index 数组下标\r
     * @return {@link MxDbSVGText}\r
     *  */\r
    getText(index: number): MxDbSVGText | null;\r
    /** 添加文字\r
     * @param txt {@link MxDbSVGText}\r
     *  */\r
    addText(txt: MxDbSVGText): void;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    private calcSvgPosition;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    create(): MxDbSVG;\r
    transformBy(mat: THREE.Matrix4): void;\r
    getTypeName(): string;\r
    /**\r
     * 设置颜色\r
     * @param color 颜色值\r
     * */\r
    setColor(color: number | string | THREE.Color): this;\r
    /**\r
     * 设置svg对象\r
     * */\r
    setSvg(svg: any): void;\r
    private calcSvgBoxSize;\r
    reComputeSVG(): void;\r
    protected onViewChange(): boolean;\r
}

declare function drawMxDbPolyline(): void;

/**\r
 * MxDbPolyline 多义线对象(多个点构成的线段)\r
 */\r
declare class MxDbPolyline extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbPolyline;\r
    /** 顶点位置集合 */\r
    points: THREE.Vector3[];\r
    getTypeName(): string;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    create(): MxDbEntity;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    /** 添加顶点位置 */\r
    addVertexAt(pt: THREE.Vector3): void;\r
    /** 顶点数量 */\r
    numVerts(): number;\r
    getPointAt(index: number): THREE.Vector3 | null;\r
    /**  设置顶点\r
     * @param index 替换的顶点在当前points集合的下标位置\r
     * @param pt 要替换设置的顶点\r
     *  */\r
    setPointAt(index: number, pt: THREE.Vector3): boolean;\r
}

declare function drawMxDb2LineAngularDimension(): MxDb2LineAngularDimension;

declare class MxDb2LineAngularDimension extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDb2LineAngularDimension;\r
    /**\r
     * MxDb2LineAngularDimension\r
     * 显示角度测量的图形\r
     * @param  options.points [point1(起始点)、point2(角顶点)、point3(结束点)]\r
     * @param  options.colors [起始线段颜色, 结束线段颜色, 标注角度圆弧颜色, 文字标注的角度颜色]\r
     * @example\r
     * \`\`\` typescript\r
     * const draw = Mx.MxFun.getCurrentDraw();\r
     * const points = [ getPoint.value(),\r
     *          getPoint.value().add(new THREE.Vector3(8880, 0, 0)),\r
     *          getPoint.value().add(new THREE.Vector3(0, 6666, 0)),\r
     *       ]\r
     * const colors = ['#F00880','#00ff1a', void 0, 0XFF0000]\r
     * const obj = new Mx.MxDb2LineAngularDimension().setPoints(points).setColor(colors).setLineWidth(6)\r
     * draw.addMxEntity(obj)\r
     * \`\`\`\r
     **/\r
    constructor(options?: {\r
        /** 传入三个位置THREE向量 分别对应 属性: point1(起始点)、point2(角顶点)、point3(结束点) 计算角度 */\r
        points?: THREE.Vector3[];\r
        /**  colors 各标注的颜色设置:\r
         * [起始线段颜色, 结束线段颜色, 标注角度圆弧颜色, 文字标注的角度颜色]\r
         * 某一项为null或undefined采用绘制颜色 */\r
        colors?: UnstableColor[];\r
    });\r
    point1: three.Vector3;\r
    point2: three.Vector3;\r
    point3: three.Vector3;\r
    /**\r
     * colors 各标注的颜色设置:\r
     * [起始线段颜色, 结束线段颜色, 标注角度圆弧颜色, 文字标注的角度颜色]\r
     * 某一项为null或undefined采用绘制颜色\r
     * */\r
    colors: UnstableColor[];\r
    private calculateLineAngle;\r
    /**\r
     * 设置point1 、 point2、point3 向量位置\r
     * @param { THREE.Vector3[] } points\r
     */\r
    setPoints(points: THREE.Vector3[]): this;\r
    /**\r
     * 设置颜色组合\r
     * @param colors [起始线段颜色, 结束线段颜色, 标注角度圆弧颜色, 文字标注的角度颜色]\r
     * 某一项为null或undefined采用绘制颜色 || 单颜色\r
     * */\r
    setColor(colors: UnstableColor[] | MxColorType): this;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): three.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): any;\r
    create(): MxDb2LineAngularDimension;\r
    transformBy(mat: THREE.Matrix4): void;\r
    getTypeName(): string;\r
}

/** 简单颜色滤镜矩阵 */\r
interface ChannelParamTypes {\r
    r?: number;\r
    g?: number;\r
    b?: number;\r
}\r
declare class MxFilters {\r
    private uniformObj;\r
    private filtersStr;\r
    private filtersTypes;\r
    private VSHADER_SOURCE;\r
    private FSHADER_SOURCE;\r
    private _matrix;\r
    /**\r
     * 过滤或增强某个颜色通道\r
     * @param {ChannelParamTypes}\r
     * */\r
    channel({ r, g, b }: ChannelParamTypes): this;\r
    /**\r
     * 改变亮度\r
     * @param {number} p\r
     * p = 0 全暗，p > 0 且 p < 1 调暗，p = 1 原色， p > 1 调亮\r
     * */\r
    brightness(p: number): this;\r
    /**\r
     * 饱和度\r
     * @param {number} p\r
     * p = 0 完全灰度化，p = 1 原色，p > 1 增强饱和度\r
     * */\r
    saturate(p: number): this;\r
    /**\r
     * 对比度\r
     * @param {number} p\r
     *  p = 1 原色， p < 1 减弱对比度，p > 1 增强对比度\r
     * */\r
    contrast(p: number): this;\r
    /**\r
     * 透明度\r
     * @param {number} p\r
     * p = 0 全透明，p = 1 原色\r
     * */\r
    opacity(p: number): this;\r
    /**\r
     * 反色\r
     * @param {number} p\r
     * p = 0 原色， p = 1 完全反色\r
     * */\r
    invert(p: number): this;\r
    /**\r
     * 灰度\r
     * @param {number} p 0~1\r
     * */\r
    grayscale(p?: number): this;\r
    /**\r
     * 深褐色\r
     * @param {number} p 0~1\r
     * */\r
    sepia(p?: number): this;\r
    /**\r
     * 色相旋转，将色调沿极坐标转过deg角度\r
     * @param {number} deg 0~360\r
     * */\r
    hueRotate(deg: number): this;\r
    /**\r
     * 色相旋转，将色调沿极坐标转过deg角度\r
     * @param {number} deg 0~360\r
     * */\r
    /**\r
     * 卷积\r
     * @param {Matrix3} cKernel 3*3的矩阵\r
     * @param {number} stStep 1 / 9\r
     * @param {number} scaleFactor 521\r
     * */\r
    convolution(cKernel: THREE.Matrix3, stStep?: number, scaleFactor?: number): this;\r
    /**\r
     * 重置所有滤镜效果\r
     * */\r
    reset(): this;\r
    _getFilterShaderData(texture: THREE.Texture): {\r
        uniforms: {\r
            e_Texture: {\r
                value: three.Texture;\r
            };\r
            colorMatrix: {\r
                value: three.Matrix4;\r
            };\r
        };\r
        vertexShader: string;\r
        fragmentShader: string;\r
    };\r
    _getFilterColor(color?: string | number | THREE.Color, opacity?: number): three.Color;\r
    /** 转成JSON字符串 */\r
    toJSON(): string;\r
    /** 还原序列化的数据 */\r
    static fromJSON(json: string): MxFilters;\r
}

/** 动态绘制形状\r
 * 基于THREE.Shape计算实现的形状\r
 * 通过扩展可以实现各种2d 3d形状\r
 *  **/\r
declare class MxDbShape extends MxDbEntity {\r
    protected _paths: THREE.CurvePath<THREE.Vector3 | THREE.Vector2>;\r
    protected points: THREE.Vector3[];\r
    protected closedLine: THREE.Curve<THREE.Vector3>;\r
    protected isLoadMaterialFromPath: boolean;\r
    protected material: THREE.MeshLambertMaterial | null;\r
    /** 描边颜色 */\r
    stroke: UnstableColor;\r
    setStroke(stroke: UnstableColor): this;\r
    /** 描边线段的宽度 */\r
    strokeLineWidth: number;\r
    setStrokeLineWidth(strokeLineWidth: number): this;\r
    /** 描边是否为虚线 */\r
    isStrokeDashLine: boolean;\r
    setIsStrokeDashLine(isStrokeDashLine: boolean): this;\r
    /** 填充 */\r
    isFill: boolean;\r
    setIsFill(isFill: boolean): this;\r
    /** 填充图片路径 */\r
    protected _fillImageSrc: string | false | null | undefined;\r
    get fillImageSrc(): string | false | null | undefined;\r
    set fillImageSrc(src: string | false | null | undefined);\r
    /**\r
     * 设置图片值\r
     * fillImageSrc 当设置为null | false 时取消图片填充\r
     * */\r
    setFillImageSrc(fillImageSrc: string | null | false | undefined): this;\r
    /**\r
     * fillImageParam 填充背景图片的参数设置(如果使用了滤镜则部分参数功能失效)\r
     * */\r
    fillImageParam: {\r
        offset?: THREE.Vector2;\r
        repeat?: THREE.Vector2;\r
        rotation?: number;\r
        center?: THREE.Vector2;\r
    } | undefined;\r
    setFillImageParam(param: MxDbShape['fillImageParam']): void;\r
    /** 线段细分数值 */\r
    curveSegments: number;\r
    setCurveSegments(curveSegments: number): this;\r
    /** 闭合 */\r
    closed: boolean;\r
    setClosed(closed: boolean): this;\r
    /**\r
     * 设置滤镜对象{@link MxFilters} 默认为undefined | null 则不使用该滤镜效果\r
     * */\r
    filter: MxFilters | undefined | null;\r
    /** 获取当前滤镜对象 {@link MxFilters} */\r
    getFilter(): MxFilters | undefined | null;\r
    setFilter(filter: MxFilters | undefined | null): void;\r
    _cornerRadius: number[] | number;\r
    /** 圆角半径 (一个向量点对应一个角的半径值)*/\r
    get cornerRadius(): number | number[];\r
    set cornerRadius(radius: number | number[]);\r
    /**\r
     * 设置圆角 圆角的半径（如果参数为数组则一个角度对应一个圆角半径）\r
     * @param { number | number[] } radius 圆角半径 为数组时[3, 2, 1, 4]分别对应左上角圆角半径3  右上角2  右下角1 左下角4； 或者直接设置半径值 则四个角统一半径\r
     * @param isScreenCoord 是否根据屏幕坐标设置\r
     * */\r
    setCornerRadius(radius: number | number[], isScreenCoord?: boolean): void;\r
    /** 需要输入和输出的属性 */\r
    protected _propertyDbKeys: string[];\r
    getTypeName(): string;\r
    /** 获取坐标集合 */\r
    protected getShapePoints(paths: THREE.CurvePath<THREE.Vector3 | THREE.Vector2>): three.Vector3[];\r
    /*** 创建路径 */\r
    protected createPaths(shapes: THREE.Curve<THREE.Vector3 | THREE.Vector2> | THREE.Curve<THREE.Vector3 | THREE.Vector2>[]): three.CurvePath<three.Vector3 | three.Vector2>;\r
    /** 动态绘制函数*/\r
    protected _draw(pWorldDraw: McGiWorldDraw, vertices: THREE.Vector3[]): void;\r
    /** 获取生成圆角后的点 */\r
    getCornerRadiusPoints(points: THREE.Vector3[]): three.Vector3[];\r
    /** 绘制描边 */\r
    protected _drawStoreLine(pWorldDraw: McGiWorldDraw, points: THREE.Vector3[], draw?: (pWorldDraw: McGiWorldDraw) => void): void;\r
    /** 获取线段闭合后的曲线点数 */\r
    getClosedPoints(points: THREE.Vector3[]): three.Vector3[];\r
    /** 获取长度 */\r
    getTotalLength(): number | undefined;\r
    getGetLength(): number;\r
    /** 获取面积 */\r
    getArea(): number;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /** 图片填充 */\r
    _fillImg(pWorldDraw: McGiWorldDraw, points: THREE.Vector3[]): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    transformBy(mat: THREE.Matrix4): void;\r
}

/*** 椭圆(弧)形状 */\r
declare class MxDbEllipseShape extends MxDbShape {\r
    constructor();\r
    getTypeName(): string;\r
    /** 圆心 */\r
    center: three.Vector3;\r
    setCenter(center: THREE.Vector3): this;\r
    /** X轴椭圆弧半径 默认当前坐标转换下的10像素 */\r
    xRadius: number;\r
    setXRadius(xRadius: number): this;\r
    /**  Y轴椭圆弧半径 默认当前坐标转换下的10像素 */\r
    yRadius: number;\r
    setYRadius(yRadius: number): this;\r
    /** 弧开始角度 默认0*/\r
    startAngle: number;\r
    setStartAngle(startAngle: number): this;\r
    /** 弧结束角度 默认0*/\r
    endAngle: number;\r
    setEndAngle(endAngle: number): this;\r
    /** 以顺时针方向创建（扫过）弧线 默认false */\r
    clockwise: boolean;\r
    setClockwise(clockwise: boolean): this;\r
    /** 旋转角度 */\r
    rotation: number;\r
    setRotation(rotation: number): this;\r
    /** 是否闭合到中心位置 */\r
    isClosedToCenter: boolean;\r
    setIsClosedToCenter(isClosedToCenter: boolean): this;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /** 绘制椭圆形状 */\r
    drawEllipseShape(pWorldDraw: McGiWorldDraw): {\r
        /** 圆心角 */\r
        centralAngle: number;\r
        /** 圆弧曲线 */\r
        curve: three.EllipseCurve;\r
        /** 构成圆弧的向量点 */\r
        points: three.Vector3[];\r
    };\r
    /** 创建圆弧 */\r
    createEllipseCurve(x?: number, y?: number, xRadius?: number, yRadius?: number, startAngle?: number, endAngle?: number, clockwise?: boolean, rotation?: number): three.EllipseCurve;\r
    /** 获取圆角的点集合(椭圆不需要) */\r
    getCornerRadiusPoints(points: THREE.Vector3[]): three.Vector3[];\r
    getClosedPoints(points: THREE.Vector3[]): THREE.Vector3[];\r
    getClosedLine(points: THREE.Vector3[]): three.CatmullRomCurve3;\r
    getGripPoints(): three.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

/*** 圆(弧)形状 */\r
declare class MxDbCircleShape extends MxDbEllipseShape {\r
    getTypeName(): string;\r
    /*** 圆半径 */\r
    get radius(): number;\r
    set radius(radius: number);\r
    setRadius(radius: number): this;\r
    setXRadius(xRadius: number): this;\r
    setYRadius(yRadius: number): this;\r
}

declare function drawMx3PointArc(): void;

/** 三点动态绘制圆弧 point1圆弧起始点 point2是圆弧结束点, point3圆弧任意一点  */\r
declare class Mx3PointArc extends MxDbCircleShape {\r
    static cmd: string;\r
    static draw: typeof drawMx3PointArc;\r
    static isRegister: boolean;\r
    constructor();\r
    point1: three.Vector3;\r
    point2: three.Vector3;\r
    point3: three.Vector3;\r
    /** 自动确定顺逆时针绘制 */\r
    autoClockwise: boolean;\r
    closed: boolean;\r
    /** 圆心角 */\r
    centralAngle: number;\r
    getTypeName(): string;\r
    create(): Mx3PointArc;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    /** 计算三个控制点的角度 */\r
    compute3PointAngle(point1?: three.Vector3, point2?: three.Vector3, point3?: three.Vector3): number[];\r
    /** 根据三个控制点更新圆心 */\r
    upDateCenter(point1?: three.Vector3, point2?: three.Vector3, point3?: three.Vector3): three.Vector3;\r
    /** 根据圆心和一个控制点自动更新半径大小 */\r
    upDateRadius(point?: three.Vector3): number;\r
    /** 根据 三个控制点到圆心的角度  更新顺逆时针绘制 */\r
    upDataClockwise(angle1: number, angle2: number, angle3: number): void;\r
    /** 更新数据信息 */\r
    updateDataInfo(): void;\r
    /** 获取圆弧线中点坐标 */\r
    getArcMidPoint(): three.Vector3;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

declare class Mx2PointArc extends Mx3PointArc {\r
    static cmd: string;\r
    static draw: () => Promise<void>;\r
    static isRegister: boolean;\r
    getTypeName(): string;\r
    create(): Mx2PointArc;\r
    get startPoint(): three.Vector3;\r
    set startPoint(v: three.Vector3);\r
    get endPoint(): three.Vector3;\r
    set endPoint(v: three.Vector3);\r
}

declare function drawMxDbCoord(): void;

/**\r
 * MxDbCoord 引线坐标测量\r
 */\r
declare class MxDbCoord extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbCoord;\r
    /** 测量点位置 */\r
    point1: THREE.Vector3;\r
    /** 测量结果显示位置 */\r
    point2: THREE.Vector3;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    create(): MxDbEntity;\r
    transformBy(mat: THREE.Matrix4): void;\r
    getTypeName(): string;\r
}

/** 绘制 MxDbLine */\r
declare function drawMxDbLine(): Promise<void>;

/**\r
 * MxDbLine 直线对象.\r
 */\r
declare class MxDbLine extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbLine;\r
    /** 直线的开始点 */\r
    pt1: THREE.Vector3;\r
    /** 直线的结束点 */\r
    pt2: THREE.Vector3;\r
    getTypeName(): string;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /** 设置的开始点 */\r
    setPoint1(pt1: THREE.Vector3): void;\r
    getPoint1(): THREE.Vector3;\r
    /** 设置的结束点 */\r
    setPoint2(pt2: THREE.Vector3): void;\r
    getPoint2(): THREE.Vector3;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    create(): MxDbEntity;\r
    getGeomExtents(): THREE.Box3 | null;\r
    /**\r
     * 返回曲线长度.\r
     * @returns number\r
     */\r
    getGetLength(): number;\r
}

declare function drawMxDbRect(): Promise<void>;

/**\r
 * MxRectEntity 矩形对象.\r
 */\r
declare class MxDbRect extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbRect;\r
    private cornerRadius;\r
    /**\r
     * pt1: 构成矩形的第一个点\r
     * */\r
    pt1: THREE.Vector3;\r
    /**\r
     * pt1: 构成矩形的第二个点(对角点)\r
     * */\r
    pt2: THREE.Vector3;\r
    /**\r
     * 是否需要颜色填充.\r
     * */\r
    isSolidColorFill: boolean;\r
    /**\r
     * fillImageParam 填充背景图片的参数设置(如果使用了滤镜则部分参数功能失效)\r
     * */\r
    private fillImageParam;\r
    /**\r
     * 设置滤镜对象{@link MxFilters} 默认为undefined | null 则不使用该滤镜效果\r
     * */\r
    private filter;\r
    /**\r
     * fillImageSrc(优先级低于fillColor属性) 填充背景图片的地址\r
     * */\r
    private fillImageSrc;\r
    private isLoadMaterialFromPath;\r
    private material;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    create(): MxDbRect;\r
    transformBy(mat: THREE.Matrix4): void;\r
    /**\r
     * setRadius 设置圆角 圆角的半径  如[3, 2, 1, 4]分别对应左上角圆角半径3  右上角2  右下角1 左下角4\r
     * @param { number | number[] } radius 圆角半径 为数组时[3, 2, 1, 4]分别对应左上角圆角半径3  右上角2  右下角1 左下角4； 或者直接设置半径值 则四个角统一半径\r
     * */\r
    setRadius(radius: number | number[], isScreenCoord?: boolean): void;\r
    getTypeName(): string;\r
    /** 获取当前滤镜对象 {@link MxFilters} */\r
    getFilter(): MxFilters | undefined | null;\r
    /** 设置当前滤镜对象\r
     * @param filter {@link MxFilters}\r
     *  */\r
    setFilter(filter: MxFilters | undefined | null): void;\r
    /** 设置填充的背景图片路径 */\r
    setFillImagePath(sPath: string | undefined): void;\r
    /** 获取填充的背景图片路径 */\r
    getFillImagePath(): string | undefined;\r
}

declare function drawMxDbAlignedDimension(): MxDbAlignedDimension;

/** @module MxDbAlignedDimension*/\r
\r
/**\r
 * MxDbAlignedDimension 尺寸标注\r
 */\r
declare class MxDbAlignedDimension extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbAlignedDimension;\r
    /**\r
     * MxDbAlignedDimension\r
     * 尺寸标注\r
     * @param options.points 提供两个向量测量尺寸\r
     * @param options.fontColor 字体颜色\r
     * @example \`\`\`typescript\r
     * const draw = Mx.MxFun.getCurrentDraw();\r
     * const v3 = new THREE.Vector3()\r
     * const points = [v3 , v3.clone().add(new THREE.Vector3(8880, 0, 0))]\r
     * const colors = ['#F00880','#00ff1a']\r
     * draw.addMxEntity(\r
     *   new Mx.MxDbAlignedDimension({ points })\r
     *   .setColor(colors)\r
     *   .setLineWidth(6)\r
     * )\r
     * \`\`\`\r
     **/\r
    constructor(options?: {\r
        /** [point1, point2] 两个向量位置 */\r
        points?: THREE.Vector3[];\r
        /** 字体颜色 */\r
        fontColor?: MxColorType;\r
    });\r
    point1: THREE.Vector3;\r
    point2: THREE.Vector3;\r
    fontColor: UnstableColor;\r
    /**\r
     * 设置两个点位置向量\r
     * @param { THREE.Vector3[] } points [THREE.Vector3, THREE.Vector3]\r
     */\r
    setPoints(points: THREE.Vector3[]): void;\r
    getTypeName(): string;\r
    private getDirection;\r
    /**\r
     * 获取尺寸距离\r
     * */\r
    getDimText(): string;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /**\r
     * 设置测量的开始点\r
     * @parma pt1 three.js坐标点位\r
     * */\r
    setPoint1(pt1: THREE.Vector3): void;\r
    /**\r
     * 设置测量的结束点\r
     * @parma pt1 three.js坐标点位\r
     * */\r
    setPoint2(pt2: THREE.Vector3): void;\r
    setColor(color: UnstableColor | UnstableColor[]): this;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    create(): MxDbAlignedDimension;\r
}

declare function drawMxDbArea(): void;

/**\r
 * MxDbArea 任意不规则多边形\r
 * */\r
declare class MxDbArea extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbArea;\r
    /** 构成多边形的顶点集合 */\r
    points: Array<THREE.Vector3>;\r
    isFill: boolean;\r
    fillColor: MxColorType;\r
    fillOpacity: number;\r
    getTypeName(): string;\r
    create(): MxDbEntity;\r
    /** 在worldDraw动态绘制时会计算当前顶点坐标集合的面积,并显示渲染计算后的计算结果\r
     * @returns 返回的计算后的面积结果\r
     *  */\r
    getDimText(): string;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    /**\r
     * 添加构成多边形的点\r
     * @param pt 位置坐标\r
     *  */\r
    addPoint(pt: THREE.Vector3): void;\r
    /**\r
     * 获取构成多边形的顶点集合\r
     *  */\r
    getPoints(): Array<THREE.Vector3>;\r
    /**\r
     * 清空构成多边形的顶点集合\r
     *  */\r
    clearPoint(): void;\r
}

declare function drawMxDbLeadTag(): Promise<void>;

/**\r
 * MxDbLeadTag 引出标注\r
 * */\r
declare class MxDbLeadTag extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbLeadTag;\r
    point: three.Vector3;\r
    leadLen: number;\r
    text: string;\r
    textHeight: number;\r
    getTypeName(): string;\r
    private createDots;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    onViewChange(): boolean;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): any;\r
}

declare function drawMxDbAnyLine(): void;

/** @module MxDbAnyLine*/\r
\r
/**\r
 * MxDbAnyLine\r
 * 任意线段\r
 */\r
declare class MxDbAnyLine extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbAnyLine;\r
    /** 构成线段的顶点坐标集合 */\r
    points: THREE.Vector3[];\r
    getTypeName(): string;\r
    create(): MxDbAnyLine;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /** 设置线段points\r
     * @param points 构成线段的多个点\r
     */\r
    setPoints(points: THREE.Vector3[]): this;\r
    /** 获取线段的包围盒的中心点坐标 */\r
    getCenter(): THREE.Vector3;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
}

declare function drawMxDbCloudLine(): void;

/**\r
 * MxDbCloudLine 对象. 绘制任意的云线\r
 */\r
declare class MxDbCloudLine extends MxDbEntity {\r
    static isRegister: boolean;\r
    static cmd: string;\r
    static draw: typeof drawMxDbCloudLine;\r
    private points;\r
    private radius;\r
    private cachePoint;\r
    constructor();\r
    getTypeName(): string;\r
    create(): MxDbEntity;\r
    /** 设置构成云线的每个圆弧半径长度\r
     * @parma radius 圆弧半径\r
     *  */\r
    setRadius(radius: number): void;\r
    /**\r
     * 获取云线的圆弧半径\r
     * */\r
    getRadius(): number;\r
    getCachePoint(): THREE.Vector3[] | null;\r
    private clacNewArcDiameterPoint;\r
    private createCloudArcCurvePoints;\r
    /**\r
     * 添加云线的顶点坐标, 该顶点坐标会根据上一个构成云线的点计算出下一个云线的顶点位置\r
     * @param pt 坐标位置\r
     * @param isAddToDrawGeometry 如果为true 将立即添加顶点并绘制下一个圆弧\r
     * */\r
    addPoint(pt: THREE.Vector3, isAddToDrawGeometry?: boolean): void;\r
    /**\r
     * 绘制两点之间的云线(与addPoint不同的是它不是只绘制一个半圆弧,而是绘制两点之间相连接的所有半圆弧)\r
     * @param pt1 云线开始点\r
     * @param pt2 云线结束点\r
     * */\r
    addLine(pt1: THREE.Vector3, pt2: THREE.Vector3): three.Vector3;\r
    /** 重新计算云线的的所有顶点坐标, 如绘制完云线后 重新设置了圆弧半径, 在worldDraw动态绘制时会调用该方法 */\r
    reCalculateDrawGeometryPoint(): THREE.Vector3[] | null;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /**\r
     * 获取云线包围盒的中心点\r
     * */\r
    getCenter(): THREE.Vector3;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
}

declare function drawMxDbRegularPolygon(): void;

declare class MxDbRegularPolygon extends MxDbShape {\r
    static cmd: string;\r
    static draw: typeof drawMxDbRegularPolygon;\r
    /** 正多边形的中心点位置 */\r
    centerPoint: three.Vector3;\r
    /** 正多边形两条边之间的交点位置 */\r
    otherPoint: three.Vector3;\r
    /** 正多边形边的数量 */\r
    sidesNumber: number;\r
    getTypeName(): string;\r
    /**\r
     * MxDbRegularPolygon 正多边形\r
     */\r
    constructor();\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

declare function drawMxDbLeadComment(): void;

/**\r
 * MxDbLeadComment 引线文字标注\r
 * */\r
declare class MxDbLeadComment extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbLeadComment;\r
    /** 标注点 */\r
    point1: THREE.Vector3;\r
    /** 文字显示位置 */\r
    point2: THREE.Vector3;\r
    /** 文字内容 */\r
    text: string;\r
    /** 文字高度 */\r
    textHeight: number;\r
    textWidth: number;\r
    /** 文字大小，取屏幕像素绘图单位。 */\r
    fixedSize: boolean;\r
    constructor();\r
    getTypeName(): string;\r
    create(): MxDbEntity;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    protected onViewChange(): boolean;\r
}

declare function drawMxDbRectBoxLeadComment(): void;

/**\r
 * MxDbRectBoxLeadComment 引线审图标注\r
 * */\r
declare class MxDbRectBoxLeadComment extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbRectBoxLeadComment;\r
    /** 云线矩形的对角点1 */\r
    point1: THREE.Vector3;\r
    /** 云线矩形的对角点2 */\r
    point2: THREE.Vector3;\r
    /** 要标注的内容位置 */\r
    point3: THREE.Vector3;\r
    /** 要显示的文字内容*/\r
    text: string;\r
    /**文字高度*/\r
    textHeight: number;\r
    /** 云线的半圆弧半径 */\r
    radius: number;\r
    textWidth: number;\r
    /** 文字大小，取屏幕像素绘图单位。 */\r
    fixedSize: boolean;\r
    constructor();\r
    getTypeName(): string;\r
    create(): MxDbEntity;\r
    getCloudLine(): any;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    protected onViewChange(): boolean;\r
}

declare function drawMxDbEllipse(): void;

/** 通过两个构成矩形的点绘制椭圆形 */\r
declare class MxDbEllipse extends MxDbEllipseShape {\r
    static cmd: string;\r
    static draw: typeof drawMxDbEllipse;\r
    constructor();\r
    getTypeName(): string;\r
    create(): MxDbEllipse;\r
    /** 开始点 */\r
    point1: three.Vector3;\r
    setPoint1(point1: THREE.Vector3): this;\r
    /** 结束点 */\r
    point2: three.Vector3;\r
    setPoint2(point2: THREE.Vector3): this;\r
    isClosedToCenter: boolean;\r
    closed: boolean;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

declare function drawMxDbText(): Promise<void>;

type SpriteTextColorType = THREE.Color | string | number | CanvasGradient | CanvasPattern | undefined;\r
type SpriteTextObj = SpriteText;\r
type TextFontWeight = 'normal' | 'bold' | 'lighter' | 'bolder' | 'inherit' | number;\r
type TextFontStyle = 'normal' | 'italic' | 'oblique';\r
declare class SpriteText extends THREE.Sprite {\r
    constructor(options?: SpriteTextOptions);\r
    text: string;\r
    textHeight: number;\r
    color: SpriteTextColorType;\r
    backgroundColor: SpriteTextColorType;\r
    padding: number | number[];\r
    borderWidth: number;\r
    borderRadius: number;\r
    borderColor: SpriteTextColorType;\r
    fontFace: string;\r
    fontSize: number;\r
    fontWeight: TextFontWeight;\r
    strokeWidth: number;\r
    strokeColor: SpriteTextColorType;\r
    textAlign: CanvasTextAlign;\r
    textShadowBlur: number;\r
    textShadowColor: string | number | THREE.Color | undefined;\r
    textShadowOffsetX: number;\r
    textShadowOffsetY: number;\r
    angle: number;\r
    textScale: number;\r
    underline: boolean;\r
    fontStyle: TextFontStyle;\r
    fontVariant: string;\r
    _genCanvas(): void;\r
    dispose(): void;\r
}\r
interface SpriteTextOptions {\r
    text?: string;\r
    textHeight?: number;\r
    color?: SpriteTextColorType;\r
    backgroundColor?: SpriteTextColorType | undefined;\r
    padding?: number | number[];\r
    borderWidth?: number;\r
    borderRadius?: number;\r
    borderColor?: SpriteTextColorType;\r
    strokeWidth?: number;\r
    strokeColor?: SpriteTextColorType;\r
    fontFace?: string;\r
    fontSize?: number;\r
    fontWeight?: TextFontWeight;\r
    textAlign?: CanvasTextAlign;\r
    textBaseline?: CanvasTextBaseline;\r
    textShadowBlur?: number;\r
    textShadowColor?: string | number | THREE.Color | undefined;\r
    textShadowOffsetX?: number;\r
    textShadowOffsetY?: number;\r
    angle?: number;\r
    scale?: number;\r
    underline?: boolean;\r
    fontStyle?: TextFontStyle;\r
    fontVariant?: string;\r
}

/**\r
 * MxDbText 绘制文字\r
 * @describe 适用于标签标注类型的文字(永远面向相机的平面)\r
 * @example\r
 * \`\`\` js\r
 *  obj = new MxDbText()\r
    obj.rxInit()\r
    obj.position = new THREE.Vector3()\r
    obj.backgroundColor = '#ff0000'\r
    obj.padding = 5\r
    obj.strokeWidth = 3\r
    obj.strokeColor = "#3a8bd2"\r
    obj.borderColor = "#ff00ff"\r
    obj.borderWidth = 2\r
    obj.borderRadius = 2\r
    obj.opacity = 0.8\r
    obj.text  = 'This is\\nsome multi-line\\ntext'\r
    obj.height = 100000\r
    obj.color = "#fff000"\r
 * \`\`\`\r
 */\r
declare class MxDbText extends MxDbEntity {\r
    static cmd: string;\r
    static draw: typeof drawMxDbText;\r
    /** 文字所在位置*/\r
    position: three.Vector3;\r
    setPosition(position: THREE.Vector3): this;\r
    private _text;\r
    /** 文字内容*/\r
    get text(): string;\r
    set text(text: string);\r
    setText(text: string): this;\r
    private _height;\r
    /** 文字高度*/\r
    get height(): number;\r
    set height(height: number);\r
    setHeight(height: number): this;\r
    private _backgroundColor;\r
    /** 背景颜色 */\r
    get backgroundColor(): SpriteTextColorType;\r
    set backgroundColor(color: SpriteTextColorType);\r
    setBackgroundColor(backgroundColor: SpriteTextColorType): this;\r
    private _padding;\r
    /** 填充范围 */\r
    get padding(): number | number[];\r
    set padding(padding: number | number[]);\r
    setPadding(padding: number | number[]): this;\r
    private _borderWidth;\r
    /** 边框宽度 */\r
    get borderWidth(): number;\r
    set borderWidth(borderWidth: number);\r
    setBorderWidth(borderWidth: number): this;\r
    private _borderRadius;\r
    /** 边框圆角 */\r
    get borderRadius(): number;\r
    set borderRadius(borderRadius: number);\r
    setBorderRadius(borderRadius: number): this;\r
    private _borderColor;\r
    /** 边框颜色 */\r
    get borderColor(): SpriteTextColorType;\r
    set borderColor(borderColor: SpriteTextColorType);\r
    setBorderColor(borderColor: SpriteTextColorType): this;\r
    private _fontFace;\r
    /** 客户端字体 */\r
    get fontFace(): string;\r
    set fontFace(fontFace: string);\r
    setFontFace(fontFace: string): this;\r
    private _fontSize;\r
    /** 字体大小 */\r
    get fontSize(): number;\r
    set fontSize(fontSize: number);\r
    setFontSize(fontSize: number): this;\r
    private _fontWeight;\r
    /** 字体粗细 */\r
    get fontWeight(): TextFontWeight;\r
    set fontWeight(fontWeight: TextFontWeight);\r
    setFontWeight(fontWeight: TextFontWeight): this;\r
    private _strokeWidth;\r
    /** 笔划宽度 */\r
    get strokeWidth(): number;\r
    set strokeWidth(strokeWidth: number);\r
    setStrokeWidth(strokeWidth: number): this;\r
    private _strokeColor;\r
    /** 笔划颜色 */\r
    get strokeColor(): SpriteTextColorType;\r
    set strokeColor(strokeColor: SpriteTextColorType);\r
    setStrokeColor(strokeColor: SpriteTextColorType): this;\r
    private _textAlign;\r
    /** 文本格式 */\r
    get textAlign(): CanvasTextAlign;\r
    set textAlign(textAlign: CanvasTextAlign);\r
    setTextAlign(textAlign: CanvasTextAlign): this;\r
    private _textShadowBlur;\r
    /** 文字阴影模糊程度 */\r
    get textShadowBlur(): number;\r
    set textShadowBlur(textShadowBlur: number);\r
    setTextShadowBlur(textShadowBlur: number): this;\r
    private _textShadowColor;\r
    /**  文字阴影颜色*/\r
    get textShadowColor(): string | number | Color | undefined;\r
    set textShadowColor(textShadowColor: string | number | Color | undefined);\r
    setTextShadowColor(textShadowColor: string | number | Color | undefined): this;\r
    private _textShadowOffsetX;\r
    /** 文字阴影X轴偏移量 */\r
    get textShadowOffsetX(): number;\r
    set textShadowOffsetX(textShadowOffsetX: number);\r
    setTextShadowOffsetX(textShadowOffsetX: number): this;\r
    private _textShadowOffsetY;\r
    /** 文字阴影X轴偏移量 */\r
    get textShadowOffsetY(): number;\r
    set textShadowOffsetY(textShadowOffsetY: number);\r
    setTextShadowOffsetY(textShadowOffsetY: number): this;\r
    private _angle;\r
    /** 角度*/\r
    get angle(): number;\r
    set angle(angle: number);\r
    setAngle(angle: number): this;\r
    private _scale;\r
    /** 缩放倍数 */\r
    get scale(): number;\r
    set scale(scale: number);\r
    setScale(scale: number): this;\r
    private _underline;\r
    /** 下划线 */\r
    get underline(): boolean;\r
    set underline(underline: boolean);\r
    setUnderline(underline: boolean): void;\r
    /** SpriteText实例 */\r
    protected spriteText: SpriteTextObj;\r
    getTypeName(): string;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    /**创建精灵文字对象 */\r
    protected createSpriteText(): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    create(): MxDbEntity;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    getGeomExtents(): THREE.Box3 | null;\r
    erase(): boolean;\r
}

/**\r
 * MxDbHatch 填充对象\r
 */\r
declare class MxDbHatch extends MxDbEntity {\r
    points: THREE.Vector3[];\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getTypeName(): string;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    /** 设置顶点坐标 */\r
    setPoints(points: THREE.Vector3[]): void;\r
    getGripPoints(): THREE.Vector3[];\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): any;\r
}

/***\r
 * 渐变线段\r
 * @augments MxDbEntity\r
 * */\r
declare class MxDbGradientLine extends MxDbEntity {\r
    /** 点集合 */\r
    points: THREE.Vector3[];\r
    /** 渐变色 */\r
    colors: (THREE.Color | string | number)[];\r
    /**\r
     * 定义线两端的样式\r
     *  @access public\r
     * */\r
    linecap: 'butt' | 'round' | 'square';\r
    /**\r
     * 定义线连接节点的样式\r
     * @access public\r
     * */\r
    linejoin: 'round' | 'bevel' | 'miter';\r
    /**\r
     * 定义线形状是否闭合，从而创建多边形或斑点\r
     * @access public\r
     * */\r
    closed: boolean;\r
    /**\r
     * 曲线的类型: chordal: 弦线、 centripetal： 向心线、 catmullrom: Catmull-Rom曲线 默认：centripetal\r
     * @access public\r
     * */\r
    curveType: 'chordal' | 'centripetal' | 'catmullrom';\r
    /**\r
     *  当curveType为catmullrom时，定义catmullrom的张力。 张力: 数值越大，曲线越弯曲。值为0将导致没有插值。默认值是0\r
     *  @access public\r
     *\r
     */\r
    tension: number;\r
    /**\r
     * 如果没有提供张力，但bezierType赋值为'quadratic'| 'cubic'，则使用点集合中的点绘制一条bezier线  默认: undefined\r
     * @summary quadratic: 三维二次贝塞尔曲线 => 起点 – 中间的控制点 – 终点\r
     * @summary cubic: 三维三次贝塞尔曲线 => 起点v – 第一个控制点 – 第二个控制点 – 终点\r
     */\r
    bezierType: 'quadratic' | 'cubic' | undefined;\r
    protected curve?: THREE.CatmullRomCurve3 | THREE.CurvePath<THREE.Vector3>;\r
    create(): MxDbGradientLine;\r
    getTypeName(): string;\r
    setPoints(points: THREE.Vector3[]): this;\r
    setColors(colors: (THREE.Color | string | number)[]): this;\r
    addColor(color: THREE.Color): this;\r
    setLinecap(linecap: 'butt' | 'round' | 'square'): void;\r
    setClosed(closed: boolean): void;\r
    setCurveType(curveType: 'chordal' | 'centripetal' | 'catmullrom'): void;\r
    setTension(tension: number): void;\r
    setBezierType(bezierType: 'quadratic' | 'cubic'): void;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    getPoints(): three.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    move(index: number, offset: THREE.Vector3): this;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
}

declare function drawMxDbEllipseArc(): void;

/**\r
 * 根据中心点、椭圆开始点和结束点确定椭圆弧\r
 *  */\r
declare class MxDbEllipseArc extends MxDbEllipseShape {\r
    static cmd: string;\r
    static draw: typeof drawMxDbEllipseArc;\r
    getTypeName(): string;\r
    constructor();\r
    /** 椭圆弧决定开始点 控制x轴半径和开始角度 */\r
    startPoint: THREE.Vector3;\r
    setStartPoint(startPoint: THREE.Vector3): this;\r
    /** 椭圆弧决定结束点 控制y轴半径和结束角度*/\r
    endPoint: THREE.Vector3;\r
    setEndPoint(endPoint: THREE.Vector3): this;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): three.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

declare function drawMxDbCircleArc(): void;

declare class MxDbCircleArc extends MxDbCircleShape {\r
    static cmd: string;\r
    static draw: typeof drawMxDbCircleArc;\r
    /** 根据圆心、起始点、结束点位置动态绘制圆弧 **/\r
    constructor();\r
    getTypeName(): string;\r
    /** 圆弧开始点 设置开始点将自动计算 radius、startAngle、endAngle */\r
    startPoint: THREE.Vector3;\r
    setStartPoint(startPoint: THREE.Vector3): this;\r
    /** 圆弧结束点 设置结束点将自动计算 radius、startAngle、endAngle */\r
    endPoint: THREE.Vector3;\r
    setEndPoint(endPoint: THREE.Vector3): this;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    computePointAngle(point: THREE.Vector3): number;\r
    getGripPoints(): three.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

declare class MxDbArcShape extends MxDbCircleArc {\r
    /** 环形 */\r
    constructor();\r
    getTypeName(): string;\r
    center: three.Vector3;\r
    innerRadius: number;\r
    outerRadius: number;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    drawArcShape(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

declare function drawMxDbArcShape(): void;

declare class MxDbArcShapeDraw extends MxDbArcShape {\r
    static isRegister: boolean;\r
    static cmd: string;\r
    static draw: typeof drawMxDbArcShape;\r
    getTypeName(): string;\r
    /** 绘制弧形 */\r
    constructor();\r
    outerRadiusPoint: three.Vector3;\r
    interRadiusPoint: three.Vector3;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

declare function drawMxDbRingShape(): void;

/** 环形 */\r
declare class MxDbRingShape extends MxDbArcShape {\r
    static isRegister: boolean;\r
    static cmd: string;\r
    static draw: typeof drawMxDbRingShape;\r
    getTypeName(): string;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
}

declare function drawMxDbStarShape(): void;

/** 星形 */\r
declare class MxDbStarShape extends MxDbShape {\r
    static cmd: string;\r
    static draw: typeof drawMxDbStarShape;\r
    getTypeName(): string;\r
    constructor();\r
    center: three.Vector3;\r
    /** 顶点数量 */\r
    numPoints: number;\r
    /** 内部半径 */\r
    innerRadius: number;\r
    /** 外部半径 */\r
    outerRadius: number;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

/** 等边多边形 */\r
declare class MxDbRegularPolygonShape extends MxDbShape {\r
    center: three.Vector3;\r
    sidesNumber: number;\r
    radius: number;\r
    getTypeName(): string;\r
    constructor();\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    _drawPolygonShape(pWorldDraw: McGiWorldDraw): void;\r
    _getPoints(): {\r
        x: number;\r
        y: number;\r
    }[];\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
}

declare function drawMxDbArrow(): void;

declare class MxDbArrow extends MxDbShape {\r
    static cmd: string;\r
    static draw: typeof drawMxDbArrow;\r
    /** 箭头图形  */\r
    constructor();\r
    /** 开始是否为尖角 */\r
    isSharpCorner: boolean;\r
    /** 内部偏移量 */\r
    innerOffset: number;\r
    /** 外部偏移量 */\r
    outerOffset: number;\r
    /** 顶部偏移量 */\r
    topOffset: number;\r
    startPoint: three.Vector3;\r
    endPoint: three.Vector3;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getArrowVertex(p1: THREE.Vector3, p2: THREE.Vector3, isSharpCorner?: boolean): three.Vector3[] | undefined;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    getCornerRadiusPoints(points: THREE.Vector3[]): three.Vector3[];\r
}

/** 线形状 */\r
declare class MxDbLineShape extends MxDbShape {\r
    points: THREE.Vector3[];\r
    setPoints(points: THREE.Vector3[]): this;\r
    addPoint(point: THREE.Vector3): this;\r
    removePoint(index: number): this;\r
    constructor();\r
    getTypeName(): string;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): Array<THREE.Vector3>;\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    /** 获取包围盒 */\r
    getGeomExtents(): THREE.Box3 | null;\r
    /**\r
     * 返回曲线长度.\r
     * @returns number\r
     */\r
    getGetLength(): number;\r
}

/** 图层管理 */\r
declare class Layer extends RenderOrderNode<{}, MxDbEntity> {\r
    isLayer: boolean;\r
    name: string;\r
    constructor(name?: string);\r
    get visible(): boolean;\r
    set visible(val: boolean);\r
    /** 设置层是否可见 */\r
    setVisible(val: boolean): void;\r
    private _database;\r
    private getDatabase;\r
    private getLayer;\r
    private getLayerMap;\r
    private getEntityMap;\r
    private getCurrentName;\r
    private callLayerContextFun;\r
    /** 默认的层名称 **/\r
    getRootLayerName: () => string;\r
    /*** 获取该数据库下的所有层的名称 */\r
    getNames(): string[];\r
    /*** 获取该层包含的所有MxDbEntity */\r
    getAllEntity(): MxDbEntity[];\r
    /** 将MxDbEntity添加到层\r
     * @param entityList 可以是id也可以是MxDbEntity实例\r
     * @example\r
     * \`\`\`\r
     * new Layer().add(new MxDbLine(), new MxDbLine(), 3)\r
     * \`\`\`\r
     */\r
    add(...entityList: MxDbEntity[]): this;\r
    /*** 移除该层的MxDbEntity,  MxDbEntity回退到默认层*/\r
    remove(...entityList: MxDbEntity[]): this;\r
}

declare function drawMxDbSplineCurve(): Promise<void>;

declare class MxDbSplineCurve extends MxDbEntity {\r
    static draw: typeof drawMxDbSplineCurve;\r
    static cmd: string;\r
    /** 圆中心点 */\r
    points: THREE.Vector3[];\r
    /** 闭合 */\r
    closed: boolean;\r
    /** 曲线的张力 */\r
    tension: number;\r
    /** 曲线类型： centripetal、chordal和catmullrom */\r
    curveType: string;\r
    worldDraw(pWorldDraw: McGiWorldDraw): void;\r
    getGripPoints(): THREE.Vector3[];\r
    moveGripPointsAt(index: number, offset: THREE.Vector3): boolean;\r
    create(): MxDbEntity;\r
    dwgIn(obj: any): boolean;\r
    dwgOut(obj: any): object;\r
    getTypeName(): string;\r
}

/** @module MrxDbgUiPrDistClass */\r
\r
/**\r
 * MrxDbgUiPrDist 用于构建一个取点对象\r
 * @example \`\`\`typescript\r
 *  new Mx.MrxDbgUiPrPoint()\r
 * \`\`\`\r
 */\r
declare class MrxDbgUiPrDist extends MrxDbgUiPrBase {\r
    constructor();\r
    /**\r
     * 得以获取的距离\r
     */\r
    value(): number;\r
    /**\r
     * 得到动态拖动的基点\r
     * @returns 基点 THREE.THREE.Vector3\r
     */\r
    basePt(): THREE.Vector3;\r
    /**\r
     * 设置动态拖动的基点\r
     * @param basePt 基点 THREE.THREE.Vector3\r
     * @returns 点对象 DWG图纸坐标\r
     */\r
    setBasePt(basePt: THREE.Vector3): void;\r
    /**\r
     * 设置使用动态拖动的基点\r
     * @param useIt 是否设置 默认为false\r
     * @returns void\r
     */\r
    setUseBasePt(useIt: boolean): void;\r
    /**\r
     * 开始动态拖动\r
     * @param retcall  回调参数status {@link MrxDbgUiPrBaseReturn | 状态值}\r
     * @returns void\r
     */\r
    go(retcall?: (status: MrxDbgUiPrBaseReturn) => void): Promise<number | null>;\r
}

/** @module MrxDbgUiPrIntClass */\r
\r
/**\r
 * MrxDbgUiPrInt 交互输入一个整数\r
 * @example \`\`\`typescript\r
 *  new Mx.MrxDbgUiPrInt()\r
 * \`\`\`\r
 */\r
declare class MrxDbgUiPrInt extends MrxDbgUiPrBase {\r
    constructor();\r
    /**\r
     * 得以获取的距离\r
     */\r
    value(): number;\r
    /**\r
     * 开始动态拖动\r
     * @param retcall  回调参数status {@link MrxDbgUiPrBaseReturn | 状态值}\r
     * @returns void\r
     */\r
    go(retcall?: (status: MrxDbgUiPrBaseReturn) => void): Promise<number | null>;\r
}

/** @module MrxDbgUiPrStringClass */\r
\r
/**\r
 * MrxDbgUiPrString 交互输入字符串\r
 * @example \`\`\`typescript\r
 *  new Mx.MrxDbgUiPrString()\r
 * \`\`\`\r
 */\r
declare class MrxDbgUiPrString extends MrxDbgUiPrBase {\r
    constructor();\r
    /**\r
     * 得以获取的距离\r
     */\r
    value(): string;\r
    /**\r
     * 开始动态拖动\r
     * @param retcall  回调参数status {@link MrxDbgUiPrBaseReturn | 状态值}\r
     * @returns void\r
     */\r
    go(retcall?: (status: MrxDbgUiPrBaseReturn) => void): Promise<string | null>;\r
}

/** @module MrxDbgUiPrKeyWordClass */\r
\r
/**\r
 * MrxDbgUiPrKeyWord 交互输入关键值选项\r
 * @example \`\`\`typescript\r
 *  new Mx.MrxDbgUiPrKeyWord()\r
 * \`\`\`\r
 */\r
declare class MrxDbgUiPrKeyWord extends MrxDbgUiPrBase {\r
    constructor();\r
    /**\r
     * 开始动态拖动\r
     * @param retcall  回调参数status {@link MrxDbgUiPrBaseReturn | 状态值}\r
     * @returns void\r
     */\r
    go(retcall?: (status: MrxDbgUiPrBaseReturn) => void): Promise<string | null>;\r
}

/** @module MrxDbgUiPrAngleClass */\r
\r
/**\r
 * MrxDbgUiPrAngle 交互输入一个角度对象\r
 * @example \`\`\`typescript\r
 *  new Mx.MrxDbgUiPrAngle()\r
 * \`\`\`\r
 */\r
declare class MrxDbgUiPrAngle extends MrxDbgUiPrBase {\r
    constructor();\r
    /**\r
     * 得以获取的距离\r
     */\r
    value(): number;\r
    /**\r
     * 得到动态拖动的基点\r
     * @returns 基点 THREE.THREE.Vector3\r
     */\r
    basePt(): THREE.Vector3;\r
    /**\r
     * 设置动态拖动的基点\r
     * @param basePt 基点 THREE.THREE.Vector3\r
     * @returns 点对象 DWG图纸坐标\r
     */\r
    setBasePt(basePt: THREE.Vector3): void;\r
    /**\r
     * 设置使用动态拖动的基点\r
     * @param useIt 是否设置 默认为false\r
     * @returns void\r
     */\r
    setUseBasePt(useIt: boolean): void;\r
    /**\r
     * 开始动态拖动\r
     * @param retcall  回调参数status {@link MrxDbgUiPrBaseReturn | 状态值}\r
     * @returns void\r
     */\r
    go(retcall?: (status: MrxDbgUiPrBaseReturn) => void): Promise<number | null>;\r
}

declare const Mx_loadCoreCode: typeof loadCoreCode;
declare const Mx_useCanvasResizeListener: typeof useCanvasResizeListener;
declare const Mx_store: typeof store;
declare const Mx_MxFun: typeof MxFun;
declare const Mx_MxThreeJS: typeof MxThreeJS;
declare const Mx_MxType: typeof MxType;
declare const Mx_Mxassembly: typeof Mxassembly;
declare const Mx_McGeTool: typeof McGeTool;
declare const Mx_MrxDbgUtils: typeof MrxDbgUtils;
declare const Mx_MxPaintBrush: typeof MxPaintBrush;
type Mx_MrxDbgUiPrPoint = MrxDbgUiPrPoint;
declare const Mx_MrxDbgUiPrPoint: typeof MrxDbgUiPrPoint;
type Mx_McEdGetPointWorldDrawObject = McEdGetPointWorldDrawObject;
declare const Mx_McEdGetPointWorldDrawObject: typeof McEdGetPointWorldDrawObject;
type Mx_MrxDbgUiPrBaseReturn = MrxDbgUiPrBaseReturn;
declare const Mx_MrxDbgUiPrBaseReturn: typeof MrxDbgUiPrBaseReturn;
type Mx_MxDbEntity = MxDbEntity;
declare const Mx_MxDbEntity: typeof MxDbEntity;
type Mx_MxDbImage = MxDbImage;
declare const Mx_MxDbImage: typeof MxDbImage;
type Mx_MxDbSVG = MxDbSVG;
declare const Mx_MxDbSVG: typeof MxDbSVG;
type Mx_MxDbSVGText = MxDbSVGText;
declare const Mx_MxDbSVGText: typeof MxDbSVGText;
type Mx_MxDbPolyline = MxDbPolyline;
declare const Mx_MxDbPolyline: typeof MxDbPolyline;
type Mx_MxDb2LineAngularDimension = MxDb2LineAngularDimension;
declare const Mx_MxDb2LineAngularDimension: typeof MxDb2LineAngularDimension;
type Mx_Mx3PointArc = Mx3PointArc;
declare const Mx_Mx3PointArc: typeof Mx3PointArc;
type Mx_Mx2PointArc = Mx2PointArc;
declare const Mx_Mx2PointArc: typeof Mx2PointArc;
type Mx_MxDbCoord = MxDbCoord;
declare const Mx_MxDbCoord: typeof MxDbCoord;
type Mx_MxDbLine = MxDbLine;
declare const Mx_MxDbLine: typeof MxDbLine;
type Mx_MxDbRect = MxDbRect;
declare const Mx_MxDbRect: typeof MxDbRect;
type Mx_MxDbAlignedDimension = MxDbAlignedDimension;
declare const Mx_MxDbAlignedDimension: typeof MxDbAlignedDimension;
type Mx_MxFilters = MxFilters;
declare const Mx_MxFilters: typeof MxFilters;
type Mx_McGiWorldDraw = McGiWorldDraw;
type Mx_McGiWorldDrawType = McGiWorldDrawType;
declare const Mx_McGiWorldDrawType: typeof McGiWorldDrawType;
type Mx_MxDbArea = MxDbArea;
declare const Mx_MxDbArea: typeof MxDbArea;
type Mx_MxDbLeadTag = MxDbLeadTag;
declare const Mx_MxDbLeadTag: typeof MxDbLeadTag;
type Mx_MxDbAnyLine = MxDbAnyLine;
declare const Mx_MxDbAnyLine: typeof MxDbAnyLine;
type Mx_MxDbCloudLine = MxDbCloudLine;
declare const Mx_MxDbCloudLine: typeof MxDbCloudLine;
type Mx_MxDbRegularPolygon = MxDbRegularPolygon;
declare const Mx_MxDbRegularPolygon: typeof MxDbRegularPolygon;
type Mx_McGePoint3d = McGePoint3d;
type Mx_McGePoint3dArray = McGePoint3dArray;
type Mx_MxDbLeadComment = MxDbLeadComment;
declare const Mx_MxDbLeadComment: typeof MxDbLeadComment;
type Mx_MxDbRectBoxLeadComment = MxDbRectBoxLeadComment;
declare const Mx_MxDbRectBoxLeadComment: typeof MxDbRectBoxLeadComment;
type Mx_MxDbEllipse = MxDbEllipse;
declare const Mx_MxDbEllipse: typeof MxDbEllipse;
type Mx_MxDbText = MxDbText;
declare const Mx_MxDbText: typeof MxDbText;
type Mx_MxDrawObject = MxDrawObject;
declare const Mx_MxDrawObject: typeof MxDrawObject;
type Mx_MxDbHatch = MxDbHatch;
declare const Mx_MxDbHatch: typeof MxDbHatch;
type Mx_MxDbLayerTableRecord = MxDbLayerTableRecord;
type Mx_MxDbDatabase = MxDbDatabase;
declare const Mx_MxDbDatabase: typeof MxDbDatabase;
type Mx_MxDbGroup = MxDbGroup;
type Mx_MxDbGradientLine = MxDbGradientLine;
declare const Mx_MxDbGradientLine: typeof MxDbGradientLine;
type Mx_MxDbShape = MxDbShape;
declare const Mx_MxDbShape: typeof MxDbShape;
type Mx_MxDbEllipseShape = MxDbEllipseShape;
declare const Mx_MxDbEllipseShape: typeof MxDbEllipseShape;
type Mx_MxDbEllipseArc = MxDbEllipseArc;
declare const Mx_MxDbEllipseArc: typeof MxDbEllipseArc;
type Mx_MxDbCircleShape = MxDbCircleShape;
declare const Mx_MxDbCircleShape: typeof MxDbCircleShape;
type Mx_MxDbCircleArc = MxDbCircleArc;
declare const Mx_MxDbCircleArc: typeof MxDbCircleArc;
type Mx_MxDbArcShapeDraw = MxDbArcShapeDraw;
declare const Mx_MxDbArcShapeDraw: typeof MxDbArcShapeDraw;
type Mx_MxDbRingShape = MxDbRingShape;
declare const Mx_MxDbRingShape: typeof MxDbRingShape;
type Mx_MxDbStarShape = MxDbStarShape;
declare const Mx_MxDbStarShape: typeof MxDbStarShape;
type Mx_MxDbRegularPolygonShape = MxDbRegularPolygonShape;
declare const Mx_MxDbRegularPolygonShape: typeof MxDbRegularPolygonShape;
type Mx_MxDbArrow = MxDbArrow;
declare const Mx_MxDbArrow: typeof MxDbArrow;
type Mx_MxDbLineShape = MxDbLineShape;
declare const Mx_MxDbLineShape: typeof MxDbLineShape;
type Mx_Layer = Layer;
declare const Mx_Layer: typeof Layer;
type Mx_MxDbSplineCurve = MxDbSplineCurve;
declare const Mx_MxDbSplineCurve: typeof MxDbSplineCurve;
type Mx_MrxDbgUiPrBase = MrxDbgUiPrBase;
declare const Mx_MrxDbgUiPrBase: typeof MrxDbgUiPrBase;
type Mx_MxCursorType = MxCursorType;
declare const Mx_MxCursorType: typeof MxCursorType;
type Mx_DetailedResult = DetailedResult;
declare const Mx_DetailedResult: typeof DetailedResult;
type Mx_DynamicInputType = DynamicInputType;
declare const Mx_DynamicInputType: typeof DynamicInputType;
type Mx_UserInputControls = UserInputControls;
declare const Mx_UserInputControls: typeof UserInputControls;
type Mx_MrxDbgUiPrDist = MrxDbgUiPrDist;
declare const Mx_MrxDbgUiPrDist: typeof MrxDbgUiPrDist;
type Mx_MrxDbgUiPrInt = MrxDbgUiPrInt;
declare const Mx_MrxDbgUiPrInt: typeof MrxDbgUiPrInt;
type Mx_MrxDbgUiPrString = MrxDbgUiPrString;
declare const Mx_MrxDbgUiPrString: typeof MrxDbgUiPrString;
type Mx_MrxDbgUiPrKeyWord = MrxDbgUiPrKeyWord;
declare const Mx_MrxDbgUiPrKeyWord: typeof MrxDbgUiPrKeyWord;
type Mx_MrxDbgUiPrAngle = MrxDbgUiPrAngle;
declare const Mx_MrxDbgUiPrAngle: typeof MrxDbgUiPrAngle;
type Mx_MxTempMarkDraw = MxTempMarkDraw;
declare const Mx_MxTempMarkDraw: typeof MxTempMarkDraw;
declare namespace Mx {
  export {
    Mx_loadCoreCode as loadCoreCode,
    Mx_useCanvasResizeListener as useCanvasResizeListener,
    Mx_store as store,
    Mx_MxFun as MxFun,
    Mx_MxThreeJS as MxThreeJS,
    Mx_MxType as MxType,
    Mx_Mxassembly as Mxassembly,
    Mx_McGeTool as McGeTool,
    Mx_MrxDbgUtils as MrxDbgUtils,
    Mx_MxPaintBrush as MxPaintBrush,
    Mx_MrxDbgUiPrPoint as MrxDbgUiPrPoint,
    Mx_McEdGetPointWorldDrawObject as McEdGetPointWorldDrawObject,
    Mx_MrxDbgUiPrBaseReturn as MrxDbgUiPrBaseReturn,
    Mx_MxDbEntity as MxDbEntity,
    Mx_MxDbImage as MxDbImage,
    Mx_MxDbSVG as MxDbSVG,
    Mx_MxDbSVGText as MxDbSVGText,
    Mx_MxDbPolyline as MxDbPolyline,
    Mx_MxDb2LineAngularDimension as MxDb2LineAngularDimension,
    Mx_Mx3PointArc as Mx3PointArc,
    Mx_Mx2PointArc as Mx2PointArc,
    Mx_MxDbCoord as MxDbCoord,
    Mx_MxDbLine as MxDbLine,
    Mx_MxDbRect as MxDbRect,
    Mx_MxDbAlignedDimension as MxDbAlignedDimension,
    Mx_MxFilters as MxFilters,
    Mx_McGiWorldDraw as McGiWorldDraw,
    Mx_McGiWorldDrawType as McGiWorldDrawType,
    Mx_MxDbArea as MxDbArea,
    Mx_MxDbLeadTag as MxDbLeadTag,
    Mx_MxDbAnyLine as MxDbAnyLine,
    Mx_MxDbCloudLine as MxDbCloudLine,
    Mx_MxDbRegularPolygon as MxDbRegularPolygon,
    Mx_McGePoint3d as McGePoint3d,
    Mx_McGePoint3dArray as McGePoint3dArray,
    Mx_MxDbLeadComment as MxDbLeadComment,
    Mx_MxDbRectBoxLeadComment as MxDbRectBoxLeadComment,
    Mx_MxDbEllipse as MxDbEllipse,
    Mx_MxDbText as MxDbText,
    Mx_MxDrawObject as MxDrawObject,
    Mx_MxDbHatch as MxDbHatch,
    Mx_MxDbLayerTableRecord as MxDbLayerTableRecord,
    Mx_MxDbDatabase as MxDbDatabase,
    Mx_MxDbGroup as MxDbGroup,
    Mx_MxDbGradientLine as MxDbGradientLine,
    Mx_MxDbShape as MxDbShape,
    Mx_MxDbEllipseShape as MxDbEllipseShape,
    Mx_MxDbEllipseArc as MxDbEllipseArc,
    Mx_MxDbCircleShape as MxDbCircleShape,
    Mx_MxDbCircleArc as MxDbCircleArc,
    Mx_MxDbArcShapeDraw as MxDbArcShapeDraw,
    Mx_MxDbRingShape as MxDbRingShape,
    Mx_MxDbStarShape as MxDbStarShape,
    Mx_MxDbRegularPolygonShape as MxDbRegularPolygonShape,
    Mx_MxDbArrow as MxDbArrow,
    Mx_MxDbLineShape as MxDbLineShape,
    Mx_Layer as Layer,
    Mx_MxDbSplineCurve as MxDbSplineCurve,
    Mx_MrxDbgUiPrBase as MrxDbgUiPrBase,
    Mx_MxCursorType as MxCursorType,
    Mx_DetailedResult as DetailedResult,
    Mx_DynamicInputType as DynamicInputType,
    Mx_UserInputControls as UserInputControls,
    Mx_MrxDbgUiPrDist as MrxDbgUiPrDist,
    Mx_MrxDbgUiPrInt as MrxDbgUiPrInt,
    Mx_MrxDbgUiPrString as MrxDbgUiPrString,
    Mx_MrxDbgUiPrKeyWord as MrxDbgUiPrKeyWord,
    Mx_MrxDbgUiPrAngle as MrxDbgUiPrAngle,
    Mx_MxTempMarkDraw as MxTempMarkDraw,
  };
}

declare global {\r
    type THREE = typeof THREE;\r
    interface Window {\r
        THREE: typeof THREE;\r
    }\r
}

export { DetailedResult, DynamicInputType, Layer, McEdGetPointWorldDrawObject, McGePoint3d, McGePoint3dArray, McGeTool, McGiWorldDraw, McGiWorldDrawType, MrxDbgUiPrAngle, MrxDbgUiPrBase, MrxDbgUiPrBaseReturn, MrxDbgUiPrDist, MrxDbgUiPrInt, MrxDbgUiPrKeyWord, MrxDbgUiPrPoint, MrxDbgUiPrString, MrxDbgUtils, Mx2PointArc, Mx3PointArc, MxCursorType, MxDb2LineAngularDimension, MxDbAlignedDimension, MxDbAnyLine, MxDbArcShapeDraw, MxDbArea, MxDbArrow, MxDbCircleArc, MxDbCircleShape, MxDbCloudLine, MxDbCoord, MxDbDatabase, MxDbEllipse, MxDbEllipseArc, MxDbEllipseShape, MxDbEntity, MxDbGradientLine, MxDbGroup, MxDbHatch, MxDbImage, MxDbLayerTableRecord, MxDbLeadComment, MxDbLeadTag, MxDbLine, MxDbLineShape, MxDbPolyline, MxDbRect, MxDbRectBoxLeadComment, MxDbRegularPolygon, MxDbRegularPolygonShape, MxDbRingShape, MxDbSVG, MxDbSVGText, MxDbShape, MxDbSplineCurve, MxDbStarShape, MxDbText, MxDrawObject, MxFilters, MxFun, MxPaintBrush, MxTempMarkDraw, MxThreeJS, MxType, Mxassembly, UserInputControls, Mx as default, loadCoreCode, store, useCanvasResizeListener };
`,ie=`import { MxFun, DetailedResult, MrxDbgUiPrPoint, MrxDbgUiPrDist, MrxDbgUiPrAngle, MrxDbgUiPrInt, MrxDbgUiPrKeyWord, MrxDbgUiPrString, DynamicInputType, MxCursorType, MrxDbgUtils, MxDrawObject, store, loadCoreCode, MrxDbgUiPrBaseReturn } from 'mxdraw';

function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _typeof$2(o) {
  "@babel/helpers - typeof";

  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof$2(o);
}

function toPrimitive(t, r) {
  if ("object" != _typeof$2(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof$2(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof$2(i) ? i : String(i);
}

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf$1(o, p);
}

function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf$1(subClass, superClass);
}

function _possibleConstructorReturn$1(self, call) {
  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$1(self);
}

function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$1(o);
}

function getAugmentedNamespace(n) {
  var f = n.default;
	if (typeof f == "function") {
		var a = function () {
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var buffer$1 = {};

var base64Js = {};

base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i$1 = 0, len = code.length; i$1 < len; ++i$1) {
  lookup[i$1] = code[i$1];
  revLookup[code.charCodeAt(i$1)] = i$1;
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}

// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;
  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}
function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }
  return parts.join('');
}

var ieee754 = {};

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  buffer[offset + i - d] |= s * 128;
};

function _createSuper$c(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$d(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$d() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
(function (exports) {

  var base64 = base64Js;
  var ieee754$1 = ieee754;
  var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
  ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
  : null;
  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 0x7fffffff;
  exports.kMaxLength = K_MAX_LENGTH;

  /**
   * If \`Buffer.TYPED_ARRAY_SUPPORT\`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using \`buffer\` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to \`Uint8Array\`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '\`buffer\` v5.x. Use \`buffer\` v4.x if you require old browser support.');
  }
  function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1);
      var proto = {
        foo: function foo() {
          return 42;
        }
      };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function get() {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function get() {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    // Return an augmented \`Uint8Array\` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }

  /**
   * The Buffer constructor returns instances of \`Uint8Array\` that have their
   * prototype changed to \`Buffer.prototype\`. Furthermore, \`Buffer\` is a subclass of
   * \`Uint8Array\`, so the returned instances will have all the node \`Buffer\` methods
   * and the \`Uint8Array\` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The \`Uint8Array\` prototype remains unmodified.
   */

  function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer.poolSize = 8192; // not used by this implementation

  function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof$2(value));
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length);
    }
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    }
    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof$2(value));
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };

  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer, Uint8Array);
  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpreted as a start offset.
      return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size);
  };
  function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }
    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      var copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    var buf;
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array);
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }

    // Return an augmented \`Uint8Array\` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      var buf = createBuffer(len);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len);
      return buf;
    }
    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    // Note: cannot use \`length < K_MAX_LENGTH\` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer.alloc(+length);
  }
  Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
  };

  Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };
  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;
      default:
        return false;
    }
  };
  Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer.alloc(0);
    }
    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer.length) {
          if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
          buf.copy(buffer, pos);
        } else {
          Uint8Array.prototype.set.call(buffer, buf, pos);
        }
      } else if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer, pos);
      }
      pos += buf.length;
    }
    return buffer;
  };
  function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== 'string') {
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + _typeof$2(string));
    }
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;
        case 'hex':
          return len >>> 1;
        case 'base64':
          return base64ToBytes(string).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
          }

          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;
  function slowToString(encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return '';
    }
    if (end === undefined || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return '';
    }

    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return '';
    }
    if (!encoding) encoding = 'utf8';
    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);
        case 'ascii':
          return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);
        case 'base64':
          return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // This property is used by \`Buffer.isBuffer\` (and the \`is-buffer\` npm package)
  // to detect a Buffer instance. It's not possible to use \`instanceof Buffer\`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the \`buffer\` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true;
  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this;
  };
  Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this;
  };
  Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this;
  };
  Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer.prototype.toLocaleString = Buffer.prototype.toString;
  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };
  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
  };
  if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
  }
  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength);
    }
    if (!Buffer.isBuffer(target)) {
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + _typeof$2(target));
    }
    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  // Finds either the first index of \`val\` in \`buffer\` at offset >= \`byteOffset\`,
  // OR the last index of \`val\` in \`buffer\` at offset <= \`byteOffset\`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into \`buffer\`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset; // Coerce to Number.
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }
    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }
        if (found) return i;
      }
    }
    return -1;
  }
  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    var i;
    for (i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
      // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
          return asciiWrite(this, string, offset, length);
        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        var secondByte = void 0,
          thirdByte = void 0,
          fourthByte = void 0,
          tempCodePoint = void 0;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;
  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for (var i = start; i < end; ++i) {
      out += hexSliceLookupTable[buf[i]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for (var i = 0; i < bytes.length - 1; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented \`Uint8Array\` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }
  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    return val;
  };
  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }
    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }
    return val;
  };
  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };
  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) {
      boundsError(offset, this.length - 8);
    }
    var lo = first + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24);
    var hi = this[++offset] + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
  });
  Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) {
      boundsError(offset, this.length - 8);
    }
    var hi = first * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + this[++offset];
    var lo = this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
  });
  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };
  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) {
      boundsError(offset, this.length - 8);
    }
    var val = this[offset + 4] + this[offset + 5] * Math.pow(2, 8) + this[offset + 6] * Math.pow(2, 16) + (last << 24); // Overflow

    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24));
  });
  Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) {
      boundsError(offset, this.length - 8);
    }
    var val = (first << 24) +
    // Overflow
    this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + last);
  });
  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754$1.read(this, offset, true, 23, 4);
  };
  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754$1.read(this, offset, false, 23, 4);
  };
  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754$1.read(this, offset, true, 52, 8);
  };
  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754$1.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }
  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
  };
  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };
  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
  };
  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };
  function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    var lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
  }
  function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    var lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
  }
  Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
  });
  Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
  });
  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };
  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };
  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };
  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };
  Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
  });
  Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
  });
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
          // Fast path: If \`val\` fits into a single byte, use that numeric value.
          val = code;
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    } else if (typeof val === 'boolean') {
      val = Number(val);
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
      var len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }
    return this;
  };

  // CUSTOM ERRORS
  // =============

  // Simplified versions from Node, changed for Buffer-only usage
  var errors = {};
  function E(sym, getMessage, Base) {
    errors[sym] = /*#__PURE__*/function (_Base) {
      _inherits$1(NodeError, _Base);
      var _super = _createSuper$c(NodeError);
      function NodeError() {
        var _this;
        _classCallCheck$1(this, NodeError);
        _this = _super.call(this);
        Object.defineProperty(_assertThisInitialized$1(_this), 'message', {
          value: getMessage.apply(_assertThisInitialized$1(_this), arguments),
          writable: true,
          configurable: true
        });

        // Add the error code to the name to include it in the stack trace.
        _this.name = "".concat(_this.name, " [").concat(sym, "]");
        // Access the stack to generate the error message including the error code
        // from the name.
        _this.stack; // eslint-disable-line no-unused-expressions
        // Reset the name to the actual name.
        delete _this.name;
        return _this;
      }
      _createClass$1(NodeError, [{
        key: "code",
        get: function get() {
          return sym;
        },
        set: function set(value) {
          Object.defineProperty(this, 'code', {
            configurable: true,
            enumerable: true,
            value: value,
            writable: true
          });
        }
      }, {
        key: "toString",
        value: function toString() {
          return "".concat(this.name, " [").concat(sym, "]: ").concat(this.message);
        }
      }]);
      return NodeError;
    }(Base);
  }
  E('ERR_BUFFER_OUT_OF_BOUNDS', function (name) {
    if (name) {
      return "".concat(name, " is outside of buffer bounds");
    }
    return 'Attempt to access memory outside buffer bounds';
  }, RangeError);
  E('ERR_INVALID_ARG_TYPE', function (name, actual) {
    return "The \\"".concat(name, "\\" argument must be of type number. Received type ").concat(_typeof$2(actual));
  }, TypeError);
  E('ERR_OUT_OF_RANGE', function (str, range, input) {
    var msg = "The value of \\"".concat(str, "\\" is out of range.");
    var received = input;
    if (Number.isInteger(input) && Math.abs(input) > Math.pow(2, 32)) {
      received = addNumericalSeparator(String(input));
    } else if (typeof input === 'bigint') {
      received = String(input);
      if (input > Math.pow(BigInt(2), BigInt(32)) || input < -Math.pow(BigInt(2), BigInt(32))) {
        received = addNumericalSeparator(received);
      }
      received += 'n';
    }
    msg += " It must be ".concat(range, ". Received ").concat(received);
    return msg;
  }, RangeError);
  function addNumericalSeparator(val) {
    var res = '';
    var i = val.length;
    var start = val[0] === '-' ? 1 : 0;
    for (; i >= start + 4; i -= 3) {
      res = "_".concat(val.slice(i - 3, i)).concat(res);
    }
    return "".concat(val.slice(0, i)).concat(res);
  }

  // CHECK FUNCTIONS
  // ===============

  function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
      boundsError(offset, buf.length - (byteLength + 1));
    }
  }
  function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
      var n = typeof min === 'bigint' ? 'n' : '';
      var range;
      if (byteLength > 3) {
        if (min === 0 || min === BigInt(0)) {
          range = ">= 0".concat(n, " and < 2").concat(n, " ** ").concat((byteLength + 1) * 8).concat(n);
        } else {
          range = ">= -(2".concat(n, " ** ").concat((byteLength + 1) * 8 - 1).concat(n, ") and < 2 ** ") + "".concat((byteLength + 1) * 8 - 1).concat(n);
        }
      } else {
        range = ">= ".concat(min).concat(n, " and <= ").concat(max).concat(n);
      }
      throw new errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    checkBounds(buf, offset, byteLength);
  }
  function validateNumber(value, name) {
    if (typeof value !== 'number') {
      throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
    }
  }
  function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
      validateNumber(value, type);
      throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) {
      throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', ">= ".concat(type ? 1 : 0, " and <= ").concat(length), value);
  }

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str;
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          }

          // valid lead
          leadSurrogate = codePoint;
          continue;
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }
      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    var i;
    for (i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }
    return i;
  }

  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the \`instanceof\` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj; // eslint-disable-line no-self-compare
  }

  // Create lookup table for \`toString('hex')\`
  // See: https://github.com/feross/buffer/issues/219
  var hexSliceLookupTable = function () {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for (var i = 0; i < 16; ++i) {
      var i16 = i * 16;
      for (var j = 0; j < 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j];
      }
    }
    return table;
  }();

  // Return not function with Error if BigInt not supported
  function defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
  }
  function BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
  }
})(buffer$1);

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

var regeneratorRuntime$1 = {exports: {}};

var _typeof$1 = {exports: {}};

(function (module) {
  function _typeof(o) {
    "@babel/helpers - typeof";

    return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
  }
  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
})(_typeof$1);

(function (module) {
  var _typeof = _typeof$1.exports["default"];
  function _regeneratorRuntime() {

    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
    module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
      return e;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    var t,
      e = {},
      r = Object.prototype,
      n = r.hasOwnProperty,
      o = Object.defineProperty || function (t, e, r) {
        t[e] = r.value;
      },
      i = "function" == typeof Symbol ? Symbol : {},
      a = i.iterator || "@@iterator",
      c = i.asyncIterator || "@@asyncIterator",
      u = i.toStringTag || "@@toStringTag";
    function define(t, e, r) {
      return Object.defineProperty(t, e, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), t[e];
    }
    try {
      define({}, "");
    } catch (t) {
      define = function define(t, e, r) {
        return t[e] = r;
      };
    }
    function wrap(t, e, r, n) {
      var i = e && e.prototype instanceof Generator ? e : Generator,
        a = Object.create(i.prototype),
        c = new Context(n || []);
      return o(a, "_invoke", {
        value: makeInvokeMethod(t, r, c)
      }), a;
    }
    function tryCatch(t, e, r) {
      try {
        return {
          type: "normal",
          arg: t.call(e, r)
        };
      } catch (t) {
        return {
          type: "throw",
          arg: t
        };
      }
    }
    e.wrap = wrap;
    var h = "suspendedStart",
      l = "suspendedYield",
      f = "executing",
      s = "completed",
      y = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var p = {};
    define(p, a, function () {
      return this;
    });
    var d = Object.getPrototypeOf,
      v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t) {
      ["next", "throw", "return"].forEach(function (e) {
        define(t, e, function (t) {
          return this._invoke(e, t);
        });
      });
    }
    function AsyncIterator(t, e) {
      function invoke(r, o, i, a) {
        var c = tryCatch(t[r], t, o);
        if ("throw" !== c.type) {
          var u = c.arg,
            h = u.value;
          return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
            invoke("next", t, i, a);
          }, function (t) {
            invoke("throw", t, i, a);
          }) : e.resolve(h).then(function (t) {
            u.value = t, i(u);
          }, function (t) {
            return invoke("throw", t, i, a);
          });
        }
        a(c.arg);
      }
      var r;
      o(this, "_invoke", {
        value: function value(t, n) {
          function callInvokeWithMethodAndArg() {
            return new e(function (e, r) {
              invoke(t, n, e, r);
            });
          }
          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e, r, n) {
      var o = h;
      return function (i, a) {
        if (o === f) throw new Error("Generator is already running");
        if (o === s) {
          if ("throw" === i) throw a;
          return {
            value: t,
            done: !0
          };
        }
        for (n.method = i, n.arg = a;;) {
          var c = n.delegate;
          if (c) {
            var u = maybeInvokeDelegate(c, n);
            if (u) {
              if (u === y) continue;
              return u;
            }
          }
          if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
            if (o === h) throw o = s, n.arg;
            n.dispatchException(n.arg);
          } else "return" === n.method && n.abrupt("return", n.arg);
          o = f;
          var p = tryCatch(e, r, n);
          if ("normal" === p.type) {
            if (o = n.done ? s : l, p.arg === y) continue;
            return {
              value: p.arg,
              done: n.done
            };
          }
          "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
        }
      };
    }
    function maybeInvokeDelegate(e, r) {
      var n = r.method,
        o = e.iterator[n];
      if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
      var i = tryCatch(o, e.iterator, r.arg);
      if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
      var a = i.arg;
      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
    }
    function pushTryEntry(t) {
      var e = {
        tryLoc: t[0]
      };
      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
    }
    function resetTryEntry(t) {
      var e = t.completion || {};
      e.type = "normal", delete e.arg, t.completion = e;
    }
    function Context(t) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(e) {
      if (e || "" === e) {
        var r = e[a];
        if (r) return r.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) {
          var o = -1,
            i = function next() {
              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
              return next.value = t, next.done = !0, next;
            };
          return i.next = i;
        }
      }
      throw new TypeError(_typeof(e) + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), o(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
      var e = "function" == typeof t && t.constructor;
      return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
    }, e.mark = function (t) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
    }, e.awrap = function (t) {
      return {
        __await: t
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
      return this;
    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
      void 0 === i && (i = Promise);
      var a = new AsyncIterator(wrap(t, r, n, o), i);
      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
        return t.done ? t.value : a.next();
      });
    }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
      return this;
    }), define(g, "toString", function () {
      return "[object Generator]";
    }), e.keys = function (t) {
      var e = Object(t),
        r = [];
      for (var n in e) r.push(n);
      return r.reverse(), function next() {
        for (; r.length;) {
          var t = r.pop();
          if (t in e) return next.value = t, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, e.values = values, Context.prototype = {
      constructor: Context,
      reset: function reset(e) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
      },
      stop: function stop() {
        this.done = !0;
        var t = this.tryEntries[0].completion;
        if ("throw" === t.type) throw t.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(e) {
        if (this.done) throw e;
        var r = this;
        function handle(n, o) {
          return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
        }
        for (var o = this.tryEntries.length - 1; o >= 0; --o) {
          var i = this.tryEntries[o],
            a = i.completion;
          if ("root" === i.tryLoc) return handle("end");
          if (i.tryLoc <= this.prev) {
            var c = n.call(i, "catchLoc"),
              u = n.call(i, "finallyLoc");
            if (c && u) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            } else if (c) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            } else {
              if (!u) throw new Error("try statement without catch or finally");
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(t, e) {
        for (var r = this.tryEntries.length - 1; r >= 0; --r) {
          var o = this.tryEntries[r];
          if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
            var i = o;
            break;
          }
        }
        i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
        var a = i ? i.completion : {};
        return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
      },
      complete: function complete(t, e) {
        if ("throw" === t.type) throw t.arg;
        return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
      },
      finish: function finish(t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
        }
      },
      "catch": function _catch(t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.tryLoc === t) {
            var n = r.completion;
            if ("throw" === n.type) {
              var o = n.arg;
              resetTryEntry(r);
            }
            return o;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(e, r, n) {
        return this.delegate = {
          iterator: values(e),
          resultName: r,
          nextLoc: n
        }, "next" === this.method && (this.arg = t), y;
      }
    }, e;
  }
  module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
})(regeneratorRuntime$1);

// TODO(Babel 8): Remove this file.

var runtime = regeneratorRuntime$1.exports();
var regenerator = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if ((typeof globalThis === "undefined" ? "undefined" : _typeof$2(globalThis)) === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

function b64Encode(str) {
  return btoa(unescape(encodeURIComponent(str)));
}
function b64Decode(str) {
  return decodeURIComponent(escape(atob(str)));
}
function saveAsFileDialog(_x) {
  return _saveAsFileDialog.apply(this, arguments);
}
function _saveAsFileDialog() {
  _saveAsFileDialog = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(_ref) {
    var blob, _ref$filename, filename, _ref$types, types, _window$navigator2, _window$navigator, _window$navigator$use, handle, writable, link;
    return regenerator.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          blob = _ref.blob, _ref$filename = _ref.filename, filename = _ref$filename === void 0 ? "" : _ref$filename, _ref$types = _ref.types, types = _ref$types === void 0 ? [{
            description: "mxweb File",
            accept: {
              "application/octet-stream": [".mxweb"]
            }
          }] : _ref$types;
          _context3.prev = 1;
          if (!window.showSaveFilePicker) {
            _context3.next = 28;
            break;
          }
          if (!((_window$navigator = window.navigator) !== null && _window$navigator !== void 0 && (_window$navigator$use = _window$navigator.userActivation) !== null && _window$navigator$use !== void 0 && _window$navigator$use.isActive)) {
            _context3.next = 27;
            break;
          }
          _context3.prev = 4;
          if (window.showSaveFilePicker) {
            _context3.next = 7;
            break;
          }
          return _context3.abrupt("return");
        case 7:
          _context3.next = 9;
          return window.showSaveFilePicker({
            suggestedName: filename,
            types: types
          });
        case 9:
          handle = _context3.sent;
          _context3.next = 12;
          return handle.createWritable();
        case 12:
          writable = _context3.sent;
          _context3.next = 15;
          return writable.write(blob);
        case 15:
          _context3.next = 17;
          return writable.close();
        case 17:
          return _context3.abrupt("return", handle);
        case 20:
          _context3.prev = 20;
          _context3.t0 = _context3["catch"](4);
          if (!((_context3.t0 === null || _context3.t0 === void 0 ? void 0 : _context3.t0.name) === "AbortError")) {
            _context3.next = 24;
            break;
          }
          return _context3.abrupt("return");
        case 24:
          console.error(_context3.t0);
        case 25:
          _context3.next = 28;
          break;
        case 27:
          console.warn("\\u975E\\u7528\\u6237\\u4EA4\\u4E92 \\u65E0\\u6CD5\\u8C03\\u7528showSaveFilePicker \\u5DF2\\u9009\\u62E9\\u517C\\u5BB9\\u65B9\\u6848");
        case 28:
          if (!((_window$navigator2 = window.navigator) !== null && _window$navigator2 !== void 0 && _window$navigator2.msSaveOrOpenBlob)) {
            _context3.next = 31;
            break;
          }
          window.navigator.msSaveOrOpenBlob(blob, filename);
          return _context3.abrupt("return");
        case 31:
          link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.style.display = "none";
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          if (typeof window.URL.revokeObjectURL === "function") {
            window.URL.revokeObjectURL(link.href);
          } else if (typeof window.webkitURL !== "undefined" && typeof window.webkitURL.revokeObjectURL === "function") {
            window.webkitURL.revokeObjectURL(link.href);
          } else {
            window.URL.revokeObjectURL(link.href);
          }
          _context3.next = 44;
          break;
        case 41:
          _context3.prev = 41;
          _context3.t1 = _context3["catch"](1);
          console.error(_context3.t1.name, _context3.t1.message);
        case 44:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[1, 41], [4, 20]]);
  }));
  return _saveAsFileDialog.apply(this, arguments);
}
function downloadFile(blob, filename) {
  var link = document.createElement("a");
  link.href = window.URL.createObjectURL(blob);
  link.download = filename;
  link.click();
}
function downloadFileFromUrl(url, filename) {
  fetch(url).then(function (response) {
    return response.blob();
  }).then(function (blob) {
    var link = document.createElement("a");
    link.href = window.URL.createObjectURL(blob);
    link.download = filename;
    link.click();
  });
}
var getJsonFromUrl = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(url) {
    return regenerator.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return fetch(url);
        case 3:
          _context.next = 5;
          return _context.sent.json();
        case 5:
          return _context.abrupt("return", _context.sent);
        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](0);
          console.error("MxTip:error getJsonFromurl:" + url);
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 8]]);
  }));
  return function getJsonFromUrl(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var getFileFromUrl = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(url) {
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return fetch(url);
        case 3:
          return _context2.abrupt("return", _context2.sent);
        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](0);
          console.error("MxTip:error getFileFromUrl:" + url);
        case 9:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 6]]);
  }));
  return function getFileFromUrl(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
function _ML_String(strId, str) {
  return MxFun.getLanguageString(strId, str);
}
function IsZero(val) {
  return Math.abs(val) < 1e-7;
}
function postMemoryFile(memoryData, url, filename, retCall, param) {
  try {
    var formData = new FormData();
    var blob = new Blob([memoryData], {
      type: "application/octet-stream"
    });
    formData.append("file", new File([blob], filename));
    if (param) formData.append("param", param);
    var xhr = new XMLHttpRequest();
    xhr.open("POST", url);
    xhr.send(formData);
    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
          retCall(0, xhr.responseText);
        } else {
          console.log(xhr.responseText);
          retCall(4, "server error");
        }
      }
    };
  } catch (error) {
    retCall(-1, "catch error");
  }
}
function postEmscriptenIndexedDBFile(filekey, url, retCall, param) {
  var request = window.indexedDB.open("emscripten_filesystem", 1);
  request.onerror = function () {
    retCall(1, "open emscripten_filesystem failed");
  };
  request.onsuccess = function (event) {
    try {
      if (event.target != null) {
        var db = event.target.result;
        var transaction = db.transaction("FILES", "readonly");
        var objectStore = transaction.objectStore("FILES");
        var request2 = objectStore.get(filekey);
        request2.onerror = function () {
          retCall(3, "get file error");
        };
        request2.onsuccess = function () {
          var file = request2.result;
          if (file) {
            var formData = new FormData();
            formData.append("file", file);
            if (param) formData.append("param", param);
            var xhr = new XMLHttpRequest();
            xhr.open("POST", url);
            xhr.send(formData);
            xhr.onreadystatechange = function () {
              if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                  retCall(0, xhr.responseText);
                } else {
                  console.log(xhr.responseText);
                  retCall(4, "server error");
                }
              }
            };
          } else {
            retCall(5, "get file data error");
          }
        };
      } else {
        retCall(2, "event.target == null");
      }
    } catch (error) {
      retCall(-1, "catch error");
    }
  };
}
function createCursorHelp() {
  var canvasSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;
  var squareSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  var isRoss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "#ffffff";
  var canvas = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : document.createElement("canvas");
  var background = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "transparent";
  canvas.width = canvas.height = canvasSize;
  canvas.style.background = background;
  var ctx = canvas.getContext("2d");
  var canvasDevil = canvasSize % 2 === 0 ? -0.5 : 0;
  var squareDevil = squareSize % 2 === 0 ? -0.5 : 0;
  ctx.strokeStyle = color;
  ctx.lineWidth = 0;
  ctx.imageSmoothingEnabled = false;
  if (isRoss) {
    ctx.beginPath();
    ctx.moveTo(canvas.width / 2 + canvasDevil, canvasDevil);
    ctx.lineTo(canvas.width / 2 + canvasDevil, canvas.height + canvasDevil);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(canvasDevil, canvas.height / 2 + canvasDevil);
    ctx.lineTo(canvas.width + canvasDevil, canvas.height / 2 + canvasDevil);
    ctx.stroke();
  }
  ctx.beginPath();
  ctx.strokeRect(canvasSize / 2 - squareSize / 2 + squareDevil, canvasSize / 2 - squareSize / 2 + squareDevil, squareSize, squareSize);
  ctx.stroke();
  return canvas.toDataURL("image/png");
}
function createCursor() {
  var cursorSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;
  var targetFrameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "#ffffff";
  return {
    Rect: "url('".concat(createCursorHelp(cursorSize, targetFrameSize, false, color), "') ").concat(cursorSize / 2, " ").concat(cursorSize / 2, ", auto"),
    Cross: "url('".concat(createCursorHelp(cursorSize, 0, true, color), "') ").concat(cursorSize / 2, " ").concat(cursorSize / 2, " , auto"),
    Normal: "url('".concat(createCursorHelp(cursorSize, targetFrameSize, true, color), "') ").concat(cursorSize / 2, " ").concat(cursorSize / 2, ", auto")
  };
}
var MxTools = {
  b64Encode: b64Encode,
  b64Decode: b64Decode,
  saveAsFileDialog: saveAsFileDialog,
  downloadFile: downloadFile,
  downloadFileFromUrl: downloadFileFromUrl,
  getJsonFromUrl: getJsonFromUrl,
  getFileFromUrl: getFileFromUrl,
  _ML_String: _ML_String,
  IsZero: IsZero,
  postEmscriptenIndexedDBFile: postEmscriptenIndexedDBFile,
  postMemoryFile: postMemoryFile,
  createCursor: createCursor
};

function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var lib = {exports: {}};

var buffer = buffer$1;
var Buffer = buffer.Buffer;
var safer = {};
var key;
for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue;
  if (key === 'SlowBuffer' || key === 'Buffer') continue;
  safer[key] = buffer[key];
}
var Safer = safer.Buffer = {};
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue;
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
  Safer[key] = Buffer[key];
}
safer.Buffer.prototype = Buffer.prototype;
if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + _typeof$2(value));
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + _typeof$2(value));
    }
    return Buffer(value, encodingOrOffset, length);
  };
}
if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + _typeof$2(size));
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
    var buf = Buffer(size);
    if (!fill || fill.length === 0) {
      buf.fill(0);
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
    return buf;
  };
}
if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}
if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  };
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
  }
}
var safer_1 = safer;

var bomHandling = {};

var BOMChar = "\\uFEFF";
bomHandling.PrependBOM = PrependBOMWrapper;
function PrependBOMWrapper(encoder, options) {
  this.encoder = encoder;
  this.addBOM = true;
}
PrependBOMWrapper.prototype.write = function (str) {
  if (this.addBOM) {
    str = BOMChar + str;
    this.addBOM = false;
  }
  return this.encoder.write(str);
};
PrependBOMWrapper.prototype.end = function () {
  return this.encoder.end();
};

//------------------------------------------------------------------------------

bomHandling.StripBOM = StripBOMWrapper;
function StripBOMWrapper(decoder, options) {
  this.decoder = decoder;
  this.pass = false;
  this.options = options || {};
}
StripBOMWrapper.prototype.write = function (buf) {
  var res = this.decoder.write(buf);
  if (this.pass || !res) return res;
  if (res[0] === BOMChar) {
    res = res.slice(1);
    if (typeof this.options.stripBOM === 'function') this.options.stripBOM();
  }
  this.pass = true;
  return res;
};
StripBOMWrapper.prototype.end = function () {
  return this.decoder.end();
};

var encodings = {};

var string_decoder = {};

var safeBuffer$1 = {exports: {}};

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var hasRequiredSafeBuffer;
function requireSafeBuffer() {
  if (hasRequiredSafeBuffer) return safeBuffer$1.exports;
  hasRequiredSafeBuffer = 1;
  (function (module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = buffer$1;
    var Buffer = buffer.Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer.prototype);

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);
    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }
      return Buffer(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      return Buffer(size);
    };
    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      return buffer.SlowBuffer(size);
    };
  })(safeBuffer$1, safeBuffer$1.exports);
  return safeBuffer$1.exports;
}

var hasRequiredString_decoder;
function requireString_decoder() {
  if (hasRequiredString_decoder) return string_decoder;
  hasRequiredString_decoder = 1;

  /*<replacement>*/

  var Buffer = requireSafeBuffer().Buffer;
  /*</replacement>*/

  var isEncoding = Buffer.isEncoding || function (encoding) {
    encoding = '' + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
      case 'raw':
        return true;
      default:
        return false;
    }
  };
  function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while (true) {
      switch (enc) {
        case 'utf8':
        case 'utf-8':
          return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return 'utf16le';
        case 'latin1':
        case 'binary':
          return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
          return enc;
        default:
          if (retried) return; // undefined
          enc = ('' + enc).toLowerCase();
          retried = true;
      }
    }
  }

  // Do not cache \`Buffer.isEncoding\` when checking encoding names as some
  // modules monkey-patch it to support additional encodings
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters.
  string_decoder.StringDecoder = StringDecoder;
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case 'utf16le':
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case 'utf8':
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case 'base64':
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
  }
  StringDecoder.prototype.write = function (buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === undefined) return '';
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
  };
  StringDecoder.prototype.end = utf8End;

  // Returns only complete characters in a Buffer
  StringDecoder.prototype.text = utf8Text;

  // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
  StringDecoder.prototype.fillLast = function (buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };

  // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
  // continuation byte. If an invalid byte is detected, -2 is returned.
  function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
  }

  // Checks at most 3 bytes at the end of a Buffer in order to detect an
  // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
  // needed to complete the UTF-8 character (if applicable) are returned.
  function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }

  // Validates as many continuation bytes for a multi-byte UTF-8 character as
  // needed or are available. If we see a non-continuation byte where we expect
  // one, we "replace" the validated continuation bytes we've seen so far with
  // a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding
  // behavior. The continuation byte check is included three times in the case
  // where all of the continuation bytes for a character exist in the same buffer.
  // It is also done this way as a slight performance increase instead of using a
  // loop.
  function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
      self.lastNeed = 0;
      return "\\uFFFD";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 0xC0) !== 0x80) {
        self.lastNeed = 1;
        return "\\uFFFD";
      }
      if (self.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 0xC0) !== 0x80) {
          self.lastNeed = 2;
          return "\\uFFFD";
        }
      }
    }
  }

  // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }

  // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
  // partial character, the character's bytes are buffered until the required
  // number of bytes are available.
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
  }

  // For UTF-8, a replacement character is added when ending on a partial
  // character.
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + "\\uFFFD";
    return r;
  }

  // UTF-16LE typically needs two bytes per character, but even if we have an even
  // number of bytes available, we need to check if we end on a leading/high
  // surrogate. In that case, we need to wait for the next two bytes in order to
  // decode the last character properly.
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString('utf16le', i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 0xD800 && c <= 0xDBFF) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
  }

  // For UTF-16LE we do not explicitly append special replacement characters if we
  // end on a partial character, we simply let v8 handle that.
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
  }
  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
  }
  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
  }

  // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }
  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
  }
  return string_decoder;
}

var internal;
var hasRequiredInternal;
function requireInternal() {
  if (hasRequiredInternal) return internal;
  hasRequiredInternal = 1;
  var Buffer = safer_1.Buffer;

  // Export Node.js internal encodings.

  internal = {
    // Encodings
    utf8: {
      type: "_internal",
      bomAware: true
    },
    cesu8: {
      type: "_internal",
      bomAware: true
    },
    unicode11utf8: "utf8",
    ucs2: {
      type: "_internal",
      bomAware: true
    },
    utf16le: "ucs2",
    binary: {
      type: "_internal"
    },
    base64: {
      type: "_internal"
    },
    hex: {
      type: "_internal"
    },
    // Codec.
    _internal: InternalCodec
  };

  //------------------------------------------------------------------------------

  function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;
    if (this.enc === "base64") this.encoder = InternalEncoderBase64;else if (this.enc === "cesu8") {
      this.enc = "utf8"; // Use utf8 for decoding.
      this.encoder = InternalEncoderCesu8;

      // Add decoder for versions of Node not supporting CESU-8
      if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
        this.decoder = InternalDecoderCesu8;
        this.defaultCharUnicode = iconv.defaultCharUnicode;
      }
    }
  }
  InternalCodec.prototype.encoder = InternalEncoder;
  InternalCodec.prototype.decoder = InternalDecoder;

  //------------------------------------------------------------------------------

  // We use node.js internal decoder. Its signature is the same as ours.
  var StringDecoder = requireString_decoder().StringDecoder;
  if (!StringDecoder.prototype.end)
    // Node v0.8 doesn't have this method.
    StringDecoder.prototype.end = function () {};
  function InternalDecoder(options, codec) {
    this.decoder = new StringDecoder(codec.enc);
  }
  InternalDecoder.prototype.write = function (buf) {
    if (!Buffer.isBuffer(buf)) {
      buf = Buffer.from(buf);
    }
    return this.decoder.write(buf);
  };
  InternalDecoder.prototype.end = function () {
    return this.decoder.end();
  };

  //------------------------------------------------------------------------------
  // Encoder is mostly trivial

  function InternalEncoder(options, codec) {
    this.enc = codec.enc;
  }
  InternalEncoder.prototype.write = function (str) {
    return Buffer.from(str, this.enc);
  };
  InternalEncoder.prototype.end = function () {};

  //------------------------------------------------------------------------------
  // Except base64 encoder, which must keep its state.

  function InternalEncoderBase64(options, codec) {
    this.prevStr = '';
  }
  InternalEncoderBase64.prototype.write = function (str) {
    str = this.prevStr + str;
    var completeQuads = str.length - str.length % 4;
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);
    return Buffer.from(str, "base64");
  };
  InternalEncoderBase64.prototype.end = function () {
    return Buffer.from(this.prevStr, "base64");
  };

  //------------------------------------------------------------------------------
  // CESU-8 encoder is also special.

  function InternalEncoderCesu8(options, codec) {}
  InternalEncoderCesu8.prototype.write = function (str) {
    var buf = Buffer.alloc(str.length * 3),
      bufIdx = 0;
    for (var i = 0; i < str.length; i++) {
      var charCode = str.charCodeAt(i);
      // Naive implementation, but it works because CESU-8 is especially easy
      // to convert from UTF-16 (which all JS strings are encoded in).
      if (charCode < 0x80) buf[bufIdx++] = charCode;else if (charCode < 0x800) {
        buf[bufIdx++] = 0xC0 + (charCode >>> 6);
        buf[bufIdx++] = 0x80 + (charCode & 0x3f);
      } else {
        // charCode will always be < 0x10000 in javascript.
        buf[bufIdx++] = 0xE0 + (charCode >>> 12);
        buf[bufIdx++] = 0x80 + (charCode >>> 6 & 0x3f);
        buf[bufIdx++] = 0x80 + (charCode & 0x3f);
      }
    }
    return buf.slice(0, bufIdx);
  };
  InternalEncoderCesu8.prototype.end = function () {};

  //------------------------------------------------------------------------------
  // CESU-8 decoder is not implemented in Node v4.0+

  function InternalDecoderCesu8(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
  }
  InternalDecoderCesu8.prototype.write = function (buf) {
    var acc = this.acc,
      contBytes = this.contBytes,
      accBytes = this.accBytes,
      res = '';
    for (var i = 0; i < buf.length; i++) {
      var curByte = buf[i];
      if ((curByte & 0xC0) !== 0x80) {
        // Leading byte
        if (contBytes > 0) {
          // Previous code is invalid
          res += this.defaultCharUnicode;
          contBytes = 0;
        }
        if (curByte < 0x80) {
          // Single-byte code
          res += String.fromCharCode(curByte);
        } else if (curByte < 0xE0) {
          // Two-byte code
          acc = curByte & 0x1F;
          contBytes = 1;
          accBytes = 1;
        } else if (curByte < 0xF0) {
          // Three-byte code
          acc = curByte & 0x0F;
          contBytes = 2;
          accBytes = 1;
        } else {
          // Four or more are not supported for CESU-8.
          res += this.defaultCharUnicode;
        }
      } else {
        // Continuation byte
        if (contBytes > 0) {
          // We're waiting for it.
          acc = acc << 6 | curByte & 0x3f;
          contBytes--;
          accBytes++;
          if (contBytes === 0) {
            // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
            if (accBytes === 2 && acc < 0x80 && acc > 0) res += this.defaultCharUnicode;else if (accBytes === 3 && acc < 0x800) res += this.defaultCharUnicode;else
              // Actually add character.
              res += String.fromCharCode(acc);
          }
        } else {
          // Unexpected continuation byte
          res += this.defaultCharUnicode;
        }
      }
    }
    this.acc = acc;
    this.contBytes = contBytes;
    this.accBytes = accBytes;
    return res;
  };
  InternalDecoderCesu8.prototype.end = function () {
    var res = 0;
    if (this.contBytes > 0) res += this.defaultCharUnicode;
    return res;
  };
  return internal;
}

var utf32 = {};

var hasRequiredUtf32;
function requireUtf32() {
  if (hasRequiredUtf32) return utf32;
  hasRequiredUtf32 = 1;
  var Buffer = safer_1.Buffer;

  // == UTF32-LE/BE codec. ==========================================================

  utf32._utf32 = Utf32Codec;
  function Utf32Codec(codecOptions, iconv) {
    this.iconv = iconv;
    this.bomAware = true;
    this.isLE = codecOptions.isLE;
  }
  utf32.utf32le = {
    type: '_utf32',
    isLE: true
  };
  utf32.utf32be = {
    type: '_utf32',
    isLE: false
  };

  // Aliases
  utf32.ucs4le = 'utf32le';
  utf32.ucs4be = 'utf32be';
  Utf32Codec.prototype.encoder = Utf32Encoder;
  Utf32Codec.prototype.decoder = Utf32Decoder;

  // -- Encoding

  function Utf32Encoder(options, codec) {
    this.isLE = codec.isLE;
    this.highSurrogate = 0;
  }
  Utf32Encoder.prototype.write = function (str) {
    var src = Buffer.from(str, 'ucs2');
    var dst = Buffer.alloc(src.length * 2);
    var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
    var offset = 0;
    for (var i = 0; i < src.length; i += 2) {
      var code = src.readUInt16LE(i);
      var isHighSurrogate = 0xD800 <= code && code < 0xDC00;
      var isLowSurrogate = 0xDC00 <= code && code < 0xE000;
      if (this.highSurrogate) {
        if (isHighSurrogate || !isLowSurrogate) {
          // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low
          // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character
          // (technically wrong, but expected by some applications, like Windows file names).
          write32.call(dst, this.highSurrogate, offset);
          offset += 4;
        } else {
          // Create 32-bit value from high and low surrogates;
          var codepoint = (this.highSurrogate - 0xD800 << 10 | code - 0xDC00) + 0x10000;
          write32.call(dst, codepoint, offset);
          offset += 4;
          this.highSurrogate = 0;
          continue;
        }
      }
      if (isHighSurrogate) this.highSurrogate = code;else {
        // Even if the current character is a low surrogate, with no previous high surrogate, we'll
        // encode it as a semi-invalid stand-alone character for the same reasons expressed above for
        // unpaired high surrogates.
        write32.call(dst, code, offset);
        offset += 4;
        this.highSurrogate = 0;
      }
    }
    if (offset < dst.length) dst = dst.slice(0, offset);
    return dst;
  };
  Utf32Encoder.prototype.end = function () {
    // Treat any leftover high surrogate as a semi-valid independent character.
    if (!this.highSurrogate) return;
    var buf = Buffer.alloc(4);
    if (this.isLE) buf.writeUInt32LE(this.highSurrogate, 0);else buf.writeUInt32BE(this.highSurrogate, 0);
    this.highSurrogate = 0;
    return buf;
  };

  // -- Decoding

  function Utf32Decoder(options, codec) {
    this.isLE = codec.isLE;
    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
    this.overflow = [];
  }
  Utf32Decoder.prototype.write = function (src) {
    if (src.length === 0) return '';
    var i = 0;
    var codepoint = 0;
    var dst = Buffer.alloc(src.length + 4);
    var offset = 0;
    var isLE = this.isLE;
    var overflow = this.overflow;
    var badChar = this.badChar;
    if (overflow.length > 0) {
      for (; i < src.length && overflow.length < 4; i++) overflow.push(src[i]);
      if (overflow.length === 4) {
        // NOTE: codepoint is a signed int32 and can be negative.
        // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).
        if (isLE) {
          codepoint = overflow[i] | overflow[i + 1] << 8 | overflow[i + 2] << 16 | overflow[i + 3] << 24;
        } else {
          codepoint = overflow[i + 3] | overflow[i + 2] << 8 | overflow[i + 1] << 16 | overflow[i] << 24;
        }
        overflow.length = 0;
        offset = _writeCodepoint(dst, offset, codepoint, badChar);
      }
    }

    // Main loop. Should be as optimized as possible.
    for (; i < src.length - 3; i += 4) {
      // NOTE: codepoint is a signed int32 and can be negative.
      if (isLE) {
        codepoint = src[i] | src[i + 1] << 8 | src[i + 2] << 16 | src[i + 3] << 24;
      } else {
        codepoint = src[i + 3] | src[i + 2] << 8 | src[i + 1] << 16 | src[i] << 24;
      }
      offset = _writeCodepoint(dst, offset, codepoint, badChar);
    }

    // Keep overflowing bytes.
    for (; i < src.length; i++) {
      overflow.push(src[i]);
    }
    return dst.slice(0, offset).toString('ucs2');
  };
  function _writeCodepoint(dst, offset, codepoint, badChar) {
    // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.
    if (codepoint < 0 || codepoint > 0x10FFFF) {
      // Not a valid Unicode codepoint
      codepoint = badChar;
    }

    // Ephemeral Planes: Write high surrogate.
    if (codepoint >= 0x10000) {
      codepoint -= 0x10000;
      var high = 0xD800 | codepoint >> 10;
      dst[offset++] = high & 0xff;
      dst[offset++] = high >> 8;

      // Low surrogate is written below.
      var codepoint = 0xDC00 | codepoint & 0x3FF;
    }

    // Write BMP char or low surrogate.
    dst[offset++] = codepoint & 0xff;
    dst[offset++] = codepoint >> 8;
    return offset;
  }
  Utf32Decoder.prototype.end = function () {
    this.overflow.length = 0;
  };

  // == UTF-32 Auto codec =============================================================
  // Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.
  // Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32
  // Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});

  // Encoder prepends BOM (which can be overridden with (addBOM: false}).

  utf32.utf32 = Utf32AutoCodec;
  utf32.ucs4 = 'utf32';
  function Utf32AutoCodec(options, iconv) {
    this.iconv = iconv;
  }
  Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
  Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder;

  // -- Encoding

  function Utf32AutoEncoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined) options.addBOM = true;
    this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);
  }
  Utf32AutoEncoder.prototype.write = function (str) {
    return this.encoder.write(str);
  };
  Utf32AutoEncoder.prototype.end = function () {
    return this.encoder.end();
  };

  // -- Decoding

  function Utf32AutoDecoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  }
  Utf32AutoDecoder.prototype.write = function (buf) {
    if (!this.decoder) {
      // Codec is not chosen yet. Accumulate initial bytes.
      this.initialBufs.push(buf);
      this.initialBufsLen += buf.length;
      if (this.initialBufsLen < 32)
        // We need more bytes to use space heuristic (see below)
        return '';

      // We have enough bytes -> detect endianness.
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = '';
      for (var i = 0; i < this.initialBufs.length; i++) resStr += this.decoder.write(this.initialBufs[i]);
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.write(buf);
  };
  Utf32AutoDecoder.prototype.end = function () {
    if (!this.decoder) {
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = '';
      for (var i = 0; i < this.initialBufs.length; i++) resStr += this.decoder.write(this.initialBufs[i]);
      var trail = this.decoder.end();
      if (trail) resStr += trail;
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.end();
  };
  function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var invalidLE = 0,
      invalidBE = 0; // Number of invalid chars when decoded as LE or BE.
    var bmpCharsLE = 0,
      bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.

    outer_loop: for (var i = 0; i < bufs.length; i++) {
      var buf = bufs[i];
      for (var j = 0; j < buf.length; j++) {
        b.push(buf[j]);
        if (b.length === 4) {
          if (charsProcessed === 0) {
            // Check BOM first.
            if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {
              return 'utf-32le';
            }
            if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {
              return 'utf-32be';
            }
          }
          if (b[0] !== 0 || b[1] > 0x10) invalidBE++;
          if (b[3] !== 0 || b[2] > 0x10) invalidLE++;
          if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;
          if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;
          b.length = 0;
          charsProcessed++;
          if (charsProcessed >= 100) {
            break outer_loop;
          }
        }
      }
    }

    // Make decisions.
    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE) return 'utf-32be';
    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE) return 'utf-32le';

    // Couldn't decide (likely all zeros or not enough data).
    return defaultEncoding || 'utf-32le';
  }
  return utf32;
}

var utf16 = {};

var hasRequiredUtf16;
function requireUtf16() {
  if (hasRequiredUtf16) return utf16;
  hasRequiredUtf16 = 1;
  var Buffer = safer_1.Buffer;

  // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

  // == UTF16-BE codec. ==========================================================

  utf16.utf16be = Utf16BECodec;
  function Utf16BECodec() {}
  Utf16BECodec.prototype.encoder = Utf16BEEncoder;
  Utf16BECodec.prototype.decoder = Utf16BEDecoder;
  Utf16BECodec.prototype.bomAware = true;

  // -- Encoding

  function Utf16BEEncoder() {}
  Utf16BEEncoder.prototype.write = function (str) {
    var buf = Buffer.from(str, 'ucs2');
    for (var i = 0; i < buf.length; i += 2) {
      var tmp = buf[i];
      buf[i] = buf[i + 1];
      buf[i + 1] = tmp;
    }
    return buf;
  };
  Utf16BEEncoder.prototype.end = function () {};

  // -- Decoding

  function Utf16BEDecoder() {
    this.overflowByte = -1;
  }
  Utf16BEDecoder.prototype.write = function (buf) {
    if (buf.length == 0) return '';
    var buf2 = Buffer.alloc(buf.length + 1),
      i = 0,
      j = 0;
    if (this.overflowByte !== -1) {
      buf2[0] = buf[0];
      buf2[1] = this.overflowByte;
      i = 1;
      j = 2;
    }
    for (; i < buf.length - 1; i += 2, j += 2) {
      buf2[j] = buf[i + 1];
      buf2[j + 1] = buf[i];
    }
    this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;
    return buf2.slice(0, j).toString('ucs2');
  };
  Utf16BEDecoder.prototype.end = function () {
    this.overflowByte = -1;
  };

  // == UTF-16 codec =============================================================
  // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
  // Defaults to UTF-16LE, as it's prevalent and default in Node.
  // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
  // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

  // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

  utf16.utf16 = Utf16Codec;
  function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf16Codec.prototype.encoder = Utf16Encoder;
  Utf16Codec.prototype.decoder = Utf16Decoder;

  // -- Encoding (pass-through)

  function Utf16Encoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined) options.addBOM = true;
    this.encoder = codec.iconv.getEncoder('utf-16le', options);
  }
  Utf16Encoder.prototype.write = function (str) {
    return this.encoder.write(str);
  };
  Utf16Encoder.prototype.end = function () {
    return this.encoder.end();
  };

  // -- Decoding

  function Utf16Decoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  }
  Utf16Decoder.prototype.write = function (buf) {
    if (!this.decoder) {
      // Codec is not chosen yet. Accumulate initial bytes.
      this.initialBufs.push(buf);
      this.initialBufsLen += buf.length;
      if (this.initialBufsLen < 16)
        // We need more bytes to use space heuristic (see below)
        return '';

      // We have enough bytes -> detect endianness.
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = '';
      for (var i = 0; i < this.initialBufs.length; i++) resStr += this.decoder.write(this.initialBufs[i]);
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.write(buf);
  };
  Utf16Decoder.prototype.end = function () {
    if (!this.decoder) {
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = '';
      for (var i = 0; i < this.initialBufs.length; i++) resStr += this.decoder.write(this.initialBufs[i]);
      var trail = this.decoder.end();
      if (trail) resStr += trail;
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.end();
  };
  function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var asciiCharsLE = 0,
      asciiCharsBE = 0; // Number of ASCII chars when decoded as LE or BE.

    outer_loop: for (var i = 0; i < bufs.length; i++) {
      var buf = bufs[i];
      for (var j = 0; j < buf.length; j++) {
        b.push(buf[j]);
        if (b.length === 2) {
          if (charsProcessed === 0) {
            // Check BOM first.
            if (b[0] === 0xFF && b[1] === 0xFE) return 'utf-16le';
            if (b[0] === 0xFE && b[1] === 0xFF) return 'utf-16be';
          }
          if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;
          if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;
          b.length = 0;
          charsProcessed++;
          if (charsProcessed >= 100) {
            break outer_loop;
          }
        }
      }
    }

    // Make decisions.
    // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
    // So, we count ASCII as if it was LE or BE, and decide from that.
    if (asciiCharsBE > asciiCharsLE) return 'utf-16be';
    if (asciiCharsBE < asciiCharsLE) return 'utf-16le';

    // Couldn't decide (likely all zeros or not enough data).
    return defaultEncoding || 'utf-16le';
  }
  return utf16;
}

var utf7 = {};

var hasRequiredUtf7;
function requireUtf7() {
  if (hasRequiredUtf7) return utf7;
  hasRequiredUtf7 = 1;
  var Buffer = safer_1.Buffer;

  // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
  // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

  utf7.utf7 = Utf7Codec;
  utf7.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
  function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf7Codec.prototype.encoder = Utf7Encoder;
  Utf7Codec.prototype.decoder = Utf7Decoder;
  Utf7Codec.prototype.bomAware = true;

  // -- Encoding

  var nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;
  function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv;
  }
  Utf7Encoder.prototype.write = function (str) {
    // Naive implementation.
    // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
    return Buffer.from(str.replace(nonDirectChars, function (chunk) {
      return "+" + (chunk === '+' ? '' : this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) + "-";
    }.bind(this)));
  };
  Utf7Encoder.prototype.end = function () {};

  // -- Decoding

  function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
  }
  var base64Regex = /[A-Za-z0-9\\/+]/;
  var base64Chars = [];
  for (var i = 0; i < 256; i++) base64Chars[i] = base64Regex.test(String.fromCharCode(i));
  var plusChar = '+'.charCodeAt(0),
    minusChar = '-'.charCodeAt(0),
    andChar = '&'.charCodeAt(0);
  Utf7Decoder.prototype.write = function (buf) {
    var res = "",
      lastI = 0,
      inBase64 = this.inBase64,
      base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.

    for (var i = 0; i < buf.length; i++) {
      if (!inBase64) {
        // We're in direct mode.
        // Write direct chars until '+'
        if (buf[i] == plusChar) {
          res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
          lastI = i + 1;
          inBase64 = true;
        }
      } else {
        // We decode base64.
        if (!base64Chars[buf[i]]) {
          // Base64 ended.
          if (i == lastI && buf[i] == minusChar) {
            // "+-" -> "+"
            res += "+";
          } else {
            var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii");
            res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
          }
          if (buf[i] != minusChar)
            // Minus is absorbed after base64.
            i--;
          lastI = i + 1;
          inBase64 = false;
          base64Accum = '';
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
      var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");
      var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
      base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7Decoder.prototype.end = function () {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = '';
    return res;
  };

  // UTF-7-IMAP codec.
  // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
  // Differences:
  //  * Base64 part is started by "&" instead of "+"
  //  * Direct characters are 0x20-0x7E, except "&" (0x26)
  //  * In Base64, "," is used instead of "/"
  //  * Base64 must not be used to represent direct characters.
  //  * No implicit shift back from Base64 (should always end with '-')
  //  * String must end in non-shifted position.
  //  * "-&" while in base64 is not allowed.

  utf7.utf7imap = Utf7IMAPCodec;
  function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
  Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
  Utf7IMAPCodec.prototype.bomAware = true;

  // -- Encoding

  function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer.alloc(6);
    this.base64AccumIdx = 0;
  }
  Utf7IMAPEncoder.prototype.write = function (str) {
    var inBase64 = this.inBase64,
      base64Accum = this.base64Accum,
      base64AccumIdx = this.base64AccumIdx,
      buf = Buffer.alloc(str.length * 5 + 10),
      bufIdx = 0;
    for (var i = 0; i < str.length; i++) {
      var uChar = str.charCodeAt(i);
      if (0x20 <= uChar && uChar <= 0x7E) {
        // Direct character or '&'.
        if (inBase64) {
          if (base64AccumIdx > 0) {
            bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);
            base64AccumIdx = 0;
          }
          buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
          inBase64 = false;
        }
        if (!inBase64) {
          buf[bufIdx++] = uChar; // Write direct character

          if (uChar === andChar)
            // Ampersand -> '&-'
            buf[bufIdx++] = minusChar;
        }
      } else {
        // Non-direct character
        if (!inBase64) {
          buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
          inBase64 = true;
        }
        if (inBase64) {
          base64Accum[base64AccumIdx++] = uChar >> 8;
          base64Accum[base64AccumIdx++] = uChar & 0xFF;
          if (base64AccumIdx == base64Accum.length) {
            bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);
            base64AccumIdx = 0;
          }
        }
      }
    }
    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;
    return buf.slice(0, bufIdx);
  };
  Utf7IMAPEncoder.prototype.end = function () {
    var buf = Buffer.alloc(10),
      bufIdx = 0;
    if (this.inBase64) {
      if (this.base64AccumIdx > 0) {
        bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);
        this.base64AccumIdx = 0;
      }
      buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
      this.inBase64 = false;
    }
    return buf.slice(0, bufIdx);
  };

  // -- Decoding

  function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
  }
  var base64IMAPChars = base64Chars.slice();
  base64IMAPChars[','.charCodeAt(0)] = true;
  Utf7IMAPDecoder.prototype.write = function (buf) {
    var res = "",
      lastI = 0,
      inBase64 = this.inBase64,
      base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.
    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

    for (var i = 0; i < buf.length; i++) {
      if (!inBase64) {
        // We're in direct mode.
        // Write direct chars until '&'
        if (buf[i] == andChar) {
          res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
          lastI = i + 1;
          inBase64 = true;
        }
      } else {
        // We decode base64.
        if (!base64IMAPChars[buf[i]]) {
          // Base64 ended.
          if (i == lastI && buf[i] == minusChar) {
            // "&-" -> "&"
            res += "&";
          } else {
            var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii").replace(/,/g, '/');
            res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
          }
          if (buf[i] != minusChar)
            // Minus may be absorbed after base64.
            i--;
          lastI = i + 1;
          inBase64 = false;
          base64Accum = '';
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
      var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, '/');
      var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
      base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7IMAPDecoder.prototype.end = function () {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = '';
    return res;
  };
  return utf7;
}

var sbcsCodec = {};

var hasRequiredSbcsCodec;
function requireSbcsCodec() {
  if (hasRequiredSbcsCodec) return sbcsCodec;
  hasRequiredSbcsCodec = 1;
  var Buffer = safer_1.Buffer;

  // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
  // correspond to encoded bytes (if 128 - then lower half is ASCII). 

  sbcsCodec._sbcs = SBCSCodec;
  function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions) throw new Error("SBCS codec is called without the data.");

    // Prepare char buffer for decoding.
    if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256) throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
    if (codecOptions.chars.length === 128) {
      var asciiString = "";
      for (var i = 0; i < 128; i++) asciiString += String.fromCharCode(i);
      codecOptions.chars = asciiString + codecOptions.chars;
    }
    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');

    // Encoding buffer.
    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
    for (var i = 0; i < codecOptions.chars.length; i++) encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
    this.encodeBuf = encodeBuf;
  }
  SBCSCodec.prototype.encoder = SBCSEncoder;
  SBCSCodec.prototype.decoder = SBCSDecoder;
  function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf;
  }
  SBCSEncoder.prototype.write = function (str) {
    var buf = Buffer.alloc(str.length);
    for (var i = 0; i < str.length; i++) buf[i] = this.encodeBuf[str.charCodeAt(i)];
    return buf;
  };
  SBCSEncoder.prototype.end = function () {};
  function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf;
  }
  SBCSDecoder.prototype.write = function (buf) {
    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer.alloc(buf.length * 2);
    var idx1 = 0,
      idx2 = 0;
    for (var i = 0; i < buf.length; i++) {
      idx1 = buf[i] * 2;
      idx2 = i * 2;
      newBuf[idx2] = decodeBuf[idx1];
      newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
    }
    return newBuf.toString('ucs2');
  };
  SBCSDecoder.prototype.end = function () {};
  return sbcsCodec;
}

var sbcsData;
var hasRequiredSbcsData;
function requireSbcsData() {
  if (hasRequiredSbcsData) return sbcsData;
  hasRequiredSbcsData = 1;

  // Manually added data to be used by sbcs codec in addition to generated one.

  sbcsData = {
    // Not supported by iconv, not sure why.
    "10029": "maccenteuro",
    "maccenteuro": {
      "type": "_sbcs",
      "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
    },
    "808": "cp808",
    "ibm808": "cp808",
    "cp808": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
    },
    "mik": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "cp720": {
      "type": "_sbcs",
      "chars": "\\x80\\x81\\xE9\\xE2\\x84\\xE0\\x86\\xE7\\xEA\\xEB\\xE8\\xEF\\xEE\\x8D\\x8E\\x8F\\x90\\u0651\\u0652\\xF4\\xA4\\u0640\\xFB\\xF9\\u0621\\u0622\\u0623\\u0624\\xA3\\u0625\\u0626\\u0627\\u0628\\u0629\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u0630\\u0631\\u0632\\u0633\\u0634\\u0635\\xAB\\xBB\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255D\\u255C\\u255B\\u2510\\u2514\\u2534\\u252C\\u251C\\u2500\\u253C\\u255E\\u255F\\u255A\\u2554\\u2569\\u2566\\u2560\\u2550\\u256C\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256B\\u256A\\u2518\\u250C\\u2588\\u2584\\u258C\\u2590\\u2580\\u0636\\u0637\\u0638\\u0639\\u063A\\u0641\\xB5\\u0642\\u0643\\u0644\\u0645\\u0646\\u0647\\u0648\\u0649\\u064A\\u2261\\u064B\\u064C\\u064D\\u064E\\u064F\\u0650\\u2248\\xB0\\u2219\\xB7\\u221A\\u207F\\xB2\\u25A0\\xA0"
    },
    // Aliases of generated encodings.
    "ascii8bit": "ascii",
    "usascii": "ascii",
    "ansix34": "ascii",
    "ansix341968": "ascii",
    "ansix341986": "ascii",
    "csascii": "ascii",
    "cp367": "ascii",
    "ibm367": "ascii",
    "isoir6": "ascii",
    "iso646us": "ascii",
    "iso646irv": "ascii",
    "us": "ascii",
    "latin1": "iso88591",
    "latin2": "iso88592",
    "latin3": "iso88593",
    "latin4": "iso88594",
    "latin5": "iso88599",
    "latin6": "iso885910",
    "latin7": "iso885913",
    "latin8": "iso885914",
    "latin9": "iso885915",
    "latin10": "iso885916",
    "csisolatin1": "iso88591",
    "csisolatin2": "iso88592",
    "csisolatin3": "iso88593",
    "csisolatin4": "iso88594",
    "csisolatincyrillic": "iso88595",
    "csisolatinarabic": "iso88596",
    "csisolatingreek": "iso88597",
    "csisolatinhebrew": "iso88598",
    "csisolatin5": "iso88599",
    "csisolatin6": "iso885910",
    "l1": "iso88591",
    "l2": "iso88592",
    "l3": "iso88593",
    "l4": "iso88594",
    "l5": "iso88599",
    "l6": "iso885910",
    "l7": "iso885913",
    "l8": "iso885914",
    "l9": "iso885915",
    "l10": "iso885916",
    "isoir14": "iso646jp",
    "isoir57": "iso646cn",
    "isoir100": "iso88591",
    "isoir101": "iso88592",
    "isoir109": "iso88593",
    "isoir110": "iso88594",
    "isoir144": "iso88595",
    "isoir127": "iso88596",
    "isoir126": "iso88597",
    "isoir138": "iso88598",
    "isoir148": "iso88599",
    "isoir157": "iso885910",
    "isoir166": "tis620",
    "isoir179": "iso885913",
    "isoir199": "iso885914",
    "isoir203": "iso885915",
    "isoir226": "iso885916",
    "cp819": "iso88591",
    "ibm819": "iso88591",
    "cyrillic": "iso88595",
    "arabic": "iso88596",
    "arabic8": "iso88596",
    "ecma114": "iso88596",
    "asmo708": "iso88596",
    "greek": "iso88597",
    "greek8": "iso88597",
    "ecma118": "iso88597",
    "elot928": "iso88597",
    "hebrew": "iso88598",
    "hebrew8": "iso88598",
    "turkish": "iso88599",
    "turkish8": "iso88599",
    "thai": "iso885911",
    "thai8": "iso885911",
    "celtic": "iso885914",
    "celtic8": "iso885914",
    "isoceltic": "iso885914",
    "tis6200": "tis620",
    "tis62025291": "tis620",
    "tis62025330": "tis620",
    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",
    "cspc8codepage437": "cp437",
    "cspc775baltic": "cp775",
    "cspc850multilingual": "cp850",
    "cspcp852": "cp852",
    "cspc862latinhebrew": "cp862",
    "cpgr": "cp869",
    "msee": "cp1250",
    "mscyrl": "cp1251",
    "msansi": "cp1252",
    "msgreek": "cp1253",
    "msturk": "cp1254",
    "mshebr": "cp1255",
    "msarab": "cp1256",
    "winbaltrim": "cp1257",
    "cp20866": "koi8r",
    "20866": "koi8r",
    "ibm878": "koi8r",
    "cskoi8r": "koi8r",
    "cp21866": "koi8u",
    "21866": "koi8u",
    "ibm1168": "koi8u",
    "strk10482002": "rk1048",
    "tcvn5712": "tcvn",
    "tcvn57121": "tcvn",
    "gb198880": "iso646cn",
    "cn": "iso646cn",
    "csiso14jisc6220ro": "iso646jp",
    "jisc62201969ro": "iso646jp",
    "jp": "iso646jp",
    "cshproman8": "hproman8",
    "r8": "hproman8",
    "roman8": "hproman8",
    "xroman8": "hproman8",
    "ibm1051": "hproman8",
    "mac": "macintosh",
    "csmacintosh": "macintosh"
  };
  return sbcsData;
}

var sbcsDataGenerated;
var hasRequiredSbcsDataGenerated;
function requireSbcsDataGenerated() {
  if (hasRequiredSbcsDataGenerated) return sbcsDataGenerated;
  hasRequiredSbcsDataGenerated = 1;

  // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
  sbcsDataGenerated = {
    "437": "cp437",
    "737": "cp737",
    "775": "cp775",
    "850": "cp850",
    "852": "cp852",
    "855": "cp855",
    "856": "cp856",
    "857": "cp857",
    "858": "cp858",
    "860": "cp860",
    "861": "cp861",
    "862": "cp862",
    "863": "cp863",
    "864": "cp864",
    "865": "cp865",
    "866": "cp866",
    "869": "cp869",
    "874": "windows874",
    "922": "cp922",
    "1046": "cp1046",
    "1124": "cp1124",
    "1125": "cp1125",
    "1129": "cp1129",
    "1133": "cp1133",
    "1161": "cp1161",
    "1162": "cp1162",
    "1163": "cp1163",
    "1250": "windows1250",
    "1251": "windows1251",
    "1252": "windows1252",
    "1253": "windows1253",
    "1254": "windows1254",
    "1255": "windows1255",
    "1256": "windows1256",
    "1257": "windows1257",
    "1258": "windows1258",
    "28591": "iso88591",
    "28592": "iso88592",
    "28593": "iso88593",
    "28594": "iso88594",
    "28595": "iso88595",
    "28596": "iso88596",
    "28597": "iso88597",
    "28598": "iso88598",
    "28599": "iso88599",
    "28600": "iso885910",
    "28601": "iso885911",
    "28603": "iso885913",
    "28604": "iso885914",
    "28605": "iso885915",
    "28606": "iso885916",
    "windows874": {
      "type": "_sbcs",
      "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    "win874": "windows874",
    "cp874": "windows874",
    "windows1250": {
      "type": "_sbcs",
      "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    },
    "win1250": "windows1250",
    "cp1250": "windows1250",
    "windows1251": {
      "type": "_sbcs",
      "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    "win1251": "windows1251",
    "cp1251": "windows1251",
    "windows1252": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "win1252": "windows1252",
    "cp1252": "windows1252",
    "windows1253": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
    },
    "win1253": "windows1253",
    "cp1253": "windows1253",
    "windows1254": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
    },
    "win1254": "windows1254",
    "cp1254": "windows1254",
    "windows1255": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
    },
    "win1255": "windows1255",
    "cp1255": "windows1255",
    "windows1256": {
      "type": "_sbcs",
      "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
    },
    "win1256": "windows1256",
    "cp1256": "windows1256",
    "windows1257": {
      "type": "_sbcs",
      "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
    },
    "win1257": "windows1257",
    "cp1257": "windows1257",
    "windows1258": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    "win1258": "windows1258",
    "cp1258": "windows1258",
    "iso88591": {
      "type": "_sbcs",
      "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "cp28591": "iso88591",
    "iso88592": {
      "type": "_sbcs",
      "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    },
    "cp28592": "iso88592",
    "iso88593": {
      "type": "_sbcs",
      "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
    },
    "cp28593": "iso88593",
    "iso88594": {
      "type": "_sbcs",
      "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
    },
    "cp28594": "iso88594",
    "iso88595": {
      "type": "_sbcs",
      "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
    },
    "cp28595": "iso88595",
    "iso88596": {
      "type": "_sbcs",
      "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
    },
    "cp28596": "iso88596",
    "iso88597": {
      "type": "_sbcs",
      "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
    },
    "cp28597": "iso88597",
    "iso88598": {
      "type": "_sbcs",
      "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
    },
    "cp28598": "iso88598",
    "iso88599": {
      "type": "_sbcs",
      "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
    },
    "cp28599": "iso88599",
    "iso885910": {
      "type": "_sbcs",
      "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
    },
    "cp28600": "iso885910",
    "iso885911": {
      "type": "_sbcs",
      "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    "cp28601": "iso885911",
    "iso885913": {
      "type": "_sbcs",
      "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
    },
    "cp28603": "iso885913",
    "iso885914": {
      "type": "_sbcs",
      "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
    },
    "cp28604": "iso885914",
    "iso885915": {
      "type": "_sbcs",
      "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "cp28605": "iso885915",
    "iso885916": {
      "type": "_sbcs",
      "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
    },
    "cp28606": "iso885916",
    "cp437": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm437": "cp437",
    "csibm437": "cp437",
    "cp737": {
      "type": "_sbcs",
      "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
    },
    "ibm737": "cp737",
    "csibm737": "cp737",
    "cp775": {
      "type": "_sbcs",
      "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
    },
    "ibm775": "cp775",
    "csibm775": "cp775",
    "cp850": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    "ibm850": "cp850",
    "csibm850": "cp850",
    "cp852": {
      "type": "_sbcs",
      "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
    },
    "ibm852": "cp852",
    "csibm852": "cp852",
    "cp855": {
      "type": "_sbcs",
      "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
    },
    "ibm855": "cp855",
    "csibm855": "cp855",
    "cp856": {
      "type": "_sbcs",
      "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    "ibm856": "cp856",
    "csibm856": "cp856",
    "cp857": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
    },
    "ibm857": "cp857",
    "csibm857": "cp857",
    "cp858": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    "ibm858": "cp858",
    "csibm858": "cp858",
    "cp860": {
      "type": "_sbcs",
      "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm860": "cp860",
    "csibm860": "cp860",
    "cp861": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm861": "cp861",
    "csibm861": "cp861",
    "cp862": {
      "type": "_sbcs",
      "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm862": "cp862",
    "csibm862": "cp862",
    "cp863": {
      "type": "_sbcs",
      "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm863": "cp863",
    "csibm863": "cp863",
    "cp864": {
      "type": "_sbcs",
      "chars": "\\0\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\b\\t\\n\\x0B\\f\\r\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F !\\"#$\\u066A&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\\x7F\\xB0\\xB7\\u2219\\u221A\\u2592\\u2500\\u2502\\u253C\\u2524\\u252C\\u251C\\u2534\\u2510\\u250C\\u2514\\u2518\\u03B2\\u221E\\u03C6\\xB1\\xBD\\xBC\\u2248\\xAB\\xBB\\uFEF7\\uFEF8\\uFFFD\\uFFFD\\uFEFB\\uFEFC\\uFFFD\\xA0\\xAD\\uFE82\\xA3\\xA4\\uFE84\\uFFFD\\uFFFD\\uFE8E\\uFE8F\\uFE95\\uFE99\\u060C\\uFE9D\\uFEA1\\uFEA5\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\\uFED1\\u061B\\uFEB1\\uFEB5\\uFEB9\\u061F\\xA2\\uFE80\\uFE81\\uFE83\\uFE85\\uFECA\\uFE8B\\uFE8D\\uFE91\\uFE93\\uFE97\\uFE9B\\uFE9F\\uFEA3\\uFEA7\\uFEA9\\uFEAB\\uFEAD\\uFEAF\\uFEB3\\uFEB7\\uFEBB\\uFEBF\\uFEC1\\uFEC5\\uFECB\\uFECF\\xA6\\xAC\\xF7\\xD7\\uFEC9\\u0640\\uFED3\\uFED7\\uFEDB\\uFEDF\\uFEE3\\uFEE7\\uFEEB\\uFEED\\uFEEF\\uFEF3\\uFEBD\\uFECC\\uFECE\\uFECD\\uFEE1\\uFE7D\\u0651\\uFEE5\\uFEE9\\uFEEC\\uFEF0\\uFEF2\\uFED0\\uFED5\\uFEF5\\uFEF6\\uFEDD\\uFED9\\uFEF1\\u25A0\\uFFFD"
    },
    "ibm864": "cp864",
    "csibm864": "cp864",
    "cp865": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm865": "cp865",
    "csibm865": "cp865",
    "cp866": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
    },
    "ibm866": "cp866",
    "csibm866": "cp866",
    "cp869": {
      "type": "_sbcs",
      "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
    },
    "ibm869": "cp869",
    "csibm869": "cp869",
    "cp922": {
      "type": "_sbcs",
      "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
    },
    "ibm922": "cp922",
    "csibm922": "cp922",
    "cp1046": {
      "type": "_sbcs",
      "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
    },
    "ibm1046": "cp1046",
    "csibm1046": "cp1046",
    "cp1124": {
      "type": "_sbcs",
      "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
    },
    "ibm1124": "cp1124",
    "csibm1124": "cp1124",
    "cp1125": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
    },
    "ibm1125": "cp1125",
    "csibm1125": "cp1125",
    "cp1129": {
      "type": "_sbcs",
      "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    "ibm1129": "cp1129",
    "csibm1129": "cp1129",
    "cp1133": {
      "type": "_sbcs",
      "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
    },
    "ibm1133": "cp1133",
    "csibm1133": "cp1133",
    "cp1161": {
      "type": "_sbcs",
      "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
    },
    "ibm1161": "cp1161",
    "csibm1161": "cp1161",
    "cp1162": {
      "type": "_sbcs",
      "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    "ibm1162": "cp1162",
    "csibm1162": "cp1162",
    "cp1163": {
      "type": "_sbcs",
      "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    "ibm1163": "cp1163",
    "csibm1163": "cp1163",
    "maccroatian": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
    },
    "maccyrillic": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
    },
    "macgreek": {
      "type": "_sbcs",
      "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
    },
    "maciceland": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "macroman": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "macromania": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "macthai": {
      "type": "_sbcs",
      "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFEFF​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
    },
    "macturkish": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "macukraine": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
    },
    "koi8r": {
      "type": "_sbcs",
      "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    "koi8u": {
      "type": "_sbcs",
      "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    "koi8ru": {
      "type": "_sbcs",
      "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    "koi8t": {
      "type": "_sbcs",
      "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    "armscii8": {
      "type": "_sbcs",
      "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
    },
    "rk1048": {
      "type": "_sbcs",
      "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    "tcvn": {
      "type": "_sbcs",
      "chars": "\\0\\xDA\\u1EE4\\x03\\u1EEA\\u1EEC\\u1EEE\\x07\\b\\t\\n\\x0B\\f\\r\\x0E\\x0F\\x10\\u1EE8\\u1EF0\\u1EF2\\u1EF6\\u1EF8\\xDD\\u1EF4\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F !\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\\x7F\\xC0\\u1EA2\\xC3\\xC1\\u1EA0\\u1EB6\\u1EAC\\xC8\\u1EBA\\u1EBC\\xC9\\u1EB8\\u1EC6\\xCC\\u1EC8\\u0128\\xCD\\u1ECA\\xD2\\u1ECE\\xD5\\xD3\\u1ECC\\u1ED8\\u1EDC\\u1EDE\\u1EE0\\u1EDA\\u1EE2\\xD9\\u1EE6\\u0168\\xA0\\u0102\\xC2\\xCA\\xD4\\u01A0\\u01AF\\u0110\\u0103\\xE2\\xEA\\xF4\\u01A1\\u01B0\\u0111\\u1EB0\\u0300\\u0309\\u0303\\u0301\\u0323\\xE0\\u1EA3\\xE3\\xE1\\u1EA1\\u1EB2\\u1EB1\\u1EB3\\u1EB5\\u1EAF\\u1EB4\\u1EAE\\u1EA6\\u1EA8\\u1EAA\\u1EA4\\u1EC0\\u1EB7\\u1EA7\\u1EA9\\u1EAB\\u1EA5\\u1EAD\\xE8\\u1EC2\\u1EBB\\u1EBD\\xE9\\u1EB9\\u1EC1\\u1EC3\\u1EC5\\u1EBF\\u1EC7\\xEC\\u1EC9\\u1EC4\\u1EBE\\u1ED2\\u0129\\xED\\u1ECB\\xF2\\u1ED4\\u1ECF\\xF5\\xF3\\u1ECD\\u1ED3\\u1ED5\\u1ED7\\u1ED1\\u1ED9\\u1EDD\\u1EDF\\u1EE1\\u1EDB\\u1EE3\\xF9\\u1ED6\\u1EE7\\u0169\\xFA\\u1EE5\\u1EEB\\u1EED\\u1EEF\\u1EE9\\u1EF1\\u1EF3\\u1EF7\\u1EF9\\xFD\\u1EF5\\u1ED0"
    },
    "georgianacademy": {
      "type": "_sbcs",
      "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "georgianps": {
      "type": "_sbcs",
      "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "pt154": {
      "type": "_sbcs",
      "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    "viscii": {
      "type": "_sbcs",
      "chars": "\\0\\x01\\u1EB2\\x03\\x04\\u1EB4\\u1EAA\\x07\\b\\t\\n\\x0B\\f\\r\\x0E\\x0F\\x10\\x11\\x12\\x13\\u1EF6\\x15\\x16\\x17\\x18\\u1EF8\\x1A\\x1B\\x1C\\x1D\\u1EF4\\x1F !\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\\x7F\\u1EA0\\u1EAE\\u1EB0\\u1EB6\\u1EA4\\u1EA6\\u1EA8\\u1EAC\\u1EBC\\u1EB8\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EE2\\u1EDA\\u1EDC\\u1EDE\\u1ECA\\u1ECE\\u1ECC\\u1EC8\\u1EE6\\u0168\\u1EE4\\u1EF2\\xD5\\u1EAF\\u1EB1\\u1EB7\\u1EA5\\u1EA7\\u1EA9\\u1EAD\\u1EBD\\u1EB9\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1EE0\\u01A0\\u1ED9\\u1EDD\\u1EDF\\u1ECB\\u1EF0\\u1EE8\\u1EEA\\u1EEC\\u01A1\\u1EDB\\u01AF\\xC0\\xC1\\xC2\\xC3\\u1EA2\\u0102\\u1EB3\\u1EB5\\xC8\\xC9\\xCA\\u1EBA\\xCC\\xCD\\u0128\\u1EF3\\u0110\\u1EE9\\xD2\\xD3\\xD4\\u1EA1\\u1EF7\\u1EEB\\u1EED\\xD9\\xDA\\u1EF9\\u1EF5\\xDD\\u1EE1\\u01B0\\xE0\\xE1\\xE2\\xE3\\u1EA3\\u0103\\u1EEF\\u1EAB\\xE8\\xE9\\xEA\\u1EBB\\xEC\\xED\\u0129\\u1EC9\\u0111\\u1EF1\\xF2\\xF3\\xF4\\xF5\\u1ECF\\u1ECD\\u1EE5\\xF9\\xFA\\u0169\\u1EE7\\xFD\\u1EE3\\u1EEE"
    },
    "iso646cn": {
      "type": "_sbcs",
      "chars": "\\0\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\b\\t\\n\\x0B\\f\\r\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F !\\"#\\xA5%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_\`abcdefghijklmnopqrstuvwxyz{|}\\u203E\\x7F\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD"
    },
    "iso646jp": {
      "type": "_sbcs",
      "chars": "\\0\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\b\\t\\n\\x0B\\f\\r\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F !\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\xA5]^_\`abcdefghijklmnopqrstuvwxyz{|}\\u203E\\x7F\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD"
    },
    "hproman8": {
      "type": "_sbcs",
      "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
    },
    "macintosh": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "ascii": {
      "type": "_sbcs",
      "chars": "��������������������������������������������������������������������������������������������������������������������������������"
    },
    "tis620": {
      "type": "_sbcs",
      "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    }
  };
  return sbcsDataGenerated;
}

var dbcsCodec = {};

var hasRequiredDbcsCodec;
function requireDbcsCodec() {
  if (hasRequiredDbcsCodec) return dbcsCodec;
  hasRequiredDbcsCodec = 1;
  var Buffer = safer_1.Buffer;

  // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
  // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
  // To save memory and loading time, we read table files only when requested.

  dbcsCodec._dbcs = DBCSCodec;
  var UNASSIGNED = -1,
    GB18030_CODE = -2,
    SEQ_START = -10,
    NODE_START = -1000,
    UNASSIGNED_NODE = new Array(0x100),
    DEF_CHAR = -1;
  for (var i = 0; i < 0x100; i++) UNASSIGNED_NODE[i] = UNASSIGNED;

  // Class DBCSCodec reads and initializes mapping tables.
  function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions) throw new Error("DBCS codec is called without the data.");
    if (!codecOptions.table) throw new Error("Encoding '" + this.encodingName + "' has no data.");

    // Load tables.
    var mappingTable = codecOptions.table();

    // Decode tables: MBCS -> Unicode.

    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
    // Trie root is decodeTables[0].
    // Values: >=  0 -> unicode character code. can be > 0xFFFF
    //         == UNASSIGNED -> unknown/unassigned sequence.
    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
    //         <= NODE_START -> index of the next node in our trie to process next byte.
    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
    this.decodeTableSeq = [];

    // Actual mapping tables consist of chunks. Use them to fill up decode tables.
    for (var i = 0; i < mappingTable.length; i++) this._addDecodeChunk(mappingTable[i]);

    // Load & create GB18030 tables when needed.
    if (typeof codecOptions.gb18030 === 'function') {
      this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

      // Add GB18030 common decode nodes.
      var commonThirdByteNodeIdx = this.decodeTables.length;
      this.decodeTables.push(UNASSIGNED_NODE.slice(0));
      var commonFourthByteNodeIdx = this.decodeTables.length;
      this.decodeTables.push(UNASSIGNED_NODE.slice(0));

      // Fill out the tree
      var firstByteNode = this.decodeTables[0];
      for (var i = 0x81; i <= 0xFE; i++) {
        var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i]];
        for (var j = 0x30; j <= 0x39; j++) {
          if (secondByteNode[j] === UNASSIGNED) {
            secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
          } else if (secondByteNode[j] > NODE_START) {
            throw new Error("gb18030 decode tables conflict at byte 2");
          }
          var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];
          for (var k = 0x81; k <= 0xFE; k++) {
            if (thirdByteNode[k] === UNASSIGNED) {
              thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
            } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
              continue;
            } else if (thirdByteNode[k] > NODE_START) {
              throw new Error("gb18030 decode tables conflict at byte 3");
            }
            var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];
            for (var l = 0x30; l <= 0x39; l++) {
              if (fourthByteNode[l] === UNASSIGNED) fourthByteNode[l] = GB18030_CODE;
            }
          }
        }
      }
    }
    this.defaultCharUnicode = iconv.defaultCharUnicode;

    // Encode tables: Unicode -> DBCS.

    // \`encodeTable\` is array mapping from unicode char to encoded char. All its values are integers for performance.
    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
    //         == UNASSIGNED -> no conversion found. Output a default char.
    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
    this.encodeTable = [];

    // \`encodeTableSeq\` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
    // means end of sequence (needed when one sequence is a strict subsequence of another).
    // Objects are kept separately from encodeTable to increase performance.
    this.encodeTableSeq = [];

    // Some chars can be decoded, but need not be encoded.
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals) for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
      var val = codecOptions.encodeSkipVals[i];
      if (typeof val === 'number') skipEncodeChars[val] = true;else for (var j = val.from; j <= val.to; j++) skipEncodeChars[j] = true;
    }

    // Use decode trie to recursively fill out encode tables.
    this._fillEncodeTable(0, 0, skipEncodeChars);

    // Add more encoding pairs when needed.
    if (codecOptions.encodeAdd) {
      for (var uChar in codecOptions.encodeAdd) if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar)) this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }
    this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);
  }
  DBCSCodec.prototype.encoder = DBCSEncoder;
  DBCSCodec.prototype.decoder = DBCSDecoder;

  // Decoder helpers
  DBCSCodec.prototype._getDecodeTrieNode = function (addr) {
    var bytes = [];
    for (; addr > 0; addr >>>= 8) bytes.push(addr & 0xFF);
    if (bytes.length == 0) bytes.push(0);
    var node = this.decodeTables[0];
    for (var i = bytes.length - 1; i > 0; i--) {
      // Traverse nodes deeper into the trie.
      var val = node[bytes[i]];
      if (val == UNASSIGNED) {
        // Create new node.
        node[bytes[i]] = NODE_START - this.decodeTables.length;
        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
      } else if (val <= NODE_START) {
        // Existing node.
        node = this.decodeTables[NODE_START - val];
      } else throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
  };
  DBCSCodec.prototype._addDecodeChunk = function (chunk) {
    // First element of chunk is the hex mbcs code where we start.
    var curAddr = parseInt(chunk[0], 16);

    // Choose the decoding node where we'll write our chars.
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 0xFF;

    // Write all other elements of the chunk to the table.
    for (var k = 1; k < chunk.length; k++) {
      var part = chunk[k];
      if (typeof part === "string") {
        // String, write as-is.
        for (var l = 0; l < part.length;) {
          var code = part.charCodeAt(l++);
          if (0xD800 <= code && code < 0xDC00) {
            // Decode surrogate
            var codeTrail = part.charCodeAt(l++);
            if (0xDC00 <= codeTrail && codeTrail < 0xE000) writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);else throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
          } else if (0x0FF0 < code && code <= 0x0FFF) {
            // Character sequence (our own encoding used)
            var len = 0xFFF - code + 2;
            var seq = [];
            for (var m = 0; m < len; m++) seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

            writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
            this.decodeTableSeq.push(seq);
          } else writeTable[curAddr++] = code; // Basic char
        }
      } else if (typeof part === "number") {
        // Integer, meaning increasing sequence starting with prev character.
        var charCode = writeTable[curAddr - 1] + 1;
        for (var l = 0; l < part; l++) writeTable[curAddr++] = charCode++;
      } else throw new Error("Incorrect type '" + _typeof$2(part) + "' given in " + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 0xFF) throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
  };

  // Encoder helpers
  DBCSCodec.prototype._getEncodeBucket = function (uCode) {
    var high = uCode >> 8; // This could be > 0xFF because of astral characters.
    if (this.encodeTable[high] === undefined) this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
    return this.encodeTable[high];
  };
  DBCSCodec.prototype._setEncodeChar = function (uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;
    if (bucket[low] <= SEQ_START) this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
    else if (bucket[low] == UNASSIGNED) bucket[low] = dbcsCode;
  };
  DBCSCodec.prototype._setEncodeSequence = function (seq, dbcsCode) {
    // Get the root of character tree according to first character of the sequence.
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;
    var node;
    if (bucket[low] <= SEQ_START) {
      // There's already a sequence with  - use it.
      node = this.encodeTableSeq[SEQ_START - bucket[low]];
    } else {
      // There was no sequence object - allocate a new one.
      node = {};
      if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
      bucket[low] = SEQ_START - this.encodeTableSeq.length;
      this.encodeTableSeq.push(node);
    }

    // Traverse the character tree, allocating new nodes as needed.
    for (var j = 1; j < seq.length - 1; j++) {
      var oldVal = node[uCode];
      if (_typeof$2(oldVal) === 'object') node = oldVal;else {
        node = node[uCode] = {};
        if (oldVal !== undefined) node[DEF_CHAR] = oldVal;
      }
    }

    // Set the leaf to given dbcsCode.
    uCode = seq[seq.length - 1];
    node[uCode] = dbcsCode;
  };
  DBCSCodec.prototype._fillEncodeTable = function (nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    var hasValues = false;
    var subNodeEmpty = {};
    for (var i = 0; i < 0x100; i++) {
      var uCode = node[i];
      var mbCode = prefix + i;
      if (skipEncodeChars[mbCode]) continue;
      if (uCode >= 0) {
        this._setEncodeChar(uCode, mbCode);
        hasValues = true;
      } else if (uCode <= NODE_START) {
        var subNodeIdx = NODE_START - uCode;
        if (!subNodeEmpty[subNodeIdx]) {
          // Skip empty subtrees (they are too large in gb18030).
          var newPrefix = mbCode << 8 >>> 0; // NOTE: '>>> 0' keeps 32-bit num positive.
          if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars)) hasValues = true;else subNodeEmpty[subNodeIdx] = true;
        }
      } else if (uCode <= SEQ_START) {
        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
        hasValues = true;
      }
    }
    return hasValues;
  };

  // == Encoder ==================================================================

  function DBCSEncoder(options, codec) {
    // Encoder state
    this.leadSurrogate = -1;
    this.seqObj = undefined;

    // Static data
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
  }
  DBCSEncoder.prototype.write = function (str) {
    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),
      leadSurrogate = this.leadSurrogate,
      seqObj = this.seqObj,
      nextChar = -1,
      i = 0,
      j = 0;
    while (true) {
      // 0. Get next character.
      if (nextChar === -1) {
        if (i == str.length) break;
        var uCode = str.charCodeAt(i++);
      } else {
        var uCode = nextChar;
        nextChar = -1;
      }

      // 1. Handle surrogates.
      if (0xD800 <= uCode && uCode < 0xE000) {
        // Char is one of surrogates.
        if (uCode < 0xDC00) {
          // We've got lead surrogate.
          if (leadSurrogate === -1) {
            leadSurrogate = uCode;
            continue;
          } else {
            leadSurrogate = uCode;
            // Double lead surrogate found.
            uCode = UNASSIGNED;
          }
        } else {
          // We've got trail surrogate.
          if (leadSurrogate !== -1) {
            uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
            leadSurrogate = -1;
          } else {
            // Incomplete surrogate pair - only trail surrogate found.
            uCode = UNASSIGNED;
          }
        }
      } else if (leadSurrogate !== -1) {
        // Incomplete surrogate pair - only lead surrogate found.
        nextChar = uCode;
        uCode = UNASSIGNED; // Write an error, then current char.
        leadSurrogate = -1;
      }

      // 2. Convert uCode character.
      var dbcsCode = UNASSIGNED;
      if (seqObj !== undefined && uCode != UNASSIGNED) {
        // We are in the middle of the sequence
        var resCode = seqObj[uCode];
        if (_typeof$2(resCode) === 'object') {
          // Sequence continues.
          seqObj = resCode;
          continue;
        } else if (typeof resCode == 'number') {
          // Sequence finished. Write it.
          dbcsCode = resCode;
        } else if (resCode == undefined) {
          // Current character is not part of the sequence.

          // Try default character for this sequence
          resCode = seqObj[DEF_CHAR];
          if (resCode !== undefined) {
            dbcsCode = resCode; // Found. Write it.
            nextChar = uCode; // Current character will be written too in the next iteration.
          }
        }
        seqObj = undefined;
      } else if (uCode >= 0) {
        // Regular character
        var subtable = this.encodeTable[uCode >> 8];
        if (subtable !== undefined) dbcsCode = subtable[uCode & 0xFF];
        if (dbcsCode <= SEQ_START) {
          // Sequence start
          seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
          continue;
        }
        if (dbcsCode == UNASSIGNED && this.gb18030) {
          // Use GB18030 algorithm to find character(s) to write.
          var idx = findIdx(this.gb18030.uChars, uCode);
          if (idx != -1) {
            var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
            newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600);
            dbcsCode = dbcsCode % 12600;
            newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260);
            dbcsCode = dbcsCode % 1260;
            newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10);
            dbcsCode = dbcsCode % 10;
            newBuf[j++] = 0x30 + dbcsCode;
            continue;
          }
        }
      }

      // 3. Write dbcsCode character.
      if (dbcsCode === UNASSIGNED) dbcsCode = this.defaultCharSingleByte;
      if (dbcsCode < 0x100) {
        newBuf[j++] = dbcsCode;
      } else if (dbcsCode < 0x10000) {
        newBuf[j++] = dbcsCode >> 8; // high byte
        newBuf[j++] = dbcsCode & 0xFF; // low byte
      } else if (dbcsCode < 0x1000000) {
        newBuf[j++] = dbcsCode >> 16;
        newBuf[j++] = dbcsCode >> 8 & 0xFF;
        newBuf[j++] = dbcsCode & 0xFF;
      } else {
        newBuf[j++] = dbcsCode >>> 24;
        newBuf[j++] = dbcsCode >>> 16 & 0xFF;
        newBuf[j++] = dbcsCode >>> 8 & 0xFF;
        newBuf[j++] = dbcsCode & 0xFF;
      }
    }
    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.end = function () {
    if (this.leadSurrogate === -1 && this.seqObj === undefined) return; // All clean. Most often case.

    var newBuf = Buffer.alloc(10),
      j = 0;
    if (this.seqObj) {
      // We're in the sequence.
      var dbcsCode = this.seqObj[DEF_CHAR];
      if (dbcsCode !== undefined) {
        // Write beginning of the sequence.
        if (dbcsCode < 0x100) {
          newBuf[j++] = dbcsCode;
        } else {
          newBuf[j++] = dbcsCode >> 8; // high byte
          newBuf[j++] = dbcsCode & 0xFF; // low byte
        }
      }
      this.seqObj = undefined;
    }
    if (this.leadSurrogate !== -1) {
      // Incomplete surrogate pair - only lead surrogate found.
      newBuf[j++] = this.defaultCharSingleByte;
      this.leadSurrogate = -1;
    }
    return newBuf.slice(0, j);
  };

  // Export for testing
  DBCSEncoder.prototype.findIdx = findIdx;

  // == Decoder ==================================================================

  function DBCSDecoder(options, codec) {
    // Decoder state
    this.nodeIdx = 0;
    this.prevBytes = [];

    // Static data
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
  }
  DBCSDecoder.prototype.write = function (buf) {
    var newBuf = Buffer.alloc(buf.length * 2),
      nodeIdx = this.nodeIdx,
      prevBytes = this.prevBytes,
      prevOffset = this.prevBytes.length,
      seqStart = -this.prevBytes.length,
      // idx of the start of current parsed sequence.
      uCode;
    for (var i = 0, j = 0; i < buf.length; i++) {
      var curByte = i >= 0 ? buf[i] : prevBytes[i + prevOffset];

      // Lookup in current trie node.
      var uCode = this.decodeTables[nodeIdx][curByte];
      if (uCode >= 0) ; else if (uCode === UNASSIGNED) {
        // Unknown char.
        // TODO: Callback with seq.
        uCode = this.defaultCharUnicode.charCodeAt(0);
        i = seqStart; // Skip one byte ('i' will be incremented by the for loop) and try to parse again.
      } else if (uCode === GB18030_CODE) {
        if (i >= 3) {
          var ptr = (buf[i - 3] - 0x81) * 12600 + (buf[i - 2] - 0x30) * 1260 + (buf[i - 1] - 0x81) * 10 + (curByte - 0x30);
        } else {
          var ptr = (prevBytes[i - 3 + prevOffset] - 0x81) * 12600 + ((i - 2 >= 0 ? buf[i - 2] : prevBytes[i - 2 + prevOffset]) - 0x30) * 1260 + ((i - 1 >= 0 ? buf[i - 1] : prevBytes[i - 1 + prevOffset]) - 0x81) * 10 + (curByte - 0x30);
        }
        var idx = findIdx(this.gb18030.gbChars, ptr);
        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
      } else if (uCode <= NODE_START) {
        // Go to next trie node.
        nodeIdx = NODE_START - uCode;
        continue;
      } else if (uCode <= SEQ_START) {
        // Output a sequence of chars.
        var seq = this.decodeTableSeq[SEQ_START - uCode];
        for (var k = 0; k < seq.length - 1; k++) {
          uCode = seq[k];
          newBuf[j++] = uCode & 0xFF;
          newBuf[j++] = uCode >> 8;
        }
        uCode = seq[seq.length - 1];
      } else throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

      // Write the character to buffer, handling higher planes using surrogate pair.
      if (uCode >= 0x10000) {
        uCode -= 0x10000;
        var uCodeLead = 0xD800 | uCode >> 10;
        newBuf[j++] = uCodeLead & 0xFF;
        newBuf[j++] = uCodeLead >> 8;
        uCode = 0xDC00 | uCode & 0x3FF;
      }
      newBuf[j++] = uCode & 0xFF;
      newBuf[j++] = uCode >> 8;

      // Reset trie node.
      nodeIdx = 0;
      seqStart = i + 1;
    }
    this.nodeIdx = nodeIdx;
    this.prevBytes = seqStart >= 0 ? Array.prototype.slice.call(buf, seqStart) : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));
    return newBuf.slice(0, j).toString('ucs2');
  };
  DBCSDecoder.prototype.end = function () {
    var ret = '';

    // Try to parse all remaining chars.
    while (this.prevBytes.length > 0) {
      // Skip 1 character in the buffer.
      ret += this.defaultCharUnicode;
      var bytesArr = this.prevBytes.slice(1);

      // Parse remaining as usual.
      this.prevBytes = [];
      this.nodeIdx = 0;
      if (bytesArr.length > 0) ret += this.write(bytesArr);
    }
    this.prevBytes = [];
    this.nodeIdx = 0;
    return ret;
  };

  // Binary search for GB18030. Returns largest i such that table[i] <= val.
  function findIdx(table, val) {
    if (table[0] > val) return -1;
    var l = 0,
      r = table.length;
    while (l < r - 1) {
      // always table[l] <= val < table[r]
      var mid = l + (r - l + 1 >> 1);
      if (table[mid] <= val) l = mid;else r = mid;
    }
    return l;
  }
  return dbcsCodec;
}

const require$$0 = [
	[
		"0",
		"\\u0000",
		128
	],
	[
		"a1",
		"｡",
		62
	],
	[
		"8140",
		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
		9,
		"＋－±×"
	],
	[
		"8180",
		"÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"
	],
	[
		"81b8",
		"∈∋⊆⊇⊂⊃∪∩"
	],
	[
		"81c8",
		"∧∨￢⇒⇔∀∃"
	],
	[
		"81da",
		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
	],
	[
		"81f0",
		"Å‰♯♭♪†‡¶"
	],
	[
		"81fc",
		"◯"
	],
	[
		"824f",
		"０",
		9
	],
	[
		"8260",
		"Ａ",
		25
	],
	[
		"8281",
		"ａ",
		25
	],
	[
		"829f",
		"ぁ",
		82
	],
	[
		"8340",
		"ァ",
		62
	],
	[
		"8380",
		"ム",
		22
	],
	[
		"839f",
		"Α",
		16,
		"Σ",
		6
	],
	[
		"83bf",
		"α",
		16,
		"σ",
		6
	],
	[
		"8440",
		"А",
		5,
		"ЁЖ",
		25
	],
	[
		"8470",
		"а",
		5,
		"ёж",
		7
	],
	[
		"8480",
		"о",
		17
	],
	[
		"849f",
		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
	],
	[
		"8740",
		"①",
		19,
		"Ⅰ",
		9
	],
	[
		"875f",
		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
	],
	[
		"877e",
		"㍻"
	],
	[
		"8780",
		"〝〟№㏍℡㊤",
		4,
		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
	],
	[
		"889f",
		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
	],
	[
		"8940",
		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"
	],
	[
		"8980",
		"園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
	],
	[
		"8a40",
		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"
	],
	[
		"8a80",
		"橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
	],
	[
		"8b40",
		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"
	],
	[
		"8b80",
		"朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
	],
	[
		"8c40",
		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"
	],
	[
		"8c80",
		"劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
	],
	[
		"8d40",
		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"
	],
	[
		"8d80",
		"項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
	],
	[
		"8e40",
		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"
	],
	[
		"8e80",
		"死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
	],
	[
		"8f40",
		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"
	],
	[
		"8f80",
		"準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
	],
	[
		"9040",
		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"
	],
	[
		"9080",
		"逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
	],
	[
		"9140",
		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"
	],
	[
		"9180",
		"操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
	],
	[
		"9240",
		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"
	],
	[
		"9280",
		"逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
	],
	[
		"9340",
		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"
	],
	[
		"9380",
		"凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
	],
	[
		"9440",
		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"
	],
	[
		"9480",
		"楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
	],
	[
		"9540",
		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"
	],
	[
		"9580",
		"斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
	],
	[
		"9640",
		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"
	],
	[
		"9680",
		"摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
	],
	[
		"9740",
		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"
	],
	[
		"9780",
		"沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
	],
	[
		"9840",
		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
	],
	[
		"989f",
		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
	],
	[
		"9940",
		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"
	],
	[
		"9980",
		"凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
	],
	[
		"9a40",
		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"
	],
	[
		"9a80",
		"噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
	],
	[
		"9b40",
		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"
	],
	[
		"9b80",
		"它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
	],
	[
		"9c40",
		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"
	],
	[
		"9c80",
		"怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
	],
	[
		"9d40",
		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"
	],
	[
		"9d80",
		"捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
	],
	[
		"9e40",
		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"
	],
	[
		"9e80",
		"梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
	],
	[
		"9f40",
		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"
	],
	[
		"9f80",
		"麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
	],
	[
		"e040",
		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"
	],
	[
		"e080",
		"烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
	],
	[
		"e140",
		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"
	],
	[
		"e180",
		"痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
	],
	[
		"e240",
		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"
	],
	[
		"e280",
		"窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
	],
	[
		"e340",
		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"
	],
	[
		"e380",
		"縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
	],
	[
		"e440",
		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"
	],
	[
		"e480",
		"艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
	],
	[
		"e540",
		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"
	],
	[
		"e580",
		"蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
	],
	[
		"e640",
		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"
	],
	[
		"e680",
		"諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
	],
	[
		"e740",
		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"
	],
	[
		"e780",
		"轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
	],
	[
		"e840",
		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"
	],
	[
		"e880",
		"閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
	],
	[
		"e940",
		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"
	],
	[
		"e980",
		"騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
	],
	[
		"ea40",
		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"
	],
	[
		"ea80",
		"黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"
	],
	[
		"ed40",
		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"
	],
	[
		"ed80",
		"塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
	],
	[
		"ee40",
		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"
	],
	[
		"ee80",
		"蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
	],
	[
		"eeef",
		"ⅰ",
		9,
		"￢￤＇＂"
	],
	[
		"f040",
		"",
		62
	],
	[
		"f080",
		"",
		124
	],
	[
		"f140",
		"",
		62
	],
	[
		"f180",
		"",
		124
	],
	[
		"f240",
		"",
		62
	],
	[
		"f280",
		"",
		124
	],
	[
		"f340",
		"",
		62
	],
	[
		"f380",
		"",
		124
	],
	[
		"f440",
		"",
		62
	],
	[
		"f480",
		"",
		124
	],
	[
		"f540",
		"",
		62
	],
	[
		"f580",
		"",
		124
	],
	[
		"f640",
		"",
		62
	],
	[
		"f680",
		"",
		124
	],
	[
		"f740",
		"",
		62
	],
	[
		"f780",
		"",
		124
	],
	[
		"f840",
		"",
		62
	],
	[
		"f880",
		"",
		124
	],
	[
		"f940",
		""
	],
	[
		"fa40",
		"ⅰ",
		9,
		"Ⅰ",
		9,
		"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"
	],
	[
		"fa80",
		"兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"
	],
	[
		"fb40",
		"涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"
	],
	[
		"fb80",
		"祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"
	],
	[
		"fc40",
		"髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
	]
];

const require$$1 = [
	[
		"0",
		"\\u0000",
		127
	],
	[
		"8ea1",
		"｡",
		62
	],
	[
		"a1a1",
		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
		9,
		"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"
	],
	[
		"a2a1",
		"◆□■△▲▽▼※〒→←↑↓〓"
	],
	[
		"a2ba",
		"∈∋⊆⊇⊂⊃∪∩"
	],
	[
		"a2ca",
		"∧∨￢⇒⇔∀∃"
	],
	[
		"a2dc",
		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
	],
	[
		"a2f2",
		"Å‰♯♭♪†‡¶"
	],
	[
		"a2fe",
		"◯"
	],
	[
		"a3b0",
		"０",
		9
	],
	[
		"a3c1",
		"Ａ",
		25
	],
	[
		"a3e1",
		"ａ",
		25
	],
	[
		"a4a1",
		"ぁ",
		82
	],
	[
		"a5a1",
		"ァ",
		85
	],
	[
		"a6a1",
		"Α",
		16,
		"Σ",
		6
	],
	[
		"a6c1",
		"α",
		16,
		"σ",
		6
	],
	[
		"a7a1",
		"А",
		5,
		"ЁЖ",
		25
	],
	[
		"a7d1",
		"а",
		5,
		"ёж",
		25
	],
	[
		"a8a1",
		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
	],
	[
		"ada1",
		"①",
		19,
		"Ⅰ",
		9
	],
	[
		"adc0",
		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
	],
	[
		"addf",
		"㍻〝〟№㏍℡㊤",
		4,
		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
	],
	[
		"b0a1",
		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
	],
	[
		"b1a1",
		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"
	],
	[
		"b2a1",
		"押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
	],
	[
		"b3a1",
		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"
	],
	[
		"b4a1",
		"粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
	],
	[
		"b5a1",
		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"
	],
	[
		"b6a1",
		"供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
	],
	[
		"b7a1",
		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"
	],
	[
		"b8a1",
		"検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
	],
	[
		"b9a1",
		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"
	],
	[
		"baa1",
		"此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
	],
	[
		"bba1",
		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"
	],
	[
		"bca1",
		"次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
	],
	[
		"bda1",
		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"
	],
	[
		"bea1",
		"勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
	],
	[
		"bfa1",
		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"
	],
	[
		"c0a1",
		"澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
	],
	[
		"c1a1",
		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"
	],
	[
		"c2a1",
		"臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
	],
	[
		"c3a1",
		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"
	],
	[
		"c4a1",
		"帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
	],
	[
		"c5a1",
		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"
	],
	[
		"c6a1",
		"董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
	],
	[
		"c7a1",
		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"
	],
	[
		"c8a1",
		"函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
	],
	[
		"c9a1",
		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"
	],
	[
		"caa1",
		"福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
	],
	[
		"cba1",
		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"
	],
	[
		"cca1",
		"漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
	],
	[
		"cda1",
		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"
	],
	[
		"cea1",
		"痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
	],
	[
		"cfa1",
		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
	],
	[
		"d0a1",
		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
	],
	[
		"d1a1",
		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"
	],
	[
		"d2a1",
		"辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
	],
	[
		"d3a1",
		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"
	],
	[
		"d4a1",
		"圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
	],
	[
		"d5a1",
		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"
	],
	[
		"d6a1",
		"屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
	],
	[
		"d7a1",
		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"
	],
	[
		"d8a1",
		"悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
	],
	[
		"d9a1",
		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"
	],
	[
		"daa1",
		"據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
	],
	[
		"dba1",
		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"
	],
	[
		"dca1",
		"棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
	],
	[
		"dda1",
		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"
	],
	[
		"dea1",
		"沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
	],
	[
		"dfa1",
		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"
	],
	[
		"e0a1",
		"燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
	],
	[
		"e1a1",
		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"
	],
	[
		"e2a1",
		"癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
	],
	[
		"e3a1",
		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"
	],
	[
		"e4a1",
		"筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
	],
	[
		"e5a1",
		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"
	],
	[
		"e6a1",
		"罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
	],
	[
		"e7a1",
		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"
	],
	[
		"e8a1",
		"茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
	],
	[
		"e9a1",
		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"
	],
	[
		"eaa1",
		"蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
	],
	[
		"eba1",
		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"
	],
	[
		"eca1",
		"譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
	],
	[
		"eda1",
		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"
	],
	[
		"eea1",
		"遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
	],
	[
		"efa1",
		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"
	],
	[
		"f0a1",
		"陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
	],
	[
		"f1a1",
		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"
	],
	[
		"f2a1",
		"髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
	],
	[
		"f3a1",
		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"
	],
	[
		"f4a1",
		"堯槇遙瑤凜熙"
	],
	[
		"f9a1",
		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"
	],
	[
		"faa1",
		"忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
	],
	[
		"fba1",
		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"
	],
	[
		"fca1",
		"釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
	],
	[
		"fcf1",
		"ⅰ",
		9,
		"￢￤＇＂"
	],
	[
		"8fa2af",
		"˘ˇ¸˙˝¯˛˚～΄΅"
	],
	[
		"8fa2c2",
		"¡¦¿"
	],
	[
		"8fa2eb",
		"ºª©®™¤№"
	],
	[
		"8fa6e1",
		"ΆΈΉΊΪ"
	],
	[
		"8fa6e7",
		"Ό"
	],
	[
		"8fa6e9",
		"ΎΫ"
	],
	[
		"8fa6ec",
		"Ώ"
	],
	[
		"8fa6f1",
		"άέήίϊΐόςύϋΰώ"
	],
	[
		"8fa7c2",
		"Ђ",
		10,
		"ЎЏ"
	],
	[
		"8fa7f2",
		"ђ",
		10,
		"ўџ"
	],
	[
		"8fa9a1",
		"ÆĐ"
	],
	[
		"8fa9a4",
		"Ħ"
	],
	[
		"8fa9a6",
		"Ĳ"
	],
	[
		"8fa9a8",
		"ŁĿ"
	],
	[
		"8fa9ab",
		"ŊØŒ"
	],
	[
		"8fa9af",
		"ŦÞ"
	],
	[
		"8fa9c1",
		"æđðħıĳĸłŀŉŋøœßŧþ"
	],
	[
		"8faaa1",
		"ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"
	],
	[
		"8faaba",
		"ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"
	],
	[
		"8faba1",
		"áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"
	],
	[
		"8fabbd",
		"ġĥíìïîǐ"
	],
	[
		"8fabc5",
		"īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"
	],
	[
		"8fb0a1",
		"丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"
	],
	[
		"8fb1a1",
		"侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"
	],
	[
		"8fb2a1",
		"傒傓傔傖傛傜傞",
		4,
		"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"
	],
	[
		"8fb3a1",
		"凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"
	],
	[
		"8fb4a1",
		"匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"
	],
	[
		"8fb5a1",
		"咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"
	],
	[
		"8fb6a1",
		"嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",
		5,
		"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",
		4,
		"囱囫园"
	],
	[
		"8fb7a1",
		"囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",
		4,
		"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"
	],
	[
		"8fb8a1",
		"堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"
	],
	[
		"8fb9a1",
		"奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"
	],
	[
		"8fbaa1",
		"嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",
		4,
		"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"
	],
	[
		"8fbba1",
		"屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"
	],
	[
		"8fbca1",
		"巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",
		4,
		"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"
	],
	[
		"8fbda1",
		"彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",
		4,
		"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"
	],
	[
		"8fbea1",
		"悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",
		4,
		"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"
	],
	[
		"8fbfa1",
		"懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"
	],
	[
		"8fc0a1",
		"捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"
	],
	[
		"8fc1a1",
		"擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"
	],
	[
		"8fc2a1",
		"昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"
	],
	[
		"8fc3a1",
		"杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",
		4,
		"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"
	],
	[
		"8fc4a1",
		"棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"
	],
	[
		"8fc5a1",
		"樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"
	],
	[
		"8fc6a1",
		"歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"
	],
	[
		"8fc7a1",
		"泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"
	],
	[
		"8fc8a1",
		"湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"
	],
	[
		"8fc9a1",
		"濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",
		4,
		"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",
		4,
		"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"
	],
	[
		"8fcaa1",
		"煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"
	],
	[
		"8fcba1",
		"狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"
	],
	[
		"8fcca1",
		"珿琀琁琄琇琊琑琚琛琤琦琨",
		9,
		"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"
	],
	[
		"8fcda1",
		"甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",
		5,
		"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"
	],
	[
		"8fcea1",
		"瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",
		6,
		"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"
	],
	[
		"8fcfa1",
		"睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"
	],
	[
		"8fd0a1",
		"碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"
	],
	[
		"8fd1a1",
		"秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"
	],
	[
		"8fd2a1",
		"笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",
		5
	],
	[
		"8fd3a1",
		"籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"
	],
	[
		"8fd4a1",
		"綞綦綧綪綳綶綷綹緂",
		4,
		"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"
	],
	[
		"8fd5a1",
		"罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"
	],
	[
		"8fd6a1",
		"胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"
	],
	[
		"8fd7a1",
		"艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"
	],
	[
		"8fd8a1",
		"荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"
	],
	[
		"8fd9a1",
		"蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",
		4,
		"蕖蕙蕜",
		6,
		"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"
	],
	[
		"8fdaa1",
		"藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",
		4,
		"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"
	],
	[
		"8fdba1",
		"蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",
		6,
		"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"
	],
	[
		"8fdca1",
		"蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",
		4,
		"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"
	],
	[
		"8fdda1",
		"襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",
		4,
		"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"
	],
	[
		"8fdea1",
		"誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",
		4,
		"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"
	],
	[
		"8fdfa1",
		"貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"
	],
	[
		"8fe0a1",
		"踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"
	],
	[
		"8fe1a1",
		"轃轇轏轑",
		4,
		"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"
	],
	[
		"8fe2a1",
		"郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"
	],
	[
		"8fe3a1",
		"釂釃釅釓釔釗釙釚釞釤釥釩釪釬",
		5,
		"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",
		4,
		"鉻鉼鉽鉿銈銉銊銍銎銒銗"
	],
	[
		"8fe4a1",
		"銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",
		4,
		"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"
	],
	[
		"8fe5a1",
		"鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",
		4,
		"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"
	],
	[
		"8fe6a1",
		"镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"
	],
	[
		"8fe7a1",
		"霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"
	],
	[
		"8fe8a1",
		"頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",
		4,
		"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"
	],
	[
		"8fe9a1",
		"馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",
		4
	],
	[
		"8feaa1",
		"鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",
		4,
		"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"
	],
	[
		"8feba1",
		"鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",
		4,
		"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"
	],
	[
		"8feca1",
		"鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"
	],
	[
		"8feda1",
		"黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",
		4,
		"齓齕齖齗齘齚齝齞齨齩齭",
		4,
		"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"
	]
];

const require$$2 = [
	[
		"0",
		"\\u0000",
		127,
		"€"
	],
	[
		"8140",
		"丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",
		5,
		"乲乴",
		9,
		"乿",
		6,
		"亇亊"
	],
	[
		"8180",
		"亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",
		6,
		"伋伌伒",
		4,
		"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",
		4,
		"佄佅佇",
		5,
		"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"
	],
	[
		"8240",
		"侤侫侭侰",
		4,
		"侶",
		8,
		"俀俁係俆俇俈俉俋俌俍俒",
		4,
		"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",
		11
	],
	[
		"8280",
		"個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",
		10,
		"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",
		4,
		"偖偗偘偙偛偝",
		7,
		"偦",
		5,
		"偭",
		8,
		"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",
		20,
		"傤傦傪傫傭",
		4,
		"傳",
		6,
		"傼"
	],
	[
		"8340",
		"傽",
		17,
		"僐",
		5,
		"僗僘僙僛",
		10,
		"僨僩僪僫僯僰僱僲僴僶",
		4,
		"僼",
		9,
		"儈"
	],
	[
		"8380",
		"儉儊儌",
		5,
		"儓",
		13,
		"儢",
		28,
		"兂兇兊兌兎兏児兒兓兗兘兙兛兝",
		4,
		"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",
		4,
		"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",
		5
	],
	[
		"8440",
		"凘凙凚凜凞凟凢凣凥",
		5,
		"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",
		5,
		"剋剎剏剒剓剕剗剘"
	],
	[
		"8480",
		"剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",
		9,
		"剾劀劃",
		4,
		"劉",
		6,
		"劑劒劔",
		6,
		"劜劤劥劦劧劮劯劰労",
		9,
		"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",
		5,
		"勠勡勢勣勥",
		10,
		"勱",
		7,
		"勻勼勽匁匂匃匄匇匉匊匋匌匎"
	],
	[
		"8540",
		"匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",
		9,
		"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"
	],
	[
		"8580",
		"厐",
		4,
		"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",
		6,
		"厷厸厹厺厼厽厾叀參",
		4,
		"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",
		4,
		"呣呥呧呩",
		7,
		"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"
	],
	[
		"8640",
		"咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",
		4,
		"哫哬哯哰哱哴",
		5,
		"哻哾唀唂唃唄唅唈唊",
		4,
		"唒唓唕",
		5,
		"唜唝唞唟唡唥唦"
	],
	[
		"8680",
		"唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",
		4,
		"啑啒啓啔啗",
		4,
		"啝啞啟啠啢啣啨啩啫啯",
		5,
		"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",
		6,
		"喨",
		8,
		"喲喴営喸喺喼喿",
		4,
		"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",
		4,
		"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",
		4,
		"嗿嘂嘃嘄嘅"
	],
	[
		"8740",
		"嘆嘇嘊嘋嘍嘐",
		7,
		"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",
		11,
		"噏",
		4,
		"噕噖噚噛噝",
		4
	],
	[
		"8780",
		"噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",
		7,
		"嚇",
		6,
		"嚐嚑嚒嚔",
		14,
		"嚤",
		10,
		"嚰",
		6,
		"嚸嚹嚺嚻嚽",
		12,
		"囋",
		8,
		"囕囖囘囙囜団囥",
		5,
		"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",
		6
	],
	[
		"8840",
		"園",
		9,
		"圝圞圠圡圢圤圥圦圧圫圱圲圴",
		4,
		"圼圽圿坁坃坄坅坆坈坉坋坒",
		4,
		"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"
	],
	[
		"8880",
		"垁垇垈垉垊垍",
		4,
		"垔",
		6,
		"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",
		8,
		"埄",
		6,
		"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",
		7,
		"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",
		4,
		"堫",
		4,
		"報堲堳場堶",
		7
	],
	[
		"8940",
		"堾",
		5,
		"塅",
		6,
		"塎塏塐塒塓塕塖塗塙",
		4,
		"塟",
		5,
		"塦",
		4,
		"塭",
		16,
		"塿墂墄墆墇墈墊墋墌"
	],
	[
		"8980",
		"墍",
		4,
		"墔",
		4,
		"墛墜墝墠",
		7,
		"墪",
		17,
		"墽墾墿壀壂壃壄壆",
		10,
		"壒壓壔壖",
		13,
		"壥",
		5,
		"壭壯壱売壴壵壷壸壺",
		7,
		"夃夅夆夈",
		4,
		"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"
	],
	[
		"8a40",
		"夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",
		4,
		"奡奣奤奦",
		12,
		"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"
	],
	[
		"8a80",
		"妧妬妭妰妱妳",
		5,
		"妺妼妽妿",
		6,
		"姇姈姉姌姍姎姏姕姖姙姛姞",
		4,
		"姤姦姧姩姪姫姭",
		11,
		"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",
		6,
		"娳娵娷",
		4,
		"娽娾娿婁",
		4,
		"婇婈婋",
		9,
		"婖婗婘婙婛",
		5
	],
	[
		"8b40",
		"婡婣婤婥婦婨婩婫",
		8,
		"婸婹婻婼婽婾媀",
		17,
		"媓",
		6,
		"媜",
		13,
		"媫媬"
	],
	[
		"8b80",
		"媭",
		4,
		"媴媶媷媹",
		4,
		"媿嫀嫃",
		5,
		"嫊嫋嫍",
		4,
		"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",
		4,
		"嫲",
		22,
		"嬊",
		11,
		"嬘",
		25,
		"嬳嬵嬶嬸",
		7,
		"孁",
		6
	],
	[
		"8c40",
		"孈",
		7,
		"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"
	],
	[
		"8c80",
		"寑寔",
		8,
		"寠寢寣實寧審",
		4,
		"寯寱",
		6,
		"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",
		6,
		"屰屲",
		6,
		"屻屼屽屾岀岃",
		4,
		"岉岊岋岎岏岒岓岕岝",
		4,
		"岤",
		4
	],
	[
		"8d40",
		"岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",
		5,
		"峌",
		5,
		"峓",
		5,
		"峚",
		6,
		"峢峣峧峩峫峬峮峯峱",
		9,
		"峼",
		4
	],
	[
		"8d80",
		"崁崄崅崈",
		5,
		"崏",
		4,
		"崕崗崘崙崚崜崝崟",
		4,
		"崥崨崪崫崬崯",
		4,
		"崵",
		7,
		"崿",
		7,
		"嵈嵉嵍",
		10,
		"嵙嵚嵜嵞",
		10,
		"嵪嵭嵮嵰嵱嵲嵳嵵",
		12,
		"嶃",
		21,
		"嶚嶛嶜嶞嶟嶠"
	],
	[
		"8e40",
		"嶡",
		21,
		"嶸",
		12,
		"巆",
		6,
		"巎",
		12,
		"巜巟巠巣巤巪巬巭"
	],
	[
		"8e80",
		"巰巵巶巸",
		4,
		"巿帀帄帇帉帊帋帍帎帒帓帗帞",
		7,
		"帨",
		4,
		"帯帰帲",
		4,
		"帹帺帾帿幀幁幃幆",
		5,
		"幍",
		6,
		"幖",
		4,
		"幜幝幟幠幣",
		14,
		"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",
		4,
		"庮",
		4,
		"庴庺庻庼庽庿",
		6
	],
	[
		"8f40",
		"廆廇廈廋",
		5,
		"廔廕廗廘廙廚廜",
		11,
		"廩廫",
		8,
		"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"
	],
	[
		"8f80",
		"弨弫弬弮弰弲",
		6,
		"弻弽弾弿彁",
		14,
		"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",
		5,
		"復徫徬徯",
		5,
		"徶徸徹徺徻徾",
		4,
		"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"
	],
	[
		"9040",
		"怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",
		4,
		"怶",
		4,
		"怽怾恀恄",
		6,
		"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"
	],
	[
		"9080",
		"悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",
		7,
		"惇惈惉惌",
		4,
		"惒惓惔惖惗惙惛惞惡",
		4,
		"惪惱惲惵惷惸惻",
		4,
		"愂愃愄愅愇愊愋愌愐",
		4,
		"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",
		18,
		"慀",
		6
	],
	[
		"9140",
		"慇慉態慍慏慐慒慓慔慖",
		6,
		"慞慟慠慡慣慤慥慦慩",
		6,
		"慱慲慳慴慶慸",
		18,
		"憌憍憏",
		4,
		"憕"
	],
	[
		"9180",
		"憖",
		6,
		"憞",
		8,
		"憪憫憭",
		9,
		"憸",
		5,
		"憿懀懁懃",
		4,
		"應懌",
		4,
		"懓懕",
		16,
		"懧",
		13,
		"懶",
		8,
		"戀",
		5,
		"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",
		4,
		"扂扄扅扆扊"
	],
	[
		"9240",
		"扏扐払扖扗扙扚扜",
		6,
		"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",
		5,
		"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"
	],
	[
		"9280",
		"拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",
		5,
		"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",
		7,
		"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",
		6,
		"採掤掦掫掯掱掲掵掶掹掻掽掿揀"
	],
	[
		"9340",
		"揁揂揃揅揇揈揊揋揌揑揓揔揕揗",
		6,
		"揟揢揤",
		4,
		"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",
		4,
		"損搎搑搒搕",
		5,
		"搝搟搢搣搤"
	],
	[
		"9380",
		"搥搧搨搩搫搮",
		5,
		"搵",
		4,
		"搻搼搾摀摂摃摉摋",
		6,
		"摓摕摖摗摙",
		4,
		"摟",
		7,
		"摨摪摫摬摮",
		9,
		"摻",
		6,
		"撃撆撈",
		8,
		"撓撔撗撘撚撛撜撝撟",
		4,
		"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",
		6,
		"擏擑擓擔擕擖擙據"
	],
	[
		"9440",
		"擛擜擝擟擠擡擣擥擧",
		24,
		"攁",
		7,
		"攊",
		7,
		"攓",
		4,
		"攙",
		8
	],
	[
		"9480",
		"攢攣攤攦",
		4,
		"攬攭攰攱攲攳攷攺攼攽敀",
		4,
		"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",
		14,
		"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",
		7,
		"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",
		7,
		"旡旣旤旪旫"
	],
	[
		"9540",
		"旲旳旴旵旸旹旻",
		4,
		"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",
		4,
		"昽昿晀時晄",
		6,
		"晍晎晐晑晘"
	],
	[
		"9580",
		"晙晛晜晝晞晠晢晣晥晧晩",
		4,
		"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",
		4,
		"暞",
		8,
		"暩",
		4,
		"暯",
		4,
		"暵暶暷暸暺暻暼暽暿",
		25,
		"曚曞",
		7,
		"曧曨曪",
		5,
		"曱曵曶書曺曻曽朁朂會"
	],
	[
		"9640",
		"朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",
		5,
		"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",
		4,
		"杝杢杣杤杦杧杫杬杮東杴杶"
	],
	[
		"9680",
		"杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",
		7,
		"柂柅",
		9,
		"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",
		7,
		"柾栁栂栃栄栆栍栐栒栔栕栘",
		4,
		"栞栟栠栢",
		6,
		"栫",
		6,
		"栴栵栶栺栻栿桇桋桍桏桒桖",
		5
	],
	[
		"9740",
		"桜桝桞桟桪桬",
		7,
		"桵桸",
		8,
		"梂梄梇",
		7,
		"梐梑梒梔梕梖梘",
		9,
		"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"
	],
	[
		"9780",
		"梹",
		6,
		"棁棃",
		5,
		"棊棌棎棏棐棑棓棔棖棗棙棛",
		4,
		"棡棢棤",
		9,
		"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",
		4,
		"椌椏椑椓",
		11,
		"椡椢椣椥",
		7,
		"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",
		16,
		"楕楖楘楙楛楜楟"
	],
	[
		"9840",
		"楡楢楤楥楧楨楩楪楬業楯楰楲",
		4,
		"楺楻楽楾楿榁榃榅榊榋榌榎",
		5,
		"榖榗榙榚榝",
		9,
		"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"
	],
	[
		"9880",
		"榾榿槀槂",
		7,
		"構槍槏槑槒槓槕",
		5,
		"槜槝槞槡",
		11,
		"槮槯槰槱槳",
		9,
		"槾樀",
		9,
		"樋",
		11,
		"標",
		5,
		"樠樢",
		5,
		"権樫樬樭樮樰樲樳樴樶",
		6,
		"樿",
		4,
		"橅橆橈",
		7,
		"橑",
		6,
		"橚"
	],
	[
		"9940",
		"橜",
		4,
		"橢橣橤橦",
		10,
		"橲",
		6,
		"橺橻橽橾橿檁檂檃檅",
		8,
		"檏檒",
		4,
		"檘",
		7,
		"檡",
		5
	],
	[
		"9980",
		"檧檨檪檭",
		114,
		"欥欦欨",
		6
	],
	[
		"9a40",
		"欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",
		11,
		"歚",
		7,
		"歨歩歫",
		13,
		"歺歽歾歿殀殅殈"
	],
	[
		"9a80",
		"殌殎殏殐殑殔殕殗殘殙殜",
		4,
		"殢",
		7,
		"殫",
		7,
		"殶殸",
		6,
		"毀毃毄毆",
		4,
		"毌毎毐毑毘毚毜",
		4,
		"毢",
		7,
		"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",
		6,
		"氈",
		4,
		"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",
		4,
		"汑汒汓汖汘"
	],
	[
		"9b40",
		"汙汚汢汣汥汦汧汫",
		4,
		"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"
	],
	[
		"9b80",
		"泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",
		5,
		"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",
		4,
		"涃涄涆涇涊涋涍涏涐涒涖",
		4,
		"涜涢涥涬涭涰涱涳涴涶涷涹",
		5,
		"淁淂淃淈淉淊"
	],
	[
		"9c40",
		"淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",
		7,
		"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"
	],
	[
		"9c80",
		"渶渷渹渻",
		7,
		"湅",
		7,
		"湏湐湑湒湕湗湙湚湜湝湞湠",
		10,
		"湬湭湯",
		14,
		"満溁溂溄溇溈溊",
		4,
		"溑",
		6,
		"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",
		5
	],
	[
		"9d40",
		"滰滱滲滳滵滶滷滸滺",
		7,
		"漃漄漅漇漈漊",
		4,
		"漐漑漒漖",
		9,
		"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",
		6,
		"漿潀潁潂"
	],
	[
		"9d80",
		"潃潄潅潈潉潊潌潎",
		9,
		"潙潚潛潝潟潠潡潣潤潥潧",
		5,
		"潯潰潱潳潵潶潷潹潻潽",
		6,
		"澅澆澇澊澋澏",
		12,
		"澝澞澟澠澢",
		4,
		"澨",
		10,
		"澴澵澷澸澺",
		5,
		"濁濃",
		5,
		"濊",
		6,
		"濓",
		10,
		"濟濢濣濤濥"
	],
	[
		"9e40",
		"濦",
		7,
		"濰",
		32,
		"瀒",
		7,
		"瀜",
		6,
		"瀤",
		6
	],
	[
		"9e80",
		"瀫",
		9,
		"瀶瀷瀸瀺",
		17,
		"灍灎灐",
		13,
		"灟",
		11,
		"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",
		12,
		"炰炲炴炵炶為炾炿烄烅烆烇烉烋",
		12,
		"烚"
	],
	[
		"9f40",
		"烜烝烞烠烡烢烣烥烪烮烰",
		6,
		"烸烺烻烼烾",
		10,
		"焋",
		4,
		"焑焒焔焗焛",
		10,
		"焧",
		7,
		"焲焳焴"
	],
	[
		"9f80",
		"焵焷",
		13,
		"煆煇煈煉煋煍煏",
		12,
		"煝煟",
		4,
		"煥煩",
		4,
		"煯煰煱煴煵煶煷煹煻煼煾",
		5,
		"熅",
		4,
		"熋熌熍熎熐熑熒熓熕熖熗熚",
		4,
		"熡",
		6,
		"熩熪熫熭",
		5,
		"熴熶熷熸熺",
		8,
		"燄",
		9,
		"燏",
		4
	],
	[
		"a040",
		"燖",
		9,
		"燡燢燣燤燦燨",
		5,
		"燯",
		9,
		"燺",
		11,
		"爇",
		19
	],
	[
		"a080",
		"爛爜爞",
		9,
		"爩爫爭爮爯爲爳爴爺爼爾牀",
		6,
		"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",
		4,
		"犌犎犐犑犓",
		11,
		"犠",
		11,
		"犮犱犲犳犵犺",
		6,
		"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"
	],
	[
		"a1a1",
		"　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",
		7,
		"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"
	],
	[
		"a2a1",
		"ⅰ",
		9
	],
	[
		"a2b1",
		"⒈",
		19,
		"⑴",
		19,
		"①",
		9
	],
	[
		"a2e5",
		"㈠",
		9
	],
	[
		"a2f1",
		"Ⅰ",
		11
	],
	[
		"a3a1",
		"！＂＃￥％",
		88,
		"￣"
	],
	[
		"a4a1",
		"ぁ",
		82
	],
	[
		"a5a1",
		"ァ",
		85
	],
	[
		"a6a1",
		"Α",
		16,
		"Σ",
		6
	],
	[
		"a6c1",
		"α",
		16,
		"σ",
		6
	],
	[
		"a6e0",
		"︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"
	],
	[
		"a6ee",
		"︻︼︷︸︱"
	],
	[
		"a6f4",
		"︳︴"
	],
	[
		"a7a1",
		"А",
		5,
		"ЁЖ",
		25
	],
	[
		"a7d1",
		"а",
		5,
		"ёж",
		25
	],
	[
		"a840",
		"ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",
		35,
		"▁",
		6
	],
	[
		"a880",
		"█",
		7,
		"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"
	],
	[
		"a8a1",
		"āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"
	],
	[
		"a8bd",
		"ńň"
	],
	[
		"a8c0",
		"ɡ"
	],
	[
		"a8c5",
		"ㄅ",
		36
	],
	[
		"a940",
		"〡",
		8,
		"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"
	],
	[
		"a959",
		"℡㈱"
	],
	[
		"a95c",
		"‐"
	],
	[
		"a960",
		"ー゛゜ヽヾ〆ゝゞ﹉",
		9,
		"﹔﹕﹖﹗﹙",
		8
	],
	[
		"a980",
		"﹢",
		4,
		"﹨﹩﹪﹫"
	],
	[
		"a996",
		"〇"
	],
	[
		"a9a4",
		"─",
		75
	],
	[
		"aa40",
		"狜狝狟狢",
		5,
		"狪狫狵狶狹狽狾狿猀猂猄",
		5,
		"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",
		8
	],
	[
		"aa80",
		"獉獊獋獌獎獏獑獓獔獕獖獘",
		7,
		"獡",
		10,
		"獮獰獱"
	],
	[
		"ab40",
		"獲",
		11,
		"獿",
		4,
		"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",
		5,
		"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",
		4
	],
	[
		"ab80",
		"珋珌珎珒",
		6,
		"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",
		4
	],
	[
		"ac40",
		"珸",
		10,
		"琄琇琈琋琌琍琎琑",
		8,
		"琜",
		5,
		"琣琤琧琩琫琭琯琱琲琷",
		4,
		"琽琾琿瑀瑂",
		11
	],
	[
		"ac80",
		"瑎",
		6,
		"瑖瑘瑝瑠",
		12,
		"瑮瑯瑱",
		4,
		"瑸瑹瑺"
	],
	[
		"ad40",
		"瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",
		10,
		"璝璟",
		7,
		"璪",
		15,
		"璻",
		12
	],
	[
		"ad80",
		"瓈",
		9,
		"瓓",
		8,
		"瓝瓟瓡瓥瓧",
		6,
		"瓰瓱瓲"
	],
	[
		"ae40",
		"瓳瓵瓸",
		6,
		"甀甁甂甃甅",
		7,
		"甎甐甒甔甕甖甗甛甝甞甠",
		4,
		"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"
	],
	[
		"ae80",
		"畝",
		7,
		"畧畨畩畫",
		6,
		"畳畵當畷畺",
		4,
		"疀疁疂疄疅疇"
	],
	[
		"af40",
		"疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",
		4,
		"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"
	],
	[
		"af80",
		"瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"
	],
	[
		"b040",
		"癅",
		6,
		"癎",
		5,
		"癕癗",
		4,
		"癝癟癠癡癢癤",
		6,
		"癬癭癮癰",
		7,
		"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"
	],
	[
		"b080",
		"皜",
		7,
		"皥",
		8,
		"皯皰皳皵",
		9,
		"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"
	],
	[
		"b140",
		"盄盇盉盋盌盓盕盙盚盜盝盞盠",
		4,
		"盦",
		7,
		"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",
		10,
		"眛眜眝眞眡眣眤眥眧眪眫"
	],
	[
		"b180",
		"眬眮眰",
		4,
		"眹眻眽眾眿睂睄睅睆睈",
		7,
		"睒",
		7,
		"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"
	],
	[
		"b240",
		"睝睞睟睠睤睧睩睪睭",
		11,
		"睺睻睼瞁瞂瞃瞆",
		5,
		"瞏瞐瞓",
		11,
		"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",
		4
	],
	[
		"b280",
		"瞼瞾矀",
		12,
		"矎",
		8,
		"矘矙矚矝",
		4,
		"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"
	],
	[
		"b340",
		"矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",
		5,
		"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"
	],
	[
		"b380",
		"硛硜硞",
		11,
		"硯",
		7,
		"硸硹硺硻硽",
		6,
		"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"
	],
	[
		"b440",
		"碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",
		7,
		"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",
		9
	],
	[
		"b480",
		"磤磥磦磧磩磪磫磭",
		4,
		"磳磵磶磸磹磻",
		5,
		"礂礃礄礆",
		6,
		"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"
	],
	[
		"b540",
		"礍",
		5,
		"礔",
		9,
		"礟",
		4,
		"礥",
		14,
		"礵",
		4,
		"礽礿祂祃祄祅祇祊",
		8,
		"祔祕祘祙祡祣"
	],
	[
		"b580",
		"祤祦祩祪祫祬祮祰",
		6,
		"祹祻",
		4,
		"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"
	],
	[
		"b640",
		"禓",
		6,
		"禛",
		11,
		"禨",
		10,
		"禴",
		4,
		"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",
		5,
		"秠秡秢秥秨秪"
	],
	[
		"b680",
		"秬秮秱",
		6,
		"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",
		4,
		"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"
	],
	[
		"b740",
		"稝稟稡稢稤",
		14,
		"稴稵稶稸稺稾穀",
		5,
		"穇",
		9,
		"穒",
		4,
		"穘",
		16
	],
	[
		"b780",
		"穩",
		6,
		"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"
	],
	[
		"b840",
		"窣窤窧窩窪窫窮",
		4,
		"窴",
		10,
		"竀",
		10,
		"竌",
		9,
		"竗竘竚竛竜竝竡竢竤竧",
		5,
		"竮竰竱竲竳"
	],
	[
		"b880",
		"竴",
		4,
		"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"
	],
	[
		"b940",
		"笯笰笲笴笵笶笷笹笻笽笿",
		5,
		"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",
		10,
		"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",
		6,
		"箎箏"
	],
	[
		"b980",
		"箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",
		7,
		"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"
	],
	[
		"ba40",
		"篅篈築篊篋篍篎篏篐篒篔",
		4,
		"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",
		4,
		"篸篹篺篻篽篿",
		7,
		"簈簉簊簍簎簐",
		5,
		"簗簘簙"
	],
	[
		"ba80",
		"簚",
		4,
		"簠",
		5,
		"簨簩簫",
		12,
		"簹",
		5,
		"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"
	],
	[
		"bb40",
		"籃",
		9,
		"籎",
		36,
		"籵",
		5,
		"籾",
		9
	],
	[
		"bb80",
		"粈粊",
		6,
		"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",
		4,
		"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"
	],
	[
		"bc40",
		"粿糀糂糃糄糆糉糋糎",
		6,
		"糘糚糛糝糞糡",
		6,
		"糩",
		5,
		"糰",
		7,
		"糹糺糼",
		13,
		"紋",
		5
	],
	[
		"bc80",
		"紑",
		14,
		"紡紣紤紥紦紨紩紪紬紭紮細",
		6,
		"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"
	],
	[
		"bd40",
		"紷",
		54,
		"絯",
		7
	],
	[
		"bd80",
		"絸",
		32,
		"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"
	],
	[
		"be40",
		"継",
		12,
		"綧",
		6,
		"綯",
		42
	],
	[
		"be80",
		"線",
		32,
		"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"
	],
	[
		"bf40",
		"緻",
		62
	],
	[
		"bf80",
		"縺縼",
		4,
		"繂",
		4,
		"繈",
		21,
		"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"
	],
	[
		"c040",
		"繞",
		35,
		"纃",
		23,
		"纜纝纞"
	],
	[
		"c080",
		"纮纴纻纼绖绤绬绹缊缐缞缷缹缻",
		6,
		"罃罆",
		9,
		"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"
	],
	[
		"c140",
		"罖罙罛罜罝罞罠罣",
		4,
		"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",
		7,
		"羋羍羏",
		4,
		"羕",
		4,
		"羛羜羠羢羣羥羦羨",
		6,
		"羱"
	],
	[
		"c180",
		"羳",
		4,
		"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",
		4,
		"翖翗翙",
		5,
		"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"
	],
	[
		"c240",
		"翤翧翨翪翫翬翭翯翲翴",
		6,
		"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",
		5,
		"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"
	],
	[
		"c280",
		"聙聛",
		13,
		"聫",
		5,
		"聲",
		11,
		"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"
	],
	[
		"c340",
		"聾肁肂肅肈肊肍",
		5,
		"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",
		4,
		"胏",
		6,
		"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"
	],
	[
		"c380",
		"脌脕脗脙脛脜脝脟",
		12,
		"脭脮脰脳脴脵脷脹",
		4,
		"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"
	],
	[
		"c440",
		"腀",
		5,
		"腇腉腍腎腏腒腖腗腘腛",
		4,
		"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",
		4,
		"膉膋膌膍膎膐膒",
		5,
		"膙膚膞",
		4,
		"膤膥"
	],
	[
		"c480",
		"膧膩膫",
		7,
		"膴",
		5,
		"膼膽膾膿臄臅臇臈臉臋臍",
		6,
		"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"
	],
	[
		"c540",
		"臔",
		14,
		"臤臥臦臨臩臫臮",
		4,
		"臵",
		5,
		"臽臿舃與",
		4,
		"舎舏舑舓舕",
		5,
		"舝舠舤舥舦舧舩舮舲舺舼舽舿"
	],
	[
		"c580",
		"艀艁艂艃艅艆艈艊艌艍艎艐",
		7,
		"艙艛艜艝艞艠",
		7,
		"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"
	],
	[
		"c640",
		"艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"
	],
	[
		"c680",
		"苺苼",
		4,
		"茊茋茍茐茒茓茖茘茙茝",
		9,
		"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"
	],
	[
		"c740",
		"茾茿荁荂荄荅荈荊",
		4,
		"荓荕",
		4,
		"荝荢荰",
		6,
		"荹荺荾",
		6,
		"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",
		6,
		"莬莭莮"
	],
	[
		"c780",
		"莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"
	],
	[
		"c840",
		"菮華菳",
		4,
		"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",
		5,
		"萙萚萛萞",
		5,
		"萩",
		7,
		"萲",
		5,
		"萹萺萻萾",
		7,
		"葇葈葉"
	],
	[
		"c880",
		"葊",
		6,
		"葒",
		4,
		"葘葝葞葟葠葢葤",
		4,
		"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"
	],
	[
		"c940",
		"葽",
		4,
		"蒃蒄蒅蒆蒊蒍蒏",
		7,
		"蒘蒚蒛蒝蒞蒟蒠蒢",
		12,
		"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"
	],
	[
		"c980",
		"蓘",
		4,
		"蓞蓡蓢蓤蓧",
		4,
		"蓭蓮蓯蓱",
		10,
		"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"
	],
	[
		"ca40",
		"蔃",
		8,
		"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",
		8,
		"蔭",
		9,
		"蔾",
		4,
		"蕄蕅蕆蕇蕋",
		10
	],
	[
		"ca80",
		"蕗蕘蕚蕛蕜蕝蕟",
		4,
		"蕥蕦蕧蕩",
		8,
		"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"
	],
	[
		"cb40",
		"薂薃薆薈",
		6,
		"薐",
		10,
		"薝",
		6,
		"薥薦薧薩薫薬薭薱",
		5,
		"薸薺",
		6,
		"藂",
		6,
		"藊",
		4,
		"藑藒"
	],
	[
		"cb80",
		"藔藖",
		5,
		"藝",
		6,
		"藥藦藧藨藪",
		14,
		"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"
	],
	[
		"cc40",
		"藹藺藼藽藾蘀",
		4,
		"蘆",
		10,
		"蘒蘓蘔蘕蘗",
		15,
		"蘨蘪",
		13,
		"蘹蘺蘻蘽蘾蘿虀"
	],
	[
		"cc80",
		"虁",
		11,
		"虒虓處",
		4,
		"虛虜虝號虠虡虣",
		7,
		"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"
	],
	[
		"cd40",
		"虭虯虰虲",
		6,
		"蚃",
		6,
		"蚎",
		4,
		"蚔蚖",
		5,
		"蚞",
		4,
		"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",
		4,
		"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"
	],
	[
		"cd80",
		"蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"
	],
	[
		"ce40",
		"蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",
		6,
		"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",
		5,
		"蝡蝢蝦",
		7,
		"蝯蝱蝲蝳蝵"
	],
	[
		"ce80",
		"蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",
		4,
		"螔螕螖螘",
		6,
		"螠",
		4,
		"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"
	],
	[
		"cf40",
		"螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",
		4,
		"蟇蟈蟉蟌",
		4,
		"蟔",
		6,
		"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",
		9
	],
	[
		"cf80",
		"蟺蟻蟼蟽蟿蠀蠁蠂蠄",
		5,
		"蠋",
		7,
		"蠔蠗蠘蠙蠚蠜",
		4,
		"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"
	],
	[
		"d040",
		"蠤",
		13,
		"蠳",
		5,
		"蠺蠻蠽蠾蠿衁衂衃衆",
		5,
		"衎",
		5,
		"衕衖衘衚",
		6,
		"衦衧衪衭衯衱衳衴衵衶衸衹衺"
	],
	[
		"d080",
		"衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",
		4,
		"袝",
		4,
		"袣袥",
		5,
		"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"
	],
	[
		"d140",
		"袬袮袯袰袲",
		4,
		"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",
		4,
		"裠裡裦裧裩",
		6,
		"裲裵裶裷裺裻製裿褀褁褃",
		5
	],
	[
		"d180",
		"褉褋",
		4,
		"褑褔",
		4,
		"褜",
		4,
		"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"
	],
	[
		"d240",
		"褸",
		8,
		"襂襃襅",
		24,
		"襠",
		5,
		"襧",
		19,
		"襼"
	],
	[
		"d280",
		"襽襾覀覂覄覅覇",
		26,
		"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"
	],
	[
		"d340",
		"覢",
		30,
		"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",
		6
	],
	[
		"d380",
		"觻",
		4,
		"訁",
		5,
		"計",
		21,
		"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"
	],
	[
		"d440",
		"訞",
		31,
		"訿",
		8,
		"詉",
		21
	],
	[
		"d480",
		"詟",
		25,
		"詺",
		6,
		"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"
	],
	[
		"d540",
		"誁",
		7,
		"誋",
		7,
		"誔",
		46
	],
	[
		"d580",
		"諃",
		32,
		"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"
	],
	[
		"d640",
		"諤",
		34,
		"謈",
		27
	],
	[
		"d680",
		"謤謥謧",
		30,
		"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"
	],
	[
		"d740",
		"譆",
		31,
		"譧",
		4,
		"譭",
		25
	],
	[
		"d780",
		"讇",
		24,
		"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"
	],
	[
		"d840",
		"谸",
		8,
		"豂豃豄豅豈豊豋豍",
		7,
		"豖豗豘豙豛",
		5,
		"豣",
		6,
		"豬",
		6,
		"豴豵豶豷豻",
		6,
		"貃貄貆貇"
	],
	[
		"d880",
		"貈貋貍",
		6,
		"貕貖貗貙",
		20,
		"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"
	],
	[
		"d940",
		"貮",
		62
	],
	[
		"d980",
		"賭",
		32,
		"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"
	],
	[
		"da40",
		"贎",
		14,
		"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",
		8,
		"趂趃趆趇趈趉趌",
		4,
		"趒趓趕",
		9,
		"趠趡"
	],
	[
		"da80",
		"趢趤",
		12,
		"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"
	],
	[
		"db40",
		"跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",
		6,
		"踆踇踈踋踍踎踐踑踒踓踕",
		7,
		"踠踡踤",
		4,
		"踫踭踰踲踳踴踶踷踸踻踼踾"
	],
	[
		"db80",
		"踿蹃蹅蹆蹌",
		4,
		"蹓",
		5,
		"蹚",
		11,
		"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"
	],
	[
		"dc40",
		"蹳蹵蹷",
		4,
		"蹽蹾躀躂躃躄躆躈",
		6,
		"躑躒躓躕",
		6,
		"躝躟",
		11,
		"躭躮躰躱躳",
		6,
		"躻",
		7
	],
	[
		"dc80",
		"軃",
		10,
		"軏",
		21,
		"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"
	],
	[
		"dd40",
		"軥",
		62
	],
	[
		"dd80",
		"輤",
		32,
		"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"
	],
	[
		"de40",
		"轅",
		32,
		"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"
	],
	[
		"de80",
		"迉",
		4,
		"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"
	],
	[
		"df40",
		"這逜連逤逥逧",
		5,
		"逰",
		4,
		"逷逹逺逽逿遀遃遅遆遈",
		4,
		"過達違遖遙遚遜",
		5,
		"遤遦遧適遪遫遬遯",
		4,
		"遶",
		6,
		"遾邁"
	],
	[
		"df80",
		"還邅邆邇邉邊邌",
		4,
		"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"
	],
	[
		"e040",
		"郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",
		19,
		"鄚鄛鄜"
	],
	[
		"e080",
		"鄝鄟鄠鄡鄤",
		10,
		"鄰鄲",
		6,
		"鄺",
		8,
		"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"
	],
	[
		"e140",
		"酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",
		4,
		"醆醈醊醎醏醓",
		6,
		"醜",
		5,
		"醤",
		5,
		"醫醬醰醱醲醳醶醷醸醹醻"
	],
	[
		"e180",
		"醼",
		10,
		"釈釋釐釒",
		9,
		"針",
		8,
		"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"
	],
	[
		"e240",
		"釦",
		62
	],
	[
		"e280",
		"鈥",
		32,
		"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",
		5,
		"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"
	],
	[
		"e340",
		"鉆",
		45,
		"鉵",
		16
	],
	[
		"e380",
		"銆",
		7,
		"銏",
		24,
		"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"
	],
	[
		"e440",
		"銨",
		5,
		"銯",
		24,
		"鋉",
		31
	],
	[
		"e480",
		"鋩",
		32,
		"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"
	],
	[
		"e540",
		"錊",
		51,
		"錿",
		10
	],
	[
		"e580",
		"鍊",
		31,
		"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"
	],
	[
		"e640",
		"鍬",
		34,
		"鎐",
		27
	],
	[
		"e680",
		"鎬",
		29,
		"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"
	],
	[
		"e740",
		"鏎",
		7,
		"鏗",
		54
	],
	[
		"e780",
		"鐎",
		32,
		"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",
		6,
		"缪缫缬缭缯",
		4,
		"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"
	],
	[
		"e840",
		"鐯",
		14,
		"鐿",
		43,
		"鑬鑭鑮鑯"
	],
	[
		"e880",
		"鑰",
		20,
		"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"
	],
	[
		"e940",
		"锧锳锽镃镈镋镕镚镠镮镴镵長",
		7,
		"門",
		42
	],
	[
		"e980",
		"閫",
		32,
		"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"
	],
	[
		"ea40",
		"闌",
		27,
		"闬闿阇阓阘阛阞阠阣",
		6,
		"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"
	],
	[
		"ea80",
		"陘陙陚陜陝陞陠陣陥陦陫陭",
		4,
		"陳陸",
		12,
		"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"
	],
	[
		"eb40",
		"隌階隑隒隓隕隖隚際隝",
		9,
		"隨",
		7,
		"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",
		9,
		"雡",
		6,
		"雫"
	],
	[
		"eb80",
		"雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",
		4,
		"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"
	],
	[
		"ec40",
		"霡",
		8,
		"霫霬霮霯霱霳",
		4,
		"霺霻霼霽霿",
		18,
		"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",
		7
	],
	[
		"ec80",
		"靲靵靷",
		4,
		"靽",
		7,
		"鞆",
		4,
		"鞌鞎鞏鞐鞓鞕鞖鞗鞙",
		4,
		"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"
	],
	[
		"ed40",
		"鞞鞟鞡鞢鞤",
		6,
		"鞬鞮鞰鞱鞳鞵",
		46
	],
	[
		"ed80",
		"韤韥韨韮",
		4,
		"韴韷",
		23,
		"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"
	],
	[
		"ee40",
		"頏",
		62
	],
	[
		"ee80",
		"顎",
		32,
		"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",
		4,
		"钼钽钿铄铈",
		6,
		"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"
	],
	[
		"ef40",
		"顯",
		5,
		"颋颎颒颕颙颣風",
		37,
		"飏飐飔飖飗飛飜飝飠",
		4
	],
	[
		"ef80",
		"飥飦飩",
		30,
		"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",
		4,
		"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",
		8,
		"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"
	],
	[
		"f040",
		"餈",
		4,
		"餎餏餑",
		28,
		"餯",
		26
	],
	[
		"f080",
		"饊",
		9,
		"饖",
		12,
		"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",
		4,
		"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",
		6,
		"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"
	],
	[
		"f140",
		"馌馎馚",
		10,
		"馦馧馩",
		47
	],
	[
		"f180",
		"駙",
		32,
		"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"
	],
	[
		"f240",
		"駺",
		62
	],
	[
		"f280",
		"騹",
		32,
		"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"
	],
	[
		"f340",
		"驚",
		17,
		"驲骃骉骍骎骔骕骙骦骩",
		6,
		"骲骳骴骵骹骻骽骾骿髃髄髆",
		4,
		"髍髎髏髐髒體髕髖髗髙髚髛髜"
	],
	[
		"f380",
		"髝髞髠髢髣髤髥髧髨髩髪髬髮髰",
		8,
		"髺髼",
		6,
		"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"
	],
	[
		"f440",
		"鬇鬉",
		5,
		"鬐鬑鬒鬔",
		10,
		"鬠鬡鬢鬤",
		10,
		"鬰鬱鬳",
		7,
		"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",
		5
	],
	[
		"f480",
		"魛",
		32,
		"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"
	],
	[
		"f540",
		"魼",
		62
	],
	[
		"f580",
		"鮻",
		32,
		"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"
	],
	[
		"f640",
		"鯜",
		62
	],
	[
		"f680",
		"鰛",
		32,
		"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",
		5,
		"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",
		5,
		"鲥",
		4,
		"鲫鲭鲮鲰",
		7,
		"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"
	],
	[
		"f740",
		"鰼",
		62
	],
	[
		"f780",
		"鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",
		4,
		"鳈鳉鳑鳒鳚鳛鳠鳡鳌",
		4,
		"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"
	],
	[
		"f840",
		"鳣",
		62
	],
	[
		"f880",
		"鴢",
		32
	],
	[
		"f940",
		"鵃",
		62
	],
	[
		"f980",
		"鶂",
		32
	],
	[
		"fa40",
		"鶣",
		62
	],
	[
		"fa80",
		"鷢",
		32
	],
	[
		"fb40",
		"鸃",
		27,
		"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",
		9,
		"麀"
	],
	[
		"fb80",
		"麁麃麄麅麆麉麊麌",
		5,
		"麔",
		8,
		"麞麠",
		5,
		"麧麨麩麪"
	],
	[
		"fc40",
		"麫",
		8,
		"麵麶麷麹麺麼麿",
		4,
		"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",
		8,
		"黺黽黿",
		6
	],
	[
		"fc80",
		"鼆",
		4,
		"鼌鼏鼑鼒鼔鼕鼖鼘鼚",
		5,
		"鼡鼣",
		8,
		"鼭鼮鼰鼱"
	],
	[
		"fd40",
		"鼲",
		4,
		"鼸鼺鼼鼿",
		4,
		"齅",
		10,
		"齒",
		38
	],
	[
		"fd80",
		"齹",
		5,
		"龁龂龍",
		11,
		"龜龝龞龡",
		4,
		"郎凉秊裏隣"
	],
	[
		"fe40",
		"兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"
	]
];

const require$$3 = [
	[
		"a140",
		"",
		62
	],
	[
		"a180",
		"",
		32
	],
	[
		"a240",
		"",
		62
	],
	[
		"a280",
		"",
		32
	],
	[
		"a2ab",
		"",
		5
	],
	[
		"a2e3",
		"€"
	],
	[
		"a2ef",
		""
	],
	[
		"a2fd",
		""
	],
	[
		"a340",
		"",
		62
	],
	[
		"a380",
		"",
		31,
		"　"
	],
	[
		"a440",
		"",
		62
	],
	[
		"a480",
		"",
		32
	],
	[
		"a4f4",
		"",
		10
	],
	[
		"a540",
		"",
		62
	],
	[
		"a580",
		"",
		32
	],
	[
		"a5f7",
		"",
		7
	],
	[
		"a640",
		"",
		62
	],
	[
		"a680",
		"",
		32
	],
	[
		"a6b9",
		"",
		7
	],
	[
		"a6d9",
		"",
		6
	],
	[
		"a6ec",
		""
	],
	[
		"a6f3",
		""
	],
	[
		"a6f6",
		"",
		8
	],
	[
		"a740",
		"",
		62
	],
	[
		"a780",
		"",
		32
	],
	[
		"a7c2",
		"",
		14
	],
	[
		"a7f2",
		"",
		12
	],
	[
		"a896",
		"",
		10
	],
	[
		"a8bc",
		"ḿ"
	],
	[
		"a8bf",
		"ǹ"
	],
	[
		"a8c1",
		""
	],
	[
		"a8ea",
		"",
		20
	],
	[
		"a958",
		""
	],
	[
		"a95b",
		""
	],
	[
		"a95d",
		""
	],
	[
		"a989",
		"〾⿰",
		11
	],
	[
		"a997",
		"",
		12
	],
	[
		"a9f0",
		"",
		14
	],
	[
		"aaa1",
		"",
		93
	],
	[
		"aba1",
		"",
		93
	],
	[
		"aca1",
		"",
		93
	],
	[
		"ada1",
		"",
		93
	],
	[
		"aea1",
		"",
		93
	],
	[
		"afa1",
		"",
		93
	],
	[
		"d7fa",
		"",
		4
	],
	[
		"f8a1",
		"",
		93
	],
	[
		"f9a1",
		"",
		93
	],
	[
		"faa1",
		"",
		93
	],
	[
		"fba1",
		"",
		93
	],
	[
		"fca1",
		"",
		93
	],
	[
		"fda1",
		"",
		93
	],
	[
		"fe50",
		"⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"
	],
	[
		"fe80",
		"䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",
		6,
		"䶮",
		93
	],
	[
		"8135f437",
		""
	]
];

const uChars = [
	128,
	165,
	169,
	178,
	184,
	216,
	226,
	235,
	238,
	244,
	248,
	251,
	253,
	258,
	276,
	284,
	300,
	325,
	329,
	334,
	364,
	463,
	465,
	467,
	469,
	471,
	473,
	475,
	477,
	506,
	594,
	610,
	712,
	716,
	730,
	930,
	938,
	962,
	970,
	1026,
	1104,
	1106,
	8209,
	8215,
	8218,
	8222,
	8231,
	8241,
	8244,
	8246,
	8252,
	8365,
	8452,
	8454,
	8458,
	8471,
	8482,
	8556,
	8570,
	8596,
	8602,
	8713,
	8720,
	8722,
	8726,
	8731,
	8737,
	8740,
	8742,
	8748,
	8751,
	8760,
	8766,
	8777,
	8781,
	8787,
	8802,
	8808,
	8816,
	8854,
	8858,
	8870,
	8896,
	8979,
	9322,
	9372,
	9548,
	9588,
	9616,
	9622,
	9634,
	9652,
	9662,
	9672,
	9676,
	9680,
	9702,
	9735,
	9738,
	9793,
	9795,
	11906,
	11909,
	11913,
	11917,
	11928,
	11944,
	11947,
	11951,
	11956,
	11960,
	11964,
	11979,
	12284,
	12292,
	12312,
	12319,
	12330,
	12351,
	12436,
	12447,
	12535,
	12543,
	12586,
	12842,
	12850,
	12964,
	13200,
	13215,
	13218,
	13253,
	13263,
	13267,
	13270,
	13384,
	13428,
	13727,
	13839,
	13851,
	14617,
	14703,
	14801,
	14816,
	14964,
	15183,
	15471,
	15585,
	16471,
	16736,
	17208,
	17325,
	17330,
	17374,
	17623,
	17997,
	18018,
	18212,
	18218,
	18301,
	18318,
	18760,
	18811,
	18814,
	18820,
	18823,
	18844,
	18848,
	18872,
	19576,
	19620,
	19738,
	19887,
	40870,
	59244,
	59336,
	59367,
	59413,
	59417,
	59423,
	59431,
	59437,
	59443,
	59452,
	59460,
	59478,
	59493,
	63789,
	63866,
	63894,
	63976,
	63986,
	64016,
	64018,
	64021,
	64025,
	64034,
	64037,
	64042,
	65074,
	65093,
	65107,
	65112,
	65127,
	65132,
	65375,
	65510,
	65536
];
const gbChars = [
	0,
	36,
	38,
	45,
	50,
	81,
	89,
	95,
	96,
	100,
	103,
	104,
	105,
	109,
	126,
	133,
	148,
	172,
	175,
	179,
	208,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	341,
	428,
	443,
	544,
	545,
	558,
	741,
	742,
	749,
	750,
	805,
	819,
	820,
	7922,
	7924,
	7925,
	7927,
	7934,
	7943,
	7944,
	7945,
	7950,
	8062,
	8148,
	8149,
	8152,
	8164,
	8174,
	8236,
	8240,
	8262,
	8264,
	8374,
	8380,
	8381,
	8384,
	8388,
	8390,
	8392,
	8393,
	8394,
	8396,
	8401,
	8406,
	8416,
	8419,
	8424,
	8437,
	8439,
	8445,
	8482,
	8485,
	8496,
	8521,
	8603,
	8936,
	8946,
	9046,
	9050,
	9063,
	9066,
	9076,
	9092,
	9100,
	9108,
	9111,
	9113,
	9131,
	9162,
	9164,
	9218,
	9219,
	11329,
	11331,
	11334,
	11336,
	11346,
	11361,
	11363,
	11366,
	11370,
	11372,
	11375,
	11389,
	11682,
	11686,
	11687,
	11692,
	11694,
	11714,
	11716,
	11723,
	11725,
	11730,
	11736,
	11982,
	11989,
	12102,
	12336,
	12348,
	12350,
	12384,
	12393,
	12395,
	12397,
	12510,
	12553,
	12851,
	12962,
	12973,
	13738,
	13823,
	13919,
	13933,
	14080,
	14298,
	14585,
	14698,
	15583,
	15847,
	16318,
	16434,
	16438,
	16481,
	16729,
	17102,
	17122,
	17315,
	17320,
	17402,
	17418,
	17859,
	17909,
	17911,
	17915,
	17916,
	17936,
	17939,
	17961,
	18664,
	18703,
	18814,
	18962,
	19043,
	33469,
	33470,
	33471,
	33484,
	33485,
	33490,
	33497,
	33501,
	33505,
	33513,
	33520,
	33536,
	33550,
	37845,
	37921,
	37948,
	38029,
	38038,
	38064,
	38065,
	38066,
	38069,
	38075,
	38076,
	38078,
	39108,
	39109,
	39113,
	39114,
	39115,
	39116,
	39265,
	39394,
	189000
];
const require$$4$1 = {
	uChars: uChars,
	gbChars: gbChars
};

const require$$5 = [
	[
		"0",
		"\\u0000",
		127
	],
	[
		"8141",
		"갂갃갅갆갋",
		4,
		"갘갞갟갡갢갣갥",
		6,
		"갮갲갳갴"
	],
	[
		"8161",
		"갵갶갷갺갻갽갾갿걁",
		9,
		"걌걎",
		5,
		"걕"
	],
	[
		"8181",
		"걖걗걙걚걛걝",
		18,
		"걲걳걵걶걹걻",
		4,
		"겂겇겈겍겎겏겑겒겓겕",
		6,
		"겞겢",
		5,
		"겫겭겮겱",
		6,
		"겺겾겿곀곂곃곅곆곇곉곊곋곍",
		7,
		"곖곘",
		7,
		"곢곣곥곦곩곫곭곮곲곴곷",
		4,
		"곾곿괁괂괃괅괇",
		4,
		"괎괐괒괓"
	],
	[
		"8241",
		"괔괕괖괗괙괚괛괝괞괟괡",
		7,
		"괪괫괮",
		5
	],
	[
		"8261",
		"괶괷괹괺괻괽",
		6,
		"굆굈굊",
		5,
		"굑굒굓굕굖굗"
	],
	[
		"8281",
		"굙",
		7,
		"굢굤",
		7,
		"굮굯굱굲굷굸굹굺굾궀궃",
		4,
		"궊궋궍궎궏궑",
		10,
		"궞",
		5,
		"궥",
		17,
		"궸",
		7,
		"귂귃귅귆귇귉",
		6,
		"귒귔",
		7,
		"귝귞귟귡귢귣귥",
		18
	],
	[
		"8341",
		"귺귻귽귾긂",
		5,
		"긊긌긎",
		5,
		"긕",
		7
	],
	[
		"8361",
		"긝",
		18,
		"긲긳긵긶긹긻긼"
	],
	[
		"8381",
		"긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",
		4,
		"깞깢깣깤깦깧깪깫깭깮깯깱",
		6,
		"깺깾",
		5,
		"꺆",
		5,
		"꺍",
		46,
		"꺿껁껂껃껅",
		6,
		"껎껒",
		5,
		"껚껛껝",
		8
	],
	[
		"8441",
		"껦껧껩껪껬껮",
		5,
		"껵껶껷껹껺껻껽",
		8
	],
	[
		"8461",
		"꼆꼉꼊꼋꼌꼎꼏꼑",
		18
	],
	[
		"8481",
		"꼤",
		7,
		"꼮꼯꼱꼳꼵",
		6,
		"꼾꽀꽄꽅꽆꽇꽊",
		5,
		"꽑",
		10,
		"꽞",
		5,
		"꽦",
		18,
		"꽺",
		5,
		"꾁꾂꾃꾅꾆꾇꾉",
		6,
		"꾒꾓꾔꾖",
		5,
		"꾝",
		26,
		"꾺꾻꾽꾾"
	],
	[
		"8541",
		"꾿꿁",
		5,
		"꿊꿌꿏",
		4,
		"꿕",
		6,
		"꿝",
		4
	],
	[
		"8561",
		"꿢",
		5,
		"꿪",
		5,
		"꿲꿳꿵꿶꿷꿹",
		6,
		"뀂뀃"
	],
	[
		"8581",
		"뀅",
		6,
		"뀍뀎뀏뀑뀒뀓뀕",
		6,
		"뀞",
		9,
		"뀩",
		26,
		"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",
		29,
		"끾끿낁낂낃낅",
		6,
		"낎낐낒",
		5,
		"낛낝낞낣낤"
	],
	[
		"8641",
		"낥낦낧낪낰낲낶낷낹낺낻낽",
		6,
		"냆냊",
		5,
		"냒"
	],
	[
		"8661",
		"냓냕냖냗냙",
		6,
		"냡냢냣냤냦",
		10
	],
	[
		"8681",
		"냱",
		22,
		"넊넍넎넏넑넔넕넖넗넚넞",
		4,
		"넦넧넩넪넫넭",
		6,
		"넶넺",
		5,
		"녂녃녅녆녇녉",
		6,
		"녒녓녖녗녙녚녛녝녞녟녡",
		22,
		"녺녻녽녾녿놁놃",
		4,
		"놊놌놎놏놐놑놕놖놗놙놚놛놝"
	],
	[
		"8741",
		"놞",
		9,
		"놩",
		15
	],
	[
		"8761",
		"놹",
		18,
		"뇍뇎뇏뇑뇒뇓뇕"
	],
	[
		"8781",
		"뇖",
		5,
		"뇞뇠",
		7,
		"뇪뇫뇭뇮뇯뇱",
		7,
		"뇺뇼뇾",
		5,
		"눆눇눉눊눍",
		6,
		"눖눘눚",
		5,
		"눡",
		18,
		"눵",
		6,
		"눽",
		26,
		"뉙뉚뉛뉝뉞뉟뉡",
		6,
		"뉪",
		4
	],
	[
		"8841",
		"뉯",
		4,
		"뉶",
		5,
		"뉽",
		6,
		"늆늇늈늊",
		4
	],
	[
		"8861",
		"늏늒늓늕늖늗늛",
		4,
		"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"
	],
	[
		"8881",
		"늸",
		15,
		"닊닋닍닎닏닑닓",
		4,
		"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",
		6,
		"댒댖",
		5,
		"댝",
		54,
		"덗덙덚덝덠덡덢덣"
	],
	[
		"8941",
		"덦덨덪덬덭덯덲덳덵덶덷덹",
		6,
		"뎂뎆",
		5,
		"뎍"
	],
	[
		"8961",
		"뎎뎏뎑뎒뎓뎕",
		10,
		"뎢",
		5,
		"뎩뎪뎫뎭"
	],
	[
		"8981",
		"뎮",
		21,
		"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",
		18,
		"돽",
		18,
		"됑",
		6,
		"됙됚됛됝됞됟됡",
		6,
		"됪됬",
		7,
		"됵",
		15
	],
	[
		"8a41",
		"둅",
		10,
		"둒둓둕둖둗둙",
		6,
		"둢둤둦"
	],
	[
		"8a61",
		"둧",
		4,
		"둭",
		18,
		"뒁뒂"
	],
	[
		"8a81",
		"뒃",
		4,
		"뒉",
		19,
		"뒞",
		5,
		"뒥뒦뒧뒩뒪뒫뒭",
		7,
		"뒶뒸뒺",
		5,
		"듁듂듃듅듆듇듉",
		6,
		"듑듒듓듔듖",
		5,
		"듞듟듡듢듥듧",
		4,
		"듮듰듲",
		5,
		"듹",
		26,
		"딖딗딙딚딝"
	],
	[
		"8b41",
		"딞",
		5,
		"딦딫",
		4,
		"딲딳딵딶딷딹",
		6,
		"땂땆"
	],
	[
		"8b61",
		"땇땈땉땊땎땏땑땒땓땕",
		6,
		"땞땢",
		8
	],
	[
		"8b81",
		"땫",
		52,
		"떢떣떥떦떧떩떬떭떮떯떲떶",
		4,
		"떾떿뗁뗂뗃뗅",
		6,
		"뗎뗒",
		5,
		"뗙",
		18,
		"뗭",
		18
	],
	[
		"8c41",
		"똀",
		15,
		"똒똓똕똖똗똙",
		4
	],
	[
		"8c61",
		"똞",
		6,
		"똦",
		5,
		"똭",
		6,
		"똵",
		5
	],
	[
		"8c81",
		"똻",
		12,
		"뙉",
		26,
		"뙥뙦뙧뙩",
		50,
		"뚞뚟뚡뚢뚣뚥",
		5,
		"뚭뚮뚯뚰뚲",
		16
	],
	[
		"8d41",
		"뛃",
		16,
		"뛕",
		8
	],
	[
		"8d61",
		"뛞",
		17,
		"뛱뛲뛳뛵뛶뛷뛹뛺"
	],
	[
		"8d81",
		"뛻",
		4,
		"뜂뜃뜄뜆",
		33,
		"뜪뜫뜭뜮뜱",
		6,
		"뜺뜼",
		7,
		"띅띆띇띉띊띋띍",
		6,
		"띖",
		9,
		"띡띢띣띥띦띧띩",
		6,
		"띲띴띶",
		5,
		"띾띿랁랂랃랅",
		6,
		"랎랓랔랕랚랛랝랞"
	],
	[
		"8e41",
		"랟랡",
		6,
		"랪랮",
		5,
		"랶랷랹",
		8
	],
	[
		"8e61",
		"럂",
		4,
		"럈럊",
		19
	],
	[
		"8e81",
		"럞",
		13,
		"럮럯럱럲럳럵",
		6,
		"럾렂",
		4,
		"렊렋렍렎렏렑",
		6,
		"렚렜렞",
		5,
		"렦렧렩렪렫렭",
		6,
		"렶렺",
		5,
		"롁롂롃롅",
		11,
		"롒롔",
		7,
		"롞롟롡롢롣롥",
		6,
		"롮롰롲",
		5,
		"롹롺롻롽",
		7
	],
	[
		"8f41",
		"뢅",
		7,
		"뢎",
		17
	],
	[
		"8f61",
		"뢠",
		7,
		"뢩",
		6,
		"뢱뢲뢳뢵뢶뢷뢹",
		4
	],
	[
		"8f81",
		"뢾뢿룂룄룆",
		5,
		"룍룎룏룑룒룓룕",
		7,
		"룞룠룢",
		5,
		"룪룫룭룮룯룱",
		6,
		"룺룼룾",
		5,
		"뤅",
		18,
		"뤙",
		6,
		"뤡",
		26,
		"뤾뤿륁륂륃륅",
		6,
		"륍륎륐륒",
		5
	],
	[
		"9041",
		"륚륛륝륞륟륡",
		6,
		"륪륬륮",
		5,
		"륶륷륹륺륻륽"
	],
	[
		"9061",
		"륾",
		5,
		"릆릈릋릌릏",
		15
	],
	[
		"9081",
		"릟",
		12,
		"릮릯릱릲릳릵",
		6,
		"릾맀맂",
		5,
		"맊맋맍맓",
		4,
		"맚맜맟맠맢맦맧맩맪맫맭",
		6,
		"맶맻",
		4,
		"먂",
		5,
		"먉",
		11,
		"먖",
		33,
		"먺먻먽먾먿멁멃멄멅멆"
	],
	[
		"9141",
		"멇멊멌멏멐멑멒멖멗멙멚멛멝",
		6,
		"멦멪",
		5
	],
	[
		"9161",
		"멲멳멵멶멷멹",
		9,
		"몆몈몉몊몋몍",
		5
	],
	[
		"9181",
		"몓",
		20,
		"몪몭몮몯몱몳",
		4,
		"몺몼몾",
		5,
		"뫅뫆뫇뫉",
		14,
		"뫚",
		33,
		"뫽뫾뫿묁묂묃묅",
		7,
		"묎묐묒",
		5,
		"묙묚묛묝묞묟묡",
		6
	],
	[
		"9241",
		"묨묪묬",
		7,
		"묷묹묺묿",
		4,
		"뭆뭈뭊뭋뭌뭎뭑뭒"
	],
	[
		"9261",
		"뭓뭕뭖뭗뭙",
		7,
		"뭢뭤",
		7,
		"뭭",
		4
	],
	[
		"9281",
		"뭲",
		21,
		"뮉뮊뮋뮍뮎뮏뮑",
		18,
		"뮥뮦뮧뮩뮪뮫뮭",
		6,
		"뮵뮶뮸",
		7,
		"믁믂믃믅믆믇믉",
		6,
		"믑믒믔",
		35,
		"믺믻믽믾밁"
	],
	[
		"9341",
		"밃",
		4,
		"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"
	],
	[
		"9361",
		"밶밷밹",
		6,
		"뱂뱆뱇뱈뱊뱋뱎뱏뱑",
		8
	],
	[
		"9381",
		"뱚뱛뱜뱞",
		37,
		"벆벇벉벊벍벏",
		4,
		"벖벘벛",
		4,
		"벢벣벥벦벩",
		6,
		"벲벶",
		5,
		"벾벿볁볂볃볅",
		7,
		"볎볒볓볔볖볗볙볚볛볝",
		22,
		"볷볹볺볻볽"
	],
	[
		"9441",
		"볾",
		5,
		"봆봈봊",
		5,
		"봑봒봓봕",
		8
	],
	[
		"9461",
		"봞",
		5,
		"봥",
		6,
		"봭",
		12
	],
	[
		"9481",
		"봺",
		5,
		"뵁",
		6,
		"뵊뵋뵍뵎뵏뵑",
		6,
		"뵚",
		9,
		"뵥뵦뵧뵩",
		22,
		"붂붃붅붆붋",
		4,
		"붒붔붖붗붘붛붝",
		6,
		"붥",
		10,
		"붱",
		6,
		"붹",
		24
	],
	[
		"9541",
		"뷒뷓뷖뷗뷙뷚뷛뷝",
		11,
		"뷪",
		5,
		"뷱"
	],
	[
		"9561",
		"뷲뷳뷵뷶뷷뷹",
		6,
		"븁븂븄븆",
		5,
		"븎븏븑븒븓"
	],
	[
		"9581",
		"븕",
		6,
		"븞븠",
		35,
		"빆빇빉빊빋빍빏",
		4,
		"빖빘빜빝빞빟빢빣빥빦빧빩빫",
		4,
		"빲빶",
		4,
		"빾빿뺁뺂뺃뺅",
		6,
		"뺎뺒",
		5,
		"뺚",
		13,
		"뺩",
		14
	],
	[
		"9641",
		"뺸",
		23,
		"뻒뻓"
	],
	[
		"9661",
		"뻕뻖뻙",
		6,
		"뻡뻢뻦",
		5,
		"뻭",
		8
	],
	[
		"9681",
		"뻶",
		10,
		"뼂",
		5,
		"뼊",
		13,
		"뼚뼞",
		33,
		"뽂뽃뽅뽆뽇뽉",
		6,
		"뽒뽓뽔뽖",
		44
	],
	[
		"9741",
		"뾃",
		16,
		"뾕",
		8
	],
	[
		"9761",
		"뾞",
		17,
		"뾱",
		7
	],
	[
		"9781",
		"뾹",
		11,
		"뿆",
		5,
		"뿎뿏뿑뿒뿓뿕",
		6,
		"뿝뿞뿠뿢",
		89,
		"쀽쀾쀿"
	],
	[
		"9841",
		"쁀",
		16,
		"쁒",
		5,
		"쁙쁚쁛"
	],
	[
		"9861",
		"쁝쁞쁟쁡",
		6,
		"쁪",
		15
	],
	[
		"9881",
		"쁺",
		21,
		"삒삓삕삖삗삙",
		6,
		"삢삤삦",
		5,
		"삮삱삲삷",
		4,
		"삾샂샃샄샆샇샊샋샍샎샏샑",
		6,
		"샚샞",
		5,
		"샦샧샩샪샫샭",
		6,
		"샶샸샺",
		5,
		"섁섂섃섅섆섇섉",
		6,
		"섑섒섓섔섖",
		5,
		"섡섢섥섨섩섪섫섮"
	],
	[
		"9941",
		"섲섳섴섵섷섺섻섽섾섿셁",
		6,
		"셊셎",
		5,
		"셖셗"
	],
	[
		"9961",
		"셙셚셛셝",
		6,
		"셦셪",
		5,
		"셱셲셳셵셶셷셹셺셻"
	],
	[
		"9981",
		"셼",
		8,
		"솆",
		5,
		"솏솑솒솓솕솗",
		4,
		"솞솠솢솣솤솦솧솪솫솭솮솯솱",
		11,
		"솾",
		5,
		"쇅쇆쇇쇉쇊쇋쇍",
		6,
		"쇕쇖쇙",
		6,
		"쇡쇢쇣쇥쇦쇧쇩",
		6,
		"쇲쇴",
		7,
		"쇾쇿숁숂숃숅",
		6,
		"숎숐숒",
		5,
		"숚숛숝숞숡숢숣"
	],
	[
		"9a41",
		"숤숥숦숧숪숬숮숰숳숵",
		16
	],
	[
		"9a61",
		"쉆쉇쉉",
		6,
		"쉒쉓쉕쉖쉗쉙",
		6,
		"쉡쉢쉣쉤쉦"
	],
	[
		"9a81",
		"쉧",
		4,
		"쉮쉯쉱쉲쉳쉵",
		6,
		"쉾슀슂",
		5,
		"슊",
		5,
		"슑",
		6,
		"슙슚슜슞",
		5,
		"슦슧슩슪슫슮",
		5,
		"슶슸슺",
		33,
		"싞싟싡싢싥",
		5,
		"싮싰싲싳싴싵싷싺싽싾싿쌁",
		6,
		"쌊쌋쌎쌏"
	],
	[
		"9b41",
		"쌐쌑쌒쌖쌗쌙쌚쌛쌝",
		6,
		"쌦쌧쌪",
		8
	],
	[
		"9b61",
		"쌳",
		17,
		"썆",
		7
	],
	[
		"9b81",
		"썎",
		25,
		"썪썫썭썮썯썱썳",
		4,
		"썺썻썾",
		5,
		"쎅쎆쎇쎉쎊쎋쎍",
		50,
		"쏁",
		22,
		"쏚"
	],
	[
		"9c41",
		"쏛쏝쏞쏡쏣",
		4,
		"쏪쏫쏬쏮",
		5,
		"쏶쏷쏹",
		5
	],
	[
		"9c61",
		"쏿",
		8,
		"쐉",
		6,
		"쐑",
		9
	],
	[
		"9c81",
		"쐛",
		8,
		"쐥",
		6,
		"쐭쐮쐯쐱쐲쐳쐵",
		6,
		"쐾",
		9,
		"쑉",
		26,
		"쑦쑧쑩쑪쑫쑭",
		6,
		"쑶쑷쑸쑺",
		5,
		"쒁",
		18,
		"쒕",
		6,
		"쒝",
		12
	],
	[
		"9d41",
		"쒪",
		13,
		"쒹쒺쒻쒽",
		8
	],
	[
		"9d61",
		"쓆",
		25
	],
	[
		"9d81",
		"쓠",
		8,
		"쓪",
		5,
		"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",
		9,
		"씍씎씏씑씒씓씕",
		6,
		"씝",
		10,
		"씪씫씭씮씯씱",
		6,
		"씺씼씾",
		5,
		"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",
		6,
		"앲앶",
		5,
		"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"
	],
	[
		"9e41",
		"얖얙얚얛얝얞얟얡",
		7,
		"얪",
		9,
		"얶"
	],
	[
		"9e61",
		"얷얺얿",
		4,
		"엋엍엏엒엓엕엖엗엙",
		6,
		"엢엤엦엧"
	],
	[
		"9e81",
		"엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",
		6,
		"옚옝",
		6,
		"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",
		6,
		"왒왖",
		5,
		"왞왟왡",
		10,
		"왭왮왰왲",
		5,
		"왺왻왽왾왿욁",
		6,
		"욊욌욎",
		5,
		"욖욗욙욚욛욝",
		6,
		"욦"
	],
	[
		"9f41",
		"욨욪",
		5,
		"욲욳욵욶욷욻",
		4,
		"웂웄웆",
		5,
		"웎"
	],
	[
		"9f61",
		"웏웑웒웓웕",
		6,
		"웞웟웢",
		5,
		"웪웫웭웮웯웱웲"
	],
	[
		"9f81",
		"웳",
		4,
		"웺웻웼웾",
		5,
		"윆윇윉윊윋윍",
		6,
		"윖윘윚",
		5,
		"윢윣윥윦윧윩",
		6,
		"윲윴윶윸윹윺윻윾윿읁읂읃읅",
		4,
		"읋읎읐읙읚읛읝읞읟읡",
		6,
		"읩읪읬",
		7,
		"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",
		4,
		"잢잧",
		4,
		"잮잯잱잲잳잵잶잷"
	],
	[
		"a041",
		"잸잹잺잻잾쟂",
		5,
		"쟊쟋쟍쟏쟑",
		6,
		"쟙쟚쟛쟜"
	],
	[
		"a061",
		"쟞",
		5,
		"쟥쟦쟧쟩쟪쟫쟭",
		13
	],
	[
		"a081",
		"쟻",
		4,
		"젂젃젅젆젇젉젋",
		4,
		"젒젔젗",
		4,
		"젞젟젡젢젣젥",
		6,
		"젮젰젲",
		5,
		"젹젺젻젽젾젿졁",
		6,
		"졊졋졎",
		5,
		"졕",
		26,
		"졲졳졵졶졷졹졻",
		4,
		"좂좄좈좉좊좎",
		5,
		"좕",
		7,
		"좞좠좢좣좤"
	],
	[
		"a141",
		"좥좦좧좩",
		18,
		"좾좿죀죁"
	],
	[
		"a161",
		"죂죃죅죆죇죉죊죋죍",
		6,
		"죖죘죚",
		5,
		"죢죣죥"
	],
	[
		"a181",
		"죦",
		14,
		"죶",
		5,
		"죾죿줁줂줃줇",
		4,
		"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",
		9,
		"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"
	],
	[
		"a241",
		"줐줒",
		5,
		"줙",
		18
	],
	[
		"a261",
		"줭",
		6,
		"줵",
		18
	],
	[
		"a281",
		"쥈",
		7,
		"쥒쥓쥕쥖쥗쥙",
		6,
		"쥢쥤",
		7,
		"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"
	],
	[
		"a341",
		"쥱쥲쥳쥵",
		6,
		"쥽",
		10,
		"즊즋즍즎즏"
	],
	[
		"a361",
		"즑",
		6,
		"즚즜즞",
		16
	],
	[
		"a381",
		"즯",
		16,
		"짂짃짅짆짉짋",
		4,
		"짒짔짗짘짛！",
		58,
		"￦］",
		32,
		"￣"
	],
	[
		"a441",
		"짞짟짡짣짥짦짨짩짪짫짮짲",
		5,
		"짺짻짽짾짿쨁쨂쨃쨄"
	],
	[
		"a461",
		"쨅쨆쨇쨊쨎",
		5,
		"쨕쨖쨗쨙",
		12
	],
	[
		"a481",
		"쨦쨧쨨쨪",
		28,
		"ㄱ",
		93
	],
	[
		"a541",
		"쩇",
		4,
		"쩎쩏쩑쩒쩓쩕",
		6,
		"쩞쩢",
		5,
		"쩩쩪"
	],
	[
		"a561",
		"쩫",
		17,
		"쩾",
		5,
		"쪅쪆"
	],
	[
		"a581",
		"쪇",
		16,
		"쪙",
		14,
		"ⅰ",
		9
	],
	[
		"a5b0",
		"Ⅰ",
		9
	],
	[
		"a5c1",
		"Α",
		16,
		"Σ",
		6
	],
	[
		"a5e1",
		"α",
		16,
		"σ",
		6
	],
	[
		"a641",
		"쪨",
		19,
		"쪾쪿쫁쫂쫃쫅"
	],
	[
		"a661",
		"쫆",
		5,
		"쫎쫐쫒쫔쫕쫖쫗쫚",
		5,
		"쫡",
		6
	],
	[
		"a681",
		"쫨쫩쫪쫫쫭",
		6,
		"쫵",
		18,
		"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",
		7
	],
	[
		"a741",
		"쬋",
		4,
		"쬑쬒쬓쬕쬖쬗쬙",
		6,
		"쬢",
		7
	],
	[
		"a761",
		"쬪",
		22,
		"쭂쭃쭄"
	],
	[
		"a781",
		"쭅쭆쭇쭊쭋쭍쭎쭏쭑",
		6,
		"쭚쭛쭜쭞",
		5,
		"쭥",
		7,
		"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",
		9,
		"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",
		9,
		"㎀",
		4,
		"㎺",
		5,
		"㎐",
		4,
		"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"
	],
	[
		"a841",
		"쭭",
		10,
		"쭺",
		14
	],
	[
		"a861",
		"쮉",
		18,
		"쮝",
		6
	],
	[
		"a881",
		"쮤",
		19,
		"쮹",
		11,
		"ÆÐªĦ"
	],
	[
		"a8a6",
		"Ĳ"
	],
	[
		"a8a8",
		"ĿŁØŒºÞŦŊ"
	],
	[
		"a8b1",
		"㉠",
		27,
		"ⓐ",
		25,
		"①",
		14,
		"½⅓⅔¼¾⅛⅜⅝⅞"
	],
	[
		"a941",
		"쯅",
		14,
		"쯕",
		10
	],
	[
		"a961",
		"쯠쯡쯢쯣쯥쯦쯨쯪",
		18
	],
	[
		"a981",
		"쯽",
		14,
		"찎찏찑찒찓찕",
		6,
		"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",
		27,
		"⒜",
		25,
		"⑴",
		14,
		"¹²³⁴ⁿ₁₂₃₄"
	],
	[
		"aa41",
		"찥찦찪찫찭찯찱",
		6,
		"찺찿",
		4,
		"챆챇챉챊챋챍챎"
	],
	[
		"aa61",
		"챏",
		4,
		"챖챚",
		5,
		"챡챢챣챥챧챩",
		6,
		"챱챲"
	],
	[
		"aa81",
		"챳챴챶",
		29,
		"ぁ",
		82
	],
	[
		"ab41",
		"첔첕첖첗첚첛첝첞첟첡",
		6,
		"첪첮",
		5,
		"첶첷첹"
	],
	[
		"ab61",
		"첺첻첽",
		6,
		"쳆쳈쳊",
		5,
		"쳑쳒쳓쳕",
		5
	],
	[
		"ab81",
		"쳛",
		8,
		"쳥",
		6,
		"쳭쳮쳯쳱",
		12,
		"ァ",
		85
	],
	[
		"ac41",
		"쳾쳿촀촂",
		5,
		"촊촋촍촎촏촑",
		6,
		"촚촜촞촟촠"
	],
	[
		"ac61",
		"촡촢촣촥촦촧촩촪촫촭",
		11,
		"촺",
		4
	],
	[
		"ac81",
		"촿",
		28,
		"쵝쵞쵟А",
		5,
		"ЁЖ",
		25
	],
	[
		"acd1",
		"а",
		5,
		"ёж",
		25
	],
	[
		"ad41",
		"쵡쵢쵣쵥",
		6,
		"쵮쵰쵲",
		5,
		"쵹",
		7
	],
	[
		"ad61",
		"춁",
		6,
		"춉",
		10,
		"춖춗춙춚춛춝춞춟"
	],
	[
		"ad81",
		"춠춡춢춣춦춨춪",
		5,
		"춱",
		18,
		"췅"
	],
	[
		"ae41",
		"췆",
		5,
		"췍췎췏췑",
		16
	],
	[
		"ae61",
		"췢",
		5,
		"췩췪췫췭췮췯췱",
		6,
		"췺췼췾",
		4
	],
	[
		"ae81",
		"츃츅츆츇츉츊츋츍",
		6,
		"츕츖츗츘츚",
		5,
		"츢츣츥츦츧츩츪츫"
	],
	[
		"af41",
		"츬츭츮츯츲츴츶",
		19
	],
	[
		"af61",
		"칊",
		13,
		"칚칛칝칞칢",
		5,
		"칪칬"
	],
	[
		"af81",
		"칮",
		5,
		"칶칷칹칺칻칽",
		6,
		"캆캈캊",
		5,
		"캒캓캕캖캗캙"
	],
	[
		"b041",
		"캚",
		5,
		"캢캦",
		5,
		"캮",
		12
	],
	[
		"b061",
		"캻",
		5,
		"컂",
		19
	],
	[
		"b081",
		"컖",
		13,
		"컦컧컩컪컭",
		6,
		"컶컺",
		5,
		"가각간갇갈갉갊감",
		7,
		"같",
		4,
		"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"
	],
	[
		"b141",
		"켂켃켅켆켇켉",
		6,
		"켒켔켖",
		5,
		"켝켞켟켡켢켣"
	],
	[
		"b161",
		"켥",
		6,
		"켮켲",
		5,
		"켹",
		11
	],
	[
		"b181",
		"콅",
		14,
		"콖콗콙콚콛콝",
		6,
		"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"
	],
	[
		"b241",
		"콭콮콯콲콳콵콶콷콹",
		6,
		"쾁쾂쾃쾄쾆",
		5,
		"쾍"
	],
	[
		"b261",
		"쾎",
		18,
		"쾢",
		5,
		"쾩"
	],
	[
		"b281",
		"쾪",
		5,
		"쾱",
		18,
		"쿅",
		6,
		"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"
	],
	[
		"b341",
		"쿌",
		19,
		"쿢쿣쿥쿦쿧쿩"
	],
	[
		"b361",
		"쿪",
		5,
		"쿲쿴쿶",
		5,
		"쿽쿾쿿퀁퀂퀃퀅",
		5
	],
	[
		"b381",
		"퀋",
		5,
		"퀒",
		5,
		"퀙",
		19,
		"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",
		4,
		"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"
	],
	[
		"b441",
		"퀮",
		5,
		"퀶퀷퀹퀺퀻퀽",
		6,
		"큆큈큊",
		5
	],
	[
		"b461",
		"큑큒큓큕큖큗큙",
		6,
		"큡",
		10,
		"큮큯"
	],
	[
		"b481",
		"큱큲큳큵",
		6,
		"큾큿킀킂",
		18,
		"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",
		4,
		"닳담답닷",
		4,
		"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"
	],
	[
		"b541",
		"킕",
		14,
		"킦킧킩킪킫킭",
		5
	],
	[
		"b561",
		"킳킶킸킺",
		5,
		"탂탃탅탆탇탊",
		5,
		"탒탖",
		4
	],
	[
		"b581",
		"탛탞탟탡탢탣탥",
		6,
		"탮탲",
		5,
		"탹",
		11,
		"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"
	],
	[
		"b641",
		"턅",
		7,
		"턎",
		17
	],
	[
		"b661",
		"턠",
		15,
		"턲턳턵턶턷턹턻턼턽턾"
	],
	[
		"b681",
		"턿텂텆",
		5,
		"텎텏텑텒텓텕",
		6,
		"텞텠텢",
		5,
		"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"
	],
	[
		"b741",
		"텮",
		13,
		"텽",
		6,
		"톅톆톇톉톊"
	],
	[
		"b761",
		"톋",
		20,
		"톢톣톥톦톧"
	],
	[
		"b781",
		"톩",
		6,
		"톲톴톶톷톸톹톻톽톾톿퇁",
		14,
		"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"
	],
	[
		"b841",
		"퇐",
		7,
		"퇙",
		17
	],
	[
		"b861",
		"퇫",
		8,
		"퇵퇶퇷퇹",
		13
	],
	[
		"b881",
		"툈툊",
		5,
		"툑",
		24,
		"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",
		4,
		"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"
	],
	[
		"b941",
		"툪툫툮툯툱툲툳툵",
		6,
		"툾퉀퉂",
		5,
		"퉉퉊퉋퉌"
	],
	[
		"b961",
		"퉍",
		14,
		"퉝",
		6,
		"퉥퉦퉧퉨"
	],
	[
		"b981",
		"퉩",
		22,
		"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",
		4,
		"받",
		4,
		"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"
	],
	[
		"ba41",
		"튍튎튏튒튓튔튖",
		5,
		"튝튞튟튡튢튣튥",
		6,
		"튭"
	],
	[
		"ba61",
		"튮튯튰튲",
		5,
		"튺튻튽튾틁틃",
		4,
		"틊틌",
		5
	],
	[
		"ba81",
		"틒틓틕틖틗틙틚틛틝",
		6,
		"틦",
		9,
		"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"
	],
	[
		"bb41",
		"틻",
		4,
		"팂팄팆",
		5,
		"팏팑팒팓팕팗",
		4,
		"팞팢팣"
	],
	[
		"bb61",
		"팤팦팧팪팫팭팮팯팱",
		6,
		"팺팾",
		5,
		"퍆퍇퍈퍉"
	],
	[
		"bb81",
		"퍊",
		31,
		"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"
	],
	[
		"bc41",
		"퍪",
		17,
		"퍾퍿펁펂펃펅펆펇"
	],
	[
		"bc61",
		"펈펉펊펋펎펒",
		5,
		"펚펛펝펞펟펡",
		6,
		"펪펬펮"
	],
	[
		"bc81",
		"펯",
		4,
		"펵펶펷펹펺펻펽",
		6,
		"폆폇폊",
		5,
		"폑",
		5,
		"샥샨샬샴샵샷샹섀섄섈섐섕서",
		4,
		"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"
	],
	[
		"bd41",
		"폗폙",
		7,
		"폢폤",
		7,
		"폮폯폱폲폳폵폶폷"
	],
	[
		"bd61",
		"폸폹폺폻폾퐀퐂",
		5,
		"퐉",
		13
	],
	[
		"bd81",
		"퐗",
		5,
		"퐞",
		25,
		"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"
	],
	[
		"be41",
		"퐸",
		7,
		"푁푂푃푅",
		14
	],
	[
		"be61",
		"푔",
		7,
		"푝푞푟푡푢푣푥",
		7,
		"푮푰푱푲"
	],
	[
		"be81",
		"푳",
		4,
		"푺푻푽푾풁풃",
		4,
		"풊풌풎",
		5,
		"풕",
		8,
		"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",
		6,
		"엌엎"
	],
	[
		"bf41",
		"풞",
		10,
		"풪",
		14
	],
	[
		"bf61",
		"풹",
		18,
		"퓍퓎퓏퓑퓒퓓퓕"
	],
	[
		"bf81",
		"퓖",
		5,
		"퓝퓞퓠",
		7,
		"퓩퓪퓫퓭퓮퓯퓱",
		6,
		"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",
		5,
		"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"
	],
	[
		"c041",
		"퓾",
		5,
		"픅픆픇픉픊픋픍",
		6,
		"픖픘",
		5
	],
	[
		"c061",
		"픞",
		25
	],
	[
		"c081",
		"픸픹픺픻픾픿핁핂핃핅",
		6,
		"핎핐핒",
		5,
		"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",
		7,
		"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"
	],
	[
		"c141",
		"핤핦핧핪핬핮",
		5,
		"핶핷핹핺핻핽",
		6,
		"햆햊햋"
	],
	[
		"c161",
		"햌햍햎햏햑",
		19,
		"햦햧"
	],
	[
		"c181",
		"햨",
		31,
		"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"
	],
	[
		"c241",
		"헊헋헍헎헏헑헓",
		4,
		"헚헜헞",
		5,
		"헦헧헩헪헫헭헮"
	],
	[
		"c261",
		"헯",
		4,
		"헶헸헺",
		5,
		"혂혃혅혆혇혉",
		6,
		"혒"
	],
	[
		"c281",
		"혖",
		5,
		"혝혞혟혡혢혣혥",
		7,
		"혮",
		9,
		"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"
	],
	[
		"c341",
		"혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",
		4
	],
	[
		"c361",
		"홢",
		4,
		"홨홪",
		5,
		"홲홳홵",
		11
	],
	[
		"c381",
		"횁횂횄횆",
		5,
		"횎횏횑횒횓횕",
		7,
		"횞횠횢",
		5,
		"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"
	],
	[
		"c441",
		"횫횭횮횯횱",
		7,
		"횺횼",
		7,
		"훆훇훉훊훋"
	],
	[
		"c461",
		"훍훎훏훐훒훓훕훖훘훚",
		5,
		"훡훢훣훥훦훧훩",
		4
	],
	[
		"c481",
		"훮훯훱훲훳훴훶",
		5,
		"훾훿휁휂휃휅",
		11,
		"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"
	],
	[
		"c541",
		"휕휖휗휚휛휝휞휟휡",
		6,
		"휪휬휮",
		5,
		"휶휷휹"
	],
	[
		"c561",
		"휺휻휽",
		6,
		"흅흆흈흊",
		5,
		"흒흓흕흚",
		4
	],
	[
		"c581",
		"흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",
		6,
		"흾흿힀힂",
		5,
		"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"
	],
	[
		"c641",
		"힍힎힏힑",
		6,
		"힚힜힞",
		5
	],
	[
		"c6a1",
		"퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"
	],
	[
		"c7a1",
		"퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"
	],
	[
		"c8a1",
		"혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"
	],
	[
		"caa1",
		"伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"
	],
	[
		"cba1",
		"匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"
	],
	[
		"cca1",
		"瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"
	],
	[
		"cda1",
		"棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"
	],
	[
		"cea1",
		"科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"
	],
	[
		"cfa1",
		"區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"
	],
	[
		"d0a1",
		"鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"
	],
	[
		"d1a1",
		"朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",
		5,
		"那樂",
		4,
		"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"
	],
	[
		"d2a1",
		"納臘蠟衲囊娘廊",
		4,
		"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",
		5,
		"駑魯",
		10,
		"濃籠聾膿農惱牢磊腦賂雷尿壘",
		7,
		"嫩訥杻紐勒",
		5,
		"能菱陵尼泥匿溺多茶"
	],
	[
		"d3a1",
		"丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"
	],
	[
		"d4a1",
		"棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"
	],
	[
		"d5a1",
		"蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"
	],
	[
		"d6a1",
		"煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"
	],
	[
		"d7a1",
		"遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"
	],
	[
		"d8a1",
		"立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"
	],
	[
		"d9a1",
		"蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"
	],
	[
		"daa1",
		"汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"
	],
	[
		"dba1",
		"發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"
	],
	[
		"dca1",
		"碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"
	],
	[
		"dda1",
		"孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"
	],
	[
		"dea1",
		"脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"
	],
	[
		"dfa1",
		"傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"
	],
	[
		"e0a1",
		"胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"
	],
	[
		"e1a1",
		"聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"
	],
	[
		"e2a1",
		"戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"
	],
	[
		"e3a1",
		"嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"
	],
	[
		"e4a1",
		"沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"
	],
	[
		"e5a1",
		"櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"
	],
	[
		"e6a1",
		"旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"
	],
	[
		"e7a1",
		"簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"
	],
	[
		"e8a1",
		"烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"
	],
	[
		"e9a1",
		"窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"
	],
	[
		"eaa1",
		"運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"
	],
	[
		"eba1",
		"濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"
	],
	[
		"eca1",
		"議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"
	],
	[
		"eda1",
		"立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"
	],
	[
		"eea1",
		"障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"
	],
	[
		"efa1",
		"煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"
	],
	[
		"f0a1",
		"靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"
	],
	[
		"f1a1",
		"踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"
	],
	[
		"f2a1",
		"咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"
	],
	[
		"f3a1",
		"鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"
	],
	[
		"f4a1",
		"責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"
	],
	[
		"f5a1",
		"椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"
	],
	[
		"f6a1",
		"贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"
	],
	[
		"f7a1",
		"鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"
	],
	[
		"f8a1",
		"阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"
	],
	[
		"f9a1",
		"品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"
	],
	[
		"faa1",
		"行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"
	],
	[
		"fba1",
		"形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"
	],
	[
		"fca1",
		"禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"
	],
	[
		"fda1",
		"爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"
	]
];

const require$$6 = [
	[
		"0",
		"\\u0000",
		127
	],
	[
		"a140",
		"　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"
	],
	[
		"a1a1",
		"﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",
		4,
		"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"
	],
	[
		"a240",
		"＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",
		7,
		"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"
	],
	[
		"a2a1",
		"╮╰╯═╞╪╡◢◣◥◤╱╲╳０",
		9,
		"Ⅰ",
		9,
		"〡",
		8,
		"十卄卅Ａ",
		25,
		"ａ",
		21
	],
	[
		"a340",
		"ｗｘｙｚΑ",
		16,
		"Σ",
		6,
		"α",
		16,
		"σ",
		6,
		"ㄅ",
		10
	],
	[
		"a3a1",
		"ㄐ",
		25,
		"˙ˉˊˇˋ"
	],
	[
		"a3e1",
		"€"
	],
	[
		"a440",
		"一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"
	],
	[
		"a4a1",
		"丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"
	],
	[
		"a540",
		"世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"
	],
	[
		"a5a1",
		"央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"
	],
	[
		"a640",
		"共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"
	],
	[
		"a6a1",
		"式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"
	],
	[
		"a740",
		"作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"
	],
	[
		"a7a1",
		"均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"
	],
	[
		"a840",
		"杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"
	],
	[
		"a8a1",
		"芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"
	],
	[
		"a940",
		"咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"
	],
	[
		"a9a1",
		"屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"
	],
	[
		"aa40",
		"昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"
	],
	[
		"aaa1",
		"炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"
	],
	[
		"ab40",
		"陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"
	],
	[
		"aba1",
		"哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"
	],
	[
		"ac40",
		"拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"
	],
	[
		"aca1",
		"活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"
	],
	[
		"ad40",
		"耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"
	],
	[
		"ada1",
		"迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"
	],
	[
		"ae40",
		"哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"
	],
	[
		"aea1",
		"恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"
	],
	[
		"af40",
		"浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"
	],
	[
		"afa1",
		"砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"
	],
	[
		"b040",
		"虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"
	],
	[
		"b0a1",
		"陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"
	],
	[
		"b140",
		"娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"
	],
	[
		"b1a1",
		"情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"
	],
	[
		"b240",
		"毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"
	],
	[
		"b2a1",
		"瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"
	],
	[
		"b340",
		"莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"
	],
	[
		"b3a1",
		"部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"
	],
	[
		"b440",
		"婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"
	],
	[
		"b4a1",
		"插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"
	],
	[
		"b540",
		"溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"
	],
	[
		"b5a1",
		"窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"
	],
	[
		"b640",
		"詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"
	],
	[
		"b6a1",
		"間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"
	],
	[
		"b740",
		"媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"
	],
	[
		"b7a1",
		"楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"
	],
	[
		"b840",
		"睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"
	],
	[
		"b8a1",
		"腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"
	],
	[
		"b940",
		"辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"
	],
	[
		"b9a1",
		"飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"
	],
	[
		"ba40",
		"愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"
	],
	[
		"baa1",
		"滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"
	],
	[
		"bb40",
		"罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"
	],
	[
		"bba1",
		"說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"
	],
	[
		"bc40",
		"劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"
	],
	[
		"bca1",
		"慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"
	],
	[
		"bd40",
		"瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"
	],
	[
		"bda1",
		"翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"
	],
	[
		"be40",
		"輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"
	],
	[
		"bea1",
		"鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"
	],
	[
		"bf40",
		"濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"
	],
	[
		"bfa1",
		"縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"
	],
	[
		"c040",
		"錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"
	],
	[
		"c0a1",
		"嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"
	],
	[
		"c140",
		"瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"
	],
	[
		"c1a1",
		"薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"
	],
	[
		"c240",
		"駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"
	],
	[
		"c2a1",
		"癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"
	],
	[
		"c340",
		"鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"
	],
	[
		"c3a1",
		"獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"
	],
	[
		"c440",
		"願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"
	],
	[
		"c4a1",
		"纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"
	],
	[
		"c540",
		"護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"
	],
	[
		"c5a1",
		"禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"
	],
	[
		"c640",
		"讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"
	],
	[
		"c940",
		"乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"
	],
	[
		"c9a1",
		"氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"
	],
	[
		"ca40",
		"汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"
	],
	[
		"caa1",
		"吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"
	],
	[
		"cb40",
		"杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"
	],
	[
		"cba1",
		"芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"
	],
	[
		"cc40",
		"坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"
	],
	[
		"cca1",
		"怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"
	],
	[
		"cd40",
		"泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"
	],
	[
		"cda1",
		"矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"
	],
	[
		"ce40",
		"哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"
	],
	[
		"cea1",
		"峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"
	],
	[
		"cf40",
		"柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"
	],
	[
		"cfa1",
		"洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"
	],
	[
		"d040",
		"穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"
	],
	[
		"d0a1",
		"苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"
	],
	[
		"d140",
		"唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"
	],
	[
		"d1a1",
		"恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"
	],
	[
		"d240",
		"毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"
	],
	[
		"d2a1",
		"牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"
	],
	[
		"d340",
		"笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"
	],
	[
		"d3a1",
		"荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"
	],
	[
		"d440",
		"酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"
	],
	[
		"d4a1",
		"唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"
	],
	[
		"d540",
		"崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"
	],
	[
		"d5a1",
		"捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"
	],
	[
		"d640",
		"淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"
	],
	[
		"d6a1",
		"痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"
	],
	[
		"d740",
		"耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"
	],
	[
		"d7a1",
		"蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"
	],
	[
		"d840",
		"釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"
	],
	[
		"d8a1",
		"堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"
	],
	[
		"d940",
		"惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"
	],
	[
		"d9a1",
		"晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"
	],
	[
		"da40",
		"湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"
	],
	[
		"daa1",
		"琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"
	],
	[
		"db40",
		"罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"
	],
	[
		"dba1",
		"菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"
	],
	[
		"dc40",
		"軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"
	],
	[
		"dca1",
		"隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"
	],
	[
		"dd40",
		"媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"
	],
	[
		"dda1",
		"搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"
	],
	[
		"de40",
		"毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"
	],
	[
		"dea1",
		"煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"
	],
	[
		"df40",
		"稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"
	],
	[
		"dfa1",
		"腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"
	],
	[
		"e040",
		"觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"
	],
	[
		"e0a1",
		"遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"
	],
	[
		"e140",
		"凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"
	],
	[
		"e1a1",
		"寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"
	],
	[
		"e240",
		"榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"
	],
	[
		"e2a1",
		"漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"
	],
	[
		"e340",
		"禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"
	],
	[
		"e3a1",
		"耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"
	],
	[
		"e440",
		"裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"
	],
	[
		"e4a1",
		"銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"
	],
	[
		"e540",
		"噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"
	],
	[
		"e5a1",
		"憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"
	],
	[
		"e640",
		"澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"
	],
	[
		"e6a1",
		"獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"
	],
	[
		"e740",
		"膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"
	],
	[
		"e7a1",
		"蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"
	],
	[
		"e840",
		"踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"
	],
	[
		"e8a1",
		"銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"
	],
	[
		"e940",
		"噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"
	],
	[
		"e9a1",
		"憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"
	],
	[
		"ea40",
		"澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"
	],
	[
		"eaa1",
		"瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"
	],
	[
		"eb40",
		"蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"
	],
	[
		"eba1",
		"諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"
	],
	[
		"ec40",
		"錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"
	],
	[
		"eca1",
		"魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"
	],
	[
		"ed40",
		"檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"
	],
	[
		"eda1",
		"瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"
	],
	[
		"ee40",
		"蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"
	],
	[
		"eea1",
		"謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"
	],
	[
		"ef40",
		"鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"
	],
	[
		"efa1",
		"鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"
	],
	[
		"f040",
		"璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"
	],
	[
		"f0a1",
		"臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"
	],
	[
		"f140",
		"蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"
	],
	[
		"f1a1",
		"鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"
	],
	[
		"f240",
		"徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"
	],
	[
		"f2a1",
		"礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"
	],
	[
		"f340",
		"譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"
	],
	[
		"f3a1",
		"鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"
	],
	[
		"f440",
		"嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"
	],
	[
		"f4a1",
		"禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"
	],
	[
		"f540",
		"鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"
	],
	[
		"f5a1",
		"鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"
	],
	[
		"f640",
		"蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"
	],
	[
		"f6a1",
		"騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"
	],
	[
		"f740",
		"糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"
	],
	[
		"f7a1",
		"驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"
	],
	[
		"f840",
		"讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"
	],
	[
		"f8a1",
		"齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"
	],
	[
		"f940",
		"纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"
	],
	[
		"f9a1",
		"龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"
	]
];

const require$$7 = [
	[
		"8740",
		"䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"
	],
	[
		"8767",
		"綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"
	],
	[
		"87a1",
		"𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"
	],
	[
		"8840",
		"㇀",
		4,
		"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"
	],
	[
		"88a1",
		"ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"
	],
	[
		"8940",
		"𪎩𡅅"
	],
	[
		"8943",
		"攊"
	],
	[
		"8946",
		"丽滝鵎釟"
	],
	[
		"894c",
		"𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"
	],
	[
		"89a1",
		"琑糼緍楆竉刧"
	],
	[
		"89ab",
		"醌碸酞肼"
	],
	[
		"89b0",
		"贋胶𠧧"
	],
	[
		"89b5",
		"肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"
	],
	[
		"89c1",
		"溚舾甙"
	],
	[
		"89c5",
		"䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"
	],
	[
		"8a40",
		"𧶄唥"
	],
	[
		"8a43",
		"𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"
	],
	[
		"8a64",
		"𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"
	],
	[
		"8a76",
		"䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"
	],
	[
		"8aa1",
		"𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"
	],
	[
		"8aac",
		"䠋𠆩㿺塳𢶍"
	],
	[
		"8ab2",
		"𤗈𠓼𦂗𠽌𠶖啹䂻䎺"
	],
	[
		"8abb",
		"䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"
	],
	[
		"8ac9",
		"𪘁𠸉𢫏𢳉"
	],
	[
		"8ace",
		"𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"
	],
	[
		"8adf",
		"𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"
	],
	[
		"8af6",
		"𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"
	],
	[
		"8b40",
		"𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"
	],
	[
		"8b55",
		"𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"
	],
	[
		"8ba1",
		"𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"
	],
	[
		"8bde",
		"𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"
	],
	[
		"8c40",
		"倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"
	],
	[
		"8ca1",
		"𣏹椙橃𣱣泿"
	],
	[
		"8ca7",
		"爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"
	],
	[
		"8cc9",
		"顨杫䉶圽"
	],
	[
		"8cce",
		"藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"
	],
	[
		"8ce6",
		"峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"
	],
	[
		"8d40",
		"𠮟"
	],
	[
		"8d42",
		"𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"
	],
	[
		"8da1",
		"㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"
	],
	[
		"8e40",
		"𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"
	],
	[
		"8ea1",
		"繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"
	],
	[
		"8f40",
		"蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"
	],
	[
		"8fa1",
		"𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"
	],
	[
		"9040",
		"趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"
	],
	[
		"90a1",
		"𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"
	],
	[
		"9140",
		"𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"
	],
	[
		"91a1",
		"鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"
	],
	[
		"9240",
		"𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"
	],
	[
		"92a1",
		"働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"
	],
	[
		"9340",
		"媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"
	],
	[
		"93a1",
		"摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"
	],
	[
		"9440",
		"銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"
	],
	[
		"94a1",
		"㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"
	],
	[
		"9540",
		"𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"
	],
	[
		"95a1",
		"衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"
	],
	[
		"9640",
		"桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"
	],
	[
		"96a1",
		"𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"
	],
	[
		"9740",
		"愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"
	],
	[
		"97a1",
		"𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"
	],
	[
		"9840",
		"𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"
	],
	[
		"98a1",
		"咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"
	],
	[
		"9940",
		"䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"
	],
	[
		"99a1",
		"䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"
	],
	[
		"9a40",
		"鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"
	],
	[
		"9aa1",
		"黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"
	],
	[
		"9b40",
		"𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"
	],
	[
		"9b62",
		"𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"
	],
	[
		"9ba1",
		"椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"
	],
	[
		"9c40",
		"嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"
	],
	[
		"9ca1",
		"㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"
	],
	[
		"9d40",
		"𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"
	],
	[
		"9da1",
		"辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"
	],
	[
		"9e40",
		"𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"
	],
	[
		"9ea1",
		"鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"
	],
	[
		"9ead",
		"𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"
	],
	[
		"9ec5",
		"㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"
	],
	[
		"9ef5",
		"噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"
	],
	[
		"9f40",
		"籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"
	],
	[
		"9f4f",
		"凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"
	],
	[
		"9fa1",
		"椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"
	],
	[
		"9fae",
		"酙隁酜"
	],
	[
		"9fb2",
		"酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"
	],
	[
		"9fc1",
		"𤤙盖鮝个𠳔莾衂"
	],
	[
		"9fc9",
		"届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"
	],
	[
		"9fdb",
		"歒酼龥鮗頮颴骺麨麄煺笔"
	],
	[
		"9fe7",
		"毺蠘罸"
	],
	[
		"9feb",
		"嘠𪙊蹷齓"
	],
	[
		"9ff0",
		"跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"
	],
	[
		"a040",
		"𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"
	],
	[
		"a055",
		"𡠻𦸅"
	],
	[
		"a058",
		"詾𢔛"
	],
	[
		"a05b",
		"惽癧髗鵄鍮鮏蟵"
	],
	[
		"a063",
		"蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"
	],
	[
		"a073",
		"坟慯抦戹拎㩜懢厪𣏵捤栂㗒"
	],
	[
		"a0a1",
		"嵗𨯂迚𨸹"
	],
	[
		"a0a6",
		"僙𡵆礆匲阸𠼻䁥"
	],
	[
		"a0ae",
		"矾"
	],
	[
		"a0b0",
		"糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"
	],
	[
		"a0d4",
		"覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"
	],
	[
		"a0e2",
		"罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"
	],
	[
		"a3c0",
		"␀",
		31,
		"␡"
	],
	[
		"c6a1",
		"①",
		9,
		"⑴",
		9,
		"ⅰ",
		9,
		"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",
		23
	],
	[
		"c740",
		"す",
		58,
		"ァアィイ"
	],
	[
		"c7a1",
		"ゥ",
		81,
		"А",
		5,
		"ЁЖ",
		4
	],
	[
		"c840",
		"Л",
		26,
		"ёж",
		25,
		"⇧↸↹㇏𠃌乚𠂊刂䒑"
	],
	[
		"c8a1",
		"龰冈龱𧘇"
	],
	[
		"c8cd",
		"￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"
	],
	[
		"c8f5",
		"ʃɐɛɔɵœøŋʊɪ"
	],
	[
		"f9fe",
		"￭"
	],
	[
		"fa40",
		"𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"
	],
	[
		"faa1",
		"鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"
	],
	[
		"fb40",
		"𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"
	],
	[
		"fba1",
		"𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"
	],
	[
		"fc40",
		"廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"
	],
	[
		"fca1",
		"𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"
	],
	[
		"fd40",
		"𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"
	],
	[
		"fda1",
		"𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"
	],
	[
		"fe40",
		"鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"
	],
	[
		"fea1",
		"𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"
	]
];

var dbcsData;
var hasRequiredDbcsData;
function requireDbcsData() {
  if (hasRequiredDbcsData) return dbcsData;
  hasRequiredDbcsData = 1;

  // Description of supported double byte encodings and aliases.
  // Tables are not require()-d until they are needed to speed up library load.
  // require()-s are direct to support Browserify.

  dbcsData = {
    // == Japanese/ShiftJIS ====================================================
    // All japanese encodings are based on JIS X set of standards:
    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
    //              Has several variations in 1978, 1983, 1990 and 1997.
    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
    //              2 planes, first is superset of 0208, second - revised 0212.
    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

    // Byte encodings are:
    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
    //               0x00-0x7F       - lower part of 0201
    //               0x8E, 0xA1-0xDF - upper part of 0201
    //               (0xA1-0xFE)x2   - 0208 plane (94x94).
    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
    //               Used as-is in ISO2022 family.
    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
    //                0201-1976 Roman, 0208-1978, 0208-1983.
    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
    //
    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
    //
    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

    'shiftjis': {
      type: '_dbcs',
      table: function table() {
        return require$$0;
      },
      encodeAdd: {
        "\\xA5": 0x5C,
        "\\u203E": 0x7E
      },
      encodeSkipVals: [{
        from: 0xED40,
        to: 0xF940
      }]
    },
    'csshiftjis': 'shiftjis',
    'mskanji': 'shiftjis',
    'sjis': 'shiftjis',
    'windows31j': 'shiftjis',
    'ms31j': 'shiftjis',
    'xsjis': 'shiftjis',
    'windows932': 'shiftjis',
    'ms932': 'shiftjis',
    '932': 'shiftjis',
    'cp932': 'shiftjis',
    'eucjp': {
      type: '_dbcs',
      table: function table() {
        return require$$1;
      },
      encodeAdd: {
        "\\xA5": 0x5C,
        "\\u203E": 0x7E
      }
    },
    // TODO: KDDI extension to Shift_JIS
    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.

    // == Chinese/GBK ==========================================================
    // http://en.wikipedia.org/wiki/GBK
    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
    'gb2312': 'cp936',
    'gb231280': 'cp936',
    'gb23121980': 'cp936',
    'csgb2312': 'cp936',
    'csiso58gb231280': 'cp936',
    'euccn': 'cp936',
    // Microsoft's CP936 is a subset and approximation of GBK.
    'windows936': 'cp936',
    'ms936': 'cp936',
    '936': 'cp936',
    'cp936': {
      type: '_dbcs',
      table: function table() {
        return require$$2;
      }
    },
    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
    'gbk': {
      type: '_dbcs',
      table: function table() {
        return require$$2.concat(require$$3);
      }
    },
    'xgbk': 'gbk',
    'isoir58': 'gbk',
    // GB18030 is an algorithmic extension of GBK.
    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
    // http://icu-project.org/docs/papers/gb18030.html
    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
    'gb18030': {
      type: '_dbcs',
      table: function table() {
        return require$$2.concat(require$$3);
      },
      gb18030: function gb18030() {
        return require$$4$1;
      },
      encodeSkipVals: [0x80],
      encodeAdd: {
        '€': 0xA2E3
      }
    },
    'chinese': 'gb18030',
    // == Korean ===============================================================
    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
    'windows949': 'cp949',
    'ms949': 'cp949',
    '949': 'cp949',
    'cp949': {
      type: '_dbcs',
      table: function table() {
        return require$$5;
      }
    },
    'cseuckr': 'cp949',
    'csksc56011987': 'cp949',
    'euckr': 'cp949',
    'isoir149': 'cp949',
    'korean': 'cp949',
    'ksc56011987': 'cp949',
    'ksc56011989': 'cp949',
    'ksc5601': 'cp949',
    // == Big5/Taiwan/Hong Kong ================================================
    // There are lots of tables for Big5 and cp950. Please see the following links for history:
    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
    // Variations, in roughly number of defined chars:
    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
    //  * Big5-2003 (Taiwan standard) almost superset of cp950.
    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
    //    Plus, it has 4 combining sequences.
    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
    //    Implementations are not consistent within browsers; sometimes labeled as just big5.
    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
    // 
    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

    'windows950': 'cp950',
    'ms950': 'cp950',
    '950': 'cp950',
    'cp950': {
      type: '_dbcs',
      table: function table() {
        return require$$6;
      }
    },
    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
    'big5': 'big5hkscs',
    'big5hkscs': {
      type: '_dbcs',
      table: function table() {
        return require$$6.concat(require$$7);
      },
      encodeSkipVals: [
      // Although Encoding Standard says we should avoid encoding to HKSCS area (See Step 1 of
      // https://encoding.spec.whatwg.org/#index-big5-pointer), we still do it to increase compatibility with ICU.
      // But if a single unicode point can be encoded both as HKSCS and regular Big5, we prefer the latter.
      0x8e69, 0x8e6f, 0x8e7e, 0x8eab, 0x8eb4, 0x8ecd, 0x8ed0, 0x8f57, 0x8f69, 0x8f6e, 0x8fcb, 0x8ffe, 0x906d, 0x907a, 0x90c4, 0x90dc, 0x90f1, 0x91bf, 0x92af, 0x92b0, 0x92b1, 0x92b2, 0x92d1, 0x9447, 0x94ca, 0x95d9, 0x96fc, 0x9975, 0x9b76, 0x9b78, 0x9b7b, 0x9bc6, 0x9bde, 0x9bec, 0x9bf6, 0x9c42, 0x9c53, 0x9c62, 0x9c68, 0x9c6b, 0x9c77, 0x9cbc, 0x9cbd, 0x9cd0, 0x9d57, 0x9d5a, 0x9dc4, 0x9def, 0x9dfb, 0x9ea9, 0x9eef, 0x9efd, 0x9f60, 0x9fcb, 0xa077, 0xa0dc, 0xa0df, 0x8fcc, 0x92c8, 0x9644, 0x96ed,
      // Step 2 of https://encoding.spec.whatwg.org/#index-big5-pointer: Use last pointer for U+2550, U+255E, U+2561, U+256A, U+5341, or U+5345
      0xa2a4, 0xa2a5, 0xa2a7, 0xa2a6, 0xa2cc, 0xa2ce]
    },
    'cnbig5': 'big5hkscs',
    'csbig5': 'big5hkscs',
    'xxbig5': 'big5hkscs'
  };
  return dbcsData;
}

var hasRequiredEncodings;
function requireEncodings() {
  if (hasRequiredEncodings) return encodings;
  hasRequiredEncodings = 1;
  (function (exports) {

    // Update this array if you add/rename/remove files in this directory.
    // We support Browserify by skipping automatic module discovery and requiring modules directly.
    var modules = [requireInternal(), requireUtf32(), requireUtf16(), requireUtf7(), requireSbcsCodec(), requireSbcsData(), requireSbcsDataGenerated(), requireDbcsCodec(), requireDbcsData()];

    // Put all encoding/alias/codec definitions to single object and export it.
    for (var i = 0; i < modules.length; i++) {
      var module = modules[i];
      for (var enc in module) if (Object.prototype.hasOwnProperty.call(module, enc)) exports[enc] = module[enc];
    }
  })(encodings);
  return encodings;
}

var streams;
var hasRequiredStreams;
function requireStreams() {
  if (hasRequiredStreams) return streams;
  hasRequiredStreams = 1;
  var Buffer = safer_1.Buffer;

  // NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), 
  // we opt to dependency-inject it instead of creating a hard dependency.
  streams = function streams(stream_module) {
    var Transform = stream_module.Transform;

    // == Encoder stream =======================================================

    function IconvLiteEncoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
      Transform.call(this, options);
    }
    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
      constructor: {
        value: IconvLiteEncoderStream
      }
    });
    IconvLiteEncoderStream.prototype._transform = function (chunk, encoding, done) {
      if (typeof chunk != 'string') return done(new Error("Iconv encoding stream needs strings as its input."));
      try {
        var res = this.conv.write(chunk);
        if (res && res.length) this.push(res);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteEncoderStream.prototype._flush = function (done) {
      try {
        var res = this.conv.end();
        if (res && res.length) this.push(res);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteEncoderStream.prototype.collect = function (cb) {
      var chunks = [];
      this.on('error', cb);
      this.on('data', function (chunk) {
        chunks.push(chunk);
      });
      this.on('end', function () {
        cb(null, Buffer.concat(chunks));
      });
      return this;
    };

    // == Decoder stream =======================================================

    function IconvLiteDecoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.encoding = this.encoding = 'utf8'; // We output strings.
      Transform.call(this, options);
    }
    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
      constructor: {
        value: IconvLiteDecoderStream
      }
    });
    IconvLiteDecoderStream.prototype._transform = function (chunk, encoding, done) {
      if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array)) return done(new Error("Iconv decoding stream needs buffers as its input."));
      try {
        var res = this.conv.write(chunk);
        if (res && res.length) this.push(res, this.encoding);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteDecoderStream.prototype._flush = function (done) {
      try {
        var res = this.conv.end();
        if (res && res.length) this.push(res, this.encoding);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteDecoderStream.prototype.collect = function (cb) {
      var res = '';
      this.on('error', cb);
      this.on('data', function (chunk) {
        res += chunk;
      });
      this.on('end', function () {
        cb(null, res);
      });
      return this;
    };
    return {
      IconvLiteEncoderStream: IconvLiteEncoderStream,
      IconvLiteDecoderStream: IconvLiteDecoderStream
    };
  };
  return streams;
}

const __viteBrowserExternal = {};

const __viteBrowserExternal$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: 'Module' }));

const require$$4 = /*@__PURE__*/getAugmentedNamespace(__viteBrowserExternal$1);

(function (module) {

  var Buffer = safer_1.Buffer;
  var bomHandling$1 = bomHandling,
    iconv = module.exports;

  // All codecs and aliases are kept here, keyed by encoding name/alias.
  // They are lazy loaded in \`iconv.getCodec\` from \`encodings/index.js\`.
  iconv.encodings = null;

  // Characters emitted in case of error.
  iconv.defaultCharUnicode = '�';
  iconv.defaultCharSingleByte = '?';

  // Public API.
  iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || ""); // Ensure string.

    var encoder = iconv.getEncoder(encoding, options);
    var res = encoder.write(str);
    var trail = encoder.end();
    return trail && trail.length > 0 ? Buffer.concat([res, trail]) : res;
  };
  iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === 'string') {
      if (!iconv.skipDecodeWarning) {
        console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
        iconv.skipDecodeWarning = true;
      }
      buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
    }

    var decoder = iconv.getDecoder(encoding, options);
    var res = decoder.write(buf);
    var trail = decoder.end();
    return trail ? res + trail : res;
  };
  iconv.encodingExists = function encodingExists(enc) {
    try {
      iconv.getCodec(enc);
      return true;
    } catch (e) {
      return false;
    }
  };

  // Legacy aliases to convert functions
  iconv.toEncoding = iconv.encode;
  iconv.fromEncoding = iconv.decode;

  // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
  iconv._codecDataCache = {};
  iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings) iconv.encodings = requireEncodings(); // Lazy load all encoding definitions.

    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    var enc = iconv._canonicalizeEncoding(encoding);

    // Traverse iconv.encodings to find actual codec.
    var codecOptions = {};
    while (true) {
      var codec = iconv._codecDataCache[enc];
      if (codec) return codec;
      var codecDef = iconv.encodings[enc];
      switch (_typeof$2(codecDef)) {
        case "string":
          // Direct alias to other encoding.
          enc = codecDef;
          break;
        case "object":
          // Alias with options. Can be layered.
          for (var key in codecDef) codecOptions[key] = codecDef[key];
          if (!codecOptions.encodingName) codecOptions.encodingName = enc;
          enc = codecDef.type;
          break;
        case "function":
          // Codec itself.
          if (!codecOptions.encodingName) codecOptions.encodingName = enc;

          // The codec function must load all tables and return object with .encoder and .decoder methods.
          // It'll be called only once (for each different options object).
          codec = new codecDef(codecOptions, iconv);
          iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
          return codec;
        default:
          throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
      }
    }
  };
  iconv._canonicalizeEncoding = function (encoding) {
    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    return ('' + encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, "");
  };
  iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
      encoder = new codec.encoder(options, codec);
    if (codec.bomAware && options && options.addBOM) encoder = new bomHandling$1.PrependBOM(encoder, options);
    return encoder;
  };
  iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
      decoder = new codec.decoder(options, codec);
    if (codec.bomAware && !(options && options.stripBOM === false)) decoder = new bomHandling$1.StripBOM(decoder, options);
    return decoder;
  };

  // Streaming API
  // NOTE: Streaming API naturally depends on 'stream' module from Node.js. Unfortunately in browser environments this module can add
  // up to 100Kb to the output bundle. To avoid unnecessary code bloat, we don't enable Streaming API in browser by default.
  // If you would like to enable it explicitly, please add the following code to your app:
  // > iconv.enableStreamingAPI(require('stream'));
  iconv.enableStreamingAPI = function enableStreamingAPI(stream_module) {
    if (iconv.supportsStreams) return;

    // Dependency-inject stream module to create IconvLite stream classes.
    var streams = requireStreams()(stream_module);

    // Not public API yet, but expose the stream classes.
    iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;

    // Streaming API.
    iconv.encodeStream = function encodeStream(encoding, options) {
      return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    };
    iconv.decodeStream = function decodeStream(encoding, options) {
      return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    };
    iconv.supportsStreams = true;
  };

  // Enable Streaming API automatically if 'stream' module is available and non-empty (the majority of environments).
  var stream_module;
  try {
    stream_module = require$$4;
  } catch (e) {}
  if (stream_module && stream_module.Transform) {
    iconv.enableStreamingAPI(stream_module);
  } else {
    // In rare cases where 'stream' module is not available by default, throw a helpful exception.
    iconv.encodeStream = iconv.decodeStream = function () {
      throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
    };
  }
})(lib);

var safeBuffer = {exports: {}};

/* eslint-disable node/no-deprecated-api */
(function (module, exports) {
  var buffer = buffer$1;
  var Buffer = buffer.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);
  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number');
    }
    return Buffer(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    return Buffer(size);
  };
  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    return buffer.SlowBuffer(size);
  };
})(safeBuffer, safeBuffer.exports);

var MxG2312 = /*#__PURE__*/function () {
  function MxG2312() {
    _classCallCheck$1(this, MxG2312);
    _defineProperty(this, "isUseUtf8", false);
  }
  _createClass$1(MxG2312, [{
    key: "encodeToGb2312Imp",
    value: function encodeToGb2312Imp(str) {
      var buf = lib.exports.encode(str, "gb2312");
      var strOut = "";
      buf.forEach(function (byte_val) {
        strOut += "%" + byte_val.toString(16);
      });
      return strOut;
    }
  }, {
    key: "decodeFromGb2312Imp",
    value: function decodeFromGb2312Imp(hexstr) {
      var buf = [];
      var len = hexstr.length;
      for (var i = 0; i < len;) {
        var c = hexstr.charAt(i);
        if (c == "%") {
          i += 1;
          var hex = parseInt(hexstr.slice(i, i + 2), 16);
          buf.push(hex);
          i += 2;
        } else {
          console.log("decode hexstr error");
          break;
        }
      }
      return lib.exports.decode(safeBuffer.exports.Buffer.from(buf), "gb2312");
    }
  }, {
    key: "encodeToGb2312",
    value: function encodeToGb2312(str) {
      if (this.isUseUtf8) return str;
      return this.encodeToGb2312Imp(str);
    }
  }, {
    key: "decodeFromGb2312",
    value: function decodeFromGb2312(hexstr) {
      if (this.isUseUtf8) return hexstr;
      return this.decodeFromGb2312Imp(hexstr);
    }
  }]);
  return MxG2312;
}();
var MxG2312Obj = new MxG2312();
var win = window;
win.McDrawObjectEvent_utf8ToAscii = function (utf8) {
  return MxG2312Obj.encodeToGb2312Imp(utf8);
};
win.McDrawObjectEvent_asciiToUTF8 = function (hexstr) {
  return MxG2312Obj.decodeFromGb2312Imp(hexstr);
};

const version$1 = "1.0.289";

var isSharedArrayBuffer = ("SharedArrayBuffer" in window);
var isCdn = document.currentScript && /unpkg\\.com\\/mxcad/.test(document.currentScript.src);

var get2DFileURL = function get2DFileURL(fileName) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self.location.href;
  if (isCdn) return "https://unpkg.com/mxcad@".concat(version$1, "/dist/wasm/2d-st/").concat(fileName);
  return base + fileName;
};
var get2DSTFileURL = function get2DSTFileURL(fileName) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self.location.href;
  if (isCdn) return "https://unpkg.com/mxcad@".concat(version$1, "/dist/wasm/2d/").concat(fileName);
  return base + fileName;
};
var get3DFileURL = function get3DFileURL(fileName) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self.location.href;
  if (isCdn) return "https://unpkg.com/mxcad@".concat(version$1, "/dist/wasm/3d/").concat(fileName);
  return base + fileName;
};

var loadScript = function loadScript(url) {
  return new Promise(function (resolve, reject) {
    var script = document.createElement("script");
    script.src = url;
    script.type = "text/javascript";
    script.crossOrigin = "anonymous";
    document.body.appendChild(script);
    script.onload = function () {
      resolve();
    };
    script.onerror = function (e) {
      reject(e);
    };
  });
};

var loadWams$1 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(baseFileName, namespace, config) {
    var locateFile, jsPath;
    return regenerator.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          locateFile = config.locateFile;
          jsPath = locateFile(baseFileName + ".js");
          _context.prev = 2;
          _context.next = 5;
          return loadScript(jsPath);
        case 5:
          _context.next = 7;
          return globalThis[namespace](config);
        case 7:
          return _context.abrupt("return", _context.sent);
        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](2);
          console.error("\\u52A0\\u8F7Dwasm\\u6587\\u4EF6\\u5931\\u8D25, \\u8BF7\\u68C0\\u67E5locateFile\\u8FD4\\u56DE\\u7684\\u8DEF\\u5F84\\u662F\\u5426\\u53EF\\u4EE5\\u6B63\\u5E38\\u8BBF\\u95EE:\\n        createMxCad({\\n            locateFile: (fileName)=> {\\n                // \\u8BE5\\u7F51\\u7EDC\\u8DEF\\u5F84\\u65E0\\u6CD5\\u8BBF\\u95EE\\u5BF9\\u5E94fileName\\u7684\\u6587\\u4EF6\\n                retrun \\"".concat(jsPath, "\\"\\n            }\\n        })\\n        "));
          console.error(_context.t0);
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[2, 10]]);
  }));
  return function loadWams(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

function _arrayLikeToArray$6(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$6(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray$6(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread();
}

var _mxFinalizationRegistry$1 = new FinalizationRegistry(function (key) {
  MxCpp.App.destroyObject(key);
});
var _mxFinalizationRegistry_token$1 = {};
var McRxObject = /*#__PURE__*/function () {
  function McRxObject(imp) {
    _classCallCheck$1(this, McRxObject);
    _defineProperty(this, "imp", 0);
    this.imp = imp;
    if (this.imp) {
      if (this.imp.isNull()) {
        console.log("Mx:error null constructor object ");
      }
      _mxFinalizationRegistry$1.register(this, imp, _mxFinalizationRegistry_token$1);
    }
  }
  _createClass$1(McRxObject, [{
    key: "constructor_MxCADResbuf",
    value: function constructor_MxCADResbuf(imp) {
      this.imp = imp;
      if (this.imp) {
        _mxFinalizationRegistry$1.register(this, imp, _mxFinalizationRegistry_token$1);
      }
    }
  }, {
    key: "getImp",
    value: function getImp() {
      return this.imp;
    }
  }, {
    key: "initTempObject",
    value: function initTempObject(imp) {
      this.imp = imp;
    }
  }, {
    key: "objectName",
    get: function get() {
      return this.imp.getObjectName();
    }
  }, {
    key: "dxf0",
    get: function get() {
      return this.imp.getDxf0();
    }
  }, {
    key: "getJson",
    value: function getJson() {
      var hexGb = this.imp.getJson();
      return MxG2312Obj.decodeFromGb2312(hexGb);
    }
  }, {
    key: "setJson",
    value: function setJson(str) {
      var sHex = MxG2312Obj.encodeToGb2312(str);
      return this.imp.setJson(sHex);
    }
  }, {
    key: "isKindOf",
    value: function isKindOf(sObjectName) {
      return this.imp.isKindOf(sObjectName);
    }
  }, {
    key: "isNull",
    value: function isNull() {
      return this.imp.isNull();
    }
  }]);
  return McRxObject;
}();

function _createSuper$b(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$c(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$c() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var McObjectIdType = /* @__PURE__ */function (McObjectIdType2) {
  McObjectIdType2[McObjectIdType2["kMxCAD"] = 0] = "kMxCAD";
  McObjectIdType2[McObjectIdType2["kMxDraw"] = 1] = "kMxDraw";
  McObjectIdType2[McObjectIdType2["kInvalid"] = 2] = "kInvalid";
  return McObjectIdType2;
}(McObjectIdType || {});
var McObjectId = /*#__PURE__*/function () {
  function McObjectId() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    _classCallCheck$1(this, McObjectId);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "type", void 0);
    this.id = id;
    if (!id) {
      this.type = 2 /* kInvalid */;
    } else {
      if (type == 2 /* kInvalid */) {
        this.type = 0 /* kMxCAD */;
      } else {
        this.type = type;
      }
    }
  }
  _createClass$1(McObjectId, [{
    key: "isValid",
    value: function isValid() {
      return this.type != 2 /* kInvalid */ && this.id != 0;
    }
  }, {
    key: "isNull",
    value: function isNull() {
      return this.type == 2 /* kInvalid */ || this.id == 0;
    }
  }, {
    key: "isErase",
    value: function isErase() {
      if (!this.isValid()) return false;
      if (this.type == 0 /* kMxCAD */ && this.id != 0) {
        return MxCpp.App.getImp().isObjectEraseSataus(this.id);
      } else {
        return false;
      }
    }
  }, {
    key: "erase",
    value: function erase() {
      var isErase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (!this.isValid()) return;
      if (this.type == 1 /* kMxDraw */) {
        MxFun.getCurrentDraw().eraseMxEntity(this.id);
      } else if (this.type == 0 /* kMxCAD */) {
        MxCADUtility.eraseObject(this.id, isErase);
      }
    }
  }, {
    key: "getMcDbObject",
    value: function getMcDbObject() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        return MxCpp.App.objectIdToObject(this.id);
      }
      return null;
    }
  }, {
    key: "isKindOf",
    value: function isKindOf(className) {
      if (!this.isValid()) return false;
      if (this.type == 0 /* kMxCAD */) {
        return MxCpp.App.objectIdIsKindOf(this.id, className);
      } else {
        return false;
      }
    }
  }, {
    key: "getMcDbEntity",
    value: function getMcDbEntity() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbEntity")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbCurve",
    value: function getMcDbCurve() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbCurve")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbBlockTableRecord",
    value: function getMcDbBlockTableRecord() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbBlockTableRecord")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbLayerTableRecord",
    value: function getMcDbLayerTableRecord() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbLayerTableRecord")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbDimStyleTableRecord",
    value: function getMcDbDimStyleTableRecord() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbDimStyleTableRecord")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbLinetypeTableRecord",
    value: function getMcDbLinetypeTableRecord() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbLinetypeTableRecord")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbTextStyleTableRecord",
    value: function getMcDbTextStyleTableRecord() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbTextStyleTableRecord")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbDimension",
    value: function getMcDbDimension() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbDimension")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbCustomEntity",
    value: function getMcDbCustomEntity() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbCustomEntity")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "clone",
    value: function clone() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        var appImp = MxCpp.App.getImp();
        if (appImp.ObjectIdIsKindOf(this.id, "McDbCustomEntity")) {
          var customEntity = this.getMcDbCustomEntity();
          if (!customEntity) return null;
          return customEntity.clone();
        } else {
          var imp = appImp.ObjectIdToMdObject(this.id);
          if (!imp) return null;
          var clonobjImp = imp.Clone();
          MxCpp.App.destroyObject(imp);
          return MxCpp.App.createCloneObject(clonobjImp);
        }
      }
      return null;
    }
  }, {
    key: "getObjectName",
    value: function getObjectName() {
      if (this.type == 0 /* kMxCAD */) {
        return MxCpp.App.getImp().ObjectIdToObjectName(this.id);
      } else if (this.type == 1 /* kMxDraw */) {
        var ent = MxFun.getCurrentDraw().getMxEntity(this.id);
        if (ent) {
          return ent.getTypeName();
        }
      }
      return "";
    }
  }, {
    key: "getMxDbEntity",
    value: function getMxDbEntity() {
      if (!this.isValid()) return null;
      if (this.type == 1 /* kMxDraw */) {
        return MxFun.getCurrentDraw().getMxEntity(this.id);
      }
      return null;
    }
  }, {
    key: "getMcDbRasterImageDef",
    value: function getMcDbRasterImageDef() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbRasterImageDef")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbDictionary",
    value: function getMcDbDictionary() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbDictionary")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbXrecord",
    value: function getMcDbXrecord() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbXrecord")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }, {
    key: "getMcDbGroup",
    value: function getMcDbGroup() {
      if (!this.isValid()) return null;
      if (this.type == 0 /* kMxCAD */) {
        if (MxCpp.App.objectIdIsKindOf(this.id, "McDbGroup")) {
          return MxCpp.App.objectIdToObject(this.id);
        }
      }
      return null;
    }
  }]);
  return McObjectId;
}();
var McDbObject = /*#__PURE__*/function (_McRxObject) {
  _inherits$1(McDbObject, _McRxObject);
  var _super = _createSuper$b(McDbObject);
  function McDbObject(imp) {
    _classCallCheck$1(this, McDbObject);
    return _super.call(this, imp);
  }
  _createClass$1(McDbObject, [{
    key: "getObjectID",
    value: function getObjectID() {
      return new McObjectId(this.imp.GetObjectID(), 0 /* kMxCAD */);
    }
  }, {
    key: "erase",
    value: function erase() {
      return this.imp.Erase();
    }
  }, {
    key: "isErased",
    value: function isErased() {
      return this.imp.isErased();
    }
  }, {
    key: "unErase",
    value: function unErase() {
      return this.imp.unErase();
    }
  }, {
    key: "clone",
    value: function clone() {
      var clonobjImp = this.imp.Clone();
      return MxCpp.App.createCloneObject(clonobjImp);
    }
  }, {
    key: "getHandle",
    value: function getHandle() {
      return this.imp.GetHandle();
    }
  }, {
    key: "getDatabase",
    value: function getDatabase() {
      return new McDbDatabase(this.imp.GetDatabase());
    }
  }, {
    key: "getOwnerID",
    value: function getOwnerID() {
      return this.imp.GetOwnerID();
    }
  }, {
    key: "getExtensionDictionary",
    value: function getExtensionDictionary() {
      return new McDbDictionary(this.imp.GetExtensionDictionary());
    }
  }, {
    key: "isHaveExtensionDictionary",
    value: function isHaveExtensionDictionary() {
      return this.imp.IsHaveExtensionDictionary();
    }
  }, {
    key: "createExtensionDictionary",
    value: function createExtensionDictionary() {
      return this.imp.createExtensionDictionary();
    }
  }, {
    key: "getDatabaseIndexId",
    value: function getDatabaseIndexId() {
      return this.imp.GetDatabaseIndexId();
    }
  }, {
    key: "moveGripPointsAt",
    value: function moveGripPointsAt(iIndex, dXOffset, dYOffset, dZOffset) {
      return this.imp.moveGripPointsAt(iIndex, dXOffset, dYOffset, dZOffset);
    }
  }, {
    key: "getGripPoints",
    value: function getGripPoints() {
      return new McGePoint3dArray(this.imp.getGripPoints());
    }
  }, {
    key: "tempRelationObject",
    value: function tempRelationObject() {
      return 0;
    }
  }, {
    key: "freeTempRelationObject",
    value: function freeTempRelationObject() {}
  }, {
    key: "assertObjectModification",
    value: function assertObjectModification() {
      var autoUndo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return this.imp.assertObjectModification(autoUndo);
    }
  }]);
  return McDbObject;
}(McRxObject);
var McDbObjectArray = /*#__PURE__*/function () {
  function McDbObjectArray(imp) {
    _classCallCheck$1(this, McDbObjectArray);
    _defineProperty(this, "aryVal", []);
    if (imp) {
      var i = 0;
      var len = imp.length();
      for (; i < len; i++) {
        var objimp = imp.release(i);
        var obj = MxCpp.App.createCloneObject(objimp);
        if (obj != null) {
          this.aryVal.push(obj);
        }
      }
      MxCpp.App.destroyObject(imp);
    }
  }
  _createClass$1(McDbObjectArray, [{
    key: "forEach",
    value: function forEach(call) {
      var iCount = this.aryVal.length;
      for (var i = 0; i < iCount; i++) {
        call(this.aryVal[i], i);
      }
    }
  }, {
    key: "length",
    value: function length() {
      return this.aryVal.length;
    }
  }, {
    key: "empty",
    value: function empty() {
      return this.aryVal.length == 0;
    }
  }]);
  return McDbObjectArray;
}();

function _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$b() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var MxCoordConvertType = /*#__PURE__*/function () {
  function MxCoordConvertType() {
    _classCallCheck$1(this, MxCoordConvertType);
  }
  _createClass$1(MxCoordConvertType, [{
    key: "doc2cad",
    value: function doc2cad(pt) {
      return pt;
    }
  }, {
    key: "cad2doc",
    value: function cad2doc(pt) {
      return pt;
    }
  }, {
    key: "doc2cad1",
    value: function doc2cad1(pt) {
      return new McGePoint3d(pt.x, pt.y, pt.z);
    }
  }, {
    key: "doc2cad2",
    value: function doc2cad2(x, y, z) {
      return new McGePoint3d(x, y, z);
    }
  }, {
    key: "cad2doc1",
    value: function cad2doc1(pt) {
      return new THREE.Vector3(pt.x, pt.y, pt.z);
    }
  }, {
    key: "cad2doc2",
    value: function cad2doc2(x, y, z) {
      return new THREE.Vector3(x, y, z);
    }
  }]);
  return MxCoordConvertType;
}();
var MxCoordConvert;
MxCoordConvert = new MxCoordConvertType();
function getFilterImp() {
  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var filetImp;
  if (!filter) {
    filetImp = new MxCpp.mxcadassemblyimp.McDrawResbuf();
  } else {
    filetImp = filter.getImp();
  }
  return filetImp;
}
var MxCADResbuf = /*#__PURE__*/function (_McRxObject) {
  _inherits$1(MxCADResbuf, _McRxObject);
  var _super = _createSuper$a(MxCADResbuf);
  function MxCADResbuf(imp) {
    var _this;
    _classCallCheck$1(this, MxCADResbuf);
    if (imp) {
      if (imp instanceof Array) {
        _this = _super.call(this);
        _this.initTempObject(new MxCpp.mxcadassemblyimp.McDrawResbuf());
        var len = imp.length;
        var isObjArray = false;
        for (var i = 0; i < len; i++) {
          if (imp[i] instanceof Object) {
            isObjArray = true;
            break;
          }
        }
        if (isObjArray) {
          _this.setJson(JSON.stringify(imp));
        } else {
          var aryObj = [];
          for (var _i = 0; _i + 1 < len; _i += 2) {
            if (typeof imp[_i] === "number") {
              aryObj.push({
                type: imp[_i],
                val: imp[_i + 1]
              });
            }
          }
          if (aryObj.length > 0) {
            _this.setJson(JSON.stringify(aryObj));
          }
        }
      } else {
        _this = _super.call(this);
        _this.constructor_MxCADResbuf(imp);
      }
    } else {
      _this = _super.call(this);
      _this.initTempObject(new MxCpp.mxcadassemblyimp.McDrawResbuf());
    }
    return _possibleConstructorReturn$1(_this);
  }
  _createClass$1(MxCADResbuf, [{
    key: "Clear",
    value: function Clear() {
      this.imp.Clear();
    }
  }, {
    key: "forEach",
    value: function forEach(call) {
      var iCount = this.GetCount();
      for (var i = 0; i < iCount; i++) {
        var iType = this.ItemDataType(i);
        var iDxf = this.ItemDataDxf(i);
        if (iType == 5005) {
          call(this.AtString(i, true).val, iType, iDxf, i);
        } else if (iType == 5009) {
          call(this.AtPoint(i).val, iType, iDxf, i);
        } else if (iType == 5001) {
          call(this.AtDouble(i).val, iType, iDxf, i);
        } else if (iType == 5003 || iType == 5010) {
          call(this.AtLong(i).val, 5010, iDxf, i);
        } else if (iDxf == -8500) {
          call(this.AtObject(i).val, -8500, -8500, i);
        } else if (iType == -8e3 || iType == -8001 || iType == -8002 || iType == -8003 || iType == -8004) {
          call(this.AtObjectId(i).val, -8e3, -8e3, i);
        } else {
          call(void 0, iType, iDxf, i);
        }
      }
    }
  }, {
    key: "GetCount",
    value: function GetCount() {
      return this.imp.GetCount();
    }
  }, {
    key: "GetPoints",
    value: function GetPoints() {
      var aryPoint = new McGePoint3dArray();
      this.forEach(function (val, _type, dxf) {
        if (dxf === 1010) {
          var point = new McGePoint3d(val.x, val.y, val.z);
          aryPoint.append(point);
        }
      });
      return aryPoint;
    }
  }, {
    key: "AtDouble",
    value: function AtDouble(lItem) {
      return {
        val: this.imp.AtDouble(lItem),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "AtLong",
    value: function AtLong(lItem) {
      return {
        val: this.imp.Atlong(lItem),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "AtObject",
    value: function AtObject(lItem) {
      if (lItem >= this.imp.GetCount()) {
        return {
          val: void 0,
          ret: false
        };
      }
      var impobj = this.imp.AtObject(lItem);
      var obj = MxCpp.App.createCloneObject(impobj);
      if (obj === null) return {
        val: void 0,
        ret: false
      };else return {
        val: obj,
        ret: true
      };
    }
  }, {
    key: "AddObject",
    value: function AddObject(pObj) {
      this.imp.AddObject(pObj.getImp());
    }
  }, {
    key: "AtObjectId",
    value: function AtObjectId(lItem) {
      return {
        val: new McObjectId(this.imp.AtObjectId(lItem), McObjectIdType.kMxCAD),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "AtString",
    value: function AtString(lItem) {
      var decodeFromGb2312 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (decodeFromGb2312) {
        var str = MxG2312Obj.decodeFromGb2312(this.imp.AtString(lItem, true));
        return {
          val: str,
          ret: MxCpp.getCallResult() == 0
        };
      } else {
        return {
          val: this.imp.AtString(lItem, true),
          ret: MxCpp.getCallResult() == 0
        };
      }
    }
  }, {
    key: "AtPoint",
    value: function AtPoint(lItem) {
      return {
        val: new McGePoint3d(this.imp.AtPoint(lItem)),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "ItemDataType",
    value: function ItemDataType(index) {
      return this.imp.ItemDataType(index);
    }
  }, {
    key: "ItemDataDxf",
    value: function ItemDataDxf(index) {
      return this.imp.ItemDataDxf(index);
    }
  }, {
    key: "AddDouble",
    value: function AddDouble(val) {
      var lDataType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -10;
      return this.imp.AddDouble(val, lDataType);
    }
  }, {
    key: "AddLong",
    value: function AddLong(val) {
      var lDataType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -10;
      return this.imp.Addlong(val, lDataType);
    }
  }, {
    key: "AddObjectId",
    value: function AddObjectId(val) {
      var lDataType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -10;
      return this.imp.AddObjectId(val, lDataType);
    }
  }, {
    key: "AddString",
    value: function AddString(str) {
      var lDataType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -10;
      var decodeFromGb2312 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      if (decodeFromGb2312) {
        return this.imp.AddString(MxG2312Obj.encodeToGb2312(str), lDataType);
      } else {
        return this.imp.AddString(str, lDataType);
      }
    }
  }, {
    key: "AddAppName",
    value: function AddAppName(str) {
      var decodeFromGb2312 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (decodeFromGb2312) {
        return this.imp.AddAppName(MxG2312Obj.encodeToGb2312(str));
      } else {
        return this.imp.AddAppName(str);
      }
    }
  }, {
    key: "AddMcDbEntityTypes",
    value: function AddMcDbEntityTypes(str) {
      return this.imp.AddString(str, 5020);
    }
  }, {
    key: "AddPoint",
    value: function AddPoint(pt) {
      var lDataType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -10;
      return this.imp.AddPoint(pt.imp, lDataType);
    }
  }, {
    key: "RemoveAll",
    value: function RemoveAll() {
      this.imp.RemoveAll();
    }
  }, {
    key: "Remove",
    value: function Remove(lItem) {
      this.imp.Remove(lItem);
    }
  }, {
    key: "PrintData",
    value: function PrintData() {
      this.imp.PrintData();
    }
  }]);
  return MxCADResbuf;
}(McRxObject);
var MxCADUtilityClass = /*#__PURE__*/function () {
  function MxCADUtilityClass() {
    _classCallCheck$1(this, MxCADUtilityClass);
    _defineProperty(this, "imp", void 0);
  }
  _createClass$1(MxCADUtilityClass, [{
    key: "eraseObject",
    value: function eraseObject(lId) {
      var isErase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.init();
      return this.imp.eraseObject(lId, isErase);
    }
  }, {
    key: "highlightEntity",
    value: function highlightEntity(lId) {
      var isHighlight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.init();
      return this.imp.highlightEntity(lId, isHighlight);
    }
  }, {
    key: "findEntAtPoint",
    value: function findEntAtPoint(dX, dY, dZ) {
      var dSearhRange = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
      var filter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      this.init();
      var retId = this.imp.findEntAtPoint(dX, dY, dZ, dSearhRange, getFilterImp(filter));
      return new McObjectId(retId, McObjectIdType.kMxCAD);
    }
  }, {
    key: "selectEnt",
    value: function selectEnt(strPrompt) {
      var _this2 = this;
      var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var isSelectMxDraw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var init = arguments.length > 3 ? arguments[3] : undefined;
      var callbackGetPoint = arguments.length > 4 ? arguments[4] : undefined;
      this.init();
      return new Promise( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(resolve) {
          var getPoint, pt, aryRetId, ptcad, mxCADObjectId;
          return regenerator.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                getPoint = new MrxDbgUiPrPoint();
                typeof init === "function" && init(getPoint);
                if (strPrompt) getPoint.setMessage(strPrompt);
                getPoint.setCursorType(MxCursorType.kRect);
                getPoint.disableAllTrace();
                getPoint.setDynamicInputType(DynamicInputType.kDynTip);
                _context.next = 8;
                return getPoint.go();
              case 8:
                pt = _context.sent;
                if (pt) {
                  _context.next = 12;
                  break;
                }
                resolve([]);
                return _context.abrupt("return");
              case 12:
                typeof callbackGetPoint === "function" && callbackGetPoint(new McGePoint3d().setFromVector3(pt));
                getPoint.clearLastInputPoint();
                if (isSelectMxDraw) {
                  MrxDbgUtils.findEntAtPoint(pt).then(function (aryId) {
                    var aryRetId = [];
                    aryId.forEach(function (val) {
                      aryRetId.push(new McObjectId(val, McObjectIdType.kMxDraw));
                    });
                    var ptcad = MxCoordConvert.doc2cad1(pt);
                    var mxCADObjectId = _this2.findEntAtPoint(ptcad.x, ptcad.y, ptcad.z, -1, filter);
                    if (mxCADObjectId.isValid()) {
                      aryRetId.push(mxCADObjectId);
                    }
                    resolve(aryRetId);
                  });
                } else {
                  aryRetId = [];
                  ptcad = MxCoordConvert.doc2cad1(pt);
                  mxCADObjectId = _this2.findEntAtPoint(ptcad.x, ptcad.y, ptcad.z, -1, filter);
                  if (mxCADObjectId.isValid()) {
                    aryRetId.push(mxCADObjectId);
                  }
                  resolve(aryRetId);
                }
              case 15:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "getCurrentSelectPoints",
    value: function getCurrentSelectPoints() {
      var ret = MxFun.getCurrentDraw().getSelectPoints();
      if (ret.isvalid) {
        return {
          point1: new McGePoint3d(ret.point1),
          point2: new McGePoint3d(ret.point2),
          isvalid: true
        };
      } else {
        return {
          point1: new McGePoint3d(),
          point2: new McGePoint3d(),
          isvalid: false
        };
      }
    }
  }, {
    key: "getCurrentSelect",
    value: function getCurrentSelect() {
      var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var returnMxCADObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var returnMxDrawObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var aryRetId = [];
      if (returnMxDrawObject) {
        var aryId = MxFun.getCurrentDraw().getMxCurrentSelect();
        aryId.forEach(function (val) {
          aryRetId.push(new McObjectId(val, McObjectIdType.kMxDraw));
        });
      }
      if (returnMxCADObject) {
        var aryMxCADId = MxFun.getCurrentDraw().getMxCADCurrentSelect();
        if (aryMxCADId.length <= 0) {
          return aryRetId;
        }
        if (filter) {
          var _aryId = new McGeLongArray();
          aryMxCADId.forEach(function (val) {
            _aryId.append(val);
          });
          var ssimp = new MxCpp.mxcadassemblyimp.McDrawSelSet();
          var aryOutId = ssimp.getFilterEntity(_aryId.imp, getFilterImp(filter));
          MxCpp.App.destroyObject(ssimp);
          aryMxCADId = [];
          var len = aryOutId.length();
          for (var k = 0; k < len; k++) {
            aryMxCADId.push(aryOutId.at(k));
          }
        }
        aryMxCADId.forEach(function (val) {
          aryRetId.push(new McObjectId(val, McObjectIdType.kMxCAD));
        });
      }
      return aryRetId;
    }
  }, {
    key: "userSelect",
    value: function () {
      var _userSelect = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(strPrompt) {
        var filter,
          init,
          aryRetId,
          ss,
          _args2 = arguments;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              filter = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;
              init = _args2.length > 2 ? _args2[2] : undefined;
              aryRetId = this.getCurrentSelect(filter);
              if (!(aryRetId.length == 0)) {
                _context2.next = 9;
                break;
              }
              ss = new MxCADSelectionSet();
              _context2.next = 7;
              return ss.userSelect(strPrompt, filter, function (getPoint) {
                init && init(ss, getPoint);
              });
            case 7:
              if (!_context2.sent) {
                _context2.next = 9;
                break;
              }
              ss.forEach(function (val) {
                aryRetId.push(val);
              });
            case 9:
              return _context2.abrupt("return", new Promise(function (resolve) {
                resolve(aryRetId);
              }));
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function userSelect(_x2) {
        return _userSelect.apply(this, arguments);
      }
      return userSelect;
    }()
  }, {
    key: "init",
    value: function init() {
      if (!this.imp) {
        this.imp = new MxCpp.mxcadassemblyimp.McDrawUtility();
        new MxCADMText().rxInit();
      }
    }
  }, {
    key: "getCorner",
    value: function () {
      var _getCorner = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(strPrompt, pt1, detailedResult) {
        var drawSelectCroner,
          isDisableAllTrace,
          init,
          retcode,
          retPt2,
          getPoint,
          pt1Doc,
          pt2,
          _args3 = arguments;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              drawSelectCroner = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : false;
              isDisableAllTrace = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : false;
              init = _args3.length > 5 ? _args3[5] : undefined;
              retcode = 0;
              retPt2 = void 0;
            case 5:
              if (pt1) {
                _context3.next = 16;
                break;
              }
              getPoint = new MxCADUiPrPoint();
              if (strPrompt) {
                getPoint.setMessage(strPrompt);
              }
              if (isDisableAllTrace) {
                getPoint.disableAllTrace(true);
              }
              init && init(getPoint);
              getPoint.setDynamicInputType(DynamicInputType.kDynTip);
              _context3.next = 14;
              return getPoint.go();
            case 14:
              pt1 = _context3.sent;
              retcode = getPoint.getDetailedResult();
            case 16:
              if (pt1) {
                _context3.next = 18;
                break;
              }
              return _context3.abrupt("break", 26);
            case 18:
              pt1Doc = MxCoordConvert.cad2doc1(pt1);
              _context3.next = 21;
              return MrxDbgUtils.getCorner(pt1Doc, strPrompt, drawSelectCroner, function (ret) {
                retcode = ret.detailedResult;
              }, isDisableAllTrace);
            case 21:
              pt2 = _context3.sent;
              if (pt2) {
                retPt2 = MxCoordConvert.doc2cad1(pt2);
              }
              return _context3.abrupt("break", 26);
            case 26:
              if (detailedResult) detailedResult(retcode);
              return _context3.abrupt("return", new Promise(function (resolve) {
                if (retcode == DetailedResult.kEcsIn || retcode == DetailedResult.kNewCommadIn || retcode == DetailedResult.kUnknown) {
                  resolve(null);
                } else {
                  if (pt1 && retPt2) {
                    resolve({
                      pt1: pt1,
                      pt2: retPt2
                    });
                  } else {
                    resolve(null);
                  }
                }
              }));
            case 28:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function getCorner(_x3, _x4, _x5) {
        return _getCorner.apply(this, arguments);
      }
      return getCorner;
    }()
  }, {
    key: "getMcDbEntitysBoundingBox",
    value: function getMcDbEntitysBoundingBox(aryId) {
      var minPt = void 0;
      var maxPt = void 0;
      aryId.forEach(function (val) {
        var ent = val.getMcDbEntity();
        if (ent == null) return;
        var bound = ent.getBoundingBox();
        if (!bound.ret) return;
        if (!minPt || !maxPt) {
          minPt = new THREE.Vector3(bound.minPt.x, bound.minPt.y, 0);
          maxPt = new THREE.Vector3(bound.maxPt.x, bound.maxPt.y, 0);
        } else {
          if (minPt.x > bound.minPt.x) {
            minPt.x = bound.minPt.x;
          }
          if (minPt.y > bound.minPt.y) {
            minPt.y = bound.minPt.y;
          }
          if (maxPt.x < bound.maxPt.x) {
            maxPt.x = bound.maxPt.x;
          }
          if (maxPt.y < bound.maxPt.y) {
            maxPt.y = bound.maxPt.y;
          }
        }
      });
      if (minPt && maxPt) {
        return {
          minPt: new McGePoint3d(minPt),
          maxPt: new McGePoint3d(maxPt)
        };
      } else {
        return void 0;
      }
    }
  }, {
    key: "calcBulge",
    value: function calcBulge(pt1, pt2, pt3) {
      var bulge = this.imp.calcBulge(pt1.imp, pt2.imp, pt3.imp);
      return {
        val: bulge,
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "pointInPolygon",
    value: function pointInPolygon(aryPoint, x, y) {
      return this.imp.pointInPolygon(aryPoint.imp, x, y);
    }
  }, {
    key: "builderHatchFromPoint",
    value: function builderHatchFromPoint(pt) {
      var imphatch = this.imp.builderHatchFromPoint(pt.x, pt.y);
      if (imphatch.isNull()) {
        MxCpp.App.destroyObject(imphatch);
        return null;
      }
      return new McDbHatch(imphatch);
    }
  }, {
    key: "getTextBox",
    value: function getTextBox(str, dTextHeight, dWidthFactor, idTextStyleRecord) {
      if (idTextStyleRecord.type != McObjectIdType.kMxCAD) return {
        minPt: new McGePoint3d(),
        maxPt: new McGePoint3d(),
        ret: false
      };
      var ret = this.imp.getTextBox(MxG2312Obj.encodeToGb2312(str), dTextHeight, dWidthFactor, idTextStyleRecord.id);
      if (!ret) {
        return {
          minPt: new McGePoint3d(),
          maxPt: new McGePoint3d(),
          ret: false
        };
      } else {
        var retval = {
          minPt: new McGePoint3d(),
          maxPt: new McGePoint3d(),
          ret: false
        };
        if (ret.GetCount() != 0) {
          retval = {
            minPt: new McGePoint3d(ret.AtPoint(0)),
            maxPt: new McGePoint3d(ret.AtPoint(1)),
            ret: true
          };
        }
        MxCpp.App.destroyObject(ret);
        return retval;
      }
    }
  }, {
    key: "getTextEntityBox",
    value: function getTextEntityBox(text) {
      var isTrimLastSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var ret = this.imp.getTextEntityBox(text.imp, isTrimLastSpace);
      if (!ret) {
        return {
          minPt: new McGePoint3d(),
          maxPt: new McGePoint3d(),
          ret: false
        };
      } else {
        var retval = {
          minPt: new McGePoint3d(),
          maxPt: new McGePoint3d(),
          ret: false
        };
        if (ret.GetCount() != 0) {
          retval = {
            minPt: new McGePoint3d(ret.AtPoint(0)),
            maxPt: new McGePoint3d(ret.AtPoint(1)),
            ret: true
          };
        }
        MxCpp.App.destroyObject(ret);
        return retval;
      }
    }
  }]);
  return MxCADUtilityClass;
}();
var MxCADUtility = new MxCADUtilityClass();
var MxCADSelectionSetStatus = /* @__PURE__ */function (MxCADSelectionSetStatus2) {
  MxCADSelectionSetStatus2[MxCADSelectionSetStatus2["kSelected"] = 0] = "kSelected";
  MxCADSelectionSetStatus2[MxCADSelectionSetStatus2["kNone"] = 1] = "kNone";
  MxCADSelectionSetStatus2[MxCADSelectionSetStatus2["kCanceled"] = 2] = "kCanceled";
  MxCADSelectionSetStatus2[MxCADSelectionSetStatus2["kRejected"] = 3] = "kRejected";
  MxCADSelectionSetStatus2[MxCADSelectionSetStatus2["kKeyword"] = 4] = "kKeyword";
  return MxCADSelectionSetStatus2;
}(MxCADSelectionSetStatus || {});
var MxCADSelectionSet = /*#__PURE__*/function (_McRxObject2) {
  _inherits$1(MxCADSelectionSet, _McRxObject2);
  var _super2 = _createSuper$a(MxCADSelectionSet);
  function MxCADSelectionSet() {
    var _this3;
    _classCallCheck$1(this, MxCADSelectionSet);
    _this3 = _super2.call(this);
    _defineProperty(_assertThisInitialized$1(_this3), "isWhileSelect", true);
    _defineProperty(_assertThisInitialized$1(_this3), "isSelectHighlight", true);
    _defineProperty(_assertThisInitialized$1(_this3), "selectPt1", new McGePoint3d());
    _defineProperty(_assertThisInitialized$1(_this3), "selectPt2", new McGePoint3d());
    _this3.initTempObject(new MxCpp.mxcadassemblyimp.McDrawSelSet());
    return _this3;
  }
  _createClass$1(MxCADSelectionSet, [{
    key: "getSelectPoint",
    value: function getSelectPoint() {
      return {
        pt1: this.selectPt1,
        pt2: this.selectPt2
      };
    }
  }, {
    key: "allSelect",
    value: function allSelect() {
      var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.imp.allSelect(getFilterImp(filter));
    }
  }, {
    key: "pointSelect",
    value: function pointSelect(dX, dY) {
      var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var dTol = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
      return this.imp.pointSelect(dX, dY, getFilterImp(filter), dTol);
    }
  }, {
    key: "crossingSelect",
    value: function crossingSelect(dX1, dY1, dX2, dY2) {
      var filter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      return this.imp.crossingSelect(dX1, dY1, dX2, dY2, getFilterImp(filter));
    }
  }, {
    key: "count",
    value: function count() {
      return this.imp.count();
    }
  }, {
    key: "isNull",
    value: function isNull() {
      return this.imp.count() == 0;
    }
  }, {
    key: "item",
    value: function item(lItem) {
      return new McObjectId(this.imp.item(lItem), McObjectIdType.kMxCAD);
    }
  }, {
    key: "forEach",
    value: function forEach(call) {
      var iCount = this.imp.count();
      for (var i = 0; i < iCount; i++) {
        call(this.item(i));
      }
    }
  }, {
    key: "getIds",
    value: function getIds() {
      var ret = [];
      var iCount = this.imp.count();
      for (var i = 0; i < iCount; i++) {
        ret.push(this.item(i));
      }
      return ret;
    }
  }, {
    key: "userSelect",
    value: function () {
      var _userSelect2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(strPrompt) {
        var filter,
          init,
          getPoint,
          retcode,
          filterImp,
          pt1,
          pt1CAD,
          pt2,
          pt2CAD,
          _args4 = arguments;
        return regenerator.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              filter = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : null;
              init = _args4.length > 2 ? _args4[2] : undefined;
              this.selectPt1 = new McGePoint3d();
              this.selectPt2 = new McGePoint3d();
              getPoint = new MrxDbgUiPrPoint();
              if (strPrompt) {
                getPoint.setMessage(strPrompt);
              }
              getPoint.setCursorType(MxCursorType.kRect);
              getPoint.setDynamicInputType(DynamicInputType.kDynTip);
              getPoint.disableAllTrace();
              retcode = 0;
              init && init(getPoint);
              filterImp = getFilterImp(filter);
            case 12:
              getPoint.setDynamicInputType(DynamicInputType.kDynTip);
              _context4.next = 16;
              return getPoint.go();
            case 16:
              pt1 = _context4.sent;
              getPoint.clearLastInputPoint();
              retcode = getPoint.getDetailedResult();
              if (pt1) {
                _context4.next = 21;
                break;
              }
              return _context4.abrupt("break", 43);
            case 21:
              pt1CAD = MxCoordConvert.doc2cad1(pt1);
              if (!(this.imp.userPointSelect(pt1CAD.x, pt1CAD.y, filterImp, this.isSelectHighlight) == 0 /* kSelected */)) {
                _context4.next = 30;
                break;
              }
              this.selectPt1.copy(pt1CAD);
              this.selectPt2.copy(pt1CAD);
              if (!this.isWhileSelect) {
                _context4.next = 29;
                break;
              }
              return _context4.abrupt("continue", 12);
            case 29:
              return _context4.abrupt("break", 43);
            case 30:
              _context4.next = 32;
              return MrxDbgUtils.getCorner(pt1, strPrompt, true, function (ret) {
                retcode = ret.detailedResult;
              });
            case 32:
              pt2 = _context4.sent;
              if (pt2) {
                _context4.next = 35;
                break;
              }
              return _context4.abrupt("break", 43);
            case 35:
              pt2CAD = MxCoordConvert.doc2cad1(pt2);
              this.imp.userSelect(pt1CAD.x, pt1CAD.y, pt2CAD.x, pt2CAD.y, filterImp, this.isSelectHighlight);
              this.selectPt1.copy(pt1CAD);
              this.selectPt2.copy(pt2CAD);
              if (this.isWhileSelect) {
                _context4.next = 41;
                break;
              }
              return _context4.abrupt("break", 43);
            case 41:
              _context4.next = 12;
              break;
            case 43:
              if (this.isSelectHighlight) this.imp.highlightEntity(false);
              if (!(retcode == DetailedResult.kEcsIn || retcode == DetailedResult.kNewCommadIn || retcode == DetailedResult.kUnknown)) {
                _context4.next = 48;
                break;
              }
              return _context4.abrupt("return", new Promise(function (resolve) {
                resolve(false);
              }));
            case 48:
              return _context4.abrupt("return", new Promise(function (resolve) {
                resolve(true);
              }));
            case 49:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function userSelect(_x6) {
        return _userSelect2.apply(this, arguments);
      }
      return userSelect;
    }()
  }]);
  return MxCADSelectionSet;
}(McRxObject);
var MxCADUiPrBase = /*#__PURE__*/function () {
  function MxCADUiPrBase(imp) {
    _classCallCheck$1(this, MxCADUiPrBase);
    _defineProperty(this, "imp", void 0);
    _defineProperty(this, "mxobj", void 0);
    this.imp = imp;
    this.mxobj = MxFun.getCurrentDraw();
  }
  _createClass$1(MxCADUiPrBase, [{
    key: "doc2cad1",
    value: function doc2cad1(pt) {
      return new McGePoint3d(pt.x, pt.y, pt.z);
    }
  }, {
    key: "doc2cad2",
    value: function doc2cad2(x, y, z) {
      return new McGePoint3d(x, y, z);
    }
  }, {
    key: "cad2doc1",
    value: function cad2doc1(pt) {
      return new THREE.Vector3(pt.x, pt.y, pt.z);
    }
  }, {
    key: "cad2doc2",
    value: function cad2doc2(x, y, z) {
      return new THREE.Vector3(x, y, z);
    }
  }, {
    key: "keyWords",
    value: function keyWords() {
      return this.imp.keyWords();
    }
  }, {
    key: "setKeyWords",
    value: function setKeyWords(keyWordList) {
      this.imp.setKeyWords(keyWordList);
    }
  }, {
    key: "clearLastInputPoint",
    value: function clearLastInputPoint() {
      this.imp.clearLastInputPoint();
    }
  }, {
    key: "setLastInputPoint",
    value: function setLastInputPoint(pt) {
      this.imp.setLastInputPoint(this.cad2doc1(pt));
    }
  }, {
    key: "message",
    value: function message() {
      return this.imp.message();
    }
  }, {
    key: "setMessage",
    value: function setMessage(message) {
      this.imp.setMessage(message);
    }
  }, {
    key: "keyWordPicked",
    value: function keyWordPicked() {
      return this.imp.keyWordPicked();
    }
  }, {
    key: "isKeyWordPicked",
    value: function isKeyWordPicked(matchKeyWord) {
      return this.imp.isKeyWordPicked(matchKeyWord);
    }
  }, {
    key: "setUserDraw",
    value: function setUserDraw(pDraw) {
      var myThis = this;
      this.imp.setUserDraw(function (pt, pWorldDraw) {
        pDraw(myThis.doc2cad1(pt), pWorldDraw);
      });
    }
  }, {
    key: "getDetailedResult",
    value: function getDetailedResult() {
      return this.imp.getDetailedResult();
    }
  }, {
    key: "getStatus",
    value: function getStatus() {
      return this.imp.getStatus();
    }
  }, {
    key: "drawReserve",
    value: function drawReserve(callAddEntity) {
      this.imp.drawReserve(callAddEntity);
    }
  }, {
    key: "setInputToucheType",
    value: function setInputToucheType(toucheType) {
      this.imp.setInputToucheType(toucheType);
    }
  }, {
    key: "getInputToucheType",
    value: function getInputToucheType() {
      return this.imp.getInputToucheType();
    }
  }, {
    key: "setCursorType",
    value: function setCursorType(type) {
      this.imp.setCursorType(type);
    }
  }, {
    key: "getCursorType",
    value: function getCursorType() {
      return this.imp.getCursorType();
    }
  }, {
    key: "setDynamicInputType",
    value: function setDynamicInputType(type) {
      this.imp.setDynamicInputType(type);
    }
  }, {
    key: "getDynamicInputType",
    value: function getDynamicInputType() {
      return this.imp.getDynamicInputType();
    }
  }, {
    key: "isDisableDynInput",
    value: function isDisableDynInput() {
      return this.imp.isDisableDynInput();
    }
  }, {
    key: "setDisableDynInput",
    value: function setDisableDynInput(isDisable) {
      this.imp.setDisableDynInput(isDisable);
    }
  }, {
    key: "setDisableOsnap",
    value: function setDisableOsnap(isDisable) {
      this.imp.setDisableOsnap(isDisable);
    }
  }, {
    key: "isDisableOsnap",
    value: function isDisableOsnap() {
      return this.imp.isDisableOsnap();
    }
  }, {
    key: "isOffsetInputPostion",
    value: function isOffsetInputPostion() {
      return this.imp.isOffsetInputPostion();
    }
  }, {
    key: "setOffsetInputPostion",
    value: function setOffsetInputPostion(isOffset) {
      return this.imp.setOffsetInputPostion(isOffset);
    }
  }, {
    key: "setDisableDynamicTrace",
    value: function setDisableDynamicTrace(isDisable) {
      this.imp.setDisableDynamicTrace(isDisable);
    }
  }, {
    key: "isDisableDynamicTrace",
    value: function isDisableDynamicTrace() {
      return this.imp.isDisableDynamicTrace();
    }
  }, {
    key: "setDisablePolarAxisTrace",
    value: function setDisablePolarAxisTrace(isDisable) {
      this.imp.setDisablePolarAxisTrace(isDisable);
    }
  }, {
    key: "isDisablePolarAxisTrace",
    value: function isDisablePolarAxisTrace() {
      return this.imp.isDisablePolarAxisTrace();
    }
  }, {
    key: "setDisableGridTrace",
    value: function setDisableGridTrace(isDisable) {
      this.imp.setDisableGridTrace(isDisable);
    }
  }, {
    key: "isDisableGridTrace",
    value: function isDisableGridTrace() {
      return this.imp.isDisableGridTrace();
    }
  }, {
    key: "setDisableOrthoTrace",
    value: function setDisableOrthoTrace(isDisable) {
      this.imp.setDisableOrthoTrace(isDisable);
    }
  }, {
    key: "isDisableOrthoTrace",
    value: function isDisableOrthoTrace() {
      return this.imp.isDisableOrtho();
    }
  }, {
    key: "disableAllTrace",
    value: function disableAllTrace() {
      var isDisable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.imp.disableAllTrace(isDisable);
    }
  }, {
    key: "userInputControls",
    value: function userInputControls() {
      return this.imp.userInputControls();
    }
  }, {
    key: "setUserInputControls",
    value: function setUserInputControls(contros) {
      this.imp.setUserInputControls(contros);
    }
  }, {
    key: "abort",
    value: function abort() {
      var cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DetailedResult.kCodeAbort;
      this.imp.abort(cause);
    }
  }]);
  return MxCADUiPrBase;
}();
var MxCADUiPrPoint = /*#__PURE__*/function (_MxCADUiPrBase) {
  _inherits$1(MxCADUiPrPoint, _MxCADUiPrBase);
  var _super3 = _createSuper$a(MxCADUiPrPoint);
  function MxCADUiPrPoint() {
    _classCallCheck$1(this, MxCADUiPrPoint);
    return _super3.call(this, new MrxDbgUiPrPoint());
  }
  _createClass$1(MxCADUiPrPoint, [{
    key: "go",
    value: function go() {
      var _this4 = this;
      return new Promise(function (resolve) {
        _this4.imp.go(function (status) {
          if (status != 0) {
            resolve(null);
          } else {
            resolve(_this4.doc2cad1(_this4.imp.value()));
          }
        });
      });
    }
  }, {
    key: "value",
    value: function value() {
      return this.doc2cad1(this.imp.value());
    }
  }, {
    key: "getDocValue",
    value: function getDocValue() {
      return new McGePoint3d(this.imp.value());
    }
  }, {
    key: "basePt",
    value: function basePt() {
      return this.doc2cad1(this.imp.basePt());
    }
  }, {
    key: "setBasePt",
    value: function setBasePt(basePt) {
      this.imp.setBasePt(this.cad2doc1(basePt));
      this.imp.setUseBasePt(true);
    }
  }, {
    key: "setUseBasePt",
    value: function setUseBasePt(useIt) {
      this.imp.setUseBasePt(useIt);
    }
  }]);
  return MxCADUiPrPoint;
}(MxCADUiPrBase);
var MxCADUiPrDist = /*#__PURE__*/function (_MxCADUiPrBase2) {
  _inherits$1(MxCADUiPrDist, _MxCADUiPrBase2);
  var _super4 = _createSuper$a(MxCADUiPrDist);
  function MxCADUiPrDist() {
    _classCallCheck$1(this, MxCADUiPrDist);
    return _super4.call(this, new MrxDbgUiPrDist());
  }
  _createClass$1(MxCADUiPrDist, [{
    key: "value",
    value: function value() {
      return this.imp.value();
    }
  }, {
    key: "basePt",
    value: function basePt() {
      return this.doc2cad1(this.imp.basePt());
    }
  }, {
    key: "setBasePt",
    value: function setBasePt(basePt) {
      this.imp.setBasePt(this.cad2doc1(basePt));
      this.imp.setUseBasePt(true);
    }
  }, {
    key: "setUseBasePt",
    value: function setUseBasePt(useIt) {
      return this.imp.setUseBasePt(useIt);
    }
  }, {
    key: "go",
    value: function go() {
      return this.imp.go();
    }
  }]);
  return MxCADUiPrDist;
}(MxCADUiPrBase);
var MxCADUiPrAngle = /*#__PURE__*/function (_MxCADUiPrBase3) {
  _inherits$1(MxCADUiPrAngle, _MxCADUiPrBase3);
  var _super5 = _createSuper$a(MxCADUiPrAngle);
  function MxCADUiPrAngle() {
    _classCallCheck$1(this, MxCADUiPrAngle);
    return _super5.call(this, new MrxDbgUiPrAngle());
  }
  _createClass$1(MxCADUiPrAngle, [{
    key: "value",
    value: function value() {
      return this.imp.value();
    }
  }, {
    key: "basePt",
    value: function basePt() {
      return this.doc2cad1(this.imp.basePt());
    }
  }, {
    key: "setBasePt",
    value: function setBasePt(basePt) {
      this.imp.setBasePt(this.cad2doc1(basePt));
      this.imp.setUseBasePt(true);
    }
  }, {
    key: "setUseBasePt",
    value: function setUseBasePt(useIt) {
      return this.imp.setUseBasePt(useIt);
    }
  }, {
    key: "go",
    value: function go() {
      return this.imp.go();
    }
  }]);
  return MxCADUiPrAngle;
}(MxCADUiPrBase);
var MxCADUiPrInt = /*#__PURE__*/function (_MxCADUiPrBase4) {
  _inherits$1(MxCADUiPrInt, _MxCADUiPrBase4);
  var _super6 = _createSuper$a(MxCADUiPrInt);
  function MxCADUiPrInt() {
    _classCallCheck$1(this, MxCADUiPrInt);
    return _super6.call(this, new MrxDbgUiPrInt());
  }
  _createClass$1(MxCADUiPrInt, [{
    key: "value",
    value: function value() {
      return this.imp.value();
    }
  }, {
    key: "go",
    value: function go() {
      return this.imp.go();
    }
  }]);
  return MxCADUiPrInt;
}(MxCADUiPrBase);
var MxCADUiPrKeyWord = /*#__PURE__*/function (_MxCADUiPrBase5) {
  _inherits$1(MxCADUiPrKeyWord, _MxCADUiPrBase5);
  var _super7 = _createSuper$a(MxCADUiPrKeyWord);
  function MxCADUiPrKeyWord() {
    _classCallCheck$1(this, MxCADUiPrKeyWord);
    return _super7.call(this, new MrxDbgUiPrKeyWord());
  }
  _createClass$1(MxCADUiPrKeyWord, [{
    key: "go",
    value: function go() {
      return this.imp.go();
    }
  }]);
  return MxCADUiPrKeyWord;
}(MxCADUiPrBase);
var MxCADUiPrString = /*#__PURE__*/function (_MxCADUiPrBase6) {
  _inherits$1(MxCADUiPrString, _MxCADUiPrBase6);
  var _super8 = _createSuper$a(MxCADUiPrString);
  function MxCADUiPrString() {
    var _this5;
    _classCallCheck$1(this, MxCADUiPrString);
    _this5 = _super8.call(this, new MrxDbgUiPrString());
    _this5.setDynamicInputType(DynamicInputType.kNoInput);
    _this5.disableAllTrace();
    return _this5;
  }
  _createClass$1(MxCADUiPrString, [{
    key: "value",
    value: function value() {
      return this.imp.value();
    }
  }, {
    key: "go",
    value: function go() {
      return this.imp.go();
    }
  }]);
  return MxCADUiPrString;
}(MxCADUiPrBase);
var MxCADUiPrEntity = /*#__PURE__*/function (_MxCADUiPrBase7) {
  _inherits$1(MxCADUiPrEntity, _MxCADUiPrBase7);
  var _super9 = _createSuper$a(MxCADUiPrEntity);
  function MxCADUiPrEntity() {
    var _this6;
    _classCallCheck$1(this, MxCADUiPrEntity);
    _this6 = _super9.call(this, new MrxDbgUiPrPoint());
    _defineProperty(_assertThisInitialized$1(_this6), "filter", void 0);
    _defineProperty(_assertThisInitialized$1(_this6), "id", new McObjectId());
    _this6.setCursorType(MxCursorType.kRect);
    _this6.setDynamicInputType(DynamicInputType.kDynTip);
    _this6.disableAllTrace();
    return _this6;
  }
  _createClass$1(MxCADUiPrEntity, [{
    key: "setFilter",
    value: function setFilter(filter) {
      this.filter = filter;
    }
  }, {
    key: "getFilter",
    value: function getFilter() {
      return this.filter;
    }
  }, {
    key: "go",
    value: function go() {
      var _this7 = this;
      return new Promise(function (resolve) {
        var myThis = _this7;
        _this7.imp.go(function (status) {
          myThis.clearLastInputPoint();
          if (status != 0) {
            resolve(new McObjectId());
          } else {
            var pt = myThis.imp.value();
            var ptCAD = myThis.doc2cad1(pt);
            myThis.id = MxCADUtility.findEntAtPoint(ptCAD.x, ptCAD.y, ptCAD.z, -1, myThis.filter);
            resolve(myThis.id);
          }
        });
      });
    }
  }, {
    key: "pickPoint",
    value: function pickPoint() {
      return this.doc2cad1(this.imp.value());
    }
  }, {
    key: "value",
    value: function value() {
      return this.id;
    }
  }, {
    key: "getDocPickPoint",
    value: function getDocPickPoint() {
      return new McGePoint3d(this.imp.value());
    }
  }]);
  return MxCADUiPrEntity;
}(MxCADUiPrBase);

function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$a() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var McDbEntity = /*#__PURE__*/function (_McDbObject) {
  _inherits$1(McDbEntity, _McDbObject);
  var _super = _createSuper$9(McDbEntity);
  function McDbEntity(imp) {
    _classCallCheck$1(this, McDbEntity);
    return _super.call(this, imp);
  }
  _createClass$1(McDbEntity, [{
    key: "explode",
    value: function explode() {
      var retImp = this.imp.explode();
      return new MxCADResbuf(retImp);
    }
  }, {
    key: "trueColor",
    get: function get() {
      return new McCmColor(this.imp.TrueColor());
    },
    set: function set(val) {
      this.imp.SetTrueColor(val.getImp());
    }
  }, {
    key: "colorIndex",
    get: function get() {
      return this.imp.ColorIndex();
    },
    set: function set(val) {
      this.imp.SetColorIndex(val);
    }
  }, {
    key: "layer",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.Layer());
    },
    set: function set(val) {
      this.imp.SetLayer(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "linetype",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.Linetype());
    },
    set: function set(val) {
      this.imp.SetLinetype(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "linetypeScale",
    get: function get() {
      return this.imp.LinetypeScale();
    },
    set: function set(val) {
      this.imp.SetLinetypeScale(val);
    }
  }, {
    key: "visible",
    get: function get() {
      return this.imp.Visible();
    },
    set: function set(val) {
      this.imp.SetVisible(val);
    }
  }, {
    key: "lineweight",
    get: function get() {
      return this.imp.Lineweight();
    },
    set: function set(val) {
      this.imp.SetLineweight(val);
    }
  }, {
    key: "textStyle",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.TextStyle());
    },
    set: function set(val) {
      this.imp.SetTextStyle(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "highlight",
    value: function highlight(isHighlight) {
      this.imp.Highlight(isHighlight);
    }
  }, {
    key: "move",
    value: function move(fromPoint, toPoint) {
      this.tempRelationObject();
      var ret = this.imp.Move(fromPoint.imp, toPoint.imp);
      this.freeTempRelationObject();
      return ret;
    }
  }, {
    key: "rotate",
    value: function rotate(basePoint, dRotationAngle) {
      this.tempRelationObject();
      var ret = this.imp.Rotate(basePoint.imp, dRotationAngle);
      this.freeTempRelationObject();
      return ret;
    }
  }, {
    key: "mirror",
    value: function mirror(point1, point2) {
      this.tempRelationObject();
      var ret = this.imp.Mirror(point1.imp, point2.imp);
      this.freeTempRelationObject();
      return ret;
    }
  }, {
    key: "scaleEntity",
    value: function scaleEntity(basePoint, dScaleFactor) {
      this.tempRelationObject();
      var ret = this.imp.ScaleEntity(basePoint.imp, dScaleFactor);
      this.freeTempRelationObject();
      return ret;
    }
  }, {
    key: "transformBy",
    value: function transformBy(transformationMatrix) {
      return this.imp.TransformBy(transformationMatrix.imp);
    }
  }, {
    key: "getBoundingBox",
    value: function getBoundingBox() {
      var ret = this.imp.GetBoundingBox();
      if (!ret) {
        return {
          minPt: new McGePoint3d(),
          maxPt: new McGePoint3d(),
          ret: false
        };
      } else {
        if (ret.GetCount() < 2) {
          MxCpp.App.destroyObject(ret);
          return {
            minPt: new McGePoint3d(),
            maxPt: new McGePoint3d(),
            ret: false
          };
        } else {
          var retval = {
            minPt: new McGePoint3d(ret.AtPoint(0)),
            maxPt: new McGePoint3d(ret.AtPoint(1)),
            ret: true
          };
          MxCpp.App.destroyObject(ret);
          return retval;
        }
      }
    }
  }, {
    key: "getxData",
    value: function getxData() {
      var appName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return new MxCADResbuf(this.imp.GetXData(MxG2312Obj.encodeToGb2312(appName)));
    }
  }, {
    key: "setxData",
    value: function setxData(xdata) {
      return this.imp.SetXData(xdata.getImp());
    }
  }, {
    key: "getxDataString",
    value: function getxDataString(appName) {
      var str = this.imp.GetxDataString(MxG2312Obj.encodeToGb2312(appName), 0);
      return {
        val: MxG2312Obj.decodeFromGb2312(str),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "setxDataString",
    value: function setxDataString(appName, val) {
      return this.imp.SetxDataString(MxG2312Obj.encodeToGb2312(appName), 0, MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "getxDataDouble",
    value: function getxDataDouble(appName) {
      return {
        val: this.imp.GetxDataDouble(MxG2312Obj.encodeToGb2312(appName), 0),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "setxDataDouble",
    value: function setxDataDouble(appName, val) {
      return this.imp.SetxDataDouble(MxG2312Obj.encodeToGb2312(appName), 0, val);
    }
  }, {
    key: "getxDataLong",
    value: function getxDataLong(appName) {
      return {
        val: this.imp.GetxDataLong(MxG2312Obj.encodeToGb2312(appName), 0),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "setxDataLong",
    value: function setxDataLong(appName, val) {
      return this.imp.SetxDataLong(MxG2312Obj.encodeToGb2312(appName), 0, val);
    }
  }, {
    key: "getxDataPoint",
    value: function getxDataPoint(appName) {
      var retpt = this.imp.GetxDataPoint(MxG2312Obj.encodeToGb2312(appName), 0);
      var pt = new McGePoint3d();
      if (MxCpp.getCallResult() == 0) {
        var ret = false;
        if (retpt) {
          pt.x = retpt.x;
          pt.y = retpt.y;
          pt.z = retpt.z;
          MxCpp.App.getImp().DestroyMdGePoint3d(retpt);
          ret = true;
        }
        return {
          val: pt,
          ret: ret
        };
      } else {
        return {
          val: pt,
          ret: false
        };
      }
    }
  }, {
    key: "setxDataPoint",
    value: function setxDataPoint(appName, val) {
      return this.imp.SetxDataPoint(MxG2312Obj.encodeToGb2312(appName), 0, val.imp);
    }
  }, {
    key: "deleteXData",
    value: function deleteXData(appName) {
      return this.imp.DeleteXData(MxG2312Obj.encodeToGb2312(appName));
    }
  }, {
    key: "getAllAppName",
    value: function getAllAppName() {
      return new McGeStringArray(this.imp.GetAllAppName());
    }
  }, {
    key: "layerId",
    get: function get() {
      return new McObjectId(this.imp.LayerId(), McObjectIdType.kMxCAD);
    },
    set: function set(id) {
      if (id.type != McObjectIdType.kMxCAD) return;
      this.imp.SetLayerId(id.id);
    }
  }, {
    key: "linetypeId",
    get: function get() {
      return new McObjectId(this.imp.LinetypeId(), McObjectIdType.kMxCAD);
    },
    set: function set(id) {
      if (id.type != McObjectIdType.kMxCAD) return;
      this.imp.SetLinetypeId(id.id);
    }
  }, {
    key: "textStyleId",
    get: function get() {
      return new McObjectId(this.imp.TextStyleId(), McObjectIdType.kMxCAD);
    },
    set: function set(id) {
      if (id.type != McObjectIdType.kMxCAD) return;
      this.imp.SetTextStyleId(id.id);
    }
  }, {
    key: "IntersectWith",
    value: function IntersectWith(intersectObject, exOption) {
      return new McGePoint3dArray(this.imp.IntersectWith(intersectObject.imp, exOption));
    }
  }, {
    key: "getArea",
    value: function getArea() {
      var val = this.imp.getArea();
      return {
        val: val,
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "disableDisplay",
    value: function disableDisplay(isDisable) {
      this.imp.disableUpdateDisplay(isDisable);
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      this.imp.updateDisplay();
    }
  }, {
    key: "syncData",
    value: function syncData() {
      return false;
    }
  }, {
    key: "drawOrder",
    get: function get() {
      return this.imp.DrawOrder();
    },
    set: function set(order) {
      this.imp.SetDrawOrder(order);
    }
  }, {
    key: "normal",
    get: function get() {
      return new McGeVector3d(this.imp.normal());
    },
    set: function set(val) {
      this.imp.setNormal(val.imp);
    }
  }]);
  return McDbEntity;
}(McDbObject);
var McDbCurve = /*#__PURE__*/function (_McDbEntity) {
  _inherits$1(McDbCurve, _McDbEntity);
  var _super2 = _createSuper$9(McDbCurve);
  function McDbCurve(imp) {
    _classCallCheck$1(this, McDbCurve);
    return _super2.call(this, imp);
  }
  _createClass$1(McDbCurve, [{
    key: "getStartParam",
    value: function getStartParam() {
      var val = this.imp.getStartParam();
      return {
        val: val,
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getEndParam",
    value: function getEndParam() {
      return {
        val: this.imp.getEndParam(),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getDistAtParam",
    value: function getDistAtParam(param) {
      return {
        val: this.imp.getDistAtParam(param),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getParamAtDist",
    value: function getParamAtDist(dist) {
      return {
        val: this.imp.getParamAtDist(dist),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getDistAtPoint",
    value: function getDistAtPoint(pt) {
      return {
        val: this.imp.getDistAtPoint(pt.imp),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getPointAtDist",
    value: function getPointAtDist(dist) {
      return {
        val: new McGePoint3d(this.imp.getPointAtDist(dist)),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getStartPoint",
    value: function getStartPoint() {
      return {
        val: new McGePoint3d(this.imp.getStartPoint()),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getEndPoint",
    value: function getEndPoint() {
      return {
        val: new McGePoint3d(this.imp.getEndPoint()),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getPointAtParam",
    value: function getPointAtParam(param) {
      return {
        val: new McGePoint3d(this.imp.getPointAtParam(param)),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getParamAtPoint",
    value: function getParamAtPoint(pt) {
      return {
        val: this.imp.getParamAtPoint(pt.imp),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getFirstDerivFromParam",
    value: function getFirstDerivFromParam(param) {
      return {
        val: new McGeVector3d(this.imp.getFirstDeriv(param)),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getFirstDeriv",
    value: function getFirstDeriv(pt) {
      return {
        val: new McGeVector3d(this.imp.getFirstDerivEx(pt.imp)),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "getClosestPointTo",
    value: function getClosestPointTo(givenPnt, isExtend) {
      return {
        val: new McGePoint3d(this.imp.getClosestPointTo(givenPnt.imp, isExtend)),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "offsetCurves",
    value: function offsetCurves(dOffsetDist, ptOffsetRef) {
      var retImp = this.imp.offsetCurves(dOffsetDist, ptOffsetRef.imp);
      return new McDbObjectArray(retImp);
    }
  }, {
    key: "splitCurves",
    value: function splitCurves(pts) {
      var aryParam = new MxCADResbuf();
      pts.forEach(function (val) {
        aryParam.AddPoint(val);
      });
      var retImp = this.imp.splitCurves(aryParam.getImp());
      return new McDbObjectArray(retImp);
    }
  }, {
    key: "splitCurvesFromParam",
    value: function splitCurvesFromParam(params) {
      var aryParam = new MxCADResbuf();
      params.forEach(function (val) {
        aryParam.AddDouble(val);
      });
      var retImp = this.imp.splitCurves(aryParam.getImp());
      return new McDbObjectArray(retImp);
    }
  }, {
    key: "getSamplePoints",
    value: function getSamplePoints() {
      var dApproxEps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1e-4;
      var retImp = this.imp.getSamplePoints(dApproxEps);
      return new MxCADResbuf(retImp);
    }
  }, {
    key: "getLength",
    value: function getLength() {
      var val = this.imp.getLength();
      return {
        val: val,
        ret: MxCpp.getCallResult() == 0
      };
    }
  }]);
  return McDbCurve;
}(McDbEntity);
var McDbLine = /*#__PURE__*/function (_McDbCurve) {
  _inherits$1(McDbLine, _McDbCurve);
  var _super3 = _createSuper$9(McDbLine);
  function McDbLine(x1, y1, z1, x2, y2, z2) {
    var _this;
    _classCallCheck$1(this, McDbLine);
    if (x1 instanceof Object) {
      if (x1 instanceof McGePoint3d) {
        _this = _super3.call(this);
        _this.initTempObject(new MxCpp.mxcadassemblyimp.MdDbLine());
        if (y1 instanceof McGePoint3d) {
          _this.startPoint = x1;
          _this.endPoint = y1;
        }
      } else {
        _this = _super3.call(this, x1);
      }
    } else {
      _this = _super3.call(this);
      _this.initTempObject(new MxCpp.mxcadassemblyimp.MdDbLine());
      _this.startPoint = new McGePoint3d(x1, y1, z1);
      _this.endPoint = new McGePoint3d(x2, y2, z2);
    }
    return _possibleConstructorReturn$1(_this);
  }
  _createClass$1(McDbLine, [{
    key: "startPoint",
    get: function get() {
      return new McGePoint3d(this.imp.startPoint());
    },
    set: function set(pt) {
      this.imp.setStartPoint(pt.imp);
    }
  }, {
    key: "endPoint",
    get: function get() {
      return new McGePoint3d(this.imp.endPoint());
    },
    set: function set(pt) {
      this.imp.setEndPoint(pt.imp);
    }
  }]);
  return McDbLine;
}(McDbCurve);
var McDbText = /*#__PURE__*/function (_McDbEntity2) {
  _inherits$1(McDbText, _McDbEntity2);
  var _super4 = _createSuper$9(McDbText);
  function McDbText(imp) {
    var _this2;
    _classCallCheck$1(this, McDbText);
    _this2 = _super4.call(this, imp);
    if (!imp) {
      _this2.initTempObject(new MxCpp.mxcadassemblyimp.MdDbText());
    }
    return _this2;
  }
  _createClass$1(McDbText, [{
    key: "position",
    get: function get() {
      return new McGePoint3d(this.imp.position());
    },
    set: function set(pt) {
      this.imp.setPosition(pt.imp);
    }
  }, {
    key: "alignmentPoint",
    get: function get() {
      return new McGePoint3d(this.imp.position());
    },
    set: function set(pt) {
      this.imp.setAlignmentPoint(pt.imp);
    }
  }, {
    key: "oblique",
    get: function get() {
      return this.imp.oblique();
    },
    set: function set(val) {
      this.imp.setOblique(val);
    }
  }, {
    key: "rotation",
    get: function get() {
      return this.imp.rotation();
    },
    set: function set(pt) {
      this.imp.setRotation(pt);
    }
  }, {
    key: "height",
    get: function get() {
      return this.imp.height();
    },
    set: function set(val) {
      this.imp.setHeight(val);
    }
  }, {
    key: "widthFactor",
    get: function get() {
      return this.imp.widthFactor();
    },
    set: function set(val) {
      this.imp.setWidthFactor(val);
    }
  }, {
    key: "textString",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.textString());
    },
    set: function set(val) {
      this.imp.setTextString(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "horizontalMode",
    get: function get() {
      return this.imp.horizontalMode();
    },
    set: function set(val) {
      this.imp.setHorizontalMode(val);
    }
  }, {
    key: "verticalMode",
    get: function get() {
      return this.imp.verticalMode();
    },
    set: function set(val) {
      this.imp.setVerticalMode(val);
    }
  }]);
  return McDbText;
}(McDbEntity);
var McDbAttribute = /*#__PURE__*/function (_McDbText) {
  _inherits$1(McDbAttribute, _McDbText);
  var _super5 = _createSuper$9(McDbAttribute);
  function McDbAttribute(imp) {
    var _this3;
    _classCallCheck$1(this, McDbAttribute);
    _this3 = _super5.call(this, imp);
    if (!imp) {
      _this3.initTempObject(new MxCpp.mxcadassemblyimp.MdDbAttribute());
    }
    return _this3;
  }
  _createClass$1(McDbAttribute, [{
    key: "tag",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.tag());
    },
    set: function set(val) {
      this.imp.setTag(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "isInvisible",
    get: function get() {
      return this.imp.isInvisible();
    },
    set: function set(val) {
      this.imp.setInvisible(val);
    }
  }]);
  return McDbAttribute;
}(McDbText);
var McDbAttributeDefinition = /*#__PURE__*/function (_McDbText2) {
  _inherits$1(McDbAttributeDefinition, _McDbText2);
  var _super6 = _createSuper$9(McDbAttributeDefinition);
  function McDbAttributeDefinition(imp) {
    var _this4;
    _classCallCheck$1(this, McDbAttributeDefinition);
    _this4 = _super6.call(this, imp);
    if (!imp) {
      _this4.initTempObject(new MxCpp.mxcadassemblyimp.MdDbAttributeDefinition());
    }
    return _this4;
  }
  _createClass$1(McDbAttributeDefinition, [{
    key: "tag",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.tag());
    },
    set: function set(val) {
      this.imp.setTag(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "isInvisible",
    get: function get() {
      return this.imp.isInvisible();
    },
    set: function set(val) {
      this.imp.setInvisible(val);
    }
  }, {
    key: "prompt",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.prompt());
    },
    set: function set(val) {
      this.imp.setPrompt(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "isConstant",
    get: function get() {
      return this.imp.isConstant();
    },
    set: function set(val) {
      this.imp.setConstant(val);
    }
  }, {
    key: "isVerifiable",
    get: function get() {
      return this.imp.isVerifiable();
    },
    set: function set(val) {
      this.imp.setVerifiable(val);
    }
  }, {
    key: "isPreset",
    get: function get() {
      return this.imp.isPreset();
    },
    set: function set(val) {
      this.imp.setPreset(val);
    }
  }]);
  return McDbAttributeDefinition;
}(McDbText);
var McDbMText = /*#__PURE__*/function (_McDbEntity3) {
  _inherits$1(McDbMText, _McDbEntity3);
  var _super7 = _createSuper$9(McDbMText);
  function McDbMText(imp) {
    var _this5;
    _classCallCheck$1(this, McDbMText);
    _this5 = _super7.call(this, imp);
    if (!imp) {
      _this5.initTempObject(new MxCpp.mxcadassemblyimp.MdDbMText());
    }
    return _this5;
  }
  _createClass$1(McDbMText, [{
    key: "location",
    get: function get() {
      return new McGePoint3d(this.imp.location());
    },
    set: function set(pt) {
      this.imp.setLocation(pt.imp);
    }
  }, {
    key: "rotation",
    get: function get() {
      return this.imp.rotation();
    },
    set: function set(val) {
      this.imp.setRotation(val);
    }
  }, {
    key: "width",
    get: function get() {
      return this.imp.width();
    },
    set: function set(val) {
      this.imp.setWidth(val);
    }
  }, {
    key: "textHeight",
    get: function get() {
      return this.imp.textHeight();
    },
    set: function set(val) {
      this.imp.setTextHeight(val);
    }
  }, {
    key: "attachment",
    get: function get() {
      return this.imp.attachment();
    },
    set: function set(val) {
      this.imp.setAttachment(val);
    }
  }, {
    key: "contents",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.contents());
    },
    set: function set(val) {
      this.imp.setContents(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "getTextString",
    value: function getTextString() {
      return MxG2312Obj.decodeFromGb2312(this.imp.getTextString());
    }
  }, {
    key: "reCompute",
    value: function reCompute() {
      return this.imp.reCompute();
    }
  }]);
  return McDbMText;
}(McDbEntity);
var McDbCircle = /*#__PURE__*/function (_McDbCurve2) {
  _inherits$1(McDbCircle, _McDbCurve2);
  var _super8 = _createSuper$9(McDbCircle);
  function McDbCircle(x, y, z, radius) {
    var _this6;
    _classCallCheck$1(this, McDbCircle);
    if (x instanceof Object) {
      _this6 = _super8.call(this, x);
    } else {
      _this6 = _super8.call(this);
      _this6.initTempObject(new MxCpp.mxcadassemblyimp.MdDbCircle());
      if (typeof x == "number") {
        _this6.imp.setCenter(new McGePoint3d(x, y, z).imp);
        _this6.imp.setRadius(radius);
      }
    }
    return _possibleConstructorReturn$1(_this6);
  }
  _createClass$1(McDbCircle, [{
    key: "setCenter",
    value: function setCenter(x, y, z) {
      this.imp.setCenter(new McGePoint3d(x, y, z).imp);
    }
  }, {
    key: "center",
    get: function get() {
      return new McGePoint3d(this.imp.center());
    },
    set: function set(pt) {
      this.imp.setCenter(pt.imp);
    }
  }, {
    key: "radius",
    get: function get() {
      return this.imp.radius();
    },
    set: function set(r) {
      this.imp.setRadius(r);
    }
  }]);
  return McDbCircle;
}(McDbCurve);
var McDbPolyline = /*#__PURE__*/function (_McDbCurve3) {
  _inherits$1(McDbPolyline, _McDbCurve3);
  var _super9 = _createSuper$9(McDbPolyline);
  function McDbPolyline(imp) {
    var _this7;
    _classCallCheck$1(this, McDbPolyline);
    _this7 = _super9.call(this, imp);
    if (!imp) {
      _this7.initTempObject(new MxCpp.mxcadassemblyimp.MdDbPolyline());
    }
    return _this7;
  }
  _createClass$1(McDbPolyline, [{
    key: "isClosed",
    get: function get() {
      return this.imp.isClosed();
    },
    set: function set(val) {
      this.imp.setClosed(val);
    }
  }, {
    key: "constantWidth",
    get: function get() {
      return this.imp.getConstantWidth();
    },
    set: function set(val) {
      this.imp.setConstantWidth(val);
    }
  }, {
    key: "addVertexAt",
    value: function addVertexAt(pt) {
      var bulge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var startWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var endWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      if (pt instanceof THREE.Vector3) {
        var tmp = new MxCpp.mxcadassemblyimp.MdGePoint3d();
        tmp.x = pt.x;
        tmp.y = pt.y;
        tmp.z = pt.z;
        return this.imp.addVertexAt(index, tmp, bulge, startWidth, endWidth);
      } else {
        return this.imp.addVertexAt(index, pt.imp, bulge, startWidth, endWidth);
      }
    }
  }, {
    key: "removeVertexAt",
    value: function removeVertexAt(index) {
      return this.imp.removeVertexAt(index);
    }
  }, {
    key: "numVerts",
    value: function numVerts() {
      return this.imp.numVerts();
    }
  }, {
    key: "getPointAt",
    value: function getPointAt(index) {
      return {
        val: new McGePoint3d(this.imp.getPointAt(index)),
        ret: MxCpp.getCallResult()
      };
    }
  }, {
    key: "getBulgeAt",
    value: function getBulgeAt(index) {
      return this.imp.getBulgeAt(index);
    }
  }, {
    key: "getWidthsAt",
    value: function getWidthsAt(index) {
      return {
        val1: this.imp.getStartWidthsAt(index),
        val2: this.imp.getEndWidthsAt(index),
        ret: MxCpp.getCallResult() == 0
      };
    }
  }, {
    key: "setPointAt",
    value: function setPointAt(index, pt) {
      return this.imp.setPointAt(index, pt.imp);
    }
  }, {
    key: "setBulgeAt",
    value: function setBulgeAt(index, bulge) {
      return this.imp.setBulgeAt(index, bulge);
    }
  }, {
    key: "pointInPolygon",
    value: function pointInPolygon(x, y) {
      return this.imp.pointInPolygon(x, y);
    }
  }, {
    key: "setWidthsAt",
    value: function setWidthsAt(index, dStartWdith, dEntWdith) {
      return this.imp.setWidthsAt(index, dStartWdith, dEntWdith);
    }
  }, {
    key: "getType",
    value: function getType() {
      return this.imp.getType();
    }
  }, {
    key: "setType",
    value: function setType(type) {
      return this.imp.setType(type);
    }
  }]);
  return McDbPolyline;
}(McDbCurve);
var McDbBlockReference = /*#__PURE__*/function (_McDbEntity4) {
  _inherits$1(McDbBlockReference, _McDbEntity4);
  var _super10 = _createSuper$9(McDbBlockReference);
  function McDbBlockReference(imp) {
    var _this8;
    _classCallCheck$1(this, McDbBlockReference);
    _this8 = _super10.call(this, imp);
    if (!imp) {
      _this8.initTempObject(new MxCpp.mxcadassemblyimp.MdDbBlockReference());
    }
    return _this8;
  }
  _createClass$1(McDbBlockReference, [{
    key: "blockTableRecordId",
    get: function get() {
      return new McObjectId(this.imp.blockTableRecordId(), McObjectIdType.kMxCAD);
    },
    set: function set(val) {
      this.imp.setBlockTableRecordId(val.id);
    }
  }, {
    key: "position",
    get: function get() {
      return new McGePoint3d(this.imp.position());
    },
    set: function set(pt) {
      this.imp.setPosition(pt.imp);
    }
  }, {
    key: "scaleFactors",
    get: function get() {
      return new McGePoint3d(this.imp.scaleFactors());
    },
    set: function set(val) {
      this.imp.setScaleFactors(val.imp);
    }
  }, {
    key: "setScale",
    value: function setScale(val) {
      this.imp.setScaleFactors(new McGePoint3d(val, val, val).imp);
    }
  }, {
    key: "getScale",
    value: function getScale() {
      return this.imp.scaleFactors().x;
    }
  }, {
    key: "rotation",
    get: function get() {
      return this.imp.rotation();
    },
    set: function set(val) {
      this.imp.setRotation(val);
    }
  }, {
    key: "blockTransform",
    get: function get() {
      return new McGeMatrix3d(this.imp.blockTransform());
    },
    set: function set(val) {
      this.imp.setBlockTransform(val.imp);
    }
  }, {
    key: "blockName",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.getBlockName());
    }
  }, {
    key: "appendAttribute",
    value: function appendAttribute(attrib) {
      return new McObjectId(this.imp.appendAttribute(attrib.getImp()), McObjectIdType.kMxCAD);
    }
  }, {
    key: "getAllAttribute",
    value: function getAllAttribute() {
      var ret = [];
      var aryId = this.imp.getAllAttribute();
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "createAttribute",
    value: function createAttribute() {
      return this.imp.createAttribute();
    }
  }, {
    key: "getSpatialFilterId",
    value: function getSpatialFilterId() {
      return new McObjectId(this.imp.getSpatialFilterId(), McObjectIdType.kMxCAD);
    }
  }, {
    key: "createSpatialFilter",
    value: function createSpatialFilter() {
      return this.imp.createSpatialFilter();
    }
  }, {
    key: "clearSpatialFilterCache",
    value: function clearSpatialFilterCache() {
      return this.imp.clearSpatialFilterCache();
    }
  }]);
  return McDbBlockReference;
}(McDbEntity);
var McDbSpatialFilter = /*#__PURE__*/function (_McDbObject2) {
  _inherits$1(McDbSpatialFilter, _McDbObject2);
  var _super11 = _createSuper$9(McDbSpatialFilter);
  function McDbSpatialFilter(imp) {
    var _this9;
    _classCallCheck$1(this, McDbSpatialFilter);
    _this9 = _super11.call(this, imp);
    if (!imp) {
      _this9.initTempObject(new MxCpp.mxcadassemblyimp.MdDbSpatialFilter());
    }
    return _this9;
  }
  _createClass$1(McDbSpatialFilter, [{
    key: "boundary",
    value: function boundary() {
      return new McGePoint3dArray(this.imp.boundary());
    }
  }, {
    key: "setBoundary",
    value: function setBoundary(aryPoint) {
      return this.imp.setBoundary(aryPoint.imp);
    }
  }, {
    key: "isFilterInverted",
    value: function isFilterInverted() {
      return this.imp.isFilterInverted();
    }
  }, {
    key: "setFilterInverted",
    value: function setFilterInverted(val) {
      return this.imp.setFilterInverted(val);
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.imp.isEnabled();
    }
  }, {
    key: "setEnable",
    value: function setEnable(val) {
      return this.imp.setEnable(val);
    }
  }]);
  return McDbSpatialFilter;
}(McDbObject);
var McDbDimension = /*#__PURE__*/function (_McDbEntity5) {
  _inherits$1(McDbDimension, _McDbEntity5);
  var _super12 = _createSuper$9(McDbDimension);
  function McDbDimension(imp) {
    _classCallCheck$1(this, McDbDimension);
    return _super12.call(this, imp);
  }
  _createClass$1(McDbDimension, [{
    key: "textPosition",
    get: function get() {
      return new McGePoint3d(this.imp.textPosition());
    },
    set: function set(pt) {
      this.imp.setTextPosition(pt.imp);
    }
  }, {
    key: "isUsingDefaultTextPosition",
    value: function isUsingDefaultTextPosition() {
      return this.imp.isUsingDefaultTextPosition();
    }
  }, {
    key: "useSetTextPosition",
    value: function useSetTextPosition() {
      return this.imp.useSetTextPosition();
    }
  }, {
    key: "useDefaultTextPosition",
    value: function useDefaultTextPosition() {
      return this.imp.useDefaultTextPosition();
    }
  }, {
    key: "elevation",
    get: function get() {
      return this.imp.elevation();
    },
    set: function set(val) {
      this.imp.setElevation(val);
    }
  }, {
    key: "dimensionText",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.dimensionText());
    },
    set: function set(val) {
      this.imp.setDimensionText(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "textRotation",
    get: function get() {
      return this.imp.textRotation();
    },
    set: function set(val) {
      this.imp.setTextRotation(val);
    }
  }, {
    key: "dimensionStyle",
    get: function get() {
      return new McObjectId(this.imp.dimensionStyle(), McObjectIdType.kMxCAD);
    },
    set: function set(val) {
      this.imp.setDimensionStyle(val.id);
    }
  }, {
    key: "textAttachment",
    get: function get() {
      return this.imp.textAttachment();
    },
    set: function set(val) {
      this.imp.setTextAttachment(val);
    }
  }, {
    key: "needToUpdateDimBlock",
    value: function needToUpdateDimBlock(need) {
      this.imp.SetUpDimBlock(need);
    }
  }, {
    key: "horizontalRotation",
    get: function get() {
      return this.imp.horizontalRotation();
    },
    set: function set(val) {
      this.imp.setHorizontalRotation(val);
    }
  }, {
    key: "recomputeDimBlock",
    value: function recomputeDimBlock() {
      this.imp.recomputeDimBlock(true);
    }
  }, {
    key: "getDimVarInt",
    value: function getDimVarInt(iType) {
      return this.imp.GetDimVarInt(iType);
    }
  }, {
    key: "setDimVarInt",
    value: function setDimVarInt(iType, val) {
      this.imp.SetDimVarInt(iType, val);
    }
  }, {
    key: "getDimVarDouble",
    value: function getDimVarDouble(iType) {
      return this.imp.GetDimVarDouble(iType);
    }
  }, {
    key: "setDimVarDouble",
    value: function setDimVarDouble(iType, val) {
      this.imp.SetDimVarDouble(iType, val);
    }
  }, {
    key: "getDimVarString",
    value: function getDimVarString(iType) {
      return this.imp.GetDimVarString(iType);
    }
  }, {
    key: "setDimVarString",
    value: function setDimVarString(iType, val) {
      this.imp.SetDimVarString(iType, val);
    }
  }, {
    key: "getDimVarObjectId",
    value: function getDimVarObjectId(iType) {
      return new McObjectId(this.imp.GetDimVarObjectId(iType), McObjectIdType.kMxCAD);
    }
  }, {
    key: "setDimVarObjectId",
    value: function setDimVarObjectId(iType, val) {
      this.imp.SetDimVarObjectId(iType, val.id);
    }
  }, {
    key: "GetAllText",
    value: function GetAllText() {
      return new McGeStringArray(this.imp.GetAllText());
    }
  }]);
  return McDbDimension;
}(McDbEntity);
var McDbAlignedDimension = /*#__PURE__*/function (_McDbDimension) {
  _inherits$1(McDbAlignedDimension, _McDbDimension);
  var _super13 = _createSuper$9(McDbAlignedDimension);
  function McDbAlignedDimension(imp) {
    var _this10;
    _classCallCheck$1(this, McDbAlignedDimension);
    _this10 = _super13.call(this, imp);
    if (!imp) {
      _this10.initTempObject(new MxCpp.mxcadassemblyimp.MdDbAlignedDimension());
    }
    return _this10;
  }
  _createClass$1(McDbAlignedDimension, [{
    key: "xLine1Point",
    get: function get() {
      return new McGePoint3d(this.imp.xLine1Point());
    },
    set: function set(pt) {
      this.imp.setXLine1Point(pt.imp);
    }
  }, {
    key: "xLine2Point",
    get: function get() {
      return new McGePoint3d(this.imp.xLine2Point());
    },
    set: function set(pt) {
      this.imp.setXLine2Point(pt.imp);
    }
  }, {
    key: "dimLinePoint",
    get: function get() {
      return new McGePoint3d(this.imp.dimLinePoint());
    },
    set: function set(pt) {
      this.imp.setDimLinePoint(pt.imp);
    }
  }, {
    key: "oblique",
    get: function get() {
      return this.imp.oblique();
    },
    set: function set(val) {
      this.imp.setOblique(val);
    }
  }]);
  return McDbAlignedDimension;
}(McDbDimension);
var McDbRotatedDimension = /*#__PURE__*/function (_McDbDimension2) {
  _inherits$1(McDbRotatedDimension, _McDbDimension2);
  var _super14 = _createSuper$9(McDbRotatedDimension);
  function McDbRotatedDimension(imp) {
    var _this11;
    _classCallCheck$1(this, McDbRotatedDimension);
    _this11 = _super14.call(this, imp);
    if (!imp) {
      _this11.initTempObject(new MxCpp.mxcadassemblyimp.MdDbRotatedDimension());
    }
    return _this11;
  }
  _createClass$1(McDbRotatedDimension, [{
    key: "xLine1Point",
    get: function get() {
      return new McGePoint3d(this.imp.xLine1Point());
    },
    set: function set(pt) {
      this.imp.setXLine1Point(pt.imp);
    }
  }, {
    key: "xLine2Point",
    get: function get() {
      return new McGePoint3d(this.imp.xLine2Point());
    },
    set: function set(pt) {
      this.imp.setXLine2Point(pt.imp);
    }
  }, {
    key: "dimLinePoint",
    get: function get() {
      return new McGePoint3d(this.imp.dimLinePoint());
    },
    set: function set(pt) {
      this.imp.setDimLinePoint(pt.imp);
    }
  }, {
    key: "oblique",
    get: function get() {
      return this.imp.oblique();
    },
    set: function set(val) {
      this.imp.setOblique(val);
    }
  }, {
    key: "rotation",
    get: function get() {
      return this.imp.rotation();
    },
    set: function set(val) {
      this.imp.setRotation(val);
    }
  }]);
  return McDbRotatedDimension;
}(McDbDimension);
var McDb2LineAngularDimension = /*#__PURE__*/function (_McDbDimension3) {
  _inherits$1(McDb2LineAngularDimension, _McDbDimension3);
  var _super15 = _createSuper$9(McDb2LineAngularDimension);
  function McDb2LineAngularDimension(imp) {
    var _this12;
    _classCallCheck$1(this, McDb2LineAngularDimension);
    _this12 = _super15.call(this, imp);
    if (!imp) {
      _this12.initTempObject(new MxCpp.mxcadassemblyimp.MdDb2LineAngularDimension());
    }
    return _this12;
  }
  _createClass$1(McDb2LineAngularDimension, [{
    key: "arcPoint",
    get: function get() {
      return new McGePoint3d(this.imp.arcPoint());
    },
    set: function set(pt) {
      this.imp.setArcPoint(pt.imp);
    }
  }, {
    key: "xLine1Start",
    get: function get() {
      return new McGePoint3d(this.imp.xLine1Start());
    },
    set: function set(pt) {
      this.imp.setXLine1Start(pt.imp);
    }
  }, {
    key: "xLine1End",
    get: function get() {
      return new McGePoint3d(this.imp.xLine1End());
    },
    set: function set(pt) {
      this.imp.setXLine1End(pt.imp);
    }
  }, {
    key: "xLine2Start",
    get: function get() {
      return new McGePoint3d(this.imp.xLine2Start());
    },
    set: function set(pt) {
      this.imp.setXLine2Start(pt.imp);
    }
  }, {
    key: "xLine2End",
    get: function get() {
      return new McGePoint3d(this.imp.xLine2End());
    },
    set: function set(pt) {
      this.imp.setXLine2End(pt.imp);
    }
  }, {
    key: "compute",
    value: function compute(dAngleVertexX, dAngleVertexY, dFirstEndPointX, dFirstEndPointY, dSecondEndPointX, dSecondEndPointY, dTextPointX, dTextPointY) {
      return this.imp.compute(dAngleVertexX, dAngleVertexY, dFirstEndPointX, dFirstEndPointY, dSecondEndPointX, dSecondEndPointY, dTextPointX, dTextPointY);
    }
  }]);
  return McDb2LineAngularDimension;
}(McDbDimension);
var McDbArc = /*#__PURE__*/function (_McDbCurve4) {
  _inherits$1(McDbArc, _McDbCurve4);
  var _super16 = _createSuper$9(McDbArc);
  function McDbArc(imp) {
    var _this13;
    _classCallCheck$1(this, McDbArc);
    _this13 = _super16.call(this, imp);
    if (!imp) {
      _this13.initTempObject(new MxCpp.mxcadassemblyimp.MdDbArc());
    }
    return _this13;
  }
  _createClass$1(McDbArc, [{
    key: "setCenter",
    value: function setCenter(x, y, z) {
      this.imp.setCenter(new McGePoint3d(x, y, z).imp);
    }
  }, {
    key: "center",
    get: function get() {
      return new McGePoint3d(this.imp.center());
    },
    set: function set(pt) {
      this.imp.setCenter(pt.imp);
    }
  }, {
    key: "radius",
    get: function get() {
      return this.imp.radius();
    },
    set: function set(r) {
      this.imp.setRadius(r);
    }
  }, {
    key: "startAngle",
    get: function get() {
      return this.imp.startAngle();
    },
    set: function set(r) {
      this.imp.setStartAngle(r);
    }
  }, {
    key: "endAngle",
    get: function get() {
      return this.imp.endAngle();
    },
    set: function set(r) {
      this.imp.setEndAngle(r);
    }
  }, {
    key: "computeArc",
    value: function computeArc(dStartPointX, dStartPointY, dMidPointX, dMidPointY, dEndPointX, dEndPointY) {
      return this.imp.computeArc(dStartPointX, dStartPointY, dMidPointX, dMidPointY, dEndPointX, dEndPointY);
    }
  }]);
  return McDbArc;
}(McDbCurve);
var McDbEllipse = /*#__PURE__*/function (_McDbCurve5) {
  _inherits$1(McDbEllipse, _McDbCurve5);
  var _super17 = _createSuper$9(McDbEllipse);
  function McDbEllipse(cenx, ceny, cenz, majorAxisx, majorAxisy, majorAxisz, radiusRatio, startAngle, endAngle) {
    var _this14;
    _classCallCheck$1(this, McDbEllipse);
    if (cenx instanceof Object) {
      _this14 = _super17.call(this, cenx);
    } else {
      _this14 = _super17.call(this);
      _this14.initTempObject(new MxCpp.mxcadassemblyimp.MdDbEllipse());
      if (typeof cenx == "number") {
        if (!radiusRatio) radiusRatio = 1;
        if (typeof startAngle != "number") {
          startAngle = 0;
        }
        if (typeof endAngle != "number") {
          endAngle = Math.PI * 2;
        }
        _this14.imp.InitData(new McGePoint3d(cenx, ceny, cenz).imp, new McGeVector3d(majorAxisx, majorAxisy, majorAxisz).imp, radiusRatio, startAngle, endAngle);
      }
    }
    return _possibleConstructorReturn$1(_this14);
  }
  _createClass$1(McDbEllipse, [{
    key: "setCenter",
    value: function setCenter(x, y, z) {
      this.imp.setCenter(new McGePoint3d(x, y, z).imp);
    }
  }, {
    key: "center",
    get: function get() {
      return new McGePoint3d(this.imp.center());
    },
    set: function set(pt) {
      this.imp.setCenter(pt.imp);
    }
  }, {
    key: "setMajorAxis",
    value: function setMajorAxis(x, y, z) {
      this.imp.setMajorAxis(new McGeVector3d(x, y, z).imp);
    }
  }, {
    key: "majorAxis",
    get: function get() {
      return new McGeVector3d(this.imp.majorAxis());
    },
    set: function set(pt) {
      this.imp.setMajorAxis(pt.imp);
    }
  }, {
    key: "setMinorAxis",
    value: function setMinorAxis(x, y, z) {
      this.imp.setMinorAxis(new McGeVector3d(x, y, z).imp);
    }
  }, {
    key: "minorAxis",
    get: function get() {
      return new McGeVector3d(this.imp.minorAxis());
    },
    set: function set(pt) {
      this.imp.setMinorAxis(pt.imp);
    }
  }, {
    key: "radiusRatio",
    get: function get() {
      return this.imp.radiusRatio();
    },
    set: function set(val) {
      this.imp.setRadiusRatio(val);
    }
  }, {
    key: "startAngle",
    get: function get() {
      return this.imp.startAngle();
    },
    set: function set(val) {
      this.imp.setStartAngle(val);
    }
  }, {
    key: "endAngle",
    get: function get() {
      return this.imp.endAngle();
    },
    set: function set(val) {
      this.imp.setEndAngle(val);
    }
  }]);
  return McDbEllipse;
}(McDbCurve);
var McDbPoint = /*#__PURE__*/function (_McDbEntity6) {
  _inherits$1(McDbPoint, _McDbEntity6);
  var _super18 = _createSuper$9(McDbPoint);
  function McDbPoint(x, y, z) {
    var _this15;
    _classCallCheck$1(this, McDbPoint);
    if (x instanceof Object) {
      if (x instanceof McGePoint3d) {
        _this15 = _super18.call(this);
        _this15.initTempObject(new MxCpp.mxcadassemblyimp.MdDbPoint());
        _this15.imp.setPosition(x.imp);
      } else {
        _this15 = _super18.call(this, x);
      }
    } else {
      _this15 = _super18.call(this);
      _this15.initTempObject(new MxCpp.mxcadassemblyimp.MdDbPoint());
      if (typeof x == "number") {
        _this15.imp.setPosition(new McGePoint3d(x, y, z).imp);
      }
    }
    return _possibleConstructorReturn$1(_this15);
  }
  _createClass$1(McDbPoint, [{
    key: "setPosition",
    value: function setPosition(x, y, z) {
      this.imp.setPosition(new McGePoint3d(x, y, z).imp);
    }
  }, {
    key: "position",
    get: function get() {
      return new McGePoint3d(this.imp.position());
    },
    set: function set(pt) {
      this.imp.setPosition(pt.imp);
    }
  }]);
  return McDbPoint;
}(McDbEntity);
var McDbHatch = /*#__PURE__*/function (_McDbEntity7) {
  _inherits$1(McDbHatch, _McDbEntity7);
  var _super19 = _createSuper$9(McDbHatch);
  function McDbHatch(x) {
    var _this16;
    _classCallCheck$1(this, McDbHatch);
    if (x instanceof Object) {
      _this16 = _super19.call(this, x);
    } else {
      _this16 = _super19.call(this);
      _this16.initTempObject(new MxCpp.mxcadassemblyimp.MdDbHatch());
    }
    return _possibleConstructorReturn$1(_this16);
  }
  _createClass$1(McDbHatch, [{
    key: "numLoops",
    get: function get() {
      return this.imp.numLoops();
    }
  }, {
    key: "loopTypeAt",
    value: function loopTypeAt(loopIndex) {
      return this.imp.loopTypeAt(loopIndex);
    }
  }, {
    key: "getLoopAt",
    value: function getLoopAt(loopIndex) {
      var ret = this.imp.getLoopAt(loopIndex);
      if (!ret) return {
        ret: false,
        lootype: 0,
        vertices: [],
        bulges: []
      };
      var count = ret.GetCount();
      if (count <= 0) {
        MxCpp.App.destroyObject(ret);
        return {
          ret: false,
          lootype: 0,
          vertices: [],
          bulges: []
        };
      }
      var lootype = 0;
      lootype = ret.Atlong(0);
      var vertices = [];
      var bulges = [];
      var i = 1;
      for (; i + 1 < count; i += 2) {
        vertices.push(new McGePoint3d(ret.AtPoint(i)));
        bulges.push(ret.AtDouble(i + 1));
      }
      MxCpp.App.destroyObject(ret);
      return {
        ret: true,
        lootype: lootype,
        vertices: vertices,
        bulges: bulges
      };
    }
  }, {
    key: "patternType",
    value: function patternType() {
      return this.imp.patternType();
    }
  }, {
    key: "patternName",
    value: function patternName() {
      return MxG2312Obj.decodeFromGb2312(this.imp.patternName());
    }
  }, {
    key: "setPattern",
    value: function setPattern(type, patName) {
      this.imp.setPattern(type, MxG2312Obj.encodeToGb2312(patName));
    }
  }, {
    key: "patternAngle",
    get: function get() {
      return this.imp.patternAngle();
    },
    set: function set(angle) {
      this.imp.setPatternAngle(angle);
    }
  }, {
    key: "patternScale",
    get: function get() {
      return this.imp.patternScale();
    },
    set: function set(scale) {
      this.imp.setPatternScale(scale);
    }
  }, {
    key: "patternSpace",
    get: function get() {
      return this.imp.patternSpace();
    },
    set: function set(space) {
      this.imp.setPatternSpace(space);
    }
  }, {
    key: "patternDouble",
    get: function get() {
      return this.imp.patternDouble();
    },
    set: function set(isDouble) {
      this.imp.setPatternDouble(isDouble);
    }
  }, {
    key: "numPatternDefinitions",
    get: function get() {
      return this.imp.numPatternDefinitions();
    }
  }, {
    key: "getPatternDefinitionAt",
    value: function getPatternDefinitionAt(index) {
      var ret = this.imp.getPatternDefinitionAt(index);
      if (!ret) return {
        ret: false,
        angle: 0,
        baseX: 0,
        baseY: 0,
        offsetX: 0,
        offsetY: 0,
        aryDashes: []
      };
      var len = ret.length();
      if (len < 5) {
        MxCpp.App.getImp().DestroyMdGeDoubleArray(ret);
        return {
          ret: false,
          angle: 0,
          baseX: 0,
          baseY: 0,
          offsetX: 0,
          offsetY: 0,
          aryDashes: []
        };
      }
      var angle = ret.at(0);
      var baseX = ret.at(1);
      var baseY = ret.at(2);
      var offsetX = ret.at(3);
      var offsetY = ret.at(4);
      var aryDashes = [];
      for (var i = 5; i < len; i++) {
        aryDashes.push(ret.at(i));
      }
      MxCpp.App.getImp().DestroyMdGeDoubleArray(ret);
      return {
        ret: false,
        angle: angle,
        baseX: baseX,
        baseY: baseY,
        offsetX: offsetX,
        offsetY: offsetY,
        aryDashes: aryDashes
      };
    }
  }, {
    key: "addPatternDefinition",
    value: function addPatternDefinition(angle, baseX, baseY, offsetX, offsetY, dashes) {
      var aryDashes = new McGeDoubleArray();
      dashes.forEach(function (val) {
        aryDashes.append(val);
      });
      return this.imp.addPatternDefinition(angle, baseX, baseY, offsetX, offsetY, aryDashes.imp);
    }
  }, {
    key: "clearPatternDefinition",
    value: function clearPatternDefinition() {
      return this.imp.clearPatternDefinition();
    }
  }, {
    key: "hatchStyle",
    value: function hatchStyle() {
      return this.imp.hatchStyle();
    }
  }, {
    key: "setHatchStyle",
    value: function setHatchStyle(val) {
      return this.imp.setHatchStyle(val);
    }
  }, {
    key: "appendLoop",
    value: function appendLoop(vertices) {
      var bulges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var loopType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : McDb.HatchLoopType.kPolyline;
      var aryBulges = new McGeDoubleArray();
      bulges.forEach(function (val) {
        aryBulges.append(val);
      });
      return this.imp.appendLoop(loopType, vertices.imp, aryBulges.imp);
    }
  }, {
    key: "appendCircleLoop",
    value: function appendCircleLoop(dCenX, dCenY, dR) {
      var dPrecision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var loopType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : McDb.HatchLoopType.kPolyline;
      return this.imp.appendCircleLoop(loopType, dCenX, dCenY, 0, dR, dPrecision);
    }
  }, {
    key: "removeLoopAt",
    value: function removeLoopAt(loopIndex) {
      return this.imp.removeLoopAt(loopIndex);
    }
  }, {
    key: "removeAllLoop",
    value: function removeAllLoop() {
      return this.imp.removeAllLoop();
    }
  }, {
    key: "setLoopAt",
    value: function setLoopAt(loopIndex, vertices, bulges) {
      var loopType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : McDb.HatchLoopType.kPolyline;
      var aryBulges = new McGeDoubleArray();
      bulges.forEach(function (val) {
        aryBulges.append(val);
      });
      return this.imp.setLoopAt(loopIndex, loopType, vertices.imp, aryBulges.imp);
    }
  }, {
    key: "isSolid",
    value: function isSolid() {
      return this.imp.isSolid();
    }
  }, {
    key: "scalePattern",
    value: function scalePattern(scale) {
      return this.imp.scalePattern(scale);
    }
  }]);
  return McDbHatch;
}(McDbEntity);
var McDbProxyEntity = /*#__PURE__*/function (_McDbEntity8) {
  _inherits$1(McDbProxyEntity, _McDbEntity8);
  var _super20 = _createSuper$9(McDbProxyEntity);
  function McDbProxyEntity(x) {
    var _this17;
    _classCallCheck$1(this, McDbProxyEntity);
    if (x instanceof Object) {
      _this17 = _super20.call(this, x);
    } else {
      _this17 = _super20.call(this);
      _this17.initTempObject(new MxCpp.mxcadassemblyimp.MdDbProxyEntity());
    }
    return _possibleConstructorReturn$1(_this17);
  }
  _createClass$1(McDbProxyEntity, [{
    key: "getAllTextContent",
    value: function getAllTextContent() {
      return new McGeStringArray(this.imp.getAllTextContent());
    }
  }, {
    key: "getAllEntityIds",
    value: function getAllEntityIds() {
      var ret = [];
      var aryId = this.imp.getAllEntityIds();
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "getOriginalClassName",
    value: function getOriginalClassName() {
      return this.imp.getOriginalClassName();
    }
  }]);
  return McDbProxyEntity;
}(McDbEntity);
var McDbRasterImage = /*#__PURE__*/function (_McDbEntity9) {
  _inherits$1(McDbRasterImage, _McDbEntity9);
  var _super21 = _createSuper$9(McDbRasterImage);
  function McDbRasterImage(x) {
    var _this18;
    _classCallCheck$1(this, McDbRasterImage);
    if (x instanceof Object) {
      _this18 = _super21.call(this, x);
    } else {
      _this18 = _super21.call(this);
      _this18.initTempObject(new MxCpp.mxcadassemblyimp.MdDbRasterImage());
    }
    return _possibleConstructorReturn$1(_this18);
  }
  _createClass$1(McDbRasterImage, [{
    key: "setOrientation",
    value: function setOrientation(origin, uCorner, vOnPlane) {
      return this.imp.setOrientation(origin.imp, uCorner.imp, vOnPlane.imp);
    }
  }, {
    key: "getOrientation",
    value: function getOrientation() {
      var aryPoint = this.imp.getOrientation();
      if (aryPoint.length() < 3) {
        return {
          origin: new McGePoint3d(),
          uCorner: McGeVector3d.kXAxis.clone(),
          vOnPlane: McGeVector3d.kYAxis.clone()
        };
      }
      var pt0 = new McGePoint3d(aryPoint.at(0));
      var pt1 = new McGeVector3d(aryPoint.at(1));
      var pt2 = new McGeVector3d(aryPoint.at(2));
      return {
        origin: pt0,
        uCorner: pt1,
        vOnPlane: pt2
      };
    }
  }, {
    key: "setDwgImageSize",
    value: function setDwgImageSize(width, height) {
      return this.imp.setImageSize(width, height);
    }
  }, {
    key: "getDwgImageSize",
    value: function getDwgImageSize() {
      var size = this.imp.getImageSize();
      return [size.x, size.y];
    }
  }, {
    key: "setImageDefId",
    value: function setImageDefId(imageId) {
      if (imageId.type == McObjectIdType.kMxCAD) this.imp.setImageDefId(imageId.id);
    }
  }, {
    key: "imageDefId",
    value: function imageDefId() {
      return new McObjectId(this.imp.imageDefId(), McObjectIdType.kMxCAD);
    }
  }, {
    key: "setClipBoundary",
    value: function setClipBoundary(type, aryPoint) {
      return this.imp.setClipBoundary(type, aryPoint.imp);
    }
  }, {
    key: "clipBoundary",
    value: function clipBoundary() {
      return new McGePoint3dArray(this.imp.clipBoundary());
    }
  }, {
    key: "clipBoundaryType",
    value: function clipBoundaryType() {
      return this.imp.clipBoundaryType();
    }
  }]);
  return McDbRasterImage;
}(McDbEntity);
var McDbWipeout = /*#__PURE__*/function (_McDbEntity10) {
  _inherits$1(McDbWipeout, _McDbEntity10);
  var _super22 = _createSuper$9(McDbWipeout);
  function McDbWipeout(x) {
    var _this19;
    _classCallCheck$1(this, McDbWipeout);
    if (x instanceof Object) {
      _this19 = _super22.call(this, x);
    } else {
      _this19 = _super22.call(this);
      _this19.initTempObject(new MxCpp.mxcadassemblyimp.MdDbWipeout());
    }
    return _possibleConstructorReturn$1(_this19);
  }
  _createClass$1(McDbWipeout, [{
    key: "setVertices",
    value: function setVertices(aryPoint) {
      return this.imp.setVertices(aryPoint.imp);
    }
  }, {
    key: "getVertices",
    value: function getVertices() {
      return new McGePoint3dArray(this.imp.getVertices());
    }
  }]);
  return McDbWipeout;
}(McDbEntity);
var McDbBackgroundEntity = /*#__PURE__*/function (_McDbEntity11) {
  _inherits$1(McDbBackgroundEntity, _McDbEntity11);
  var _super23 = _createSuper$9(McDbBackgroundEntity);
  function McDbBackgroundEntity(x) {
    _classCallCheck$1(this, McDbBackgroundEntity);
    return _super23.call(this, x);
  }
  _createClass$1(McDbBackgroundEntity, [{
    key: "setShow",
    value: function setShow(sDwgFile, isShow) {
      return this.imp.setShow(MxG2312Obj.encodeToGb2312(sDwgFile), isShow);
    }
  }, {
    key: "isShow",
    value: function isShow(sDwgFile) {
      return this.imp.isShow(MxG2312Obj.encodeToGb2312(sDwgFile));
    }
  }, {
    key: "setShowColor",
    value: function setShowColor(sDwgFile, lColor) {
      return this.imp.setShowColor(MxG2312Obj.encodeToGb2312(sDwgFile), lColor);
    }
  }, {
    key: "getBackgroundDatabase",
    value: function getBackgroundDatabase(sDwgFile) {
      var impDatabase = this.imp.getBackgroundDatabase(MxG2312Obj.encodeToGb2312(sDwgFile));
      if (impDatabase.isNull()) {
        MxCpp.App.destroyObject(impDatabase);
        return null;
      }
      return new McDbDatabase(impDatabase);
    }
  }, {
    key: "clearAll",
    value: function clearAll() {
      return this.imp.clearAll();
    }
  }, {
    key: "clearDwg",
    value: function clearDwg(sDwgFile) {
      return this.imp.clearDwg(MxG2312Obj.encodeToGb2312(sDwgFile));
    }
  }]);
  return McDbBackgroundEntity;
}(McDbEntity);
var McDbSpline = /*#__PURE__*/function (_McDbCurve6) {
  _inherits$1(McDbSpline, _McDbCurve6);
  var _super24 = _createSuper$9(McDbSpline);
  function McDbSpline(imp) {
    var _this20;
    _classCallCheck$1(this, McDbSpline);
    _this20 = _super24.call(this, imp);
    if (!imp) {
      _this20.initTempObject(new MxCpp.mxcadassemblyimp.MdDbSpline());
    }
    return _this20;
  }
  _createClass$1(McDbSpline, [{
    key: "getNurbsData",
    value: function getNurbsData() {
      var param = this.imp.GetNurbsDataParam();
      var degree = param.Atlong(0);
      var rational = param.Atlong(1) == 1;
      var closed = param.Atlong(2) == 1;
      var periodic = param.Atlong(3) == 1;
      var controlPtTol = param.AtDouble(4);
      var knotTol = param.AtDouble(5);
      MxCpp.App.destroyObject(param);
      var controlPoints = new McGePoint3dArray(this.imp.GetControlPoints(), true);
      var knots = new McGeDoubleArray(this.imp.GetKnots(), true);
      var weights = new McGeDoubleArray(this.imp.GetWeights(), true);
      return {
        degree: degree,
        rational: rational,
        closed: closed,
        periodic: periodic,
        controlPoints: controlPoints,
        knots: knots,
        weights: weights,
        controlPtTol: controlPtTol,
        knotTol: knotTol
      };
    }
  }, {
    key: "setNurbsData",
    value: function setNurbsData(data) {
      var param = new MxCADResbuf();
      param.AddLong(data.degree);
      param.AddLong(data.rational ? 1 : 0);
      param.AddLong(data.closed ? 1 : 0);
      param.AddLong(data.periodic ? 1 : 0);
      param.AddDouble(data.controlPtTol);
      param.AddDouble(data.knotTol);
      this.imp.SetNurbsData(param.getImp(), data.controlPoints.imp, data.knots.imp, data.weights.imp);
      return true;
    }
  }, {
    key: "getFitPoints",
    value: function getFitPoints() {
      var param = this.imp.GetFitDataParam();
      var degree = param.Atlong(0);
      var fitTolerance = param.AtDouble(1);
      var tangentsExist = param.Atlong(2) == 1;
      var startTangent_pt = param.AtPoint(3);
      var endTangent_pt = param.AtPoint(4);
      var startTangent = new McGeVector3d(startTangent_pt.x, startTangent_pt.y, startTangent_pt.z);
      var endTangent = new McGeVector3d(endTangent_pt.x, endTangent_pt.y, endTangent_pt.z);
      MxCpp.App.destroyObject(param);
      var fitPoints = new McGePoint3dArray(this.imp.GeFitPoints(), true);
      return {
        degree: degree,
        fitTolerance: fitTolerance,
        tangentsExist: tangentsExist,
        startTangent: startTangent,
        endTangent: endTangent,
        fitPoints: fitPoints
      };
    }
  }, {
    key: "setFitPoints",
    value: function setFitPoints(data) {
      var param = new MxCADResbuf();
      param.AddLong(data.degree);
      param.AddDouble(data.fitTolerance);
      param.AddLong(data.tangentsExist ? 1 : 0);
      param.AddPoint(new McGePoint3d(data.startTangent.x, data.startTangent.y, data.startTangent.z));
      param.AddPoint(new McGePoint3d(data.endTangent.x, data.endTangent.y, data.endTangent.z));
      this.imp.SetFitData(param.getImp(), data.fitPoints.imp);
      return true;
    }
  }]);
  return McDbSpline;
}(McDbCurve);

function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var MxCADCloneType = /* @__PURE__ */function (MxCADCloneType2) {
  MxCADCloneType2[MxCADCloneType2["kClone"] = 1] = "kClone";
  MxCADCloneType2[MxCADCloneType2["kDragClone"] = 2] = "kDragClone";
  MxCADCloneType2[MxCADCloneType2["kCPPClone"] = 3] = "kCPPClone";
  return MxCADCloneType2;
}(MxCADCloneType || {});
var MxCADWorldDrawType = /* @__PURE__ */function (MxCADWorldDrawType2) {
  MxCADWorldDrawType2[MxCADWorldDrawType2["kWorldDraw"] = 1] = "kWorldDraw";
  MxCADWorldDrawType2[MxCADWorldDrawType2["kExplodeDraw"] = 2] = "kExplodeDraw";
  return MxCADWorldDrawType2;
}(MxCADWorldDrawType || {});
var IMcDbDwgFiler = /*#__PURE__*/function () {
  function IMcDbDwgFiler(type) {
    _classCallCheck$1(this, IMcDbDwgFiler);
    _defineProperty(this, "type", 1 /* kClone */);

    this.type = type;
  }
  _createClass$1(IMcDbDwgFiler, [{
    key: "getType",
    value: function getType() {
      return this.type;
    }
  }, {
    key: "writePoints",
    value: function writePoints(name, vals) {
      var _this = this;
      this.writeLong(name + "_n", vals.length);
      vals.forEach(function (val, index) {
        _this.writePoint(name + "_" + index, val);
      });
    }
  }, {
    key: "readPoints",
    value: function readPoints(name) {
      var vals = [];
      var point_num = this.readLong(name + "_n");
      if (point_num.ret) {
        for (var i = 0; i < point_num.val; i++) {
          var pt = this.readPoint(name + "_" + i);
          if (pt.ret) vals.push(pt.val);
        }
      }
      return {
        val: vals,
        ret: true
      };
    }
  }]);
  return IMcDbDwgFiler;
}();
var McDbDwgFiler = /*#__PURE__*/function (_IMcDbDwgFiler) {
  _inherits$1(McDbDwgFiler, _IMcDbDwgFiler);
  var _super = _createSuper$8(McDbDwgFiler);
  function McDbDwgFiler() {
    var _this2;
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    _classCallCheck$1(this, McDbDwgFiler);
    _this2 = _super.call(this, type);
    _defineProperty(_assertThisInitialized$1(_this2), "data", {});
    return _this2;
  }
  _createClass$1(McDbDwgFiler, [{
    key: "writePoint",
    value: function writePoint(name, pt) {
      this.data[name] = pt.clone();
    }
  }, {
    key: "readPoint",
    value: function readPoint(name) {
      if (this.data[name] && this.data[name] instanceof McGePoint3d) {
        return {
          val: this.data[name],
          ret: true
        };
      } else {
        return {
          val: new McGePoint3d(0, 0, 0),
          ret: false
        };
      }
    }
  }, {
    key: "writeLong",
    value: function writeLong(name, val) {
      this.data[name] = val;
    }
  }, {
    key: "readLong",
    value: function readLong(name) {
      if (this.data[name] && typeof this.data[name] === "number") {
        return {
          val: this.data[name],
          ret: true
        };
      } else {
        return {
          val: 0,
          ret: false
        };
      }
    }
  }, {
    key: "writeDouble",
    value: function writeDouble(name, val) {
      this.data[name] = val;
    }
  }, {
    key: "readDouble",
    value: function readDouble(name) {
      if (this.data[name] && typeof this.data[name] === "number") {
        return {
          val: this.data[name],
          ret: true
        };
      } else {
        return {
          val: 0,
          ret: false
        };
      }
    }
  }, {
    key: "writeString",
    value: function writeString(name, val) {
      this.data[name] = val;
    }
  }, {
    key: "readString",
    value: function readString(name) {
      if (this.data[name] && typeof this.data[name] === "string") {
        return {
          val: this.data[name],
          ret: true
        };
      } else {
        return {
          val: "",
          ret: false
        };
      }
    }
  }]);
  return McDbDwgFiler;
}(IMcDbDwgFiler);
var MxCADWorldDraw = /*#__PURE__*/function () {
  function MxCADWorldDraw(lPtrWorldDraw) {
    _classCallCheck$1(this, MxCADWorldDraw);
    _defineProperty(this, "imp", void 0);
    _defineProperty(this, "type", 1 /* kWorldDraw */);

    this.imp = new MxCpp.mxcadassemblyimp.MdGiWorldDraw(lPtrWorldDraw);
  }
  _createClass$1(MxCADWorldDraw, [{
    key: "drawEntity",
    value: function drawEntity(entity) {
      this.imp.drawEntity(entity.imp);
    }
  }, {
    key: "drawOsnapEntity",
    value: function drawOsnapEntity(entity) {
      this.imp.drawOsnapEntity(entity.imp);
    }
  }, {
    key: "trueColor",
    get: function get() {
      return new McCmColor(this.imp.trueColor());
    },
    set: function set(val) {
      this.imp.setTrueColor(val.getImp());
    }
  }, {
    key: "getType",
    value: function getType() {
      return this.type;
    }
  }, {
    key: "initType",
    value: function initType(type) {
      this.type = type;
    }
  }]);
  return MxCADWorldDraw;
}();
var McDbCustomEntity = /*#__PURE__*/function (_McDbEntity) {
  _inherits$1(McDbCustomEntity, _McDbEntity);
  var _super2 = _createSuper$8(McDbCustomEntity);
  function McDbCustomEntity(imp) {
    var _this3;
    _classCallCheck$1(this, McDbCustomEntity);
    if (imp instanceof Object) {
      _this3 = _super2.call(this, imp);
    } else {
      _this3 = _super2.call(this);
      _this3.initTempObject(new MxCpp.mxcadassemblyimp.MdDbCustomEntity(_this3.getTypeName()));
    }
    return _possibleConstructorReturn$1(_this3);
  }
  _createClass$1(McDbCustomEntity, [{
    key: "rxInit",
    value: function rxInit() {
      MxCustomEntityManager.rxInit(this);
    }
  }, {
    key: "clone",
    value: function clone() {
      var type = 1 /* kClone */;
      var ret = this.create();
      var filter = new McDbDwgFiler(type);
      this.dwgOutFields(filter);
      ret.dwgInFields(filter);
      return ret;
    }
  }, {
    key: "syncData",
    value: function syncData() {
      var toCpp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (toCpp) {
        var impFilter = this.imp.getFilter(true);
        var filter = new McDbDwgFilerCpp(impFilter);
        this.dwgOutFields(filter);
        MxCpp.App.getImp().DestroyMdDbCustomEntityDwgFiler(impFilter);
      } else {
        var _impFilter = this.imp.getFilter(false);
        var _filter = new McDbDwgFilerCpp(_impFilter);
        this.dwgInFields(_filter);
        MxCpp.App.getImp().DestroyMdDbCustomEntityDwgFiler(_impFilter);
      }
      return true;
    }
  }, {
    key: "tempRelationObject",
    value: function tempRelationObject() {
      return MxCustomEntityManager.tmpRelationObject(this);
    }
  }, {
    key: "freeTempRelationObject",
    value: function freeTempRelationObject() {
      MxCustomEntityManager.freeTmpObject(this);
    }
  }, {
    key: "assertWrite",
    value: function assertWrite() {
      var autoUndo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.imp.assertWrite(autoUndo, true, true, true, false);
    }
  }, {
    key: "moveGripPointsAt",
    value: function moveGripPointsAt(_iIndex, _dXOffset, _dYOffset, _dZOffset) {}
  }, {
    key: "getGripPoints",
    value: function getGripPoints() {
      return new McGePoint3dArray();
    }
  }, {
    key: "transformBy",
    value: function transformBy(_mat) {
      return false;
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.getTypeName();
    }
  }]);
  return McDbCustomEntity;
}(McDbEntity);

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var MxCustomEntityManagerImp = /*#__PURE__*/function () {
  function MxCustomEntityManagerImp() {
    _classCallCheck$1(this, MxCustomEntityManagerImp);
    _defineProperty(this, "mapType2Create", /* @__PURE__ */new Map());
    _defineProperty(this, "mapId2DatabaseMap", {});
    _defineProperty(this, "alloc_id", 1);
    _defineProperty(this, "alloc_tempid", 1);
    _defineProperty(this, "mapTempId2Entity", /* @__PURE__ */new Map());
  }
  _createClass$1(MxCustomEntityManagerImp, [{
    key: "rxInit",
    value: function rxInit(customEntity) {
      var typeName = customEntity.getTypeName();
      if (this.mapType2Create.get(typeName)) {
        console.error("MxCADError:already has this class name " + typeName);
      }
      this.mapType2Create.set(typeName, customEntity);
    }
  }, {
    key: "tmpRelationObject",
    value: function tmpRelationObject(ent) {
      if (this.alloc_tempid > 9007199254740900) {
        this.alloc_tempid = 1;
      }
      this.alloc_tempid += 1;
      ent.imp.setCustomEntityTempid(this.alloc_tempid);
      this.mapTempId2Entity.set(this.alloc_tempid, ent);
      return this.alloc_tempid;
    }
  }, {
    key: "freeTmpObject",
    value: function freeTmpObject(ent) {
      if (typeof ent == "number") {
        this.mapTempId2Entity.delete(ent);
      } else {
        var id = ent.imp.getCustomEntityTempid();
        ent.imp.setCustomEntityTempid(0);
        this.mapTempId2Entity.delete(id);
      }
    }
  }, {
    key: "getTmpObject",
    value: function getTmpObject(id) {
      return this.mapTempId2Entity.get(id);
    }
  }, {
    key: "allocId",
    value: function allocId() {
      if (this.alloc_id > 9007199254740900) {
        this.alloc_id = 1;
      }
      this.alloc_id += 1;
      return this.alloc_id;
    }
  }, {
    key: "isHaveType",
    value: function isHaveType(typeName) {
      return this.mapType2Create.has(typeName);
    }
  }, {
    key: "createMxEntity",
    value: function createMxEntity(typeName, imp) {
      if (typeName.length == 0) {
        console.log("MxTip:assert(0) typeName is empty ");
        return null;
      }
      var create = this.mapType2Create.get(typeName);
      if (!create) {
        console.error("mx: error crate,no type name:" + typeName);
        return null;
      }
      var ret = create.create(imp);
      if (ret.getTypeName() != typeName) {
        console.error("mx: error crate Type:" + typeName + "," + ret.getTypeName());
      }
      return ret;
    }
  }, {
    key: "relationObject",
    value: function relationObject(idIndex, indexIdDatabase) {
      if (indexIdDatabase == 0) return 0;
      var customid = this.allocId();
      var mapDatabase = this.mapId2DatabaseMap[indexIdDatabase];
      if (!mapDatabase) {
        mapDatabase = /* @__PURE__ */new Map();
        this.mapId2DatabaseMap[indexIdDatabase] = mapDatabase;
      }
      mapDatabase.set(customid, {
        idIndex: idIndex,
        init: false,
        customEntity: null
      });
      return customid;
    }
  }, {
    key: "freeObject",
    value: function freeObject(customid) {
      var indexIdDatabase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (indexIdDatabase != 0) {
        var mapDatabase = this.mapId2DatabaseMap[indexIdDatabase];
        if (!mapDatabase) return;
        mapDatabase.delete(customid);
        return;
      } else {
        for (var key in this.mapId2DatabaseMap) {
          var _mapDatabase = this.mapId2DatabaseMap[key];
          _mapDatabase.delete(customid);
        }
      }
    }
  }, {
    key: "freeDatabase",
    value: function freeDatabase(indexIdDatabase) {
      if (this.mapId2DatabaseMap.hasOwnProperty(indexIdDatabase)) delete this.mapId2DatabaseMap[indexIdDatabase];
    }
  }, {
    key: "getObjectFormId",
    value: function getObjectFormId(id) {
      if (!id.isValid()) return null;
      if (id.type == McObjectIdType.kMxCAD) {
        if (MxCpp.App.objectIdIsKindOf(id.id, "McDbCustomEntity")) {
          return MxCpp.App.objectIdToObject(id.id);
        }
      }
      return null;
    }
  }, {
    key: "getObject",
    value: function getObject(customid) {
      var indexIdDatabase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (customid == 0) return null;
      var data = void 0;
      if (indexIdDatabase != 0) {
        var mapDatabase = this.mapId2DatabaseMap[indexIdDatabase];
        if (!mapDatabase) return null;
        data = mapDatabase.get(customid);
      } else {
        for (var key in this.mapId2DatabaseMap) {
          var _mapDatabase2 = this.mapId2DatabaseMap[key];
          data = _mapDatabase2.get(customid);
          if (data) {
            indexIdDatabase = parseInt(key);
            break;
          }
        }
      }
      if (!data) return null;
      if (data.customEntity) {
        return data.customEntity;
      }
      if (data.init) {
        return null;
      }
      data.init = true;
      var impEntity = MxCpp.App.getImp().ObjectIdToMdDbCustomEntity(data.idIndex);
      if (!impEntity) return null;
      var customEntity = MxCustomEntityManager.createMxEntity(impEntity.getCustomEntityTypeName(), impEntity);
      if (customEntity == null) return null;
      customEntity.syncData(false);
      data.customEntity = customEntity;
      return customEntity;
    }
  }, {
    key: "init",
    value: function init() {
      var win = window;
      win.MxCustomEntityManager_freeObject = function (customid, indexIdDatabase) {
        MxCustomEntityManager.freeObject(customid, indexIdDatabase);
      };
      win.MxCustomEntityManager_relationObject = function (idIndex, indexIdDatabase) {
        return MxCustomEntityManager.relationObject(idIndex, indexIdDatabase);
      };
      win.MxCustomEntityManager_freeDatabase = function (indexIdDatabase) {
        MxCustomEntityManager.freeDatabase(indexIdDatabase);
      };
      win.MxCustomEntityManager_worldDraw = function (customid, indexIdDatabase, ptrWorldDraw, tempid, ptrVecOsnapEntity, lPtrVecExplodeEntity) {
        var ent;
        if (tempid != 0) {
          ent = MxCustomEntityManager.getTmpObject(tempid);
        } else {
          ent = MxCustomEntityManager.getObject(customid, indexIdDatabase);
        }
        if (!ent) return;
        var mxcadWorldDraw = new MxCADWorldDraw(ptrWorldDraw);
        if (ptrVecOsnapEntity !== 0) mxcadWorldDraw.imp.connectVecOsnapEntity(ptrVecOsnapEntity);
        if (lPtrVecExplodeEntity !== 0) {
          mxcadWorldDraw.initType(MxCADWorldDrawType.kExplodeDraw);
          mxcadWorldDraw.imp.connectVecExplodeEntity(lPtrVecExplodeEntity);
        }
        ent.worldDraw(mxcadWorldDraw);
      };
      win.MxCustomEntityManager_syncData = function (customid, indexIdDatabase, toCpp) {
        var ent = MxCustomEntityManager.getObject(customid, indexIdDatabase);
        if (!ent) return;
        ent.syncData(toCpp != 0);
      };
      win.MxCustomEntityManager_transformBy = function (customid, indexIdDatabase, ptrMat, tempid) {
        var mat = new McGeMatrix3d();
        mat.imp.copyFormPointer(ptrMat);
        var ent;
        if (tempid != 0) {
          ent = MxCustomEntityManager.getTmpObject(tempid);
        } else {
          ent = MxCustomEntityManager.getObject(customid, indexIdDatabase);
        }
        if (!ent) return;
        ent.transformBy(mat);
      };
    }
  }]);
  return MxCustomEntityManagerImp;
}();
var McDbDwgFilerCpp = /*#__PURE__*/function (_IMcDbDwgFiler) {
  _inherits$1(McDbDwgFilerCpp, _IMcDbDwgFiler);
  var _super = _createSuper$7(McDbDwgFilerCpp);
  function McDbDwgFilerCpp(imp) {
    var _this;
    _classCallCheck$1(this, McDbDwgFilerCpp);
    _this = _super.call(this, MxCADCloneType.kCPPClone);
    _defineProperty(_assertThisInitialized$1(_this), "imp", void 0);
    if (!imp) {
      imp = new MxCpp.mxcadassemblyimp.MdDbCustomEntityDwgFiler();
    }
    _this.imp = imp;
    return _this;
  }
  _createClass$1(McDbDwgFilerCpp, [{
    key: "writePoint",
    value: function writePoint(name, val) {
      this.imp.writePoint(name, val.imp.x, val.imp.y, val.imp.z);
    }
  }, {
    key: "readPoint",
    value: function readPoint(name) {
      var retpt = this.imp.readPoint(name);
      var retdata = {};
      if (MxCpp.getCallResult() == 0) {
        retdata = {
          val: new McGePoint3d(retpt),
          ret: true
        };
      } else {
        retdata = {
          val: new McGePoint3d(),
          ret: false
        };
      }
      MxCpp.App.getImp().DestroyMdGePoint3d(retpt);
      return retdata;
    }
  }, {
    key: "writeLong",
    value: function writeLong(name, val) {
      this.imp.writeLong(name, val);
    }
  }, {
    key: "readLong",
    value: function readLong(name) {
      var ret = this.imp.readLong(name);
      var retdata = {};
      if (MxCpp.getCallResult() == 0) {
        retdata = {
          val: ret,
          ret: true
        };
      } else {
        retdata = {
          val: 0,
          ret: false
        };
      }
      return retdata;
    }
  }, {
    key: "writeDouble",
    value: function writeDouble(name, val) {
      this.imp.writeDouble(name, val);
    }
  }, {
    key: "readDouble",
    value: function readDouble(name) {
      var ret = this.imp.readDouble(name);
      var retdata = {};
      if (MxCpp.getCallResult() == 0) {
        retdata = {
          val: ret,
          ret: true
        };
      } else {
        retdata = {
          val: 0,
          ret: false
        };
      }
      return retdata;
    }
  }, {
    key: "writeString",
    value: function writeString(name, val) {
      this.imp.writeString(name, MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "readString",
    value: function readString(name) {
      var ret = this.imp.readString(name);
      var retdata = {};
      if (MxCpp.getCallResult() == 0) {
        retdata = {
          val: MxG2312Obj.decodeFromGb2312(ret),
          ret: true
        };
      } else {
        retdata = {
          val: "",
          ret: false
        };
      }
      return retdata;
    }
  }]);
  return McDbDwgFilerCpp;
}(IMcDbDwgFiler);
var MxCustomEntityManager;
MxCustomEntityManager = new MxCustomEntityManagerImp();

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DxfCode = /* @__PURE__ */function (DxfCode2) {
  DxfCode2[DxfCode2["kEntityType"] = 5020] = "kEntityType";
  DxfCode2[DxfCode2["kLayer"] = 8] = "kLayer";
  DxfCode2[DxfCode2["kBlockName"] = 2] = "kBlockName";
  DxfCode2[DxfCode2["kColor"] = 62] = "kColor";
  DxfCode2[DxfCode2["kAppName"] = -3] = "kAppName";
  DxfCode2[DxfCode2["kLong"] = 1071] = "kLong";
  DxfCode2[DxfCode2["kDouble"] = 1040] = "kDouble";
  DxfCode2[DxfCode2["kString"] = 1e3] = "kString";
  DxfCode2[DxfCode2["kPoint"] = 1010] = "kPoint";
  DxfCode2[DxfCode2["kEntityId"] = -8e3] = "kEntityId";
  DxfCode2[DxfCode2["kEntity"] = -8500] = "kEntity";
  DxfCode2[DxfCode2["kExDataName"] = 1001] = "kExDataName";
  return DxfCode2;
}(DxfCode || {});
var McDb;
(function (McDb2) {
  (function (PolylineType2) {
    PolylineType2[PolylineType2["kLwPolyline"] = 0] = "kLwPolyline";
    PolylineType2[PolylineType2["k3dPolyline"] = 2] = "k3dPolyline";
  })(McDb2.PolylineType || (McDb2.PolylineType = {}));
  (function (TextHorzMode2) {
    TextHorzMode2[TextHorzMode2["kTextLeft"] = 0] = "kTextLeft";
    TextHorzMode2[TextHorzMode2["kTextCenter"] = 1] = "kTextCenter";
    TextHorzMode2[TextHorzMode2["kTextRight"] = 2] = "kTextRight";
    TextHorzMode2[TextHorzMode2["kTextAlign"] = 3] = "kTextAlign";
    TextHorzMode2[TextHorzMode2["kTextMid"] = 4] = "kTextMid";
    TextHorzMode2[TextHorzMode2["kTextFit"] = 5] = "kTextFit";
  })(McDb2.TextHorzMode || (McDb2.TextHorzMode = {}));
  (function (Intersect2) {
    Intersect2[Intersect2["kOnBothOperands"] = 0] = "kOnBothOperands";
    Intersect2[Intersect2["kExtendThis"] = 1] = "kExtendThis";
    Intersect2[Intersect2["kExtendArg"] = 2] = "kExtendArg";
    Intersect2[Intersect2["kExtendBoth"] = 3] = "kExtendBoth";
  })(McDb2.Intersect || (McDb2.Intersect = {}));
  (function (TextVertMode2) {
    TextVertMode2[TextVertMode2["kTextBase"] = 0] = "kTextBase";
    TextVertMode2[TextVertMode2["kTextBottom"] = 1] = "kTextBottom";
    TextVertMode2[TextVertMode2["kTextVertMid"] = 2] = "kTextVertMid";
    TextVertMode2[TextVertMode2["kTextTop"] = 3] = "kTextTop";
  })(McDb2.TextVertMode || (McDb2.TextVertMode = {}));
  (function (AttachmentPoint2) {
    AttachmentPoint2[AttachmentPoint2["kTopLeft"] = 1] = "kTopLeft";
    AttachmentPoint2[AttachmentPoint2["kTopCenter"] = 2] = "kTopCenter";
    AttachmentPoint2[AttachmentPoint2["kTopRight"] = 3] = "kTopRight";
    AttachmentPoint2[AttachmentPoint2["kMiddleLeft"] = 4] = "kMiddleLeft";
    AttachmentPoint2[AttachmentPoint2["kMiddleCenter"] = 5] = "kMiddleCenter";
    AttachmentPoint2[AttachmentPoint2["kMiddleRight"] = 6] = "kMiddleRight";
    AttachmentPoint2[AttachmentPoint2["kBottomLeft"] = 7] = "kBottomLeft";
    AttachmentPoint2[AttachmentPoint2["kBottomCenter"] = 8] = "kBottomCenter";
    AttachmentPoint2[AttachmentPoint2["kBottomRight"] = 9] = "kBottomRight";
    AttachmentPoint2[AttachmentPoint2["kBaseLeft"] = 10] = "kBaseLeft";
    AttachmentPoint2[AttachmentPoint2["kBaseCenter"] = 11] = "kBaseCenter";
    AttachmentPoint2[AttachmentPoint2["kBaseRight"] = 12] = "kBaseRight";
    AttachmentPoint2[AttachmentPoint2["kBaseAlign"] = 13] = "kBaseAlign";
    AttachmentPoint2[AttachmentPoint2["kBottomAlign"] = 14] = "kBottomAlign";
    AttachmentPoint2[AttachmentPoint2["kMiddleAlign"] = 15] = "kMiddleAlign";
    AttachmentPoint2[AttachmentPoint2["kTopAlign"] = 16] = "kTopAlign";
    AttachmentPoint2[AttachmentPoint2["kBaseFit"] = 17] = "kBaseFit";
    AttachmentPoint2[AttachmentPoint2["kBottomFit"] = 18] = "kBottomFit";
    AttachmentPoint2[AttachmentPoint2["kMiddleFit"] = 19] = "kMiddleFit";
    AttachmentPoint2[AttachmentPoint2["kTopFit"] = 20] = "kTopFit";
    AttachmentPoint2[AttachmentPoint2["kBaseMid"] = 21] = "kBaseMid";
    AttachmentPoint2[AttachmentPoint2["kBottomMid"] = 22] = "kBottomMid";
    AttachmentPoint2[AttachmentPoint2["kMiddleMid"] = 23] = "kMiddleMid";
    AttachmentPoint2[AttachmentPoint2["kTopMid"] = 24] = "kTopMid";
  })(McDb2.AttachmentPoint || (McDb2.AttachmentPoint = {}));
  (function (LineWeight2) {
    LineWeight2[LineWeight2["kLnWt000"] = 0] = "kLnWt000";
    LineWeight2[LineWeight2["kLnWt005"] = 5] = "kLnWt005";
    LineWeight2[LineWeight2["kLnWt009"] = 9] = "kLnWt009";
    LineWeight2[LineWeight2["kLnWt013"] = 13] = "kLnWt013";
    LineWeight2[LineWeight2["kLnWt015"] = 15] = "kLnWt015";
    LineWeight2[LineWeight2["kLnWt018"] = 18] = "kLnWt018";
    LineWeight2[LineWeight2["kLnWt020"] = 20] = "kLnWt020";
    LineWeight2[LineWeight2["kLnWt025"] = 25] = "kLnWt025";
    LineWeight2[LineWeight2["kLnWt030"] = 30] = "kLnWt030";
    LineWeight2[LineWeight2["kLnWt035"] = 35] = "kLnWt035";
    LineWeight2[LineWeight2["kLnWt040"] = 40] = "kLnWt040";
    LineWeight2[LineWeight2["kLnWt050"] = 50] = "kLnWt050";
    LineWeight2[LineWeight2["kLnWt053"] = 53] = "kLnWt053";
    LineWeight2[LineWeight2["kLnWt060"] = 60] = "kLnWt060";
    LineWeight2[LineWeight2["kLnWt070"] = 70] = "kLnWt070";
    LineWeight2[LineWeight2["kLnWt080"] = 80] = "kLnWt080";
    LineWeight2[LineWeight2["kLnWt090"] = 90] = "kLnWt090";
    LineWeight2[LineWeight2["kLnWt100"] = 100] = "kLnWt100";
    LineWeight2[LineWeight2["kLnWt106"] = 106] = "kLnWt106";
    LineWeight2[LineWeight2["kLnWt120"] = 120] = "kLnWt120";
    LineWeight2[LineWeight2["kLnWt140"] = 140] = "kLnWt140";
    LineWeight2[LineWeight2["kLnWt158"] = 158] = "kLnWt158";
    LineWeight2[LineWeight2["kLnWt200"] = 200] = "kLnWt200";
    LineWeight2[LineWeight2["kLnWt211"] = 211] = "kLnWt211";
    LineWeight2[LineWeight2["kLnWtByLayer"] = -1] = "kLnWtByLayer";
    LineWeight2[LineWeight2["kLnWtByBlock"] = -2] = "kLnWtByBlock";
    LineWeight2[LineWeight2["kLnWtByLwDefault"] = -3] = "kLnWtByLwDefault";
  })(McDb2.LineWeight || (McDb2.LineWeight = {}));
  (function (HatchLoopType2) {
    HatchLoopType2[HatchLoopType2["kDefault"] = 0] = "kDefault";
    HatchLoopType2[HatchLoopType2["kExternal"] = 1] = "kExternal";
    HatchLoopType2[HatchLoopType2["kPolyline"] = 2] = "kPolyline";
    HatchLoopType2[HatchLoopType2["kDerived"] = 4] = "kDerived";
    HatchLoopType2[HatchLoopType2["kTextbox"] = 8] = "kTextbox";
    HatchLoopType2[HatchLoopType2["kOutermost"] = 16] = "kOutermost";
    HatchLoopType2[HatchLoopType2["kNotClosed"] = 32] = "kNotClosed";
    HatchLoopType2[HatchLoopType2["kSelfIntersecting"] = 64] = "kSelfIntersecting";
    HatchLoopType2[HatchLoopType2["kTextIsland"] = 128] = "kTextIsland";
  })(McDb2.HatchLoopType || (McDb2.HatchLoopType = {}));
  (function (HatchEdgeType2) {
    HatchEdgeType2[HatchEdgeType2["kLine"] = 1] = "kLine";
    HatchEdgeType2[HatchEdgeType2["kCirArc"] = 2] = "kCirArc";
    HatchEdgeType2[HatchEdgeType2["kEllArc"] = 3] = "kEllArc";
    HatchEdgeType2[HatchEdgeType2["kSpline"] = 4] = "kSpline";
  })(McDb2.HatchEdgeType || (McDb2.HatchEdgeType = {}));
  (function (HatchPatternType2) {
    HatchPatternType2[HatchPatternType2["kUserDefined"] = 0] = "kUserDefined";
    HatchPatternType2[HatchPatternType2["kPreDefined"] = 1] = "kPreDefined";
    HatchPatternType2[HatchPatternType2["kCustomDefined"] = 2] = "kCustomDefined";
  })(McDb2.HatchPatternType || (McDb2.HatchPatternType = {}));
  (function (HatchStyle2) {
    HatchStyle2[HatchStyle2["kNormal"] = 0] = "kNormal";
    HatchStyle2[HatchStyle2["kOuter"] = 1] = "kOuter";
    HatchStyle2[HatchStyle2["kIgnore"] = 2] = "kIgnore";
  })(McDb2.HatchStyle || (McDb2.HatchStyle = {}));
  (function (ClipBoundaryType2) {
    ClipBoundaryType2[ClipBoundaryType2["kInvalid"] = 0] = "kInvalid";
    ClipBoundaryType2[ClipBoundaryType2["kRect"] = 1] = "kRect";
    ClipBoundaryType2[ClipBoundaryType2["kPoly"] = 2] = "kPoly";
  })(McDb2.ClipBoundaryType || (McDb2.ClipBoundaryType = {}));
})(McDb || (McDb = {}));
var McCmColor = /*#__PURE__*/function () {
  function McCmColor(red, green, blue, n) {
    _classCallCheck$1(this, McCmColor);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MdCmColor();
    if (red instanceof Object) {
      this.imp.red = red.red;
      this.imp.green = red.green;
      this.imp.blue = red.blue;
      this.imp.method = red.method;
      this.imp.n = red.n;
      this.imp.colorIndex = red.colorIndex;
    } else if (typeof red == "number" && typeof green == "number" && typeof blue == "number") {
      this.imp.setRGB(red, green, blue);
      if (typeof n == "number") this.imp.n = n;
    }
  }
  _createClass$1(McCmColor, [{
    key: "getImp",
    value: function getImp() {
      return this.imp;
    }
  }, {
    key: "copy",
    value: function copy(val) {
      this.imp.red = val.imp.red;
      this.imp.green = val.imp.green;
      this.imp.blue = val.imp.blue;
      this.imp.method = val.imp.method;
      this.imp.n = val.imp.n;
      this.imp.colorIndex = val.imp.colorIndex;
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new McCmColor(this.imp);
    }
  }, {
    key: "setColorIndex",
    value: function setColorIndex(colorIndex) {
      this.imp.setColorIndex(colorIndex);
    }
  }, {
    key: "setRGB",
    value: function setRGB(red, green, blue) {
      this.imp.setRGB(red, green, blue);
    }
  }, {
    key: "red",
    get: function get() {
      return this.imp.red;
    },
    set: function set(val) {
      this.imp.red = val;
    }
  }, {
    key: "green",
    get: function get() {
      return this.imp.green;
    },
    set: function set(val) {
      this.imp.green = val;
    }
  }, {
    key: "blue",
    get: function get() {
      return this.imp.blue;
    },
    set: function set(val) {
      this.imp.blue = val;
    }
  }, {
    key: "n",
    get: function get() {
      return this.imp.n;
    },
    set: function set(val) {
      this.imp.n = val;
    }
  }, {
    key: "method",
    get: function get() {
      return this.imp.method;
    },
    set: function set(val) {
      this.imp.method = val;
    }
  }, {
    key: "colorIndex",
    get: function get() {
      return this.imp.colorIndex;
    },
    set: function set(val) {
      this.imp.colorIndex = val;
    }
  }, {
    key: "getColorString",
    value: function getColorString() {
      return this.imp.getColorString();
    }
  }, {
    key: "getColorValue",
    value: function getColorValue(layerId, blkRefId) {
      var lId1 = 0;
      if ((layerId === null || layerId === void 0 ? void 0 : layerId.type) == McObjectIdType.kMxCAD) {
        lId1 = layerId.id;
      }
      var lId2 = 0;
      if ((blkRefId === null || blkRefId === void 0 ? void 0 : blkRefId.type) == McObjectIdType.kMxCAD) {
        lId2 = blkRefId.id;
      }
      return this.imp.getColorValue(lId1, lId2);
    }
  }, {
    key: "getStyle",
    value: function getStyle() {
      var red = this.red,
        green = this.green,
        blue = this.blue,
        colorIndex = this.colorIndex;
      var colorUtils = getColorUtils(red / 255, green / 255, blue / 255);
      var isInverseColor = colorIndex === ColorIndexType.kWhite;
      if (isInverseColor) {
        var hsl = {
          h: 0,
          s: 0,
          l: 0
        };
        colorUtils.getHSL(hsl);
        hsl.h = (hsl.h + 0.5) % 1;
        colorUtils.setHSL(hsl.h, hsl.s, hsl.l);
      }
      return colorUtils.getStyle();
    }
  }]);
  return McCmColor;
}();
var McDbLinetypeTableRecord = /*#__PURE__*/function (_McDbObject) {
  _inherits$1(McDbLinetypeTableRecord, _McDbObject);
  var _super = _createSuper$6(McDbLinetypeTableRecord);
  function McDbLinetypeTableRecord(imp) {
    var _this;
    _classCallCheck$1(this, McDbLinetypeTableRecord);
    _this = _super.call(this, imp);
    if (!imp) {
      _this.initTempObject(new MxCpp.mxcadassemblyimp.MdDbLinetypeTableRecord());
    }
    return _this;
  }
  _createClass$1(McDbLinetypeTableRecord, [{
    key: "name",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.getName());
    },
    set: function set(val) {
      this.imp.setName(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "numDashes",
    get: function get() {
      return this.imp.numDashes();
    },
    set: function set(val) {
      this.imp.setNumDashes(val);
    }
  }, {
    key: "dashLengthAt",
    value: function dashLengthAt(index) {
      return this.imp.dashLengthAt(index);
    }
  }, {
    key: "setDashLengthAt",
    value: function setDashLengthAt(index, value) {
      return this.imp.setDashLengthAt(index, value);
    }
  }, {
    key: "comments",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.comments());
    },
    set: function set(val) {
      this.imp.setComments(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "shapeStyleAt",
    value: function shapeStyleAt(index) {
      return this.imp.shapeStyleAt(index);
    }
  }, {
    key: "setShapeStyleAt",
    value: function setShapeStyleAt(index, value) {
      return this.imp.setShapeStyleAt(index, value);
    }
  }, {
    key: "shapeNumberAt",
    value: function shapeNumberAt(index) {
      return this.imp.shapeNumberAt(index);
    }
  }, {
    key: "setShapeNumberAt",
    value: function setShapeNumberAt(index, shapeNumber) {
      return this.imp.setShapeNumberAt(index, shapeNumber);
    }
  }, {
    key: "shapeOffsetAt",
    value: function shapeOffsetAt(index) {
      return new McGeVector3d(this.imp.shapeOffsetAt(index));
    }
  }, {
    key: "setShapeOffsetAt",
    value: function setShapeOffsetAt(index, offset) {
      return this.imp.setShapeOffsetAt(index, offset.imp);
    }
  }, {
    key: "shapeScaleAt",
    value: function shapeScaleAt(index) {
      return this.imp.shapeScaleAt(index);
    }
  }, {
    key: "setShapeScaleAt",
    value: function setShapeScaleAt(index, scale) {
      return this.imp.setShapeScaleAt(index, scale);
    }
  }, {
    key: "isScaledToFit",
    get: function get() {
      return this.imp.isScaledToFit();
    },
    set: function set(scaledToFit) {
      this.imp.setIsScaledToFit(scaledToFit);
    }
  }, {
    key: "shapeIsUcsOrientedAt",
    value: function shapeIsUcsOrientedAt(index) {
      return this.imp.shapeIsUcsOrientedAt(index);
    }
  }, {
    key: "setShapeIsUcsOrientedAt",
    value: function setShapeIsUcsOrientedAt(index, isUcsOriented) {
      return this.imp.setShapeScaleAt(index, isUcsOriented);
    }
  }, {
    key: "shapeRotationAt",
    value: function shapeRotationAt(index) {
      return this.imp.shapeRotationAt(index);
    }
  }, {
    key: "setShapeRotationAt",
    value: function setShapeRotationAt(index, rotation) {
      return this.imp.setShapeRotationAt(index, rotation);
    }
  }, {
    key: "textAt",
    value: function textAt(index) {
      return MxG2312Obj.decodeFromGb2312(this.imp.textAt(index));
    }
  }, {
    key: "setTextAt",
    value: function setTextAt(index, text) {
      return this.imp.setTextAt(index, MxG2312Obj.encodeToGb2312(text));
    }
  }]);
  return McDbLinetypeTableRecord;
}(McDbObject);
var McDbDimStyleTableRecord = /*#__PURE__*/function (_McDbObject2) {
  _inherits$1(McDbDimStyleTableRecord, _McDbObject2);
  var _super2 = _createSuper$6(McDbDimStyleTableRecord);
  function McDbDimStyleTableRecord(imp) {
    var _this2;
    _classCallCheck$1(this, McDbDimStyleTableRecord);
    _this2 = _super2.call(this, imp);
    if (!imp) {
      _this2.initTempObject(new MxCpp.mxcadassemblyimp.MdDbDimStyleTableRecord());
    }
    return _this2;
  }
  _createClass$1(McDbDimStyleTableRecord, [{
    key: "name",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.getName());
    },
    set: function set(val) {
      this.imp.setName(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "getDimVarInt",
    value: function getDimVarInt(type) {
      return this.imp.getDimVarInt(type);
    }
  }, {
    key: "setDimVarInt",
    value: function setDimVarInt(type, value) {
      return this.imp.setDimVarInt(type, value);
    }
  }, {
    key: "getDimVarDouble",
    value: function getDimVarDouble(type) {
      return this.imp.getDimVarDouble(type);
    }
  }, {
    key: "setDimVarDouble",
    value: function setDimVarDouble(type, value) {
      return this.imp.setDimVarDouble(type, value);
    }
  }, {
    key: "getDimVarString",
    value: function getDimVarString(type) {
      return MxG2312Obj.decodeFromGb2312(this.imp.getDimVarString(type));
    }
  }, {
    key: "setDimVarString",
    value: function setDimVarString(type, value) {
      return this.imp.setDimVarString(type, MxG2312Obj.encodeToGb2312(value));
    }
  }, {
    key: "getDimVarObjectId",
    value: function getDimVarObjectId(type) {
      return new McObjectId(this.imp.getDimVarObjectId(type), McObjectIdType.kMxCAD);
    }
  }, {
    key: "setDimVarObjectId",
    value: function setDimVarObjectId(type, value) {
      return this.imp.setDimVarObjectId(type, value.id);
    }
  }]);
  return McDbDimStyleTableRecord;
}(McDbObject);
var McDbTextStyleTableRecord = /*#__PURE__*/function (_McDbObject3) {
  _inherits$1(McDbTextStyleTableRecord, _McDbObject3);
  var _super3 = _createSuper$6(McDbTextStyleTableRecord);
  function McDbTextStyleTableRecord(imp) {
    var _this3;
    _classCallCheck$1(this, McDbTextStyleTableRecord);
    _this3 = _super3.call(this, imp);
    if (!imp) {
      _this3.initTempObject(new MxCpp.mxcadassemblyimp.MdDbTextStyleTableRecord());
    }
    return _this3;
  }
  _createClass$1(McDbTextStyleTableRecord, [{
    key: "name",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.getName());
    },
    set: function set(val) {
      this.imp.setName(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "isShapeFile",
    get: function get() {
      return this.imp.isShapeFile();
    },
    set: function set(val) {
      this.imp.setIsShapeFile(val);
    }
  }, {
    key: "isVertical",
    get: function get() {
      return this.imp.isVertical();
    },
    set: function set(val) {
      this.imp.setIsVertical(val);
    }
  }, {
    key: "textSize",
    get: function get() {
      return this.imp.textSize();
    },
    set: function set(val) {
      this.imp.setTextSize(val);
    }
  }, {
    key: "xScale",
    get: function get() {
      return this.imp.xScale();
    },
    set: function set(val) {
      this.imp.setXScale(val);
    }
  }, {
    key: "obliquingAngle",
    get: function get() {
      return this.imp.obliquingAngle();
    },
    set: function set(val) {
      this.imp.setObliquingAngle(val);
    }
  }, {
    key: "flagBits",
    get: function get() {
      return this.imp.flagBits();
    },
    set: function set(val) {
      this.imp.setFlagBits(val);
    }
  }, {
    key: "fileName",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.fileName());
    },
    set: function set(val) {
      this.imp.setFileName(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "bigFontFileName",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.bigFontFileName());
    },
    set: function set(val) {
      this.imp.setBigFontFileName(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "setFont",
    value: function setFont(sTypeface, bold, italic, charset, pitchAndFamily) {
      return this.imp.setFont(MxG2312Obj.encodeToGb2312(sTypeface), bold, italic, charset, pitchAndFamily);
    }
  }, {
    key: "font",
    value: function font() {
      var ret = this.imp.font();
      if (!ret) {
        return {
          sTypeface: "",
          bold: false,
          italic: false,
          charset: 0,
          pitchAndFamily: 0
        };
      }
      var sTypeface = MxG2312Obj.decodeFromGb2312(ret.AtString(0, true));
      var bold = ret.Atlong(1) != 0;
      var italic = ret.Atlong(2) != 0;
      var charset = ret.Atlong(3);
      var pitchAndFamily = ret.Atlong(4);
      return {
        sTypeface: sTypeface,
        bold: bold,
        italic: italic,
        charset: charset,
        pitchAndFamily: pitchAndFamily
      };
    }
  }]);
  return McDbTextStyleTableRecord;
}(McDbObject);
var McDbLayerTableRecord = /*#__PURE__*/function (_McDbObject4) {
  _inherits$1(McDbLayerTableRecord, _McDbObject4);
  var _super4 = _createSuper$6(McDbLayerTableRecord);
  function McDbLayerTableRecord(imp) {
    var _this4;
    _classCallCheck$1(this, McDbLayerTableRecord);
    _this4 = _super4.call(this, imp);
    if (!imp) {
      _this4.initTempObject(new MxCpp.mxcadassemblyimp.MdDbLayerTableRecord());
    }
    return _this4;
  }
  _createClass$1(McDbLayerTableRecord, [{
    key: "name",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.getName());
    },
    set: function set(val) {
      this.imp.setName(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "isFrozen",
    get: function get() {
      return this.imp.isFrozen();
    },
    set: function set(val) {
      this.imp.setIsFrozen(val);
    }
  }, {
    key: "isOff",
    get: function get() {
      return this.imp.isOff();
    },
    set: function set(val) {
      this.imp.setIsOff(val);
    }
  }, {
    key: "isLocked",
    get: function get() {
      return this.imp.isLocked();
    },
    set: function set(val) {
      this.imp.setIsLocked(val);
    }
  }, {
    key: "color",
    get: function get() {
      return new McCmColor(this.imp.color());
    },
    set: function set(val) {
      this.imp.setColor(val.getImp());
    }
  }, {
    key: "linetypeObjectId",
    get: function get() {
      return new McObjectId(this.imp.linetypeObjectId(), McObjectIdType.kMxCAD);
    },
    set: function set(val) {
      this.imp.setLinetypeObjectId(val.id);
    }
  }, {
    key: "lineWeight",
    get: function get() {
      return this.imp.lineWeight();
    },
    set: function set(val) {
      this.imp.setLineWeight(val);
    }
  }]);
  return McDbLayerTableRecord;
}(McDbObject);
var McDbLayerTable = /*#__PURE__*/function (_McDbObject5) {
  _inherits$1(McDbLayerTable, _McDbObject5);
  var _super5 = _createSuper$6(McDbLayerTable);
  function McDbLayerTable(imp) {
    _classCallCheck$1(this, McDbLayerTable);
    return _super5.call(this, imp);
  }
  _createClass$1(McDbLayerTable, [{
    key: "getAllRecordId",
    value: function getAllRecordId() {
      var skipDeleted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var ret = [];
      var aryId = this.imp.getAllRecordId(skipDeleted);
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "add",
    value: function add(rec) {
      return new McObjectId(this.imp.add(rec.getImp()), McObjectIdType.kMxCAD);
    }
  }, {
    key: "get",
    value: function get(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return new McObjectId(this.imp.get(sHex, skipDeleted));
    }
  }, {
    key: "has",
    value: function has(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return this.imp.get(sHex, skipDeleted) != 0;
    }
  }]);
  return McDbLayerTable;
}(McDbObject);
var McDbLinetypeTable = /*#__PURE__*/function (_McDbObject6) {
  _inherits$1(McDbLinetypeTable, _McDbObject6);
  var _super6 = _createSuper$6(McDbLinetypeTable);
  function McDbLinetypeTable(imp) {
    _classCallCheck$1(this, McDbLinetypeTable);
    return _super6.call(this, imp);
  }
  _createClass$1(McDbLinetypeTable, [{
    key: "getAllRecordId",
    value: function getAllRecordId() {
      var skipDeleted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var ret = [];
      var aryId = this.imp.getAllRecordId(skipDeleted);
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "add",
    value: function add(rec) {
      return new McObjectId(this.imp.add(rec.getImp()), McObjectIdType.kMxCAD);
    }
  }, {
    key: "get",
    value: function get(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return new McObjectId(this.imp.get(sHex, skipDeleted));
    }
  }, {
    key: "has",
    value: function has(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return this.imp.get(sHex, skipDeleted) != 0;
    }
  }]);
  return McDbLinetypeTable;
}(McDbObject);
var McDbDimStyleTable = /*#__PURE__*/function (_McDbObject7) {
  _inherits$1(McDbDimStyleTable, _McDbObject7);
  var _super7 = _createSuper$6(McDbDimStyleTable);
  function McDbDimStyleTable(imp) {
    _classCallCheck$1(this, McDbDimStyleTable);
    return _super7.call(this, imp);
  }
  _createClass$1(McDbDimStyleTable, [{
    key: "getAllRecordId",
    value: function getAllRecordId() {
      var skipDeleted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var ret = [];
      var aryId = this.imp.getAllRecordId(skipDeleted);
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "add",
    value: function add(rec) {
      return new McObjectId(this.imp.add(rec.getImp()), McObjectIdType.kMxCAD);
    }
  }, {
    key: "get",
    value: function get(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return new McObjectId(this.imp.get(sHex, skipDeleted));
    }
  }, {
    key: "has",
    value: function has(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return this.imp.get(sHex, skipDeleted) != 0;
    }
  }]);
  return McDbDimStyleTable;
}(McDbObject);
var McDbTextStyleTable = /*#__PURE__*/function (_McDbObject8) {
  _inherits$1(McDbTextStyleTable, _McDbObject8);
  var _super8 = _createSuper$6(McDbTextStyleTable);
  function McDbTextStyleTable(imp) {
    _classCallCheck$1(this, McDbTextStyleTable);
    return _super8.call(this, imp);
  }
  _createClass$1(McDbTextStyleTable, [{
    key: "getAllRecordId",
    value: function getAllRecordId() {
      var skipDeleted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var ret = [];
      var aryId = this.imp.getAllRecordId(skipDeleted);
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "add",
    value: function add(rec) {
      return new McObjectId(this.imp.add(rec.getImp()), McObjectIdType.kMxCAD);
    }
  }, {
    key: "get",
    value: function get(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return new McObjectId(this.imp.get(sHex, skipDeleted));
    }
  }, {
    key: "has",
    value: function has(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return this.imp.get(sHex, skipDeleted) != 0;
    }
  }]);
  return McDbTextStyleTable;
}(McDbObject);
var McDbDatabase = /*#__PURE__*/function (_McRxObject) {
  _inherits$1(McDbDatabase, _McRxObject);
  var _super9 = _createSuper$6(McDbDatabase);
  function McDbDatabase(imp) {
    var _this5;
    _classCallCheck$1(this, McDbDatabase);
    _this5 = _super9.call(this, imp);
    if (!imp) {
      _this5.initTempObject(new MxCpp.mxcadassemblyimp.MdDbDatabase());
    }
    return _this5;
  }
  _createClass$1(McDbDatabase, [{
    key: "ucsMatrix",
    get: function get() {
      return new McGeMatrix3d(this.imp.getUcsMatrix());
    },
    set: function set(val) {
      this.imp.setUcsMatrix(val.imp);
    }
  }, {
    key: "getLayerTable",
    value: function getLayerTable() {
      return new McDbLayerTable(this.imp.GetLayerTable());
    }
  }, {
    key: "wblock",
    value: function wblock(database, aryId, ptBase) {
      if (!ptBase) ptBase = McGePoint3d.kOrigin;
      var ids = new McGeLongArray();
      aryId.forEach(function (val) {
        ids.append(val.id);
      });
      return this.imp.wblock(database.getImp(), ids.imp, ptBase.imp);
    }
  }, {
    key: "insert",
    value: function insert(database, sBlkName) {
      var sHexBlkName = MxG2312Obj.encodeToGb2312(sBlkName);
      return new McObjectId(this.imp.insert(database.getImp(), sHexBlkName), McObjectIdType.kMxCAD);
    }
  }, {
    key: "readFile",
    value: function readFile(sFilePath) {
      return this.imp.readFile(sFilePath);
    }
  }, {
    key: "saveAs",
    value: function saveAs(sFilePath) {
      return this.imp.saveAs(sFilePath);
    }
  }, {
    key: "layerTable",
    get: function get() {
      return new McDbLayerTable(this.imp.GetLayerTable());
    }
  }, {
    key: "getLinetypeTable",
    value: function getLinetypeTable() {
      return new McDbLinetypeTable(this.imp.GetLinetypeTable());
    }
  }, {
    key: "getDimStyleTable",
    value: function getDimStyleTable() {
      return new McDbDimStyleTable(this.imp.GetDimStyleTable());
    }
  }, {
    key: "dimStyleTable",
    get: function get() {
      return new McDbDimStyleTable(this.imp.GetDimStyleTable());
    }
  }, {
    key: "linetypeTable",
    get: function get() {
      return new McDbLinetypeTable(this.imp.GetLinetypeTable());
    }
  }, {
    key: "getTextStyleTable",
    value: function getTextStyleTable() {
      return new McDbTextStyleTable(this.imp.GetTextStyleTable());
    }
  }, {
    key: "textStyleTable",
    get: function get() {
      return new McDbTextStyleTable(this.imp.GetTextStyleTable());
    }
  }, {
    key: "getBlockTable",
    value: function getBlockTable() {
      return new McDbBlockTable(this.imp.GetBlockTable());
    }
  }, {
    key: "getNamedObjectsDictionary",
    value: function getNamedObjectsDictionary() {
      return new McDbDictionary(this.imp.GetNamedObjectsDictionary());
    }
  }, {
    key: "getEntitiesInTheGroup",
    value: function getEntitiesInTheGroup(id) {
      var ret = [];
      var aryId = this.imp.getEntitiesInTheGroup(id.id);
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "GetGroupDictionary",
    value: function GetGroupDictionary() {
      return new McDbDictionary(this.imp.GetGroupDictionary());
    }
  }, {
    key: "CreateGroup",
    value: function CreateGroup(ids) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var groupdict = this.GetGroupDictionary();
      var group = new McDbGroup();
      group.appendArray(ids);
      group.name = name;
      groupdict.addObject(name, group);
      return true;
    }
  }, {
    key: "blockTable",
    get: function get() {
      return new McDbBlockTable(this.imp.GetBlockTable());
    }
  }, {
    key: "currentSpace",
    get: function get() {
      return new McDbBlockTableRecord(this.imp.CurrentSpace());
    }
  }, {
    key: "getCurrentlyLineTypeScale",
    value: function getCurrentlyLineTypeScale() {
      return this.imp.GetCurrentlyLineTypeScale();
    }
  }, {
    key: "setCurrentlyLineTypeScale",
    value: function setCurrentlyLineTypeScale(val) {
      return this.imp.SetCurrentlyLineTypeScale(val);
    }
  }, {
    key: "getCurrentlyLineTypeName",
    value: function getCurrentlyLineTypeName() {
      var hexGb = this.imp.GetCurrentlyLineTypeName();
      return MxG2312Obj.decodeFromGb2312(hexGb);
    }
  }, {
    key: "setCurrentlyLineTypeName",
    value: function setCurrentlyLineTypeName(sName) {
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      this.imp.SetCurrentlyLineTypeName(sHex);
    }
  }, {
    key: "getCurrentlyLayerName",
    value: function getCurrentlyLayerName() {
      var hexGb = this.imp.GetCurrentlyLayerName();
      return MxG2312Obj.decodeFromGb2312(hexGb);
    }
  }, {
    key: "setCurrentlyLayerName",
    value: function setCurrentlyLayerName(sName) {
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      this.imp.SetCurrentlyLayerName(sHex);
    }
  }, {
    key: "getCurrentlyTrueColor",
    value: function getCurrentlyTrueColor() {
      return new McCmColor(this.imp.GetCurrentlyTrueColor());
    }
  }, {
    key: "getCurrentlyDrawColor",
    value: function getCurrentlyDrawColor() {
      var ary = this.imp.GetCurrentlyDrawColor();
      var ret = new THREE.Color();
      ret.setRGB(ary.at(0) / 255, ary.at(1) / 255, ary.at(2) / 255);
      return ret;
    }
  }, {
    key: "setCurrentlyTrueColor",
    value: function setCurrentlyTrueColor(color) {
      return this.imp.SetCurrentlyTrueColor(color.getImp());
    }
  }, {
    key: "getCurrentlyColorIndex",
    value: function getCurrentlyColorIndex() {
      return this.imp.GetCurrentlyColorIndex();
    }
  }, {
    key: "setCurrentlyColorIndex",
    value: function setCurrentlyColorIndex(colorIndex) {
      return this.imp.SetCurrentlyColorIndex(colorIndex);
    }
  }, {
    key: "getCurrentlyTextStyleName",
    value: function getCurrentlyTextStyleName() {
      var hexGb = this.imp.GetCurrentlyTextStyleName();
      return MxG2312Obj.decodeFromGb2312(hexGb);
    }
  }, {
    key: "setCurrentlyTextStyle",
    value: function setCurrentlyTextStyle(sName) {
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      this.imp.SetCurrentlyTextStyle(sHex);
    }
  }, {
    key: "getCurrentlyLineWeight",
    value: function getCurrentlyLineWeight() {
      return this.imp.GetCurrentlyLineWeight();
    }
  }, {
    key: "setCurrentlyLineWeight",
    value: function setCurrentlyLineWeight(lineWeight) {
      return this.imp.SetCurrentlyLineWeight(lineWeight);
    }
  }, {
    key: "getCurrentlyTextStyleId",
    value: function getCurrentlyTextStyleId() {
      return new McObjectId(this.imp.GetCurrentlyTextStyleId(), McObjectIdType.kMxCAD);
    }
  }, {
    key: "SetCurrentlyTextStyleId",
    value: function SetCurrentlyTextStyleId(id) {
      return this.imp.SetCurrentlyTextStyleId(id.id);
    }
  }, {
    key: "getCurrentlyDimStyleId",
    value: function getCurrentlyDimStyleId() {
      return new McObjectId(this.imp.GetCurrentlyDimStyleId(), McObjectIdType.kMxCAD);
    }
  }, {
    key: "setCurrentlyDimStyleId",
    value: function setCurrentlyDimStyleId(id) {
      return this.imp.SetCurrentlyDimStyleId(id.id);
    }
  }, {
    key: "getCurrentlyLayerId",
    value: function getCurrentlyLayerId() {
      return new McObjectId(this.imp.GetCurrentlyLayerId(), McObjectIdType.kMxCAD);
    }
  }, {
    key: "setCurrentlyLayerId",
    value: function setCurrentlyLayerId(id) {
      return this.imp.SetCurrentlyLayerId(id.id);
    }
  }, {
    key: "getCurrentlyLinetypeId",
    value: function getCurrentlyLinetypeId() {
      return new McObjectId(this.imp.GetCurrentlyLinetypeId(), McObjectIdType.kMxCAD);
    }
  }, {
    key: "setCurrentlyLinetypeId",
    value: function setCurrentlyLinetypeId(id) {
      return this.imp.SetCurrentlyLinetypeId(id.id);
    }
  }, {
    key: "handleToIdIndex",
    value: function handleToIdIndex(sHandle) {
      var id = this.imp.HandleToIdIndex(sHandle);
      return new McObjectId(id, McObjectIdType.kMxCAD);
    }
  }, {
    key: "isModifyed",
    value: function isModifyed() {
      return this.imp.IsModifyed();
    }
  }, {
    key: "resetModificationStatus",
    value: function resetModificationStatus() {
      return this.imp.SetModifyed(false);
    }
  }]);
  return McDbDatabase;
}(McRxObject);
var McDbBlockTableRecord = /*#__PURE__*/function (_McDbObject9) {
  _inherits$1(McDbBlockTableRecord, _McDbObject9);
  var _super10 = _createSuper$6(McDbBlockTableRecord);
  function McDbBlockTableRecord(imp) {
    var _this6;
    _classCallCheck$1(this, McDbBlockTableRecord);
    _this6 = _super10.call(this, imp);
    if (!imp) {
      _this6.initTempObject(new MxCpp.mxcadassemblyimp.MdDbBlockTableRecord());
    }
    return _this6;
  }
  _createClass$1(McDbBlockTableRecord, [{
    key: "appendAcDbEntity",
    value: function appendAcDbEntity(pEntity) {
      var isSync = pEntity.syncData(true);
      var ret = new McObjectId(this.imp.appendAcDbEntity(pEntity.getImp()), McObjectIdType.kMxCAD);
      if (isSync) {
        MxCustomEntityManager.getObjectFormId(ret);
      }
      return ret;
    }
  }, {
    key: "getAllEntityId",
    value: function getAllEntityId() {
      var skipDeleted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var ret = [];
      var aryId = this.imp.getAllEntityId(skipDeleted);
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "getMinMaxDrawOrder",
    value: function getMinMaxDrawOrder() {
      var pt = this.imp.getMinMaxDrawOrder();
      return {
        minDrawOrder: pt.x,
        maxDrawOrder: pt.y
      };
    }
  }, {
    key: "origin",
    get: function get() {
      return new McGePoint3d(this.imp.origin());
    },
    set: function set(origin) {
      this.imp.setOrigin(origin.imp);
    }
  }, {
    key: "getBoundingBox",
    value: function getBoundingBox() {
      var ret = this.imp.getBoundingBox();
      if (ret.length() < 2) {
        return {
          minPt: new McGePoint3d(),
          maxPt: new McGePoint3d(),
          ret: false
        };
      } else {
        var retval = {
          minPt: new McGePoint3d(ret.at(0)),
          maxPt: new McGePoint3d(ret.at(1)),
          ret: true
        };
        return retval;
      }
    }
  }, {
    key: "invalidBoundingBoxBuffer",
    value: function invalidBoundingBoxBuffer() {
      this.imp.invalidBoundingBoxBuffer();
    }
  }, {
    key: "name",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.getName());
    },
    set: function set(val) {
      this.imp.setName(MxG2312Obj.encodeToGb2312(val));
    }
  }]);
  return McDbBlockTableRecord;
}(McDbObject);
var McDbBlockTable = /*#__PURE__*/function (_McDbObject10) {
  _inherits$1(McDbBlockTable, _McDbObject10);
  var _super11 = _createSuper$6(McDbBlockTable);
  function McDbBlockTable(imp) {
    var _this7;
    _classCallCheck$1(this, McDbBlockTable);
    _this7 = _super11.call(this, imp);
    if (!imp) {
      _this7.initTempObject(new MxCpp.mxcadassemblyimp.MdDbBlockTable());
    }
    return _this7;
  }
  _createClass$1(McDbBlockTable, [{
    key: "getAllRecordId",
    value: function getAllRecordId() {
      var skipDeleted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var ret = [];
      var aryId = this.imp.getAllRecordId(skipDeleted);
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "add",
    value: function add(rec) {
      if (typeof rec == "string") {
        if (rec.length > 0) {
          var ret = this.get(rec, false);
          if (ret.isValid()) {
            var recTmp = ret.getMcDbBlockTableRecord();
            if (recTmp && recTmp.isErased()) {
              recTmp.unErase();
            }
            return ret;
          }
        }
        var tmp = new McDbBlockTableRecord();
        tmp.name = rec;
        return new McObjectId(this.imp.add(tmp.getImp()), McObjectIdType.kMxCAD);
      } else {
        return new McObjectId(this.imp.add(rec.getImp()), McObjectIdType.kMxCAD);
      }
    }
  }, {
    key: "get",
    value: function get(sName) {
      var skipDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return new McObjectId(this.imp.get(sHex, skipDeleted));
    }
  }, {
    key: "has",
    value: function has(sName) {
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return this.imp.get(sHex, true) != 0;
    }
  }]);
  return McDbBlockTable;
}(McDbObject);
var McDbRasterImageDef = /*#__PURE__*/function (_McDbObject11) {
  _inherits$1(McDbRasterImageDef, _McDbObject11);
  var _super12 = _createSuper$6(McDbRasterImageDef);
  function McDbRasterImageDef(imp) {
    var _this8;
    _classCallCheck$1(this, McDbRasterImageDef);
    _this8 = _super12.call(this, imp);
    if (!imp) {
      _this8.initTempObject(new MxCpp.mxcadassemblyimp.MdDbRasterImageDef());
    }
    return _this8;
  }
  _createClass$1(McDbRasterImageDef, [{
    key: "sourceFileName",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.sourceFileName());
    },
    set: function set(sPathName) {
      this.imp.setSourceFileName(MxG2312Obj.encodeToGb2312(sPathName));
    }
  }, {
    key: "saveToBase64",
    value: function saveToBase64(sUrl) {
      return this.imp.saveToBase64(sUrl);
    }
  }]);
  return McDbRasterImageDef;
}(McDbObject);
var McDbDictionary = /*#__PURE__*/function (_McDbObject12) {
  _inherits$1(McDbDictionary, _McDbObject12);
  var _super13 = _createSuper$6(McDbDictionary);
  function McDbDictionary(imp) {
    var _this9;
    _classCallCheck$1(this, McDbDictionary);
    _this9 = _super13.call(this, imp);
    if (!imp) {
      _this9.initTempObject(new MxCpp.mxcadassemblyimp.MdDbDictionary());
    }
    return _this9;
  }
  _createClass$1(McDbDictionary, [{
    key: "getAllObject",
    value: function getAllObject() {
      var ret = [];
      var aryId = this.imp.getAllObject();
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "getAllObjectName",
    value: function getAllObjectName() {
      var aryNamePtr = this.imp.getAllObjectName();
      var ret = new McGeStringArray(aryNamePtr);
      MxCpp.App.getImp().DestroyMdGeStringArray(aryNamePtr);
      return ret;
    }
  }, {
    key: "remove",
    value: function remove(sName) {
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return this.imp.remove(sHex);
    }
  }, {
    key: "addObject",
    value: function addObject(sName, obj) {
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return new McObjectId(this.imp.addObject(sHex, obj.getImp()), McObjectIdType.kMxCAD);
    }
  }, {
    key: "getAt",
    value: function getAt(sName) {
      var isGetErased = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var sHex = MxG2312Obj.encodeToGb2312(sName);
      return new McObjectId(this.imp.getAt(sHex, isGetErased), McObjectIdType.kMxCAD);
    }
  }]);
  return McDbDictionary;
}(McDbObject);
var McDbXrecord = /*#__PURE__*/function (_McDbObject13) {
  _inherits$1(McDbXrecord, _McDbObject13);
  var _super14 = _createSuper$6(McDbXrecord);
  function McDbXrecord(imp) {
    var _this10;
    _classCallCheck$1(this, McDbXrecord);
    _this10 = _super14.call(this, imp);
    if (!imp) {
      _this10.initTempObject(new MxCpp.mxcadassemblyimp.MdDbXrecord());
    }
    return _this10;
  }
  _createClass$1(McDbXrecord, [{
    key: "setData",
    value: function setData(xdata) {
      return this.imp.setData(xdata.getImp());
    }
  }, {
    key: "getData",
    value: function getData() {
      return new MxCADResbuf(this.imp.getData());
    }
  }]);
  return McDbXrecord;
}(McDbObject);
var McDbGroup = /*#__PURE__*/function (_McDbObject14) {
  _inherits$1(McDbGroup, _McDbObject14);
  var _super15 = _createSuper$6(McDbGroup);
  function McDbGroup(imp) {
    var _this11;
    _classCallCheck$1(this, McDbGroup);
    _this11 = _super15.call(this, imp);
    if (!imp) {
      _this11.initTempObject(new MxCpp.mxcadassemblyimp.MdDbGroup());
    }
    return _this11;
  }
  _createClass$1(McDbGroup, [{
    key: "description",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.description());
    },
    set: function set(description) {
      this.imp.setDescription(MxG2312Obj.encodeToGb2312(description));
    }
  }, {
    key: "name",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.name());
    },
    set: function set(name) {
      this.imp.setName(MxG2312Obj.encodeToGb2312(name));
    }
  }, {
    key: "isSelectable",
    get: function get() {
      return this.imp.isSelectable();
    },
    set: function set(val) {
      this.imp.setSelectable(val);
    }
  }, {
    key: "clear",
    value: function clear() {
      return this.imp.clear();
    }
  }, {
    key: "append",
    value: function append(id) {
      return this.imp.append(id.id);
    }
  }, {
    key: "appendArray",
    value: function appendArray(aryId) {
      var aryIdLong = new McGeLongArray();
      aryIdLong.copyFormAryId(aryId);
      return this.imp.appendArray(aryIdLong.imp);
    }
  }, {
    key: "has",
    value: function has(id) {
      return this.imp.has(id.id);
    }
  }, {
    key: "getAllEntityId",
    value: function getAllEntityId() {
      var ret = [];
      var aryId = this.imp.getAllEntityId();
      var iLen = aryId.length();
      for (var i = 0; i < iLen; i++) {
        ret.push(new McObjectId(aryId.at(i), McObjectIdType.kMxCAD));
      }
      MxCpp.App.getImp().DestroyMdGeLongArray(aryId);
      return ret;
    }
  }, {
    key: "numEntities",
    value: function numEntities() {
      return this.imp.numEntities();
    }
  }]);
  return McDbGroup;
}(McDbObject);

function angleTo(x1, y1, x2, y2) {
  var x = x1 - x2;
  var y = y1 - y2;
  var angle_temp = 0;
  if (x == 0) {
    angle_temp = Math.PI / 2;
  } else {
    angle_temp = Math.atan(Math.abs(y / x));
  }
  if (x < 0 && y >= 0) {
    angle_temp = Math.PI - angle_temp;
  } else if (x < 0 && y < 0) {
    angle_temp = Math.PI + angle_temp;
  } else if (x >= 0 && y < 0) {
    angle_temp = Math.PI * 2 - angle_temp;
  }
  return angle_temp;
}
function findArcCenter(P1, P2, angle) {
  var M = {
    x: (P1.x + P2.x) / 2,
    y: (P1.y + P2.y) / 2
  };
  var r = Math.sqrt(Math.pow(P1.x - M.x, 2) + Math.pow(P1.y - M.y, 2)) / Math.sin(angle / 2);
  var V = {
    x: P2.x - P1.x,
    y: P2.y - P1.y
  };
  var N = {
    x: V.x / Math.sqrt(Math.pow(V.x, 2) + Math.pow(V.y, 2)),
    y: V.y / Math.sqrt(Math.pow(V.x, 2) + Math.pow(V.y, 2))
  };
  var R = {
    x: -N.y,
    y: N.x
  };
  var x = M.x + r * R.x;
  var y = M.y + r * R.y;
  return new McGePoint3d(x, y);
}
function getHostUrl() {
  var host = window.location.hostname;
  if (host.substring(0, 4) != "http") {
    host = document.location.protocol + "//" + host;
  }
  return host;
}
function calculateDistanceFromPointToLine(pointToCheck, pointA, pointB) {
  var Q = pointA.clone();
  var R = pointB.clone();
  var P = pointToCheck.clone();
  var QP = P.sub(Q);
  var QR = R.sub(Q);
  var RP = P.sub(R);
  var dist;
  var dist1 = QP.crossProduct(QR).length() / QR.length();
  var result = QP.dotProduct(QR);
  if (result < 0) {
    dist = QP.length();
  } else if (result > Math.pow(QR.length(), 2)) {
    dist = RP.length();
  } else {
    dist = dist1;
  }
  return Math.floor(dist);
}
function selectLineSegmentFromPolylineByPoint(ent, selectPt) {
  var distanceTolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var num = ent.numVerts();
  for (var index = 0; index < ent.numVerts(); index++) {
    var pt = ent.getPointAt(index).val;
    var nextPt = ent.getPointAt(index + 1).val;
    var bulge = ent.getBulgeAt(index);
    if (bulge === 0) {
      if (index + 1 === num && ent.isClosed) {
        nextPt = ent.getPointAt(0).val;
      }
      if (nextPt && calculateDistanceFromPointToLine(selectPt, pt, nextPt) < distanceTolerance) {
        return {
          start: pt,
          end: nextPt,
          startIndex: index,
          endIndex: index + 1,
          bulge: bulge
        };
      }
    } else if (nextPt) {
      var startParam = ent.getParamAtPoint(pt).val;
      var entParam = ent.getParamAtPoint(nextPt).val;
      var selectParam = ent.getParamAtPoint(selectPt).val;
      if (entParam > selectParam && selectParam > startParam) {
        return {
          start: pt,
          end: nextPt,
          startIndex: index,
          endIndex: index + 1,
          bulge: bulge
        };
      }
    }
  }
  if (ent.isClosed) {
    var end = ent.getPointAt(0).val;
    var start = ent.getPointAt(ent.numVerts() - 1).val;
    var _bulge = ent.getBulgeAt(ent.numVerts() - 1);
    if (calculateDistanceFromPointToLine(selectPt, start, end) < distanceTolerance) {
      return {
        start: start,
        end: end,
        startIndex: ent.numVerts() - 1,
        endIndex: 0,
        isClosed: true,
        bulge: _bulge
      };
    }
  }
}
function darkenColor(color, factor) {
  var r = color.r;
  var g = color.g;
  var b = color.b;
  r *= factor;
  g *= factor;
  b *= factor;
  color.r = Math.max(Math.min(r, 1), 0);
  color.g = Math.max(Math.min(g, 1), 0);
  color.b = Math.max(Math.min(b, 1), 0);
}
function isSegmentStartCloserToPoint(start, end, intersectPoint, pt) {
  var ptLineStatDist = calculateDistanceFromPointToLine(pt, start, intersectPoint);
  var ptLineEndDist = calculateDistanceFromPointToLine(pt, end, intersectPoint);
  if (isNaN(ptLineEndDist)) return true;
  if (isNaN(ptLineStatDist)) return false;
  if (ptLineEndDist === ptLineStatDist) {
    return intersectPoint.distanceTo(start) > intersectPoint.distanceTo(end);
  }
  return ptLineStatDist < ptLineEndDist;
}
function createChamferedLinesFromSegments(line, oLine, intersectPoint, isStart, isOStart, chamferDist, chamferDist1) {
  var isPruning = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;
  var segmentLine = new McDbLine();
  var vet = line.endPoint.sub(line.startPoint).normalize().mult(chamferDist);
  var oVet = oLine.endPoint.sub(oLine.startPoint).normalize().mult(chamferDist1);
  if (isStart) {
    vet.negate();
    var point = intersectPoint.clone().addvec(vet);
    if (isPruning) {
      line.endPoint = point;
    }
    segmentLine.startPoint = point.clone();
  } else {
    var _point = intersectPoint.clone().addvec(vet);
    if (isPruning) {
      line.startPoint = _point;
    }
    segmentLine.startPoint = _point.clone();
  }
  if (isOStart) {
    oVet.negate();
    var _point2 = intersectPoint.clone().addvec(oVet);
    if (isPruning) {
      oLine.endPoint = _point2;
    }
    segmentLine.endPoint = _point2.clone();
  } else {
    var _point3 = intersectPoint.clone().addvec(oVet);
    if (isPruning) {
      oLine.startPoint = _point3;
    }
    segmentLine.endPoint = _point3.clone();
  }
  if (chamferDist <= 0 && chamferDist1 <= 0) return;
  return segmentLine;
}
function createLineSegmentRoundJoin(radius, line, oLine, intersectPoint, isStart, isOStart) {
  var isPruning = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;
  var isApplyCorner = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
  var start = line.startPoint;
  var end = line.endPoint;
  var oStart = oLine.startPoint;
  var oEnd = oLine.endPoint;
  var startVet = intersectPoint.sub(isStart ? start : end);
  var endVet = intersectPoint.sub(isOStart ? oStart : oEnd);
  var tanVal = Math.tan(startVet.angleTo1(endVet) / 2);
  var dist = radius / tanVal;
  var segmentLine = createChamferedLinesFromSegments(line, oLine, intersectPoint, isStart, isOStart, isApplyCorner ? 0 : dist, isApplyCorner ? 0 : dist, isPruning);
  if (!segmentLine) return {
    segmentLine: segmentLine,
    chamferDist: dist
  };
  var vet = segmentLine.startPoint.sub(intersectPoint).perpVector();
  var vet1 = segmentLine.endPoint.sub(intersectPoint).perpVector();
  segmentLine.endPoint.addvec(vet1);
  var iPoints = new McDbLine(segmentLine.startPoint, segmentLine.startPoint.clone().addvec(vet)).IntersectWith(new McDbLine(segmentLine.endPoint, segmentLine.endPoint.clone().addvec(vet1)), McDb.Intersect.kExtendBoth);
  if (!iPoints.isEmpty()) {
    var center = iPoints.at(0);
    var midPoint = center.clone().addvec(intersectPoint.sub(center).normalize().mult(radius));
    var arc = new McDbArc();
    var bulge = MxCADUtility.calcBulge(segmentLine.startPoint, midPoint, segmentLine.endPoint).val;
    arc.computeArc(segmentLine.startPoint.x, segmentLine.startPoint.y, midPoint.x, midPoint.y, segmentLine.endPoint.x, segmentLine.endPoint.y);
    return {
      arc: arc,
      bulge: bulge,
      segmentLine: segmentLine,
      chamferDist: dist,
      center: center,
      midPoint: midPoint
    };
  } else {
    return;
  }
}
function calculateSlope(point1, point2) {
  return (point2.y - point1.y) / (point2.x - point1.x);
}
function areLinesCollinear(line, line1) {
  var slope1 = calculateSlope(line.startPoint, line.endPoint);
  var slope2 = calculateSlope(line1.startPoint, line1.endPoint);
  if (isNaN(slope1) && isNaN(slope2)) {
    return line.startPoint.x === line1.startPoint.x;
  } else {
    return slope1 === slope2;
  }
}
function calculateCenter(start, end, bulge) {
  var dist = start.distanceTo(end);
  var dx = dist / 2;
  var dy = dx * bulge;
  var r = (dx * dx + dy * dy) / (2 * dy);
  var midX = (start.x + end.x) / 2;
  var midY = (start.y + end.y) / 2;
  return new McGePoint3d(midX, midY).addvec(end.clone().sub(start).perpVector().normalize().mult(r - dy));
}

var MxAI = /*#__PURE__*/function () {
  function MxAI() {
    _classCallCheck$1(this, MxAI);
    _defineProperty(this, "serverUrl", "");
    _defineProperty(this, "mapFun", {});
  }
  _createClass$1(MxAI, [{
    key: "init",
    value: function init(serverUrl) {
      if (serverUrl.substring(0, 16) == "http://localhost") {
        serverUrl = getHostUrl() + serverUrl.substring(16);
      }
      this.serverUrl = serverUrl;
    }
  }, {
    key: "addFunction",
    value: function addFunction(name, call) {
      this.mapFun[name] = call;
    }
  }, {
    key: "registTool",
    value: function registTool(tool) {
      if (this.serverUrl.length == 0) return;
      var xhr = new XMLHttpRequest();
      var url = this.serverUrl + "/add_toolfun";
      xhr.open("POST", url);
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.send(JSON.stringify(tool));
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          console.log(xhr.responseText);
        }
      };
    }
  }, {
    key: "reloadTools",
    value: function reloadTools(param) {
      if (this.serverUrl.length == 0) return;
      var xhr = new XMLHttpRequest();
      var url = this.serverUrl + "/reload_toolfun";
      xhr.open("POST", url);
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.send(JSON.stringify(param));
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          console.log(xhr.responseText);
        }
      };
    }
  }, {
    key: "chat_tool",
    value: function chat_tool(str) {
      if (this.serverUrl.length == 0) return;
      var myThis = this;
      var data = {
        text: str
      };
      var xhr = new XMLHttpRequest();
      var url = this.serverUrl + "/post";
      xhr.open("POST", url);
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.send(JSON.stringify(data));
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          try {
            var ret = JSON.parse(xhr.responseText);
            var result = ret.results;
            if (result && result.name && myThis.mapFun[result.name]) {
              myThis.mapFun[result.name](result.parameters);
            }
          } catch (error) {
            console.log(error);
          }
        }
      };
    }
  }]);
  return MxAI;
}();

var McAppFunctonImp = /*#__PURE__*/function () {
  function McAppFunctonImp() {
    _classCallCheck$1(this, McAppFunctonImp);
    _defineProperty(this, "mapCppCall", {});
    _defineProperty(this, "currentOptNum", 1);
  }
  _createClass$1(McAppFunctonImp, [{
    key: "init",
    value: function init() {
      var win = window;
      var myThis = this;
      win.loadFonts_complete = function (lOptNum) {
        if (myThis.mapCppCall[lOptNum]) {
          myThis.mapCppCall[lOptNum]();
          delete myThis.mapCppCall[lOptNum];
        }
      };
    }
  }, {
    key: "loadFonts",
    value: function loadFonts(vecShxFonst, vecBigShxFonst, vecTureTypeFonts, retCall) {
      if (vecShxFonst.length == 0 && vecBigShxFonst.length == 0 && vecTureTypeFonts.length == 0) {
        retCall();
        return;
      }
      var aryFonts = new McGeStringArray();
      vecShxFonst.forEach(function (val) {
        aryFonts.append(val);
      });
      vecBigShxFonst.forEach(function (val) {
        aryFonts.append("{big}" + val);
      });
      vecTureTypeFonts.forEach(function (val) {
        aryFonts.append("{font}" + val);
      });
      this.currentOptNum++;
      this.mapCppCall[this.currentOptNum] = retCall;
      MxCpp.App.getImp().loadFonts(aryFonts.imp, this.currentOptNum);
    }
  }]);
  return McAppFunctonImp;
}();
var McAppFuncton = new McAppFunctonImp();

var FetchAttributes = /* @__PURE__ */function (FetchAttributes2) {
  FetchAttributes2[FetchAttributes2["EMSCRIPTEN_FETCH_LOAD_TO_MEMORY"] = 1] = "EMSCRIPTEN_FETCH_LOAD_TO_MEMORY";
  FetchAttributes2[FetchAttributes2["EMSCRIPTEN_FETCH_PERSIST_FILE"] = 4] = "EMSCRIPTEN_FETCH_PERSIST_FILE";
  FetchAttributes2[FetchAttributes2["EMSCRIPTEN_FETCH_APPEND"] = 8] = "EMSCRIPTEN_FETCH_APPEND";
  FetchAttributes2[FetchAttributes2["EMSCRIPTEN_FETCH_REPLACE"] = 16] = "EMSCRIPTEN_FETCH_REPLACE";
  return FetchAttributes2;
}(FetchAttributes || {});
var McObject = /*#__PURE__*/function () {
  function McObject(imp) {
    _classCallCheck$1(this, McObject);
    _defineProperty(this, "imp", void 0);
    _defineProperty(this, "event", {});
    _defineProperty(this, "currentFileName", "");
    _defineProperty(this, "currentOriginalFileName", "");
    _defineProperty(this, "firstTimeOpenFile", true);
    _defineProperty(this, "authorized_service", "");
    _defineProperty(this, "isInitMxObject", false);
    this.imp = imp;
  }
  _createClass$1(McObject, [{
    key: "creaeCallId",
    value: function creaeCallId() {
      return Math.round(Math.random() * 1e7);
    }
  }, {
    key: "setAttribute",
    value: function setAttribute(val) {
      return this.imp.setAttribute(JSON.stringify(val));
    }
  }, {
    key: "getMxDrawObject",
    value: function getMxDrawObject() {
      return this.imp["mxdrawObject"];
    }
  }, {
    key: "mxdraw",
    get: function get() {
      return this.imp["mxdrawObject"];
    }
  }, {
    key: "getImp",
    value: function getImp() {
      return this.imp;
    }
  }, {
    key: "init",
    value: function init(imp) {
      this.imp = imp;
    }
  }, {
    key: "create",
    value: function create(config) {
      createMxCad(config, this);
    }
  }, {
    key: "on",
    value: function on(name, fun) {
      if (this.event[name]) {
        if (this.event[name] instanceof Array) {
          if (!this.event[name].includes(fun)) {
            this.event[name].push(fun);
          }
        } else {
          var bakFun = this.event[name];
          if (bakFun == fun) return;
          this.event[name] = [];
          this.event[name].push(bakFun);
          this.event[name].push(fun);
        }
      } else {
        this.event[name] = fun;
      }
      if (this.isInitMxObject) {
        this.event = this.synchronizeMxDrawEvent(this.event);
      }
    }
  }, {
    key: "off",
    value: function off(name, fun) {
      if (!this.event[name]) return;
      if (!fun) {
        this.event[name] = [];
      } else {
        if (this.event[name] instanceof Array) {
          var index = this.event[name].indexOf(fun);
          if (index < 0) return;
          this.event[name].splice(index, 1);
        } else {
          if (this.event[name] === fun) {
            this.event[name] = [];
          }
        }
      }
    }
  }, {
    key: "callEvent",
    value: function callEvent(sEventName, param) {
      try {
        var calls = this.event[sEventName];
        if (!calls) return false;
        if (calls instanceof Array) {
          var ret = false;
          calls.forEach(function (val) {
            ret = val(param);
          });
          return ret;
        } else {
          return calls(param);
        }
      } catch (error) {
        console.log(error);
        throw error;
      }
    }
  }, {
    key: "synchronizeMxDrawEvent",
    value: function synchronizeMxDrawEvent(event) {
      var mxObject = this.getMxDrawObject().getMxObjectImplement();
      var tmp_is_mxcad_event = {
        selectChange: true,
        openFileComplete: true,
        init: true,
        init_mxdraw: true,
        init_mxcad: true,
        init_before_mxdraw: true
      };
      var tmp_event = {};
      for (var name in event) {
        var call = event[name];
        if (tmp_is_mxcad_event[name]) {
          tmp_event[name] = call;
          continue;
        }
        if (call instanceof Array) {
          call.forEach(function (val) {
            mxObject.addEvent(name, val);
          });
        } else {
          mxObject.addEvent(name, call);
        }
      }
      return tmp_event;
    }
  }, {
    key: "initMxObject",
    value: function initMxObject(mxObject) {
      var _this = this;
      this.isInitMxObject = true;
      if (!mxObject.tmp) mxObject.tmp = new MxDrawObject(mxObject);
      this.imp["mxdrawObject"] = mxObject.tmp;
      mxObject.addEvent("selectChange", function (id) {
        var ids = [];
        id.forEach(function (val) {
          ids.push(new McObjectId(val, McObjectIdType.kMxCAD));
        });
        var mxids = mxObject.getMxAllSelect();
        mxids.forEach(function (val) {
          ids.push(new McObjectId(val, McObjectIdType.kMxDraw));
        });
        _this.callEvent("selectChange", ids);
      });
      mxObject.addEvent("mxdrawSelectChange", function (id) {
        var ids = [];
        id.forEach(function (val) {
          ids.push(new McObjectId(val, McObjectIdType.kMxDraw));
        });
        var cadids = mxObject.getMxCADAllSelect();
        cadids.forEach(function (val) {
          ids.push(new McObjectId(val, McObjectIdType.kMxCAD));
        });
        _this.callEvent("selectChange", ids);
      });
      var myThis = this;
      mxObject.addEvent("openFileComplete", function () {
        _this.callEvent("openFileComplete", myThis);
      });
      this.event = this.synchronizeMxDrawEvent(this.event);
    }
  }, {
    key: "regen",
    value: function regen() {
      var _this2 = this;
      var delayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (delayTime <= 0) {
        this.imp.regen();
      } else {
        setTimeout(function () {
          _this2.imp.regen();
          _this2.updateDisplay(false);
        }, delayTime);
      }
    }
  }, {
    key: "zoomAll",
    value: function zoomAll() {
      var autoRegen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var box = this.database.currentSpace.getBoundingBox();
      if (!box.ret) return false;
      var mxobj = this.getMxDrawObject();
      mxobj.zoomW(box.minPt.toVector3(), box.maxPt.toVector3(), void 0, void 0, autoRegen);
      return true;
    }
  }, {
    key: "zoomScale",
    value: function zoomScale(scale) {
      this.getMxDrawObject().zoomScale(scale);
    }
  }, {
    key: "addCurrentSelect",
    value: function addCurrentSelect(id) {
      var _this3 = this;
      var isDisplayGrid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (id instanceof Array) {
        var isFireSelectEvent = false;
        var isFireMxCADSelectEvent = false;
        id.forEach(function (val) {
          if (val.type == McObjectIdType.kMxDraw) {
            if (_this3.getMxDrawObject().addMxCurrentSelect(val.id, false, isDisplayGrid)) {
              isFireSelectEvent = true;
            }
          } else if (val.type == McObjectIdType.kMxCAD) {
            if (_this3.getMxDrawObject().addMxCADCurrentSelect(val.id, false, isDisplayGrid)) {
              isFireMxCADSelectEvent = true;
            }
          }
        });
        if (isFireSelectEvent) {
          this.getMxDrawObject().fireSelectChange(false);
        }
        if (isFireMxCADSelectEvent) {
          this.getMxDrawObject().fireSelectChange(true);
        }
      } else {
        if (id.type == McObjectIdType.kMxDraw) {
          this.getMxDrawObject().addMxCurrentSelect(id.id, true, isDisplayGrid);
        } else if (id.type == McObjectIdType.kMxCAD) {
          this.getMxDrawObject().addMxCADCurrentSelect(id.id, true, isDisplayGrid);
        }
      }
    }
  }, {
    key: "clearMxCurrentSelect",
    value: function clearMxCurrentSelect() {
      this.getMxDrawObject().clearMxCurrentSelect();
    }
  }, {
    key: "zoomW",
    value: function zoomW(minPt, maxPt) {
      var mxobj = this.getMxDrawObject();
      mxobj.zoomW(minPt.toVector3(), maxPt.toVector3());
    }
  }, {
    key: "zoomCenter",
    value: function zoomCenter(dCenX, dCenY) {
      var mxobj = this.getMxDrawObject();
      mxobj.zoomCenter(dCenX, dCenY);
    }
  }, {
    key: "zoomAngle",
    value: function zoomAngle(viewangle) {
      var mxobj = this.getMxDrawObject();
      mxobj.setViewAngle(viewangle);
      this.updateDisplay(false, 100);
    }
  }, {
    key: "openWebFile",
    value: function openWebFile(sFileUrl, retCall) {
      var isWorkThread = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var initialParameter = arguments.length > 3 ? arguments[3] : undefined;
      var fetchAttributes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var isFetchTzFile = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
      var mxObject = this.imp["mxdrawObject"];
      var lOptID = Math.round(Math.random() * 1e7);
      if (retCall) {
        var win = window;
        win["mx_exception handling"] = function () {
          win["mx_exception handling"] = void 0;
          retCall(-10);
        };
        var funOpenCall = function funOpenCall(iRet, valId) {
          if (lOptID != valId) return;
          win["mx_exception handling"] = void 0;
          mxObject.removeEventFuction("openFileComplete", funOpenCall);
          retCall(iRet);
        };
        mxObject.addEvent("openFileComplete", funOpenCall);
      }
      this.currentFileName = sFileUrl.split("/").pop();
      this.currentOriginalFileName = this.currentFileName;
      var sParam = "";
      if (initialParameter) {
        sParam = JSON.stringify(initialParameter);
      }
      if (!this.firstTimeOpenFile) {
        this.getMxDrawObject().clearAllObject();
      }
      this.firstTimeOpenFile = false;
      var iCodeVersion = MxCpp.App.getImp().getCodeVersion();
      if (iCodeVersion == 3) {
        var sAUrl = "";
        if (this.authorized_service.length != 0) {
          if (this.authorized_service == "same_current_page_url") {
            var port = window.location.port;
            if (port == "80") {
              sAUrl = getHostUrl() + "/create_app_param";
            } else {
              sAUrl = getHostUrl() + ":" + port + "/create_app_param";
            }
          } else {
            sAUrl = this.authorized_service;
          }
        } else {
          sAUrl = getHostUrl() + ":3090/create_app_param";
        }
        var myThis = this;
        var xhr = new XMLHttpRequest();
        xhr.open("POST", sAUrl);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onreadystatechange = function () {
          if (xhr.status === 200) {
            if (xhr.readyState === 4) {
              if (!xhr.responseText || xhr.responseText.length == 0) {
                myThis.imp.openWebFile("", isWorkThread, lOptID, sParam, fetchAttributes, isFetchTzFile);
                console.log("MxTip:authorized service retrun error!");
              } else {
                myThis.imp.openWebFile(xhr.responseText, isWorkThread, lOptID, sParam, fetchAttributes, isFetchTzFile);
              }
            }
          } else {
            myThis.imp.openWebFile("", isWorkThread, lOptID, sParam, fetchAttributes, isFetchTzFile);
            console.log("MxTip:authorized service net error!");
          }
        };
        xhr.send(JSON.stringify({
          param: MxCpp.App.getImp().createAppParam(sFileUrl)
        }));
        return true;
      } else {
        return this.imp.openWebFile(sFileUrl, isWorkThread, lOptID, sParam, fetchAttributes, isFetchTzFile);
      }
    }
  }, {
    key: "newFile",
    value: function newFile() {
      this.currentFileName = "";
      this.currentOriginalFileName = "";
      this.getMxDrawObject().clearAllObject();
      return this.imp.newFile();
    }
  }, {
    key: "insertBlock",
    value: function insertBlock(sFileUrl, sBlkName) {
      var _this4 = this;
      var isWorkThread = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var fetchAttributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var isUpdataInsertBlock = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var isUpdataSameNameBlock = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      var mxObject = this.imp["mxdrawObject"];
      var lCallID = Math.round(Math.random() * 1e7);
      return new Promise(function (resolve) {
        var funCall = function funCall(strparam) {
          if (!strparam || strparam.length == 0) {
            resolve(new McObjectId());
          }
          var param = JSON.parse(strparam);
          if (param.callid != lCallID) return;
          mxObject.removeEventFuction("insertBlockComplete", funCall);
          if (param.result != 0) {
            console.log("insertBlock result:" + param.result);
          }
          resolve(new McObjectId(param.blkrecid, McObjectIdType.kMxCAD));
        };
        mxObject.addEvent("insertBlockComplete", funCall);
        var initialParameter = "";
        _this4.imp.insertBlock(sFileUrl, MxG2312Obj.encodeToGb2312(sBlkName), isWorkThread, lCallID, initialParameter, fetchAttributes, isUpdataInsertBlock, isUpdataSameNameBlock);
      });
    }
  }, {
    key: "getCurrentFileName",
    value: function getCurrentFileName() {
      return this.currentFileName;
    }
  }, {
    key: "setCurrentFileName",
    value: function setCurrentFileName(fileName) {
      this.currentFileName = fileName;
    }
  }, {
    key: "getCurrentOriginaFileName",
    value: function getCurrentOriginaFileName() {
      return this.currentOriginalFileName;
    }
  }, {
    key: "setCurrentOriginaFileName",
    value: function setCurrentOriginaFileName(fileName) {
      this.currentOriginalFileName = fileName;
    }
  }, {
    key: "saveFileToUrl",
    value: function saveFileToUrl(sSaveProgramUrl, call, filename, param) {
      var mxmemory = this.imp.saveFileToMemory();
      if (mxmemory.getSize() == 0) {
        call(-1, "save failed");
        return false;
      }
      var dataptr = mxmemory.getData();
      var size = mxmemory.getSize();
      var wasmMemoryHEAPU8 = MxCpp.mxcadassemblyimp.HEAPU8;
      var binaryData = wasmMemoryHEAPU8.subarray(dataptr, dataptr + size);
      var arrayBuffer = new ArrayBuffer(mxmemory.getSize());
      var arrayBufferView = new Uint8Array(arrayBuffer);
      arrayBufferView.set(binaryData);
      mxmemory.clear();
      MxTools.postMemoryFile(arrayBufferView, sSaveProgramUrl, filename || "temp.mxweb", call, param);
      return true;
    }
  }, {
    key: "saveFile",
    value: function saveFile(filename, call) {
      var isDownland = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var isShowSaveFileDialog = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var parameter = arguments.length > 4 ? arguments[4] : undefined;
      if (!filename) {
        filename = this.getCurrentFileName();
        if (filename.length == 0) {
          filename = "temp_empty.mxweb";
        }
      }
      if (filename.indexOf(".") == -1) {
        filename += ".mxweb";
      } else if (filename.substring(filename.length - 6) != ".mxweb") {
        filename += ".mxweb";
      }
      var win = window;
      win["mx_saveFile_call"] = function (data) {
        if (call) call(data);
        if (!data) return;
        if (isDownland) {
          var blob;
          var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
          if (isSafari) {
            blob = new Blob([data.buffer], {
              type: "application/octet-stream"
            });
          } else {
            blob = new Blob([data.buffer], {
              type: "application/octet-binary"
            });
          }
          if (isShowSaveFileDialog) {
            MxTools.saveAsFileDialog({
              blob: blob,
              filename: filename,
              types: [{
                description: "mxweb File",
                accept: {
                  "application/octet-stream": [".mxweb"]
                }
              }]
            });
          } else {
            MxTools.downloadFile(blob, filename);
          }
        }
        win["mx_saveFile_call"] = null;
      };
      var sParam = "";
      if (parameter) {
        sParam = JSON.stringify(parameter);
      }
      return this.imp.saveFile(filename, sParam);
    }
  }, {
    key: "getDatabase",
    value: function getDatabase() {
      if (!this.imp["McDbDatabase"]) {
        this.imp["McDbDatabase"] = new McDbDatabase(this.imp.GetDatabase());
      }
      return this.imp["McDbDatabase"];
    }
  }, {
    key: "database",
    get: function get() {
      return this.getDatabase();
    }
  }, {
    key: "setBrowse",
    value: function setBrowse(browse) {
      this.imp.setBrowse(browse);
      if (browse) {
        MxFun.setIniset({
          ForbiddenDynInput: true
        });
      }
    }
  }, {
    key: "getSysVarString",
    value: function getSysVarString(varName) {
      return this.imp.GetSysVarString(varName);
    }
  }, {
    key: "setSysVarString",
    value: function setSysVarString(varName, val) {
      return this.imp.SetSysVarString(varName, val);
    }
  }, {
    key: "getSysVarDouble",
    value: function getSysVarDouble(varName) {
      return this.imp.GetSysVarDouble(varName);
    }
  }, {
    key: "getSysVarPoint",
    value: function getSysVarPoint(varName) {
      return new McGePoint3d(this.imp.GetSysVarPoint(varName));
    }
  }, {
    key: "setSysVarPoint",
    value: function setSysVarPoint(varName, pt) {
      return this.imp.SetSysVarPoint(varName, pt.imp, false);
    }
  }, {
    key: "setSysVarPoint2d",
    value: function setSysVarPoint2d(varName, pt) {
      return this.imp.SetSysVarPoint(varName, pt.imp, true);
    }
  }, {
    key: "setSysVarDouble",
    value: function setSysVarDouble(varName, val) {
      return this.imp.SetSysVarDouble(varName, val);
    }
  }, {
    key: "getSysVarLong",
    value: function getSysVarLong(varName) {
      return this.imp.GetSysVarLong(varName);
    }
  }, {
    key: "setSysVarLong",
    value: function setSysVarLong(varName, val) {
      return this.imp.SetSysVarLong(varName, val);
    }
  }, {
    key: "drawColor",
    get: function get() {
      return new McCmColor(this.imp.GetDrawColor());
    },
    set: function set(val) {
      this.imp.SetDrawColor(val.getImp());
    }
  }, {
    key: "drawColorIndex",
    get: function get() {
      return this.imp.GetDrawColor().colorIndex;
    },
    set: function set(val) {
      var color = new McCmColor();
      color.setColorIndex(val);
      this.imp.SetDrawColor(color.getImp());
    }
  }, {
    key: "drawLineWeight",
    get: function get() {
      return this.imp.GetDrawLineWeight();
    },
    set: function set(val) {
      this.imp.SetDrawLineWeight(val);
    }
  }, {
    key: "drawLineTypeScale",
    get: function get() {
      return this.imp.GetDrawLineTypeScale();
    },
    set: function set(val) {
      this.imp.SetDrawLineTypeScale(val);
    }
  }, {
    key: "drawLinetype",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.GetDrawLinetype());
    },
    set: function set(val) {
      this.imp.SetDrawLinetype(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "drawTextStyle",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.GetDrawTextStyle());
    },
    set: function set(val) {
      this.imp.SetDrawTextStyle(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "drawLayer",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.GetDrawLayer());
    },
    set: function set(val) {
      this.imp.SetDrawLayer(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "addLayer",
    value: function addLayer(string) {
      return new McObjectId(this.imp.AddLayer(MxG2312Obj.encodeToGb2312(string)));
    }
  }, {
    key: "addTextStyle",
    value: function addTextStyle(sName, sFileName, sBigFontFileName) {
      var dXScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      return new McObjectId(this.imp.AddTextStyle(MxG2312Obj.encodeToGb2312(sName), MxG2312Obj.encodeToGb2312(sFileName), MxG2312Obj.encodeToGb2312(sBigFontFileName), dXScale));
    }
  }, {
    key: "AddTureTypeTextStyle",
    value: function AddTureTypeTextStyle(sName) {
      var sTrueTypeFontName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var dXScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      return new McObjectId(this.imp.AddTureTypeTextStyle(MxG2312Obj.encodeToGb2312(sName), MxG2312Obj.encodeToGb2312(sTrueTypeFontName), dXScale));
    }
  }, {
    key: "addLinetype",
    value: function addLinetype(sName, sLineDefine) {
      return new McObjectId(this.imp.AddLinetype(MxG2312Obj.encodeToGb2312(sName), MxG2312Obj.encodeToGb2312(sLineDefine)));
    }
  }, {
    key: "addLinetypeEx",
    value: function addLinetypeEx(sName, sLineDefine) {
      var sTextStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      return new McObjectId(this.imp.AddLinetypeEx(MxG2312Obj.encodeToGb2312(sName), MxG2312Obj.encodeToGb2312(sLineDefine), MxG2312Obj.encodeToGb2312(sTextStyle)));
    }
  }, {
    key: "drawLine",
    value: function drawLine(dX1, dY1, dX2, dY2) {
      return new McObjectId(this.imp.DrawLine(dX1, dY1, 0, dX2, dY2, 0));
    }
  }, {
    key: "drawLine3d",
    value: function drawLine3d(dX1, dY1, dZ1, dX2, dY2, dZ2) {
      return new McObjectId(this.imp.DrawLine(dX1, dY1, dZ1, dX2, dY2, dZ2));
    }
  }, {
    key: "addDimStyle",
    value: function addDimStyle(pszName, pszDoubleData, pszIntData, pszStringData, pszIdData) {
      return new McObjectId(this.imp.AddDimStyle(MxG2312Obj.encodeToGb2312(pszName), MxG2312Obj.encodeToGb2312(pszDoubleData), MxG2312Obj.encodeToGb2312(pszIntData), MxG2312Obj.encodeToGb2312(pszStringData), MxG2312Obj.encodeToGb2312(pszIdData)));
    }
  }, {
    key: "drawDimStyle",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.GetDrawDimStyle());
    },
    set: function set(val) {
      this.imp.SetDrawDimStyle(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "pathMakeExclude",
    value: function pathMakeExclude(isExclude) {
      this.imp.PathMakeExclude(isExclude);
    }
  }, {
    key: "addPatternDefinition",
    value: function addPatternDefinition(sName, sDefinitionData) {
      this.imp.AddPatternDefinition(MxG2312Obj.encodeToGb2312(sName), MxG2312Obj.encodeToGb2312(sDefinitionData));
    }
  }, {
    key: "drawPatternDefinition",
    get: function get() {
      return MxG2312Obj.decodeFromGb2312(this.imp.GetPatternDefinition());
    },
    set: function set(val) {
      this.imp.SetPatternDefinition(MxG2312Obj.encodeToGb2312(val));
    }
  }, {
    key: "drawLineWidth",
    get: function get() {
      return this.imp.GetDrawLineWidth();
    },
    set: function set(val) {
      this.imp.SetDrawLineWidth(val);
    }
  }, {
    key: "drawUseDefaultProperties",
    get: function get() {
      return this.imp.GetDrawUseDefaultProperties();
    },
    set: function set(val) {
      this.imp.SetDrawUseDefaultProperties(val);
    }
  }, {
    key: "drawArc",
    value: function drawArc(dCenterX, dCenterY, dRadius, dStartAng, dEndAng) {
      return new McObjectId(this.imp.DrawArc(dCenterX, dCenterY, dRadius, dStartAng, dEndAng));
    }
  }, {
    key: "drawArc2",
    value: function drawArc2(dStartPointX, dStartPointY, dMidPointX, dMidPointY, dEndPointX, dEndPointY) {
      return new McObjectId(this.imp.DrawArc2(dStartPointX, dStartPointY, dMidPointX, dMidPointY, dEndPointX, dEndPointY));
    }
  }, {
    key: "drawArc3",
    value: function drawArc3(dStartPointX, dStartPointY, dEndPointX, dEndPointY, dBulge) {
      return new McObjectId(this.imp.DrawArc3(dStartPointX, dStartPointY, dEndPointX, dEndPointY, dBulge));
    }
  }, {
    key: "drawCircle",
    value: function drawCircle(dCenterX, dCenterY, dRadius) {
      return new McObjectId(this.imp.DrawCircle(dCenterX, dCenterY, dRadius));
    }
  }, {
    key: "loadImage",
    value: function loadImage(imageUrl, call) {
      var imageFileName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      this.imp["mxdrawObject"].getMxObjectImplement().loadMxCADImage(imageUrl, call, imageFileName);
    }
  }, {
    key: "drawImage",
    value: function drawImage(dPosX, dPosY, dWidth, dHeight, dAng, imageUrl) {
      var isConvertBase64 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
      var dwgImageSizeWidth = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;
      var dwgImageSizeHeight = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
      return new McObjectId(this.imp.DrawImage(dPosX, dPosY, dWidth, dHeight, dAng, MxG2312Obj.encodeToGb2312(imageUrl), isConvertBase64, dwgImageSizeWidth, dwgImageSizeHeight));
    }
  }, {
    key: "addImageDefine",
    value: function addImageDefine(imageUrl) {
      var sName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var isConvertBase64 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return new McObjectId(this.imp.addImageDefine(MxG2312Obj.encodeToGb2312(imageUrl), MxG2312Obj.encodeToGb2312(sName), isConvertBase64));
    }
  }, {
    key: "showLineWeight",
    value: function showLineWeight(isShow) {
      var ret = this.imp.showLineWeight(isShow);
      this.updateDisplay(false);
      return ret;
    }
  }, {
    key: "loadDwgBackground",
    value: function loadDwgBackground(sFileUrl, call) {
      var _this5 = this;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var isShow = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var callID = this.creaeCallId();
      var mxObject = this.imp["mxdrawObject"];
      var funOpenCall = function funOpenCall(param) {
        param = JSON.parse(param);
        if (param.callid != callID) return;
        mxObject.removeEventFuction("load_dwg_gackground_result", funOpenCall);
        call(param.l_param == 1);
        if (param.l_param == 1 && isShow) {
          _this5.regen(100);
        }
      };
      mxObject.addEvent("load_dwg_gackground_result", funOpenCall);
      this.imp.loadDwgBackground(sFileUrl, color, callID, isShow);
    }
  }, {
    key: "getBackgroundEntity",
    value: function getBackgroundEntity() {
      return new McDbBackgroundEntity(this.imp.GetBackgroundEntity());
    }
  }, {
    key: "clearDwgBackground",
    value: function clearDwgBackground() {
      this.getBackgroundEntity().clearAll();
    }
  }, {
    key: "addSystemVarNameForEvent",
    value: function addSystemVarNameForEvent(aryVarName) {
      var _this6 = this;
      aryVarName.forEach(function (val) {
        _this6.imp.addSystemVarNameForEvent(val);
      });
    }
  }, {
    key: "drawEllipse",
    value: function drawEllipse(dCenterX, dCenterY, dMajorAxisX, dMajorAxisY, dRadiusRatio) {
      return new McObjectId(this.imp.DrawEllipse(dCenterX, dCenterY, dMajorAxisX, dMajorAxisY, dRadiusRatio));
    }
  }, {
    key: "drawEllipseArc",
    value: function drawEllipseArc(dCenterX, dCenterY, dMajorAxisX, dMajorAxisY, dRadiusRatio, dStartAng, dEndAng) {
      return new McObjectId(this.imp.DrawEllipseArc(dCenterX, dCenterY, dMajorAxisX, dMajorAxisY, dRadiusRatio, dStartAng, dEndAng));
    }
  }, {
    key: "drawPoint",
    value: function drawPoint(dX, dY) {
      return new McObjectId(this.imp.DrawPoint(dX, dY));
    }
  }, {
    key: "drawSolid",
    value: function drawSolid(dX1, dY1, dX2, dY2, dX3, dY3, dX4, dY4) {
      return new McObjectId(this.imp.DrawSolid(dX1, dY1, dX2, dY2, dX3, dY3, dX4, dY4));
    }
  }, {
    key: "drawMText",
    value: function drawMText(dPosX, dPosY, sContents, dHeight, dWidth, dRotation, iAttachment) {
      return new McObjectId(this.imp.DrawMText(dPosX, dPosY, MxG2312Obj.encodeToGb2312(sContents), dHeight, dWidth, dRotation, iAttachment));
    }
  }, {
    key: "drawText",
    value: function drawText(dPosX, dPosY, pszText, dHeight, dRotation, horizontalMode, verticalMode) {
      return new McObjectId(this.imp.DrawText(dPosX, dPosY, MxG2312Obj.encodeToGb2312(pszText), dHeight, dRotation, horizontalMode, verticalMode));
    }
  }, {
    key: "drawBlockReference",
    value: function drawBlockReference(dPosX, dPosY, sBlkName, dScale, dAng) {
      return new McObjectId(this.imp.DrawBlockReference(dPosX, dPosY, MxG2312Obj.encodeToGb2312(sBlkName), dScale, dAng));
    }
  }, {
    key: "drawDimAligned",
    value: function drawDimAligned(dExtLine1PointX, dExtLine1PointY, dExtLine2PointX, dExtLine2PointY, dTextPositionX, dTextPositionY) {
      return new McObjectId(this.imp.DrawDimAligned(dExtLine1PointX, dExtLine1PointY, dExtLine2PointX, dExtLine2PointY, dTextPositionX, dTextPositionY));
    }
  }, {
    key: "drawDimAngular",
    value: function drawDimAngular(dAngleVertexX, dAngleVertexY, dFirstEndPointX, dFirstEndPointY, dSecondEndPointX, dSecondEndPointY, dTextPointX, dTextPointY) {
      return new McObjectId(this.imp.DrawDimAngular(dAngleVertexX, dAngleVertexY, dFirstEndPointX, dFirstEndPointY, dSecondEndPointX, dSecondEndPointY, dTextPointX, dTextPointY));
    }
  }, {
    key: "drawDimDiametric",
    value: function drawDimDiametric(dChordPointX, dChordPointY, dFarChordPointX, dFarChordPointY, dLeaderLength) {
      return new McObjectId(this.imp.DrawDimDiametric(dChordPointX, dChordPointY, dFarChordPointX, dFarChordPointY, dLeaderLength));
    }
  }, {
    key: "drawDimRotated",
    value: function drawDimRotated(dExtLine1PointX, dExtLine1PointY, dExtLine2PointX, dExtLine2PointY, dDimLineLocationX, dDimLineLocationY, dRotationAngle) {
      return new McObjectId(this.imp.DrawDimRotated(dExtLine1PointX, dExtLine1PointY, dExtLine2PointX, dExtLine2PointY, dDimLineLocationX, dDimLineLocationY, dRotationAngle));
    }
  }, {
    key: "drawDimOrdinate",
    value: function drawDimOrdinate(dDefinitionPointX, dDefinitionPointY, dDeaderEndPointX, dDeaderEndPointY, isUseXAxis) {
      return new McObjectId(this.imp.DrawDimOrdinate(dDefinitionPointX, dDefinitionPointY, dDeaderEndPointX, dDeaderEndPointY, isUseXAxis));
    }
  }, {
    key: "drawDimRadial",
    value: function drawDimRadial(dCenterX, dCenterY, dChordPointX, dChordPointY, dLeaderLength) {
      return new McObjectId(this.imp.DrawDimRadial(dCenterX, dCenterY, dChordPointX, dChordPointY, dLeaderLength));
    }
  }, {
    key: "pathMoveTo",
    value: function pathMoveTo(dX, dY) {
      this.imp.PathMoveTo(dX, dY);
    }
  }, {
    key: "pathMoveToEx",
    value: function pathMoveToEx(dX, dY, dStartWidth, dEndWidth, dBulge) {
      this.imp.PathMoveToEx(dX, dY, dStartWidth, dEndWidth, dBulge);
    }
  }, {
    key: "pathLineTo",
    value: function pathLineTo(dX, dY) {
      this.imp.PathLineTo(dX, dY);
    }
  }, {
    key: "pathLineToEx",
    value: function pathLineToEx(dX, dY, dStartWidth, dEndWidth, dBulge) {
      this.imp.PathLineToEx(dX, dY, dStartWidth, dEndWidth, dBulge);
    }
  }, {
    key: "pathCircle",
    value: function pathCircle(dCenX, dCenY, dR) {
      var dPrecision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var dWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      return this.imp.PathCircle(dCenX, dCenY, dR, dPrecision, dWidth);
    }
  }, {
    key: "drawPathToPolyline",
    value: function drawPathToPolyline() {
      return new McObjectId(this.imp.DrawPathToPolyline());
    }
  }, {
    key: "drawPathToSpline",
    value: function drawPathToSpline() {
      return new McObjectId(this.imp.DrawPathToSpline());
    }
  }, {
    key: "pathMakeClosed",
    value: function pathMakeClosed() {
      this.imp.PathMakeClosed();
    }
  }, {
    key: "drawPathToHatch",
    value: function drawPathToHatch() {
      var dPatternScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new McObjectId(this.imp.DrawPathToHatch(dPatternScale));
    }
  }, {
    key: "drawEntity",
    value: function drawEntity(entity) {
      var isUseDatabaseCurrentProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var isSync = entity.syncData(true);
      var ret = new McObjectId(this.imp.DrawEntity(entity.getImp(), isUseDatabaseCurrentProperties));
      if (isSync) {
        MxCustomEntityManager.getObjectFormId(ret);
      }
      return ret;
    }
  }, {
    key: "drawHatch",
    value: function drawHatch(hatch) {
      var dPatternScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return new McObjectId(this.imp.DrawHatch(hatch.getImp(), dPatternScale));
    }
  }, {
    key: "objectIdToObject",
    value: function objectIdToObject(lIdIndex) {
      return MxCpp.App.objectIdToObject(lIdIndex);
    }
  }, {
    key: "destroyObject",
    value: function destroyObject(pObjectImp) {
      if (!pObjectImp) return;
      MxCpp.App.getImp().DestroyObject(pObjectImp);
    }
  }, {
    key: "getAllLayoutName",
    value: function getAllLayoutName() {
      return new McGeStringArray(this.imp.GetAllLayoutName());
    }
  }, {
    key: "setCurrentLayout",
    value: function setCurrentLayout(layoutName) {
      this.imp.SetCurrentLayout(MxG2312Obj.encodeToGb2312(layoutName));
    }
  }, {
    key: "getMxCpp",
    value: function getMxCpp() {
      return MxCpp;
    }
  }, {
    key: "getViewCADCoord",
    value: function getViewCADCoord() {
      var ret = this.getMxDrawObject().getViewDocCoord();
      return {
        pt1: new McGePoint3d(ret.pt1),
        pt2: new McGePoint3d(ret.pt2),
        pt3: new McGePoint3d(ret.pt3),
        pt4: new McGePoint3d(ret.pt4)
      };
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this7 = this;
      var isImmediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var delayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (delayTime <= 0) {
        this.imp["mxdrawObject"].updateDisplay(isImmediate);
      } else {
        setTimeout(function () {
          _this7.imp["mxdrawObject"].updateDisplay(isImmediate);
        }, delayTime);
      }
    }
  }, {
    key: "updateLayerDisplayStatus",
    value: function updateLayerDisplayStatus() {
      this.imp.UpdateLayerDisplayStatus();
    }
  }, {
    key: "initRegist",
    value: function initRegist(sRegist) {
      this.imp.initRegist(sRegist);
    }
  }, {
    key: "iniAuthorizedService",
    value: function iniAuthorizedService(sUrl) {
      this.imp.initAuthorizedService(sUrl);
      this.authorized_service = sUrl;
    }
  }, {
    key: "isTryVersion",
    value: function isTryVersion() {
      return this.imp.isTryVersion();
    }
  }, {
    key: "setViewBackgroundColor",
    value: function setViewBackgroundColor(red, green, blue) {
      var mxobj = this.getMxDrawObject();
      if (mxobj) {
        mxobj.setViewColor(red << 16 | green << 8 | blue);
      }
      return this.imp.setViewBackgroundColor(red, green, blue);
    }
  }, {
    key: "getCurrentDatabaseDrawColor",
    value: function getCurrentDatabaseDrawColor() {
      var ary = this.getDatabase().getImp().GetCurrentlyDrawColor();
      var lWhiteViewColor = this.getMxDrawObject().isWhiteViewColor();
      var r = ary.at(0);
      var g = ary.at(1);
      var b = ary.at(2);
      if (lWhiteViewColor) {
        if (r == 255 && g == 255 && b == 255) {
          r = 0;
          g = 0;
          b = 0;
        }
      } else {
        if (r == 0 && g == 0 && b == 0) {
          r = 255;
          g = 255;
          b = 255;
        }
      }
      var ret = new THREE.Color();
      ret.setRGB(r / 255, g / 255, b / 255);
      return ret;
    }
  }, {
    key: "undo",
    value: function undo() {
      this.imp.undo();
      this.updateDisplay(false);
    }
  }, {
    key: "redo",
    value: function redo() {
      this.imp.redo();
      this.updateDisplay();
    }
  }, {
    key: "undoMark",
    value: function undoMark() {
      this.imp.undoMark();
    }
  }]);
  return McObject;
}();
var McAppType = /*#__PURE__*/function () {
  function McAppType() {
    _classCallCheck$1(this, McAppType);
    _defineProperty(this, "imp", void 0);
    _defineProperty(this, "MxCADAssist", void 0);
    _defineProperty(this, "objectIdToObjectCalls", {});
    _defineProperty(this, "classNameToCreateCalls", {});
    _defineProperty(this, "shxFonts", ["txt.shx"]);
    _defineProperty(this, "shxBigFonts", ["hztxt.shx"]);
    _defineProperty(this, "trueFonts", {
      syadobe: {
        name: "syadobe",
        zhname: "\\u601D\\u539F\\u9ED1\\u4F53",
        file: "syadobe.otf"
      }
    });
    _defineProperty(this, "dMcGeBakTol", -1);
  }
  _createClass$1(McAppType, [{
    key: "init",
    value: function init(imp) {
      this.imp = imp;
      McGeVector3d.kZAxis = new McGeVector3d(0, 0, 1);
      McGeVector3d.kNegateZAxis = new McGeVector3d(0, 0, -1);
      McGeVector3d.kXAxis = new McGeVector3d(1, 0, 0);
      McGeVector3d.kYAxis = new McGeVector3d(0, 1, 0);
      McGeVector3d.kIdentity = new McGeVector3d(0, 0, 0);
      McGePoint3d.kOrigin = new McGePoint3d(0, 0, 0);
      McGeMatrix3d.kIdentity = new McGeMatrix3d();
      this.MxCADAssist = new MxCpp.mxcadassemblyimp.MxDrawAssist();
      this.initCalls();
      McAppFuncton.init();
    }
  }, {
    key: "getImp",
    value: function getImp() {
      return this.imp;
    }
  }, {
    key: "getLastCallResult",
    value: function getLastCallResult() {
      return this.imp.getLastCallResult();
    }
  }, {
    key: "destroyObject",
    value: function destroyObject(pObject) {
      this.imp.DestroyObject(pObject);
    }
  }, {
    key: "getCurrentMxCAD",
    value: function getCurrentMxCAD() {
      var currentMxCADImp = this.imp.GetCurrentMxDraw();
      if (!currentMxCADImp["McObject"]) {
        currentMxCADImp["McObject"] = new McObject(this.imp.GetCurrentMxDraw());
      }
      return currentMxCADImp["McObject"];
    }
  }, {
    key: "mcedRGB2Index",
    value: function mcedRGB2Index(red, green, blue) {
      var bAutoNearest = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      return this.imp.mcedRGB2Index(red, green, blue, bAutoNearest);
    }
  }, {
    key: "setDefaultViewBackgroundColor",
    value: function setDefaultViewBackgroundColor(red, green, blue) {
      return this.imp.setDefaultViewBackgroundColor(red, green, blue);
    }
  }, {
    key: "objectIdIsKindOf",
    value: function objectIdIsKindOf(lIdIndex, className) {
      return this.imp.ObjectIdIsKindOf(lIdIndex, className);
    }
  }, {
    key: "initCalls",
    value: function initCalls() {
      var _this8 = this;
      this.objectIdToObjectCalls["McDbCurve"] = function (lIdIndex) {
        return new McDbCurve(_this8.imp.ObjectIdToMdDbCurve(lIdIndex));
      };
      this.objectIdToObjectCalls["McDbEntity"] = function (lIdIndex) {
        return new McDbEntity(_this8.imp.ObjectIdToMdDbEntity(lIdIndex));
      };
      this.objectIdToObjectCalls["McDbDimension"] = function (lIdIndex) {
        return new McDbDimension(_this8.imp.ObjectIdToMdDbDimension(lIdIndex));
      };
      this.classNameToCreateCalls["McDbDimension"] = function () {
        return new McDbDimension();
      };
      this.objectIdToObjectCalls["McDbLine"] = function (lIdIndex) {
        return new McDbLine(_this8.imp.ObjectIdToMdDbLine(lIdIndex));
      };
      this.classNameToCreateCalls["McDbLine"] = function () {
        return new McDbLine();
      };
      this.objectIdToObjectCalls["McDbText"] = function (lIdIndex) {
        return new McDbText(_this8.imp.ObjectIdToMdDbText(lIdIndex));
      };
      this.classNameToCreateCalls["McDbText"] = function () {
        return new McDbText();
      };
      this.objectIdToObjectCalls["McDbAttribute"] = function (lIdIndex) {
        return new McDbAttribute(_this8.imp.ObjectIdToMdDbAttribute(lIdIndex));
      };
      this.classNameToCreateCalls["McDbAttribute"] = function () {
        return new McDbAttribute();
      };
      this.objectIdToObjectCalls["McDbAttributeDefinition"] = function (lIdIndex) {
        return new McDbAttributeDefinition(_this8.imp.ObjectIdToMdDbAttributeDefinition(lIdIndex));
      };
      this.classNameToCreateCalls["McDbAttributeDefinition"] = function () {
        return new McDbAttributeDefinition();
      };
      this.objectIdToObjectCalls["McDbPolyline"] = function (lIdIndex) {
        return new McDbPolyline(_this8.imp.ObjectIdToMdDbPolyline(lIdIndex));
      };
      this.classNameToCreateCalls["McDbPolyline"] = function () {
        return new McDbPolyline();
      };
      this.objectIdToObjectCalls["McDbCircle"] = function (lIdIndex) {
        return new McDbCircle(_this8.imp.ObjectIdToMdDbCircle(lIdIndex));
      };
      this.classNameToCreateCalls["McDbCircle"] = function () {
        return new McDbCircle();
      };
      this.objectIdToObjectCalls["McDbArc"] = function (lIdIndex) {
        return new McDbArc(_this8.imp.ObjectIdToMdDbArc(lIdIndex));
      };
      this.classNameToCreateCalls["McDbArc"] = function () {
        return new McDbArc();
      };
      this.objectIdToObjectCalls["McDbBlockReference"] = function (lIdIndex) {
        return new McDbBlockReference(_this8.imp.ObjectIdToMdDbBlockReference(lIdIndex));
      };
      this.classNameToCreateCalls["McDbBlockReference"] = function () {
        return new McDbBlockReference();
      };
      this.objectIdToObjectCalls["McDbSpatialFilter"] = function (lIdIndex) {
        return new McDbSpatialFilter(_this8.imp.ObjectIdToMdDbSpatialFilter(lIdIndex));
      };
      this.classNameToCreateCalls["McDbSpatialFilter"] = function () {
        return new McDbSpatialFilter();
      };
      this.objectIdToObjectCalls["McDbAlignedDimension"] = function (lIdIndex) {
        return new McDbAlignedDimension(_this8.imp.ObjectIdToMdDbAlignedDimension(lIdIndex));
      };
      this.classNameToCreateCalls["McDbAlignedDimension"] = function () {
        return new McDbAlignedDimension();
      };
      this.objectIdToObjectCalls["McDbRotatedDimension"] = function (lIdIndex) {
        return new McDbRotatedDimension(_this8.imp.ObjectIdToMdDbRotatedDimension(lIdIndex));
      };
      this.classNameToCreateCalls["McDbRotatedDimension"] = function () {
        return new McDbRotatedDimension();
      };
      this.objectIdToObjectCalls["McDb2LineAngularDimension"] = function (lIdIndex) {
        return new McDb2LineAngularDimension(_this8.imp.ObjectIdToMdDb2LineAngularDimension(lIdIndex));
      };
      this.classNameToCreateCalls["McDb2LineAngularDimension"] = function () {
        return new McDb2LineAngularDimension();
      };
      this.objectIdToObjectCalls["McDbMText"] = function (lIdIndex) {
        return new McDbMText(_this8.imp.ObjectIdToMdDbMText(lIdIndex));
      };
      this.classNameToCreateCalls["McDbMText"] = function () {
        return new McDbMText();
      };
      this.objectIdToObjectCalls["McDbEllipse"] = function (lIdIndex) {
        return new McDbEllipse(_this8.imp.ObjectIdToMdDbEllipse(lIdIndex));
      };
      this.classNameToCreateCalls["McDbEllipse"] = function () {
        return new McDbEllipse();
      };
      this.objectIdToObjectCalls["McDbPoint"] = function (lIdIndex) {
        return new McDbPoint(_this8.imp.ObjectIdToMdDbPoint(lIdIndex));
      };
      this.classNameToCreateCalls["McDbPoint"] = function () {
        return new McDbPoint();
      };
      this.objectIdToObjectCalls["McDbBlockTableRecord"] = function (lIdIndex) {
        return new McDbBlockTableRecord(_this8.imp.ObjectIdToMdDbBlockTableRecord(lIdIndex));
      };
      this.classNameToCreateCalls["McDbBlockTableRecord"] = function () {
        return new McDbBlockTableRecord();
      };
      this.objectIdToObjectCalls["McDbLayerTableRecord"] = function (lIdIndex) {
        return new McDbLayerTableRecord(_this8.imp.ObjectIdToMdDbLayerTableRecord(lIdIndex));
      };
      this.classNameToCreateCalls["McDbLayerTableRecord"] = function () {
        return new McDbLayerTableRecord();
      };
      this.objectIdToObjectCalls["McDbLinetypeTableRecord"] = function (lIdIndex) {
        return new McDbLinetypeTableRecord(_this8.imp.ObjectIdToMdDbLinetypeTableRecord(lIdIndex));
      };
      this.classNameToCreateCalls["McDbLinetypeTableRecord"] = function () {
        return new McDbLinetypeTableRecord();
      };
      this.objectIdToObjectCalls["McDbDimStyleTableRecord"] = function (lIdIndex) {
        return new McDbDimStyleTableRecord(_this8.imp.ObjectIdToMdDbDimStyleTableRecord(lIdIndex));
      };
      this.classNameToCreateCalls["McDbDimStyleTableRecord"] = function () {
        return new McDbDimStyleTableRecord();
      };
      this.objectIdToObjectCalls["McDbTextStyleTableRecord"] = function (lIdIndex) {
        return new McDbTextStyleTableRecord(_this8.imp.ObjectIdToMdDbTextStyleTableRecord(lIdIndex));
      };
      this.classNameToCreateCalls["McDbTextStyleTableRecord"] = function () {
        return new McDbTextStyleTableRecord();
      };
      this.objectIdToObjectCalls["McDbHatch"] = function (lIdIndex) {
        return new McDbHatch(_this8.imp.ObjectIdToMdDbHatch(lIdIndex));
      };
      this.classNameToCreateCalls["McDbHatch"] = function () {
        return new McDbHatch();
      };
      this.objectIdToObjectCalls["McDbProxyEntity"] = function (lIdIndex) {
        return new McDbProxyEntity(_this8.imp.ObjectIdToMdDbProxyEntity(lIdIndex));
      };
      this.classNameToCreateCalls["McDbProxyEntity"] = function () {
        return new McDbProxyEntity();
      };
      this.objectIdToObjectCalls["McDbRasterImage"] = function (lIdIndex) {
        return new McDbRasterImage(_this8.imp.ObjectIdToMdDbRasterImage(lIdIndex));
      };
      this.classNameToCreateCalls["McDbRasterImage"] = function () {
        return new McDbRasterImage();
      };
      this.objectIdToObjectCalls["McDbRasterImageDef"] = function (lIdIndex) {
        return new McDbRasterImageDef(_this8.imp.ObjectIdToMdDbRasterImageDef(lIdIndex));
      };
      this.classNameToCreateCalls["McDbRasterImageDef"] = function () {
        return new McDbRasterImageDef();
      };
      this.objectIdToObjectCalls["McDbWipeout"] = function (lIdIndex) {
        return new McDbWipeout(_this8.imp.ObjectIdToMdDbWipeout(lIdIndex));
      };
      this.classNameToCreateCalls["McDbWipeout"] = function () {
        return new McDbWipeout();
      };
      this.objectIdToObjectCalls["McDbSpline"] = function (lIdIndex) {
        return new McDbSpline(_this8.imp.ObjectIdToMdDbSpline(lIdIndex));
      };
      this.classNameToCreateCalls["McDbSpline"] = function () {
        return new McDbSpline();
      };
      this.objectIdToObjectCalls["McDbDictionary"] = function (lIdIndex) {
        return new McDbDictionary(_this8.imp.ObjectIdToMdDbDictionary(lIdIndex));
      };
      this.classNameToCreateCalls["McDbDictionary"] = function () {
        return new McDbDictionary();
      };
      this.objectIdToObjectCalls["McDbXrecord"] = function (lIdIndex) {
        return new McDbXrecord(_this8.imp.ObjectIdToMdDbXrecord(lIdIndex));
      };
      this.classNameToCreateCalls["McDbXrecord"] = function () {
        return new McDbXrecord();
      };
      this.objectIdToObjectCalls["McDbGroup"] = function (lIdIndex) {
        return new McDbGroup(_this8.imp.ObjectIdToMdDbGroup(lIdIndex));
      };
      this.classNameToCreateCalls["McDbGroup"] = function () {
        return new McDbGroup();
      };
    }
  }, {
    key: "objectIdToObject",
    value: function objectIdToObject(lIdIndex) {
      if (!lIdIndex) {
        return null;
      }
      var objName = this.imp.ObjectIdToObjectName(lIdIndex);
      if (this.objectIdToObjectCalls[objName]) {
        return this.objectIdToObjectCalls[objName](lIdIndex);
      }
      if (objName == "McDbCustomEntity") {
        var imp = this.imp.ObjectIdToMdDbCustomEntity(lIdIndex);
        if (!imp) return null;
        var iCustomId = imp.getCustomEntityid();
        var iDatabaseIndexId = imp.GetDatabaseIndexId();
        MxCpp.App.destroyObject(imp);
        if (iCustomId == 0 || iDatabaseIndexId == 0) return null;
        return MxCustomEntityManager.getObject(iCustomId, iDatabaseIndexId);
      }
      if (this.imp.ObjectIdIsKindOf(lIdIndex, "McDbCurve")) {
        return this.objectIdToObjectCalls["McDbCurve"](lIdIndex);
      }
      if (this.imp.ObjectIdIsKindOf(lIdIndex, "McDbDimension")) {
        return this.objectIdToObjectCalls["McDbDimension"](lIdIndex);
      }
      if (this.imp.ObjectIdIsKindOf(lIdIndex, "McDbEntity")) {
        return this.objectIdToObjectCalls["McDbEntity"](lIdIndex);
      }
      var mcdbObj = this.imp.ObjectIdToMdObject(lIdIndex);
      return new McDbObject(mcdbObj);
    }
  }, {
    key: "createCloneObject",
    value: function createCloneObject(clonobjImp) {
      if (!clonobjImp) return null;
      var objName = clonobjImp.getObjectName();
      if (objName == "McDbCustomEntity") {
        var iCustomId = clonobjImp.getCustomEntityid();
        var iDatabaseIndexId = clonobjImp.GetDatabaseIndexId();
        var ret = null;
        if (iCustomId == 0 || iDatabaseIndexId == 0) {
          ret = MxCustomEntityManager.createMxEntity(clonobjImp.getCustomEntityTypeName());
          if (ret) {
            ret.getImp().ConnectionTempObject(clonobjImp);
            ret.syncData(false);
          }
        } else {
          ret = MxCustomEntityManager.getObject(iCustomId, iDatabaseIndexId);
        }
        MxCpp.App.destroyObject(clonobjImp);
        return ret;
      } else {
        var _ret = null;
        if (this.classNameToCreateCalls[objName]) {
          _ret = this.classNameToCreateCalls[objName]();
        } else {
          if (clonobjImp.isKindOf("McDbCurve")) {
            _ret = new McDbCurve();
            _ret.initTempObject(new MxCpp.mxcadassemblyimp.MdDbCurve());
          } else if (clonobjImp.isKindOf("McDbEntity")) {
            _ret = new McDbEntity();
            _ret.initTempObject(new MxCpp.mxcadassemblyimp.MdDbEntity());
          }
        }
        if (_ret) {
          _ret.getImp().ConnectionTempObject(clonobjImp);
          MxCpp.App.destroyObject(clonobjImp);
          return _ret;
        } else {
          return new McDbObject(clonobjImp);
        }
      }
    }
  }, {
    key: "setFontFilePath",
    value: function setFontFilePath(path) {
      this.imp.setFontFilePath(path);
    }
  }, {
    key: "setDefaultTrueTypeFontFile",
    value: function setDefaultTrueTypeFontFile(sTrueTypeFontName) {
      this.imp.setDefaultTrueTypeFontFile(sTrueTypeFontName);
    }
  }, {
    key: "addNetworkLoadingFont",
    value: function addNetworkLoadingFont(fontfiles) {
      var _this9 = this;
      var fontFilesLoadOnInitialization = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var isAddTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (typeof fontfiles == "string") {
        this.imp.addNetworkLoadingFont(fontfiles);
        if (!isAddTo) this.shxFonts = [];
        this.shxFonts.push(fontfiles);
      } else {
        var _this$shxFonts;
        if (isAddTo) (_this$shxFonts = this.shxFonts).push.apply(_this$shxFonts, _toConsumableArray(fontfiles));else this.shxFonts = fontfiles;
        fontfiles.forEach(function (val) {
          _this9.imp.addNetworkLoadingFont(val);
        });
      }
      fontFilesLoadOnInitialization.forEach(function (val) {
        _this9.imp.addFontsLoadOnInitialization(val, 0);
      });
    }
  }, {
    key: "IniSet",
    value: function IniSet(ini) {
      if (ini["UseUtf8"]) {
        MxG2312Obj.isUseUtf8 = ini["UseUtf8"];
      }
      return this.imp.IniSet(JSON.stringify(ini));
    }
  }, {
    key: "setMcGeTol",
    value: function setMcGeTol(dTol) {
      this.dMcGeBakTol = this.imp.setMcGeTol(dTol);
      return this.dMcGeBakTol;
    }
  }, {
    key: "restoreMcGeTol",
    value: function restoreMcGeTol() {
      if (this.dMcGeBakTol > 0) {
        this.imp.setMcGeTol(this.dMcGeBakTol);
        this.dMcGeBakTol = -1;
      }
    }
  }, {
    key: "addNetworkLoadingBigFont",
    value: function addNetworkLoadingBigFont(fontfiles) {
      var _this10 = this;
      var fontFilesLoadOnInitialization = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var isAddTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (typeof fontfiles == "string") {
        this.imp.addNetworkLoadingFont(fontfiles);
        if (!isAddTo) this.shxBigFonts = [];
        this.shxBigFonts.push(fontfiles);
      } else {
        var _this$shxBigFonts;
        if (isAddTo) (_this$shxBigFonts = this.shxBigFonts).push.apply(_this$shxBigFonts, _toConsumableArray(fontfiles));else this.shxBigFonts = fontfiles;
        fontfiles.forEach(function (val) {
          _this10.imp.addNetworkLoadingFont(val);
        });
      }
      fontFilesLoadOnInitialization.forEach(function (val) {
        _this10.imp.addFontsLoadOnInitialization(val, 1);
      });
    }
  }, {
    key: "addNetworkLoadingTrueTypeFont",
    value: function addNetworkLoadingTrueTypeFont(fontname, fontzhName, fontfile) {
      var _this11 = this;
      var fontNamesLoadOnInitialization = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      var len = fontname.length;
      for (var i = 0; i < len; i++) {
        this.imp.addNetworkLoadingTrueTypeFont(fontname[i], fontzhName[i], fontfile[i]);
        this.trueFonts[fontname[i]] = {
          name: fontname[i],
          zhname: fontzhName[i],
          file: fontfile[i]
        };
      }
      fontNamesLoadOnInitialization.forEach(function (val) {
        _this11.imp.addFontsLoadOnInitialization(val, 2);
      });
    }
  }, {
    key: "getShxFonts",
    value: function getShxFonts() {
      return this.shxFonts;
    }
  }, {
    key: "getShxBigFonts",
    value: function getShxBigFonts() {
      return this.shxBigFonts;
    }
  }, {
    key: "loadFonts",
    value: function loadFonts(vecShxFonts, vecBigShxFonts, vecTureTypeFonts, retCall) {
      var _this12 = this;
      var vecShxFontsNeed = [];
      var vecBigShxFontsNeed = [];
      var vecTureTypeFontsNeed = [];
      vecShxFonts.forEach(function (val) {
        if (!_this12.imp.isAlreadyNetworkLoaded(val)) vecShxFontsNeed.push(val);
      });
      vecBigShxFonts.forEach(function (val) {
        if (!_this12.imp.isAlreadyNetworkLoaded("{big}" + val)) vecBigShxFontsNeed.push(val);
      });
      vecTureTypeFonts.forEach(function (val) {
        if (!_this12.imp.isAlreadyNetworkLoaded("{font}" + val)) vecTureTypeFontsNeed.push(val);
      });
      McAppFuncton.loadFonts(vecShxFontsNeed, vecBigShxFontsNeed, vecTureTypeFontsNeed, retCall);
    }
  }, {
    key: "isAlreadyLoaded",
    value: function isAlreadyLoaded(sFont) {
      var iType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (iType == 0) return this.imp.isAlreadyNetworkLoaded(sFont);else if (iType == 1) return this.imp.isAlreadyNetworkLoaded("{big}" + sFont);else if (iType == 2) return this.imp.isAlreadyNetworkLoaded("{font}" + sFont);else return true;
    }
  }, {
    key: "getTrueTypeFonts",
    value: function getTrueTypeFonts() {
      var _this13 = this;
      var ret = [];
      Object.keys(this.trueFonts).forEach(function (key) {
        ret.push(_this13.trueFonts[key]);
      });
      return ret;
    }
  }, {
    key: "getVersionString",
    value: function getVersionString() {
      return this.imp.GetVersionString();
    }
  }, {
    key: "GetVersionDateString",
    value: function GetVersionDateString() {
      return this.imp.GetVersionDateString();
    }
  }, {
    key: "newMcObjectId",
    value: function newMcObjectId(id, type) {
      return new McObjectId(id, type);
    }
  }]);
  return McAppType;
}();
var MxCppType = /*#__PURE__*/function () {
  function MxCppType() {
    _classCallCheck$1(this, MxCppType);
    _defineProperty(this, "mxcadassemblyimp", void 0);
    _defineProperty(this, "App", new McAppType());
    _defineProperty(this, "PropertiesWindow", new MxPropertiesWindowCustom());
    _defineProperty(this, "Ai", new MxAI());
  }
  _createClass$1(MxCppType, [{
    key: "getCallResult",
    value: function getCallResult() {
      return this.App.getLastCallResult();
    }
  }, {
    key: "newMcGePoint3d",
    value: function newMcGePoint3d(pt) {
      var ret = new McGePoint3d();
      if (pt && typeof pt.x == "number" && typeof pt.y == "number") {
        ret.x = pt.x;
        ret.y = pt.y;
        if (typeof pt.z == "number") {
          ret.z = pt.z;
        }
      }
      return ret;
    }
  }, {
    key: "newMcGeVector3d",
    value: function newMcGeVector3d(pt) {
      var ret = new McGeVector3d();
      if (pt && typeof pt.x == "number" && typeof pt.y == "number") {
        ret.x = pt.x;
        ret.y = pt.y;
        if (typeof pt.z == "number") {
          ret.z = pt.z;
        }
      }
      return ret;
    }
  }, {
    key: "getCurrentMxCAD",
    value: function getCurrentMxCAD() {
      return this.App.getCurrentMxCAD();
    }
  }, {
    key: "getCurrentDatabase",
    value: function getCurrentDatabase() {
      return this.App.getCurrentMxCAD().getDatabase();
    }
  }, {
    key: "decodeFromGb2312",
    value: function decodeFromGb2312(strHex) {
      return MxG2312Obj.decodeFromGb2312(strHex);
    }
  }, {
    key: "encodeToGb2312",
    value: function encodeToGb2312(str) {
      return MxG2312Obj.encodeToGb2312(str);
    }
  }]);
  return MxCppType;
}();
var MxCADPluginMapDefaultData = /*#__PURE__*/_createClass$1(function MxCADPluginMapDefaultData() {
  _classCallCheck$1(this, MxCADPluginMapDefaultData);
  _defineProperty(this, "mapOrigin", []);
  _defineProperty(this, "cadOrigin", []);
  _defineProperty(this, "meterInCADUnits", 1);
  _defineProperty(this, "mapbox_accessToken", "");
  _defineProperty(this, "openFile", void 0);
  _defineProperty(this, "rasterTileLayerList", []);
  _defineProperty(this, "rasterTileKey", void 0);
  _defineProperty(this, "providers", void 0);
  _defineProperty(this, "viewColor", void 0);
});
var MxCADPluginSampleCode = /*#__PURE__*/_createClass$1(function MxCADPluginSampleCode() {
  _classCallCheck$1(this, MxCADPluginSampleCode);
  _defineProperty(this, "type", "");
  _defineProperty(this, "name", "");
  _defineProperty(this, "code", "");
});
var MxCADPluginBase = /*#__PURE__*/_createClass$1(function MxCADPluginBase() {
  _classCallCheck$1(this, MxCADPluginBase);
  _defineProperty(this, "sRegistData", "");
  _defineProperty(this, "mxcadui", void 0);
  _defineProperty(this, "openFile", void 0);
  _defineProperty(this, "map_default_data", void 0);
  _defineProperty(this, "sampleCode", void 0);
});
var MxPropertiesWindowCustomValueType = /* @__PURE__ */function (MxPropertiesWindowCustomValueType2) {
  MxPropertiesWindowCustomValueType2[MxPropertiesWindowCustomValueType2["kInt"] = 1] = "kInt";
  MxPropertiesWindowCustomValueType2[MxPropertiesWindowCustomValueType2["kDouble"] = 2] = "kDouble";
  MxPropertiesWindowCustomValueType2[MxPropertiesWindowCustomValueType2["kString"] = 3] = "kString";
  return MxPropertiesWindowCustomValueType2;
}(MxPropertiesWindowCustomValueType || {});
var MxPropertiesWindowCustomValue = /*#__PURE__*/_createClass$1(function MxPropertiesWindowCustomValue() {
  _classCallCheck$1(this, MxPropertiesWindowCustomValue);
  _defineProperty(this, "sVarName", "");
  _defineProperty(this, "iVarType", 1);
  _defineProperty(this, "val", void 0);
  _defineProperty(this, "isOnlyRead", false);
});
var MxPropertiesWindowCustom = /*#__PURE__*/function () {
  function MxPropertiesWindowCustom() {
    _classCallCheck$1(this, MxPropertiesWindowCustom);
    _defineProperty(this, "getPropertiesCall", null);
    _defineProperty(this, "setPropertiesCall", null);
  }
  _createClass$1(MxPropertiesWindowCustom, [{
    key: "onEvent_getProperties",
    value: function onEvent_getProperties(call) {
      this.getPropertiesCall = call;
    }
  }, {
    key: "onEvent_setProperties",
    value: function onEvent_setProperties(call) {
      this.setPropertiesCall = call;
    }
  }, {
    key: "setEntitySupportCustom",
    value: function setEntitySupportCustom(id) {
      var isCustomProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var ent = id.getMcDbEntity();
      if (ent) ent.getImp().setPropertiesWindowCustom(isCustomProperties);
    }
  }, {
    key: "getEntityProperties",
    value: function getEntityProperties(id) {
      var ent = id.getMcDbEntity();
      if (!ent) return [];
      if (!ent.getImp().isPropertiesWindowCustom()) return [];
      if (this.getPropertiesCall == null) {
        return [];
      } else {
        return this.getPropertiesCall(id);
      }
    }
  }, {
    key: "setEntityProperties",
    value: function setEntityProperties(id, prop) {
      var ent = id.getMcDbEntity();
      if (!ent) return;
      if (!ent.getImp().isPropertiesWindowCustom()) return;
      if (this.setPropertiesCall == null) {
        return;
      } else {
        return this.setPropertiesCall(id, prop);
      }
    }
  }]);
  return MxPropertiesWindowCustom;
}();
var MxCompare = /*#__PURE__*/function () {
  function MxCompare() {
    _classCallCheck$1(this, MxCompare);
    _defineProperty(this, "imp", void 0);
    _defineProperty(this, "result", []);
    this.imp = new MxCpp.mxcadassemblyimp.MxCompare();
  }
  _createClass$1(MxCompare, [{
    key: "getTypeString",
    value: function getTypeString(type) {
      var ret = "";
      switch (type) {
        case 0:
          ret = "no modify";
          break;
        case 1:
          ret = "unknown";
          break;
        case 2:
          ret = "object modify";
          break;
        case 3:
          ret = "object erase";
          break;
        case 4:
          ret = "object add";
          break;
        default:
          ret = "unknown";
      }
      return ret;
    }
  }, {
    key: "do",
    value: function _do(database) {
      this.result = [];
      if (this.imp.Do(database.imp)) {
        var ret = new MxCADResbuf(this.imp.getResult());
        var count = ret.GetCount();
        for (var i = 0; i + 2 < count; i += 3) {
          var id = ret.AtLong(i);
          if (!id.ret) break;
          var pos = ret.AtPoint(i + 1);
          if (!pos.ret) break;
          var type = ret.AtLong(i + 2);
          if (!type.ret) break;
          this.result.push({
            id: new McObjectId(id.val),
            pos: pos.val,
            type: type.val,
            str: this.getTypeString(type.val)
          });
        }
        return true;
      }
      return false;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }]);
  return MxCompare;
}();
var MxModifyColor = /*#__PURE__*/function () {
  function MxModifyColor() {
    _classCallCheck$1(this, MxModifyColor);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MxTempModifyColor();
  }
  _createClass$1(MxModifyColor, [{
    key: "Do",
    value: function Do(database, color) {
      return this.imp.Do(database.imp, color.getImp());
    }
  }, {
    key: "DoRestore",
    value: function DoRestore() {
      this.imp.DoRestore();
    }
  }]);
  return MxModifyColor;
}();
var MxCADTempForbiddenIntelliSelect = /*#__PURE__*/function () {
  function MxCADTempForbiddenIntelliSelect() {
    var isForbidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    _classCallCheck$1(this, MxCADTempForbiddenIntelliSelect);
    _defineProperty(this, "bakIsIntelliSelect", true);
    this.bakIsIntelliSelect = MxFun.getIniSet().EnableIntelliSelect;
    MxFun.setIniset({
      EnableIntelliSelect: !isForbidden
    });
  }
  _createClass$1(MxCADTempForbiddenIntelliSelect, [{
    key: "restoreSettings",
    value: function restoreSettings() {
      MxFun.setIniset({
        EnableIntelliSelect: this.bakIsIntelliSelect
      });
    }
  }]);
  return MxCADTempForbiddenIntelliSelect;
}();

var MxCpp;
function loadMxCADassembly(_x) {
  return _loadMxCADassembly.apply(this, arguments);
}
function _loadMxCADassembly() {
  _loadMxCADassembly = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(call) {
    var locateFile,
      wasmBinary,
      fontspath,
      networkFonts,
      _args2 = arguments;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          locateFile = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : isSharedArrayBuffer || !isCdn ? get2DFileURL : get2DSTFileURL;
          wasmBinary = _args2.length > 2 ? _args2[2] : undefined;
          fontspath = _args2.length > 3 ? _args2[3] : undefined;
          networkFonts = _args2.length > 4 ? _args2[4] : undefined;
          return _context2.abrupt("return", new Promise( /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(resolve, reject) {
              var baseFileName, mxcadassemblyimp, app, win;
              return regenerator.wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    if (!MxCpp) MxCpp = new MxCppType();
                    if (!MxCpp.mxcadassemblyimp) {
                      _context.next = 5;
                      break;
                    }
                    call && call(MxCpp);
                    return _context.abrupt("return", resolve(MxCpp));
                  case 5:
                    baseFileName = "mxdrawassembly_min";
                    _context.next = 8;
                    return loadWams$1(baseFileName, "mxdrawassembly", {
                      locateFile: locateFile,
                      wasmBinary: wasmBinary
                    });
                  case 8:
                    mxcadassemblyimp = _context.sent;
                    MxCpp.mxcadassemblyimp = mxcadassemblyimp;
                    app = new mxcadassemblyimp.McApp();
                    if (fontspath) {
                      app.setFontFilePath(fontspath);
                    } else {
                      app.setFontFilePath("fonts");
                    }
                    app.Init();
                    MxCustomEntityManager.init();
                    MxCpp.App.init(app);
                    if (networkFonts) {
                      MxCpp.App.addNetworkLoadingFont(networkFonts);
                    } else {
                      MxCpp.App.addNetworkLoadingFont(["txt.shx", "hztxt.shx"]);
                    }
                    win = window;
                    win["__MxCpp__"] = MxCpp;
                    call && call(MxCpp);
                    resolve(MxCpp);
                    _context.next = 25;
                    break;
                  case 22:
                    _context.prev = 22;
                    _context.t0 = _context["catch"](0);
                    reject(_context.t0);
                  case 25:
                  case "end":
                    return _context.stop();
                }
              }, _callee, null, [[0, 22]]);
            }));
            return function (_x2, _x3) {
              return _ref.apply(this, arguments);
            };
          }()));
        case 5:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _loadMxCADassembly.apply(this, arguments);
}
function MxCheckTheBrowser() {
  var sys = {};
  var ua = navigator.userAgent.toLowerCase();
  var s;
  (s = ua.match(/edg\\/([\\d.]+)/)) ? sys.edge = s[1] : (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? sys.ie = s[1] : (s = ua.match(/msie ([\\d.]+)/)) ? sys.ie = s[1] : (s = ua.match(/firefox\\/([\\d.]+)/)) ? sys.firefox = s[1] : (s = ua.match(/chrome\\/([\\d.]+)/)) ? sys.chrome = s[1] : (s = ua.match(/opera.([\\d.]+)/)) ? sys.opera = s[1] : (s = ua.match(/version\\/([\\d.]+).*safari/)) ? sys.safari = s[1] : 0;
  if (sys.ie) {
    return {
      ok: false,
      error: "\\u4E0D\\u652F\\u6301ie\\u6D4F\\u89C8\\u5668\\uFF0C\\u4F7F\\u7528\\u6700\\u65B0\\u7684chrome\\u6216edge\\u6D4F\\u89C8\\u5668",
      var: sys
    };
  }
  if (sys.edge) {
    var regEdge = new RegExp("edg/([0-9]{1,}[.0-9]{0,})");
    if (regEdge.exec(ua) != null) {
      var browserVersion = parseFloat(RegExp.$1);
      if (browserVersion < 107) {
        return {
          ok: false,
          error: "edge\\u6D4F\\u89C8\\u5668\\u7248\\u672C\\u592A\\u65E7\\uFF0C\\u4F7F\\u7528\\u6700\\u65B0\\u7684edge\\u6D4F\\u89C8\\u5668",
          var: sys
        };
      }
    }
  } else if (sys.chrome) {
    var regEdge = new RegExp("chrome/([0-9]{1,}[.0-9]{0,})");
    if (regEdge.exec(ua) != null) {
      var _browserVersion = parseFloat(RegExp.$1);
      if (_browserVersion < 107) {
        return {
          ok: false,
          error: "\\u6D4F\\u89C8\\u5668\\u7248\\u672C\\u592A\\u65E7\\uFF0C\\u4F7F\\u7528\\u6700\\u65B0\\u7684chrome\\u6D4F\\u89C8\\u5668",
          var: sys
        };
      }
    }
  } else if (sys.firefox) {
    var regEdge = new RegExp("firefox/([0-9]{1,}[.0-9]{0,})");
    if (regEdge.exec(ua) != null) {
      var _browserVersion2 = parseFloat(RegExp.$1);
      if (_browserVersion2 < 101) {
        return {
          ok: false,
          error: "firefox\\u6D4F\\u89C8\\u5668\\u7248\\u672C\\u592A\\u65E7\\uFF0C\\u4F7F\\u7528\\u6700\\u65B0\\u7684firefox\\u6D4F\\u89C8\\u5668",
          var: sys
        };
      }
    }
  } else if (sys.safari) ; else if (sys.opera) {
    return {
      ok: false,
      error: "\\u4E0D\\u652F\\u6301opera\\u6D4F\\u89C8\\u5668\\uFF0C\\u4F7F\\u7528\\u6700\\u65B0\\u7684chrome\\u6216edge\\u6D4F\\u89C8\\u5668",
      var: sys
    };
  } else {
    return {
      ok: false,
      error: "\\u4E0D\\u652F\\u6301\\u8BE5\\u6D4F\\u89C8\\u5668\\uFF0C\\u4F7F\\u7528\\u6700\\u65B0\\u7684chrome\\u6216edge\\u6D4F\\u89C8\\u5668",
      var: sys
    };
  }
  return {
    ok: true,
    error: "",
    var: sys
  };
}

var McGePoint3d = /*#__PURE__*/function () {
  function McGePoint3d(dX, dY, dZ) {
    _classCallCheck$1(this, McGePoint3d);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MdGePoint3d();
    if (dX instanceof Object) {
      this.imp.x = dX.x;
      this.imp.y = dX.y;
      this.imp.z = dX.z;
    } else {
      this.imp.x = dX ? dX : 0;
      this.imp.y = dY ? dY : 0;
      this.imp.z = dZ ? dZ : 0;
    }
  }
  _createClass$1(McGePoint3d, [{
    key: "toVector3",
    value: function toVector3() {
      return new THREE.Vector3(this.imp.x, this.imp.y, this.imp.z);
    }
  }, {
    key: "setFromVector3",
    value: function setFromVector3(val) {
      this.imp.x = val.x;
      this.imp.y = val.y;
      this.imp.z = val.z;
      return this;
    }
  }, {
    key: "copy",
    value: function copy(val) {
      this.imp.x = val.x;
      this.imp.y = val.y;
      this.imp.z = val.z;
      return this;
    }
  }, {
    key: "transformBy",
    value: function transformBy(leftSide) {
      this.imp.transformBy(leftSide.imp);
      return this;
    }
  }, {
    key: "addvec",
    value: function addvec(vec) {
      this.imp.addvec(vec.imp);
      return this;
    }
  }, {
    key: "av",
    value: function av(vec) {
      this.imp.addvec(vec.imp);
      return this;
    }
  }, {
    key: "subvec",
    value: function subvec(vec) {
      this.imp.subvec(vec.imp);
      return this;
    }
  }, {
    key: "sv",
    value: function sv(vec) {
      this.imp.subvec(vec.imp);
      return this;
    }
  }, {
    key: "sub",
    value: function sub(pt) {
      return new McGeVector3d(this.imp.sub(pt.imp));
    }
  }, {
    key: "distanceTo",
    value: function distanceTo(pnt) {
      return this.imp.distanceTo(pnt.imp);
    }
  }, {
    key: "isEqualTo",
    value: function isEqualTo(pnt) {
      return this.imp.isEqualTo(pnt.imp);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new McGePoint3d(this.imp);
    }
  }, {
    key: "c",
    value: function c() {
      return new McGePoint3d(this.imp);
    }
  }, {
    key: "x",
    get: function get() {
      return this.imp.x;
    },
    set: function set(val) {
      this.imp.x = val;
    }
  }, {
    key: "y",
    get: function get() {
      return this.imp.y;
    },
    set: function set(val) {
      this.imp.y = val;
    }
  }, {
    key: "z",
    get: function get() {
      return this.imp.z;
    },
    set: function set(val) {
      this.imp.z = val;
    }
  }]);
  return McGePoint3d;
}();
_defineProperty(McGePoint3d, "kOrigin", void 0);
var McGeVector3d = /*#__PURE__*/function () {
  function McGeVector3d(dX, dY, dZ) {
    _classCallCheck$1(this, McGeVector3d);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MdGeVector3d();
    if (dX instanceof Object) {
      this.imp.x = dX.x;
      this.imp.y = dX.y;
      this.imp.z = dX.z;
    } else {
      this.imp.x = dX ? dX : 0;
      this.imp.y = dY ? dY : 0;
      this.imp.z = dZ ? dZ : 0;
    }
  }
  _createClass$1(McGeVector3d, [{
    key: "toVector3",
    value: function toVector3() {
      return new THREE.Vector3(this.imp.x, this.imp.y, this.imp.z);
    }
  }, {
    key: "copy",
    value: function copy(val) {
      this.imp.x = val.imp.x;
      this.imp.y = val.imp.y;
      this.imp.z = val.imp.z;
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new McGeVector3d(this.imp);
    }
  }, {
    key: "c",
    value: function c() {
      return new McGeVector3d(this.imp);
    }
  }, {
    key: "rotateBy",
    value: function rotateBy(ang, axis) {
      if (!axis) axis = McGeVector3d.kZAxis;
      this.imp.rotateBy(ang, axis.imp);
      return this;
    }
  }, {
    key: "negate",
    value: function negate() {
      this.imp.negate();
      return this;
    }
  }, {
    key: "perpVector",
    value: function perpVector() {
      this.imp.perpVector();
      return this;
    }
  }, {
    key: "angleTo1",
    value: function angleTo1(vec) {
      return this.imp.angleTo(vec.imp);
    }
  }, {
    key: "angleTo2",
    value: function angleTo2(vec, refVec) {
      if (!refVec) refVec = McGeVector3d.kNegateZAxis;
      return this.imp.angleTo(vec.imp, refVec.imp);
    }
  }, {
    key: "normalize",
    value: function normalize() {
      this.imp.normalize();
      return this;
    }
  }, {
    key: "length",
    value: function length() {
      return this.imp.length();
    }
  }, {
    key: "isUnitLength",
    value: function isUnitLength() {
      return this.imp.isUnitLength();
    }
  }, {
    key: "isZeroLength",
    value: function isZeroLength() {
      return this.imp.isZeroLength();
    }
  }, {
    key: "dotProduct",
    value: function dotProduct(vec) {
      return this.imp.dotProduct(vec.imp);
    }
  }, {
    key: "crossProduct",
    value: function crossProduct(vec) {
      var ret = new McGeVector3d();
      ret.imp = this.imp.crossProduct(vec.imp);
      return ret;
    }
  }, {
    key: "isEqualTo",
    value: function isEqualTo(vec) {
      return this.imp.isEqualTo(vec.imp);
    }
  }, {
    key: "mult",
    value: function mult(val) {
      this.imp.mult(val);
      return this;
    }
  }, {
    key: "x",
    get: function get() {
      return this.imp.x;
    },
    set: function set(val) {
      this.imp.x = val;
    }
  }, {
    key: "y",
    get: function get() {
      return this.imp.y;
    },
    set: function set(val) {
      this.imp.y = val;
    }
  }, {
    key: "z",
    get: function get() {
      return this.imp.z;
    },
    set: function set(val) {
      this.imp.z = val;
    }
  }]);
  return McGeVector3d;
}();
_defineProperty(McGeVector3d, "kIdentity", void 0);
_defineProperty(McGeVector3d, "kXAxis", void 0);
_defineProperty(McGeVector3d, "kYAxis", void 0);
_defineProperty(McGeVector3d, "kZAxis", void 0);
_defineProperty(McGeVector3d, "kNegateZAxis", void 0);
var McGeMatrix3d = /*#__PURE__*/function () {
  function McGeMatrix3d(imp) {
    _classCallCheck$1(this, McGeMatrix3d);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MdGeMatrix3d();
    if (imp instanceof Object) {
      this.imp.copy(imp);
    }
  }
  _createClass$1(McGeMatrix3d, [{
    key: "copy",
    value: function copy(val) {
      this.imp.copy(val.imp);
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new McGeMatrix3d(this.imp);
    }
  }, {
    key: "setToIdentity",
    value: function setToIdentity() {
      this.imp.setToIdentity();
      return this;
    }
  }, {
    key: "preMultBy",
    value: function preMultBy(leftSide) {
      this.imp.preMultBy(leftSide.imp);
      return this;
    }
  }, {
    key: "postMultBy",
    value: function postMultBy(rightSide) {
      this.imp.postMultBy(rightSide.imp);
      return this;
    }
  }, {
    key: "setToProduct",
    value: function setToProduct(mat1, mat2) {
      this.imp.setToProduct(mat1.imp, mat2.imp);
      return this;
    }
  }, {
    key: "invert",
    value: function invert() {
      this.imp.invert();
      return this;
    }
  }, {
    key: "isSingular",
    value: function isSingular() {
      return this.imp.isSingular();
    }
  }, {
    key: "transposeIt",
    value: function transposeIt() {
      this.imp.transposeIt();
      return this;
    }
  }, {
    key: "isEqualTo",
    value: function isEqualTo(mat) {
      return this.imp.isEqualTo(mat.imp);
    }
  }, {
    key: "det",
    value: function det() {
      return this.imp.det();
    }
  }, {
    key: "setCoordSystem",
    value: function setCoordSystem(origin, xAxis, yAxis, zAxis) {
      this.imp.setCoordSystem(origin.imp, xAxis.imp, yAxis.imp, zAxis.imp);
      return this;
    }
  }, {
    key: "setToTranslation",
    value: function setToTranslation(vec) {
      this.imp.setToTranslation(vec.imp);
      return this;
    }
  }, {
    key: "setToRotation",
    value: function setToRotation(angle, axis, center) {
      this.imp.setToRotation(angle, axis.imp, center.imp);
      return this;
    }
  }, {
    key: "setToScaling",
    value: function setToScaling(scaleAll, center) {
      this.imp.setToScaling(scaleAll, center.imp);
      return this;
    }
  }, {
    key: "setMirror",
    value: function setMirror(pt1, pt2) {
      this.imp.setMirror(pt1.imp, pt2.imp);
      return this;
    }
  }, {
    key: "scale",
    value: function scale() {
      return this.imp.scale();
    }
  }, {
    key: "angleXYPlane",
    value: function angleXYPlane() {
      return this.imp.angleXYPlane();
    }
  }, {
    key: "getData",
    value: function getData(row, col) {
      return this.imp.getData(row, col);
    }
  }, {
    key: "setData",
    value: function setData(row, col, val) {
      return this.imp.setData(row, col, val);
    }
  }]);
  return McGeMatrix3d;
}();
_defineProperty(McGeMatrix3d, "kIdentity", void 0);
var McGeLongArray = /*#__PURE__*/function () {
  function McGeLongArray(imp) {
    _classCallCheck$1(this, McGeLongArray);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MdGeLongArray();
    if (imp instanceof Object) {
      this.imp.copy(imp);
    }
  }
  _createClass$1(McGeLongArray, [{
    key: "copy",
    value: function copy(val) {
      this.imp.clear();
      this.imp.copy(val.imp);
      return this;
    }
  }, {
    key: "copyFormAryId",
    value: function copyFormAryId(aryId) {
      var _this = this;
      this.imp.clear();
      aryId.forEach(function (val) {
        _this.imp.append(val.id);
      });
      return this;
    }
  }, {
    key: "append",
    value: function append(val) {
      this.imp.append(val);
    }
  }, {
    key: "length",
    value: function length() {
      return this.imp.length();
    }
  }, {
    key: "at",
    value: function at(index) {
      return this.imp.at(index);
    }
  }, {
    key: "setAt",
    value: function setAt(index, val) {
      this.imp.setAt(index, val);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.imp.clear();
    }
  }, {
    key: "forEach",
    value: function forEach(call) {
      var iSize = this.imp.length();
      for (var i = 0; i < iSize; i++) {
        call(this.imp.at(i), i);
      }
    }
  }]);
  return McGeLongArray;
}();
var McGeStringArray = /*#__PURE__*/function () {
  function McGeStringArray(imp) {
    _classCallCheck$1(this, McGeStringArray);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MdGeStringArray();
    if (imp instanceof Object) {
      this.imp.copy(imp);
    }
  }
  _createClass$1(McGeStringArray, [{
    key: "copy",
    value: function copy(val) {
      this.imp.copy(val.imp);
      return this;
    }
  }, {
    key: "append",
    value: function append(val) {
      this.imp.append(val);
    }
  }, {
    key: "length",
    value: function length() {
      return this.imp.length();
    }
  }, {
    key: "at",
    value: function at(index) {
      var decodeFromGb2312 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (decodeFromGb2312) {
        return MxG2312Obj.decodeFromGb2312(this.imp.at(index));
      } else {
        return this.imp.at(index);
      }
    }
  }, {
    key: "setAt",
    value: function setAt(index, val) {
      var decodeFromGb2312 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      if (decodeFromGb2312) {
        this.imp.setAt(index, MxG2312Obj.encodeToGb2312(val));
      } else {
        this.imp.setAt(index, val);
      }
    }
  }, {
    key: "forEach",
    value: function forEach(call) {
      var decodeFromGb2312 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var iSize = this.imp.length();
      for (var i = 0; i < iSize; i++) {
        if (decodeFromGb2312) {
          call(MxG2312Obj.decodeFromGb2312(this.imp.at(i)), i);
        } else {
          call(this.imp.at(i), i);
        }
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      this.imp.clear();
    }
  }]);
  return McGeStringArray;
}();
var McGePoint3dArray = /*#__PURE__*/function () {
  function McGePoint3dArray(imp, isDestroyImp) {
    var _this2 = this;
    _classCallCheck$1(this, McGePoint3dArray);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MdGePoint3dArray();
    if (imp instanceof Array) {
      imp.forEach(function (val) {
        _this2.imp.append(val.imp);
      });
    } else {
      if (imp instanceof Object) {
        this.imp.copy(imp);
        if (isDestroyImp) {
          MxCpp.App.getImp().DestroyMdGePoint3dArray(imp);
        }
      }
    }
  }
  _createClass$1(McGePoint3dArray, [{
    key: "copy",
    value: function copy(val) {
      var _this3 = this;
      if (val instanceof Array) {
        val.forEach(function (pt) {
          _this3.imp.append(pt.imp);
        });
      } else {
        this.imp.copy(val.imp);
      }
      return this;
    }
  }, {
    key: "append",
    value: function append(val) {
      this.imp.append(val.imp);
    }
  }, {
    key: "length",
    value: function length() {
      return this.imp.length();
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.imp.length() == 0;
    }
  }, {
    key: "at",
    value: function at(index) {
      return new McGePoint3d(this.imp.at(index));
    }
  }, {
    key: "setAt",
    value: function setAt(index, val) {
      this.imp.setAt(index, val.imp);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.imp.clear();
    }
  }, {
    key: "forEach",
    value: function forEach(call) {
      var iSize = this.imp.length();
      for (var i = 0; i < iSize; i++) {
        call(new McGePoint3d(this.imp.at(i)), i);
      }
    }
  }]);
  return McGePoint3dArray;
}();
var McGeDoubleArray = /*#__PURE__*/function () {
  function McGeDoubleArray(imp, isDestroyImp) {
    _classCallCheck$1(this, McGeDoubleArray);
    _defineProperty(this, "imp", void 0);
    this.imp = new MxCpp.mxcadassemblyimp.MdGeDoubleArray();
    if (imp instanceof Object) {
      this.imp.copy(imp);
      if (isDestroyImp) {
        MxCpp.App.getImp().DestroyMdGeDoubleArray(imp);
      }
    }
  }
  _createClass$1(McGeDoubleArray, [{
    key: "copy",
    value: function copy(val) {
      this.imp.clear();
      this.imp.copy(val.imp);
      return this;
    }
  }, {
    key: "append",
    value: function append(val) {
      this.imp.append(val);
    }
  }, {
    key: "length",
    value: function length() {
      return this.imp.length();
    }
  }, {
    key: "at",
    value: function at(index) {
      return this.imp.at(index);
    }
  }, {
    key: "setAt",
    value: function setAt(index, val) {
      this.imp.setAt(index, val);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.imp.clear();
    }
  }, {
    key: "forEach",
    value: function forEach(call) {
      var iSize = this.imp.length();
      for (var i = 0; i < iSize; i++) {
        call(this.imp.at(i), i);
      }
    }
  }]);
  return McGeDoubleArray;
}();
var McGeBound = /*#__PURE__*/function () {
  function McGeBound(pts) {
    _classCallCheck$1(this, McGeBound);
    _defineProperty(this, "minPoint", void 0);
    _defineProperty(this, "maxPoint", void 0);
    _defineProperty(this, "isValid", void 0);
    this.minPoint = new McGePoint3d();
    this.maxPoint = new McGePoint3d();
    this.isValid = false;
    if (pts) {
      this.addPoints(pts);
    }
  }
  _createClass$1(McGeBound, [{
    key: "addPoint",
    value: function addPoint(pt) {
      if (this.isValid) {
        if (this.minPoint.x > pt.x) this.minPoint.x = pt.x;
        if (this.minPoint.y > pt.y) this.minPoint.y = pt.y;
        if (this.minPoint.z > pt.z) this.minPoint.y = pt.z;
        if (this.maxPoint.x < pt.x) this.maxPoint.x = pt.x;
        if (this.maxPoint.y < pt.y) this.maxPoint.y = pt.y;
        if (this.maxPoint.z < pt.z) this.maxPoint.z = pt.z;
      } else {
        this.minPoint.x = pt.x;
        this.minPoint.y = pt.y;
        this.minPoint.z = pt.z;
        this.maxPoint.x = pt.x;
        this.maxPoint.y = pt.y;
        this.maxPoint.z = pt.z;
        this.isValid = true;
      }
    }
  }, {
    key: "addPoints",
    value: function addPoints(pts) {
      var _this4 = this;
      pts.forEach(function (val) {
        _this4.addPoint(val);
      });
    }
  }]);
  return McGeBound;
}();

var MxCADBaseCustomElemnet = /*#__PURE__*/_createClass$1(function MxCADBaseCustomElemnet() {
  _classCallCheck$1(this, MxCADBaseCustomElemnet);
  _defineProperty(this, "isInline", void 0);
  _defineProperty(this, "isVoid", void 0);
});

var BreakType = /* @__PURE__ */function (BreakType2) {
  BreakType2["None"] = "none";
  BreakType2["Overflow"] = "overflow";
  BreakType2["Word"] = "word";
  BreakType2["Forced"] = "forced";
  return BreakType2;
}(BreakType || {});

var CADTextCommandType = /* @__PURE__ */function (CADTextCommandType2) {
  CADTextCommandType2["Paragraph"] = "P";
  CADTextCommandType2["Color"] = "c";
  CADTextCommandType2["ColorIndex"] = "C";
  CADTextCommandType2["Font"] = "f";
  CADTextCommandType2["FontAlt"] = "F";
  CADTextCommandType2["FontHeight"] = "H";
  CADTextCommandType2["Overline"] = "O";
  CADTextCommandType2["Strike"] = "K";
  CADTextCommandType2["Underline"] = "L";
  return CADTextCommandType2;
}(CADTextCommandType || {});

var SequenceType = /* @__PURE__ */function (SequenceType2) {
  SequenceType2["Chinese"] = "chinese";
  SequenceType2["Continuous"] = "continuous";
  SequenceType2["Breakable"] = "breakable";
  return SequenceType2;
}(SequenceType || {});

function isElement(node) {
  if (node !== null && node !== void 0 && node.children) return true;
  return false;
}
function isText$1(node) {
  return "text" in node;
}

var CharacterSets = {
  CHINESE: /[\\u4e00-\\u9fa5]/,
  WHITESPACE: /\\s/
};
var BREAKABLE_PATTERN = new RegExp("".concat(CharacterSets.CHINESE.source, "|").concat(CharacterSets.WHITESPACE.source));
function isBreakableChar(char) {
  return BREAKABLE_PATTERN.test(char);
}
function createFragment(node, nodeIndex, startOffset, endOffset) {
  return {
    node: node,
    nodeIndex: nodeIndex,
    startOffset: startOffset,
    endOffset: endOffset,
    text: node.text.substring(startOffset, endOffset)
  };
}
function createSequence(type, fragment) {
  return {
    type: type,
    fragments: [fragment],
    text: fragment.text
  };
}
function appendToSequence(sequence, fragment) {
  sequence.fragments.push(fragment);
  sequence.text += fragment.text;
}
function findTextSequences(textNodes) {
  var sequences = [];
  var currentSequence = null;
  textNodes.forEach(function (node, nodeIndex) {
    if (isText$1(node)) {
      var text = node.text;
      var currentPos = 0;
      while (currentPos < text.length) {
        var _currentSequence;
        var char = text[currentPos];
        if (isBreakableChar(char)) {
          currentSequence = null;
          sequences.push(createSequence(SequenceType.Breakable, createFragment(node, nodeIndex, currentPos, currentPos + 1)));
          currentPos++;
          continue;
        }
        var sequenceEnd = currentPos + 1;
        while (sequenceEnd < text.length && !isBreakableChar(text[sequenceEnd])) {
          sequenceEnd++;
        }
        var fragment = createFragment(node, nodeIndex, currentPos, sequenceEnd);
        if (((_currentSequence = currentSequence) === null || _currentSequence === void 0 ? void 0 : _currentSequence.type) === SequenceType.Continuous) {
          appendToSequence(currentSequence, fragment);
        } else {
          currentSequence = createSequence(SequenceType.Continuous, fragment);
          sequences.push(currentSequence);
        }
        currentPos = sequenceEnd;
      }
    }
    if (isElement(node)) {
      var element = MxCADMText.elementTextManager.get(node.type);
      if (!(element !== null && element !== void 0 && element.isInline)) {
        return;
      }
    }
  });
  return sequences;
}

var getTextHeight = function getTextHeight(node, baseHeight) {
  return baseHeight * ((node === null || node === void 0 ? void 0 : node.fontSize) || 1);
};

function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit$1(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray$1(arr, i) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$6(arr, i) || _nonIterableRest$1();
}

var setColor = function setColor(node, mcText) {
  if (typeof node.color === "number") {
    var mcColor = new McCmColor();
    mcColor.setColorIndex(node.color);
    mcText.trueColor = mcColor;
  }
  if (Array.isArray(node.color)) {
    var _node$color = _slicedToArray$1(node.color, 3),
      _node$color$ = _node$color[0],
      r = _node$color$ === void 0 ? 255 : _node$color$,
      _node$color$2 = _node$color[1],
      g = _node$color$2 === void 0 ? 255 : _node$color$2,
      _node$color$3 = _node$color[2],
      b = _node$color$3 === void 0 ? 255 : _node$color$3;
    var _mcColor = new McCmColor();
    _mcColor.setRGB(r, g, b);
    mcText.trueColor = _mcColor;
  }
};

var setFont = function setFont(node, mcText, style) {
  var bold = node.bold,
    italic = node.italic,
    font = node.font;
  var contents = mcText.contents;
  var str = "";
  var fontObj = {
    font: font,
    italic: italic,
    bold: bold
  };
  if (!style) {
    style = MxCpp.getCurrentMxCAD().getDatabase().getCurrentlyTextStyleName();
  }
  mcText.textStyle = style;
  if (Object.keys(fontObj).length !== 0) {
    var _fontObj$font;
    str = "\\\\f".concat((_fontObj$font = fontObj.font) !== null && _fontObj$font !== void 0 ? _fontObj$font : "", "|").concat(fontObj.bold ? "b1" : "b0", "|").concat(fontObj.italic ? "i1" : "i0", "|c134|p49;") + str;
  }
  mcText.contents = str + contents;
};

function decimalToRgb(decimal) {
  var b = decimal >> 16;
  var g = decimal >> 8 & 255;
  var r = decimal & 255;
  return [r, g, b];
}
function extractFormatFromNode(node) {
  var format = {};
  var nodeAny = node;
  if (nodeAny.bold) format.bold = true;
  if (nodeAny.italic) format.italic = true;
  if (nodeAny.underline) format.underline = true;
  if (nodeAny.overline) format.overline = true;
  if (nodeAny.strike) format.strike = true;
  if (nodeAny.font) format.font = nodeAny.font;
  if (nodeAny.style) format.style = nodeAny.style;
  if (nodeAny.fontSize) format.fontSize = nodeAny.fontSize;
  if (nodeAny.color) {
    var color = nodeAny.color;
    if (typeof color === "number") {
      format.color = color;
    } else if (Array.isArray(color)) {
      format.color = _toConsumableArray(color);
    }
  }
  return format;
}
function createFormattedTextNode(text, format) {
  var node = {
    text: text
  };
  if (format.bold) node.bold = true;
  if (format.italic) node.italic = true;
  if (format.underline) node.underline = true;
  if (format.overline) node.overline = true;
  if (format.strike) node.strike = true;
  if (format.font) node.font = format.font;
  if (format.fontSize) node.fontSize = format.fontSize;
  if (format.style) node.style = format.style;
  if (format.color !== void 0) node.color = format.color;
  return node;
}
function escapeCADSpecialChars(text) {
  return text.replace(/\\\\[\\\\{}]/g, function (match) {
    return "__".concat(match.charCodeAt(1), "__");
  }).replace(/\\\\/g, "\\\\\\\\").replace(/[{}]/g, function (match) {
    return "\\\\".concat(match);
  }).replace(/__(\\d+)__/g, function (_, code) {
    return "\\\\".concat(String.fromCharCode(Number(code)));
  });
}

var createMcText = function createMcText(node, props) {
  var baseHeight = props.baseHeight,
    position = props.position,
    style = props.style;
  var mcText = new McDbMText();
  mcText.contents = escapeCADSpecialChars(node.text);
  mcText.textHeight = getTextHeight(node, baseHeight);
  mcText.location = position;
  setFont(node, mcText, style);
  return mcText;
};

var getBoxInfo = function getBoxInfo(mcText) {
  var box = MxCADUtility.getTextEntityBox(mcText, false);
  var end = box.maxPt.clone();
  var start = new McGePoint3d(box.minPt.x, end.y);
  var width = start.distanceTo(end);
  var height = start.distanceTo(box.maxPt);
  return {
    start: start,
    end: end,
    width: width,
    height: height,
    box: box
  };
};

var getTextNodeBoxInfo = function getTextNodeBoxInfo(node, props) {
  var mcText = createMcText(node, props);
  mcText.reCompute();
  return getBoxInfo(mcText);
};

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var globalCharacterCache = /* @__PURE__ */new Map();
var CHAR_REPEAT_COUNT = 4;
function generateNodeFingerprint(node, baseHeight, style) {
  var _node$font = node.font,
    font = _node$font === void 0 ? "" : _node$font,
    _node$fontSize = node.fontSize,
    fontSize = _node$fontSize === void 0 ? 0 : _node$fontSize,
    _node$bold = node.bold,
    bold = _node$bold === void 0 ? false : _node$bold,
    _node$italic = node.italic,
    italic = _node$italic === void 0 ? false : _node$italic,
    _node$underline = node.underline,
    underline = _node$underline === void 0 ? false : _node$underline,
    _node$strike = node.strike,
    strike = _node$strike === void 0 ? false : _node$strike,
    _node$overline = node.overline,
    overline = _node$overline === void 0 ? false : _node$overline,
    _node$customType = node.customType,
    customType = _node$customType === void 0 ? "" : _node$customType;
  return "".concat(customType, "_").concat(style, "_").concat(font, "_").concat(fontSize, "_").concat(Number(bold), "_").concat(Number(italic), "_").concat(Number(underline), "_").concat(Number(strike), "_").concat(Number(overline), "_").concat(baseHeight);
}
function getCachedCharacterWidth(char, fingerprint, node, baseHeight, style) {
  var cache = globalCharacterCache.get(fingerprint);
  if (!cache || cache.baseHeight !== baseHeight) {
    cache = {
      charWidths: /* @__PURE__ */new Map(),
      baseHeight: baseHeight
    };
    globalCharacterCache.set(fingerprint, cache);
  }
  if (!cache.charWidths.has(char)) {
    var repeatedChar = char.repeat(CHAR_REPEAT_COUNT);
    var totalWidth = getBasicTextWidth(repeatedChar, node, baseHeight, style);
    var averageWidth = totalWidth / CHAR_REPEAT_COUNT;
    cache.charWidths.set(char, averageWidth);
  }
  return cache.charWidths.get(char);
}
function getBasicTextWidth(text, node, baseHeight, style) {
  var testNode = _objectSpread$5(_objectSpread$5({}, node), {}, {
    text: text
  });
  var _getTextNodeBoxInfo = getTextNodeBoxInfo(testNode, {
      position: new McGePoint3d(0, 0, 0),
      baseHeight: baseHeight,
      style: style
    }),
    width = _getTextNodeBoxInfo.width;
  return width;
}
function calculateTextWidth(text, node, baseHeight, style) {
  if (text.length === 0) return 0;
  var nodeFingerprint = generateNodeFingerprint(node, baseHeight, style);
  if (text.length === 1) {
    return getCachedCharacterWidth(text, nodeFingerprint, node, baseHeight, style);
  }
  var totalWidth = 0;
  var i = 0;
  var nonChineseRegex = /[^\\u4e00-\\u9fa5]/;
  while (i < text.length) {
    if (nonChineseRegex.test(text[i])) {
      var nonChineseText = "";
      while (i < text.length && nonChineseRegex.test(text[i])) {
        nonChineseText += text[i];
        i++;
      }
      totalWidth += getBasicTextWidth(nonChineseText, node, baseHeight, style);
    } else {
      totalWidth += getCachedCharacterWidth(text[i], nodeFingerprint, node, baseHeight, style);
      i++;
    }
  }
  return totalWidth;
}
function getTextWidth(text, node, baseHeight, style) {
  return calculateTextWidth(text, node, baseHeight, style);
}

function createNewLine() {
  return {
    nodes: [],
    height: 0,
    width: 0,
    breakInfo: {
      isWrapped: false,
      breakType: BreakType.None
    }
  };
}
function addTextFragmentToLine(line, fragment, nodeHeight) {
  line.nodes.push(fragment);
  line.width += fragment.width;
  line.height = Math.max(line.height, nodeHeight);
}
function ensureBreakInfo(line) {
  if (!line.breakInfo) {
    line.breakInfo = {
      isWrapped: false,
      breakType: BreakType.None
    };
  }
}
function updateLineBreakInfo(line, isWrapped, breakType) {
  ensureBreakInfo(line);
  line.breakInfo.isWrapped = isWrapped;
  line.breakInfo.breakType = breakType;
}

var sequenceCache = /* @__PURE__ */new WeakMap();
function generateFragmentKey(fragment) {
  return "".concat(fragment.nodeIndex, "_").concat(fragment.startOffset, "_").concat(fragment.endOffset);
}
function hasUniformStyle(fragments) {
  if (fragments.length <= 1) return true;
  var firstNode = fragments[0].node;
  return fragments.every(function (fragment) {
    return fragment.node === firstNode;
  });
}
function calculateContinuousSequenceWidth(sequence, options, fragmentWidths) {
  var baseHeight = options.baseHeight,
    getTextWidth = options.getTextWidth;
  if (hasUniformStyle(sequence.fragments)) {
    var totalWidth = getTextWidth(sequence.text, sequence.fragments[0].node, baseHeight);
    var fragmentWidth = totalWidth / sequence.fragments.length;
    sequence.fragments.forEach(function (fragment) {
      fragmentWidths.set(generateFragmentKey(fragment), fragmentWidth);
    });
    return totalWidth;
  } else {
    var _totalWidth = 0;
    sequence.fragments.forEach(function (fragment) {
      var width = getTextWidth(fragment.text, fragment.node, baseHeight);
      fragmentWidths.set(generateFragmentKey(fragment), width);
      _totalWidth += width;
    });
    return _totalWidth;
  }
}
function calculateBreakableFragmentWidth(fragment, options) {
  var baseHeight = options.baseHeight,
    getTextWidth = options.getTextWidth;
  return getTextWidth(fragment.text, fragment.node, baseHeight);
}
function calculateSequenceWidth(sequence, options) {
  var cached = sequenceCache.get(sequence);
  if (cached) {
    return cached.width;
  }
  var fragmentWidths = /* @__PURE__ */new Map();
  var totalWidth;
  if (sequence.type === SequenceType.Continuous) {
    totalWidth = calculateContinuousSequenceWidth(sequence, options, fragmentWidths);
  } else {
    totalWidth = 0;
    sequence.fragments.forEach(function (fragment) {
      var width = calculateBreakableFragmentWidth(fragment, options);
      fragmentWidths.set(generateFragmentKey(fragment), width);
      totalWidth += width;
    });
  }
  sequenceCache.set(sequence, {
    width: totalWidth,
    fragmentWidths: fragmentWidths
  });
  return totalWidth;
}
function getFragmentWidth(sequence, fragment) {
  var cached = sequenceCache.get(sequence);
  if (!cached) {
    throw new Error("Sequence width not calculated");
  }
  var width = cached.fragmentWidths.get(generateFragmentKey(fragment));
  if (width === void 0) {
    throw new Error("Fragment width not found");
  }
  return width;
}

function _createForOfIteratorHelper$5(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }
function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function calculateLineBreaks(textNodes, paragraphIndex, options) {
  var maxWidth = options.maxWidth,
    baseHeight = options.baseHeight,
    getTextHeight = options.getTextHeight,
    style = options.style;
  if (maxWidth <= 0) {
    throw new Error("maxWidth must be greater than 0");
  }
  if (!(textNodes !== null && textNodes !== void 0 && textNodes.length)) {
    return [];
  }
  var nodeFingerprints = /* @__PURE__ */new WeakMap();
  textNodes.forEach(function (node) {
    if (isText$1(node)) nodeFingerprints.set(node, generateNodeFingerprint(node, baseHeight, style));
  });
  var sequences = findTextSequences(textNodes);
  var lines = [];
  var currentLine = createNewLine();
  var currentWidth = 0;
  var _iterator = _createForOfIteratorHelper$5(sequences),
    _step;
  try {
    var _loop = function _loop() {
      var sequence = _step.value;
      var sequenceWidth = calculateSequenceWidth(sequence, options);
      if (currentWidth === 0 && sequenceWidth > maxWidth) {
        sequence.fragments.forEach(function (fragment) {
          var fragmentHeight = getTextHeight(fragment.node, baseHeight);
          addTextFragmentToLine(currentLine, {
            node: fragment.node,
            path: [paragraphIndex, fragment.nodeIndex],
            startOffset: fragment.startOffset,
            endOffset: fragment.endOffset,
            width: getFragmentWidth(sequence, fragment)
          }, fragmentHeight);
        });
        updateLineBreakInfo(currentLine, true, sequence.type === SequenceType.Continuous ? BreakType.Word : sequence.isAutoBreak ? BreakType.Word : BreakType.Forced);
        lines.push(currentLine);
        currentLine = createNewLine();
        currentWidth = 0;
        return 1; // continue
      }
      if (currentWidth + sequenceWidth > maxWidth && currentWidth > 0) {
        updateLineBreakInfo(currentLine, true, BreakType.Forced);
        lines.push(currentLine);
        currentLine = createNewLine();
        currentWidth = 0;
      }
      sequence.fragments.forEach(function (fragment) {
        var fragmentHeight = getTextHeight(fragment.node, baseHeight);
        addTextFragmentToLine(currentLine, {
          node: fragment.node,
          path: [paragraphIndex, fragment.nodeIndex],
          startOffset: fragment.startOffset,
          endOffset: fragment.endOffset,
          width: getFragmentWidth(sequence, fragment)
        }, fragmentHeight);
      });
      currentWidth += sequenceWidth;
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      if (_loop()) continue;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (currentLine.nodes.length > 0) {
    updateLineBreakInfo(currentLine, true, BreakType.Forced);
    lines.push(currentLine);
  }
  return lines;
}

var getTextPosition = function getTextPosition(options) {
  var basePosition = options.basePosition,
    horizontalOffset = options.horizontalOffset,
    verticalOffset = options.verticalOffset;
  var position = basePosition.clone().addvec(McGeVector3d.kXAxis.clone().mult(horizontalOffset)).addvec(McGeVector3d.kYAxis.clone().negate().mult(verticalOffset));
  return position;
};

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var createTextEntity = function createTextEntity(options) {
  var node = options.node,
    text = options.text,
    height = options.height,
    position = options.position,
    style = options.style;
  var mcText = createMcText(_objectSpread$4(_objectSpread$4({}, node), {}, {
    text: text
  }), {
    baseHeight: height,
    position: getTextPosition(position),
    style: style
  });
  setColor(node, mcText);
  return mcText;
};

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function isText(node) {
  return "text" in node;
}
function calculateParagraph(ent, node, baseHeight, index) {
  var textNodes = node.children.filter(function (child) {
    return isText(child);
  });
  if (textNodes.length === 0 || textNodes.length === 1 && isText(textNodes[0]) && textNodes[0].text === "") {
    var emptyLine = {
      nodes: [{
        node: textNodes[0] || _objectSpread$3({
          text: ""
        }, /* @__PURE__ */Object.create(null)),
        path: [index, 0],
        startOffset: 0,
        endOffset: 0,
        width: 0
      }],
      height: baseHeight,
      width: 0,
      breakInfo: {
        isWrapped: false,
        breakType: BreakType.None
      },
      horizontalOffset: 0,
      bottomSpacing: baseHeight * (ent.lineHeightRatio - 1)
    };
    return {
      width: 0,
      height: baseHeight + emptyLine.bottomSpacing,
      lines: [emptyLine]
    };
  }
  var lines;
  if (ent.isWordWrap) {
    var mTextImp = ent.getMTextImp();
    lines = calculateLineBreaks(textNodes, index, {
      maxWidth: mTextImp.maxWidth,
      baseHeight: baseHeight,
      getTextWidth: function getTextWidth$1() {
        for (var _len = arguments.length, ages = new Array(_len), _key = 0; _key < _len; _key++) {
          ages[_key] = arguments[_key];
        }
        return getTextWidth.apply(void 0, ages.concat([ent.textStyle]));
      },
      getTextHeight: function getTextHeight$1(node2, height) {
        var baseLineHeight = getTextHeight(node2, height);
        return baseLineHeight;
      },
      style: ent.textStyle
    });
    lines = lines.map(function (line) {
      var baseHeight2 = line.height;
      return _objectSpread$3(_objectSpread$3({}, line), {}, {
        height: baseHeight2,
        bottomSpacing: baseHeight2 * (ent.lineHeightRatio - 1)
      });
    });
  } else {
    var totalWidth = textNodes.reduce(function (width, node2) {
      return width + getTextWidth(node2.text, node2, baseHeight, ent.textStyle);
    }, 0);
    var lineHeight = Math.max.apply(Math, _toConsumableArray(textNodes.map(function (node2) {
      return getTextHeight(node2, baseHeight);
    })));
    lines = [{
      nodes: textNodes.map(function (node2, nodeIndex) {
        return {
          node: node2,
          path: [index, nodeIndex],
          startOffset: 0,
          endOffset: node2.text.length,
          width: getTextWidth(node2.text, node2, baseHeight, ent.textStyle)
        };
      }),
      height: lineHeight,
      bottomSpacing: baseHeight * (ent.lineHeightRatio - 1),
      width: totalWidth,
      breakInfo: {
        isWrapped: false,
        breakType: BreakType.None
      }
    }];
  }
  var totalHeight = lines.reduce(function (total, line) {
    return total + line.height + (line.bottomSpacing || 0);
  }, 0);
  var maxWidth = Math.max.apply(Math, _toConsumableArray(lines.map(function (line) {
    return line.width;
  })));
  return {
    width: maxWidth,
    height: totalHeight,
    lines: lines
  };
}

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var drawLine$1 = function drawLine(draw, start, end) {
  var startPoint = new McGePoint3d(start.x, start.y, start.z);
  var endPoint = new McGePoint3d(end.x, end.y, end.z);
  var line = new McDbLine(startPoint, endPoint);
  draw.drawEntity(line);
};
function calculateLineOffset(alignment, lineWidth, maxWidth) {
  switch (alignment) {
    case McDb.AttachmentPoint.kMiddleCenter:
    case McDb.AttachmentPoint.kTopCenter:
    case McDb.AttachmentPoint.kBottomCenter:
      return (maxWidth - lineWidth) / 2;
    case McDb.AttachmentPoint.kMiddleRight:
    case McDb.AttachmentPoint.kTopRight:
    case McDb.AttachmentPoint.kBottomRight:
      return maxWidth - lineWidth;
    default:
      return 0;
  }
}
function calculateLinesOffset(lines, alignment, maxWidth) {
  return lines.map(function (line) {
    return _objectSpread$2(_objectSpread$2({}, line), {}, {
      horizontalOffset: calculateLineOffset(alignment, line.width, maxWidth)
    });
  });
}
var renderParagraph = function renderParagraph(ent, draw, props) {
  var position = props.position,
    height = props.height,
    lines = props.lines,
    contentHeight = props.contentHeight,
    width = props.width,
    transformsMatrix = props.transformsMatrix;
  var totalHeight = 0;
  var textInfos = [];
  var linesWithOffset = calculateLinesOffset(lines, ent.textAlignment, width);
  linesWithOffset.forEach(function (line) {
    var lineOffset = line.horizontalOffset || 0;
    line.nodes.forEach(function (nodeInfo) {
      var textHeight = getTextHeight(nodeInfo.node, height);
      var positionInfo = {
        basePosition: position,
        horizontalOffset: lineOffset,
        verticalOffset: totalHeight + (line.height - textHeight)
      };
      var textContent = nodeInfo.node.text.substring(nodeInfo.startOffset, nodeInfo.endOffset);
      var mcText = createTextEntity({
        node: nodeInfo.node,
        text: textContent,
        height: height,
        position: positionInfo,
        style: ent.textStyle
      });
      var mTextImp = ent.getMTextImp();
      if (!mTextImp.isEditState) {
        mcText.transformBy(transformsMatrix);
      }
      draw.trueColor = mcText.trueColor;
      draw.drawEntity(mcText);
      var info = getBoxInfo(mcText);
      var start = info.box.minPt.clone();
      var end = info.box.minPt.clone().addvec(McGeVector3d.kXAxis.clone().mult(nodeInfo.width));
      if (nodeInfo.node.underline) {
        drawLine$1(draw, start, end);
      }
      if (nodeInfo.node.strike) {
        var height2 = mcText.textHeight;
        drawLine$1(draw, start.clone().addvec(McGeVector3d.kYAxis.clone().mult(height2 * 0.5)), end.clone().subvec(McGeVector3d.kYAxis.clone().mult(-height2 * 0.5)));
      }
      if (nodeInfo.node.overline) {
        drawLine$1(draw, new McGePoint3d(start.x, info.box.maxPt.y, start.z), new McGePoint3d(end.x, info.box.maxPt.y, start.z));
      }
      textInfos.push(_objectSpread$2(_objectSpread$2({}, info), {}, {
        node: nodeInfo.node,
        height: line.height,
        box: {
          minPt: info.box.minPt,
          maxPt: info.box.maxPt,
          ret: true
        }
      }));
      lineOffset += nodeInfo.width;
    });
    totalHeight += line.height + (line.bottomSpacing || 0);
  });
  return {
    position: position,
    width: props.width,
    height: contentHeight,
    lines: linesWithOffset
  };
};

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var paragraphElementName = "paragraph";
var MxCADParagraphElement = /*#__PURE__*/function (_MxCADBaseCustomElemn) {
  _inherits$1(MxCADParagraphElement, _MxCADBaseCustomElemn);
  var _super = _createSuper$5(MxCADParagraphElement);
  function MxCADParagraphElement() {
    var _this;
    _classCallCheck$1(this, MxCADParagraphElement);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "type", paragraphElementName);
    return _this;
  }
  _createClass$1(MxCADParagraphElement, [{
    key: "render",
    value: function render(entity, draw, calculateData, renderData) {
      var position = renderData.position,
        index = renderData.index,
        alignmentWidth = renderData.alignmentWidth;
      var height = entity.height;
      var isWordWrap = entity.isWordWrap;
      var imp = entity.getMTextImp();
      var transformsMatrix = imp.met;
      return renderParagraph(entity, draw, {
        position: position,
        isWordWrap: isWordWrap,
        height: height,
        index: index,
        lines: calculateData.lines,
        width: alignmentWidth,
        contentHeight: calculateData.height,
        transformsMatrix: transformsMatrix
      });
    }
  }, {
    key: "calculate",
    value: function calculate(entity, element, index) {
      return calculateParagraph(entity, element, entity.height, index);
    }
  }]);
  return MxCADParagraphElement;
}(MxCADBaseCustomElemnet);

var ElementTextManager = /*#__PURE__*/function () {
  function ElementTextManager() {
    _classCallCheck$1(this, ElementTextManager);
    _defineProperty(this, "elementMap", /* @__PURE__ */new Map());
    this.registerElement(new MxCADParagraphElement());
  }
  _createClass$1(ElementTextManager, [{
    key: "registerElement",
    value: function registerElement(props) {
      this.elementMap.set(props.type, props);
    }
  }, {
    key: "get",
    value: function get(type) {
      return this.elementMap.get(type);
    }
  }, {
    key: "has",
    value: function has(type) {
      return this.elementMap.has(type);
    }
  }]);
  return ElementTextManager;
}();

var PubSub = /*#__PURE__*/function () {
  function PubSub() {
    _classCallCheck$1(this, PubSub);
    _defineProperty(this, "events", void 0);
    this.events = {};
  }
  _createClass$1(PubSub, [{
    key: "on",
    value: function on(event, callback) {
      var self = this;
      if (!self.events.hasOwnProperty(event)) {
        self.events[event] = [];
      }
      self.events[event].push(callback);
    }
  }, {
    key: "once",
    value: function once(event, callback) {
      var _this = this;
      var onceWrapper = function onceWrapper() {
        callback.apply(void 0, arguments);
        _this.off(event, onceWrapper);
      };
      this.on(event, onceWrapper);
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }
      var self = this;
      if (!self.events.hasOwnProperty(event)) {
        return;
      }
      self.events[event].map(function (callback) {
        return callback.apply(void 0, data);
      });
    }
  }, {
    key: "off",
    value: function off(event, callback) {
      if (this.events[event]) {
        if (typeof callback === "undefined") {
          this.events[event] = [];
        } else {
          var index = this.events[event].indexOf(callback);
          this.events[event].splice(index, 1);
        }
      }
    }
  }]);
  return PubSub;
}();

function getActualRenderStartPosition() {
  var contentHeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.actualHeight;
  var contentWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.actualWidth;
  var topLeft = this.getTopLeftPt();
  var centerY = topLeft.y - this.maxHeight / 2;
  var centerX = topLeft.x + this.maxWidth / 2;
  var startY = topLeft.y;
  var startX = topLeft.x;
  switch (this.textAlignment) {
    case McDb.AttachmentPoint.kMiddleLeft:
    case McDb.AttachmentPoint.kMiddleCenter:
    case McDb.AttachmentPoint.kMiddleRight:
      {
        startY = centerY + contentHeight / 2;
        break;
      }
    case McDb.AttachmentPoint.kBottomLeft:
    case McDb.AttachmentPoint.kBottomCenter:
    case McDb.AttachmentPoint.kBottomRight:
      {
        var bottomY = topLeft.y - this.maxHeight;
        startY = bottomY + contentHeight;
        break;
      }
    default:
      {
        startY = topLeft.y;
      }
  }
  if (contentWidth > this.maxWidth) {
    switch (this.textAlignment) {
      case McDb.AttachmentPoint.kTopCenter:
      case McDb.AttachmentPoint.kMiddleCenter:
      case McDb.AttachmentPoint.kBottomCenter:
        {
          startX = centerX - contentWidth / 2;
          break;
        }
      case McDb.AttachmentPoint.kTopRight:
      case McDb.AttachmentPoint.kMiddleRight:
      case McDb.AttachmentPoint.kBottomRight:
        {
          startX = topLeft.x + this.maxWidth - contentWidth;
          break;
        }
      default:
        {
          startX = topLeft.x;
        }
    }
  } else {
    switch (this.textAlignment) {
      case McDb.AttachmentPoint.kTopCenter:
      case McDb.AttachmentPoint.kMiddleCenter:
      case McDb.AttachmentPoint.kBottomCenter:
        {
          startX = centerX - contentWidth / 2;
          break;
        }
      case McDb.AttachmentPoint.kTopRight:
      case McDb.AttachmentPoint.kMiddleRight:
      case McDb.AttachmentPoint.kBottomRight:
        {
          startX = topLeft.x + this.maxWidth - contentWidth;
          break;
        }
      default:
        {
          startX = topLeft.x;
        }
    }
  }
  return new McGePoint3d(startX, startY, topLeft.z);
}

var calculateParagraphPosition = function calculateParagraphPosition(ent, startPoint, paragraphIndex) {
  var offsetHeight = 0;
  var imp = ent.getMTextImp();
  for (var i = 0; i < paragraphIndex; i++) {
    var lines = imp.getParagraphLines(i);
    if (!lines) continue;
    offsetHeight += lines.reduce(function (height, line) {
      return height + line.height + (line.bottomSpacing || 0);
    }, 0);
  }
  return startPoint.clone().subvec(McGeVector3d.kYAxis.clone().mult(offsetHeight));
};
var calculateLineVerticalPosition = function calculateLineVerticalPosition(paragraphInfo, lineIndex) {
  var _paragraphInfo$lines$;
  var accumulatedHeight = 0;
  for (var i = 0; i < lineIndex; i++) {
    var line = paragraphInfo.lines[i];
    accumulatedHeight += line.height + (line.bottomSpacing || 0);
  }
  var lineHeight = ((_paragraphInfo$lines$ = paragraphInfo.lines[lineIndex]) === null || _paragraphInfo$lines$ === void 0 ? void 0 : _paragraphInfo$lines$.height) || 0;
  return {
    accumulatedHeight: accumulatedHeight,
    lineHeight: lineHeight
  };
};
var calculateLinePosition = function calculateLinePosition(paragraphPosition, lineWidth, verticalInfo) {
  var accumulatedHeight = verticalInfo.accumulatedHeight,
    lineHeight = verticalInfo.lineHeight;
  var lineMinY = paragraphPosition.y - accumulatedHeight;
  var lineMaxY = lineMinY - lineHeight;
  return {
    start: new McGePoint3d(paragraphPosition.x, lineMinY),
    end: new McGePoint3d(paragraphPosition.x + lineWidth, lineMinY),
    minPt: new McGePoint3d(paragraphPosition.x, lineMinY),
    maxPt: new McGePoint3d(paragraphPosition.x + lineWidth, lineMaxY),
    height: lineHeight
  };
};

function getLinePosition(paragraphIndex, lineIndex) {
  var paragraphInfo = this.__PARAGRAPH_INFOS__[paragraphIndex];
  if (!paragraphInfo) return null;
  var position = paragraphInfo.position,
    lines = paragraphInfo.lines;
  var line = lines[lineIndex];
  if (!line) return null;
  var verticalInfo = calculateLineVerticalPosition(paragraphInfo, lineIndex);
  var lineWidth = line.nodes.reduce(function (width, node) {
    return width + node.width;
  }, 0);
  return calculateLinePosition(position, lineWidth, verticalInfo);
}

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var MxCADMTextImp = /*#__PURE__*/function (_PubSub) {
  _inherits$1(MxCADMTextImp, _PubSub);
  var _super = _createSuper$4(MxCADMTextImp);
  function MxCADMTextImp() {
    var _this;
    _classCallCheck$1(this, MxCADMTextImp);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "pt1", new McGePoint3d());
    _defineProperty(_assertThisInitialized$1(_this), "pt2", new McGePoint3d());
    _defineProperty(_assertThisInitialized$1(_this), "height", 20);
    _defineProperty(_assertThisInitialized$1(_this), "data", void 0);
    _defineProperty(_assertThisInitialized$1(_this), "isWordWrap", true);
    _defineProperty(_assertThisInitialized$1(_this), "textAlignment", McDb.AttachmentPoint.kTopLeft);
    _defineProperty(_assertThisInitialized$1(_this), "actualHeight", 0);
    _defineProperty(_assertThisInitialized$1(_this), "actualWidth", 0);
    _defineProperty(_assertThisInitialized$1(_this), "met", new McGeMatrix3d());
    _defineProperty(_assertThisInitialized$1(_this), "angle", 0);
    _defineProperty(_assertThisInitialized$1(_this), "lineHeightRatio", 1.6);
    _defineProperty(_assertThisInitialized$1(_this), "entityType", "custom");
    _defineProperty(_assertThisInitialized$1(_this), "isEditState", false);
    _defineProperty(_assertThisInitialized$1(_this), "__PARAGRAPH_INFOS__", []);
    _defineProperty(_assertThisInitialized$1(_this), "getActualRenderStartPosition", getActualRenderStartPosition);
    _defineProperty(_assertThisInitialized$1(_this), "getLinePosition", getLinePosition);
    _defineProperty(_assertThisInitialized$1(_this), "getTextHeight", getTextHeight);
    return _this;
  }
  _createClass$1(MxCADMTextImp, [{
    key: "dwgInFields",
    value: function dwgInFields(filter) {
      this.pt1 = filter.readPoint("pt1").val;
      this.pt2 = filter.readPoint("pt2").val;
      this.height = filter.readDouble("height").val;
      var data = filter.readString("data").val;
      this.data = JSON.parse(data);
      this.textAlignment = filter.readDouble("textAlignment").val;
      this.angle = filter.readDouble("angle").val;
      this.lineHeightRatio = filter.readDouble("lineHeightRatio").val || 1;
      var matrix = filter.readString("met").val;
      var matrixData = JSON.parse(matrix);
      for (var index = 0; index < matrixData.length; index++) {
        var element = matrixData[index];
        for (var j = 0; j < element.length; j++) {
          var data2 = element[j];
          this.met.setData(index, j, data2);
        }
      }
      this.isWordWrap = filter.readDouble("isWordWrap").val === 1;
      this.entityType = filter.readString("entityType").val || "custom";
      return true;
    }
  }, {
    key: "dwgOutFields",
    value: function dwgOutFields(filter) {
      filter.writePoint("pt1", this.pt1);
      filter.writePoint("pt2", this.pt2);
      filter.writeDouble("height", this.height);
      filter.writeString("data", JSON.stringify(this.data));
      filter.writeDouble("textAlignment", this.textAlignment);
      filter.writeDouble("angle", this.angle);
      filter.writeDouble("lineHeightRatio", this.lineHeightRatio);
      filter.writeDouble("isWordWrap", this.isWordWrap ? 1 : 0);
      filter.writeString("entityType", this.entityType);
      var matrix = [];
      for (var i = 0; i < 4; i++) {
        matrix[i] = [];
        for (var j = 0; j < 4; j++) {
          var data = this.met.getData(i, j);
          matrix[i][j] = data;
        }
      }
      filter.writeString("met", JSON.stringify(matrix));
      return true;
    }
  }, {
    key: "moveGripPointsAt",
    value: function moveGripPointsAt(iIndex, dXOffset, dYOffset, dZOffset) {
      if (iIndex === 0) {
        var translationMatrix = new McGeMatrix3d();
        translationMatrix.setToTranslation(new McGeVector3d(dXOffset, dYOffset, dZOffset));
        this.met = this.met.postMultBy(translationMatrix);
      } else if (iIndex === 1) {
        var worldPt2 = this.pt2.clone().transformBy(this.met);
        worldPt2.x += dXOffset;
        worldPt2.y += dYOffset;
        worldPt2.z += dZOffset;
        var invMet = new McGeMatrix3d();
        invMet.copy(this.met);
        invMet.invert();
        this.pt2 = worldPt2.transformBy(invMet);
      }
    }
  }, {
    key: "getGripPoints",
    value: function getGripPoints() {
      var ret = new McGePoint3dArray();
      if (this.isEditState) {
        return ret;
      }
      var pt1 = this.pt1.clone().transformBy(this.met);
      var pt2 = this.pt2.clone().transformBy(this.met);
      ret.append(pt1);
      ret.append(pt2);
      return ret;
    }
  }, {
    key: "getParagraphLines",
    value: function getParagraphLines(paragraphIndex) {
      var paragraphInfo = this.__PARAGRAPH_INFOS__[paragraphIndex];
      return (paragraphInfo === null || paragraphInfo === void 0 ? void 0 : paragraphInfo.lines) || [];
    }
  }, {
    key: "getLineCount",
    value: function getLineCount(paragraphIndex) {
      var paragraphInfo = this.__PARAGRAPH_INFOS__[paragraphIndex];
      if (!paragraphInfo) return 0;
      return paragraphInfo.lines.length;
    }
  }, {
    key: "maxWidth",
    get: function get() {
      var pt1Clone = this.pt1.clone();
      var pt2Clone = this.pt2.clone();
      pt2Clone.y = pt1Clone.y;
      return pt1Clone.distanceTo(pt2Clone);
    }
  }, {
    key: "maxHeight",
    get: function get() {
      var pt1Clone = this.pt1.clone();
      var pt2Clone = this.pt2.clone();
      pt2Clone.x = pt1Clone.x;
      return pt1Clone.distanceTo(pt2Clone);
    }
  }, {
    key: "setData",
    value: function setData(data) {
      this.data = data;
    }
  }, {
    key: "getTopLeftPt",
    value: function getTopLeftPt() {
      var minX = Math.min(this.pt1.x, this.pt2.x);
      var minY = Math.max(this.pt1.y, this.pt2.y);
      return new McGePoint3d(minX, minY);
    }
  }, {
    key: "getLineHorizontalOffset",
    value: function getLineHorizontalOffset(paragraphIndex, lineIndex) {
      var paragraphInfo = this.__PARAGRAPH_INFOS__[paragraphIndex];
      if (!paragraphInfo || !paragraphInfo.lines[lineIndex]) return 0;
      return paragraphInfo.lines[lineIndex].horizontalOffset || 0;
    }
  }, {
    key: "getTotalContentHeight",
    value: function getTotalContentHeight() {
      return this.__PARAGRAPH_INFOS__.reduce(function (sum, info) {
        return sum + ((info === null || info === void 0 ? void 0 : info.height) || 0);
      }, 0);
    }
  }, {
    key: "setEntityType",
    value: function setEntityType(type) {
      if (this.entityType !== type) {
        this.entityType = type;
      }
    }
  }]);
  return MxCADMTextImp;
}(PubSub);

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var commandHandlers = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, CADTextCommandType.Paragraph, function (state) {
  if (state.currentText.length > 0 || state.currentBlock.children.length === 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
  }
  state.currentText = "";
  if (state.currentBlock.children.length > 0) {
    state.blocks.push(state.currentBlock);
  }
  state.currentBlock = {
    type: "paragraph",
    children: []
  };
}), CADTextCommandType.Color, function (state, params) {
  if (state.currentText.length > 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
    state.currentText = "";
  }
  var decimalColor = parseInt(params, 10);
  state.formats = _objectSpread$1(_objectSpread$1({}, state.formats), {}, {
    color: decimalToRgb(decimalColor)
  });
}), CADTextCommandType.ColorIndex, function (state, params) {
  if (state.currentText.length > 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
    state.currentText = "";
  }
  state.formats = _objectSpread$1(_objectSpread$1({}, state.formats), {}, {
    color: parseInt(params, 10)
  });
}), CADTextCommandType.Font, function (state, params) {
  handleFontCommand(state, params);
}), CADTextCommandType.FontAlt, function (state, params) {
  handleFontCommand(state, params);
}), CADTextCommandType.FontHeight, function (state, params) {
  if (state.currentText.length > 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
    state.currentText = "";
  }
  var cleanedParams = params.replace(/x$/i, "");
  var fontSize = parseFloat(cleanedParams);
  state.formats = _objectSpread$1(_objectSpread$1({}, state.formats), {}, {
    fontSize: fontSize
  });
}), CADTextCommandType.Overline, function (state) {
  if (state.currentText.length > 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
    state.currentText = "";
  }
  state.formats = _objectSpread$1(_objectSpread$1({}, state.formats), {}, {
    overline: true
  });
}), CADTextCommandType.Strike, function (state) {
  if (state.currentText.length > 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
    state.currentText = "";
  }
  state.formats = _objectSpread$1(_objectSpread$1({}, state.formats), {}, {
    strike: true
  });
}), CADTextCommandType.Underline, function (state) {
  if (state.currentText.length > 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
    state.currentText = "";
  }
  state.formats = _objectSpread$1(_objectSpread$1({}, state.formats), {}, {
    underline: true
  });
});
function handleFontCommand(state, params) {
  if (state.currentText.length > 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
    state.currentText = "";
  }
  var parts = params.split("|");
  var fontName = parts[0];
  var isBold = parts.includes("b1");
  var isItalic = parts.includes("i1");
  state.formats = _objectSpread$1(_objectSpread$1({}, state.formats), {}, {
    font: fontName,
    bold: isBold,
    italic: isItalic
  });
}
function processCommandGroup(state, group) {
  for (var i = 0; i < group.commands.length; i++) {
    var commandType = group.commands[i];
    var params = group.params[i] || "";
    if (commandHandlers[commandType]) {
      commandHandlers[commandType](state, params);
    }
  }
}
function parseCommandString(commandStr) {
  var group = {
    commands: [],
    params: []
  };
  var commandRegex = /\\\\([A-Za-z])([^\\\\;]*)/g;
  var match;
  while ((match = commandRegex.exec(commandStr)) !== null) {
    var _match = match,
      _match2 = _slicedToArray$1(_match, 3),
      command = _match2[1],
      params = _match2[2];
    group.commands.push(command);
    group.params.push(params);
  }
  return group;
}
function isNoParamCommand(command) {
  return command === CADTextCommandType.Paragraph;
}
function cadTextToSlate(cadText) {
  var state = {
    currentText: "",
    formats: {},
    blocks: [],
    currentBlock: {
      type: "paragraph",
      children: []
    },
    inBlock: false,
    inCommand: false,
    commandBuffer: "",
    commandGroups: []
  };
  var i = 0;
  while (i < cadText.length) {
    var char = cadText[i];
    if (state.inCommand) {
      if (char === ";") {
        var commandStr = "\\\\" + state.commandBuffer;
        var group = parseCommandString(commandStr);
        if (group.commands.length > 0) {
          processCommandGroup(state, group);
        }
        state.inCommand = false;
        state.commandBuffer = "";
        i++;
      } else if (state.commandBuffer.length === 1 && isNoParamCommand(state.commandBuffer)) {
        var _group = {
          commands: [state.commandBuffer],
          params: [""]
        };
        processCommandGroup(state, _group);
        state.inCommand = false;
        state.commandBuffer = "";
        i++;
      } else {
        state.commandBuffer += char;
        i++;
      }
    } else if (char === "\\\\") {
      if (i + 1 < cadText.length) {
        var nextChar = cadText[i + 1];
        if (nextChar === "\\\\") {
          state.currentText += "\\\\";
          i += 2;
        } else if (nextChar === "{" || nextChar === "}") {
          state.currentText += nextChar;
          i += 2;
        } else if (nextChar.toLowerCase() === "p") {
          if (i > 0 && cadText[i - 1] === "\\\\") {
            state.currentText += "\\\\P";
            i += 2;
          } else {
            if (state.currentText.length > 0) {
              state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
              state.currentText = "";
            }
            var _group2 = {
              commands: ["P"],
              params: [""]
            };
            processCommandGroup(state, _group2);
            i += 2;
          }
        } else if (isCADCommand(nextChar)) {
          if (state.currentText.length > 0) {
            state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
            state.currentText = "";
          }
          state.inCommand = true;
          i++;
        } else {
          state.currentText += char;
          i++;
        }
      } else {
        state.currentText += char;
        i++;
      }
    } else if (char === "{") {
      state.inBlock = true;
      if (state.currentText.length > 0) {
        state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
        state.currentText = "";
      }
      i++;
    } else if (char === "}") {
      state.inBlock = false;
      if (state.currentText.length > 0) {
        state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
        state.currentText = "";
      }
      state.formats = {};
      i++;
    } else {
      state.currentText += char;
      i++;
    }
  }
  if (state.currentText.length > 0) {
    state.currentBlock.children.push(createFormattedTextNode(state.currentText, state.formats));
  }
  if (state.currentBlock.children.length > 0) {
    state.blocks.push(state.currentBlock);
  }
  if (state.blocks.length === 0) {
    state.blocks.push({
      type: "paragraph",
      children: [createFormattedTextNode("", {})]
    });
  }
  return state.blocks;
}
function isCADCommand(char) {
  var validCommands = ["f", "c", "h", "o", "k", "l", "F", "C", "H", "O", "K", "L", "A"];
  return validCommands.includes(char);
}

function _createForOfIteratorHelper$4(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }
function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var nodeFormatHandlers = {
  color: function color(node) {
    var color = node.color;
    if (color === void 0) return "";
    if (Array.isArray(color)) {
      var _color = _slicedToArray$1(color, 3),
        r = _color[0],
        g = _color[1],
        b = _color[2];
      var decimal = r + g * 256 + b * 256 * 256;
      return "\\\\".concat(CADTextCommandType.Color).concat(decimal, ";");
    } else if (typeof color === "number") {
      return "\\\\".concat(CADTextCommandType.ColorIndex).concat(color, ";");
    } else if (typeof color === "string") {
      var hex = color.replace(/^#/, "");
      var _r = parseInt(hex.substring(0, 2), 16);
      var _g = parseInt(hex.substring(2, 4), 16);
      var _b = parseInt(hex.substring(4, 6), 16);
      var _decimal = _r + _g * 256 + _b * 256 * 256;
      return "\\\\".concat(CADTextCommandType.Color).concat(_decimal, ";");
    }
    return "";
  },
  font: function font(node) {
    var nodeAny = node;
    var font = nodeAny.font || "simplex";
    var bold = nodeAny.bold ? "|b1" : "";
    var italic = nodeAny.italic ? "|i1" : "";
    return "\\\\".concat(CADTextCommandType.Font).concat(font).concat(bold).concat(italic, ";");
  },
  fontSize: function fontSize(node) {
    var fontSize = node.fontSize;
    if (fontSize === void 0) return "";
    return "\\\\".concat(CADTextCommandType.FontHeight).concat(fontSize, "x;");
  },
  bold: function bold(node) {
    if (!node.bold) return "";
    if (node.font) return "";
    return "\\\\".concat(CADTextCommandType.Font, "simplex|b1;");
  },
  italic: function italic(node) {
    if (!node.italic) return "";
    if (node.font) return "";
    return "\\\\".concat(CADTextCommandType.Font, "simplex|i1;");
  },
  underline: function underline(node) {
    if (!node.underline) return "";
    return "\\\\".concat(CADTextCommandType.Underline, ";");
  },
  overline: function overline(node) {
    if (!node.overline) return "";
    return "\\\\".concat(CADTextCommandType.Overline, ";");
  },
  strike: function strike(node) {
    if (!node.strike) return "";
    return "\\\\".concat(CADTextCommandType.Strike, ";");
  }
};
function generateDecorationCommands(format) {
  var commands = "";
  if (format.underline) commands += "\\\\".concat(CADTextCommandType.Underline);
  if (format.overline) commands += "\\\\".concat(CADTextCommandType.Overline);
  if (format.strike) commands += "\\\\".concat(CADTextCommandType.Strike);
  return commands ? commands + ";" : "";
}
function processElement(element) {
  if (element.type !== "paragraph") {
    return "";
  }
  var result = "";
  var _iterator = _createForOfIteratorHelper$4(element.children),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var node = _step.value;
      var nodeFormat = extractFormatFromNode(node);
      var hasFormat = Object.keys(nodeFormat).length > 0;
      if (hasFormat) {
        result += "{";
        for (var _i = 0, _arr = ["font", "fontSize", "color"]; _i < _arr.length; _i++) {
          var key = _arr[_i];
          if (nodeFormat[key] !== void 0) {
            var handler = nodeFormatHandlers[key];
            result += handler(node);
          }
        }
        var hasDecorations = nodeFormat.underline === true || nodeFormat.overline === true || nodeFormat.strike === true;
        if (hasDecorations) {
          result += generateDecorationCommands(nodeFormat);
        }
        result += escapeCADSpecialChars(node.text);
        result += "}";
      } else {
        result += escapeCADSpecialChars(node.text);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
}
function slateToCADText(nodes) {
  var paragraphs = [];
  var _iterator2 = _createForOfIteratorHelper$4(nodes),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var node = _step2.value;
      var paragraphNode = node;
      var paragraphText = processElement(paragraphNode);
      paragraphs.push(paragraphText);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return paragraphs.join("\\\\".concat(CADTextCommandType.Paragraph));
}

var MultilineTextConverter = /*#__PURE__*/function () {
  function MultilineTextConverter() {
    _classCallCheck$1(this, MultilineTextConverter);
  }
  _createClass$1(MultilineTextConverter, null, [{
    key: "fromMText",
    value: function fromMText(mtext) {
      var customEntity = new MxCADMText();
      var box = mtext.getBoundingBox();
      var pt1;
      var location = mtext.location;
      var width = mtext.width === 0 ? box.maxPt.x - box.minPt.x : mtext.width;
      var height = box.maxPt.y - box.minPt.y;
      switch (mtext.attachment) {
        case McDb.AttachmentPoint.kTopLeft:
          pt1 = location.clone();
          break;
        case McDb.AttachmentPoint.kTopCenter:
          pt1 = new McGePoint3d(location.x - width / 2, location.y, location.z);
          break;
        case McDb.AttachmentPoint.kTopRight:
          pt1 = new McGePoint3d(location.x - width, location.y, location.z);
          break;
        case McDb.AttachmentPoint.kMiddleLeft:
          pt1 = new McGePoint3d(location.x, location.y + height / 2, location.z);
          break;
        case McDb.AttachmentPoint.kMiddleCenter:
          pt1 = new McGePoint3d(location.x - width / 2, location.y + height / 2, location.z);
          break;
        case McDb.AttachmentPoint.kMiddleRight:
          pt1 = new McGePoint3d(location.x - width, location.y + height / 2, location.z);
          break;
        case McDb.AttachmentPoint.kBottomLeft:
          pt1 = new McGePoint3d(location.x, location.y + height, location.z);
          break;
        case McDb.AttachmentPoint.kBottomCenter:
          pt1 = new McGePoint3d(location.x - width / 2, location.y + height, location.z);
          break;
        case McDb.AttachmentPoint.kBottomRight:
          pt1 = new McGePoint3d(location.x - width, location.y + height, location.z);
          break;
        default:
          pt1 = location.clone();
      }
      customEntity.pt1 = pt1;
      var pt2 = new McGePoint3d(pt1.x + width, pt1.y - height, pt1.z);
      customEntity.pt2 = pt2;
      customEntity.layer = mtext.layer;
      customEntity.drawOrder = mtext.drawOrder;
      customEntity.linetype = mtext.linetype;
      customEntity.normal = mtext.normal;
      customEntity.lineweight = mtext.lineweight;
      customEntity.linetypeScale = mtext.linetypeScale;
      customEntity.height = mtext.textHeight;
      customEntity.textAlignment = mtext.attachment;
      customEntity.angle = THREE.MathUtils.radToDeg(mtext.rotation);
      customEntity.textStyle = mtext.textStyle;
      var textContent = mtext.contents;
      var slateData = cadTextToSlate(textContent);
      customEntity.data = slateData;
      return customEntity;
    }
  }, {
    key: "toMText",
    value: function toMText(mtext, customEntity) {
      var mTextImp = customEntity.getMTextImp();
      var width = customEntity.isWordWrap ? mTextImp.maxWidth : mTextImp.actualWidth;
      var height = customEntity.isWordWrap ? mTextImp.maxHeight : mTextImp.actualHeight;
      var location;
      var pt1 = customEntity.pt1;
      switch (customEntity.textAlignment) {
        case McDb.AttachmentPoint.kTopLeft:
          location = pt1.clone();
          break;
        case McDb.AttachmentPoint.kTopCenter:
          location = new McGePoint3d(pt1.x + width / 2, pt1.y, pt1.z);
          break;
        case McDb.AttachmentPoint.kTopRight:
          location = new McGePoint3d(pt1.x + width, pt1.y, pt1.z);
          break;
        case McDb.AttachmentPoint.kMiddleLeft:
          location = new McGePoint3d(pt1.x, pt1.y - height / 2, pt1.z);
          break;
        case McDb.AttachmentPoint.kMiddleCenter:
          location = new McGePoint3d(pt1.x + width / 2, pt1.y - height / 2, pt1.z);
          break;
        case McDb.AttachmentPoint.kMiddleRight:
          location = new McGePoint3d(pt1.x + width, pt1.y - height / 2, pt1.z);
          break;
        case McDb.AttachmentPoint.kBottomLeft:
          location = new McGePoint3d(pt1.x, pt1.y - height, pt1.z);
          break;
        case McDb.AttachmentPoint.kBottomCenter:
          location = new McGePoint3d(pt1.x + width / 2, pt1.y - height, pt1.z);
          break;
        case McDb.AttachmentPoint.kBottomRight:
          location = new McGePoint3d(pt1.x + width, pt1.y - height, pt1.z);
          break;
        default:
          location = pt1.clone();
      }
      mtext.textHeight = customEntity.height;
      mtext.textStyle = customEntity.textStyle;
      mtext.location = location;
      var cadText = slateToCADText(mTextImp.data);
      mtext.attachment = customEntity.textAlignment;
      mtext.contents = cadText;
      if (!customEntity.isWordWrap && mtext.width < width) {
        mtext.width = width * 2;
        mtext.reCompute();
        var _mtext$getBoundingBox = mtext.getBoundingBox(),
          minPt = _mtext$getBoundingBox.minPt,
          maxPt = _mtext$getBoundingBox.maxPt;
        width = minPt.distanceTo(new McGePoint3d(maxPt.x, minPt.y)) * 1.01;
      }
      mtext.width = width;
      mtext.rotation = THREE.MathUtils.degToRad(customEntity.angle);
      return mtext;
    }
  }]);
  return MultilineTextConverter;
}();

var calculateContentWidth = function calculateContentWidth(entity) {
  var ent = entity.getMTextImp();
  var paragraphCount = ent.data.length;
  var maxWidth = 0;
  for (var i = 0; i < paragraphCount; i++) {
    var lines = ent.getParagraphLines(i);
    if (!lines) continue;
    for (var j = 0; j < lines.length; j++) {
      var linePos = ent.getLinePosition(i, j);
      if (linePos) {
        var lineWidth = linePos.maxPt.x - linePos.minPt.x;
        maxWidth = Math.max(maxWidth, lineWidth);
      }
    }
  }
  var alignmentWidth = Math.max(ent.maxWidth, maxWidth);
  return {
    maxWidth: maxWidth,
    alignmentWidth: alignmentWidth
  };
};
var calculateLineStartX = function calculateLineStartX(entity, paragraphPosition, alignmentWidth, lineWidth) {
  var ent = entity.getMTextImp();
  var lineStartX = paragraphPosition.x;
  switch (ent.textAlignment) {
    case McDb.AttachmentPoint.kTopCenter:
    case McDb.AttachmentPoint.kMiddleCenter:
    case McDb.AttachmentPoint.kBottomCenter:
      lineStartX = paragraphPosition.x + (alignmentWidth - lineWidth) / 2;
      break;
    case McDb.AttachmentPoint.kTopRight:
    case McDb.AttachmentPoint.kMiddleRight:
    case McDb.AttachmentPoint.kBottomRight:
      lineStartX = paragraphPosition.x + alignmentWidth - lineWidth;
      break;
  }
  return lineStartX;
};

function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }
function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function convertCadPointToSlatePoint(point) {
  var x = point.x,
    y = point.y;
  var mTextImp = this.getMTextImp();
  var totalHeight = mTextImp.getTotalContentHeight();
  var _calculateContentWidt = calculateContentWidth(this),
    alignmentWidth = _calculateContentWidt.alignmentWidth;
  var startPoint = mTextImp.getActualRenderStartPosition(totalHeight, alignmentWidth);
  for (var pIndex = 0; pIndex < mTextImp.__PARAGRAPH_INFOS__.length; pIndex++) {
    var _paragraphInfo$lines, _paragraphInfo$lines2;
    var paragraphInfo = mTextImp.__PARAGRAPH_INFOS__[pIndex];
    if (!paragraphInfo) continue;
    var paragraphPosition = calculateParagraphPosition(this, startPoint, pIndex);
    var hasValidContent = (_paragraphInfo$lines = paragraphInfo.lines) === null || _paragraphInfo$lines === void 0 ? void 0 : _paragraphInfo$lines.some(function (line) {
      var _line$nodes;
      return (_line$nodes = line.nodes) === null || _line$nodes === void 0 ? void 0 : _line$nodes.some(function (node) {
        return node.endOffset > node.startOffset;
      });
    });
    if (!((_paragraphInfo$lines2 = paragraphInfo.lines) !== null && _paragraphInfo$lines2 !== void 0 && _paragraphInfo$lines2.length) || !hasValidContent) {
      var emptyLineStartX = calculateLineStartX(this, paragraphPosition, alignmentWidth, 0);
      if (y <= paragraphPosition.y && y >= paragraphPosition.y - paragraphInfo.height && x >= emptyLineStartX) {
        return {
          path: [pIndex, 0],
          offset: 0
        };
      }
      continue;
    }
    for (var lineIndex = 0; lineIndex < paragraphInfo.lines.length; lineIndex++) {
      var _line$nodes2;
      var line = paragraphInfo.lines[lineIndex];
      if (!((_line$nodes2 = line.nodes) !== null && _line$nodes2 !== void 0 && _line$nodes2.length)) continue;
      var _calculateLineVertica = calculateLineVerticalPosition(paragraphInfo, lineIndex),
        accumulatedHeight = _calculateLineVertica.accumulatedHeight;
      var lineTopY = paragraphPosition.y - accumulatedHeight;
      var lineBottomY = lineTopY - line.height - (line.bottomSpacing || 0);
      if (y <= lineTopY && y >= lineBottomY) {
        var lineStartX = calculateLineStartX(this, paragraphPosition, alignmentWidth, line.width);
        if (x <= lineStartX && line.nodes.length > 0) {
          return {
            path: line.nodes[0].path,
            offset: line.nodes[0].startOffset
          };
        }
        var currentX = lineStartX;
        var _iterator = _createForOfIteratorHelper$3(line.nodes),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var nodeInfo = _step.value;
            var bestOffset = nodeInfo.startOffset;
            var minDiff = Number.MAX_VALUE;
            var left = nodeInfo.startOffset;
            var right = nodeInfo.endOffset;
            while (left <= right) {
              var mid = Math.floor((left + right) / 2);
              var beforeText = nodeInfo.node.text.substring(nodeInfo.startOffset, mid);
              var measuredX = currentX + getTextWidth(beforeText, nodeInfo.node, mTextImp.height, this.textStyle);
              var diff = Math.abs(measuredX - x);
              if (diff < minDiff) {
                minDiff = diff;
                bestOffset = mid;
              }
              if (measuredX < x) {
                left = mid + 1;
              } else {
                right = mid - 1;
              }
            }
            var nodeEndX = currentX + nodeInfo.width;
            if (x >= currentX && x <= nodeEndX) {
              return {
                path: nodeInfo.path,
                offset: bestOffset
              };
            }
            currentX = nodeEndX;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        if (x > currentX && line.nodes.length > 0) {
          var _line$breakInfo;
          var lastNode = line.nodes[line.nodes.length - 1];
          if ((_line$breakInfo = line.breakInfo) !== null && _line$breakInfo !== void 0 && _line$breakInfo.isWrapped && paragraphInfo.lines[lineIndex + 1]) {
            var nextLine = paragraphInfo.lines[lineIndex + 1];
            var nextFirstNode = nextLine.nodes[0];
            if (nextFirstNode) {
              return {
                path: nextFirstNode.path,
                offset: nextFirstNode.startOffset
              };
            }
          }
          return {
            path: lastNode.path,
            offset: lastNode.endOffset
          };
        }
      }
    }
  }
  return null;
}

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }
function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function convertSlatePointToCadPoint(point) {
  var _paragraphInfo$lines, _paragraphInfo$lines2;
  var mTextImp = this.getMTextImp();
  var path = point.path,
    offset = point.offset;
  var totalHeight = mTextImp.getTotalContentHeight();
  var _calculateContentWidt = calculateContentWidth(this),
    alignmentWidth = _calculateContentWidt.alignmentWidth;
  var startPoint = mTextImp.getActualRenderStartPosition(totalHeight, alignmentWidth);
  var paragraphIndex = path[0];
  var paragraphInfo = mTextImp.__PARAGRAPH_INFOS__[paragraphIndex];
  if (!paragraphInfo) return null;
  var paragraphPosition = calculateParagraphPosition(this, startPoint, paragraphIndex);
  var hasValidContent = (_paragraphInfo$lines = paragraphInfo.lines) === null || _paragraphInfo$lines === void 0 ? void 0 : _paragraphInfo$lines.some(function (line) {
    var _line$nodes;
    return (_line$nodes = line.nodes) === null || _line$nodes === void 0 ? void 0 : _line$nodes.some(function (node) {
      return node.endOffset > node.startOffset;
    });
  });
  if (!((_paragraphInfo$lines2 = paragraphInfo.lines) !== null && _paragraphInfo$lines2 !== void 0 && _paragraphInfo$lines2.length) || !hasValidContent) {
    var emptyLineStartX = calculateLineStartX(this, paragraphPosition, alignmentWidth, 0);
    return {
      point: new McGePoint3d(emptyLineStartX, paragraphPosition.y),
      lineIndex: 0
    };
  }
  for (var lineIndex = 0; lineIndex < paragraphInfo.lines.length; lineIndex++) {
    var _line$nodes2;
    var line = paragraphInfo.lines[lineIndex];
    if (!((_line$nodes2 = line.nodes) !== null && _line$nodes2 !== void 0 && _line$nodes2.length)) continue;
    var lineStartX = calculateLineStartX(this, paragraphPosition, alignmentWidth, line.width);
    var _calculateLineVertica = calculateLineVerticalPosition(paragraphInfo, lineIndex),
      accumulatedHeight = _calculateLineVertica.accumulatedHeight;
    var currentX = lineStartX;
    var foundInLine = false;
    var _iterator = _createForOfIteratorHelper$2(line.nodes),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var nodeInfo = _step.value;
        if (nodeInfo.path[0] === path[0] && nodeInfo.path[1] === path[1]) {
          if (offset >= nodeInfo.startOffset && offset <= nodeInfo.endOffset) {
            var _line$breakInfo;
            foundInLine = true;
            if (offset === nodeInfo.endOffset && nodeInfo === line.nodes[line.nodes.length - 1] && (_line$breakInfo = line.breakInfo) !== null && _line$breakInfo !== void 0 && _line$breakInfo.isWrapped) {
              var nextLine = paragraphInfo.lines[lineIndex + 1];
              if (nextLine) {
                var _calculateLineVertica2 = calculateLineVerticalPosition(paragraphInfo, lineIndex + 1),
                  nextLineAccumulatedHeight = _calculateLineVertica2.accumulatedHeight;
                var lineMinY2 = paragraphPosition.y - nextLineAccumulatedHeight;
                var nextLineStartX = calculateLineStartX(this, paragraphPosition, alignmentWidth, nextLine.width);
                return {
                  point: new McGePoint3d(nextLineStartX, lineMinY2),
                  lineIndex: lineIndex + 1
                };
              }
            }
            var beforeText = nodeInfo.node.text.substring(nodeInfo.startOffset, offset);
            var exactX = currentX + getTextWidth(beforeText, nodeInfo.node, mTextImp.height, this.textStyle);
            var _lineMinY = paragraphPosition.y - accumulatedHeight;
            return {
              point: new McGePoint3d(exactX, _lineMinY),
              lineIndex: lineIndex
            };
          }
        }
        currentX += nodeInfo.width;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (foundInLine) {
      var lineMinY = paragraphPosition.y - accumulatedHeight;
      return {
        point: new McGePoint3d(currentX, lineMinY),
        lineIndex: lineIndex
      };
    }
  }
  return {
    point: new McGePoint3d(paragraphPosition.x, paragraphPosition.y),
    lineIndex: 0
  };
}

function transformBy(met) {
  var mTextImp = this.getMTextImp();
  this.assertWrite();
  mTextImp.met = met;
  var originalPt1 = this.pt1.clone();
  var originalPt2 = this.pt2.clone();
  originalPt1.transformBy(met);
  originalPt2.transformBy(met);
  var originalVector = new McGeVector3d(this.pt2.x - this.pt1.x, this.pt2.y - this.pt1.y, 0).normalize();
  var transformedVector = new McGeVector3d(originalPt2.x - originalPt1.x, originalPt2.y - originalPt1.y, 0).normalize();
  var crossProd = originalVector.crossProduct(transformedVector);
  var dotProd = originalVector.dotProduct(transformedVector);
  var angle = THREE.MathUtils.radToDeg(Math.acos(Math.min(Math.max(dotProd, -1), 1)));
  angle = crossProd.z < 0 ? 360 - angle : angle;
  mTextImp.angle = angle;
  return true;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function worldDraw(draw) {
  var _this = this;
  var imp = this.getMTextImp();
  imp.__PARAGRAPH_INFOS__ = [];
  var totalHeight = 0;
  var maxWidth = 0;
  imp.actualWidth = imp.maxWidth;
  imp.actualHeight = imp.maxHeight;
  var paragraphCalcResults = imp.data.map(function (node, index) {
    if (!isElement(node)) return;
    var element = MxCADMText.elementTextManager.get(node.type);
    if (!element) return;
    var result = element === null || element === void 0 ? void 0 : element.calculate(_this, node, index);
    if (result) {
      totalHeight += result.height;
      maxWidth = Math.max(maxWidth, result.width);
    }
    return result;
  });
  var alignmentWidth = Math.max(imp.maxWidth, maxWidth);
  var startPoint = imp.getActualRenderStartPosition(totalHeight, alignmentWidth);
  var offsetHeight = 0;
  imp.data.forEach(function (node, index) {
    if (!isElement(node)) return;
    var element = MxCADMText.elementTextManager.get(node.type);
    if (!element) return;
    var calcResult = paragraphCalcResults[index];
    if (!calcResult) return;
    var position = startPoint.clone().subvec(McGeVector3d.kYAxis.clone().mult(offsetHeight));
    var info = element.render(_this, draw, calcResult, {
      position: position,
      index: index,
      alignmentWidth: alignmentWidth
    });
    if (info) {
      offsetHeight += calcResult.height;
      imp.__PARAGRAPH_INFOS__[index] = _objectSpread(_objectSpread({}, calcResult), info);
    }
  });
  imp.actualWidth = Math.max(imp.maxWidth, maxWidth);
  imp.actualHeight = Math.max(imp.maxHeight, totalHeight);
  imp.emit("changed");
}

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var MxCADMText = /*#__PURE__*/function (_McDbCustomEntity) {
  _inherits$1(MxCADMText, _McDbCustomEntity);
  var _super = _createSuper$3(MxCADMText);
  function MxCADMText(imp) {
    var _this;
    _classCallCheck$1(this, MxCADMText);
    _this = _super.call(this, imp);
    _defineProperty(_assertThisInitialized$1(_this), "impMText", void 0);
    _defineProperty(_assertThisInitialized$1(_this), "worldDraw", worldDraw);
    _defineProperty(_assertThisInitialized$1(_this), "convertCadPointToSlatePoint", convertCadPointToSlatePoint);
    _defineProperty(_assertThisInitialized$1(_this), "convertSlatePointToCadPoint", convertSlatePointToCadPoint);
    _defineProperty(_assertThisInitialized$1(_this), "transformBy", transformBy);
    if (!_this.impMText) _this.impMText = new MxCADMTextImp();
    return _this;
  }
  _createClass$1(MxCADMText, [{
    key: "getMTextImp",
    value: function getMTextImp() {
      return this.impMText;
    }
  }, {
    key: "data",
    get: function get() {
      return this.impMText.data;
    },
    set: function set(val) {
      this.assertWrite();
      this.impMText.data = val;
    }
  }, {
    key: "height",
    get: function get() {
      return this.impMText.height;
    },
    set: function set(val) {
      this.assertWrite();
      this.impMText.height = val;
    }
  }, {
    key: "angle",
    get: function get() {
      return this.impMText.angle;
    },
    set: function set(angle) {
      this.assertWrite();
      this.impMText.angle = angle;
      var met = new McGeMatrix3d();
      met.setToRotation(THREE.MathUtils.degToRad(angle), McGeVector3d.kZAxis, this.pt1);
      this.impMText.met = met;
    }
  }, {
    key: "pt1",
    get: function get() {
      return this.impMText.pt1;
    },
    set: function set(val) {
      this.assertWrite();
      this.impMText.pt1 = val;
    }
  }, {
    key: "pt2",
    get: function get() {
      return this.impMText.pt2;
    },
    set: function set(val) {
      this.assertWrite();
      this.impMText.pt2 = val;
    }
  }, {
    key: "isWordWrap",
    get: function get() {
      return this.impMText.isWordWrap;
    },
    set: function set(value) {
      if (this.impMText.isWordWrap !== value) {
        this.impMText.isWordWrap = value;
        this.updateDisplay();
      }
    }
  }, {
    key: "lineHeightRatio",
    get: function get() {
      return this.impMText.lineHeightRatio;
    },
    set: function set(ratio) {
      this.assertWrite();
      var clampedRatio = Math.max(0.5, Math.min(3, ratio));
      if (this.impMText.lineHeightRatio !== clampedRatio) {
        this.impMText.lineHeightRatio = clampedRatio;
        this.updateDisplay();
      }
    }
  }, {
    key: "textAlignment",
    get: function get() {
      return this.impMText.textAlignment;
    },
    set: function set(alignment) {
      this.assertWrite();
      this.impMText.textAlignment = alignment;
      this.updateDisplay();
    }
  }, {
    key: "create",
    value: function create(imp) {
      return new MxCADMText(imp);
    }
  }, {
    key: "getTypeName",
    value: function getTypeName() {
      return "MxCADMText";
    }
  }, {
    key: "getName",
    value: function getName() {
      return "MxCAD\\u591A\\u884C\\u6587\\u672C";
    }
  }, {
    key: "dwgInFields",
    value: function dwgInFields(filter) {
      this.impMText.dwgInFields(filter);
      return true;
    }
  }, {
    key: "dwgOutFields",
    value: function dwgOutFields(filter) {
      this.impMText.dwgOutFields(filter);
      return true;
    }
  }, {
    key: "moveGripPointsAt",
    value: function moveGripPointsAt(iIndex, dXOffset, dYOffset, dZOffset) {
      this.assertWrite();
      return this.impMText.moveGripPointsAt(iIndex, dXOffset, dYOffset, dZOffset);
    }
  }, {
    key: "getGripPoints",
    value: function getGripPoints() {
      return this.impMText.getGripPoints();
    }
  }]);
  return MxCADMText;
}(McDbCustomEntity);
_defineProperty(MxCADMText, "fromMText", MultilineTextConverter.fromMText);
_defineProperty(MxCADMText, "toMText", MultilineTextConverter.toMText);
_defineProperty(MxCADMText, "elementTextManager", new ElementTextManager());

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return _assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var version = "4.5.0";
function wait(durationMs, resolveWith) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, durationMs, resolveWith);
  });
}
/**
 * Allows asynchronous actions and microtasks to happen.
 */
function releaseEventLoop() {
  // Don't use setTimeout because Chrome throttles it in some cases causing very long agent execution:
  // https://stackoverflow.com/a/6032591/1118709
  // https://github.com/chromium/chromium/commit/0295dd09496330f3a9103ef7e543fa9b6050409b
  // Reusing a MessageChannel object gives no noticeable benefits
  return new Promise(function (resolve) {
    var channel = new MessageChannel();
    channel.port1.onmessage = function () {
      return resolve();
    };
    channel.port2.postMessage(null);
  });
}
function requestIdleCallbackIfAvailable(fallbackTimeout, deadlineTimeout) {
  if (deadlineTimeout === void 0) {
    deadlineTimeout = Infinity;
  }
  var requestIdleCallback = window.requestIdleCallback;
  if (requestIdleCallback) {
    // The function \`requestIdleCallback\` loses the binding to \`window\` here.
    // \`globalThis\` isn't always equal \`window\` (see https://github.com/fingerprintjs/fingerprintjs/issues/683).
    // Therefore, an error can occur. \`call(window,\` prevents the error.
    return new Promise(function (resolve) {
      return requestIdleCallback.call(window, function () {
        return resolve();
      }, {
        timeout: deadlineTimeout
      });
    });
  } else {
    return wait(Math.min(fallbackTimeout, deadlineTimeout));
  }
}
function isPromise(value) {
  return !!value && typeof value.then === 'function';
}
/**
 * Calls a maybe asynchronous function without creating microtasks when the function is synchronous.
 * Catches errors in both cases.
 *
 * If just you run a code like this:
 * \`\`\`
 * console.time('Action duration')
 * await action()
 * console.timeEnd('Action duration')
 * \`\`\`
 * The synchronous function time can be measured incorrectly because another microtask may run before the \`await\`
 * returns the control back to the code.
 */
function awaitIfAsync(action, callback) {
  try {
    var returnedValue = action();
    if (isPromise(returnedValue)) {
      returnedValue.then(function (result) {
        return callback(true, result);
      }, function (error) {
        return callback(false, error);
      });
    } else {
      callback(true, returnedValue);
    }
  } catch (error) {
    callback(false, error);
  }
}
/**
 * If you run many synchronous tasks without using this function, the JS main loop will be busy and asynchronous tasks
 * (e.g. completing a network request, rendering the page) won't be able to happen.
 * This function allows running many synchronous tasks such way that asynchronous tasks can run too in background.
 */
function mapWithBreaks(items, callback, loopReleaseInterval) {
  if (loopReleaseInterval === void 0) {
    loopReleaseInterval = 16;
  }
  return __awaiter(this, void 0, void 0, function () {
    var results, lastLoopReleaseTime, i, now;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          results = Array(items.length);
          lastLoopReleaseTime = Date.now();
          i = 0;
          _a.label = 1;
        case 1:
          if (!(i < items.length)) return [3 /*break*/, 4];
          results[i] = callback(items[i], i);
          now = Date.now();
          if (!(now >= lastLoopReleaseTime + loopReleaseInterval)) return [3 /*break*/, 3];
          lastLoopReleaseTime = now;
          return [4 /*yield*/, releaseEventLoop()];
        case 2:
          _a.sent();
          _a.label = 3;
        case 3:
          ++i;
          return [3 /*break*/, 1];
        case 4:
          return [2 /*return*/, results];
      }
    });
  });
}
/**
 * Makes the given promise never emit an unhandled promise rejection console warning.
 * The promise will still pass errors to the next promises.
 * Returns the input promise for convenience.
 *
 * Otherwise, promise emits a console warning unless it has a \`catch\` listener.
 */
function suppressUnhandledRejectionWarning(promise) {
  promise.then(undefined, function () {
    return undefined;
  });
  return promise;
}

/*
 * This file contains functions to work with pure data only (no browser features, DOM, side effects, etc).
 */
/**
 * Does the same as Array.prototype.includes but has better typing
 */
function includes(haystack, needle) {
  for (var i = 0, l = haystack.length; i < l; ++i) {
    if (haystack[i] === needle) {
      return true;
    }
  }
  return false;
}
/**
 * Like \`!includes()\` but with proper typing
 */
function excludes(haystack, needle) {
  return !includes(haystack, needle);
}
/**
 * Be careful, NaN can return
 */
function toInt(value) {
  return parseInt(value);
}
/**
 * Be careful, NaN can return
 */
function toFloat(value) {
  return parseFloat(value);
}
function replaceNaN(value, replacement) {
  return typeof value === 'number' && isNaN(value) ? replacement : value;
}
function countTruthy(values) {
  return values.reduce(function (sum, value) {
    return sum + (value ? 1 : 0);
  }, 0);
}
function round(value, base) {
  if (base === void 0) {
    base = 1;
  }
  if (Math.abs(base) >= 1) {
    return Math.round(value / base) * base;
  } else {
    // Sometimes when a number is multiplied by a small number, precision is lost,
    // for example 1234 * 0.0001 === 0.12340000000000001, and it's more precise divide: 1234 / (1 / 0.0001) === 0.1234.
    var counterBase = 1 / base;
    return Math.round(value * counterBase) / counterBase;
  }
}
/**
 * Parses a CSS selector into tag name with HTML attributes.
 * Only single element selector are supported (without operators like space, +, >, etc).
 *
 * Multiple values can be returned for each attribute. You decide how to handle them.
 */
function parseSimpleCssSelector(selector) {
  var _a, _b;
  var errorMessage = "Unexpected syntax '".concat(selector, "'");
  var tagMatch = /^\\s*([a-z-]*)(.*)$/i.exec(selector);
  var tag = tagMatch[1] || undefined;
  var attributes = {};
  var partsRegex = /([.:#][\\w-]+|\\[.+?\\])/gi;
  var addAttribute = function addAttribute(name, value) {
    attributes[name] = attributes[name] || [];
    attributes[name].push(value);
  };
  for (;;) {
    var match = partsRegex.exec(tagMatch[2]);
    if (!match) {
      break;
    }
    var part = match[0];
    switch (part[0]) {
      case '.':
        addAttribute('class', part.slice(1));
        break;
      case '#':
        addAttribute('id', part.slice(1));
        break;
      case '[':
        {
          var attributeMatch = /^\\[([\\w-]+)([~|^$*]?=("(.*?)"|([\\w-]+)))?(\\s+[is])?\\]$/.exec(part);
          if (attributeMatch) {
            addAttribute(attributeMatch[1], (_b = (_a = attributeMatch[4]) !== null && _a !== void 0 ? _a : attributeMatch[5]) !== null && _b !== void 0 ? _b : '');
          } else {
            throw new Error(errorMessage);
          }
          break;
        }
      default:
        throw new Error(errorMessage);
    }
  }
  return [tag, attributes];
}
/**
 * Converts a string to UTF8 bytes
 */
function getUTF8Bytes(input) {
  // Benchmark: https://jsbench.me/b6klaaxgwq/1
  // If you want to just count bytes, see solutions at https://jsbench.me/ehklab415e/1
  var result = new Uint8Array(input.length);
  for (var i = 0; i < input.length; i++) {
    // \`charCode\` is faster than encoding, so we prefer that when it's possible
    var charCode = input.charCodeAt(i);
    // In case of non-ASCII symbols we use proper encoding
    if (charCode > 127) {
      return new TextEncoder().encode(input);
    }
    result[i] = charCode;
  }
  return result;
}

/*
 * Based on https://github.com/karanlyons/murmurHash3.js/blob/a33d0723127e2e5415056c455f8aed2451ace208/murmurHash3.js
 */
/**
 * Adds two 64-bit values (provided as tuples of 32-bit values)
 * and updates (mutates) first value to write the result
 */
function x64Add(m, n) {
  var m0 = m[0] >>> 16,
    m1 = m[0] & 0xffff,
    m2 = m[1] >>> 16,
    m3 = m[1] & 0xffff;
  var n0 = n[0] >>> 16,
    n1 = n[0] & 0xffff,
    n2 = n[1] >>> 16,
    n3 = n[1] & 0xffff;
  var o0 = 0,
    o1 = 0,
    o2 = 0,
    o3 = 0;
  o3 += m3 + n3;
  o2 += o3 >>> 16;
  o3 &= 0xffff;
  o2 += m2 + n2;
  o1 += o2 >>> 16;
  o2 &= 0xffff;
  o1 += m1 + n1;
  o0 += o1 >>> 16;
  o1 &= 0xffff;
  o0 += m0 + n0;
  o0 &= 0xffff;
  m[0] = o0 << 16 | o1;
  m[1] = o2 << 16 | o3;
}
/**
 * Multiplies two 64-bit values (provided as tuples of 32-bit values)
 * and updates (mutates) first value to write the result
 */
function x64Multiply(m, n) {
  var m0 = m[0] >>> 16,
    m1 = m[0] & 0xffff,
    m2 = m[1] >>> 16,
    m3 = m[1] & 0xffff;
  var n0 = n[0] >>> 16,
    n1 = n[0] & 0xffff,
    n2 = n[1] >>> 16,
    n3 = n[1] & 0xffff;
  var o0 = 0,
    o1 = 0,
    o2 = 0,
    o3 = 0;
  o3 += m3 * n3;
  o2 += o3 >>> 16;
  o3 &= 0xffff;
  o2 += m2 * n3;
  o1 += o2 >>> 16;
  o2 &= 0xffff;
  o2 += m3 * n2;
  o1 += o2 >>> 16;
  o2 &= 0xffff;
  o1 += m1 * n3;
  o0 += o1 >>> 16;
  o1 &= 0xffff;
  o1 += m2 * n2;
  o0 += o1 >>> 16;
  o1 &= 0xffff;
  o1 += m3 * n1;
  o0 += o1 >>> 16;
  o1 &= 0xffff;
  o0 += m0 * n3 + m1 * n2 + m2 * n1 + m3 * n0;
  o0 &= 0xffff;
  m[0] = o0 << 16 | o1;
  m[1] = o2 << 16 | o3;
}
/**
 * Provides left rotation of the given int64 value (provided as tuple of two int32)
 * by given number of bits. Result is written back to the value
 */
function x64Rotl(m, bits) {
  var m0 = m[0];
  bits %= 64;
  if (bits === 32) {
    m[0] = m[1];
    m[1] = m0;
  } else if (bits < 32) {
    m[0] = m0 << bits | m[1] >>> 32 - bits;
    m[1] = m[1] << bits | m0 >>> 32 - bits;
  } else {
    bits -= 32;
    m[0] = m[1] << bits | m0 >>> 32 - bits;
    m[1] = m0 << bits | m[1] >>> 32 - bits;
  }
}
/**
 * Provides a left shift of the given int32 value (provided as tuple of [0, int32])
 * by given number of bits. Result is written back to the value
 */
function x64LeftShift(m, bits) {
  bits %= 64;
  if (bits === 0) {
    return;
  } else if (bits < 32) {
    m[0] = m[1] >>> 32 - bits;
    m[1] = m[1] << bits;
  } else {
    m[0] = m[1] << bits - 32;
    m[1] = 0;
  }
}
/**
 * Provides a XOR of the given int64 values(provided as tuple of two int32).
 * Result is written back to the first value
 */
function x64Xor(m, n) {
  m[0] ^= n[0];
  m[1] ^= n[1];
}
var F1 = [0xff51afd7, 0xed558ccd];
var F2 = [0xc4ceb9fe, 0x1a85ec53];
/**
 * Calculates murmurHash3's final x64 mix of that block and writes result back to the input value.
 * (\`[0, h[0] >>> 1]\` is a 33 bit unsigned right shift. This is the
 * only place where we need to right shift 64bit ints.)
 */
function x64Fmix(h) {
  var shifted = [0, h[0] >>> 1];
  x64Xor(h, shifted);
  x64Multiply(h, F1);
  shifted[1] = h[0] >>> 1;
  x64Xor(h, shifted);
  x64Multiply(h, F2);
  shifted[1] = h[0] >>> 1;
  x64Xor(h, shifted);
}
var C1 = [0x87c37b91, 0x114253d5];
var C2 = [0x4cf5ad43, 0x2745937f];
var M$1 = [0, 5];
var N1 = [0, 0x52dce729];
var N2 = [0, 0x38495ab5];
/**
 * Given a string and an optional seed as an int, returns a 128 bit
 * hash using the x64 flavor of MurmurHash3, as an unsigned hex.
 * All internal functions mutates passed value to achieve minimal memory allocations and GC load
 *
 * Benchmark https://jsbench.me/p4lkpaoabi/1
 */
function x64hash128(input, seed) {
  var key = getUTF8Bytes(input);
  seed = seed || 0;
  var length = [0, key.length];
  var remainder = length[1] % 16;
  var bytes = length[1] - remainder;
  var h1 = [0, seed];
  var h2 = [0, seed];
  var k1 = [0, 0];
  var k2 = [0, 0];
  var i;
  for (i = 0; i < bytes; i = i + 16) {
    k1[0] = key[i + 4] | key[i + 5] << 8 | key[i + 6] << 16 | key[i + 7] << 24;
    k1[1] = key[i] | key[i + 1] << 8 | key[i + 2] << 16 | key[i + 3] << 24;
    k2[0] = key[i + 12] | key[i + 13] << 8 | key[i + 14] << 16 | key[i + 15] << 24;
    k2[1] = key[i + 8] | key[i + 9] << 8 | key[i + 10] << 16 | key[i + 11] << 24;
    x64Multiply(k1, C1);
    x64Rotl(k1, 31);
    x64Multiply(k1, C2);
    x64Xor(h1, k1);
    x64Rotl(h1, 27);
    x64Add(h1, h2);
    x64Multiply(h1, M$1);
    x64Add(h1, N1);
    x64Multiply(k2, C2);
    x64Rotl(k2, 33);
    x64Multiply(k2, C1);
    x64Xor(h2, k2);
    x64Rotl(h2, 31);
    x64Add(h2, h1);
    x64Multiply(h2, M$1);
    x64Add(h2, N2);
  }
  k1[0] = 0;
  k1[1] = 0;
  k2[0] = 0;
  k2[1] = 0;
  var val = [0, 0];
  switch (remainder) {
    case 15:
      val[1] = key[i + 14];
      x64LeftShift(val, 48);
      x64Xor(k2, val);
    // fallthrough
    case 14:
      val[1] = key[i + 13];
      x64LeftShift(val, 40);
      x64Xor(k2, val);
    // fallthrough
    case 13:
      val[1] = key[i + 12];
      x64LeftShift(val, 32);
      x64Xor(k2, val);
    // fallthrough
    case 12:
      val[1] = key[i + 11];
      x64LeftShift(val, 24);
      x64Xor(k2, val);
    // fallthrough
    case 11:
      val[1] = key[i + 10];
      x64LeftShift(val, 16);
      x64Xor(k2, val);
    // fallthrough
    case 10:
      val[1] = key[i + 9];
      x64LeftShift(val, 8);
      x64Xor(k2, val);
    // fallthrough
    case 9:
      val[1] = key[i + 8];
      x64Xor(k2, val);
      x64Multiply(k2, C2);
      x64Rotl(k2, 33);
      x64Multiply(k2, C1);
      x64Xor(h2, k2);
    // fallthrough
    case 8:
      val[1] = key[i + 7];
      x64LeftShift(val, 56);
      x64Xor(k1, val);
    // fallthrough
    case 7:
      val[1] = key[i + 6];
      x64LeftShift(val, 48);
      x64Xor(k1, val);
    // fallthrough
    case 6:
      val[1] = key[i + 5];
      x64LeftShift(val, 40);
      x64Xor(k1, val);
    // fallthrough
    case 5:
      val[1] = key[i + 4];
      x64LeftShift(val, 32);
      x64Xor(k1, val);
    // fallthrough
    case 4:
      val[1] = key[i + 3];
      x64LeftShift(val, 24);
      x64Xor(k1, val);
    // fallthrough
    case 3:
      val[1] = key[i + 2];
      x64LeftShift(val, 16);
      x64Xor(k1, val);
    // fallthrough
    case 2:
      val[1] = key[i + 1];
      x64LeftShift(val, 8);
      x64Xor(k1, val);
    // fallthrough
    case 1:
      val[1] = key[i];
      x64Xor(k1, val);
      x64Multiply(k1, C1);
      x64Rotl(k1, 31);
      x64Multiply(k1, C2);
      x64Xor(h1, k1);
    // fallthrough
  }

  x64Xor(h1, length);
  x64Xor(h2, length);
  x64Add(h1, h2);
  x64Add(h2, h1);
  x64Fmix(h1);
  x64Fmix(h2);
  x64Add(h1, h2);
  x64Add(h2, h1);
  return ('00000000' + (h1[0] >>> 0).toString(16)).slice(-8) + ('00000000' + (h1[1] >>> 0).toString(16)).slice(-8) + ('00000000' + (h2[0] >>> 0).toString(16)).slice(-8) + ('00000000' + (h2[1] >>> 0).toString(16)).slice(-8);
}

/**
 * Converts an error object to a plain object that can be used with \`JSON.stringify\`.
 * If you just run \`JSON.stringify(error)\`, you'll get \`'{}'\`.
 */
function errorToObject(error) {
  var _a;
  return _assign({
    name: error.name,
    message: error.message,
    stack: (_a = error.stack) === null || _a === void 0 ? void 0 : _a.split('\\n')
  }, error);
}
function isFunctionNative(func) {
  return /^function\\s.*?\\{\\s*\\[native code]\\s*}$/.test(String(func));
}
function isFinalResultLoaded(loadResult) {
  return typeof loadResult !== 'function';
}
/**
 * Loads the given entropy source. Returns a function that gets an entropy component from the source.
 *
 * The result is returned synchronously to prevent \`loadSources\` from
 * waiting for one source to load before getting the components from the other sources.
 */
function loadSource(source, sourceOptions) {
  var sourceLoadPromise = suppressUnhandledRejectionWarning(new Promise(function (resolveLoad) {
    var loadStartTime = Date.now();
    // \`awaitIfAsync\` is used instead of just \`await\` in order to measure the duration of synchronous sources
    // correctly (other microtasks won't affect the duration).
    awaitIfAsync(source.bind(null, sourceOptions), function () {
      var loadArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        loadArgs[_i] = arguments[_i];
      }
      var loadDuration = Date.now() - loadStartTime;
      // Source loading failed
      if (!loadArgs[0]) {
        return resolveLoad(function () {
          return {
            error: loadArgs[1],
            duration: loadDuration
          };
        });
      }
      var loadResult = loadArgs[1];
      // Source loaded with the final result
      if (isFinalResultLoaded(loadResult)) {
        return resolveLoad(function () {
          return {
            value: loadResult,
            duration: loadDuration
          };
        });
      }
      // Source loaded with "get" stage
      resolveLoad(function () {
        return new Promise(function (resolveGet) {
          var getStartTime = Date.now();
          awaitIfAsync(loadResult, function () {
            var getArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              getArgs[_i] = arguments[_i];
            }
            var duration = loadDuration + Date.now() - getStartTime;
            // Source getting failed
            if (!getArgs[0]) {
              return resolveGet({
                error: getArgs[1],
                duration: duration
              });
            }
            // Source getting succeeded
            resolveGet({
              value: getArgs[1],
              duration: duration
            });
          });
        });
      });
    });
  }));
  return function getComponent() {
    return sourceLoadPromise.then(function (finalizeSource) {
      return finalizeSource();
    });
  };
}
/**
 * Loads the given entropy sources. Returns a function that collects the entropy components.
 *
 * The result is returned synchronously in order to allow start getting the components
 * before the sources are loaded completely.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function loadSources(sources, sourceOptions, excludeSources, loopReleaseInterval) {
  var includedSources = Object.keys(sources).filter(function (sourceKey) {
    return excludes(excludeSources, sourceKey);
  });
  // Using \`mapWithBreaks\` allows asynchronous sources to complete between synchronous sources
  // and measure the duration correctly
  var sourceGettersPromise = suppressUnhandledRejectionWarning(mapWithBreaks(includedSources, function (sourceKey) {
    return loadSource(sources[sourceKey], sourceOptions);
  }, loopReleaseInterval));
  return function getComponents() {
    return __awaiter(this, void 0, void 0, function () {
      var sourceGetters, componentPromises, componentArray, components, index;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4 /*yield*/, sourceGettersPromise];
          case 1:
            sourceGetters = _a.sent();
            return [4 /*yield*/, mapWithBreaks(sourceGetters, function (sourceGetter) {
              return suppressUnhandledRejectionWarning(sourceGetter());
            }, loopReleaseInterval)];
          case 2:
            componentPromises = _a.sent();
            return [4 /*yield*/, Promise.all(componentPromises)
            // Keeping the component keys order the same as the source keys order
            ];

          case 3:
            componentArray = _a.sent();
            components = {};
            for (index = 0; index < includedSources.length; ++index) {
              components[includedSources[index]] = componentArray[index];
            }
            return [2 /*return*/, components];
        }
      });
    });
  };
}

/*
 * Functions to help with features that vary through browsers
 */
/**
 * Checks whether the browser is based on Trident (the Internet Explorer engine) without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isTrident() {
  var w = window;
  var n = navigator;
  // The properties are checked to be in IE 10, IE 11 and not to be in other browsers in October 2020
  return countTruthy(['MSCSSMatrix' in w, 'msSetImmediate' in w, 'msIndexedDB' in w, 'msMaxTouchPoints' in n, 'msPointerEnabled' in n]) >= 4;
}
/**
 * Checks whether the browser is based on EdgeHTML (the pre-Chromium Edge engine) without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isEdgeHTML() {
  // Based on research in October 2020
  var w = window;
  var n = navigator;
  return countTruthy(['msWriteProfilerMark' in w, 'MSStream' in w, 'msLaunchUri' in n, 'msSaveBlob' in n]) >= 3 && !isTrident();
}
/**
 * Checks whether the browser is based on Chromium without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isChromium() {
  // Based on research in October 2020. Tested to detect Chromium 42-86.
  var w = window;
  var n = navigator;
  return countTruthy(['webkitPersistentStorage' in n, 'webkitTemporaryStorage' in n, n.vendor.indexOf('Google') === 0, 'webkitResolveLocalFileSystemURL' in w, 'BatteryManager' in w, 'webkitMediaStream' in w, 'webkitSpeechGrammar' in w]) >= 5;
}
/**
 * Checks whether the browser is based on mobile or desktop Safari without using user-agent.
 * All iOS browsers use WebKit (the Safari engine).
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isWebKit() {
  // Based on research in August 2024
  var w = window;
  var n = navigator;
  return countTruthy(['ApplePayError' in w, 'CSSPrimitiveValue' in w, 'Counter' in w, n.vendor.indexOf('Apple') === 0, 'RGBColor' in w, 'WebKitMediaKeys' in w]) >= 4;
}
/**
 * Checks whether this WebKit browser is a desktop browser.
 * It doesn't check that the browser is based on WebKit, there is a separate function for this.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isDesktopWebKit() {
  // Checked in Safari and DuckDuckGo
  var w = window;
  var HTMLElement = w.HTMLElement,
    Document = w.Document;
  return countTruthy(['safari' in w, !('ongestureend' in w), !('TouchEvent' in w), !('orientation' in w), HTMLElement && !('autocapitalize' in HTMLElement.prototype), Document && 'pointerLockElement' in Document.prototype]) >= 4;
}
/**
 * Checks whether this WebKit browser is Safari.
 * It doesn't check that the browser is based on WebKit, there is a separate function for this.
 *
 * Warning! The function works properly only for Safari version 15.4 and newer.
 */
function isSafariWebKit() {
  // Checked in Safari, Chrome, Firefox, Yandex, UC Browser, Opera, Edge and DuckDuckGo.
  // iOS Safari and Chrome were checked on iOS 11-18. DuckDuckGo was checked on iOS 17 and macOS 14.
  // Desktop Safari versions 12-18 were checked.
  // The other browsers were checked on iOS 17 and 18; there was no chance to check them on the other OS versions.
  var w = window;
  return (
    // Filters-out Chrome, Yandex, DuckDuckGo (macOS and iOS), Edge
    isFunctionNative(w.print) &&
    // Doesn't work in Safari < 15.4
    String(w.browser) === '[object WebPageNamespace]'
  );
}
/**
 * Checks whether the browser is based on Gecko (Firefox engine) without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isGecko() {
  var _a, _b;
  var w = window;
  // Based on research in September 2020
  return countTruthy(['buildID' in navigator, 'MozAppearance' in ((_b = (_a = document.documentElement) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : {}), 'onmozfullscreenchange' in w, 'mozInnerScreenX' in w, 'CSSMozDocumentRule' in w, 'CanvasCaptureMediaStream' in w]) >= 4;
}
/**
 * Checks whether the browser is based on Chromium version ≥86 without using user-agent.
 * It doesn't check that the browser is based on Chromium, there is a separate function for this.
 */
function isChromium86OrNewer() {
  // Checked in Chrome 85 vs Chrome 86 both on desktop and Android
  var w = window;
  return countTruthy([!('MediaSettingsRange' in w), 'RTCEncodedAudioFrame' in w, '' + w.Intl === '[object Intl]', '' + w.Reflect === '[object Reflect]']) >= 3;
}
/**
 * Checks whether the browser is based on WebKit version ≥606 (Safari ≥12) without using user-agent.
 * It doesn't check that the browser is based on WebKit, there is a separate function for this.
 *
 * @see https://en.wikipedia.org/wiki/Safari_version_history#Release_history Safari-WebKit versions map
 */
function isWebKit606OrNewer() {
  // Checked in Safari 9–17
  var w = window;
  return countTruthy(['DOMRectList' in w, 'RTCPeerConnectionIceEvent' in w, 'SVGGeometryElement' in w, 'ontransitioncancel' in w]) >= 3;
}
/**
 * Checks whether the browser is based on WebKit version ≥616 (Safari ≥17) without using user-agent.
 * It doesn't check that the browser is based on WebKit, there is a separate function for this.
 *
 * @see https://developer.apple.com/documentation/safari-release-notes/safari-17-release-notes Safari 17 release notes
 * @see https://tauri.app/v1/references/webview-versions/#webkit-versions-in-safari Safari-WebKit versions map
 */
function isWebKit616OrNewer() {
  var w = window;
  var n = navigator;
  var CSS = w.CSS,
    HTMLButtonElement = w.HTMLButtonElement;
  return countTruthy([!('getStorageUpdates' in n), HTMLButtonElement && 'popover' in HTMLButtonElement.prototype, 'CSSCounterStyleRule' in w, CSS.supports('font-size-adjust: ex-height 0.5'), CSS.supports('text-transform: full-width')]) >= 4;
}
/**
 * Checks whether the device is an iPad.
 * It doesn't check that the engine is WebKit and that the WebKit isn't desktop.
 */
function isIPad() {
  // Checked on:
  // Safari on iPadOS (both mobile and desktop modes): 8, 11-17
  // Chrome on iPadOS (both mobile and desktop modes): 11-17
  // Safari on iOS (both mobile and desktop modes): 9-17
  // Chrome on iOS (both mobile and desktop modes): 9-17
  // Before iOS 13. Safari tampers the value in "request desktop site" mode since iOS 13.
  if (navigator.platform === 'iPad') {
    return true;
  }
  var s = screen;
  var screenRatio = s.width / s.height;
  return countTruthy(['MediaSource' in window, !!Element.prototype.webkitRequestFullscreen,
  // iPhone 4S that runs iOS 9 matches this, but it is not supported
  screenRatio > 0.65 && screenRatio < 1.53]) >= 2;
}
/**
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function getFullscreenElement() {
  var d = document;
  return d.fullscreenElement || d.msFullscreenElement || d.mozFullScreenElement || d.webkitFullscreenElement || null;
}
function exitFullscreen() {
  var d = document;
  // \`call\` is required because the function throws an error without a proper "this" context
  return (d.exitFullscreen || d.msExitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen).call(d);
}
/**
 * Checks whether the device runs on Android without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isAndroid() {
  var isItChromium = isChromium();
  var isItGecko = isGecko();
  var w = window;
  var n = navigator;
  var c = 'connection';
  // Chrome removes all words "Android" from \`navigator\` when desktop version is requested
  // Firefox keeps "Android" in \`navigator.appVersion\` when desktop version is requested
  if (isItChromium) {
    return countTruthy([!('SharedWorker' in w),
    // \`typechange\` is deprecated, but it's still present on Android (tested on Chrome Mobile 117)
    // Removal proposal https://bugs.chromium.org/p/chromium/issues/detail?id=699892
    // Note: this expression returns true on ChromeOS, so additional detectors are required to avoid false-positives
    n[c] && 'ontypechange' in n[c], !('sinkId' in new window.Audio())]) >= 2;
  } else if (isItGecko) {
    return countTruthy(['onorientationchange' in w, 'orientation' in w, /android/i.test(navigator.appVersion)]) >= 2;
  } else {
    // Only 2 browser engines are presented on Android.
    // Actually, there is also Android 4.1 browser, but it's not worth detecting it at the moment.
    return false;
  }
}

/**
 * A deep description: https://fingerprint.com/blog/audio-fingerprinting/
 * Inspired by and based on https://github.com/cozylife/audio-fingerprint
 *
 * A version of the entropy source with stabilization to make it suitable for static fingerprinting.
 * Audio signal is noised in private mode of Safari 17, so audio fingerprinting is skipped in Safari 17.
 */
function getAudioFingerprint() {
  if (doesBrowserPerformAntifingerprinting$1()) {
    return -4 /* SpecialFingerprint.KnownForAntifingerprinting */;
  }

  return getUnstableAudioFingerprint();
}
/**
 * A version of the entropy source without stabilization.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function getUnstableAudioFingerprint() {
  var w = window;
  var AudioContext = w.OfflineAudioContext || w.webkitOfflineAudioContext;
  if (!AudioContext) {
    return -2 /* SpecialFingerprint.NotSupported */;
  }
  // In some browsers, audio context always stays suspended unless the context is started in response to a user action
  // (e.g. a click or a tap). It prevents audio fingerprint from being taken at an arbitrary moment of time.
  // Such browsers are old and unpopular, so the audio fingerprinting is just skipped in them.
  // See a similar case explanation at https://stackoverflow.com/questions/46363048/onaudioprocess-not-called-on-ios11#46534088
  if (doesBrowserSuspendAudioContext()) {
    return -1 /* SpecialFingerprint.KnownForSuspending */;
  }

  var hashFromIndex = 4500;
  var hashToIndex = 5000;
  var context = new AudioContext(1, hashToIndex, 44100);
  var oscillator = context.createOscillator();
  oscillator.type = 'triangle';
  oscillator.frequency.value = 10000;
  var compressor = context.createDynamicsCompressor();
  compressor.threshold.value = -50;
  compressor.knee.value = 40;
  compressor.ratio.value = 12;
  compressor.attack.value = 0;
  compressor.release.value = 0.25;
  oscillator.connect(compressor);
  compressor.connect(context.destination);
  oscillator.start(0);
  var _a = startRenderingAudio(context),
    renderPromise = _a[0],
    finishRendering = _a[1];
  // Suppresses the console error message in case when the fingerprint fails before requested
  var fingerprintPromise = suppressUnhandledRejectionWarning(renderPromise.then(function (buffer) {
    return getHash(buffer.getChannelData(0).subarray(hashFromIndex));
  }, function (error) {
    if (error.name === "timeout" /* InnerErrorName.Timeout */ || error.name === "suspended" /* InnerErrorName.Suspended */) {
      return -3 /* SpecialFingerprint.Timeout */;
    }

    throw error;
  }));
  return function () {
    finishRendering();
    return fingerprintPromise;
  };
}
/**
 * Checks if the current browser is known for always suspending audio context
 */
function doesBrowserSuspendAudioContext() {
  // Mobile Safari 11 and older
  return isWebKit() && !isDesktopWebKit() && !isWebKit606OrNewer();
}
/**
 * Checks if the current browser is known for applying anti-fingerprinting measures in all or some critical modes
 */
function doesBrowserPerformAntifingerprinting$1() {
  // Safari 17
  return isWebKit() && isWebKit616OrNewer() && isSafariWebKit();
}
/**
 * Starts rendering the audio context.
 * When the returned function is called, the render process starts finishing.
 */
function startRenderingAudio(context) {
  var renderTryMaxCount = 3;
  var renderRetryDelay = 500;
  var runningMaxAwaitTime = 500;
  var runningSufficientTime = 5000;
  var finalize = function finalize() {
    return undefined;
  };
  var resultPromise = new Promise(function (resolve, reject) {
    var isFinalized = false;
    var renderTryCount = 0;
    var startedRunningAt = 0;
    context.oncomplete = function (event) {
      return resolve(event.renderedBuffer);
    };
    var startRunningTimeout = function startRunningTimeout() {
      setTimeout(function () {
        return reject(makeInnerError("timeout" /* InnerErrorName.Timeout */));
      }, Math.min(runningMaxAwaitTime, startedRunningAt + runningSufficientTime - Date.now()));
    };
    var tryRender = function tryRender() {
      try {
        var renderingPromise = context.startRendering();
        // \`context.startRendering\` has two APIs: Promise and callback, we check that it's really a promise just in case
        if (isPromise(renderingPromise)) {
          // Suppresses all unhandled rejections in case of scheduled redundant retries after successful rendering
          suppressUnhandledRejectionWarning(renderingPromise);
        }
        switch (context.state) {
          case 'running':
            startedRunningAt = Date.now();
            if (isFinalized) {
              startRunningTimeout();
            }
            break;
          // Sometimes the audio context doesn't start after calling \`startRendering\` (in addition to the cases where
          // audio context doesn't start at all). A known case is starting an audio context when the browser tab is in
          // background on iPhone. Retries usually help in this case.
          case 'suspended':
            // The audio context can reject starting until the tab is in foreground. Long fingerprint duration
            // in background isn't a problem, therefore the retry attempts don't count in background. It can lead to
            // a situation when a fingerprint takes very long time and finishes successfully. FYI, the audio context
            // can be suspended when \`document.hidden === false\` and start running after a retry.
            if (!document.hidden) {
              renderTryCount++;
            }
            if (isFinalized && renderTryCount >= renderTryMaxCount) {
              reject(makeInnerError("suspended" /* InnerErrorName.Suspended */));
            } else {
              setTimeout(tryRender, renderRetryDelay);
            }
            break;
        }
      } catch (error) {
        reject(error);
      }
    };
    tryRender();
    finalize = function finalize() {
      if (!isFinalized) {
        isFinalized = true;
        if (startedRunningAt > 0) {
          startRunningTimeout();
        }
      }
    };
  });
  return [resultPromise, finalize];
}
function getHash(signal) {
  var hash = 0;
  for (var i = 0; i < signal.length; ++i) {
    hash += Math.abs(signal[i]);
  }
  return hash;
}
function makeInnerError(name) {
  var error = new Error(name);
  error.name = name;
  return error;
}

/**
 * Creates and keeps an invisible iframe while the given function runs.
 * The given function is called when the iframe is loaded and has a body.
 * The iframe allows to measure DOM sizes inside itself.
 *
 * Notice: passing an initial HTML code doesn't work in IE.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function withIframe(action, initialHtml, domPollInterval) {
  var _a, _b, _c;
  if (domPollInterval === void 0) {
    domPollInterval = 50;
  }
  return __awaiter(this, void 0, void 0, function () {
    var d, iframe;
    return __generator(this, function (_d) {
      switch (_d.label) {
        case 0:
          d = document;
          _d.label = 1;
        case 1:
          if (!!d.body) return [3 /*break*/, 3];
          return [4 /*yield*/, wait(domPollInterval)];
        case 2:
          _d.sent();
          return [3 /*break*/, 1];
        case 3:
          iframe = d.createElement('iframe');
          _d.label = 4;
        case 4:
          _d.trys.push([4,, 10, 11]);
          return [4 /*yield*/, new Promise(function (_resolve, _reject) {
            var isComplete = false;
            var resolve = function resolve() {
              isComplete = true;
              _resolve();
            };
            var reject = function reject(error) {
              isComplete = true;
              _reject(error);
            };
            iframe.onload = resolve;
            iframe.onerror = reject;
            var style = iframe.style;
            style.setProperty('display', 'block', 'important'); // Required for browsers to calculate the layout
            style.position = 'absolute';
            style.top = '0';
            style.left = '0';
            style.visibility = 'hidden';
            if (initialHtml && 'srcdoc' in iframe) {
              iframe.srcdoc = initialHtml;
            } else {
              iframe.src = 'about:blank';
            }
            d.body.appendChild(iframe);
            // WebKit in WeChat doesn't fire the iframe's \`onload\` for some reason.
            // This code checks for the loading state manually.
            // See https://github.com/fingerprintjs/fingerprintjs/issues/645
            var checkReadyState = function checkReadyState() {
              var _a, _b;
              // The ready state may never become 'complete' in Firefox despite the 'load' event being fired.
              // So an infinite setTimeout loop can happen without this check.
              // See https://github.com/fingerprintjs/fingerprintjs/pull/716#issuecomment-986898796
              if (isComplete) {
                return;
              }
              // Make sure iframe.contentWindow and iframe.contentWindow.document are both loaded
              // The contentWindow.document can miss in JSDOM (https://github.com/jsdom/jsdom).
              if (((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.readyState) === 'complete') {
                resolve();
              } else {
                setTimeout(checkReadyState, 10);
              }
            };
            checkReadyState();
          })];
        case 5:
          _d.sent();
          _d.label = 6;
        case 6:
          if (!!((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.body)) return [3 /*break*/, 8];
          return [4 /*yield*/, wait(domPollInterval)];
        case 7:
          _d.sent();
          return [3 /*break*/, 6];
        case 8:
          return [4 /*yield*/, action(iframe, iframe.contentWindow)];
        case 9:
          return [2 /*return*/, _d.sent()];
        case 10:
          (_c = iframe.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(iframe);
          return [7 /*endfinally*/];
        case 11:
          return [2 /*return*/];
      }
    });
  });
}
/**
 * Creates a DOM element that matches the given selector.
 * Only single element selector are supported (without operators like space, +, >, etc).
 */
function selectorToElement(selector) {
  var _a = parseSimpleCssSelector(selector),
    tag = _a[0],
    attributes = _a[1];
  var element = document.createElement(tag !== null && tag !== void 0 ? tag : 'div');
  for (var _i = 0, _b = Object.keys(attributes); _i < _b.length; _i++) {
    var name_1 = _b[_i];
    var value = attributes[name_1].join(' ');
    // Changing the \`style\` attribute can cause a CSP error, therefore we change the \`style.cssText\` property.
    // https://github.com/fingerprintjs/fingerprintjs/issues/733
    if (name_1 === 'style') {
      addStyleString(element.style, value);
    } else {
      element.setAttribute(name_1, value);
    }
  }
  return element;
}
/**
 * Adds CSS styles from a string in such a way that doesn't trigger a CSP warning (unsafe-inline or unsafe-eval)
 */
function addStyleString(style, source) {
  // We don't use \`style.cssText\` because browsers must block it when no \`unsafe-eval\` CSP is presented: https://csplite.com/csp145/#w3c_note
  // Even though the browsers ignore this standard, we don't use \`cssText\` just in case.
  for (var _i = 0, _a = source.split(';'); _i < _a.length; _i++) {
    var property = _a[_i];
    var match = /^\\s*([\\w-]+)\\s*:\\s*(.+?)(\\s*!([\\w-]+))?\\s*$/.exec(property);
    if (match) {
      var name_2 = match[1],
        value = match[2],
        priority = match[4];
      style.setProperty(name_2, value, priority || ''); // The last argument can't be undefined in IE11
    }
  }
}
/**
 * Returns true if the code runs in an iframe, and any parent page's origin doesn't match the current origin
 */
function isAnyParentCrossOrigin() {
  var currentWindow = window;
  for (;;) {
    var parentWindow = currentWindow.parent;
    if (!parentWindow || parentWindow === currentWindow) {
      return false; // The top page is reached
    }

    try {
      if (parentWindow.location.origin !== currentWindow.location.origin) {
        return true;
      }
    } catch (error) {
      // The error is thrown when \`origin\` is accessed on \`parentWindow.location\` when the parent is cross-origin
      if (error instanceof Error && error.name === 'SecurityError') {
        return true;
      }
      throw error;
    }
    currentWindow = parentWindow;
  }
}

// We use m or w because these two characters take up the maximum width.
// And we use a LLi so that the same matching fonts can get separated.
var testString = 'mmMwWLliI0O&1';
// We test using 48px font size, we may use any size. I guess larger the better.
var textSize = '48px';
// A font will be compared against all the three default fonts.
// And if for any default fonts it doesn't match, then that font is available.
var baseFonts = ['monospace', 'sans-serif', 'serif'];
var fontList = [
// This is android-specific font from "Roboto" family
'sans-serif-thin', 'ARNO PRO', 'Agency FB', 'Arabic Typesetting', 'Arial Unicode MS', 'AvantGarde Bk BT', 'BankGothic Md BT', 'Batang', 'Bitstream Vera Sans Mono', 'Calibri', 'Century', 'Century Gothic', 'Clarendon', 'EUROSTILE', 'Franklin Gothic', 'Futura Bk BT', 'Futura Md BT', 'GOTHAM', 'Gill Sans', 'HELV', 'Haettenschweiler', 'Helvetica Neue', 'Humanst521 BT', 'Leelawadee', 'Letter Gothic', 'Levenim MT', 'Lucida Bright', 'Lucida Sans', 'Menlo', 'MS Mincho', 'MS Outlook', 'MS Reference Specialty', 'MS UI Gothic', 'MT Extra', 'MYRIAD PRO', 'Marlett', 'Meiryo UI', 'Microsoft Uighur', 'Minion Pro', 'Monotype Corsiva', 'PMingLiU', 'Pristina', 'SCRIPTINA', 'Segoe UI Light', 'Serifa', 'SimHei', 'Small Fonts', 'Staccato222 BT', 'TRAJAN PRO', 'Univers CE 55 Medium', 'Vrinda', 'ZWAdobeF'];
// kudos to http://www.lalit.org/lab/javascript-css-font-detect/
function getFonts() {
  var _this = this;
  // Running the script in an iframe makes it not affect the page look and not be affected by the page CSS. See:
  // https://github.com/fingerprintjs/fingerprintjs/issues/592
  // https://github.com/fingerprintjs/fingerprintjs/issues/628
  return withIframe(function (_, _a) {
    var document = _a.document;
    return __awaiter(_this, void 0, void 0, function () {
      var holder, spansContainer, defaultWidth, defaultHeight, createSpan, createSpanWithFonts, initializeBaseFontsSpans, initializeFontsSpans, isFontAvailable, baseFontsSpans, fontsSpans, index;
      return __generator(this, function (_b) {
        holder = document.body;
        holder.style.fontSize = textSize;
        spansContainer = document.createElement('div');
        spansContainer.style.setProperty('visibility', 'hidden', 'important');
        defaultWidth = {};
        defaultHeight = {};
        createSpan = function createSpan(fontFamily) {
          var span = document.createElement('span');
          var style = span.style;
          style.position = 'absolute';
          style.top = '0';
          style.left = '0';
          style.fontFamily = fontFamily;
          span.textContent = testString;
          spansContainer.appendChild(span);
          return span;
        };
        createSpanWithFonts = function createSpanWithFonts(fontToDetect, baseFont) {
          return createSpan("'".concat(fontToDetect, "',").concat(baseFont));
        };
        initializeBaseFontsSpans = function initializeBaseFontsSpans() {
          return baseFonts.map(createSpan);
        };
        initializeFontsSpans = function initializeFontsSpans() {
          // Stores {fontName : [spans for that font]}
          var spans = {};
          var _loop_1 = function _loop_1(font) {
            spans[font] = baseFonts.map(function (baseFont) {
              return createSpanWithFonts(font, baseFont);
            });
          };
          for (var _i = 0, fontList_1 = fontList; _i < fontList_1.length; _i++) {
            var font = fontList_1[_i];
            _loop_1(font);
          }
          return spans;
        };
        isFontAvailable = function isFontAvailable(fontSpans) {
          return baseFonts.some(function (baseFont, baseFontIndex) {
            return fontSpans[baseFontIndex].offsetWidth !== defaultWidth[baseFont] || fontSpans[baseFontIndex].offsetHeight !== defaultHeight[baseFont];
          });
        };
        baseFontsSpans = initializeBaseFontsSpans();
        fontsSpans = initializeFontsSpans();
        // add all the spans to the DOM
        holder.appendChild(spansContainer);
        // get the default width for the three base fonts
        for (index = 0; index < baseFonts.length; index++) {
          defaultWidth[baseFonts[index]] = baseFontsSpans[index].offsetWidth; // width for the default font
          defaultHeight[baseFonts[index]] = baseFontsSpans[index].offsetHeight; // height for the default font
        }
        // check available fonts
        return [2 /*return*/, fontList.filter(function (font) {
          return isFontAvailable(fontsSpans[font]);
        })];
      });
    });
  });
}
function getPlugins() {
  var rawPlugins = navigator.plugins;
  if (!rawPlugins) {
    return undefined;
  }
  var plugins = [];
  // Safari 10 doesn't support iterating navigator.plugins with for...of
  for (var i = 0; i < rawPlugins.length; ++i) {
    var plugin = rawPlugins[i];
    if (!plugin) {
      continue;
    }
    var mimeTypes = [];
    for (var j = 0; j < plugin.length; ++j) {
      var mimeType = plugin[j];
      mimeTypes.push({
        type: mimeType.type,
        suffixes: mimeType.suffixes
      });
    }
    plugins.push({
      name: plugin.name,
      description: plugin.description,
      mimeTypes: mimeTypes
    });
  }
  return plugins;
}

/**
 * @see https://www.browserleaks.com/canvas#how-does-it-work
 *
 * A version of the entropy source with stabilization to make it suitable for static fingerprinting.
 * Canvas image is noised in private mode of Safari 17, so image rendering is skipped in Safari 17.
 */
function getCanvasFingerprint() {
  return getUnstableCanvasFingerprint(doesBrowserPerformAntifingerprinting());
}
/**
 * A version of the entropy source without stabilization.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function getUnstableCanvasFingerprint(skipImages) {
  var _a;
  var winding = false;
  var geometry;
  var text;
  var _b = makeCanvasContext(),
    canvas = _b[0],
    context = _b[1];
  if (!isSupported(canvas, context)) {
    geometry = text = "unsupported" /* ImageStatus.Unsupported */;
  } else {
    winding = doesSupportWinding(context);
    if (skipImages) {
      geometry = text = "skipped" /* ImageStatus.Skipped */;
    } else {
      _a = renderImages(canvas, context), geometry = _a[0], text = _a[1];
    }
  }
  return {
    winding: winding,
    geometry: geometry,
    text: text
  };
}
function makeCanvasContext() {
  var canvas = document.createElement('canvas');
  canvas.width = 1;
  canvas.height = 1;
  return [canvas, canvas.getContext('2d')];
}
function isSupported(canvas, context) {
  return !!(context && canvas.toDataURL);
}
function doesSupportWinding(context) {
  // https://web.archive.org/web/20170825024655/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/
  // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/canvas/winding.js
  context.rect(0, 0, 10, 10);
  context.rect(2, 2, 6, 6);
  return !context.isPointInPath(5, 5, 'evenodd');
}
function renderImages(canvas, context) {
  renderTextImage(canvas, context);
  var textImage1 = canvasToString(canvas);
  var textImage2 = canvasToString(canvas); // It's slightly faster to double-encode the text image
  // Some browsers add a noise to the canvas: https://github.com/fingerprintjs/fingerprintjs/issues/791
  // The canvas is excluded from the fingerprint in this case
  if (textImage1 !== textImage2) {
    return ["unstable" /* ImageStatus.Unstable */, "unstable" /* ImageStatus.Unstable */];
  }
  // Text is unstable:
  // https://github.com/fingerprintjs/fingerprintjs/issues/583
  // https://github.com/fingerprintjs/fingerprintjs/issues/103
  // Therefore it's extracted into a separate image.
  renderGeometryImage(canvas, context);
  var geometryImage = canvasToString(canvas);
  return [geometryImage, textImage1];
}
function renderTextImage(canvas, context) {
  // Resizing the canvas cleans it
  canvas.width = 240;
  canvas.height = 60;
  context.textBaseline = 'alphabetic';
  context.fillStyle = '#f60';
  context.fillRect(100, 1, 62, 20);
  context.fillStyle = '#069';
  // It's important to use explicit built-in fonts in order to exclude the affect of font preferences
  // (there is a separate entropy source for them).
  context.font = '11pt "Times New Roman"';
  // The choice of emojis has a gigantic impact on rendering performance (especially in FF).
  // Some newer emojis cause it to slow down 50-200 times.
  // There must be no text to the right of the emoji, see https://github.com/fingerprintjs/fingerprintjs/issues/574
  // A bare emoji shouldn't be used because the canvas will change depending on the script encoding:
  // https://github.com/fingerprintjs/fingerprintjs/issues/66
  // Escape sequence shouldn't be used too because Terser will turn it into a bare unicode.
  var printedText = "Cwm fjordbank gly ".concat(String.fromCharCode(55357, 56835) /* 😃 */);
  context.fillText(printedText, 2, 15);
  context.fillStyle = 'rgba(102, 204, 0, 0.2)';
  context.font = '18pt Arial';
  context.fillText(printedText, 4, 45);
}
function renderGeometryImage(canvas, context) {
  // Resizing the canvas cleans it
  canvas.width = 122;
  canvas.height = 110;
  // Canvas blending
  // https://web.archive.org/web/20170826194121/http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/
  // http://jsfiddle.net/NDYV8/16/
  context.globalCompositeOperation = 'multiply';
  for (var _i = 0, _a = [['#f2f', 40, 40], ['#2ff', 80, 40], ['#ff2', 60, 80]]; _i < _a.length; _i++) {
    var _b = _a[_i],
      color = _b[0],
      x = _b[1],
      y = _b[2];
    context.fillStyle = color;
    context.beginPath();
    context.arc(x, y, 40, 0, Math.PI * 2, true);
    context.closePath();
    context.fill();
  }
  // Canvas winding
  // https://web.archive.org/web/20130913061632/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/
  // http://jsfiddle.net/NDYV8/19/
  context.fillStyle = '#f9c';
  context.arc(60, 60, 60, 0, Math.PI * 2, true);
  context.arc(60, 60, 20, 0, Math.PI * 2, true);
  context.fill('evenodd');
}
function canvasToString(canvas) {
  return canvas.toDataURL();
}
/**
 * Checks if the current browser is known for applying anti-fingerprinting measures in all or some critical modes
 */
function doesBrowserPerformAntifingerprinting() {
  // Safari 17
  return isWebKit() && isWebKit616OrNewer() && isSafariWebKit();
}

/**
 * This is a crude and primitive touch screen detection. It's not possible to currently reliably detect the availability
 * of a touch screen with a JS, without actually subscribing to a touch event.
 *
 * @see http://www.stucox.com/blog/you-cant-detect-a-touchscreen/
 * @see https://github.com/Modernizr/Modernizr/issues/548
 */
function getTouchSupport() {
  var n = navigator;
  var maxTouchPoints = 0;
  var touchEvent;
  if (n.maxTouchPoints !== undefined) {
    maxTouchPoints = toInt(n.maxTouchPoints);
  } else if (n.msMaxTouchPoints !== undefined) {
    maxTouchPoints = n.msMaxTouchPoints;
  }
  try {
    document.createEvent('TouchEvent');
    touchEvent = true;
  } catch (_a) {
    touchEvent = false;
  }
  var touchStart = ('ontouchstart' in window);
  return {
    maxTouchPoints: maxTouchPoints,
    touchEvent: touchEvent,
    touchStart: touchStart
  };
}
function getOsCpu() {
  return navigator.oscpu;
}
function getLanguages() {
  var n = navigator;
  var result = [];
  var language = n.language || n.userLanguage || n.browserLanguage || n.systemLanguage;
  if (language !== undefined) {
    result.push([language]);
  }
  if (Array.isArray(n.languages)) {
    // Starting from Chromium 86, there is only a single value in \`navigator.language\` in Incognito mode:
    // the value of \`navigator.language\`. Therefore the value is ignored in this browser.
    if (!(isChromium() && isChromium86OrNewer())) {
      result.push(n.languages);
    }
  } else if (typeof n.languages === 'string') {
    var languages = n.languages;
    if (languages) {
      result.push(languages.split(','));
    }
  }
  return result;
}
function getColorDepth() {
  return window.screen.colorDepth;
}
function getDeviceMemory() {
  // \`navigator.deviceMemory\` is a string containing a number in some unidentified cases
  return replaceNaN(toFloat(navigator.deviceMemory), undefined);
}

/**
 * A version of the entropy source with stabilization to make it suitable for static fingerprinting.
 * The window resolution is always the document size in private mode of Safari 17,
 * so the window resolution is not used in Safari 17.
 */
function getScreenResolution() {
  if (isWebKit() && isWebKit616OrNewer() && isSafariWebKit()) {
    return undefined;
  }
  return getUnstableScreenResolution();
}
/**
 * A version of the entropy source without stabilization.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function getUnstableScreenResolution() {
  var s = screen;
  // Some browsers return screen resolution as strings, e.g. "1200", instead of a number, e.g. 1200.
  // I suspect it's done by certain plugins that randomize browser properties to prevent fingerprinting.
  // Some browsers even return  screen resolution as not numbers.
  var parseDimension = function parseDimension(value) {
    return replaceNaN(toInt(value), null);
  };
  var dimensions = [parseDimension(s.width), parseDimension(s.height)];
  dimensions.sort().reverse();
  return dimensions;
}
var screenFrameCheckInterval = 2500;
var roundingPrecision = 10;
// The type is readonly to protect from unwanted mutations
var screenFrameBackup;
var screenFrameSizeTimeoutId;
/**
 * Starts watching the screen frame size. When a non-zero size appears, the size is saved and the watch is stopped.
 * Later, when \`getScreenFrame\` runs, it will return the saved non-zero size if the current size is null.
 *
 * This trick is required to mitigate the fact that the screen frame turns null in some cases.
 * See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568
 */
function watchScreenFrame() {
  if (screenFrameSizeTimeoutId !== undefined) {
    return;
  }
  var checkScreenFrame = function checkScreenFrame() {
    var frameSize = getCurrentScreenFrame();
    if (isFrameSizeNull(frameSize)) {
      screenFrameSizeTimeoutId = setTimeout(checkScreenFrame, screenFrameCheckInterval);
    } else {
      screenFrameBackup = frameSize;
      screenFrameSizeTimeoutId = undefined;
    }
  };
  checkScreenFrame();
}
/**
 * A version of the entropy source without stabilization.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function getUnstableScreenFrame() {
  var _this = this;
  watchScreenFrame();
  return function () {
    return __awaiter(_this, void 0, void 0, function () {
      var frameSize;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            frameSize = getCurrentScreenFrame();
            if (!isFrameSizeNull(frameSize)) return [3 /*break*/, 2];
            if (screenFrameBackup) {
              return [2 /*return*/, __spreadArray([], screenFrameBackup, true)];
            }
            if (!getFullscreenElement()) return [3 /*break*/, 2];
            // Some browsers set the screen frame to zero when programmatic fullscreen is on.
            // There is a chance of getting a non-zero frame after exiting the fullscreen.
            // See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568
            return [4 /*yield*/, exitFullscreen()];
          case 1:
            // Some browsers set the screen frame to zero when programmatic fullscreen is on.
            // There is a chance of getting a non-zero frame after exiting the fullscreen.
            // See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568
            _a.sent();
            frameSize = getCurrentScreenFrame();
            _a.label = 2;
          case 2:
            if (!isFrameSizeNull(frameSize)) {
              screenFrameBackup = frameSize;
            }
            return [2 /*return*/, frameSize];
        }
      });
    });
  };
}
/**
 * A version of the entropy source with stabilization to make it suitable for static fingerprinting.
 *
 * Sometimes the available screen resolution changes a bit, e.g. 1900x1440 → 1900x1439. A possible reason: macOS Dock
 * shrinks to fit more icons when there is too little space. The rounding is used to mitigate the difference.
 *
 * The frame width is always 0 in private mode of Safari 17, so the frame is not used in Safari 17.
 */
function getScreenFrame() {
  var _this = this;
  if (isWebKit() && isWebKit616OrNewer() && isSafariWebKit()) {
    return function () {
      return Promise.resolve(undefined);
    };
  }
  var screenFrameGetter = getUnstableScreenFrame();
  return function () {
    return __awaiter(_this, void 0, void 0, function () {
      var frameSize, processSize;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4 /*yield*/, screenFrameGetter()];
          case 1:
            frameSize = _a.sent();
            processSize = function processSize(sideSize) {
              return sideSize === null ? null : round(sideSize, roundingPrecision);
            };
            // It might look like I don't know about \`for\` and \`map\`.
            // In fact, such code is used to avoid TypeScript issues without using \`as\`.
            return [2 /*return*/, [processSize(frameSize[0]), processSize(frameSize[1]), processSize(frameSize[2]), processSize(frameSize[3])]];
        }
      });
    });
  };
}
function getCurrentScreenFrame() {
  var s = screen;
  // Some browsers return screen resolution as strings, e.g. "1200", instead of a number, e.g. 1200.
  // I suspect it's done by certain plugins that randomize browser properties to prevent fingerprinting.
  //
  // Some browsers (IE, Edge ≤18) don't provide \`screen.availLeft\` and \`screen.availTop\`. The property values are
  // replaced with 0 in such cases to not lose the entropy from \`screen.availWidth\` and \`screen.availHeight\`.
  return [replaceNaN(toFloat(s.availTop), null), replaceNaN(toFloat(s.width) - toFloat(s.availWidth) - replaceNaN(toFloat(s.availLeft), 0), null), replaceNaN(toFloat(s.height) - toFloat(s.availHeight) - replaceNaN(toFloat(s.availTop), 0), null), replaceNaN(toFloat(s.availLeft), null)];
}
function isFrameSizeNull(frameSize) {
  for (var i = 0; i < 4; ++i) {
    if (frameSize[i]) {
      return false;
    }
  }
  return true;
}
function getHardwareConcurrency() {
  // sometimes hardware concurrency is a string
  return replaceNaN(toInt(navigator.hardwareConcurrency), undefined);
}
function getTimezone() {
  var _a;
  var DateTimeFormat = (_a = window.Intl) === null || _a === void 0 ? void 0 : _a.DateTimeFormat;
  if (DateTimeFormat) {
    var timezone = new DateTimeFormat().resolvedOptions().timeZone;
    if (timezone) {
      return timezone;
    }
  }
  // For browsers that don't support timezone names
  // The minus is intentional because the JS offset is opposite to the real offset
  var offset = -getTimezoneOffset();
  return "UTC".concat(offset >= 0 ? '+' : '').concat(offset);
}
function getTimezoneOffset() {
  var currentYear = new Date().getFullYear();
  // The timezone offset may change over time due to daylight saving time (DST) shifts.
  // The non-DST timezone offset is used as the result timezone offset.
  // Since the DST season differs in the northern and the southern hemispheres,
  // both January and July timezones offsets are considered.
  return Math.max(
  // \`getTimezoneOffset\` returns a number as a string in some unidentified cases
  toFloat(new Date(currentYear, 0, 1).getTimezoneOffset()), toFloat(new Date(currentYear, 6, 1).getTimezoneOffset()));
}
function getSessionStorage() {
  try {
    return !!window.sessionStorage;
  } catch (error) {
    /* SecurityError when referencing it means it exists */
    return true;
  }
}

// https://bugzilla.mozilla.org/show_bug.cgi?id=781447
function getLocalStorage() {
  try {
    return !!window.localStorage;
  } catch (e) {
    /* SecurityError when referencing it means it exists */
    return true;
  }
}
function getIndexedDB() {
  // IE and Edge don't allow accessing indexedDB in private mode, therefore IE and Edge will have different
  // visitor identifier in normal and private modes.
  if (isTrident() || isEdgeHTML()) {
    return undefined;
  }
  try {
    return !!window.indexedDB;
  } catch (e) {
    /* SecurityError when referencing it means it exists */
    return true;
  }
}
function getOpenDatabase() {
  return !!window.openDatabase;
}
function getCpuClass() {
  return navigator.cpuClass;
}
function getPlatform() {
  // Android Chrome 86 and 87 and Android Firefox 80 and 84 don't mock the platform value when desktop mode is requested
  var platform = navigator.platform;
  // iOS mocks the platform value when desktop version is requested: https://github.com/fingerprintjs/fingerprintjs/issues/514
  // iPad uses desktop mode by default since iOS 13
  // The value is 'MacIntel' on M1 Macs
  // The value is 'iPhone' on iPod Touch
  if (platform === 'MacIntel') {
    if (isWebKit() && !isDesktopWebKit()) {
      return isIPad() ? 'iPad' : 'iPhone';
    }
  }
  return platform;
}
function getVendor() {
  return navigator.vendor || '';
}

/**
 * Checks for browser-specific (not engine specific) global variables to tell browsers with the same engine apart.
 * Only somewhat popular browsers are considered.
 */
function getVendorFlavors() {
  var flavors = [];
  for (var _i = 0, _a = [
    // Blink and some browsers on iOS
    'chrome',
    // Safari on macOS
    'safari',
    // Chrome on iOS (checked in 85 on 13 and 87 on 14)
    '__crWeb', '__gCrWeb',
    // Yandex Browser on iOS, macOS and Android (checked in 21.2 on iOS 14, macOS and Android)
    'yandex',
    // Yandex Browser on iOS (checked in 21.2 on 14)
    '__yb', '__ybro',
    // Firefox on iOS (checked in 32 on 14)
    '__firefox__',
    // Edge on iOS (checked in 46 on 14)
    '__edgeTrackingPreventionStatistics', 'webkit',
    // Opera Touch on iOS (checked in 2.6 on 14)
    'oprt',
    // Samsung Internet on Android (checked in 11.1)
    'samsungAr',
    // UC Browser on Android (checked in 12.10 and 13.0)
    'ucweb', 'UCShellJava',
    // Puffin on Android (checked in 9.0)
    'puffinDevice'
    // UC on iOS and Opera on Android have no specific global variables
    // Edge for Android isn't checked
    ]; _i < _a.length; _i++) {
    var key = _a[_i];
    var value = window[key];
    if (value && _typeof$2(value) === 'object') {
      flavors.push(key);
    }
  }
  return flavors.sort();
}

/**
 * navigator.cookieEnabled cannot detect custom or nuanced cookie blocking configurations. For example, when blocking
 * cookies via the Advanced Privacy Settings in IE9, it always returns true. And there have been issues in the past with
 * site-specific exceptions. Don't rely on it.
 *
 * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cookies.js Taken from here
 */
function areCookiesEnabled() {
  var d = document;
  // Taken from here: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cookies.js
  // navigator.cookieEnabled cannot detect custom or nuanced cookie blocking configurations. For example, when blocking
  // cookies via the Advanced Privacy Settings in IE9, it always returns true. And there have been issues in the past
  // with site-specific exceptions. Don't rely on it.
  // try..catch because some in situations \`document.cookie\` is exposed but throws a
  // SecurityError if you try to access it; e.g. documents created from data URIs
  // or in sandboxed iframes (depending on flags/context)
  try {
    // Create cookie
    d.cookie = 'cookietest=1; SameSite=Strict;';
    var result = d.cookie.indexOf('cookietest=') !== -1;
    // Delete cookie
    d.cookie = 'cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT';
    return result;
  } catch (e) {
    return false;
  }
}

/**
 * Only single element selector are supported (no operators like space, +, >, etc).
 * \`embed\` and \`position: fixed;\` will be considered as blocked anyway because it always has no offsetParent.
 * Avoid \`iframe\` and anything with \`[src=]\` because they produce excess HTTP requests.
 *
 * The "inappropriate" selectors are obfuscated. See https://github.com/fingerprintjs/fingerprintjs/issues/734.
 * A function is used instead of a plain object to help tree-shaking.
 *
 * The function code is generated automatically. See docs/content_blockers.md to learn how to make the list.
 */
function getFilters() {
  var fromB64 = atob; // Just for better minification
  return {
    abpIndo: ['#Iklan-Melayang', '#Kolom-Iklan-728', '#SidebarIklan-wrapper', '[title="ALIENBOLA" i]', fromB64('I0JveC1CYW5uZXItYWRz')],
    abpvn: ['.quangcao', '#mobileCatfish', fromB64('LmNsb3NlLWFkcw=='), '[id^="bn_bottom_fixed_"]', '#pmadv'],
    adBlockFinland: ['.mainostila', fromB64('LnNwb25zb3JpdA=='), '.ylamainos', fromB64('YVtocmVmKj0iL2NsaWNrdGhyZ2guYXNwPyJd'), fromB64('YVtocmVmXj0iaHR0cHM6Ly9hcHAucmVhZHBlYWsuY29tL2FkcyJd')],
    adBlockPersian: ['#navbar_notice_50', '.kadr', 'TABLE[width="140px"]', '#divAgahi', fromB64('YVtocmVmXj0iaHR0cDovL2cxLnYuZndtcm0ubmV0L2FkLyJd')],
    adBlockWarningRemoval: ['#adblock-honeypot', '.adblocker-root', '.wp_adblock_detect', fromB64('LmhlYWRlci1ibG9ja2VkLWFk'), fromB64('I2FkX2Jsb2NrZXI=')],
    adGuardAnnoyances: ['.hs-sosyal', '#cookieconsentdiv', 'div[class^="app_gdpr"]', '.as-oil', '[data-cypress="soft-push-notification-modal"]'],
    adGuardBase: ['.BetterJsPopOverlay', fromB64('I2FkXzMwMFgyNTA='), fromB64('I2Jhbm5lcmZsb2F0MjI='), fromB64('I2NhbXBhaWduLWJhbm5lcg=='), fromB64('I0FkLUNvbnRlbnQ=')],
    adGuardChinese: [fromB64('LlppX2FkX2FfSA=='), fromB64('YVtocmVmKj0iLmh0aGJldDM0LmNvbSJd'), '#widget-quan', fromB64('YVtocmVmKj0iLzg0OTkyMDIwLnh5eiJd'), fromB64('YVtocmVmKj0iLjE5NTZobC5jb20vIl0=')],
    adGuardFrench: ['#pavePub', fromB64('LmFkLWRlc2t0b3AtcmVjdGFuZ2xl'), '.mobile_adhesion', '.widgetadv', fromB64('LmFkc19iYW4=')],
    adGuardGerman: ['aside[data-portal-id="leaderboard"]'],
    adGuardJapanese: ['#kauli_yad_1', fromB64('YVtocmVmXj0iaHR0cDovL2FkMi50cmFmZmljZ2F0ZS5uZXQvIl0='), fromB64('Ll9wb3BJbl9pbmZpbml0ZV9hZA=='), fromB64('LmFkZ29vZ2xl'), fromB64('Ll9faXNib29zdFJldHVybkFk')],
    adGuardMobile: [fromB64('YW1wLWF1dG8tYWRz'), fromB64('LmFtcF9hZA=='), 'amp-embed[type="24smi"]', '#mgid_iframe1', fromB64('I2FkX2ludmlld19hcmVh')],
    adGuardRussian: [fromB64('YVtocmVmXj0iaHR0cHM6Ly9hZC5sZXRtZWFkcy5jb20vIl0='), fromB64('LnJlY2xhbWE='), 'div[id^="smi2adblock"]', fromB64('ZGl2W2lkXj0iQWRGb3hfYmFubmVyXyJd'), '#psyduckpockeball'],
    adGuardSocial: [fromB64('YVtocmVmXj0iLy93d3cuc3R1bWJsZXVwb24uY29tL3N1Ym1pdD91cmw9Il0='), fromB64('YVtocmVmXj0iLy90ZWxlZ3JhbS5tZS9zaGFyZS91cmw/Il0='), '.etsy-tweet', '#inlineShare', '.popup-social'],
    adGuardSpanishPortuguese: ['#barraPublicidade', '#Publicidade', '#publiEspecial', '#queTooltip', '.cnt-publi'],
    adGuardTrackingProtection: ['#qoo-counter', fromB64('YVtocmVmXj0iaHR0cDovL2NsaWNrLmhvdGxvZy5ydS8iXQ=='), fromB64('YVtocmVmXj0iaHR0cDovL2hpdGNvdW50ZXIucnUvdG9wL3N0YXQucGhwIl0='), fromB64('YVtocmVmXj0iaHR0cDovL3RvcC5tYWlsLnJ1L2p1bXAiXQ=='), '#top100counter'],
    adGuardTurkish: ['#backkapat', fromB64('I3Jla2xhbWk='), fromB64('YVtocmVmXj0iaHR0cDovL2Fkc2Vydi5vbnRlay5jb20udHIvIl0='), fromB64('YVtocmVmXj0iaHR0cDovL2l6bGVuemkuY29tL2NhbXBhaWduLyJd'), fromB64('YVtocmVmXj0iaHR0cDovL3d3dy5pbnN0YWxsYWRzLm5ldC8iXQ==')],
    bulgarian: [fromB64('dGQjZnJlZW5ldF90YWJsZV9hZHM='), '#ea_intext_div', '.lapni-pop-over', '#xenium_hot_offers'],
    easyList: ['.yb-floorad', fromB64('LndpZGdldF9wb19hZHNfd2lkZ2V0'), fromB64('LnRyYWZmaWNqdW5reS1hZA=='), '.textad_headline', fromB64('LnNwb25zb3JlZC10ZXh0LWxpbmtz')],
    easyListChina: [fromB64('LmFwcGd1aWRlLXdyYXBbb25jbGljayo9ImJjZWJvcy5jb20iXQ=='), fromB64('LmZyb250cGFnZUFkdk0='), '#taotaole', '#aafoot.top_box', '.cfa_popup'],
    easyListCookie: ['.ezmob-footer', '.cc-CookieWarning', '[data-cookie-number]', fromB64('LmF3LWNvb2tpZS1iYW5uZXI='), '.sygnal24-gdpr-modal-wrap'],
    easyListCzechSlovak: ['#onlajny-stickers', fromB64('I3Jla2xhbW5pLWJveA=='), fromB64('LnJla2xhbWEtbWVnYWJvYXJk'), '.sklik', fromB64('W2lkXj0ic2tsaWtSZWtsYW1hIl0=')],
    easyListDutch: [fromB64('I2FkdmVydGVudGll'), fromB64('I3ZpcEFkbWFya3RCYW5uZXJCbG9jaw=='), '.adstekst', fromB64('YVtocmVmXj0iaHR0cHM6Ly94bHR1YmUubmwvY2xpY2svIl0='), '#semilo-lrectangle'],
    easyListGermany: ['#SSpotIMPopSlider', fromB64('LnNwb25zb3JsaW5rZ3J1ZW4='), fromB64('I3dlcmJ1bmdza3k='), fromB64('I3Jla2xhbWUtcmVjaHRzLW1pdHRl'), fromB64('YVtocmVmXj0iaHR0cHM6Ly9iZDc0Mi5jb20vIl0=')],
    easyListItaly: [fromB64('LmJveF9hZHZfYW5udW5jaQ=='), '.sb-box-pubbliredazionale', fromB64('YVtocmVmXj0iaHR0cDovL2FmZmlsaWF6aW9uaWFkcy5zbmFpLml0LyJd'), fromB64('YVtocmVmXj0iaHR0cHM6Ly9hZHNlcnZlci5odG1sLml0LyJd'), fromB64('YVtocmVmXj0iaHR0cHM6Ly9hZmZpbGlhemlvbmlhZHMuc25haS5pdC8iXQ==')],
    easyListLithuania: [fromB64('LnJla2xhbW9zX3RhcnBhcw=='), fromB64('LnJla2xhbW9zX251b3JvZG9z'), fromB64('aW1nW2FsdD0iUmVrbGFtaW5pcyBza3lkZWxpcyJd'), fromB64('aW1nW2FsdD0iRGVkaWt1b3RpLmx0IHNlcnZlcmlhaSJd'), fromB64('aW1nW2FsdD0iSG9zdGluZ2FzIFNlcnZlcmlhaS5sdCJd')],
    estonian: [fromB64('QVtocmVmKj0iaHR0cDovL3BheTRyZXN1bHRzMjQuZXUiXQ==')],
    fanboyAnnoyances: ['#ac-lre-player', '.navigate-to-top', '#subscribe_popup', '.newsletter_holder', '#back-top'],
    fanboyAntiFacebook: ['.util-bar-module-firefly-visible'],
    fanboyEnhancedTrackers: ['.open.pushModal', '#issuem-leaky-paywall-articles-zero-remaining-nag', '#sovrn_container', 'div[class$="-hide"][zoompage-fontsize][style="display: block;"]', '.BlockNag__Card'],
    fanboySocial: ['#FollowUs', '#meteored_share', '#social_follow', '.article-sharer', '.community__social-desc'],
    frellwitSwedish: [fromB64('YVtocmVmKj0iY2FzaW5vcHJvLnNlIl1bdGFyZ2V0PSJfYmxhbmsiXQ=='), fromB64('YVtocmVmKj0iZG9rdG9yLXNlLm9uZWxpbmsubWUiXQ=='), 'article.category-samarbete', fromB64('ZGl2LmhvbGlkQWRz'), 'ul.adsmodern'],
    greekAdBlock: [fromB64('QVtocmVmKj0iYWRtYW4ub3RlbmV0LmdyL2NsaWNrPyJd'), fromB64('QVtocmVmKj0iaHR0cDovL2F4aWFiYW5uZXJzLmV4b2R1cy5nci8iXQ=='), fromB64('QVtocmVmKj0iaHR0cDovL2ludGVyYWN0aXZlLmZvcnRobmV0LmdyL2NsaWNrPyJd'), 'DIV.agores300', 'TABLE.advright'],
    hungarian: ['#cemp_doboz', '.optimonk-iframe-container', fromB64('LmFkX19tYWlu'), fromB64('W2NsYXNzKj0iR29vZ2xlQWRzIl0='), '#hirdetesek_box'],
    iDontCareAboutCookies: ['.alert-info[data-block-track*="CookieNotice"]', '.ModuleTemplateCookieIndicator', '.o--cookies--container', '#cookies-policy-sticky', '#stickyCookieBar'],
    icelandicAbp: [fromB64('QVtocmVmXj0iL2ZyYW1ld29yay9yZXNvdXJjZXMvZm9ybXMvYWRzLmFzcHgiXQ==')],
    latvian: [fromB64('YVtocmVmPSJodHRwOi8vd3d3LnNhbGlkemluaS5sdi8iXVtzdHlsZT0iZGlzcGxheTogYmxvY2s7IHdpZHRoOiAxMjBweDsgaGVpZ2h0O' + 'iA0MHB4OyBvdmVyZmxvdzogaGlkZGVuOyBwb3NpdGlvbjogcmVsYXRpdmU7Il0='), fromB64('YVtocmVmPSJodHRwOi8vd3d3LnNhbGlkemluaS5sdi8iXVtzdHlsZT0iZGlzcGxheTogYmxvY2s7IHdpZHRoOiA4OHB4OyBoZWlnaHQ6I' + 'DMxcHg7IG92ZXJmbG93OiBoaWRkZW47IHBvc2l0aW9uOiByZWxhdGl2ZTsiXQ==')],
    listKr: [fromB64('YVtocmVmKj0iLy9hZC5wbGFuYnBsdXMuY28ua3IvIl0='), fromB64('I2xpdmVyZUFkV3JhcHBlcg=='), fromB64('YVtocmVmKj0iLy9hZHYuaW1hZHJlcC5jby5rci8iXQ=='), fromB64('aW5zLmZhc3R2aWV3LWFk'), '.revenue_unit_item.dable'],
    listeAr: [fromB64('LmdlbWluaUxCMUFk'), '.right-and-left-sponsers', fromB64('YVtocmVmKj0iLmFmbGFtLmluZm8iXQ=='), fromB64('YVtocmVmKj0iYm9vcmFxLm9yZyJd'), fromB64('YVtocmVmKj0iZHViaXp6bGUuY29tL2FyLz91dG1fc291cmNlPSJd')],
    listeFr: [fromB64('YVtocmVmXj0iaHR0cDovL3Byb21vLnZhZG9yLmNvbS8iXQ=='), fromB64('I2FkY29udGFpbmVyX3JlY2hlcmNoZQ=='), fromB64('YVtocmVmKj0id2Vib3JhbWEuZnIvZmNnaS1iaW4vIl0='), '.site-pub-interstitiel', 'div[id^="crt-"][data-criteo-id]'],
    officialPolish: ['#ceneo-placeholder-ceneo-12', fromB64('W2hyZWZePSJodHRwczovL2FmZi5zZW5kaHViLnBsLyJd'), fromB64('YVtocmVmXj0iaHR0cDovL2Fkdm1hbmFnZXIudGVjaGZ1bi5wbC9yZWRpcmVjdC8iXQ=='), fromB64('YVtocmVmXj0iaHR0cDovL3d3dy50cml6ZXIucGwvP3V0bV9zb3VyY2UiXQ=='), fromB64('ZGl2I3NrYXBpZWNfYWQ=')],
    ro: [fromB64('YVtocmVmXj0iLy9hZmZ0cmsuYWx0ZXgucm8vQ291bnRlci9DbGljayJd'), fromB64('YVtocmVmXj0iaHR0cHM6Ly9ibGFja2ZyaWRheXNhbGVzLnJvL3Ryay9zaG9wLyJd'), fromB64('YVtocmVmXj0iaHR0cHM6Ly9ldmVudC4ycGVyZm9ybWFudC5jb20vZXZlbnRzL2NsaWNrIl0='), fromB64('YVtocmVmXj0iaHR0cHM6Ly9sLnByb2ZpdHNoYXJlLnJvLyJd'), 'a[href^="/url/"]'],
    ruAd: [fromB64('YVtocmVmKj0iLy9mZWJyYXJlLnJ1LyJd'), fromB64('YVtocmVmKj0iLy91dGltZy5ydS8iXQ=='), fromB64('YVtocmVmKj0iOi8vY2hpa2lkaWtpLnJ1Il0='), '#pgeldiz', '.yandex-rtb-block'],
    thaiAds: ['a[href*=macau-uta-popup]', fromB64('I2Fkcy1nb29nbGUtbWlkZGxlX3JlY3RhbmdsZS1ncm91cA=='), fromB64('LmFkczMwMHM='), '.bumq', '.img-kosana'],
    webAnnoyancesUltralist: ['#mod-social-share-2', '#social-tools', fromB64('LmN0cGwtZnVsbGJhbm5lcg=='), '.zergnet-recommend', '.yt.btn-link.btn-md.btn']
  };
}
/**
 * The order of the returned array means nothing (it's always sorted alphabetically).
 *
 * Notice that the source is slightly unstable.
 * Safari provides a 2-taps way to disable all content blockers on a page temporarily.
 * Also content blockers can be disabled permanently for a domain, but it requires 4 taps.
 * So empty array shouldn't be treated as "no blockers", it should be treated as "no signal".
 * If you are a website owner, don't make your visitors want to disable content blockers.
 */
function getDomBlockers(_a) {
  var _b = _a === void 0 ? {} : _a,
    debug = _b.debug;
  return __awaiter(this, void 0, void 0, function () {
    var filters, filterNames, allSelectors, blockedSelectors, activeBlockers;
    var _c;
    return __generator(this, function (_d) {
      switch (_d.label) {
        case 0:
          if (!isApplicable()) {
            return [2 /*return*/, undefined];
          }
          filters = getFilters();
          filterNames = Object.keys(filters);
          allSelectors = (_c = []).concat.apply(_c, filterNames.map(function (filterName) {
            return filters[filterName];
          }));
          return [4 /*yield*/, getBlockedSelectors(allSelectors)];
        case 1:
          blockedSelectors = _d.sent();
          if (debug) {
            printDebug(filters, blockedSelectors);
          }
          activeBlockers = filterNames.filter(function (filterName) {
            var selectors = filters[filterName];
            var blockedCount = countTruthy(selectors.map(function (selector) {
              return blockedSelectors[selector];
            }));
            return blockedCount > selectors.length * 0.6;
          });
          activeBlockers.sort();
          return [2 /*return*/, activeBlockers];
      }
    });
  });
}
function isApplicable() {
  // Safari (desktop and mobile) and all Android browsers keep content blockers in both regular and private mode
  return isWebKit() || isAndroid();
}
function getBlockedSelectors(selectors) {
  var _a;
  return __awaiter(this, void 0, void 0, function () {
    var d, root, elements, blockedSelectors, i, element, holder, i;
    return __generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          d = document;
          root = d.createElement('div');
          elements = new Array(selectors.length);
          blockedSelectors = {} // Set() isn't used just in case somebody need older browser support
          ;

          forceShow(root);
          // First create all elements that can be blocked. If the DOM steps below are done in a single cycle,
          // browser will alternate tree modification and layout reading, that is very slow.
          for (i = 0; i < selectors.length; ++i) {
            element = selectorToElement(selectors[i]);
            if (element.tagName === 'DIALOG') {
              element.show();
            }
            holder = d.createElement('div') // Protects from unwanted effects of \`+\` and \`~\` selectors of filters
            ;

            forceShow(holder);
            holder.appendChild(element);
            root.appendChild(holder);
            elements[i] = element;
          }
          _b.label = 1;
        case 1:
          if (!!d.body) return [3 /*break*/, 3];
          return [4 /*yield*/, wait(50)];
        case 2:
          _b.sent();
          return [3 /*break*/, 1];
        case 3:
          d.body.appendChild(root);
          try {
            // Then check which of the elements are blocked
            for (i = 0; i < selectors.length; ++i) {
              if (!elements[i].offsetParent) {
                blockedSelectors[selectors[i]] = true;
              }
            }
          } finally {
            // Then remove the elements
            (_a = root.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(root);
          }
          return [2 /*return*/, blockedSelectors];
      }
    });
  });
}
function forceShow(element) {
  element.style.setProperty('visibility', 'hidden', 'important');
  element.style.setProperty('display', 'block', 'important');
}
function printDebug(filters, blockedSelectors) {
  var message = 'DOM blockers debug:\\n\`\`\`';
  for (var _i = 0, _a = Object.keys(filters); _i < _a.length; _i++) {
    var filterName = _a[_i];
    message += "\\n".concat(filterName, ":");
    for (var _b = 0, _c = filters[filterName]; _b < _c.length; _b++) {
      var selector = _c[_b];
      message += "\\n  ".concat(blockedSelectors[selector] ? '🚫' : '➡️', " ").concat(selector);
    }
  }
  // console.log is ok here because it's under a debug clause
  // eslint-disable-next-line no-console
  console.log("".concat(message, "\\n\`\`\`"));
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/color-gamut
 */
function getColorGamut() {
  // rec2020 includes p3 and p3 includes srgb
  for (var _i = 0, _a = ['rec2020', 'p3', 'srgb']; _i < _a.length; _i++) {
    var gamut = _a[_i];
    if (matchMedia("(color-gamut: ".concat(gamut, ")")).matches) {
      return gamut;
    }
  }
  return undefined;
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors
 */
function areColorsInverted() {
  if (doesMatch$5('inverted')) {
    return true;
  }
  if (doesMatch$5('none')) {
    return false;
  }
  return undefined;
}
function doesMatch$5(value) {
  return matchMedia("(inverted-colors: ".concat(value, ")")).matches;
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors
 */
function areColorsForced() {
  if (doesMatch$4('active')) {
    return true;
  }
  if (doesMatch$4('none')) {
    return false;
  }
  return undefined;
}
function doesMatch$4(value) {
  return matchMedia("(forced-colors: ".concat(value, ")")).matches;
}
var maxValueToCheck = 100;
/**
 * If the display is monochrome (e.g. black&white), the value will be ≥0 and will mean the number of bits per pixel.
 * If the display is not monochrome, the returned value will be 0.
 * If the browser doesn't support this feature, the returned value will be undefined.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/monochrome
 */
function getMonochromeDepth() {
  if (!matchMedia('(min-monochrome: 0)').matches) {
    // The media feature isn't supported by the browser
    return undefined;
  }
  // A variation of binary search algorithm can be used here.
  // But since expected values are very small (≤10), there is no sense in adding the complexity.
  for (var i = 0; i <= maxValueToCheck; ++i) {
    if (matchMedia("(max-monochrome: ".concat(i, ")")).matches) {
      return i;
    }
  }
  throw new Error('Too high value');
}

/**
 * @see https://www.w3.org/TR/mediaqueries-5/#prefers-contrast
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast
 */
function getContrastPreference() {
  if (doesMatch$3('no-preference')) {
    return 0 /* ContrastPreference.None */;
  }
  // The sources contradict on the keywords. Probably 'high' and 'low' will never be implemented.
  // Need to check it when all browsers implement the feature.
  if (doesMatch$3('high') || doesMatch$3('more')) {
    return 1 /* ContrastPreference.More */;
  }

  if (doesMatch$3('low') || doesMatch$3('less')) {
    return -1 /* ContrastPreference.Less */;
  }

  if (doesMatch$3('forced')) {
    return 10 /* ContrastPreference.ForcedColors */;
  }

  return undefined;
}
function doesMatch$3(value) {
  return matchMedia("(prefers-contrast: ".concat(value, ")")).matches;
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion
 */
function isMotionReduced() {
  if (doesMatch$2('reduce')) {
    return true;
  }
  if (doesMatch$2('no-preference')) {
    return false;
  }
  return undefined;
}
function doesMatch$2(value) {
  return matchMedia("(prefers-reduced-motion: ".concat(value, ")")).matches;
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-transparency
 */
function isTransparencyReduced() {
  if (doesMatch$1('reduce')) {
    return true;
  }
  if (doesMatch$1('no-preference')) {
    return false;
  }
  return undefined;
}
function doesMatch$1(value) {
  return matchMedia("(prefers-reduced-transparency: ".concat(value, ")")).matches;
}

/**
 * @see https://www.w3.org/TR/mediaqueries-5/#dynamic-range
 */
function isHDR() {
  if (doesMatch('high')) {
    return true;
  }
  if (doesMatch('standard')) {
    return false;
  }
  return undefined;
}
function doesMatch(value) {
  return matchMedia("(dynamic-range: ".concat(value, ")")).matches;
}
var M = Math; // To reduce the minified code size
var fallbackFn = function fallbackFn() {
  return 0;
};
/**
 * @see https://gitlab.torproject.org/legacy/trac/-/issues/13018
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=531915
 */
function getMathFingerprint() {
  // Native operations
  var acos = M.acos || fallbackFn;
  var acosh = M.acosh || fallbackFn;
  var asin = M.asin || fallbackFn;
  var asinh = M.asinh || fallbackFn;
  var atanh = M.atanh || fallbackFn;
  var atan = M.atan || fallbackFn;
  var sin = M.sin || fallbackFn;
  var sinh = M.sinh || fallbackFn;
  var cos = M.cos || fallbackFn;
  var cosh = M.cosh || fallbackFn;
  var tan = M.tan || fallbackFn;
  var tanh = M.tanh || fallbackFn;
  var exp = M.exp || fallbackFn;
  var expm1 = M.expm1 || fallbackFn;
  var log1p = M.log1p || fallbackFn;
  // Operation polyfills
  var powPI = function powPI(value) {
    return M.pow(M.PI, value);
  };
  var acoshPf = function acoshPf(value) {
    return M.log(value + M.sqrt(value * value - 1));
  };
  var asinhPf = function asinhPf(value) {
    return M.log(value + M.sqrt(value * value + 1));
  };
  var atanhPf = function atanhPf(value) {
    return M.log((1 + value) / (1 - value)) / 2;
  };
  var sinhPf = function sinhPf(value) {
    return M.exp(value) - 1 / M.exp(value) / 2;
  };
  var coshPf = function coshPf(value) {
    return (M.exp(value) + 1 / M.exp(value)) / 2;
  };
  var expm1Pf = function expm1Pf(value) {
    return M.exp(value) - 1;
  };
  var tanhPf = function tanhPf(value) {
    return (M.exp(2 * value) - 1) / (M.exp(2 * value) + 1);
  };
  var log1pPf = function log1pPf(value) {
    return M.log(1 + value);
  };
  // Note: constant values are empirical
  return {
    acos: acos(0.123124234234234242),
    acosh: acosh(1e308),
    acoshPf: acoshPf(1e154),
    asin: asin(0.123124234234234242),
    asinh: asinh(1),
    asinhPf: asinhPf(1),
    atanh: atanh(0.5),
    atanhPf: atanhPf(0.5),
    atan: atan(0.5),
    sin: sin(-1e300),
    sinh: sinh(1),
    sinhPf: sinhPf(1),
    cos: cos(10.000000000123),
    cosh: cosh(1),
    coshPf: coshPf(1),
    tan: tan(-1e300),
    tanh: tanh(1),
    tanhPf: tanhPf(1),
    exp: exp(1),
    expm1: expm1(1),
    expm1Pf: expm1Pf(1),
    log1p: log1p(10),
    log1pPf: log1pPf(10),
    powPI: powPI(-100)
  };
}

/**
 * We use m or w because these two characters take up the maximum width.
 * Also there are a couple of ligatures.
 */
var defaultText = 'mmMwWLliI0fiflO&1';
/**
 * Settings of text blocks to measure. The keys are random but persistent words.
 */
var presets = {
  /**
   * The default font. User can change it in desktop Chrome, desktop Firefox, IE 11,
   * Android Chrome (but only when the size is ≥ than the default) and Android Firefox.
   */
  default: [],
  /** OS font on macOS. User can change its size and weight. Applies after Safari restart. */
  apple: [{
    font: '-apple-system-body'
  }],
  /** User can change it in desktop Chrome and desktop Firefox. */
  serif: [{
    fontFamily: 'serif'
  }],
  /** User can change it in desktop Chrome and desktop Firefox. */
  sans: [{
    fontFamily: 'sans-serif'
  }],
  /** User can change it in desktop Chrome and desktop Firefox. */
  mono: [{
    fontFamily: 'monospace'
  }],
  /**
   * Check the smallest allowed font size. User can change it in desktop Chrome, desktop Firefox and desktop Safari.
   * The height can be 0 in Chrome on a retina display.
   */
  min: [{
    fontSize: '1px'
  }],
  /** Tells one OS from another in desktop Chrome. */
  system: [{
    fontFamily: 'system-ui'
  }]
};
/**
 * The result is a dictionary of the width of the text samples.
 * Heights aren't included because they give no extra entropy and are unstable.
 *
 * The result is very stable in IE 11, Edge 18 and Safari 14.
 * The result changes when the OS pixel density changes in Chromium 87. The real pixel density is required to solve,
 * but seems like it's impossible: https://stackoverflow.com/q/1713771/1118709.
 * The "min" and the "mono" (only on Windows) value may change when the page is zoomed in Firefox 87.
 */
function getFontPreferences() {
  return withNaturalFonts(function (document, container) {
    var elements = {};
    var sizes = {};
    // First create all elements to measure. If the DOM steps below are done in a single cycle,
    // browser will alternate tree modification and layout reading, that is very slow.
    for (var _i = 0, _a = Object.keys(presets); _i < _a.length; _i++) {
      var key = _a[_i];
      var _b = presets[key],
        _c = _b[0],
        style = _c === void 0 ? {} : _c,
        _d = _b[1],
        text = _d === void 0 ? defaultText : _d;
      var element = document.createElement('span');
      element.textContent = text;
      element.style.whiteSpace = 'nowrap';
      for (var _e = 0, _f = Object.keys(style); _e < _f.length; _e++) {
        var name_1 = _f[_e];
        var value = style[name_1];
        if (value !== undefined) {
          element.style[name_1] = value;
        }
      }
      elements[key] = element;
      container.append(document.createElement('br'), element);
    }
    // Then measure the created elements
    for (var _g = 0, _h = Object.keys(presets); _g < _h.length; _g++) {
      var key = _h[_g];
      sizes[key] = elements[key].getBoundingClientRect().width;
    }
    return sizes;
  });
}
/**
 * Creates a DOM environment that provides the most natural font available, including Android OS font.
 * Measurements of the elements are zoom-independent.
 * Don't put a content to measure inside an absolutely positioned element.
 */
function withNaturalFonts(action, containerWidthPx) {
  if (containerWidthPx === void 0) {
    containerWidthPx = 4000;
  }
  /*
   * Requirements for Android Chrome to apply the system font size to a text inside an iframe:
   * - The iframe mustn't have a \`display: none;\` style;
   * - The text mustn't be positioned absolutely;
   * - The text block must be wide enough.
   *   2560px on some devices in portrait orientation for the biggest font size option (32px);
   * - There must be much enough text to form a few lines (I don't know the exact numbers);
   * - The text must have the \`text-size-adjust: none\` style. Otherwise the text will scale in "Desktop site" mode;
   *
   * Requirements for Android Firefox to apply the system font size to a text inside an iframe:
   * - The iframe document must have a header: \`<meta name="viewport" content="width=device-width, initial-scale=1" />\`.
   *   The only way to set it is to use the \`srcdoc\` attribute of the iframe;
   * - The iframe content must get loaded before adding extra content with JavaScript;
   *
   * https://example.com as the iframe target always inherits Android font settings so it can be used as a reference.
   *
   * Observations on how page zoom affects the measurements:
   * - macOS Safari 11.1, 12.1, 13.1, 14.0: zoom reset + offsetWidth = 100% reliable;
   * - macOS Safari 11.1, 12.1, 13.1, 14.0: zoom reset + getBoundingClientRect = 100% reliable;
   * - macOS Safari 14.0: offsetWidth = 5% fluctuation;
   * - macOS Safari 14.0: getBoundingClientRect = 5% fluctuation;
   * - iOS Safari 9, 10, 11.0, 12.0: haven't found a way to zoom a page (pinch doesn't change layout);
   * - iOS Safari 13.1, 14.0: zoom reset + offsetWidth = 100% reliable;
   * - iOS Safari 13.1, 14.0: zoom reset + getBoundingClientRect = 100% reliable;
   * - iOS Safari 14.0: offsetWidth = 100% reliable;
   * - iOS Safari 14.0: getBoundingClientRect = 100% reliable;
   * - Chrome 42, 65, 80, 87: zoom 1/devicePixelRatio + offsetWidth = 1px fluctuation;
   * - Chrome 42, 65, 80, 87: zoom 1/devicePixelRatio + getBoundingClientRect = 100% reliable;
   * - Chrome 87: offsetWidth = 1px fluctuation;
   * - Chrome 87: getBoundingClientRect = 0.7px fluctuation;
   * - Firefox 48, 51: offsetWidth = 10% fluctuation;
   * - Firefox 48, 51: getBoundingClientRect = 10% fluctuation;
   * - Firefox 52, 53, 57, 62, 66, 67, 68, 71, 75, 80, 84: offsetWidth = width 100% reliable, height 10% fluctuation;
   * - Firefox 52, 53, 57, 62, 66, 67, 68, 71, 75, 80, 84: getBoundingClientRect = width 100% reliable, height 10%
   *   fluctuation;
   * - Android Chrome 86: haven't found a way to zoom a page (pinch doesn't change layout);
   * - Android Firefox 84: font size in accessibility settings changes all the CSS sizes, but offsetWidth and
   *   getBoundingClientRect keep measuring with regular units, so the size reflects the font size setting and doesn't
   *   fluctuate;
   * - IE 11, Edge 18: zoom 1/devicePixelRatio + offsetWidth = 100% reliable;
   * - IE 11, Edge 18: zoom 1/devicePixelRatio + getBoundingClientRect = reflects the zoom level;
   * - IE 11, Edge 18: offsetWidth = 100% reliable;
   * - IE 11, Edge 18: getBoundingClientRect = 100% reliable;
   */
  return withIframe(function (_, iframeWindow) {
    var iframeDocument = iframeWindow.document;
    var iframeBody = iframeDocument.body;
    var bodyStyle = iframeBody.style;
    bodyStyle.width = "".concat(containerWidthPx, "px");
    bodyStyle.webkitTextSizeAdjust = bodyStyle.textSizeAdjust = 'none';
    // See the big comment above
    if (isChromium()) {
      iframeBody.style.zoom = "".concat(1 / iframeWindow.devicePixelRatio);
    } else if (isWebKit()) {
      iframeBody.style.zoom = 'reset';
    }
    // See the big comment above
    var linesOfText = iframeDocument.createElement('div');
    linesOfText.textContent = __spreadArray([], Array(containerWidthPx / 20 << 0), true).map(function () {
      return 'word';
    }).join(' ');
    iframeBody.appendChild(linesOfText);
    return action(iframeDocument, iframeBody);
  }, '<!doctype html><html><head><meta name="viewport" content="width=device-width, initial-scale=1">');
}
function isPdfViewerEnabled() {
  return navigator.pdfViewerEnabled;
}

/**
 * Unlike most other architectures, on x86/x86-64 when floating-point instructions
 * have no NaN arguments, but produce NaN output, the output NaN has sign bit set.
 * We use it to distinguish x86/x86-64 from other architectures, by doing subtraction
 * of two infinities (must produce NaN per IEEE 754 standard).
 *
 * See https://codebrowser.bddppq.com/pytorch/pytorch/third_party/XNNPACK/src/init.c.html#79
 */
function getArchitecture() {
  var f = new Float32Array(1);
  var u8 = new Uint8Array(f.buffer);
  f[0] = Infinity;
  f[0] = f[0] - f[0];
  return u8[3];
}

/**
 * The return type is a union instead of the enum, because it's too challenging to embed the const enum into another
 * project. Turning it into a union is a simple and an elegant solution.
 */
function getApplePayState() {
  var ApplePaySession = window.ApplePaySession;
  if (typeof (ApplePaySession === null || ApplePaySession === void 0 ? void 0 : ApplePaySession.canMakePayments) !== 'function') {
    return -1 /* ApplePayState.NoAPI */;
  }

  if (willPrintConsoleError()) {
    return -3 /* ApplePayState.NotAvailableInFrame */;
  }

  try {
    return ApplePaySession.canMakePayments() ? 1 /* ApplePayState.Enabled */ : 0 /* ApplePayState.Disabled */;
  } catch (error) {
    return getStateFromError(error);
  }
}
/**
 * Starting from Safari 15 calling \`ApplePaySession.canMakePayments()\` produces this error message when FingerprintJS
 * runs in an iframe with a cross-origin parent page, and the iframe on that page has no allow="payment *" attribute:
 *   Feature policy 'Payment' check failed for element with origin 'https://example.com' and allow attribute ''.
 * This function checks whether the error message is expected.
 *
 * We check for cross-origin parents, which is prone to false-positive results. Instead, we should check for allowed
 * feature/permission, but we can't because none of these API works in Safari yet:
 *   navigator.permissions.query({ name: ‘payment' })
 *   navigator.permissions.query({ name: ‘payment-handler' })
 *   document.featurePolicy
 */
var willPrintConsoleError = isAnyParentCrossOrigin;
function getStateFromError(error) {
  // See full expected error messages in the test
  if (error instanceof Error && error.name === 'InvalidAccessError' && /\\bfrom\\b.*\\binsecure\\b/i.test(error.message)) {
    return -2 /* ApplePayState.NotAvailableInInsecureContext */;
  }

  throw error;
}

/**
 * Checks whether the Safari's Privacy Preserving Ad Measurement setting is on.
 * The setting is on when the value is not undefined.
 * A.k.a. private click measurement, privacy-preserving ad attribution.
 *
 * Unfortunately, it doesn't work in mobile Safari.
 * Probably, it will start working in mobile Safari or stop working in desktop Safari later.
 * We've found no way to detect the setting state in mobile Safari. Help wanted.
 *
 * @see https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/
 * @see https://developer.apple.com/videos/play/wwdc2021/10033
 */
function getPrivateClickMeasurement() {
  var _a;
  var link = document.createElement('a');
  var sourceId = (_a = link.attributionSourceId) !== null && _a !== void 0 ? _a : link.attributionsourceid;
  return sourceId === undefined ? undefined : String(sourceId);
}

/** WebGl context is not available */
var STATUS_NO_GL_CONTEXT = -1;
/** WebGL context \`getParameter\` method is not a function */
var STATUS_GET_PARAMETER_NOT_A_FUNCTION = -2;
var validContextParameters = new Set([10752, 2849, 2884, 2885, 2886, 2928, 2929, 2930, 2931, 2932, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2978, 3024, 3042, 3088, 3089, 3106, 3107, 32773, 32777, 32777, 32823, 32824, 32936, 32937, 32938, 32939, 32968, 32969, 32970, 32971, 3317, 33170, 3333, 3379, 3386, 33901, 33902, 34016, 34024, 34076, 3408, 3410, 3411, 3412, 3413, 3414, 3415, 34467, 34816, 34817, 34818, 34819, 34877, 34921, 34930, 35660, 35661, 35724, 35738, 35739, 36003, 36004, 36005, 36347, 36348, 36349, 37440, 37441, 37443, 7936, 7937, 7938
// SAMPLE_ALPHA_TO_COVERAGE (32926) and SAMPLE_COVERAGE (32928) are excluded because they trigger a console warning
// in IE, Chrome ≤ 59 and Safari ≤ 13 and give no entropy.
]);

var validExtensionParams = new Set([34047, 35723, 36063, 34852, 34853, 34854, 34229, 36392, 36795, 38449 // MAX_VIEWS_OVR
]);

var shaderTypes = ['FRAGMENT_SHADER', 'VERTEX_SHADER'];
var precisionTypes = ['LOW_FLOAT', 'MEDIUM_FLOAT', 'HIGH_FLOAT', 'LOW_INT', 'MEDIUM_INT', 'HIGH_INT'];
var rendererInfoExtensionName = 'WEBGL_debug_renderer_info';
var polygonModeExtensionName = 'WEBGL_polygon_mode';
/**
 * Gets the basic and simple WebGL parameters
 */
function getWebGlBasics(_a) {
  var _b, _c, _d, _e, _f, _g;
  var cache = _a.cache;
  var gl = getWebGLContext(cache);
  if (!gl) {
    return STATUS_NO_GL_CONTEXT;
  }
  if (!isValidParameterGetter(gl)) {
    return STATUS_GET_PARAMETER_NOT_A_FUNCTION;
  }
  var debugExtension = shouldAvoidDebugRendererInfo() ? null : gl.getExtension(rendererInfoExtensionName);
  return {
    version: ((_b = gl.getParameter(gl.VERSION)) === null || _b === void 0 ? void 0 : _b.toString()) || '',
    vendor: ((_c = gl.getParameter(gl.VENDOR)) === null || _c === void 0 ? void 0 : _c.toString()) || '',
    vendorUnmasked: debugExtension ? (_d = gl.getParameter(debugExtension.UNMASKED_VENDOR_WEBGL)) === null || _d === void 0 ? void 0 : _d.toString() : '',
    renderer: ((_e = gl.getParameter(gl.RENDERER)) === null || _e === void 0 ? void 0 : _e.toString()) || '',
    rendererUnmasked: debugExtension ? (_f = gl.getParameter(debugExtension.UNMASKED_RENDERER_WEBGL)) === null || _f === void 0 ? void 0 : _f.toString() : '',
    shadingLanguageVersion: ((_g = gl.getParameter(gl.SHADING_LANGUAGE_VERSION)) === null || _g === void 0 ? void 0 : _g.toString()) || ''
  };
}
/**
 * Gets the advanced and massive WebGL parameters and extensions
 */
function getWebGlExtensions(_a) {
  var cache = _a.cache;
  var gl = getWebGLContext(cache);
  if (!gl) {
    return STATUS_NO_GL_CONTEXT;
  }
  if (!isValidParameterGetter(gl)) {
    return STATUS_GET_PARAMETER_NOT_A_FUNCTION;
  }
  var extensions = gl.getSupportedExtensions();
  var contextAttributes = gl.getContextAttributes();
  var unsupportedExtensions = [];
  // Features
  var attributes = [];
  var parameters = [];
  var extensionParameters = [];
  var shaderPrecisions = [];
  // Context attributes
  if (contextAttributes) {
    for (var _i = 0, _b = Object.keys(contextAttributes); _i < _b.length; _i++) {
      var attributeName = _b[_i];
      attributes.push("".concat(attributeName, "=").concat(contextAttributes[attributeName]));
    }
  }
  // Context parameters
  var constants = getConstantsFromPrototype(gl);
  for (var _c = 0, constants_1 = constants; _c < constants_1.length; _c++) {
    var constant = constants_1[_c];
    var code = gl[constant];
    parameters.push("".concat(constant, "=").concat(code).concat(validContextParameters.has(code) ? "=".concat(gl.getParameter(code)) : ''));
  }
  // Extension parameters
  if (extensions) {
    for (var _d = 0, extensions_1 = extensions; _d < extensions_1.length; _d++) {
      var name_1 = extensions_1[_d];
      if (name_1 === rendererInfoExtensionName && shouldAvoidDebugRendererInfo() || name_1 === polygonModeExtensionName && shouldAvoidPolygonModeExtensions()) {
        continue;
      }
      var extension = gl.getExtension(name_1);
      if (!extension) {
        unsupportedExtensions.push(name_1);
        continue;
      }
      for (var _e = 0, _f = getConstantsFromPrototype(extension); _e < _f.length; _e++) {
        var constant = _f[_e];
        var code = extension[constant];
        extensionParameters.push("".concat(constant, "=").concat(code).concat(validExtensionParams.has(code) ? "=".concat(gl.getParameter(code)) : ''));
      }
    }
  }
  // Shader precision
  for (var _g = 0, shaderTypes_1 = shaderTypes; _g < shaderTypes_1.length; _g++) {
    var shaderType = shaderTypes_1[_g];
    for (var _h = 0, precisionTypes_1 = precisionTypes; _h < precisionTypes_1.length; _h++) {
      var precisionType = precisionTypes_1[_h];
      var shaderPrecision = getShaderPrecision(gl, shaderType, precisionType);
      shaderPrecisions.push("".concat(shaderType, ".").concat(precisionType, "=").concat(shaderPrecision.join(',')));
    }
  }
  // Postprocess
  extensionParameters.sort();
  parameters.sort();
  return {
    contextAttributes: attributes,
    parameters: parameters,
    shaderPrecisions: shaderPrecisions,
    extensions: extensions,
    extensionParameters: extensionParameters,
    unsupportedExtensions: unsupportedExtensions
  };
}
/**
 * This function usually takes the most time to execute in all the sources, therefore we cache its result.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function getWebGLContext(cache) {
  if (cache.webgl) {
    return cache.webgl.context;
  }
  var canvas = document.createElement('canvas');
  var context;
  canvas.addEventListener('webglCreateContextError', function () {
    return context = undefined;
  });
  for (var _i = 0, _a = ['webgl', 'experimental-webgl']; _i < _a.length; _i++) {
    var type = _a[_i];
    try {
      context = canvas.getContext(type);
    } catch (_b) {
      // Ok, continue
    }
    if (context) {
      break;
    }
  }
  cache.webgl = {
    context: context
  };
  return context;
}
/**
 * https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat
 * https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat
 * https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.12
 */
function getShaderPrecision(gl, shaderType, precisionType) {
  var shaderPrecision = gl.getShaderPrecisionFormat(gl[shaderType], gl[precisionType]);
  return shaderPrecision ? [shaderPrecision.rangeMin, shaderPrecision.rangeMax, shaderPrecision.precision] : [];
}
function getConstantsFromPrototype(obj) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var keys = Object.keys(obj.__proto__);
  return keys.filter(isConstantLike);
}
function isConstantLike(key) {
  return typeof key === 'string' && !key.match(/[^A-Z0-9_x]/);
}
/**
 * Some browsers print a console warning when the WEBGL_debug_renderer_info extension is requested.
 * JS Agent aims to avoid printing messages to console, so we avoid this extension in that browsers.
 */
function shouldAvoidDebugRendererInfo() {
  return isGecko();
}
/**
 * Some browsers print a console warning when the WEBGL_polygon_mode extension is requested.
 * JS Agent aims to avoid printing messages to console, so we avoid this extension in that browsers.
 */
function shouldAvoidPolygonModeExtensions() {
  return isChromium() || isWebKit();
}
/**
 * Some unknown browsers have no \`getParameter\` method
 */
function isValidParameterGetter(gl) {
  return typeof gl.getParameter === 'function';
}
function getAudioContextBaseLatency() {
  var _a;
  // The signal emits warning in Chrome and Firefox, therefore it is enabled on Safari where it doesn't produce warning
  // and on Android where it's less visible
  var isAllowedPlatform = isAndroid() || isWebKit();
  if (!isAllowedPlatform) {
    return -2 /* SpecialFingerprint.Disabled */;
  }

  if (!window.AudioContext) {
    return -1 /* SpecialFingerprint.NotSupported */;
  }

  return (_a = new AudioContext().baseLatency) !== null && _a !== void 0 ? _a : -1 /* SpecialFingerprint.NotSupported */;
}

/**
 * The list of entropy sources used to make visitor identifiers.
 *
 * This value isn't restricted by Semantic Versioning, i.e. it may be changed without bumping minor or major version of
 * this package.
 *
 * Note: Rollup and Webpack are smart enough to remove unused properties of this object during tree-shaking, so there is
 * no need to export the sources individually.
 */
var sources = {
  // READ FIRST:
  // See https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#how-to-make-an-entropy-source
  // to learn how entropy source works and how to make your own.
  // The sources run in this exact order.
  // The asynchronous sources are at the start to run in parallel with other sources.
  fonts: getFonts,
  domBlockers: getDomBlockers,
  fontPreferences: getFontPreferences,
  audio: getAudioFingerprint,
  screenFrame: getScreenFrame,
  canvas: getCanvasFingerprint,
  osCpu: getOsCpu,
  languages: getLanguages,
  colorDepth: getColorDepth,
  deviceMemory: getDeviceMemory,
  screenResolution: getScreenResolution,
  hardwareConcurrency: getHardwareConcurrency,
  timezone: getTimezone,
  sessionStorage: getSessionStorage,
  localStorage: getLocalStorage,
  indexedDB: getIndexedDB,
  openDatabase: getOpenDatabase,
  cpuClass: getCpuClass,
  platform: getPlatform,
  plugins: getPlugins,
  touchSupport: getTouchSupport,
  vendor: getVendor,
  vendorFlavors: getVendorFlavors,
  cookiesEnabled: areCookiesEnabled,
  colorGamut: getColorGamut,
  invertedColors: areColorsInverted,
  forcedColors: areColorsForced,
  monochrome: getMonochromeDepth,
  contrast: getContrastPreference,
  reducedMotion: isMotionReduced,
  reducedTransparency: isTransparencyReduced,
  hdr: isHDR,
  math: getMathFingerprint,
  pdfViewerEnabled: isPdfViewerEnabled,
  architecture: getArchitecture,
  applePay: getApplePayState,
  privateClickMeasurement: getPrivateClickMeasurement,
  audioBaseLatency: getAudioContextBaseLatency,
  // Some sources can affect other sources (e.g. WebGL can affect canvas), so it's important to run these sources
  // after other sources.
  webGlBasics: getWebGlBasics,
  webGlExtensions: getWebGlExtensions
};
/**
 * Loads the built-in entropy sources.
 * Returns a function that collects the entropy components to make the visitor identifier.
 */
function loadBuiltinSources(options) {
  return loadSources(sources, options, []);
}
var commentTemplate = '$ if upgrade to Pro: https://fpjs.dev/pro';
function getConfidence(components) {
  var openConfidenceScore = getOpenConfidenceScore(components);
  var proConfidenceScore = deriveProConfidenceScore(openConfidenceScore);
  return {
    score: openConfidenceScore,
    comment: commentTemplate.replace(/\\$/g, "".concat(proConfidenceScore))
  };
}
function getOpenConfidenceScore(components) {
  // In order to calculate the true probability of the visitor identifier being correct, we need to know the number of
  // website visitors (the higher the number, the less the probability because the fingerprint entropy is limited).
  // JS agent doesn't know the number of visitors, so we can only do an approximate assessment.
  if (isAndroid()) {
    return 0.4;
  }
  // Safari (mobile and desktop)
  if (isWebKit()) {
    return isDesktopWebKit() && !(isWebKit616OrNewer() && isSafariWebKit()) ? 0.5 : 0.3;
  }
  var platform = 'value' in components.platform ? components.platform.value : '';
  // Windows
  if (/^Win/.test(platform)) {
    // The score is greater than on macOS because of the higher variety of devices running Windows.
    // Chrome provides more entropy than Firefox according too
    // https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22platform%22%3A%7B%22%24in%22%3A%5B%22Windows%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-11%22%2C%22dateEnd%22%3A%222020-10%22%2C%22segments%22%3A%22-1000%22%7D
    // So we assign the same score to them.
    return 0.6;
  }
  // macOS
  if (/^Mac/.test(platform)) {
    // Chrome provides more entropy than Safari and Safari provides more entropy than Firefox.
    // Chrome is more popular than Safari and Safari is more popular than Firefox according to
    // https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22platform%22%3A%7B%22%24in%22%3A%5B%22Mac%20OS%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-11%22%2C%22dateEnd%22%3A%222020-10%22%2C%22segments%22%3A%22-1000%22%7D
    // So we assign the same score to them.
    return 0.5;
  }
  // Another platform, e.g. a desktop Linux. It's rare, so it should be pretty unique.
  return 0.7;
}
function deriveProConfidenceScore(openConfidenceScore) {
  return round(0.99 + 0.01 * openConfidenceScore, 0.0001);
}
function componentsToCanonicalString(components) {
  var result = '';
  for (var _i = 0, _a = Object.keys(components).sort(); _i < _a.length; _i++) {
    var componentKey = _a[_i];
    var component = components[componentKey];
    var value = 'error' in component ? 'error' : JSON.stringify(component.value);
    result += "".concat(result ? '|' : '').concat(componentKey.replace(/([:|\\\\])/g, '\\\\$1'), ":").concat(value);
  }
  return result;
}
function componentsToDebugString(components) {
  return JSON.stringify(components, function (_key, value) {
    if (value instanceof Error) {
      return errorToObject(value);
    }
    return value;
  }, 2);
}
function hashComponents(components) {
  return x64hash128(componentsToCanonicalString(components));
}
/**
 * Makes a GetResult implementation that calculates the visitor id hash on demand.
 * Designed for optimisation.
 */
function makeLazyGetResult(components) {
  var visitorIdCache;
  // This function runs very fast, so there is no need to make it lazy
  var confidence = getConfidence(components);
  // A plain class isn't used because its getters and setters aren't enumerable.
  return {
    get visitorId() {
      if (visitorIdCache === undefined) {
        visitorIdCache = hashComponents(this.components);
      }
      return visitorIdCache;
    },
    set visitorId(visitorId) {
      visitorIdCache = visitorId;
    },
    confidence: confidence,
    components: components,
    version: version
  };
}
/**
 * A delay is required to ensure consistent entropy components.
 * See https://github.com/fingerprintjs/fingerprintjs/issues/254
 * and https://github.com/fingerprintjs/fingerprintjs/issues/307
 * and https://github.com/fingerprintjs/fingerprintjs/commit/945633e7c5f67ae38eb0fea37349712f0e669b18
 */
function prepareForSources(delayFallback) {
  if (delayFallback === void 0) {
    delayFallback = 50;
  }
  // A proper deadline is unknown. Let it be twice the fallback timeout so that both cases have the same average time.
  return requestIdleCallbackIfAvailable(delayFallback, delayFallback * 2);
}
/**
 * The function isn't exported from the index file to not allow to call it without \`load()\`.
 * The hiding gives more freedom for future non-breaking updates.
 *
 * A factory function is used instead of a class to shorten the attribute names in the minified code.
 * Native private class fields could've been used, but TypeScript doesn't allow them with \`"target": "es5"\`.
 */
function makeAgent(getComponents, debug) {
  var creationTime = Date.now();
  return {
    get: function get(options) {
      return __awaiter(this, void 0, void 0, function () {
        var startTime, components, result;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              startTime = Date.now();
              return [4 /*yield*/, getComponents()];
            case 1:
              components = _a.sent();
              result = makeLazyGetResult(components);
              if (debug || (options === null || options === void 0 ? void 0 : options.debug)) {
                // console.log is ok here because it's under a debug clause
                // eslint-disable-next-line no-console
                console.log("Copy the text below to get the debug data:\\n\\n\`\`\`\\nversion: ".concat(result.version, "\\nuserAgent: ").concat(navigator.userAgent, "\\ntimeBetweenLoadAndGet: ").concat(startTime - creationTime, "\\nvisitorId: ").concat(result.visitorId, "\\ncomponents: ").concat(componentsToDebugString(components), "\\n\`\`\`"));
              }
              return [2 /*return*/, result];
          }
        });
      });
    }
  };
}
/**
 * Sends an unpersonalized AJAX request to collect installation statistics
 */
function monitor() {
  // The FingerprintJS CDN (https://github.com/fingerprintjs/cdn) replaces \`window.__fpjs_d_m\` with \`true\`
  if (window.__fpjs_d_m || Math.random() >= 0.001) {
    return;
  }
  try {
    var request = new XMLHttpRequest();
    request.open('get', "https://m1.openfpcdn.io/fingerprintjs/v".concat(version, "/npm-monitoring"), true);
    request.send();
  } catch (error) {
    // console.error is ok here because it's an unexpected error handler
    // eslint-disable-next-line no-console
    console.error(error);
  }
}
/**
 * Builds an instance of Agent and waits a delay required for a proper operation.
 */
function load(options) {
  var _a;
  if (options === void 0) {
    options = {};
  }
  return __awaiter(this, void 0, void 0, function () {
    var delayFallback, debug, getComponents;
    return __generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          if ((_a = options.monitoring) !== null && _a !== void 0 ? _a : true) {
            monitor();
          }
          delayFallback = options.delayFallback, debug = options.debug;
          return [4 /*yield*/, prepareForSources(delayFallback)];
        case 1:
          _b.sent();
          getComponents = loadBuiltinSources({
            cache: {},
            debug: debug
          });
          return [2 /*return*/, makeAgent(getComponents, debug)];
      }
    });
  });
}

var getCanvasId = function getCanvasId(canvas) {
  var _canvas = null;
  if (typeof canvas === "string" && canvas.length > 0) {
    _canvas = document.querySelector(canvas);
    if (!_canvas) {
      return canvas.replace(/^#/, "");
    }
  } else if (canvas instanceof HTMLCanvasElement) {
    _canvas = canvas;
  }
  if (!_canvas) return;
  if (!_canvas.id) _canvas.id = Math.random().toString(16).slice(2);
  return _canvas.id;
};
var createMxDraw = function createMxDraw(canvas, middlePan, map, webgl1, mxcadobj) {
  return new Promise(function (resolve, reject) {
    try {
      MxFun.createMxObject({
        canvasId: getCanvasId(canvas),
        isCPPMxCAD: true,
        mapBox: map,
        callback: function callback(mxDraw) {
          mxDraw.initRendererParam({
            webgl2: webgl1 !== true
          });
          mxDraw.setViewMovementMethod(middlePan === void 0 ? true : middlePan);
          if (mxcadobj) {
            mxcadobj.callEvent("init_before_mxdraw", mxDraw);
          }
          mxDraw.addEvent("initObject", function () {
            if (mxDraw.isWebgl2()) {
              console.log("MxTip: use webgl2");
            } else {
              console.log("MxTip: use webgl1");
            }
            resolve(mxDraw);
          });
        }
      });
    } catch (e) {
      reject(e);
    }
  });
};
var createMxCadCppObject = function createMxCadCppObject(mxappimp, width, height, canvasId, isWebgl2, mxObjectId, isMapbox, mxcadobj) {
  var mxcadimp = mxappimp.CreateMxDraw(width, height, canvasId, isWebgl2, mxObjectId, isMapbox);
  if (mxcadobj) {
    mxcadobj.init(mxcadimp);
  } else {
    mxcadobj = new McObject(mxcadimp);
  }
  mxcadimp["McObject"] = mxcadobj;
  return mxcadimp["McObject"];
};
function Mx_About() {
  console.log(MxCpp.App.getVersionString());
}
var createMxCad = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(config, mxcadobj) {
    var _ref2, openParameter, networkFonts, fontspath, locateFile, wasmBinary, canvas, onOpenFileComplete, fileUrl, onInit, middlePan, registdata, registfile, authorized_service, viewBackgroundColor, map, multipleSelect, enableUndo, enableIntelliSelect, browse, webgl1, mxDraw, THREE, size, mxCadObj, iCodeVersion, registfileurl, regdataobj, sMxId, win, agent, fetchAttributes;
    return regenerator.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (store.state.MxFun) {
            _context.next = 3;
            break;
          }
          _context.next = 3;
          return loadCoreCode();
        case 3:
          _ref2 = config || {}, openParameter = _ref2.openParameter, networkFonts = _ref2.networkFonts, fontspath = _ref2.fontspath, locateFile = _ref2.locateFile, wasmBinary = _ref2.wasmBinary, canvas = _ref2.canvas, onOpenFileComplete = _ref2.onOpenFileComplete, fileUrl = _ref2.fileUrl, onInit = _ref2.onInit, middlePan = _ref2.middlePan, registdata = _ref2.registdata, registfile = _ref2.registfile, authorized_service = _ref2.authorized_service, viewBackgroundColor = _ref2.viewBackgroundColor, map = _ref2.map, multipleSelect = _ref2.multipleSelect, enableUndo = _ref2.enableUndo, enableIntelliSelect = _ref2.enableIntelliSelect, browse = _ref2.browse, webgl1 = _ref2.webgl1;
          _context.next = 6;
          return loadMxCADassembly(function () {
            return void 0;
          }, locateFile, wasmBinary, fontspath, networkFonts);
        case 6:
          MxFun.initMxCpp(MxCpp);
          MxCADUtility.init();
          MxFun.setIniset({
            EnableIntelliSelect: enableIntelliSelect === void 0 ? true : enableIntelliSelect
          });
          if (enableUndo !== void 0) {
            MxCpp.App.IniSet({
              EnableUndo: enableUndo
            });
          }
          if (viewBackgroundColor) {
            MxCpp.App.setDefaultViewBackgroundColor(viewBackgroundColor.red, viewBackgroundColor.green, viewBackgroundColor.blue);
          }
          if (onInit) onInit();
          if (mxcadobj) {
            mxcadobj.callEvent("init");
          }
          _context.next = 15;
          return createMxDraw(canvas, middlePan, map, webgl1, mxcadobj);
        case 15:
          mxDraw = _context.sent;
          if (multipleSelect !== void 0) {
            mxDraw.setMultipleSelect(multipleSelect);
          }
          if (viewBackgroundColor) {
            mxDraw.setViewColor(viewBackgroundColor.red << 16 | viewBackgroundColor.green << 8 | viewBackgroundColor.blue);
          }
          if (mxcadobj) {
            mxcadobj.callEvent("init_mxdraw", mxDraw);
          }
          THREE = MxFun.getMxFunTHREE();
          size = new THREE.Vector2();
          mxDraw.getRenderer().getSize(size);
          mxCadObj = createMxCadCppObject(MxCpp.App.getImp(), size.width, size.height, mxDraw.getCanvas().id, mxDraw.isWebgl2(), mxDraw.getId(), map ? true : false, mxcadobj);
          iCodeVersion = MxCpp.App.getImp().getCodeVersion();
          if (!(iCodeVersion != 1 && iCodeVersion != 2)) {
            _context.next = 35;
            break;
          }
          if (!(registdata && registdata.length > 0)) {
            _context.next = 29;
            break;
          }
          mxCadObj.initRegist(registdata);
          _context.next = 35;
          break;
        case 29:
          registfileurl = registfile;
          if (!(registfile && registfile.length > 0)) {
            registfileurl = "mxkey.json.frontpage.json";
          }
          _context.next = 33;
          return getJsonFromUrl(registfileurl);
        case 33:
          regdataobj = _context.sent;
          if (regdataobj && regdataobj.registdata) {
            mxCadObj.initRegist(regdataobj.registdata);
            if (authorized_service) {
              if (authorized_service == "same_current_page_url") {
                if (regdataobj.authorized_service && regdataobj.authorized_service.length > 0) {
                  mxCadObj.iniAuthorizedService(regdataobj.authorized_service);
                } else {
                  mxCadObj.iniAuthorizedService(authorized_service);
                }
              } else {
                mxCadObj.iniAuthorizedService(authorized_service);
              }
            } else if (regdataobj.authorized_service && regdataobj.authorized_service.length > 0) {
              mxCadObj.iniAuthorizedService(regdataobj.authorized_service);
            }
          } else {
            if (authorized_service) {
              mxCadObj.iniAuthorizedService(authorized_service);
            }
            console.log("MxTip:empty regist data");
          }
        case 35:
          if (!(iCodeVersion == 3)) {
            _context.next = 48;
            break;
          }
          sMxId = localStorage.getItem("_mx_tmp_id_");
          if (!(!sMxId || sMxId.length == 0)) {
            _context.next = 47;
            break;
          }
          win = window;
          win["__fpjs_d_m"] = true;
          _context.next = 42;
          return load();
        case 42:
          agent = _context.sent;
          _context.next = 45;
          return agent.get();
        case 45:
          sMxId = _context.sent.visitorId;
          localStorage.setItem("_mx_tmp_id_", sMxId);
        case 47:
          MxCpp.App.getImp().addFontsLoadOnInitialization(sMxId, -121);
        case 48:
          mxDraw.initMxCpp(mxCadObj);
          mxDraw.addEvent("openFileComplete", function () {
            onOpenFileComplete && onOpenFileComplete(mxCadObj);
          });
          if (mxCadObj) {
            if (browse === true || browse === 1) {
              mxCadObj.setBrowse(true);
              if (middlePan === void 0) {
                middlePan = 0;
              }
            } else if (browse == 2) {
              if (middlePan === void 0) {
                middlePan = 0;
              }
              MxFun.setIniset({
                ForbiddenDynInput: true,
                EnableCADEntityGripEdit: 0
              });
            }
            if (middlePan !== void 0) {
              mxCadObj.mxdraw.setMouseMiddlePan(middlePan);
            }
            mxCadObj.callEvent("init_mxcad", mxCadObj);
          }
          if (fileUrl) {
            fetchAttributes = 0;
            if (openParameter && openParameter) {
              fetchAttributes = openParameter;
            }
            mxCadObj.openWebFile(fileUrl, void 0, true, openParameter, fetchAttributes);
          }
          return _context.abrupt("return", mxCadObj);
        case 53:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function createMxCad(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var ColorMethod = /* @__PURE__ */function (ColorMethod2) {
  ColorMethod2[ColorMethod2["kByLayer"] = 1] = "kByLayer";
  ColorMethod2[ColorMethod2["kByBlock"] = 2] = "kByBlock";
  ColorMethod2[ColorMethod2["kByColor"] = 3] = "kByColor";
  ColorMethod2[ColorMethod2["kByACI"] = 4] = "kByACI";
  ColorMethod2[ColorMethod2["kByPen"] = 5] = "kByPen";
  ColorMethod2[ColorMethod2["kForeground"] = 6] = "kForeground";
  ColorMethod2[ColorMethod2["kLayerOff"] = 7] = "kLayerOff";
  ColorMethod2[ColorMethod2["kLayerFrozen"] = 8] = "kLayerFrozen";
  ColorMethod2[ColorMethod2["kNone"] = 9] = "kNone";
  return ColorMethod2;
}(ColorMethod || {});
var ColorIndexType = /* @__PURE__ */function (ColorIndexType2) {
  ColorIndexType2[ColorIndexType2["kByblock"] = 0] = "kByblock";
  ColorIndexType2[ColorIndexType2["kRed"] = 1] = "kRed";
  ColorIndexType2[ColorIndexType2["kYellow"] = 2] = "kYellow";
  ColorIndexType2[ColorIndexType2["kGreen"] = 3] = "kGreen";
  ColorIndexType2[ColorIndexType2["KCyan"] = 4] = "KCyan";
  ColorIndexType2[ColorIndexType2["kBlue"] = 5] = "kBlue";
  ColorIndexType2[ColorIndexType2["kMagenta"] = 6] = "kMagenta";
  ColorIndexType2[ColorIndexType2["kWhite"] = 7] = "kWhite";
  ColorIndexType2[ColorIndexType2["kBylayer"] = 256] = "kBylayer";
  return ColorIndexType2;
}(ColorIndexType || {});
var _colorUtils;
var getColorUtils = function getColorUtils() {
  if (!_colorUtils) {
    var THREE = MxFun.getMxFunTHREE();
    _colorUtils = new THREE.Color();
  }
  var isColor = function isColor(ages2) {
    return _typeof$2(ages2[0]) === "object" && ages2[0].isColor;
  };
  var isNumber = function isNumber(ages2) {
    return typeof ages2[0] === "number" && ages2.length === 1;
  };
  var isString = function isString(ages2) {
    return typeof ages2[0] === "string" && ages2.length === 1;
  };
  var isRGB = function isRGB(ages2) {
    return ages2.length === 3;
  };
  for (var _len = arguments.length, ages = new Array(_len), _key = 0; _key < _len; _key++) {
    ages[_key] = arguments[_key];
  }
  if (isRGB(ages)) {
    var _colorUtils2;
    (_colorUtils2 = _colorUtils).setRGB.apply(_colorUtils2, ages);
  } else if (isColor(ages)) {
    var _colorUtils3;
    (_colorUtils3 = _colorUtils).set.apply(_colorUtils3, ages);
  } else if (isNumber(ages)) {
    var _colorUtils4;
    (_colorUtils4 = _colorUtils).set.apply(_colorUtils4, ages);
  } else if (isString(ages)) {
    var _colorUtils5;
    (_colorUtils5 = _colorUtils).set.apply(_colorUtils5, ages);
  }
  return _colorUtils;
};
var setColorIndex = function setColorIndex(mcCmColor) {
  var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MxCpp.App.mcedRGB2Index(mcCmColor.red, mcCmColor.green, mcCmColor.blue, false);
  if (i === -1) {
    mcCmColor.method = 3 /* kByColor */;
  } else {
    mcCmColor.setColorIndex(i);
  }
  if (i === 7 /* kWhite */) {
    mcCmColor.method = 4 /* kByACI */;
  } else if (i === 0 /* kByblock */) {
    mcCmColor.method = 2 /* kByBlock */;
  } else if (i === 256 /* kBylayer */) {
    mcCmColor.method = 1 /* kByLayer */;
  } else if (i !== -1) {
    mcCmColor.method = 4 /* kByACI */;
  }

  mcCmColor.colorIndex = i;
};
var createMcCmColor = function createMcCmColor() {
  var mcCmColor = new McCmColor();
  for (var _len2 = arguments.length, ages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    ages[_key2] = arguments[_key2];
  }
  setMcCmColor.apply(void 0, [mcCmColor].concat(ages));
  return mcCmColor;
};
var setMcCmColor = function setMcCmColor(mcCmColor) {
  var isTHREEColorAges = function isTHREEColorAges(ages2) {
    return ages2.length > 1 || _typeof$2(ages2[0]) === "object" && ages2[0].isColor || typeof ages2[0] === "string" || typeof ages2[0] === "number";
  };
  var isMcCmColor = function isMcCmColor(ages2) {
    return _typeof$2(ages2[0]) === "object" && !(ages2[0] && ages2[0].isColor);
  };
  for (var _len3 = arguments.length, ages = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    ages[_key3 - 1] = arguments[_key3];
  }
  if (isTHREEColorAges(ages)) {
    var _getColorUtils = getColorUtils.apply(void 0, ages),
      r = _getColorUtils.r,
      g = _getColorUtils.g,
      b = _getColorUtils.b;
    mcCmColor.red = r * 255;
    mcCmColor.green = g * 255;
    mcCmColor.blue = b * 255;
  }
  if (isMcCmColor(ages)) {
    mcCmColor = Object.assign(mcCmColor, ages[0]);
  }
  setColorIndex(mcCmColor);
};

function drawText() {
  return _drawText.apply(this, arguments);
}
function _drawText() {
  _drawText = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
    var height, text, position, angle, createText, getStr, _text, getPoint, point, getDist, _height, getAngle, val, mcText, mxcad, idObj;
    return regenerator.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          createText = function createText() {
            var mcText2 = new McDbText();
            mcText2.height = height || 100;
            mcText2.textString = text || "";
            mcText2.position = position || new McGePoint3d();
            mcText2.trueColor = new McCmColor(MxCpp.getCurrentMxCAD().getCurrentDatabaseDrawColor());
            mcText2.rotation = angle || 0;
            return mcText2;
          };
          getStr = new MxCADUiPrString();
          getStr.setMessage("\\u8F93\\u5165\\u6587\\u5B57\\u5185\\u5BB9");
          _context.next = 5;
          return getStr.go();
        case 5:
          _text = _context.sent;
          if (_text) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return");
        case 8:
          text = _text;
          getPoint = new MxCADUiPrPoint();
          getPoint.clearLastInputPoint();
          getPoint.setMessage("\\u6307\\u5B9A\\u6587\\u5B57\\u4F4D\\u7F6E");
          getPoint.setUserDraw(function (pt, pw) {
            position = pt;
            pw.drawMcDbEntity(createText());
          });
          _context.next = 15;
          return getPoint.go();
        case 15:
          point = _context.sent;
          if (point) {
            _context.next = 18;
            break;
          }
          return _context.abrupt("return");
        case 18:
          position = point;
          getDist = new MxCADUiPrDist();
          getDist.setBasePt(position);
          getDist.setMessage(_ML_String("Mx_Text_Height", "\\u6307\\u5B9A\\u6587\\u5B57\\u9AD8\\u5EA6"));
          getDist.setUserDraw(function (pt, pw) {
            if (position) height = pt.distanceTo(position);
            pw.drawMcDbEntity(createText());
          });
          _context.next = 25;
          return getDist.go();
        case 25:
          _height = _context.sent;
          if (_height) {
            _context.next = 28;
            break;
          }
          return _context.abrupt("return");
        case 28:
          height = _height;
          getAngle = new MxCADUiPrAngle();
          getAngle.setBasePt(position);
          getAngle.clearLastInputPoint();
          getAngle.setMessage(_ML_String("Mx_Text_Angle", "\\u6307\\u5B9A\\u6587\\u5B57\\u89D2\\u5EA6"));
          getAngle.setUserDraw(function (pt, pw) {
            if (position) angle = angleTo(pt.x, pt.y, position.x, position.y);
            pw.drawMcDbEntity(createText());
          });
          _context.next = 36;
          return getAngle.go();
        case 36:
          val = _context.sent;
          if (val !== null && getAngle.getDetailedResult() === 8) {
            angle = val;
          }
          mcText = createText();
          mxcad = MxCpp.getCurrentMxCAD();
          idObj = mxcad.drawEntity(mcText);
          mxcad.updateDisplay();
          return _context.abrupt("return", idObj);
        case 43:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _drawText.apply(this, arguments);
}

function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct$3()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf$1(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }
function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function createParallelLines(line, distance) {
  var dirVec = line.endPoint.sub(line.startPoint).normalize();
  var normalVec = new McGeVector3d(-dirVec.y, dirVec.x, 0);
  var offsetVec = normalVec.mult(distance);
  var parallel1Start = line.startPoint.clone().addvec(offsetVec);
  var parallel1End = line.endPoint.clone().addvec(offsetVec);
  var parallel2Start = line.startPoint.clone().subvec(offsetVec);
  var parallel2End = line.endPoint.clone().subvec(offsetVec);
  var line1 = new McDbLine(parallel1Start, parallel1End);
  var line2 = new McDbLine(parallel2Start, parallel2End);
  return [line1, line2];
}
function createOffsetShapes(shape, distance, pt) {
  var getOffsetCircle = function getOffsetCircle(shape2) {
    return [_construct(McDbCircle, _toConsumableArray(shape2.center.toVector3().toArray()).concat([Math.max(0, shape2.radius - distance)])), _construct(McDbCircle, _toConsumableArray(shape2.center.toVector3().toArray()).concat([shape2.radius + distance]))];
  };
  if (shape instanceof McDbPolyline && pt) {
    var _ref = selectLineSegmentFromPolylineByPoint(shape, pt, 0.1) || {},
      start = _ref.start,
      end = _ref.end,
      bulge = _ref.bulge;
    if (!start || !end) return [];
    if (!bulge || bulge === 0) {
      var line = new McDbLine(start, end);
      return createParallelLines(line, distance);
    } else {
      var center = calculateCenter(start, end, bulge);
      var circle = _construct(McDbCircle, _toConsumableArray(center.toVector3().toArray()).concat([center.distanceTo(start)]));
      return getOffsetCircle(circle);
    }
  }
  if (shape instanceof McDbLine) {
    var _createParallelLines = createParallelLines(shape, distance),
      _createParallelLines2 = _slicedToArray$1(_createParallelLines, 2),
      parallel1 = _createParallelLines2[0],
      parallel2 = _createParallelLines2[1];
    return [parallel1, parallel2];
  }
  if (shape instanceof McDbCircle || shape instanceof McDbArc) {
    return getOffsetCircle(shape);
  }
  return [];
}
function findTangentCircles(shape1, shape2, r, pt1, pt2) {
  var offsetShapes1 = createOffsetShapes(shape1, r, pt1);
  var offsetShapes2 = createOffsetShapes(shape2, r, pt2);
  var possibleCenters = [];
  var _iterator = _createForOfIteratorHelper$1(offsetShapes1),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var shape12 = _step.value;
      var _iterator2 = _createForOfIteratorHelper$1(offsetShapes2),
        _step2;
      try {
        var _loop = function _loop() {
          var shape22 = _step2.value;
          var inters = [];
          var intersectMode = shape12 instanceof McDbCircle && shape22 instanceof McDbCircle ? McDb.Intersect.kOnBothOperands : McDb.Intersect.kExtendBoth;
          var intersectPoints = shape12.IntersectWith(shape22, intersectMode);
          intersectPoints.forEach(function (pt) {
            inters.push(pt);
          });
          possibleCenters.push.apply(possibleCenters, inters);
        };
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return possibleCenters;
}
var threePointsToDetermineTheCenterOfTheCircle = function threePointsToDetermineTheCenterOfTheCircle(points) {
  var _points = _slicedToArray$1(points, 3),
    point1 = _points[0],
    point2 = _points[1],
    point3 = _points[2];
  var x1 = point1.x,
    y1 = point1.y,
    z1 = point1.z;
  var x2 = point2.x,
    y2 = point2.y,
    z2 = point2.z;
  var x3 = point3.x,
    y3 = point3.y,
    z3 = point3.z;
  var a1 = y1 * z2 - y2 * z1 - y1 * z3 + y3 * z1 + y2 * z3 - y3 * z2,
    b1 = -(x1 * z2 - x2 * z1 - x1 * z3 + x3 * z1 + x2 * z3 - x3 * z2),
    c1 = x1 * y2 - x2 * y1 - x1 * y3 + x3 * y1 + x2 * y3 - x3 * y2,
    d1 = -(x1 * y2 * z3 - x1 * y3 * z2 - x2 * y1 * z3 + x2 * y3 * z1 + x3 * y1 * z2 - x3 * y2 * z1),
    a2 = 2 * (x2 - x1),
    b2 = 2 * (y2 - y1),
    c2 = 2 * (z2 - z1),
    d2 = x1 * x1 + y1 * y1 + z1 * z1 - x2 * x2 - y2 * y2 - z2 * z2,
    a3 = 2 * (x3 - x1),
    b3 = 2 * (y3 - y1),
    c3 = 2 * (z3 - z1),
    d3 = x1 * x1 + y1 * y1 + z1 * z1 - x3 * x3 - y3 * y3 - z3 * z3,
    cx = -(b1 * c2 * d3 - b1 * c3 * d2 - b2 * c1 * d3 + b2 * c3 * d1 + b3 * c1 * d2 - b3 * c2 * d1) / (a1 * b2 * c3 - a1 * b3 * c2 - a2 * b1 * c3 + a2 * b3 * c1 + a3 * b1 * c2 - a3 * b2 * c1),
    cy = (a1 * c2 * d3 - a1 * c3 * d2 - a2 * c1 * d3 + a2 * c3 * d1 + a3 * c1 * d2 - a3 * c2 * d1) / (a1 * b2 * c3 - a1 * b3 * c2 - a2 * b1 * c3 + a2 * b3 * c1 + a3 * b1 * c2 - a3 * b2 * c1),
    cz = -(a1 * b2 * d3 - a1 * b3 * d2 - a2 * b1 * d3 + a2 * b3 * d1 + a3 * b1 * d2 - a3 * b2 * d1) / (a1 * b2 * c3 - a1 * b3 * c2 - a2 * b1 * c3 + a2 * b3 * c1 + a3 * b1 * c2 - a3 * b2 * c1);
  return new McGePoint3d(cx, cy, cz);
};
function drawCircle() {
  return _drawCircle.apply(this, arguments);
}
function _drawCircle() {
  _drawCircle = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
    var getPoint, circle, drawColor, drawMethod, isRadius, center, radius, point1, point2, point3, endPoint1, endPoint2, resbuf, _loop2, _ret;
    return regenerator.wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          circle = new McDbCircle();
          drawColor = MxCpp.getCurrentMxCAD().getCurrentDatabaseDrawColor();
          circle.trueColor = new McCmColor(drawColor);
          resbuf = new MxCADResbuf();
          resbuf.AddMcDbEntityTypes("ARC,LINE,LWPOLYLINE,CIRCLE");
          _loop2 = /*#__PURE__*/regenerator.mark(function _loop2() {
            var point, getDist, _radius, diameter, center2, circle2, pt1, entId1, ent1, pt2, entId2, ent2, _getDist, radius2, centers, _centers, _center, _circle, getPoint2, getCenter, pt, _centers2, _center2, _circle2, _center3, _circle3;
            return regenerator.wrap(function _loop2$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (typeof drawMethod === "undefined") {
                    getPoint.setKeyWords("[\\u4E09\\u70B9(3P)/\\u4E24\\u70B9(2P)/\\u5207\\u70B9\\u3001\\u5207\\u70B9\\u3001\\u534A\\u5F84(T)]");
                    drawMethod = "default";
                  }
                  if (!(drawMethod === "default")) {
                    _context.next = 47;
                    break;
                  }
                  if (center) {
                    _context.next = 19;
                    break;
                  }
                  getPoint.setMessage("\\n\\u6307\\u5B9A\\u5706\\u7684\\u5706\\u5FC3");
                  _context.next = 6;
                  return getPoint.go();
                case 6:
                  point = _context.sent;
                  if (!getPoint.isKeyWordPicked("3P")) {
                    _context.next = 10;
                    break;
                  }
                  drawMethod = "3P";
                  return _context.abrupt("return", 0);
                case 10:
                  if (!getPoint.isKeyWordPicked("2P")) {
                    _context.next = 13;
                    break;
                  }
                  drawMethod = "2P";
                  return _context.abrupt("return", 0);
                case 13:
                  if (!getPoint.isKeyWordPicked("T")) {
                    _context.next = 16;
                    break;
                  }
                  drawMethod = "T";
                  return _context.abrupt("return", 0);
                case 16:
                  if (point) {
                    _context.next = 18;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 18:
                  center = point;
                case 19:
                  if (radius) {
                    _context.next = 44;
                    break;
                  }
                  getDist = new MxCADUiPrDist();
                  getDist.setBasePt(center);
                  if (typeof isRadius === "undefined") {
                    getDist.setKeyWords("[\\u76F4\\u5F84(D)]");
                    isRadius = true;
                  }
                  getDist.setMessage(_ML_String("McDbCircle_Radius", "\\u6307\\u5B9A\\u5706\\u7684" + (isRadius ? "\\u534A\\u5F84" : "\\u76F4\\u5F84")));
                  getDist.setUserDraw(function (currentPoint, pWorldDraw) {
                    if (!center) return;
                    var circle2 = new McDbCircle(center.x, center.y, center.z, isRadius ? center.distanceTo(currentPoint) : center.distanceTo(currentPoint) / 2);
                    pWorldDraw.drawMcDbEntity(circle2);
                    pWorldDraw.drawLine(circle2.center.toVector3(), currentPoint.toVector3());
                  });
                  _context.next = 27;
                  return getDist.go();
                case 27:
                  _radius = _context.sent;
                  if (!getDist.isKeyWordPicked("D")) {
                    _context.next = 40;
                    break;
                  }
                  isRadius = false;
                  getDist.clearLastInputPoint();
                  getDist.setBasePt(center);
                  getDist.setMessage(_ML_String("McDbCircle_Diameter", "\\u6307\\u5B9A\\u5706\\u7684\\u76F4\\u5F84"));
                  getDist.setKeyWords("");
                  _context.next = 36;
                  return getDist.go();
                case 36:
                  diameter = _context.sent;
                  if (diameter) {
                    _context.next = 39;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 39:
                  radius = diameter / 2;
                case 40:
                  if (radius) {
                    _context.next = 44;
                    break;
                  }
                  if (_radius) {
                    _context.next = 43;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 43:
                  radius = _radius;
                case 44:
                  circle.center = center;
                  circle.radius = radius;
                  return _context.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(circle, true)
                  });
                case 47:
                  if (!(drawMethod === "3P")) {
                    _context.next = 77;
                    break;
                  }
                  if (point1) {
                    _context.next = 56;
                    break;
                  }
                  getPoint.setMessage("\\u6307\\u5B9A\\u5706\\u4E0A\\u7684\\u7B2C\\u4E00\\u4E2A\\u70B9");
                  getPoint.setKeyWords("");
                  _context.next = 53;
                  return getPoint.go();
                case 53:
                  point1 = _context.sent;
                  if (point1) {
                    _context.next = 56;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 56:
                  if (point2) {
                    _context.next = 65;
                    break;
                  }
                  getPoint.setMessage("\\u6307\\u5B9A\\u5706\\u4E0A\\u7684\\u7B2C\\u4E8C\\u4E2A\\u70B9");
                  getPoint.setKeyWords("");
                  getPoint.setUserDraw(function (pt, pw) {
                    if (!point1) return;
                    pw.drawLine(point1.toVector3(), pt.toVector3());
                  });
                  _context.next = 62;
                  return getPoint.go();
                case 62:
                  point2 = _context.sent;
                  if (point2) {
                    _context.next = 65;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 65:
                  if (point3) {
                    _context.next = 74;
                    break;
                  }
                  getPoint.setMessage("\\u6307\\u5B9A\\u5706\\u4E0A\\u7684\\u7B2C\\u4E09\\u4E2A\\u70B9");
                  getPoint.setKeyWords("");
                  getPoint.setUserDraw(function (pt, pw) {
                    if (!point1) return;
                    if (!point2) return;
                    var center3 = threePointsToDetermineTheCenterOfTheCircle([point1, point2, pt]);
                    if (center3) {
                      var circle3 = new McDbCircle(center3.x, center3.y, center3.z, center3.distanceTo(point1));
                      pw.drawMcDbEntity(circle3);
                    }
                  });
                  _context.next = 71;
                  return getPoint.go();
                case 71:
                  point3 = _context.sent;
                  if (point3) {
                    _context.next = 74;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 74:
                  center2 = threePointsToDetermineTheCenterOfTheCircle([point1, point2, point3]);
                  circle2 = new McDbCircle(center2.x, center2.y, center2.z, center2.distanceTo(point1));
                  return _context.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(circle2, true)
                  });
                case 77:
                  if (!(drawMethod === "2P")) {
                    _context.next = 98;
                    break;
                  }
                  if (endPoint1) {
                    _context.next = 86;
                    break;
                  }
                  getPoint.setMessage("\\u6307\\u5B9A\\u5706\\u76F4\\u5F84\\u7684\\u7B2C\\u4E00\\u4E2A\\u7AEF\\u70B9");
                  getPoint.setKeyWords("");
                  _context.next = 83;
                  return getPoint.go();
                case 83:
                  endPoint1 = _context.sent;
                  if (endPoint1) {
                    _context.next = 86;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 86:
                  if (endPoint2) {
                    _context.next = 95;
                    break;
                  }
                  getPoint.setMessage("\\u6307\\u5B9A\\u5706\\u76F4\\u5F84\\u7684\\u7B2C\\u4E8C\\u4E2A\\u7AEF\\u70B9");
                  getPoint.setKeyWords("");
                  getPoint.setUserDraw(function (pt, pw) {
                    if (!endPoint1) return;
                    center = new McGePoint3d((pt.x + endPoint1.x) / 2, (pt.y + endPoint1.y) / 2, (pt.z + endPoint1.z) / 2);
                    radius = center.distanceTo(endPoint1);
                    pw.drawMcDbEntity(new McDbCircle(center.x, center.y, center.z, radius));
                  });
                  _context.next = 92;
                  return getPoint.go();
                case 92:
                  endPoint2 = _context.sent;
                  if (endPoint2) {
                    _context.next = 95;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 95:
                  center = new McGePoint3d((endPoint2.x + endPoint1.x) / 2, (endPoint2.y + endPoint1.y) / 2, (endPoint2.z + endPoint1.z) / 2);
                  radius = center.distanceTo(endPoint1);
                  return _context.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(new McDbCircle(center.x, center.y, center.z, radius), true)
                  });
                case 98:
                  if (!(drawMethod === "T")) {
                    _context.next = 156;
                    break;
                  }
                  getPoint.setMessage("\\u6307\\u5B9A\\u5BF9\\u8C61\\u4E0E\\u5706\\u7684\\u7B2C\\u4E00\\u4E2A\\u5207\\u70B9");
                  getPoint.setKeyWords("");
                  _context.next = 103;
                  return getPoint.go();
                case 103:
                  pt1 = _context.sent;
                  if (pt1) {
                    _context.next = 106;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 106:
                  entId1 = MxCADUtility.findEntAtPoint(pt1.x, pt1.y, pt1.z, -1, resbuf);
                  ent1 = entId1.getMcDbCurve();
                  if (ent1) {
                    _context.next = 110;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 110:
                  getPoint.setMessage("\\u6307\\u5B9A\\u5BF9\\u8C61\\u4E0E\\u5706\\u7684\\u7B2C\\u4E8C\\u4E2A\\u5207\\u70B9");
                  getPoint.clearLastInputPoint();
                  _context.next = 114;
                  return getPoint.go();
                case 114:
                  pt2 = _context.sent;
                  if (pt2) {
                    _context.next = 117;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 117:
                  entId2 = MxCADUtility.findEntAtPoint(pt2.x, pt2.y, pt2.z, -1, resbuf);
                  ent2 = entId2.getMcDbCurve();
                  if (ent2) {
                    _context.next = 121;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 121:
                  _getDist = new MxCADUiPrDist();
                  _getDist.setMessage("\\u6307\\u5B9A\\u5706\\u7684\\u534A\\u5F84");
                  _context.next = 125;
                  return _getDist.go();
                case 125:
                  radius2 = _context.sent;
                  if (radius2) {
                    _context.next = 128;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 128:
                  centers = findTangentCircles(ent1, ent2, radius2, pt1, pt2);
                  if (!(!centers || centers.length === 0)) {
                    _context.next = 131;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 131:
                  if (!(centers.length === 1)) {
                    _context.next = 137;
                    break;
                  }
                  _centers = _slicedToArray$1(centers, 1), _center = _centers[0];
                  _circle = new McDbCircle(_center.x, _center.y, _center.z, radius2);
                  return _context.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(_circle)
                  });
                case 137:
                  getPoint2 = new MxCADUiPrPoint();
                  getPoint2.clearLastInputPoint();
                  getPoint2.setMessage("\\u8BF7\\u9009\\u62E9\\u4F7F\\u7528\\u54EA\\u4E2A\\u5706\\u5FC3");
                  getCenter = function getCenter(pt3) {
                    var dists = centers.map(function (c) {
                      return c.distanceTo(pt3);
                    });
                    var minValue = Math.min.apply(Math, _toConsumableArray(dists));
                    var index = dists.indexOf(minValue);
                    return centers[index];
                  };
                  getPoint2.setUserDraw(function (pt3, pw) {
                    var center2 = getCenter(pt3);
                    pw.drawCircle(center2.toVector3(), radius2);
                  });
                  _context.next = 144;
                  return getPoint2.go();
                case 144:
                  pt = _context.sent;
                  if (!(getPoint2.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context.next = 147;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 147:
                  if (pt) {
                    _context.next = 153;
                    break;
                  }
                  _centers2 = _slicedToArray$1(centers, 1), _center2 = _centers2[0];
                  _circle2 = new McDbCircle(_center2.x, _center2.y, _center2.z, radius2);
                  return _context.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(_circle2)
                  });
                case 153:
                  _center3 = getCenter(pt);
                  _circle3 = new McDbCircle(_center3.x, _center3.y, _center3.z, radius2);
                  return _context.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(_circle3)
                  });
                case 156:
                case "end":
                  return _context.stop();
              }
            }, _loop2);
          });
        case 7:
          return _context2.delegateYield(_loop2(), "t0", 9);
        case 9:
          _ret = _context2.t0;
          if (!(_ret === 0)) {
            _context2.next = 12;
            break;
          }
          return _context2.abrupt("continue", 7);
        case 12:
          if (!_ret) {
            _context2.next = 14;
            break;
          }
          return _context2.abrupt("return", _ret.v);
        case 14:
          _context2.next = 7;
          break;
        case 16:
        case "end":
          return _context2.stop();
      }
    }, _callee);
  }));
  return _drawCircle.apply(this, arguments);
}
MxFun.on("init", function () {
  MxFun.addCommand("Mx_Circle", drawCircle);
});

function drawLine() {
  return _drawLine.apply(this, arguments);
}
function _drawLine() {
  _drawLine = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
    var getPoint, prvPoint, ptFirst, iLine, history, pt, line2, data, line, id;
    return regenerator.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\n\\u6307\\u5B9A\\u7B2C\\u4E00\\u70B9:");
          _context.next = 4;
          return getPoint.go();
        case 4:
          prvPoint = _context.sent;
          ptFirst = prvPoint;
          if (prvPoint) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return");
        case 8:
          getPoint.setMessage("\\n\\u6307\\u5B9A\\u4E0B\\u4E00\\u4E2A\\u70B9:");
          iLine = 0;
          history = [];
        case 11:
          if (iLine >= 2) {
            getPoint.setKeyWords("[\\u9000\\u51FA(E)/\\u95ED\\u5408(C)/\\u653E\\u5F03(U)]");
          } else if (iLine > 0) {
            getPoint.setKeyWords("[\\u9000\\u51FA(E)/\\u653E\\u5F03(U)]");
          } else {
            getPoint.setKeyWords("");
          }
          getPoint.setBasePt(prvPoint);
          _context.next = 16;
          return getPoint.go();
        case 16:
          pt = _context.sent;
          if (!getPoint.isKeyWordPicked("C")) {
            _context.next = 23;
            break;
          }
          line2 = new McDbLine(ptFirst, prvPoint);
          MxCpp.getCurrentMxCAD().drawEntity(line2);
          return _context.abrupt("return");
        case 23:
          if (!getPoint.isKeyWordPicked("E")) {
            _context.next = 27;
            break;
          }
          return _context.abrupt("return");
        case 27:
          if (!getPoint.isKeyWordPicked("U")) {
            _context.next = 36;
            break;
          }
          if (!(history.length == 0)) {
            _context.next = 30;
            break;
          }
          return _context.abrupt("continue", 11);
        case 30:
          data = history[history.length - 1];
          history.pop();
          iLine--;
          prvPoint = data.prvPoint;
          data.id.erase();
          return _context.abrupt("continue", 11);
        case 36:
          if (pt) {
            _context.next = 38;
            break;
          }
          return _context.abrupt("return");
        case 38:
          line = new McDbLine(prvPoint, pt);
          iLine++;
          id = MxCpp.getCurrentMxCAD().drawEntity(line);
          history.push({
            id: id,
            prvPoint: prvPoint
          });
          prvPoint = pt;
          _context.next = 11;
          break;
        case 45:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _drawLine.apply(this, arguments);
}
function Mx_Point() {
  return _Mx_Point.apply(this, arguments);
}
function _Mx_Point() {
  _Mx_Point = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
    var getPoint, ptBase;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\u6307\\u5B9A\\u70B9");
        case 2:
          getPoint.clearLastInputPoint();
          _context2.next = 6;
          return getPoint.go();
        case 6:
          ptBase = _context2.sent;
          if (!(ptBase == null)) {
            _context2.next = 9;
            break;
          }
          return _context2.abrupt("break", 12);
        case 9:
          MxCpp.getCurrentMxCAD().drawEntity(new McDbPoint(ptBase));
          _context2.next = 2;
          break;
        case 12:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _Mx_Point.apply(this, arguments);
}
function MxDb_Spline() {
  return _MxDb_Spline.apply(this, arguments);
}
function _MxDb_Spline() {
  _MxDb_Spline = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
    var getPoint, prvPoint, fitPoints, pt, sp;
    return regenerator.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\n\\u6307\\u5B9A\\u7B2C\\u4E00\\u70B9:");
          _context3.next = 4;
          return getPoint.go();
        case 4:
          prvPoint = _context3.sent;
          if (prvPoint) {
            _context3.next = 7;
            break;
          }
          return _context3.abrupt("return");
        case 7:
          getPoint.setMessage("\\n\\u6307\\u5B9A\\u4E0B\\u4E00\\u4E2A\\u70B9:");
          fitPoints = new McGePoint3dArray();
          fitPoints.append(prvPoint);
        case 10:
          getPoint.setBasePt(prvPoint);
          if (fitPoints.length() == 1) {
            getPoint.setUseBasePt(true);
          } else {
            getPoint.setUseBasePt(false);
            getPoint.setUserDraw(function (pt2, pw) {
              var tmpFitPoints = new McGePoint3dArray();
              tmpFitPoints.copy(fitPoints);
              tmpFitPoints.append(pt2);
              var tmpSPline = new McDbSpline();
              tmpSPline.setFitPoints({
                degree: 3,
                fitTolerance: 1e-6,
                tangentsExist: false,
                startTangent: McGeVector3d.kIdentity,
                endTangent: McGeVector3d.kIdentity,
                fitPoints: tmpFitPoints
              });
              pw.drawMcDbEntity(tmpSPline);
            });
          }
          _context3.next = 15;
          return getPoint.go();
        case 15:
          pt = _context3.sent;
          if (pt) {
            _context3.next = 18;
            break;
          }
          return _context3.abrupt("break", 22);
        case 18:
          fitPoints.append(pt);
          prvPoint = pt;
          _context3.next = 10;
          break;
        case 22:
          if (fitPoints.length() > 2) {
            sp = new McDbSpline();
            sp.setFitPoints({
              degree: 3,
              fitTolerance: 1e-6,
              tangentsExist: false,
              startTangent: McGeVector3d.kIdentity,
              endTangent: McGeVector3d.kIdentity,
              fitPoints: fitPoints
            });
            MxCpp.getCurrentMxCAD().drawEntity(sp);
          }
        case 23:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _MxDb_Spline.apply(this, arguments);
}
MxFun.on("init", function () {
  MxFun.addCommand("Mx_Line", drawLine);
  MxFun.addCommand("Mx_Point", Mx_Point);
  MxFun.addCommand("Mx_About", Mx_About);
  MxFun.addCommand("Mx_Spline", MxDb_Spline);
});

function drawMText() {
  return _drawMText.apply(this, arguments);
}
function _drawMText() {
  _drawMText = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
    var height, text, position, angle, createMText, getStr, _text, getPoint, point, getDist, _height, getAngle, val, mcMText, mxcad, idObj;
    return regenerator.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          createMText = function createMText() {
            var mcText = new McDbMText();
            mcText.textHeight = height || 100;
            mcText.contents = text || "";
            mcText.location = position || new McGePoint3d();
            mcText.trueColor = new McCmColor(MxCpp.getCurrentMxCAD().getCurrentDatabaseDrawColor());
            mcText.rotation = angle || 0;
            return mcText;
          };
          getStr = new MxCADUiPrString();
          getStr.setMessage("\\u8F93\\u5165\\u6587\\u5B57\\u5185\\u5BB9");
          _context.next = 5;
          return getStr.go();
        case 5:
          _text = _context.sent;
          if (_text) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return");
        case 8:
          text = _text;
          getPoint = new MxCADUiPrPoint();
          getPoint.clearLastInputPoint();
          getPoint.setMessage("\\u6307\\u5B9A\\u6587\\u5B57\\u4F4D\\u7F6E");
          getPoint.setUserDraw(function (pt, pw) {
            position = pt;
            pw.drawMcDbEntity(createMText());
          });
          _context.next = 15;
          return getPoint.go();
        case 15:
          point = _context.sent;
          if (point) {
            _context.next = 18;
            break;
          }
          return _context.abrupt("return");
        case 18:
          position = point;
          getDist = new MxCADUiPrDist();
          getDist.setBasePt(position);
          getDist.setMessage(_ML_String("Mx_Text_Height", "\\u6307\\u5B9A\\u6587\\u5B57\\u9AD8\\u5EA6"));
          getDist.setUserDraw(function (pt, pw) {
            if (position) height = pt.distanceTo(position);
            pw.drawMcDbEntity(createMText());
          });
          _context.next = 25;
          return getDist.go();
        case 25:
          _height = _context.sent;
          if (_height) {
            _context.next = 28;
            break;
          }
          return _context.abrupt("return");
        case 28:
          height = _height;
          getAngle = new MxCADUiPrAngle();
          getAngle.setBasePt(position);
          getAngle.clearLastInputPoint();
          getAngle.setMessage(_ML_String("Mx_MText_Angle", "\\u6307\\u5B9A\\u6587\\u5B57\\u89D2\\u5EA6"));
          getAngle.setUserDraw(function (pt, pw) {
            if (position) angle = angleTo(pt.x, pt.y, position.x, position.y);
            pw.drawMcDbEntity(createMText());
          });
          _context.next = 36;
          return getAngle.go();
        case 36:
          val = _context.sent;
          if (val !== null && getAngle.getDetailedResult() === 8) {
            angle = val;
          }
          mcMText = createMText();
          mxcad = MxCpp.getCurrentMxCAD();
          idObj = mxcad.drawEntity(mcMText);
          mxcad.updateDisplay();
          return _context.abrupt("return", idObj);
        case 43:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _drawMText.apply(this, arguments);
}

function CMxDrawPolylineDragArcDraw_CalcArcBulge(firstPoint, nextPoint, vecArcTangent) {
  if (firstPoint.isEqualTo(nextPoint)) return 0;
  var midPt = firstPoint.c().addvec(nextPoint.c().sub(firstPoint).mult(0.5));
  var vecMid = nextPoint.c().sub(firstPoint);
  vecMid.rotateBy(Math.PI / 2, McGeVector3d.kZAxis);
  var tmpMidLine = new McDbLine(midPt, midPt.c().addvec(vecMid));
  var vecVertical = vecArcTangent.c();
  vecVertical.rotateBy(Math.PI / 2, McGeVector3d.kZAxis);
  var tmpVerticalLine = new McDbLine(firstPoint, firstPoint.c().addvec(vecVertical));
  var aryPoint = tmpMidLine.IntersectWith(tmpVerticalLine, McDb.Intersect.kExtendBoth);
  if (aryPoint.isEmpty()) return 0;
  var arcCenPoint = aryPoint.at(0);
  var dR = arcCenPoint.distanceTo(firstPoint);
  vecMid.normalize();
  vecMid.mult(dR);
  var arcMidPt1 = arcCenPoint.c().addvec(vecMid);
  var arcMidPt2 = arcCenPoint.c().subvec(vecMid);
  var vecArcDir1 = arcMidPt1.c().sub(firstPoint);
  var vecArcDir2 = arcMidPt2.c().sub(firstPoint);
  var arcMidPt = arcMidPt1;
  if (vecArcDir1.angleTo1(vecArcTangent) > vecArcDir2.angleTo1(vecArcTangent)) {
    arcMidPt = arcMidPt2;
  }
  return MxCADUtility.calcBulge(firstPoint, arcMidPt, nextPoint).val;
}
function drawPolyLine() {
  return _drawPolyLine.apply(this, arguments);
}
function _drawPolyLine() {
  _drawPolyLine = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
    var getPoint, firstPoint, vecData, s_dWidth, data, isClose, isDrawLine, isAutoClose, dStartWidth, dEndWidth, vecTmpObjectId, mxcad, isCtrl, onKeydown, onkeyup, _loop, _ret, i, pNew, _i;
    return regenerator.wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\n\\u6307\\u5B9A\\u8D77\\u70B9:");
          _context2.next = 4;
          return getPoint.go();
        case 4:
          firstPoint = _context2.sent;
          if (!(firstPoint === null)) {
            _context2.next = 7;
            break;
          }
          return _context2.abrupt("return");
        case 7:
          vecData = [];
          s_dWidth = 0;
          data = {};
          data.dStartWidth = s_dWidth;
          data.dEndWidth = s_dWidth;
          data.pt = firstPoint;
          data.dBulge = 0;
          vecData.push(data);
          isClose = false;
          isDrawLine = true;
          isAutoClose = false;
          dStartWidth = s_dWidth;
          dEndWidth = s_dWidth;
          vecTmpObjectId = [];
          mxcad = MxCpp.getCurrentMxCAD();
          MxFun.acutPrintf("\\n \\u5F53\\u524D\\u7EBF\\u5BBD\\u4E3A {0}", s_dWidth + "");
          isCtrl = false;
          onKeydown = function onKeydown(e) {
            if (e.key === "Control") isCtrl = true;
          };
          onkeyup = function onkeyup() {
            return isCtrl = false;
          };
          window.addEventListener("keydown", onKeydown);
          window.addEventListener("keyup", onkeyup);
          _loop = /*#__PURE__*/regenerator.mark(function _loop() {
            var sPrompt, sKeyWord, getNextPoint, drawData, ptNext, nextData, pPolyline, getWidth, dWVal, _getWidth, _dWVal, _vecData, vet, pt, _pt, endPoint, length, nextPoint, _nextData, _pPolyline, _sPrompt, _sKeyWord, _getNextPoint, vecArcTangent, iSzie, pt1, dBluge, pt2, tmpPl, tmpVec, userDrawFristData, _ptNext, _nextData2, iSize, _pPolyline2, getAngle, angle, startPoint, getBulge, _pt2, center, radius, _endPoint, nextData2, iSize2, _pPolyline3, getDist, _radius, oppositeSide, _pt3, _endPoint2, _nextData3, _iSize, _pPolyline4, _nextData4, _iSize2, _pPolyline5, _center, _startPoint, _radius2, _pt4, _getAngle, angle2, angleA, mVet, eVet, midPoint2, endPoint2, dBulge2, _nextData5, _iSize3, _pPolyline6, _getDist, dist, includedAngle, vet2, _midPoint, _endPoint3, _dBulge, _nextData6, _iSize4, _pPolyline7, _endPoint4, _angle, midPt, _vet, midPoint, dBulge, _nextData7, _iSize5, _pPolyline8, getRadius, dRVal, _startPoint2, _pt5, _getAngle2, _angle2, chordLength, _pt6, _vet2, entPoint, center2, _midPoint2, _dBulge2, _nextData8, _iSize6, _pPolyline9, _dist, _angle3, _center2, _midPoint3, _dBulge3, _nextData9, _iSize7, _pPolyline10, _getWidth2, _dWVal2, val, vecArcTangent2, _pt7, _nextData10, _iSize8, _pPolyline11, _pt8, getSecondPoint, _pt9, getThirdPoint, _nextPoint, _midPoint4, arc, retBulge, _nextData11, _iSize9, _pPolyline12, _getWidth3, _dWVal3;
            return regenerator.wrap(function _loop$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!isDrawLine) {
                    _context.next = 107;
                    break;
                  }
                  sPrompt = _ML_String("ID_ARX_PL2", "\\u6307\\u5B9A\\u4E0B\\u4E00\\u4E2A\\u70B9:");
                  sKeyWord = "[\\u5706\\u5F27(A)/\\u5BBD\\u5EA6(W)/\\u957F\\u5EA6(L)/\\u534A\\u5BBD(H)]";
                  if (vecData.length >= 3) {
                    if (isAutoClose) {
                      sKeyWord = "[\\u56DE\\u9000(U)/\\u5706\\u5F27(A)/\\u5BBD\\u5EA6(W)/\\u957F\\u5EA6(L)/\\u534A\\u5BBD(H)]";
                    } else {
                      sKeyWord = "[\\u56DE\\u9000(U)/\\u5706\\u5F27(A)/\\u5BBD\\u5EA6(W)/\\u957F\\u5EA6(L)/\\u534A\\u5BBD(H)/\\u95ED\\u5408(C)]";
                    }
                  } else if (vecData.length >= 2) {
                    sKeyWord = "[\\u56DE\\u9000(U)/\\u5706\\u5F27(A)/\\u5BBD\\u5EA6(W)/\\u534A\\u5BBD(H)/\\u957F\\u5EA6(L)]";
                  }
                  getNextPoint = new MxCADUiPrPoint();
                  getNextPoint.setMessage(sPrompt);
                  getNextPoint.setKeyWords(sKeyWord);
                  drawData = vecData[vecData.length - 1];
                  getNextPoint.setUserDraw(function (currendPoint, pWorldDraw) {
                    var pl = new McDbPolyline();
                    pl.addVertexAt(drawData.pt, drawData.dBulge, drawData.dStartWidth, drawData.dEndWidth);
                    pl.addVertexAt(currendPoint);
                    pWorldDraw.drawMcDbEntity(pl);
                  });
                  _context.next = 11;
                  return getNextPoint.go();
                case 11:
                  ptNext = _context.sent;
                  if (!(ptNext !== null)) {
                    _context.next = 22;
                    break;
                  }
                  nextData = {};
                  nextData.dStartWidth = dStartWidth;
                  nextData.dEndWidth = dEndWidth;
                  nextData.pt = ptNext;
                  nextData.dBulge = 0;
                  vecData.push(nextData);
                  if (vecData.length >= 2) {
                    pPolyline = new McDbPolyline();
                    pPolyline.addVertexAt(vecData[vecData.length - 2].pt, 0, vecData[vecData.length - 2].dStartWidth, vecData[vecData.length - 2].dEndWidth);
                    pPolyline.addVertexAt(vecData[vecData.length - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(pPolyline));
                  }
                  _context.next = 105;
                  break;
                case 22:
                  if (!(getNextPoint.getStatus() == MrxDbgUiPrBaseReturn.kKeyWord)) {
                    _context.next = 104;
                    break;
                  }
                  if (!getNextPoint.isKeyWordPicked("A")) {
                    _context.next = 27;
                    break;
                  }
                  isDrawLine = false;
                  _context.next = 102;
                  break;
                case 27:
                  if (!getNextPoint.isKeyWordPicked("W")) {
                    _context.next = 49;
                    break;
                  }
                  getWidth = new MxCADUiPrDist();
                  getWidth.setMessage(_ML_String("ID_ARX_PLGETSTARTWIDTH", "\\u6307\\u5B9A\\u8D77\\u70B9\\u5BBD\\u5EA6"));
                  _context.next = 32;
                  return getWidth.go();
                case 32:
                  dWVal = _context.sent;
                  if (!(dWVal === null)) {
                    _context.next = 35;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 35:
                  dStartWidth = getWidth.value();
                  getWidth.setMessage(_ML_String("ID_ARX_PLGETVERITXWIDTH", "\\u6307\\u5B9A\\u7AEF\\u70B9\\u5BBD\\u5EA6"));
                  _context.next = 39;
                  return getWidth.go();
                case 39:
                  dWVal = _context.sent;
                  if (!(dWVal === null)) {
                    _context.next = 42;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 42:
                  dEndWidth = getWidth.value();
                  s_dWidth = dEndWidth;
                  vecData[vecData.length - 1].dStartWidth = dStartWidth;
                  vecData[vecData.length - 1].dEndWidth = dEndWidth;
                  dStartWidth = dEndWidth;
                  _context.next = 102;
                  break;
                case 49:
                  if (!getNextPoint.isKeyWordPicked("H")) {
                    _context.next = 71;
                    break;
                  }
                  _getWidth = new MxCADUiPrDist();
                  _getWidth.setMessage(_ML_String("ID_ARX_PLGETSTARTWIDTH", "\\u6307\\u5B9A\\u8D77\\u70B9\\u534A\\u5BBD"));
                  _context.next = 54;
                  return _getWidth.go();
                case 54:
                  _dWVal = _context.sent;
                  if (!(_dWVal === null)) {
                    _context.next = 57;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 57:
                  dStartWidth = _getWidth.value() * 2;
                  _getWidth.setMessage(_ML_String("ID_ARX_PLGETVERITXWIDTH", "\\u6307\\u5B9A\\u7AEF\\u70B9\\u534A\\u5BBD"));
                  _context.next = 61;
                  return _getWidth.go();
                case 61:
                  _dWVal = _context.sent;
                  if (!(_dWVal === null)) {
                    _context.next = 64;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 64:
                  dEndWidth = _getWidth.value() * 2;
                  s_dWidth = dEndWidth;
                  vecData[vecData.length - 1].dStartWidth = dStartWidth;
                  vecData[vecData.length - 1].dEndWidth = dEndWidth;
                  dStartWidth = dEndWidth;
                  _context.next = 102;
                  break;
                case 71:
                  if (!getNextPoint.isKeyWordPicked("C")) {
                    _context.next = 76;
                    break;
                  }
                  isClose = true;
                  return _context.abrupt("return", 0);
                case 76:
                  if (!getNextPoint.isKeyWordPicked("U")) {
                    _context.next = 80;
                    break;
                  }
                  if (vecData.length > 1) {
                    vecData.pop();
                    vecTmpObjectId[vecTmpObjectId.length - 1].erase();
                    vecTmpObjectId.pop();
                    if (vecData.length > 0) {
                      getNextPoint.setLastInputPoint(vecData[vecData.length - 1].pt);
                    }
                  }
                  _context.next = 102;
                  break;
                case 80:
                  if (!getNextPoint.isKeyWordPicked("L")) {
                    _context.next = 102;
                    break;
                  }
                  vet = McGeVector3d.kXAxis;
                  getNextPoint.setMessage("\\u6307\\u5B9A\\u76F4\\u7EBF\\u957F\\u5EA6");
                  getNextPoint.setKeyWords("");
                  _context.next = 86;
                  return getNextPoint.go();
                case 86:
                  _pt = _context.sent;
                  if (_pt) {
                    _context.next = 89;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 89:
                  endPoint = vecData[vecData.length - 1].pt;
                  length = _pt.distanceTo(endPoint);
                  nextPoint = (_vecData = vecData[vecData.length - 2]) === null || _vecData === void 0 ? void 0 : _vecData.pt;
                  if (nextPoint) {
                    vet = nextPoint.sub(endPoint);
                  }
                  pt = endPoint.clone().addvec(vet.normalize().mult(-length));
                  _nextData = {};
                  _nextData.dStartWidth = dStartWidth;
                  _nextData.dEndWidth = dEndWidth;
                  _nextData.pt = pt;
                  _nextData.dBulge = 0;
                  vecData.push(_nextData);
                  getNextPoint.setLastInputPoint(pt);
                  if (vecData.length >= 2) {
                    _pPolyline = new McDbPolyline();
                    _pPolyline.addVertexAt(vecData[vecData.length - 2].pt, 0, vecData[vecData.length - 2].dStartWidth, vecData[vecData.length - 2].dEndWidth);
                    _pPolyline.addVertexAt(vecData[vecData.length - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline));
                  }
                case 102:
                  _context.next = 105;
                  break;
                case 104:
                  return _context.abrupt("return", 0);
                case 105:
                  _context.next = 495;
                  break;
                case 107:
                  _sPrompt = _ML_String("NO1_ID_ARX_PL5", "\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411)");
                  _sKeyWord = "[\\u89D2\\u5EA6(A)/\\u7B2C\\u4E8C\\u4E2A\\u70B9(S)/\\u5706\\u5FC3(CE)/\\u65B9\\u5411(D)/\\u76F4\\u7EBF(L)/\\u534A\\u5F84(R)/\\u5BBD\\u5EA6(W)/\\u534A\\u5BBD(H)]";
                  if (vecData.length >= 3) {
                    if (isAutoClose) {
                      _sKeyWord = "[\\u89D2\\u5EA6(A)/\\u7B2C\\u4E8C\\u4E2A\\u70B9(S)/\\u5706\\u5FC3(CE)/\\u65B9\\u5411(D)/\\u56DE\\u9000(U)/\\u76F4\\u7EBF(L)/\\u534A\\u5F84(R)/\\u5BBD\\u5EA6(W)/\\u534A\\u5BBD(H)]";
                    } else {
                      _sKeyWord = "[\\u89D2\\u5EA6(A)/\\u7B2C\\u4E8C\\u4E2A\\u70B9(S)/\\u5706\\u5FC3(CE)/\\u65B9\\u5411(D)/\\u56DE\\u9000(U)/\\u76F4\\u7EBF(L)/\\u534A\\u5F84(R)/\\u5BBD\\u5EA6(W)/\\u534A\\u5BBD(H)/\\u95ED\\u5408(C)]";
                    }
                  } else if (vecData.length >= 2) {
                    _sKeyWord = "[\\u89D2\\u5EA6(A)/\\u7B2C\\u4E8C\\u4E2A\\u70B9(S)/\\u5706\\u5FC3(CE)/\\u65B9\\u5411(D)/\\u56DE\\u9000(U)/\\u76F4\\u7EBF(L)/\\u534A\\u5F84(R)/\\u5BBD\\u5EA6(W)/\\u534A\\u5BBD(H)]";
                  }
                  _getNextPoint = new MxCADUiPrPoint();
                  _getNextPoint.setMessage(_sPrompt);
                  _getNextPoint.setKeyWords(_sKeyWord);
                  vecArcTangent = new McGeVector3d();
                  if (vecData.length < 2) {
                    vecArcTangent.copy(McGeVector3d.kXAxis);
                  } else {
                    iSzie = vecData.length;
                    pt1 = vecData[iSzie - 2].pt;
                    dBluge = vecData[iSzie - 2].dBulge;
                    pt2 = vecData[iSzie - 1].pt;
                    if (IsZero(dBluge)) {
                      vecArcTangent = new McGePoint3d(pt2.x, pt2.y, 0).sub(new McGePoint3d(pt1.x, pt1.y, 0));
                    } else {
                      tmpPl = new McDbPolyline();
                      tmpPl.addVertexAt(pt1, dBluge);
                      tmpPl.addVertexAt(pt2);
                      tmpVec = tmpPl.getFirstDeriv(new McGePoint3d(pt2.x, pt2.y, 0));
                      if (tmpVec.ret) {
                        vecArcTangent = tmpVec.val;
                      } else {
                        vecArcTangent.copy(McGeVector3d.kXAxis);
                      }
                    }
                  }
                  userDrawFristData = vecData[vecData.length - 1];
                  _getNextPoint.setUserDraw(function (currendPoint, pWorldDraw) {
                    var dBulge = CMxDrawPolylineDragArcDraw_CalcArcBulge(userDrawFristData.pt, currendPoint, isCtrl ? vecArcTangent.clone().negate() : vecArcTangent);
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(currendPoint);
                    pWorldDraw.drawMcDbEntity(pl);
                  });
                  _context.next = 119;
                  return _getNextPoint.go();
                case 119:
                  _ptNext = _context.sent;
                  if (!(_ptNext !== null)) {
                    _context.next = 132;
                    break;
                  }
                  _nextData2 = {};
                  _nextData2.dStartWidth = dStartWidth;
                  _nextData2.dEndWidth = dEndWidth;
                  _nextData2.dBulge = 0;
                  _nextData2.pt = _ptNext;
                  vecData[vecData.length - 1].dBulge = CMxDrawPolylineDragArcDraw_CalcArcBulge(userDrawFristData.pt, _nextData2.pt, isCtrl ? vecArcTangent.clone().negate() : vecArcTangent);
                  vecData.push(_nextData2);
                  iSize = vecData.length;
                  if (iSize >= 2) {
                    _pPolyline2 = new McDbPolyline();
                    _pPolyline2.addVertexAt(vecData[iSize - 2].pt, vecData[iSize - 2].dBulge, vecData[iSize - 2].dStartWidth, vecData[iSize - 2].dEndWidth);
                    _pPolyline2.addVertexAt(vecData[iSize - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline2));
                  }
                  _context.next = 495;
                  break;
                case 132:
                  if (!(_getNextPoint.getStatus() == MrxDbgUiPrBaseReturn.kKeyWord)) {
                    _context.next = 494;
                    break;
                  }
                  if (!_getNextPoint.isKeyWordPicked("A")) {
                    _context.next = 215;
                    break;
                  }
                  getAngle = new MxCADUiPrAngle();
                  getAngle.setBasePt(userDrawFristData.pt);
                  getAngle.setMessage(_ML_String("ID_ARX_PLGET_I_ANGLE", "\\u6307\\u5B9A\\u5939\\u89D2"));
                  _context.next = 139;
                  return getAngle.go();
                case 139:
                  angle = _context.sent;
                  if (!(angle === null)) {
                    _context.next = 142;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 142:
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411)");
                  _getNextPoint.setKeyWords("[\\u5706\\u5FC3(CE)/\\u534A\\u5F84(R)]");
                  _getNextPoint.setLastInputPoint(userDrawFristData.pt);
                  startPoint = vecData[vecData.length - 1].pt;
                  getBulge = function getBulge(pt2) {
                    var angleA = Math.PI / 2 - angle / 2;
                    var midPt = new McGePoint3d((pt2.x + startPoint.x) / 2, (pt2.y + startPoint.y) / 2);
                    var oppositeSide = midPt.distanceTo(startPoint);
                    var radius = oppositeSide / Math.sin(angleA);
                    var adjacentEdge = oppositeSide / Math.tan(angleA);
                    var vet = midPt.sub(startPoint).rotateBy(Math.PI / 2).normalize().mult(isCtrl ? -radius - adjacentEdge : radius - adjacentEdge);
                    var midPoint = midPt.addvec(vet);
                    return MxCADUtility.calcBulge(startPoint, midPoint, pt2).val;
                  };
                  _getNextPoint.setUserDraw(function (currendPoint, pWorldDraw) {
                    var dBulge = getBulge(currendPoint);
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(currendPoint);
                    pWorldDraw.drawMcDbEntity(pl);
                  });
                  _context.next = 150;
                  return _getNextPoint.go();
                case 150:
                  _pt2 = _context.sent;
                  if (!_getNextPoint.isKeyWordPicked("CE")) {
                    _context.next = 174;
                    break;
                  }
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u5706\\u5FC3");
                  _getNextPoint.setKeyWords("");
                  _getNextPoint.setBasePt(startPoint);
                  _getNextPoint.setUserDraw(function (pt2, pw) {
                    var radius2 = pt2.distanceTo(startPoint);
                    var endPoint2 = pt2.addvec(pt2.sub(startPoint).rotateBy(angle).normalize().mult(radius2));
                    var dBulge = getBulge(endPoint2);
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(endPoint2);
                    pw.drawMcDbEntity(pl);
                  });
                  _context.next = 158;
                  return _getNextPoint.go();
                case 158:
                  center = _context.sent;
                  if (center) {
                    _context.next = 161;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 161:
                  radius = center.distanceTo(startPoint);
                  _endPoint = center.addvec(center.sub(startPoint).rotateBy(angle).normalize().mult(radius));
                  nextData2 = {};
                  nextData2.dStartWidth = dStartWidth;
                  nextData2.dEndWidth = dEndWidth;
                  nextData2.dBulge = 0;
                  nextData2.pt = _endPoint;
                  vecData[vecData.length - 1].dBulge = getBulge(_endPoint);
                  vecData.push(nextData2);
                  iSize2 = vecData.length;
                  if (iSize2 >= 2) {
                    _pPolyline3 = new McDbPolyline();
                    _pPolyline3.addVertexAt(vecData[iSize2 - 2].pt, vecData[iSize2 - 2].dBulge, vecData[iSize2 - 2].dStartWidth, vecData[iSize2 - 2].dEndWidth);
                    _pPolyline3.addVertexAt(vecData[iSize2 - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline3));
                  }
                  _getNextPoint.setLastInputPoint(_endPoint);
                  return _context.abrupt("return", 1);
                case 174:
                  if (!_getNextPoint.isKeyWordPicked("R")) {
                    _context.next = 204;
                    break;
                  }
                  getDist = new MxCADUiPrDist();
                  getDist.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u534A\\u5F84");
                  getDist.setKeyWords("");
                  _context.next = 180;
                  return getDist.go();
                case 180:
                  _radius = _context.sent;
                  if (!(typeof _radius !== "number")) {
                    _context.next = 183;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 183:
                  oppositeSide = _radius * Math.sin(angle / 2);
                  _getNextPoint.setBasePt(startPoint);
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u5F26\\u65B9\\u5411(\\u6309\\u4F4FCtrl\\u952E\\u5207\\u6362\\u65B9\\u5411)");
                  _getNextPoint.setKeyWords("");
                  _getNextPoint.setUserDraw(function (pt3, pw) {
                    var endPoint2 = startPoint.clone().addvec(pt3.sub(startPoint).normalize().mult(oppositeSide * 2));
                    var dBulge = getBulge(endPoint2);
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(endPoint2);
                    pw.drawMcDbEntity(pl);
                  });
                  _context.next = 190;
                  return _getNextPoint.go();
                case 190:
                  _pt3 = _context.sent;
                  if (_pt3) {
                    _context.next = 193;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 193:
                  _endPoint2 = startPoint.clone().addvec(_pt3.sub(startPoint).normalize().mult(oppositeSide * 2));
                  _nextData3 = {};
                  _nextData3.dStartWidth = dStartWidth;
                  _nextData3.dEndWidth = dEndWidth;
                  _nextData3.dBulge = 0;
                  _nextData3.pt = _endPoint2;
                  vecData[vecData.length - 1].dBulge = getBulge(_endPoint2);
                  vecData.push(_nextData3);
                  _iSize = vecData.length;
                  if (_iSize >= 2) {
                    _pPolyline4 = new McDbPolyline();
                    _pPolyline4.addVertexAt(vecData[_iSize - 2].pt, vecData[_iSize - 2].dBulge, vecData[_iSize - 2].dStartWidth, vecData[_iSize - 2].dEndWidth);
                    _pPolyline4.addVertexAt(vecData[_iSize - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline4));
                  }
                  return _context.abrupt("return", 1);
                case 204:
                  if (_pt2) {
                    _context.next = 206;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 206:
                  _nextData4 = {};
                  _nextData4.dStartWidth = dStartWidth;
                  _nextData4.dEndWidth = dEndWidth;
                  _nextData4.dBulge = 0;
                  _nextData4.pt = _pt2;
                  vecData[vecData.length - 1].dBulge = getBulge(_pt2);
                  vecData.push(_nextData4);
                  _iSize2 = vecData.length;
                  if (_iSize2 >= 2) {
                    _pPolyline5 = new McDbPolyline();
                    _pPolyline5.addVertexAt(vecData[_iSize2 - 2].pt, vecData[_iSize2 - 2].dBulge, vecData[_iSize2 - 2].dStartWidth, vecData[_iSize2 - 2].dEndWidth);
                    _pPolyline5.addVertexAt(vecData[_iSize2 - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline5));
                  }
                case 215:
                  if (!_getNextPoint.isKeyWordPicked("CE")) {
                    _context.next = 311;
                    break;
                  }
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u5706\\u5FC3");
                  _getNextPoint.setKeyWords("");
                  _getNextPoint.setUserDraw(function () {});
                  _context.next = 221;
                  return _getNextPoint.go();
                case 221:
                  _center = _context.sent;
                  if (_center) {
                    _context.next = 224;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 224:
                  _startPoint = userDrawFristData.pt;
                  _radius2 = _center.distanceTo(_startPoint);
                  _getNextPoint.setLastInputPoint(_startPoint);
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411)");
                  _getNextPoint.setKeyWords("[\\u89D2\\u5EA6(A)/\\u957F\\u5EA6(L)]");
                  _getNextPoint.clearLastInputPoint();
                  _getNextPoint.setUserDraw(function (pt2, pw) {
                    pw.drawLine(pt2.toVector3(), _center.toVector3());
                    var endPoint2 = _center.clone().addvec(pt2.sub(_center).normalize().mult(_radius2));
                    var angle2 = _center.sub(_startPoint).angleTo2(_center.sub(endPoint2), McGeVector3d.kZAxis);
                    var midPt2 = new McGePoint3d((_startPoint.x + endPoint2.x) / 2, (_startPoint.y + endPoint2.y) / 2);
                    var vet2 = _center.sub(midPt2).normalize().mult(-_radius2);
                    var midPoint2 = _center.clone().addvec((isCtrl ? angle2 < Math.PI : angle2 > Math.PI) ? vet2.negate() : vet2);
                    var dBulge2 = MxCADUtility.calcBulge(_startPoint, midPoint2, endPoint2).val;
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge2, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(endPoint2);
                    pw.drawMcDbEntity(pl);
                  });
                  _context.next = 233;
                  return _getNextPoint.go();
                case 233:
                  _pt4 = _context.sent;
                  if (!_getNextPoint.isKeyWordPicked("A")) {
                    _context.next = 261;
                    break;
                  }
                  _getAngle = new MxCADUiPrAngle();
                  _getAngle.setBasePt(_center);
                  _getAngle.setMessage(_ML_String("ID_ARX_PLGET_I_ANGLE", "\\u6307\\u5B9A\\u5939\\u89D2(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411"));
                  _getAngle.setKeyWords("");
                  _getAngle.setUserDraw(function (pt2, pw) {
                    var angle3 = McGeVector3d.kXAxis.clone().angleTo2(pt2.sub(_center), McGeVector3d.kZAxis);
                    var angleA2 = isCtrl ? Math.PI * 2 - angle3 / 2 : angle3 / 2;
                    var mVet2 = _startPoint.sub(_center).rotateBy(angleA2).normalize().mult(_radius2);
                    var eVet2 = _startPoint.sub(_center).rotateBy(angle3).normalize().mult(_radius2);
                    var midPoint3 = _center.clone().addvec(mVet2);
                    var endPoint3 = _center.clone().addvec(eVet2);
                    var dBulge3 = MxCADUtility.calcBulge(_startPoint, midPoint3, endPoint3).val;
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge3, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(endPoint3);
                    pw.drawMcDbEntity(pl);
                  });
                  _context.next = 242;
                  return _getAngle.go();
                case 242:
                  angle2 = _context.sent;
                  if (!(angle2 === null)) {
                    _context.next = 245;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 245:
                  angleA = isCtrl ? Math.PI * 2 - angle2 / 2 : angle2 / 2;
                  mVet = _startPoint.sub(_center).rotateBy(angleA).normalize().mult(_radius2);
                  eVet = _startPoint.sub(_center).rotateBy(angle2).normalize().mult(_radius2);
                  midPoint2 = _center.clone().addvec(mVet);
                  endPoint2 = _center.clone().addvec(eVet);
                  dBulge2 = MxCADUtility.calcBulge(_startPoint, midPoint2, endPoint2).val;
                  _nextData5 = {};
                  _nextData5.dStartWidth = dStartWidth;
                  _nextData5.dEndWidth = dEndWidth;
                  _nextData5.dBulge = 0;
                  _nextData5.pt = endPoint2;
                  vecData[vecData.length - 1].dBulge = dBulge2;
                  vecData.push(_nextData5);
                  _iSize3 = vecData.length;
                  if (_iSize3 >= 2) {
                    _pPolyline6 = new McDbPolyline();
                    _pPolyline6.addVertexAt(vecData[_iSize3 - 2].pt, vecData[_iSize3 - 2].dBulge, vecData[_iSize3 - 2].dStartWidth, vecData[_iSize3 - 2].dEndWidth);
                    _pPolyline6.addVertexAt(vecData[_iSize3 - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline6));
                  }
                  return _context.abrupt("return", 1);
                case 261:
                  if (!_getNextPoint.isKeyWordPicked("L")) {
                    _context.next = 292;
                    break;
                  }
                  _getDist = new MxCADUiPrDist();
                  _getDist.setMessage("\\u6307\\u5B9A\\u5F26\\u957F(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411)");
                  _getDist.setKeyWords("");
                  _getDist.setBasePt(_startPoint);
                  _getDist.setUserDraw(function (pt2, pw) {
                    var dist2 = pt2.distanceTo(_startPoint);
                    if (dist2 > _radius2 * 2) return;
                    var includedAngle2 = Math.asin(dist2 / 2 / _radius2) * 2;
                    var vet3 = _startPoint.sub(_center).normalize().mult(_radius2);
                    var midPoint3 = _center.clone().addvec(vet3.clone().rotateBy(isCtrl ? Math.PI - includedAngle2 / 2 : includedAngle2 / 2));
                    var endPoint3 = _center.clone().addvec(vet3.clone().rotateBy(includedAngle2));
                    var dBulge3 = MxCADUtility.calcBulge(_startPoint, midPoint3, endPoint3).val;
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge3, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(endPoint3);
                    pw.drawMcDbEntity(pl);
                  });
                  _context.next = 269;
                  return _getDist.go();
                case 269:
                  dist = _context.sent;
                  if (!(typeof dist !== "number")) {
                    _context.next = 272;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 272:
                  if (!(dist > _radius2 * 2)) {
                    _context.next = 276;
                    break;
                  }
                  MxFun.acutPrintf("*\\u5F26\\u957F\\u4E0D\\u80FD\\u5927\\u4E8E\\u76F4\\u5F84 \\u65E0\\u6548*");
                  _getNextPoint.setLastInputPoint(_startPoint);
                  return _context.abrupt("return", 1);
                case 276:
                  includedAngle = Math.asin(dist / 2 / _radius2) * 2;
                  vet2 = _startPoint.sub(_center).normalize().mult(_radius2);
                  _midPoint = _center.clone().addvec(vet2.clone().rotateBy(isCtrl ? Math.PI - includedAngle / 2 : includedAngle / 2));
                  _endPoint3 = _center.clone().addvec(vet2.clone().rotateBy(includedAngle));
                  _dBulge = MxCADUtility.calcBulge(_startPoint, _midPoint, _endPoint3).val;
                  _nextData6 = {};
                  _nextData6.dStartWidth = dStartWidth;
                  _nextData6.dEndWidth = dEndWidth;
                  _nextData6.dBulge = 0;
                  _nextData6.pt = _endPoint3;
                  vecData[vecData.length - 1].dBulge = _dBulge;
                  vecData.push(_nextData6);
                  _iSize4 = vecData.length;
                  if (_iSize4 >= 2) {
                    _pPolyline7 = new McDbPolyline();
                    _pPolyline7.addVertexAt(vecData[_iSize4 - 2].pt, vecData[_iSize4 - 2].dBulge, vecData[_iSize4 - 2].dStartWidth, vecData[_iSize4 - 2].dEndWidth);
                    _pPolyline7.addVertexAt(vecData[_iSize4 - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline7));
                  }
                  _getNextPoint.setLastInputPoint(_endPoint3);
                  return _context.abrupt("return", 1);
                case 292:
                  if (_pt4) {
                    _context.next = 294;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 294:
                  _endPoint4 = _center.clone().addvec(_pt4.sub(_center).normalize().mult(_radius2));
                  _angle = _center.sub(_startPoint).angleTo2(_center.sub(_endPoint4), McGeVector3d.kZAxis);
                  midPt = new McGePoint3d((_startPoint.x + _endPoint4.x) / 2, (_startPoint.y + _endPoint4.y) / 2);
                  _vet = _center.sub(midPt).normalize().mult(-_radius2);
                  midPoint = _center.clone().addvec((isCtrl ? _angle < Math.PI : _angle > Math.PI) ? _vet.negate() : _vet);
                  dBulge = MxCADUtility.calcBulge(_startPoint, midPoint, _endPoint4).val;
                  _nextData7 = {};
                  _nextData7.dStartWidth = dStartWidth;
                  _nextData7.dEndWidth = dEndWidth;
                  _nextData7.dBulge = 0;
                  _nextData7.pt = _endPoint4;
                  vecData[vecData.length - 1].dBulge = dBulge;
                  vecData.push(_nextData7);
                  _iSize5 = vecData.length;
                  if (_iSize5 >= 2) {
                    _pPolyline8 = new McDbPolyline();
                    _pPolyline8.addVertexAt(vecData[_iSize5 - 2].pt, vecData[_iSize5 - 2].dBulge, vecData[_iSize5 - 2].dStartWidth, vecData[_iSize5 - 2].dEndWidth);
                    _pPolyline8.addVertexAt(vecData[_iSize5 - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline8));
                  }
                  _getNextPoint.setLastInputPoint(_endPoint4);
                  return _context.abrupt("return", 1);
                case 311:
                  if (!_getNextPoint.isKeyWordPicked("R")) {
                    _context.next = 383;
                    break;
                  }
                  getRadius = new MxCADUiPrDist();
                  getRadius.setMessage(_ML_String("ID_ARX_PLGETSTARTRADIUS", "\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u534A\\u5F84"));
                  getRadius.setKeyWords("");
                  _context.next = 317;
                  return getRadius.go();
                case 317:
                  dRVal = _context.sent;
                  if (!(dRVal === null)) {
                    _context.next = 320;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 320:
                  _startPoint2 = userDrawFristData.pt;
                  _getNextPoint.setLastInputPoint(_startPoint2);
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411)");
                  _getNextPoint.setKeyWords("[\\u89D2\\u5EA6(A)]");
                  _getNextPoint.setUserDraw(function (pt2, pw) {
                    if (!dRVal) return;
                    var dist2 = pt2.distanceTo(_startPoint2);
                    if (dist2 > dRVal * 2) return;
                    var angle2 = Math.acos(dist2 / 2 / dRVal);
                    var center2 = _startPoint2.clone().addvec(pt2.sub(_startPoint2).rotateBy(angle2).normalize().mult(dRVal));
                    var midPoint2 = center2.clone().addvec(new McGePoint3d((_startPoint2.x + pt2.x) / 2, (_startPoint2.y + pt2.y) / 2).sub(center2).normalize().mult(isCtrl ? -dRVal : dRVal));
                    var dBulge2 = MxCADUtility.calcBulge(_startPoint2, midPoint2, pt2).val;
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge2, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(pt2);
                    pw.drawMcDbEntity(pl);
                  });
                  _context.next = 327;
                  return _getNextPoint.go();
                case 327:
                  _pt5 = _context.sent;
                  if (!_getNextPoint.isKeyWordPicked("A")) {
                    _context.next = 363;
                    break;
                  }
                  _getAngle2 = new MxCADUiPrAngle();
                  _getAngle2.setMessage(_ML_String("ID_ARX_PLGET_I_ANGLE", "\\u6307\\u5B9A\\u5939\\u89D2"));
                  _getAngle2.setKeyWords("");
                  _getAngle2.setBasePt(_startPoint2);
                  _context.next = 335;
                  return _getAngle2.go();
                case 335:
                  _angle2 = _context.sent;
                  if (!(typeof _angle2 !== "number")) {
                    _context.next = 338;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 338:
                  chordLength = Math.sin(_angle2 / 2) * dRVal * 2;
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u5F26\\u65B9\\u5411(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411)");
                  _getNextPoint.setKeyWords("");
                  _getNextPoint.setBasePt(_startPoint2);
                  _getNextPoint.setUserDraw(function (pt3, pw) {
                    if (!dRVal) return;
                    var vet2 = pt3.sub(_startPoint2).normalize();
                    var entPoint2 = _startPoint2.clone().addvec(vet2.clone().mult(chordLength));
                    var center3 = entPoint2.clone().addvec(vet2.clone().negate().rotateBy(-(Math.PI / 2 - _angle2 / 2)).mult(dRVal));
                    var midPoint3 = center3.clone().addvec(center3.sub(new McGePoint3d((_startPoint2.x + entPoint2.x) / 2, (_startPoint2.y + entPoint2.y) / 2)).normalize().mult(isCtrl ? dRVal : -dRVal));
                    var dBulge3 = MxCADUtility.calcBulge(_startPoint2, midPoint3, entPoint2).val;
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge3, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(entPoint2);
                    pw.drawMcDbEntity(pl);
                  });
                  _context.next = 345;
                  return _getNextPoint.go();
                case 345:
                  _pt6 = _context.sent;
                  if (_pt6) {
                    _context.next = 348;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 348:
                  _vet2 = _pt6.sub(_startPoint2).normalize();
                  entPoint = _startPoint2.clone().addvec(_vet2.clone().mult(chordLength));
                  center2 = entPoint.clone().addvec(_vet2.clone().negate().rotateBy(-(Math.PI / 2 - _angle2 / 2)).mult(dRVal));
                  _midPoint2 = center2.clone().addvec(center2.sub(new McGePoint3d((_startPoint2.x + entPoint.x) / 2, (_startPoint2.y + entPoint.y) / 2)).normalize().mult(isCtrl ? dRVal : -dRVal));
                  _dBulge2 = MxCADUtility.calcBulge(_startPoint2, _midPoint2, entPoint).val;
                  _nextData8 = {};
                  _nextData8.dStartWidth = dStartWidth;
                  _nextData8.dEndWidth = dEndWidth;
                  _nextData8.dBulge = 0;
                  _nextData8.pt = entPoint;
                  vecData[vecData.length - 1].dBulge = _dBulge2;
                  vecData.push(_nextData8);
                  _iSize6 = vecData.length;
                  if (_iSize6 >= 2) {
                    _pPolyline9 = new McDbPolyline();
                    _pPolyline9.addVertexAt(vecData[_iSize6 - 2].pt, vecData[_iSize6 - 2].dBulge, vecData[_iSize6 - 2].dStartWidth, vecData[_iSize6 - 2].dEndWidth);
                    _pPolyline9.addVertexAt(vecData[_iSize6 - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline9));
                  }
                  return _context.abrupt("return", 1);
                case 363:
                  if (_pt5) {
                    _context.next = 365;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 365:
                  _dist = _pt5.distanceTo(_startPoint2);
                  if (!(_dist > dRVal * 2)) {
                    _context.next = 369;
                    break;
                  }
                  MxFun.acutPrintf("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9 *\\u65E0\\u6548*");
                  return _context.abrupt("return", 1);
                case 369:
                  _angle3 = Math.acos(_dist / 2 / dRVal);
                  _center2 = _startPoint2.clone().addvec(_pt5.sub(_startPoint2).rotateBy(_angle3).normalize().mult(dRVal));
                  _midPoint3 = _center2.clone().addvec(new McGePoint3d((_startPoint2.x + _pt5.x) / 2, (_startPoint2.y + _pt5.y) / 2).sub(_center2).normalize().mult(isCtrl ? -dRVal : dRVal));
                  _dBulge3 = MxCADUtility.calcBulge(_startPoint2, _midPoint3, _pt5).val;
                  _nextData9 = {};
                  _nextData9.dStartWidth = dStartWidth;
                  _nextData9.dEndWidth = dEndWidth;
                  _nextData9.dBulge = 0;
                  _nextData9.pt = _pt5;
                  vecData[vecData.length - 1].dBulge = _dBulge3;
                  vecData.push(_nextData9);
                  _iSize7 = vecData.length;
                  if (_iSize7 >= 2) {
                    _pPolyline10 = new McDbPolyline();
                    _pPolyline10.addVertexAt(vecData[_iSize7 - 2].pt, vecData[_iSize7 - 2].dBulge, vecData[_iSize7 - 2].dStartWidth, vecData[_iSize7 - 2].dEndWidth);
                    _pPolyline10.addVertexAt(vecData[_iSize7 - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline10));
                  }
                  return _context.abrupt("return", 1);
                case 383:
                  if (!_getNextPoint.isKeyWordPicked("H")) {
                    _context.next = 404;
                    break;
                  }
                  _getWidth2 = new MxCADUiPrDist();
                  _getWidth2.setMessage(_ML_String("ID_ARX_PLGETSTARTWIDTH", "\\u6307\\u5B9A\\u8D77\\u70B9\\u534A\\u5BBD"));
                  _context.next = 388;
                  return _getWidth2.go();
                case 388:
                  _dWVal2 = _context.sent;
                  if (!(_dWVal2 === null)) {
                    _context.next = 391;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 391:
                  dStartWidth = _getWidth2.value() * 2;
                  _getWidth2.setMessage(_ML_String("ID_ARX_PLGETVERITXWIDTH", "\\u6307\\u5B9A\\u7AEF\\u70B9\\u534A\\u5BBD"));
                  _context.next = 395;
                  return _getWidth2.go();
                case 395:
                  _dWVal2 = _context.sent;
                  if (!(_dWVal2 === null)) {
                    _context.next = 398;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 398:
                  dEndWidth = _getWidth2.value() * 2;
                  s_dWidth = dEndWidth;
                  vecData[vecData.length - 1].dStartWidth = dStartWidth;
                  vecData[vecData.length - 1].dEndWidth = dEndWidth;
                  dStartWidth = dEndWidth;
                  return _context.abrupt("return", 1);
                case 404:
                  if (!_getNextPoint.isKeyWordPicked("D")) {
                    _context.next = 433;
                    break;
                  }
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u8D77\\u70B9\\u5207\\u5411");
                  _getNextPoint.setKeyWords("");
                  _getNextPoint.setLastInputPoint(userDrawFristData.pt);
                  _getNextPoint.setUserDraw(function (pt2, pw) {
                    pw.drawLine(pt2.toVector3(), userDrawFristData.pt.toVector3());
                  });
                  _context.next = 411;
                  return _getNextPoint.go();
                case 411:
                  val = _context.sent;
                  if (val) {
                    _context.next = 414;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 414:
                  vecArcTangent2 = val.sub(userDrawFristData.pt);
                  _getNextPoint.setLastInputPoint(userDrawFristData.pt);
                  _getNextPoint.setBasePt(userDrawFristData.pt);
                  _getNextPoint.setMessage("\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411)");
                  _getNextPoint.setKeyWords("");
                  _getNextPoint.setUserDraw(function (pt2, pw) {
                    var dBulge = CMxDrawPolylineDragArcDraw_CalcArcBulge(userDrawFristData.pt, pt2, isCtrl ? vecArcTangent2.clone().negate() : vecArcTangent2);
                    var pl = new McDbPolyline();
                    pl.addVertexAt(userDrawFristData.pt, dBulge, userDrawFristData.dStartWidth, userDrawFristData.dEndWidth);
                    pl.addVertexAt(pt2);
                    pw.drawMcDbEntity(pl);
                  });
                  _context.next = 422;
                  return _getNextPoint.go();
                case 422:
                  _pt7 = _context.sent;
                  _nextData10 = {};
                  _nextData10.dStartWidth = dStartWidth;
                  _nextData10.dEndWidth = dEndWidth;
                  _nextData10.dBulge = 0;
                  _nextData10.pt = _pt7;
                  vecData[vecData.length - 1].dBulge = CMxDrawPolylineDragArcDraw_CalcArcBulge(userDrawFristData.pt, _nextData10.pt, isCtrl ? vecArcTangent2.clone().negate() : vecArcTangent2);
                  vecData.push(_nextData10);
                  _iSize8 = vecData.length;
                  if (_iSize8 >= 2) {
                    _pPolyline11 = new McDbPolyline();
                    _pPolyline11.addVertexAt(vecData[_iSize8 - 2].pt, vecData[_iSize8 - 2].dBulge, vecData[_iSize8 - 2].dStartWidth, vecData[_iSize8 - 2].dEndWidth);
                    _pPolyline11.addVertexAt(vecData[_iSize8 - 1].pt);
                    vecTmpObjectId.push(mxcad.drawEntity(_pPolyline11));
                  }
                  return _context.abrupt("return", 1);
                case 433:
                  if (!_getNextPoint.isKeyWordPicked("L")) {
                    _context.next = 437;
                    break;
                  }
                  isDrawLine = true;
                  _context.next = 492;
                  break;
                case 437:
                  if (!_getNextPoint.isKeyWordPicked("S")) {
                    _context.next = 463;
                    break;
                  }
                  _pt8 = new McGePoint3d(vecData[vecData.length - 1].pt.x, vecData[vecData.length - 1].pt.y, 0);
                  getSecondPoint = new MxCADUiPrPoint();
                  getSecondPoint.setMessage(_ML_String("NO1_ID_SPECIFY_ARC2", "\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7B2C\\u4E8C\\u4E2A\\u70B9"));
                  getSecondPoint.setBasePt(_pt8);
                  _context.next = 444;
                  return getSecondPoint.go();
                case 444:
                  _pt9 = _context.sent;
                  if (!(_pt9 === null)) {
                    _context.next = 447;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 447:
                  getThirdPoint = new MxCADUiPrPoint();
                  getThirdPoint.setMessage(_ML_String("ID_CIRCULAR_ENDPOINT", "\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F Ctrl \\u952E\\u4EE5\\u5207\\u6362\\u65B9\\u5411)"));
                  getThirdPoint.setUserDraw(function (currendPoint, pWorldDraw) {
                    var arc = new McDbArc();
                    arc.computeArc(_pt8.x, _pt8.y, _pt9.x, _pt9.y, currendPoint.x, currendPoint.y);
                    var midPoint = _pt9;
                    if (isCtrl) {
                      midPoint = arc.center.clone().addvec(arc.center.clone().sub(midPoint));
                      arc.computeArc(_pt8.x, _pt8.y, midPoint.x, midPoint.y, currendPoint.x, currendPoint.y);
                    }
                    pWorldDraw.drawMcDbEntity(arc);
                  });
                  _context.next = 452;
                  return getThirdPoint.go();
                case 452:
                  _nextPoint = _context.sent;
                  if (!(_nextPoint !== null)) {
                    _context.next = 460;
                    break;
                  }
                  _midPoint4 = _pt9;
                  if (isCtrl) {
                    arc = new McDbArc();
                    arc.computeArc(_pt8.x, _pt8.y, _midPoint4.x, _midPoint4.y, _nextPoint.x, _nextPoint.y);
                    _midPoint4 = arc.center.clone().addvec(arc.center.clone().sub(_midPoint4));
                  }
                  retBulge = MxCADUtility.calcBulge(_pt8, _midPoint4, _nextPoint);
                  if (retBulge.ret) {
                    _nextData11 = {};
                    _nextData11.dStartWidth = dStartWidth;
                    _nextData11.dEndWidth = dEndWidth;
                    _nextData11.pt = _nextPoint;
                    _nextData11.dBluge = 0;
                    vecData[vecData.length - 1].dBulge = retBulge.val;
                    vecData.push(_nextData11);
                    _iSize9 = vecData.length;
                    if (_iSize9 >= 2) {
                      _pPolyline12 = new McDbPolyline();
                      _pPolyline12.addVertexAt(vecData[_iSize9 - 2].pt, vecData[_iSize9 - 2].dBulge, vecData[_iSize9 - 2].dStartWidth, vecData[_iSize9 - 2].dEndWidth);
                      _pPolyline12.addVertexAt(vecData[_iSize9 - 1].pt);
                      vecTmpObjectId.push(mxcad.drawEntity(_pPolyline12));
                    }
                  } else {
                    MxFun.acutPrintf(_ML_String("ID_ENDPOINT_INVALID1", "\\n \\u7AEF\\u70B9 *\\u65E0\\u6548*"));
                  }
                  _context.next = 461;
                  break;
                case 460:
                  return _context.abrupt("return", 0);
                case 461:
                  _context.next = 492;
                  break;
                case 463:
                  if (!_getNextPoint.isKeyWordPicked("W")) {
                    _context.next = 485;
                    break;
                  }
                  _getWidth3 = new MxCADUiPrDist();
                  _getWidth3.setMessage(_ML_String("ID_ARX_PLGETSTARTWIDTH", "\\u6307\\u5B9A\\u8D77\\u70B9\\u5BBD\\u5EA6"));
                  _context.next = 468;
                  return _getWidth3.go();
                case 468:
                  _dWVal3 = _context.sent;
                  if (!(_dWVal3 === null)) {
                    _context.next = 471;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 471:
                  dStartWidth = _getWidth3.value();
                  _getWidth3.setMessage(_ML_String("ID_ARX_PLGETVERITXWIDTH", "\\u6307\\u5B9A\\u7AEF\\u70B9\\u5BBD\\u5EA6"));
                  _context.next = 475;
                  return _getWidth3.go();
                case 475:
                  _dWVal3 = _context.sent;
                  if (!(_dWVal3 === null)) {
                    _context.next = 478;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 478:
                  dEndWidth = _getWidth3.value();
                  s_dWidth = dEndWidth;
                  vecData[vecData.length - 1].dStartWidth = dStartWidth;
                  vecData[vecData.length - 1].dEndWidth = dEndWidth;
                  dStartWidth = dEndWidth;
                  _context.next = 492;
                  break;
                case 485:
                  if (!_getNextPoint.isKeyWordPicked("C")) {
                    _context.next = 491;
                    break;
                  }
                  vecData[vecData.length - 1].dBulge = CMxDrawPolylineDragArcDraw_CalcArcBulge(userDrawFristData.pt, firstPoint, isCtrl ? vecArcTangent.clone().negate() : vecArcTangent);
                  isClose = true;
                  return _context.abrupt("return", 0);
                case 491:
                  if (_getNextPoint.isKeyWordPicked("U")) {
                    if (vecData.length > 1) {
                      vecData.pop();
                      vecTmpObjectId[vecTmpObjectId.length - 1].erase();
                      vecTmpObjectId.pop();
                      if (vecData.length > 0) {
                        _getNextPoint.setLastInputPoint(vecData[vecData.length - 1].pt);
                      }
                    }
                  }
                case 492:
                  _context.next = 495;
                  break;
                case 494:
                  return _context.abrupt("return", 0);
                case 495:
                case "end":
                  return _context.stop();
              }
            }, _loop);
          });
        case 29:
          return _context2.delegateYield(_loop(), "t0", 31);
        case 31:
          _ret = _context2.t0;
          if (!(_ret === 0)) {
            _context2.next = 34;
            break;
          }
          return _context2.abrupt("break", 40);
        case 34:
          if (!(_ret === 1)) {
            _context2.next = 36;
            break;
          }
          return _context2.abrupt("continue", 29);
        case 36:
          if (!_ret) {
            _context2.next = 38;
            break;
          }
          return _context2.abrupt("return", _ret.v);
        case 38:
          _context2.next = 29;
          break;
        case 40:
          if (isAutoClose) isClose = true;
          for (i = 0; i < vecTmpObjectId.length; i++) {
            vecTmpObjectId[i].erase();
          }
          if (!(vecData.length > 1)) {
            _context2.next = 47;
            break;
          }
          pNew = new McDbPolyline();
          for (_i = 0; _i < vecData.length; _i++) {
            pNew.addVertexAt(vecData[_i].pt, vecData[_i].dBulge, vecData[_i].dStartWidth, vecData[_i].dEndWidth);
          }
          pNew.isClosed = isClose;
          return _context2.abrupt("return", mxcad.drawEntity(pNew));
        case 47:
          window.removeEventListener("keydown", onKeydown);
          window.removeEventListener("keyup", onkeyup);
        case 49:
        case "end":
          return _context2.stop();
      }
    }, _callee);
  }));
  return _drawPolyLine.apply(this, arguments);
}
MxFun.on("init", function () {
  MxFun.addCommand("Mx_Pline", drawPolyLine);
});

function computeRegularPolygonVertices() {
  var centerPoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new McGePoint3d();
  var vertexPoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new McGePoint3d();
  var sides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
  var verticesArray = [];
  sides = Math.max(3, sides);
  verticesArray.push(vertexPoint);
  var angleIncrement = Math.PI * 2 / sides;
  for (var i = 1; i < sides; i++) {
    var cosValue = Math.cos(angleIncrement * i),
      sinValue = Math.sin(angleIncrement * i);
    var startPt = centerPoint.clone();
    var endPt = vertexPoint.clone();
    var deltaX = endPt.x - startPt.x;
    var deltaY = endPt.y - startPt.y;
    var newX = deltaX * cosValue - deltaY * sinValue + startPt.x;
    var newY = deltaX * sinValue + deltaY * cosValue + startPt.y;
    var point = new McGePoint3d(newX, newY);
    verticesArray.push(point);
  }
  return verticesArray;
}
function computePolygonVerticesFromMidpoint() {
  var centerPoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new McGePoint3d();
  var edgeMidPoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new McGePoint3d();
  var sides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
  var midX = edgeMidPoint.x;
  var midY = edgeMidPoint.y;
  var centerX = centerPoint.x;
  var centerY = centerPoint.y;
  var numberOfSides = Math.max(3, sides);
  var distanceToCenter = Math.sqrt(Math.pow(midX - centerX, 2) + Math.pow(midY - centerY, 2));
  var radius = distanceToCenter / Math.cos(Math.PI / numberOfSides);
  var startAngle = Math.atan2(midY - centerY, midX - centerX) - Math.PI / numberOfSides;
  var vertices = [];
  for (var i = 0; i < numberOfSides; i++) {
    var angle = startAngle + i * 2 * Math.PI / numberOfSides;
    var x = centerX + radius * Math.cos(angle);
    var y = centerY + radius * Math.sin(angle);
    vertices.push(new McGePoint3d(x, y));
  }
  return vertices;
}
function computePolygonVerticesFromEdge(startPoint, endPoint, sides) {
  var dx = endPoint.x - startPoint.x;
  var dy = endPoint.y - startPoint.y;
  var length = Math.sqrt(dx * dx + dy * dy);
  var angle = Math.atan2(dy, dx);
  var angleIncrement = 2 * Math.PI / Math.max(3, sides);
  var polygonVertices = [startPoint, endPoint];
  for (var i = 0; i < sides; i++) {
    var x = startPoint.x + length * Math.cos(angle + i * angleIncrement);
    var y = startPoint.y + length * Math.sin(angle + i * angleIncrement);
    startPoint = new McGePoint3d(x, y);
    polygonVertices.push(startPoint);
  }
  return polygonVertices;
}
function drawPolygon() {
  return _drawPolygon.apply(this, arguments);
}
function _drawPolygon() {
  _drawPolygon = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
    var sideNum, centerPoint, isTangentToTheCircle, startPoint, endPoint, radius, getPoint, getNum, drawToEdgePolygon, createMcDbPolyline, edgeMidPoint, vec, getDist, _radius;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          if (sideNum) {
            _context2.next = 11;
            break;
          }
          getNum = new MxCADUiPrInt();
          getNum.setMessage("\\n\\u8F93\\u5165\\u4FA7\\u9762\\u6570 <5>");
          _context2.next = 6;
          return getNum.go();
        case 6:
          sideNum = _context2.sent;
          if (!(getNum.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
            _context2.next = 9;
            break;
          }
          return _context2.abrupt("return");
        case 9:
          if (getNum.getStatus() === MrxDbgUiPrBaseReturn.kNone) {
            sideNum = 5;
          }
          getNum.clearLastInputPoint();
        case 11:
          drawToEdgePolygon = /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
              var createStarEndPointPolygon;
              return regenerator.wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    createStarEndPointPolygon = function createStarEndPointPolygon(currentPoint) {
                      var pPolyline = new McDbPolyline();
                      var points = computePolygonVerticesFromEdge(startPoint, currentPoint, sideNum || 5);
                      points.forEach(function (point) {
                        pPolyline.addVertexAt(point);
                      });
                      pPolyline.isClosed = true;
                      return pPolyline;
                    };
                    if (startPoint) {
                      _context.next = 10;
                      break;
                    }
                    getPoint.setMessage("\\n\\u6307\\u5B9A\\u8FB9\\u7684\\u7B2C\\u4E00\\u4E2A\\u7AEF\\u70B9");
                    getPoint.setKeyWords("");
                    _context.next = 6;
                    return getPoint.go();
                  case 6:
                    startPoint = _context.sent;
                    if (startPoint) {
                      _context.next = 9;
                      break;
                    }
                    return _context.abrupt("return");
                  case 9:
                    getPoint.setUserDraw(function (currentPoint, pWorldDraw) {
                      pWorldDraw.drawMcDbEntity(createStarEndPointPolygon(currentPoint));
                    });
                  case 10:
                    if (endPoint) {
                      _context.next = 15;
                      break;
                    }
                    getPoint.setMessage("\\n\\u6307\\u5B9A\\u8FB9\\u7684\\u7B2C\\u4E8C\\u4E2A\\u7AEF\\u70B9");
                    _context.next = 14;
                    return getPoint.go();
                  case 14:
                    endPoint = _context.sent;
                  case 15:
                    if (endPoint) {
                      _context.next = 17;
                      break;
                    }
                    return _context.abrupt("return");
                  case 17:
                    MxCpp.getCurrentMxCAD().drawEntity(createStarEndPointPolygon(endPoint));
                  case 18:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            return function drawToEdgePolygon() {
              return _ref.apply(this, arguments);
            };
          }();
          {
            _context2.next = 16;
            break;
          }
        case 15:
          return _context2.abrupt("return", _context2.sent);
        case 16:
          getPoint.setMessage("\\n\\u6307\\u5B9A\\u6B63\\u591A\\u53D8\\u5F62\\u7684\\u4E2D\\u5FC3\\u70B9");
          getPoint.setKeyWords("[\\u8FB9(E)]");
          getPoint.setCursorType(MxCursorType.kCross);
          if (centerPoint) {
            _context2.next = 23;
            break;
          }
          _context2.next = 22;
          return getPoint.go();
        case 22:
          centerPoint = _context2.sent;
        case 23:
          if (centerPoint) {
            _context2.next = 28;
            break;
          }
          if (!getPoint.isKeyWordPicked("e")) {
            _context2.next = 27;
            break;
          }
          _context2.next = 27;
          return drawToEdgePolygon();
        case 27:
          return _context2.abrupt("return");
        case 28:
          if (!(typeof isTangentToTheCircle !== "boolean")) {
            _context2.next = 38;
            break;
          }
          getPoint.setMessage("\\n\\u8F93\\u5165\\u9009\\u9879");
          getPoint.setKeyWords("[\\u5185\\u63A5\\u4E8E\\u5706(I)/\\u5916\\u5207\\u4E8E\\u5706(C)]");
          getPoint.clearLastInputPoint();
          _context2.next = 34;
          return getPoint.go();
        case 34:
          if (!(getPoint.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
            _context2.next = 36;
            break;
          }
          return _context2.abrupt("return");
        case 36:
          if (getPoint.isKeyWordPicked("i")) isTangentToTheCircle = false;
          if (getPoint.isKeyWordPicked("c")) isTangentToTheCircle = true;
        case 38:
          createMcDbPolyline = function createMcDbPolyline(currentPoint) {
            var drawColor = MxCpp.getCurrentMxCAD().getCurrentDatabaseDrawColor();
            var pPolyline = new McDbPolyline();
            pPolyline.trueColor = new McCmColor(drawColor);
            var points = isTangentToTheCircle ? computePolygonVerticesFromMidpoint(centerPoint, currentPoint, sideNum) : computeRegularPolygonVertices(centerPoint, currentPoint, sideNum);
            points.forEach(function (pt) {
              pPolyline.addVertexAt(pt);
            });
            pPolyline.isClosed = true;
            return pPolyline;
          };
          vec = new McGeVector3d();
          if (radius) {
            _context2.next = 52;
            break;
          }
          getDist = new MxCADUiPrDist();
          getDist.setBasePt(centerPoint);
          getDist.setUserDraw(function (currentPoint, pWorldDraw) {
            pWorldDraw.drawMcDbEntity(createMcDbPolyline(currentPoint));
            if (centerPoint) vec = currentPoint.sub(centerPoint);
          });
          getDist.setMessage(_ML_String("McDbPolyline_Radius", "\\n\\u6307\\u5B9A\\u5706\\u7684\\u534A\\u5F84"));
          getDist.setKeyWords("");
          _context2.next = 48;
          return getDist.go();
        case 48:
          _radius = _context2.sent;
          if (_radius) {
            _context2.next = 51;
            break;
          }
          return _context2.abrupt("return");
        case 51:
          radius = _radius;
        case 52:
          vec = vec.normalize().mult(radius);
          edgeMidPoint = centerPoint.clone().addvec(vec);
          MxCpp.getCurrentMxCAD().drawEntity(createMcDbPolyline(edgeMidPoint), true);
        case 55:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _drawPolygon.apply(this, arguments);
}
MxFun.addCommand("Mx_Polygon", drawPolygon);

function calculateEndPoint(centerX, centerY, startX, startY, chordLength, radius) {
  var vectorX = startX - centerX;
  var vectorY = startY - centerY;
  var theta = chordLength / radius;
  var endX = vectorX * Math.cos(theta) - vectorY * Math.sin(theta);
  var endY = vectorX * Math.sin(theta) + vectorY * Math.cos(theta);
  endX += centerX;
  endY += centerY;
  return new McGePoint3d(endX, endY);
}
function findArcCenterWithRadius(P1, P2, radius) {
  var d = Math.sqrt(Math.pow(radius, 2) - (Math.pow(P1.x - P2.x, 2) + Math.pow(P1.y - P2.y, 2)) / 4);
  var M = {
    x: (P1.x + P2.x) / 2,
    y: (P1.y + P2.y) / 2
  };
  return new McGePoint3d(M.x - d * (P2.y - P1.y) / Math.sqrt(Math.pow(P1.x - P2.x, 2) + Math.pow(P1.y - P2.y, 2)), M.y - d * (P1.x - P2.x) / Math.sqrt(Math.pow(P1.x - P2.x, 2) + Math.pow(P1.y - P2.y, 2)));
}
function findEndAngle(C, P1, P2, startAngle) {
  var V1 = {
    x: P1.x - C.x,
    y: P1.y - C.y
  };
  var V2 = {
    x: P2.x - C.x,
    y: P2.y - C.y
  };
  var theta1 = Math.atan2(V1.y, V1.x);
  var theta2 = Math.atan2(V2.y, V2.x);
  var deltaTheta = theta2 - theta1;
  if (deltaTheta < 0) {
    deltaTheta += 2 * Math.PI;
  }
  var endAngle = startAngle + deltaTheta;
  return endAngle;
}
function findEndPoint(C, startAngle, centralAngle, radius) {
  var endAngle = startAngle + centralAngle;
  return new McGePoint3d(C.x + radius * Math.cos(endAngle), C.y + radius * Math.sin(endAngle));
}
function calculateChordLength(C, P1, P2) {
  var radius = Math.sqrt(Math.pow(P1.x - C.x, 2) + Math.pow(P1.y - C.y, 2));
  var V1 = {
    x: P1.x - C.x,
    y: P1.y - C.y
  };
  var V2 = {
    x: P2.x - C.x,
    y: P2.y - C.y
  };
  var dotProduct = V1.x * V2.x + V1.y * V2.y;
  var crossProduct = V1.x * V2.y - V1.y * V2.x;
  var theta = Math.atan2(crossProduct, dotProduct);
  var chordLength = 2 * radius * Math.sin(theta / 2);
  return chordLength;
}
function drawArc() {
  return _drawArc.apply(this, arguments);
}
function _drawArc() {
  _drawArc = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
    var mxcad, getPoint, arc, startPoint, anyPoint, endPoint, center, angle, angle1, radius, draw, msg, key, isOpposite, keydown, keyup, onEventCtrlDown, guideLine, color, isCenterArc, currentBranch, drawCenterArc, draw3PArc, _loop, _ret;
    return regenerator.wrap(function _callee2$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          mxcad = MxCpp.getCurrentMxCAD();
          getPoint = new MxCADUiPrPoint();
          arc = new McDbArc();
          draw = function draw() {};
          msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u8D77\\u70B9:";
          key = "[\\u5706\\u5FC3(C)]";
          isOpposite = false;
          keydown = function keydown(e) {
            if (e.ctrlKey) {
              isOpposite = true;
            }
          };
          keyup = function keyup() {
            isOpposite = false;
          };
          onEventCtrlDown = function onEventCtrlDown() {
            window.removeEventListener("keydown", keydown);
            window.removeEventListener("keyup", keyup);
            window.addEventListener("keydown", keydown);
            window.addEventListener("keyup", keyup);
          };
          guideLine = new McDbLine();
          color = new McCmColor();
          color.setRGB(255, 211, 13);
          guideLine.trueColor = color;
          guideLine.linetype = "ACAD_ISO02W100";
          isCenterArc = false;
          drawCenterArc = function drawCenterArc(currentPoint, pWorldDraw) {
            if (isOpposite) {
              arc.startAngle = angle1;
              arc.endAngle = angle;
            } else {
              arc.startAngle = angle;
              arc.endAngle = angle1;
            }
            arc.radius = radius;
            arc.center = center;
            guideLine.endPoint = currentPoint;
            pWorldDraw.drawMcDbEntity(arc);
            pWorldDraw.drawMcDbEntity(guideLine);
          };
          draw3PArc = function draw3PArc(pWorldDraw) {
            arc.computeArc(startPoint.x, startPoint.y, anyPoint.x, anyPoint.y, endPoint.x, endPoint.y);
            pWorldDraw.drawMcDbEntity(arc);
          };
          _loop = /*#__PURE__*/regenerator.mark(function _loop() {
            var point, pt, chordLength, run, _pt, pl, _pt2, length, _pt3;
            return regenerator.wrap(function _loop$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  getPoint.setUserDraw(draw);
                  getPoint.setMessage(msg);
                  getPoint.setKeyWords(key);
                  _context2.next = 5;
                  return getPoint.go();
                case 5:
                  point = _context2.sent;
                  if (!getPoint.isKeyWordPicked("C")) {
                    _context2.next = 30;
                    break;
                  }
                  currentBranch = "C";
                  isCenterArc = true;
                  if (!startPoint) {
                    _context2.next = 27;
                    break;
                  }
                  getPoint.setMessage("\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u5706\\u5FC3");
                  getPoint.setKeyWords("");
                  _context2.next = 14;
                  return getPoint.go();
                case 14:
                  pt = _context2.sent;
                  if (pt) {
                    _context2.next = 17;
                    break;
                  }
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 17:
                  center = pt;
                  msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411)";
                  key = "[\\u89D2\\u5EA6(A)/\\u5F26\\u957F(L)/\\u4FEE\\u6539\\u534A\\u5F84(R)]";
                  getPoint.setLastInputPoint(center);
                  guideLine.startPoint = center;
                  radius = center.distanceTo(startPoint);
                  draw = function draw(currentPoint, pWorldDraw) {
                    angle = angleTo(center.x, center.y, startPoint.x, startPoint.y) - Math.PI;
                    angle1 = angleTo(center.x, center.y, currentPoint.x, currentPoint.y) - Math.PI;
                    guideLine.endPoint = currentPoint;
                    drawCenterArc(currentPoint, pWorldDraw);
                  };
                  onEventCtrlDown();
                  _context2.next = 29;
                  break;
                case 27:
                  msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u5706\\u5FC3";
                  key = "";
                case 29:
                  return _context2.abrupt("return", 0);
                case 30:
                  if (!isCenterArc) {
                    _context2.next = 124;
                    break;
                  }
                  if (!getPoint.isKeyWordPicked("R")) {
                    _context2.next = 55;
                    break;
                  }
                  if (!(currentBranch === "E")) {
                    _context2.next = 41;
                    break;
                  }
                  chordLength = 0;
                  run = /*#__PURE__*/function () {
                    var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
                      var pt;
                      return regenerator.wrap(function _callee$(_context) {
                        while (1) switch (_context.prev = _context.next) {
                          case 0:
                            getPoint.setLastInputPoint(startPoint);
                            getPoint.setMessage("\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u534A\\u5F84(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411)");
                            getPoint.setKeyWords("");
                            getPoint.setLastInputPoint(startPoint);
                            guideLine.startPoint = startPoint;
                            onEventCtrlDown();
                            draw = function draw(currentPoint, pWorldDraw) {
                              if (chordLength < 0) {
                                guideLine.endPoint = currentPoint;
                                pWorldDraw.drawMcDbEntity(guideLine);
                                chordLength = 0;
                              } else {
                                radius = currentPoint.distanceTo(startPoint);
                                center = findArcCenterWithRadius(startPoint, endPoint, radius);
                                angle = angleTo(center.x, center.y, startPoint.x, startPoint.y) - Math.PI;
                                angle1 = angleTo(center.x, center.y, endPoint.x, endPoint.y) - Math.PI;
                                drawCenterArc(currentPoint, pWorldDraw);
                                chordLength = calculateChordLength(center, startPoint, endPoint);
                              }
                            };
                            getPoint.setUserDraw(draw);
                            _context.next = 10;
                            return getPoint.go();
                          case 10:
                            pt = _context.sent;
                            if (pt) {
                              _context.next = 13;
                              break;
                            }
                            return _context.abrupt("return", true);
                          case 13:
                            chordLength = calculateChordLength(center, startPoint, endPoint);
                            if (!(chordLength < 0)) {
                              _context.next = 20;
                              break;
                            }
                            MxFun.acutPrintf("\\n\\u534A\\u5F84\\u4E0D\\u80FD\\u5C0F\\u4E8E\\u5F26\\u957F\\u7684\\u4E00\\u534A\\uFF0C\\u5F26\\u957F\\u4E3A" + chordLength);
                            chordLength = 0;
                            _context.next = 19;
                            return run();
                          case 19:
                            return _context.abrupt("return", _context.sent);
                          case 20:
                            mxcad.drawEntity(arc);
                          case 21:
                          case "end":
                            return _context.stop();
                        }
                      }, _callee);
                    }));
                    return function run() {
                      return _ref.apply(this, arguments);
                    };
                  }();
                  _context2.next = 37;
                  return run();
                case 37:
                  _context2.t0 = _context2.sent;
                  return _context2.abrupt("return", {
                    v: _context2.t0
                  });
                case 41:
                  getPoint.setLastInputPoint(center);
                  getPoint.setMessage(_ML_String("draw_arc_id", "\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u534A\\u5F84<" + arc.radius + ">"));
                  getPoint.setKeyWords("");
                  getPoint.setUserDraw(function (currentPoint, pWorldDraw) {
                    guideLine.startPoint = center;
                    guideLine.endPoint = currentPoint;
                    pWorldDraw.drawMcDbEntity(guideLine);
                  });
                  _context2.next = 47;
                  return getPoint.go();
                case 47:
                  _pt = _context2.sent;
                  if (_pt) {
                    _context2.next = 50;
                    break;
                  }
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 50:
                  radius = _pt.distanceTo(center);
                  msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411)";
                  key = "[\\u89D2\\u5EA6(A)/\\u5F26\\u957F(L)/\\u4FEE\\u6539\\u534A\\u5F84(R)]";
                  onEventCtrlDown();
                case 54:
                  return _context2.abrupt("return", 0);
                case 55:
                  if (!getPoint.isKeyWordPicked("A")) {
                    _context2.next = 74;
                    break;
                  }
                  if (!(currentBranch === "C" || currentBranch === "L")) {
                    _context2.next = 66;
                    break;
                  }
                  msg = "\\u6307\\u5B9A\\u5706\\u5F27\\u5939\\u89D2(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411)";
                  key = "[\\u4FEE\\u6539\\u534A\\u5F84(R)]";
                  angle = Math.PI + angleTo(center.x, center.y, startPoint.x, startPoint.y);
                  getPoint.setLastInputPoint(center);
                  guideLine.startPoint = center;
                  if (!radius) radius = center.distanceTo(startPoint);
                  draw = function draw(currentPoint, pWorldDraw) {
                    var cneterAngle = angleTo(center.x, center.y, currentPoint.x, currentPoint.y) - Math.PI;
                    endPoint = findEndPoint(center, angle, cneterAngle, radius);
                    angle1 = findEndAngle(center, startPoint, endPoint, angle);
                    drawCenterArc(currentPoint, pWorldDraw);
                  };
                  onEventCtrlDown();
                  return _context2.abrupt("return", 0);
                case 66:
                  if (!(currentBranch === "E")) {
                    _context2.next = 74;
                    break;
                  }
                  msg = "\\u6307\\u5B9A\\u5706\\u5F27\\u5939\\u89D2(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411)";
                  key = "";
                  getPoint.setLastInputPoint(startPoint);
                  guideLine.startPoint = startPoint;
                  draw = function draw(currentPoint, pWorldDraw) {
                    var centerAngle = angleTo(startPoint.x, startPoint.y, currentPoint.x, currentPoint.y) - Math.PI;
                    center = findArcCenter(startPoint, endPoint, centerAngle);
                    radius = center.distanceTo(startPoint);
                    angle = angleTo(center.x, center.y, startPoint.x, startPoint.y) - Math.PI;
                    angle1 = angleTo(center.x, center.y, endPoint.x, endPoint.y) - Math.PI;
                    drawCenterArc(currentPoint, pWorldDraw);
                  };
                  onEventCtrlDown();
                  return _context2.abrupt("return", 0);
                case 74:
                  if (!getPoint.isKeyWordPicked("L")) {
                    _context2.next = 83;
                    break;
                  }
                  currentBranch = "L";
                  msg = "\\n\\u6307\\u5B9A\\u5F26\\u957F(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411)";
                  key = "[\\u4FEE\\u6539\\u534A\\u5F84(R)]";
                  getPoint.setLastInputPoint(startPoint);
                  guideLine.startPoint = startPoint;
                  draw = function draw(currentPoint, pWorldDraw) {
                    var length = currentPoint.distanceTo(startPoint);
                    if (length > radius * 2) {
                      guideLine.endPoint = currentPoint;
                      pWorldDraw.drawMcDbEntity(guideLine);
                      return;
                    }
                    endPoint = calculateEndPoint(center.x, center.y, startPoint.x, startPoint.y, length, arc.radius);
                    angle1 = angleTo(center.x, center.y, endPoint.x, endPoint.y) - Math.PI;
                    drawCenterArc(currentPoint, pWorldDraw);
                  };
                  onEventCtrlDown();
                  return _context2.abrupt("return", 0);
                case 83:
                  if (!getPoint.isKeyWordPicked("D")) {
                    _context2.next = 98;
                    break;
                  }
                  getPoint.setMessage("\\n\\u6307\\u5B9A\\u5706\\u5F27\\u8D77\\u70B9\\u7684\\u5207\\u5411(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411");
                  getPoint.setKeyWords("");
                  getPoint.setLastInputPoint(startPoint);
                  guideLine.startPoint = startPoint;
                  pl = new McDbPolyline();
                  onEventCtrlDown();
                  getPoint.setUserDraw(function (currentPoint, pWorldDraw) {
                    startPoint = startPoint;
                    endPoint = endPoint;
                    var vecArcTangent = currentPoint.sub(startPoint);
                    var bulge = CMxDrawPolylineDragArcDraw_CalcArcBulge(isOpposite ? startPoint : endPoint, isOpposite ? endPoint : startPoint, vecArcTangent);
                    pl = new McDbPolyline();
                    pl.addVertexAt(startPoint, bulge);
                    pl.addVertexAt(endPoint);
                    guideLine.endPoint = currentPoint;
                    pWorldDraw.drawMcDbEntity(pl);
                    pWorldDraw.drawMcDbEntity(guideLine);
                  });
                  _context2.next = 93;
                  return getPoint.go();
                case 93:
                  _pt2 = _context2.sent;
                  if (_pt2) {
                    _context2.next = 96;
                    break;
                  }
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 96:
                  mxcad.drawEntity(pl);
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 98:
                  if (point) {
                    _context2.next = 100;
                    break;
                  }
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 100:
                  if (!(currentBranch === "L")) {
                    _context2.next = 106;
                    break;
                  }
                  length = point.distanceTo(startPoint);
                  if (!(length > radius * 2)) {
                    _context2.next = 106;
                    break;
                  }
                  getPoint.clearLastInputPoint();
                  MxFun.acutPrintf("\\n\\u5F26\\u957F\\u4E0D\\u80FD\\u8D85\\u51FA\\u534A\\u5F84\\u7684\\u4E24\\u500D\\uFF0C\\u534A\\u5F84\\u4E3A" + radius);
                  return _context2.abrupt("return", 0);
                case 106:
                  if (center) {
                    _context2.next = 111;
                    break;
                  }
                  center = point;
                  msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u8D77\\u70B9";
                  draw = function draw(currentPoint, pWorldDraw) {
                    pWorldDraw.drawLine(currentPoint.toVector3(), center.toVector3());
                  };
                  return _context2.abrupt("return", 0);
                case 111:
                  if (startPoint) {
                    _context2.next = 122;
                    break;
                  }
                  startPoint = point;
                  angle = angleTo(center.x, center.y, startPoint.x, startPoint.y) - Math.PI;
                  radius = startPoint.distanceTo(center);
                  msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411)";
                  key = "[\\u89D2\\u5EA6(A)/\\u5F26\\u957F(L)/\\u4FEE\\u6539\\u534A\\u5F84(R)]";
                  getPoint.setLastInputPoint(center);
                  guideLine.startPoint = center;
                  draw = function draw(currentPoint, pWorldDraw) {
                    angle1 = angleTo(center.x, center.y, currentPoint.x, currentPoint.y) - Math.PI;
                    drawCenterArc(currentPoint, pWorldDraw);
                  };
                  onEventCtrlDown();
                  return _context2.abrupt("return", 0);
                case 122:
                  mxcad.drawEntity(arc);
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 124:
                  if (!getPoint.isKeyWordPicked("E")) {
                    _context2.next = 146;
                    break;
                  }
                  currentBranch = "E";
                  getPoint.clearLastInputPoint();
                  getPoint.setMessage("\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9");
                  getPoint.setKeyWords("");
                  guideLine.startPoint = startPoint;
                  startPoint = startPoint;
                  getPoint.setUserDraw(function (currentPoint, pWorldDraw) {
                    guideLine.endPoint = currentPoint;
                    pWorldDraw.drawMcDbEntity(guideLine);
                  });
                  _context2.next = 134;
                  return getPoint.go();
                case 134:
                  _pt3 = _context2.sent;
                  if (_pt3) {
                    _context2.next = 137;
                    break;
                  }
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 137:
                  endPoint = _pt3;
                  isCenterArc = true;
                  msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u5706\\u5FC3(\\u6309\\u4F4F ctrl \\u952E\\u53D6\\u76F8\\u53CD\\u65B9\\u5411)";
                  key = "[\\u89D2\\u5EA6(A)/\\u65B9\\u5411(D)/\\u534A\\u5F84(R)]";
                  getPoint.setLastInputPoint(endPoint);
                  guideLine.startPoint = endPoint;
                  draw = function draw(currentPoint, pWorldDraw) {
                    center = currentPoint;
                    radius = center.distanceTo(startPoint);
                    angle = angleTo(center.x, center.y, startPoint.x, startPoint.y) - Math.PI;
                    angle1 = angleTo(center.x, center.y, endPoint.x, endPoint.y) - Math.PI;
                    drawCenterArc(currentPoint, pWorldDraw);
                  };
                  onEventCtrlDown();
                  return _context2.abrupt("return", 0);
                case 146:
                  if (point) {
                    _context2.next = 148;
                    break;
                  }
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 148:
                  if (startPoint) {
                    _context2.next = 155;
                    break;
                  }
                  startPoint = point;
                  msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7B2C\\u4E8C\\u4E2A\\u70B9";
                  key = "[\\u5706\\u5FC3(C)/\\u7AEF\\u70B9(E)]";
                  draw = function draw(currentPoint, pWorldDraw) {
                    pWorldDraw.drawLine(startPoint.toVector3(), currentPoint.toVector3());
                  };
                  getPoint.clearLastInputPoint();
                  return _context2.abrupt("return", 0);
                case 155:
                  if (anyPoint) {
                    _context2.next = 161;
                    break;
                  }
                  anyPoint = point;
                  msg = "\\n\\u6307\\u5B9A\\u5706\\u5F27\\u7684\\u7AEF\\u70B9";
                  key = "";
                  draw = function draw(currentPoint, pWorldDraw) {
                    endPoint = currentPoint;
                    draw3PArc(pWorldDraw);
                  };
                  return _context2.abrupt("return", 0);
                case 161:
                  draw(anyPoint, {
                    drawMcDbEntity: function drawMcDbEntity(mcdbEntity) {
                      MxCpp.getCurrentMxCAD().drawEntity(mcdbEntity, true);
                    }
                  });
                  return _context2.abrupt("return", {
                    v: void 0
                  });
                case 163:
                case "end":
                  return _context2.stop();
              }
            }, _loop);
          });
        case 19:
          return _context3.delegateYield(_loop(), "t0", 21);
        case 21:
          _ret = _context3.t0;
          if (!(_ret === 0)) {
            _context3.next = 24;
            break;
          }
          return _context3.abrupt("continue", 19);
        case 24:
          if (!_ret) {
            _context3.next = 26;
            break;
          }
          return _context3.abrupt("return", _ret.v);
        case 26:
          _context3.next = 19;
          break;
        case 28:
        case "end":
          return _context3.stop();
      }
    }, _callee2);
  }));
  return _drawArc.apply(this, arguments);
}
MxFun.on("init", function () {
  MxFun.addCommand("Mx_Arc", drawArc);
});

function drawEllipticalArc() {
  return _drawEllipticalArc.apply(this, arguments);
}
function _drawEllipticalArc() {
  _drawEllipticalArc = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
    var center, majorAxis, minorAxis, radiusRatio, startAngle, endAngle, rotation, createEllipse, _loop, _ret;
    return regenerator.wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          radiusRatio = 1;
          startAngle = 0;
          endAngle = Math.PI * 2;
          rotation = 0;
          createEllipse = function createEllipse() {
            var ellipse = new McDbEllipse();
            ellipse.center = center;
            ellipse.majorAxis = majorAxis;
            ellipse.minorAxis = minorAxis;
            ellipse.radiusRatio = radiusRatio;
            ellipse.startAngle = startAngle;
            ellipse.endAngle = endAngle;
            ellipse.rotate(center, rotation);
            return ellipse;
          };
          _loop = /*#__PURE__*/regenerator.mark(function _loop() {
            var getPoint, axisEndPoint, xRadius, axisEndPoint1, point, getDist, length, val2, yRadius, offsetAngle, val, val1, _val;
            return regenerator.wrap(function _loop$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  getPoint = new MxCADUiPrPoint();
                  getPoint.setMessage("\\u6307\\u5B9A\\u692D\\u5706\\u5F27\\u7684\\u8F74\\u7AEF\\u70B9");
                  getPoint.setKeyWords("[\\u4E2D\\u5FC3\\u70B9(C)]");
                  _context.next = 5;
                  return getPoint.go();
                case 5:
                  axisEndPoint = _context.sent;
                  xRadius = 0;
                  axisEndPoint1 = null;
                  if (!getPoint.isKeyWordPicked("C")) {
                    _context.next = 29;
                    break;
                  }
                  getPoint.setMessage("\\u6307\\u5B9A\\u692D\\u5706\\u5F27\\u7684\\u4E2D\\u5FC3\\u70B9");
                  getPoint.setKeyWords("");
                  getPoint.clearLastInputPoint();
                  _context.next = 14;
                  return getPoint.go();
                case 14:
                  point = _context.sent;
                  if (point) {
                    _context.next = 17;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 17:
                  center = point;
                  getPoint.setMessage("\\u6307\\u5B9A\\u692D\\u5706\\u5F27\\u8F74\\u7684\\u7AEF\\u70B9");
                  getPoint.setBasePt(center);
                  _context.next = 22;
                  return getPoint.go();
                case 22:
                  axisEndPoint1 = _context.sent;
                  if (axisEndPoint1) {
                    _context.next = 25;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 25:
                  majorAxis = minorAxis = center.sub(axisEndPoint1);
                  xRadius = center.distanceTo(axisEndPoint1);
                  _context.next = 42;
                  break;
                case 29:
                  if (axisEndPoint) {
                    _context.next = 31;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 31:
                  getPoint.setBasePt(axisEndPoint);
                  getPoint.setMessage("\\u6307\\u5B9A\\u692D\\u5706\\u5F27\\u8F74\\u7684\\u53E6\\u4E00\\u4E2A\\u7AEF\\u70B9");
                  getPoint.setKeyWords("");
                  _context.next = 36;
                  return getPoint.go();
                case 36:
                  axisEndPoint1 = _context.sent;
                  if (axisEndPoint1) {
                    _context.next = 39;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 39:
                  center = new McGePoint3d((axisEndPoint.x + axisEndPoint1.x) / 2, (axisEndPoint.y + axisEndPoint1.y) / 2);
                  majorAxis = minorAxis = axisEndPoint.sub(axisEndPoint1);
                  xRadius = axisEndPoint.distanceTo(axisEndPoint1) / 2;
                case 42:
                  getDist = new MxCADUiPrDist();
                  getDist.setMessage(_ML_String("McDbEllipse_lengh", "\\u6307\\u5B9A\\u53E6\\u4E00\\u6761\\u534A\\u8F74\\u957F\\u5EA6"));
                  getDist.setKeyWords("[\\u65CB\\u8F6C(R)]");
                  getDist.setBasePt(center);
                  getDist.setUserDraw(function (pt, pw) {
                    var yRadius = center.distanceTo(pt) / 2;
                    radiusRatio = yRadius / xRadius;
                    var ellipseArc = createEllipse();
                    pw.drawMcDbEntity(ellipseArc);
                  });
                  _context.next = 49;
                  return getDist.go();
                case 49:
                  length = _context.sent;
                  if (!getDist.isKeyWordPicked("R")) {
                    _context.next = 63;
                    break;
                  }
                  getDist.setMessage(_ML_String("McDbEllipse_Rotation", "\\u6307\\u5B9A\\u7ED5\\u4E3B\\u8F74\\u65CB\\u8F6C\\u7684\\u89D2\\u5EA6"));
                  getDist.setKeyWords("");
                  getDist.setBasePt(center);
                  getDist.setUserDraw(function (pt, pw) {
                    var dx = Math.abs(pt.x - center.x);
                    var dy = Math.abs(pt.y - center.y);
                    var ratio = dx / (dx + dy);
                    radiusRatio = ratio;
                    var ellipseArc = createEllipse();
                    pw.drawMcDbEntity(ellipseArc);
                  });
                  _context.next = 57;
                  return getDist.go();
                case 57:
                  val2 = _context.sent;
                  if (val2) {
                    _context.next = 60;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 60:
                  if (getDist.getDetailedResult() === 8) {
                    radiusRatio = val2;
                  }
                  _context.next = 67;
                  break;
                case 63:
                  if (length) {
                    _context.next = 65;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 65:
                  yRadius = length / 2;
                  radiusRatio = yRadius / xRadius;
                case 67:
                  if (axisEndPoint1) {
                    _context.next = 69;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 69:
                  offsetAngle = Math.atan2(majorAxis.y, majorAxis.x) - Math.PI / 2;
                  getDist.setMessage(_ML_String("McDbEllipse_startAngle", "\\u6307\\u5B9A\\u8D77\\u70B9\\u89D2\\u5EA6"));
                  getDist.setKeyWords("");
                  getDist.setBasePt(center);
                  getDist.setUserDraw(function (pt, pw) {
                    var angle = Math.atan2(pt.y - center.y, pt.x - center.x);
                    startAngle = (angle - offsetAngle + Math.PI * 2) % (Math.PI * 2);
                    var ellipseArc = createEllipse();
                    pw.drawMcDbEntity(ellipseArc);
                  });
                  _context.next = 76;
                  return getDist.go();
                case 76:
                  val = _context.sent;
                  if (val) {
                    _context.next = 79;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 79:
                  if (getDist.getDetailedResult() === 8) {
                    startAngle = val;
                  }
                  getDist.clearLastInputPoint();
                  getDist.setBasePt(center);
                  getDist.setMessage(_ML_String("McDbEllipse_endAngle", "\\u6307\\u5B9A\\u7AEF\\u70B9\\u89D2\\u5EA6"));
                  getDist.setKeyWords("[\\u5939\\u89D2(I)]");
                  getDist.setUserDraw(function (pt, pw) {
                    var angle = Math.atan2(pt.y - center.y, pt.x - center.x);
                    endAngle = (angle - offsetAngle + Math.PI * 2) % (Math.PI * 2);
                    if (endAngle < startAngle) {
                      endAngle += Math.PI * 2;
                    }
                    var ellipseArc = createEllipse();
                    pw.drawMcDbEntity(ellipseArc);
                  });
                  _context.next = 87;
                  return getDist.go();
                case 87:
                  val1 = _context.sent;
                  if (!getDist.isKeyWordPicked("I")) {
                    _context.next = 99;
                    break;
                  }
                  getDist.setMessage(_ML_String("McDbEllipse_IncludedAngle", "\\u6307\\u5B9A\\u692D\\u5706\\u5F27\\u7684\\u5939\\u89D2"));
                  getDist.setKeyWords("");
                  getDist.setUserDraw(function (pt, pw) {
                    endAngle = angleTo(center.x, center.y, pt.x, pt.y);
                    var ellipseArc = createEllipse();
                    pw.drawMcDbEntity(ellipseArc);
                  });
                  _context.next = 94;
                  return getDist.go();
                case 94:
                  _val = _context.sent;
                  if (_val) {
                    _context.next = 97;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 97:
                  if (getDist.getDetailedResult() === 8) {
                    endAngle = _val;
                  }
                  return _context.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(createEllipse())
                  });
                case 99:
                  if (val1) {
                    _context.next = 101;
                    break;
                  }
                  return _context.abrupt("return", {
                    v: void 0
                  });
                case 101:
                  if (getDist.getDetailedResult() === 8) {
                    endAngle = val1;
                  }
                  return _context.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(createEllipse())
                  });
                case 103:
                case "end":
                  return _context.stop();
              }
            }, _loop);
          });
        case 6:
          return _context2.delegateYield(_loop(), "t0", 8);
        case 8:
          _ret = _context2.t0;
          if (!_ret) {
            _context2.next = 11;
            break;
          }
          return _context2.abrupt("return", _ret.v);
        case 11:
          _context2.next = 6;
          break;
        case 13:
        case "end":
          return _context2.stop();
      }
    }, _callee);
  }));
  return _drawEllipticalArc.apply(this, arguments);
}
function drawMxDbEllipse() {
  return _drawMxDbEllipse.apply(this, arguments);
}
function _drawMxDbEllipse() {
  _drawMxDbEllipse = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
    var getPoint, center, majorAxis, minorAxis, radiusRatio, startAngle, endAngle, createEllipse, _loop2, _ret2;
    return regenerator.wrap(function _callee2$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          radiusRatio = 1;
          startAngle = 0;
          endAngle = Math.PI * 2;
          getPoint.setMessage("\\n\\u6307\\u5B9A\\u692D\\u5706\\u7684\\u8F74\\u7AEF\\u70B9");
          getPoint.setKeyWords("[\\u5706\\u5F27(A)/\\u4E2D\\u5FC3\\u70B9(C)]");
          createEllipse = function createEllipse() {
            var ellipse = new McDbEllipse();
            ellipse.center = center;
            ellipse.majorAxis = majorAxis;
            ellipse.minorAxis = minorAxis;
            ellipse.radiusRatio = radiusRatio;
            ellipse.startAngle = startAngle;
            ellipse.endAngle = endAngle;
            return ellipse;
          };
          _loop2 = /*#__PURE__*/regenerator.mark(function _loop2() {
            var isGetAngle, isGetCenter, isDrawCenterArc, point, endPoint, centerPoint, point1, getDist, xRadius, drawEllipse, length, yRadius, offsetAngle, val, val1, val2, ellipse2, ellipse;
            return regenerator.wrap(function _loop2$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  isGetAngle = false;
                  isGetCenter = false;
                  isDrawCenterArc = false;
                  _context3.next = 5;
                  return getPoint.go();
                case 5:
                  point = _context3.sent;
                  if (!getPoint.isKeyWordPicked("A")) {
                    _context3.next = 17;
                    break;
                  }
                  getPoint.setMessage("\\n\\u6307\\u5B9A\\u692D\\u5706\\u5F27\\u7684\\u8F74\\u7AEF\\u70B9");
                  getPoint.setKeyWords("[\\u4E2D\\u5FC3\\u70B9(C)]");
                  _context3.next = 11;
                  return getPoint.go();
                case 11:
                  endPoint = _context3.sent;
                  if (getPoint.isKeyWordPicked("C")) {
                    isDrawCenterArc = true;
                  }
                  if (!(!endPoint && !isDrawCenterArc)) {
                    _context3.next = 15;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 15:
                  if (endPoint) {
                    point = endPoint;
                  }
                  isGetAngle = true;
                case 17:
                  if (!(getPoint.isKeyWordPicked("C") || isDrawCenterArc)) {
                    _context3.next = 27;
                    break;
                  }
                  getPoint.setMessage("\\n\\u6307\\u5B9A\\u692D\\u5706\\u4E2D\\u5FC3");
                  getPoint.setKeyWords("");
                  _context3.next = 22;
                  return getPoint.go();
                case 22:
                  centerPoint = _context3.sent;
                  if (centerPoint) {
                    _context3.next = 25;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 25:
                  center = point = centerPoint;
                  isGetCenter = true;
                case 27:
                  if (!(!point && !isGetAngle && !isGetCenter)) {
                    _context3.next = 29;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 29:
                  getPoint.setUserDraw(function (currentPoint, pWorldDraw) {
                    pWorldDraw.drawMcDbLine(point.x, point.y, point.z, currentPoint.x, currentPoint.y, currentPoint.z);
                  });
                  getPoint.setMessage(isGetCenter ? "\\n\\u6307\\u5B9A\\u692D\\u5706\\u8F74\\u7684\\u7AEF\\u70B9" : "\\n\\u6307\\u5B9A\\u692D\\u5706\\u8F74\\u7684\\u53E6\\u4E00\\u4E2A\\u7AEF\\u70B9");
                  getPoint.setKeyWords("");
                  _context3.next = 34;
                  return getPoint.go();
                case 34:
                  point1 = _context3.sent;
                  if (point1) {
                    _context3.next = 37;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 37:
                  center = isGetCenter ? point : new McGePoint3d((point.x + point1.x) / 2, (point.y + point1.y) / 2);
                  getDist = new MxCADUiPrDist();
                  getDist.setBasePt(center);
                  xRadius = point.distanceTo(point1) / 2;
                  minorAxis = majorAxis = point.sub(point1);
                  drawEllipse = function drawEllipse(currentPoint, pWorldDraw) {
                    var ellipse2 = createEllipse();
                    var line = new McDbLine(center, currentPoint);
                    line.trueColor = new McCmColor();
                    line.trueColor.setRGB(255, 255, 0);
                    pWorldDraw.drawMcDbEntity(line);
                    pWorldDraw.drawMcDbEntity(ellipse2);
                  };
                  getDist.setUserDraw(function (currentPoint, pWorldDraw) {
                    var yRadius = center.distanceTo(currentPoint) / 2;
                    radiusRatio = yRadius / xRadius;
                    drawEllipse(currentPoint, pWorldDraw);
                  });
                  getDist.setMessage(_ML_String("EllipticalArc_length", "\\u6307\\u5B9A\\u53E6\\u4E00\\u6761\\u534A\\u8F74\\u957F\\u5EA6"));
                  getDist.setKeyWords("");
                  _context3.next = 48;
                  return getDist.go();
                case 48:
                  length = _context3.sent;
                  if (length) {
                    _context3.next = 51;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 51:
                  if (getDist.getDetailedResult() === DetailedResult.kCoordIn) {
                    yRadius = length / 2;
                    radiusRatio = yRadius / xRadius;
                  }
                  getDist.setLastInputPoint(center);
                  if (!isGetAngle) {
                    _context3.next = 86;
                    break;
                  }
                  getDist.setMessage(_ML_String("EllipticalArc_startAngle", "\\u6307\\u5B9A\\u8D77\\u70B9\\u89D2\\u5EA6"));
                  getDist.setKeyWords("");
                  offsetAngle = Math.atan2(majorAxis.y, majorAxis.x) - Math.PI / 2;
                  getDist.setUserDraw(function (currentPoint, pWorldDraw) {
                    var angle = Math.atan2(currentPoint.y - center.y, currentPoint.x - center.x);
                    startAngle = (angle - offsetAngle + Math.PI * 2) % (Math.PI * 2);
                    drawEllipse(currentPoint, pWorldDraw);
                  });
                  _context3.next = 60;
                  return getDist.go();
                case 60:
                  val = _context3.sent;
                  if (val) {
                    _context3.next = 63;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 63:
                  if (getDist.getDetailedResult() == DetailedResult.kCoordIn) {
                    startAngle = val;
                  }
                  getDist.setLastInputPoint(center);
                  getDist.setMessage(_ML_String("EllipticalArc_endAngle", "\\u6307\\u5B9A\\u7AEF\\u70B9\\u89D2\\u5EA6"));
                  getDist.setKeyWords("[\\u5939\\u89D2(I)]");
                  getDist.setUserDraw(function (currentPoint, pWorldDraw) {
                    var angle = Math.atan2(currentPoint.y - center.y, currentPoint.x - center.x);
                    endAngle = (angle - offsetAngle + Math.PI * 2) % (Math.PI * 2);
                    if (endAngle < startAngle) {
                      endAngle += Math.PI * 2;
                    }
                    drawEllipse(currentPoint, pWorldDraw);
                  });
                  _context3.next = 70;
                  return getDist.go();
                case 70:
                  val1 = _context3.sent;
                  if (!getDist.isKeyWordPicked("I")) {
                    _context3.next = 83;
                    break;
                  }
                  getDist.setMessage("\\n\\u6307\\u5B9A\\u692D\\u5706\\u5F27\\u7684\\u5939\\u89D2");
                  getDist.setKeyWords("");
                  getDist.setUserDraw(function (currentPoint, pWorldDraw) {
                    endAngle = angleTo(center.x, center.y, currentPoint.x, currentPoint.y) - Math.PI;
                    drawEllipse(currentPoint, pWorldDraw);
                  });
                  _context3.next = 77;
                  return getDist.go();
                case 77:
                  val2 = _context3.sent;
                  if (val2) {
                    _context3.next = 80;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 80:
                  if (getDist.getDetailedResult() === DetailedResult.kCoordIn) {
                    endAngle = val2;
                  }
                  ellipse2 = createEllipse();
                  return _context3.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(ellipse2)
                  });
                case 83:
                  if (val1) {
                    _context3.next = 85;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 85:
                  if (getDist.getDetailedResult() === DetailedResult.kCoordIn) {
                    endAngle = val1;
                  }
                case 86:
                  ellipse = createEllipse();
                  return _context3.abrupt("return", {
                    v: MxCpp.getCurrentMxCAD().drawEntity(ellipse)
                  });
                case 88:
                case "end":
                  return _context3.stop();
              }
            }, _loop2);
          });
        case 8:
          return _context4.delegateYield(_loop2(), "t0", 10);
        case 10:
          _ret2 = _context4.t0;
          if (!_ret2) {
            _context4.next = 13;
            break;
          }
          return _context4.abrupt("return", _ret2.v);
        case 13:
          _context4.next = 8;
          break;
        case 15:
        case "end":
          return _context4.stop();
      }
    }, _callee2);
  }));
  return _drawMxDbEllipse.apply(this, arguments);
}
MxFun.on("init", function () {
  MxFun.addCommand("Mx_EllipseArc", drawEllipticalArc);
  MxFun.addCommand("Mx_Ellipse", drawMxDbEllipse);
});

function Mx_Erase() {
  return _Mx_Erase.apply(this, arguments);
}
function _Mx_Erase() {
  _Mx_Erase = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
    var aryId, ss;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          aryId = MxCADUtility.getCurrentSelect();
          if (!(aryId.length > 0)) {
            _context2.next = 4;
            break;
          }
          aryId.forEach(function (val) {
            val.erase();
          });
          return _context2.abrupt("return");
        case 4:
          ss = new MxCADSelectionSet();
          _context2.next = 7;
          return ss.userSelect("\\n\\u9009\\u62E9\\u5220\\u9664\\u5BF9\\u8C61");
        case 7:
          if (_context2.sent) {
            _context2.next = 9;
            break;
          }
          return _context2.abrupt("return");
        case 9:
          ss.forEach(function (val) {
            val.erase();
          });
        case 10:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _Mx_Erase.apply(this, arguments);
}
function MxGetMcDbEntityBoundingBox(aryId) {
  var minPt = void 0;
  var maxPt = void 0;
  aryId.forEach(function (val) {
    var ent = val.getMcDbEntity();
    if (ent == null) return;
    var bound = ent.getBoundingBox();
    if (!bound.ret) return;
    if (!minPt || !maxPt) {
      minPt = new THREE.Vector3(bound.minPt.x, bound.minPt.y, 0);
      maxPt = new THREE.Vector3(bound.maxPt.x, bound.maxPt.y, 0);
    } else {
      if (minPt.x > bound.minPt.x) {
        minPt.x = bound.minPt.x;
      }
      if (minPt.y > bound.minPt.y) {
        minPt.y = bound.minPt.y;
      }
      if (maxPt.x < bound.maxPt.x) {
        maxPt.x = bound.maxPt.x;
      }
      if (maxPt.y < bound.maxPt.y) {
        maxPt.y = bound.maxPt.y;
      }
    }
  });
  if (minPt && maxPt) {
    return {
      minPt: minPt,
      maxPt: maxPt
    };
  } else {
    return void 0;
  }
}
function Mx_Copy() {
  return _Mx_Copy.apply(this, arguments);
}
function _Mx_Copy() {
  _Mx_Copy = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
    var aryId, ss, minPt, maxPt, retBox, getPoint, ptBase, ptMoveTo, i, tmp, newEnt;
    return regenerator.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          aryId = MxCADUtility.getCurrentSelect();
          if (!(aryId.length > 0)) {
            _context3.next = 4;
            break;
          }
          return _context3.abrupt("break", 15);
        case 4:
          ss = new MxCADSelectionSet();
          _context3.next = 7;
          return ss.userSelect("\\n\\u9009\\u62E9\\u590D\\u5236\\u5BF9\\u8C61");
        case 7:
          if (_context3.sent) {
            _context3.next = 9;
            break;
          }
          return _context3.abrupt("return");
        case 9:
          aryId = ss.getIds();
          if (!(aryId.length == 0)) {
            _context3.next = 12;
            break;
          }
          return _context3.abrupt("return");
        case 12:
          return _context3.abrupt("break", 15);
        case 15:
          if (aryId.length >= 10) {
            retBox = MxGetMcDbEntityBoundingBox(aryId);
            if (retBox) {
              minPt = retBox.minPt;
              maxPt = retBox.maxPt;
            }
          }
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\n\\u6307\\u5B9A\\u57FA\\u70B9");
          _context3.next = 20;
          return getPoint.go();
        case 20:
          ptBase = _context3.sent;
          if (ptBase) {
            _context3.next = 23;
            break;
          }
          return _context3.abrupt("return");
        case 23:
          getPoint.setMessage("\\u6307\\u5B9A\\u79FB\\u52A8\\u5230\\u70B9");
          getPoint.setBasePt(ptBase);
          getPoint.setUseBasePt(true);
          getPoint.setUserDraw(function (v, worldDraw) {
            if (minPt && maxPt) {
              var xf = v.x - ptBase.x;
              var yf = v.y - ptBase.y;
              var tmpPt1 = new THREE.Vector3(minPt.x + xf, maxPt.y + yf, 0);
              var tmpPt2 = new THREE.Vector3(maxPt.x + xf, minPt.y + yf, 0);
              var tmpPt3 = new THREE.Vector3(tmpPt1.x, tmpPt2.y, 0);
              var tmpPt4 = new THREE.Vector3(tmpPt2.x, tmpPt1.y, 0);
              tmpPt1 = MxCoordConvert.cad2doc2(tmpPt1.x, tmpPt1.y, tmpPt1.z);
              tmpPt2 = MxCoordConvert.cad2doc2(tmpPt2.x, tmpPt2.y, tmpPt2.z);
              tmpPt3 = MxCoordConvert.cad2doc2(tmpPt3.x, tmpPt3.y, tmpPt3.z);
              tmpPt4 = MxCoordConvert.cad2doc2(tmpPt4.x, tmpPt4.y, tmpPt4.z);
              worldDraw.drawLine(tmpPt4, tmpPt1);
              worldDraw.drawLine(tmpPt1, tmpPt3);
              worldDraw.drawLine(tmpPt3, tmpPt2);
              worldDraw.drawLine(tmpPt2, tmpPt4);
            }
            for (var i = 0; i < aryId.length && i < 10; i++) {
              var tmp = aryId[i].clone();
              if (!tmp) {
                continue;
              }
              tmp.move(ptBase, v);
              worldDraw.drawMcDbEntity(tmp);
            }
          });
        case 27:
          _context3.next = 30;
          return getPoint.go();
        case 30:
          ptMoveTo = _context3.sent;
          if (ptMoveTo) {
            _context3.next = 33;
            break;
          }
          return _context3.abrupt("return");
        case 33:
          i = 0;
        case 34:
          if (!(i < aryId.length)) {
            _context3.next = 44;
            break;
          }
          tmp = aryId[i].clone();
          if (tmp) {
            _context3.next = 38;
            break;
          }
          return _context3.abrupt("continue", 41);
        case 38:
          tmp.move(ptBase, ptMoveTo);
          newEnt = MxCpp.getCurrentMxCAD().drawEntity(tmp).getMcDbDimension();
          if (newEnt) {
            newEnt.needToUpdateDimBlock(false);
          }
        case 41:
          i++;
          _context3.next = 34;
          break;
        case 44:
          _context3.next = 27;
          break;
        case 46:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _Mx_Copy.apply(this, arguments);
}
function Mx_Move() {
  return _Mx_Move.apply(this, arguments);
}
function _Mx_Move() {
  _Mx_Move = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
    var aryId, ss, minPt, maxPt, retBox, getPoint, ptBase, highlight, ptMoveTo, i, tmp;
    return regenerator.wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          aryId = MxCADUtility.getCurrentSelect();
          if (!(aryId.length > 0)) {
            _context4.next = 4;
            break;
          }
          return _context4.abrupt("break", 15);
        case 4:
          ss = new MxCADSelectionSet();
          _context4.next = 7;
          return ss.userSelect("\\n\\u9009\\u62E9\\u79FB\\u52A8\\u5BF9\\u8C61");
        case 7:
          if (_context4.sent) {
            _context4.next = 9;
            break;
          }
          return _context4.abrupt("return");
        case 9:
          aryId = ss.getIds();
          if (!(aryId.length == 0)) {
            _context4.next = 12;
            break;
          }
          return _context4.abrupt("return");
        case 12:
          return _context4.abrupt("break", 15);
        case 15:
          if (aryId.length >= 10) {
            retBox = MxGetMcDbEntityBoundingBox(aryId);
            if (retBox) {
              minPt = retBox.minPt;
              maxPt = retBox.maxPt;
            }
          }
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\u6307\\u5B9A\\u57FA\\u70B9");
          getPoint.clearLastInputPoint();
          _context4.next = 21;
          return getPoint.go();
        case 21:
          ptBase = _context4.sent;
          if (ptBase) {
            _context4.next = 24;
            break;
          }
          return _context4.abrupt("return");
        case 24:
          getPoint.setMessage("\\u6307\\u5B9A\\u79FB\\u52A8\\u5230\\u70B9");
          getPoint.setBasePt(ptBase);
          getPoint.setUseBasePt(true);
          highlight = function highlight(is) {
            for (var i = 0; i < aryId.length; i++) {
              var ent = aryId[i].getMcDbEntity();
              if (!ent) {
                continue;
              }
              ent.highlight(is);
            }
          };
          highlight(true);
          getPoint.setUserDraw(function (v, worldDraw) {
            if (minPt && maxPt) {
              var xf = v.x - ptBase.x;
              var yf = v.y - ptBase.y;
              var tmpPt1 = new THREE.Vector3(minPt.x + xf, maxPt.y + yf, 0);
              var tmpPt2 = new THREE.Vector3(maxPt.x + xf, minPt.y + yf, 0);
              var tmpPt3 = new THREE.Vector3(tmpPt1.x, tmpPt2.y, 0);
              var tmpPt4 = new THREE.Vector3(tmpPt2.x, tmpPt1.y, 0);
              tmpPt1 = MxCoordConvert.cad2doc2(tmpPt1.x, tmpPt1.y, tmpPt1.z);
              tmpPt2 = MxCoordConvert.cad2doc2(tmpPt2.x, tmpPt2.y, tmpPt2.z);
              tmpPt3 = MxCoordConvert.cad2doc2(tmpPt3.x, tmpPt3.y, tmpPt3.z);
              tmpPt4 = MxCoordConvert.cad2doc2(tmpPt4.x, tmpPt4.y, tmpPt4.z);
              worldDraw.drawLine(tmpPt4, tmpPt1);
              worldDraw.drawLine(tmpPt1, tmpPt3);
              worldDraw.drawLine(tmpPt3, tmpPt2);
              worldDraw.drawLine(tmpPt2, tmpPt4);
            }
            for (var i = 0; i < aryId.length && i < 10; i++) {
              var tmp = aryId[i].clone();
              if (!tmp) {
                continue;
              }
              ptBase && tmp.move(ptBase, v);
              worldDraw.drawMcDbEntity(tmp);
            }
          });
          _context4.next = 32;
          return getPoint.go();
        case 32:
          ptMoveTo = _context4.sent;
          if (ptMoveTo) {
            _context4.next = 35;
            break;
          }
          return _context4.abrupt("return", highlight(false));
        case 35:
          highlight(false);
          i = 0;
        case 37:
          if (!(i < aryId.length)) {
            _context4.next = 46;
            break;
          }
          tmp = aryId[i].getMcDbObject();
          if (tmp) {
            _context4.next = 41;
            break;
          }
          return _context4.abrupt("continue", 43);
        case 41:
          tmp.move(ptBase, ptMoveTo);
          if (tmp instanceof McDbDimension) {
            tmp.needToUpdateDimBlock(false);
          }
        case 43:
          i++;
          _context4.next = 37;
          break;
        case 46:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _Mx_Move.apply(this, arguments);
}
function Mx_Rotate() {
  return _Mx_Rotate.apply(this, arguments);
}
function _Mx_Rotate() {
  _Mx_Rotate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
    var aryId, ss, minPt, maxPt, retBox, getPoint, ptBase, isCopy, refAngle, getAngle, highlight, _loop, _ret;
    return regenerator.wrap(function _callee5$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          aryId = MxCADUtility.getCurrentSelect();
          if (!(aryId.length > 0)) {
            _context6.next = 4;
            break;
          }
          return _context6.abrupt("break", 15);
        case 4:
          ss = new MxCADSelectionSet();
          _context6.next = 7;
          return ss.userSelect("\\n\\u9009\\u62E9\\u65CB\\u8F6C\\u5BF9\\u8C61");
        case 7:
          if (_context6.sent) {
            _context6.next = 9;
            break;
          }
          return _context6.abrupt("return");
        case 9:
          aryId = ss.getIds();
          if (!(aryId.length == 0)) {
            _context6.next = 12;
            break;
          }
          return _context6.abrupt("return");
        case 12:
          return _context6.abrupt("break", 15);
        case 15:
          retBox = MxGetMcDbEntityBoundingBox(aryId);
          if (retBox) {
            minPt = retBox.minPt;
            maxPt = retBox.maxPt;
          }
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\u6307\\u5B9A\\u57FA\\u70B9");
          _context6.next = 21;
          return getPoint.go();
        case 21:
          ptBase = _context6.sent;
          if (!(ptBase == null)) {
            _context6.next = 24;
            break;
          }
          return _context6.abrupt("return");
        case 24:
          isCopy = false;
          refAngle = 0;
          getAngle = new MxCADUiPrAngle();
          getAngle.setMessage(_ML_String("Entity_Rotate_Angle", "\\u6307\\u5B9A\\u65CB\\u8F6C\\u89D2\\u5EA6"));
          getAngle.setKeyWords("[\\u590D\\u5236(C)/\\u53C2\\u7167(R)]");
          getAngle.setBasePt(ptBase);
          getAngle.setUseBasePt(true);
          highlight = function highlight(is) {
            for (var i = 0; i < aryId.length; i++) {
              var ent = aryId[i].getMcDbEntity();
              if (!ent) {
                continue;
              }
              ent.highlight(is);
            }
          };
          highlight(true);
          _context6.prev = 33;
          _loop = /*#__PURE__*/regenerator.mark(function _loop() {
            var val, getAngle2, _refAngle, val2, basePoint, mat, isMcDbEntity, cAryId, i, tmp, _i, _tmp;
            return regenerator.wrap(function _loop$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  getAngle.setUserDraw(function (v, worldDraw) {
                    var curPoint = v;
                    var basePoint2 = ptBase;
                    var vec = curPoint.sub(basePoint2);
                    var ang = vec.angleTo2(McGeVector3d.kXAxis, McGeVector3d.kNegateZAxis) - refAngle;
                    var mat2 = new McGeMatrix3d();
                    mat2.setToRotation(ang, McGeVector3d.kZAxis, basePoint2);
                    if (minPt && maxPt) {
                      var tmpPt1 = new McGePoint3d(minPt.x, maxPt.y, 0);
                      var tmpPt2 = new McGePoint3d(maxPt.x, minPt.y, 0);
                      var tmpPt3 = new McGePoint3d(tmpPt1.x, tmpPt2.y, 0);
                      var tmpPt4 = new McGePoint3d(tmpPt2.x, tmpPt1.y, 0);
                      tmpPt1.transformBy(mat2);
                      tmpPt2.transformBy(mat2);
                      tmpPt3.transformBy(mat2);
                      tmpPt4.transformBy(mat2);
                      tmpPt1 = MxCoordConvert.cad2doc(tmpPt1);
                      tmpPt2 = MxCoordConvert.cad2doc(tmpPt2);
                      tmpPt3 = MxCoordConvert.cad2doc(tmpPt3);
                      tmpPt4 = MxCoordConvert.cad2doc(tmpPt4);
                      worldDraw.drawLine(tmpPt4.toVector3(), tmpPt1.toVector3());
                      worldDraw.drawLine(tmpPt1.toVector3(), tmpPt3.toVector3());
                      worldDraw.drawLine(tmpPt3.toVector3(), tmpPt2.toVector3());
                      worldDraw.drawLine(tmpPt2.toVector3(), tmpPt4.toVector3());
                    }
                    mat2.setToRotation(ang, McGeVector3d.kZAxis, basePoint2);
                    for (var i = 0; i < aryId.length && i < 10; i++) {
                      var tmp = aryId[i].clone();
                      if (!tmp) {
                        continue;
                      }
                      tmp.transformBy(mat2);
                      worldDraw.drawMcDbEntity(tmp);
                    }
                  });
                  _context5.next = 3;
                  return getAngle.go();
                case 3:
                  val = _context5.sent;
                  if (!getAngle.isKeyWordPicked("C")) {
                    _context5.next = 8;
                    break;
                  }
                  isCopy = true;
                  highlight(false);
                  return _context5.abrupt("return", 0);
                case 8:
                  if (!getAngle.isKeyWordPicked("R")) {
                    _context5.next = 22;
                    break;
                  }
                  getAngle2 = new MxCADUiPrDist();
                  getAngle2.setMessage(_ML_String("Entity_Rotate_Ref_Angle", "\\u6307\\u5B9A\\u53C2\\u7167\\u89D2:<" + (refAngle / (Math.PI / 180)).toFixed(3) + ">"));
                  getAngle2.setKeyWords("");
                  getAngle2.setUseBasePt(false);
                  _refAngle = 0;
                  getAngle2.setUserDraw(function (pt) {
                    if (!ptBase) return;
                    var vec = pt.sub(ptBase);
                    _refAngle = vec.angleTo2(McGeVector3d.kXAxis, McGeVector3d.kNegateZAxis);
                  });
                  _context5.next = 17;
                  return getAngle2.go();
                case 17:
                  val2 = _context5.sent;
                  if (!(typeof val2 !== "number")) {
                    _context5.next = 20;
                    break;
                  }
                  return _context5.abrupt("return", {
                    v: highlight(false)
                  });
                case 20:
                  if (getAngle2.getDetailedResult() === DetailedResult.kCoordIn) {
                    refAngle = THREE.MathUtils.degToRad(val2);
                  } else if (_refAngle !== 0) {
                    refAngle = _refAngle;
                  }
                  return _context5.abrupt("return", 0);
                case 22:
                  if (!(typeof val !== "number")) {
                    _context5.next = 24;
                    break;
                  }
                  return _context5.abrupt("return", {
                    v: highlight(false)
                  });
                case 24:
                  basePoint = ptBase;
                  mat = new McGeMatrix3d();
                  mat.setToRotation(val - refAngle, McGeVector3d.kZAxis, basePoint);
                  isMcDbEntity = function isMcDbEntity(idObj) {
                    return idObj instanceof McDbEntity;
                  };
                  if (!isCopy) {
                    _context5.next = 42;
                    break;
                  }
                  cAryId = [];
                  i = 0;
                case 31:
                  if (!(i < aryId.length)) {
                    _context5.next = 39;
                    break;
                  }
                  tmp = aryId[i].clone();
                  if (tmp) {
                    _context5.next = 35;
                    break;
                  }
                  return _context5.abrupt("continue", 36);
                case 35:
                  if (isMcDbEntity(tmp)) {
                    tmp.transformBy(mat);
                    cAryId.push(MxCpp.getCurrentMxCAD().drawEntity(tmp));
                  }
                case 36:
                  i++;
                  _context5.next = 31;
                  break;
                case 39:
                  return _context5.abrupt("return", {
                    v: cAryId
                  });
                case 42:
                  highlight(false);
                  _i = 0;
                case 44:
                  if (!(_i < aryId.length)) {
                    _context5.next = 52;
                    break;
                  }
                  _tmp = aryId[_i].getMcDbObject();
                  if (_tmp) {
                    _context5.next = 48;
                    break;
                  }
                  return _context5.abrupt("continue", 49);
                case 48:
                  _tmp.transformBy(mat);
                case 49:
                  _i++;
                  _context5.next = 44;
                  break;
                case 52:
                  return _context5.abrupt("return", {
                    v: aryId
                  });
                case 53:
                case "end":
                  return _context5.stop();
              }
            }, _loop);
          });
        case 35:
          return _context6.delegateYield(_loop(), "t0", 37);
        case 37:
          _ret = _context6.t0;
          if (!(_ret === 0)) {
            _context6.next = 40;
            break;
          }
          return _context6.abrupt("continue", 35);
        case 40:
          if (!_ret) {
            _context6.next = 42;
            break;
          }
          return _context6.abrupt("return", _ret.v);
        case 42:
          _context6.next = 35;
          break;
        case 44:
          _context6.next = 50;
          break;
        case 46:
          _context6.prev = 46;
          _context6.t1 = _context6["catch"](33);
          highlight(false);
          console.error(_context6.t1);
        case 50:
        case "end":
          return _context6.stop();
      }
    }, _callee5, null, [[33, 46]]);
  }));
  return _Mx_Rotate.apply(this, arguments);
}
function Mx_Scale() {
  return _Mx_Scale.apply(this, arguments);
}
function _Mx_Scale() {
  _Mx_Scale = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6() {
    var aryId, ss, minPt, maxPt, retBox, dXLen, dYLen, dScaleLen, getPoint, ptBase, dScale, isCopy, draw, highlight, getPoint2, _dScale, getDist, dist2, dist1, getDist1, mat, cAryId, isMcDbEntity, i, tmp, _i2, _tmp2;
    return regenerator.wrap(function _callee6$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          aryId = MxCADUtility.getCurrentSelect();
          if (!(aryId.length > 0)) {
            _context7.next = 4;
            break;
          }
          return _context7.abrupt("break", 15);
        case 4:
          ss = new MxCADSelectionSet();
          _context7.next = 7;
          return ss.userSelect("\\n\\u9009\\u62E9\\u7F29\\u653E\\u5BF9\\u8C61");
        case 7:
          if (_context7.sent) {
            _context7.next = 9;
            break;
          }
          return _context7.abrupt("return");
        case 9:
          aryId = ss.getIds();
          if (!(aryId.length == 0)) {
            _context7.next = 12;
            break;
          }
          return _context7.abrupt("return");
        case 12:
          return _context7.abrupt("break", 15);
        case 15:
          retBox = MxGetMcDbEntityBoundingBox(aryId);
          if (retBox) {
            _context7.next = 18;
            break;
          }
          return _context7.abrupt("return");
        case 18:
          minPt = retBox.minPt;
          maxPt = retBox.maxPt;
          dXLen = maxPt.x - minPt.x;
          dYLen = maxPt.y - minPt.y;
          dScaleLen = (dXLen + dYLen) / 3;
          if (dScaleLen < 1e-5) dScaleLen = 1;
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\u6307\\u5B9A\\u57FA\\u70B9");
          _context7.next = 28;
          return getPoint.go();
        case 28:
          ptBase = _context7.sent;
          if (ptBase) {
            _context7.next = 31;
            break;
          }
          return _context7.abrupt("return");
        case 31:
          dScale = 0;
          isCopy = false;
          draw = function draw(v, worldDraw) {
            if (!ptBase) return;
            var curPoint = new McGePoint3d(v);
            var basePoint = new McGePoint3d(ptBase);
            var dist2 = curPoint.distanceTo(basePoint);
            if (dist2 < 1e-5) {
              return;
            }
            dScale = dist2 / dScaleLen;
            if (dScale > 1e5) dScale = 1e5;
            var mat = new McGeMatrix3d();
            mat.setToScaling(dScale, basePoint);
            if (minPt && maxPt) {
              var tmpPt1 = new McGePoint3d(minPt.x, maxPt.y, 0);
              var tmpPt2 = new McGePoint3d(maxPt.x, minPt.y, 0);
              var tmpPt3 = new McGePoint3d(tmpPt1.x, tmpPt2.y, 0);
              var tmpPt4 = new McGePoint3d(tmpPt2.x, tmpPt1.y, 0);
              tmpPt1.transformBy(mat);
              tmpPt2.transformBy(mat);
              tmpPt3.transformBy(mat);
              tmpPt4.transformBy(mat);
              tmpPt1 = MxCoordConvert.cad2doc(tmpPt1);
              tmpPt2 = MxCoordConvert.cad2doc(tmpPt2);
              tmpPt3 = MxCoordConvert.cad2doc(tmpPt3);
              tmpPt4 = MxCoordConvert.cad2doc(tmpPt4);
              worldDraw.drawLine(tmpPt4.toVector3(), tmpPt1.toVector3());
              worldDraw.drawLine(tmpPt1.toVector3(), tmpPt3.toVector3());
              worldDraw.drawLine(tmpPt3.toVector3(), tmpPt2.toVector3());
              worldDraw.drawLine(tmpPt2.toVector3(), tmpPt4.toVector3());
            }
            mat.setToScaling(dScale, basePoint);
            for (var i = 0; i < aryId.length && i < 10; i++) {
              var tmp = aryId[i].clone();
              if (!tmp) {
                continue;
              }
              tmp.transformBy(mat);
              worldDraw.drawMcDbEntity(tmp);
            }
          };
          highlight = function highlight(is) {
            for (var i = 0; i < aryId.length; i++) {
              var ent = aryId[i].getMcDbEntity();
              if (!ent) {
                continue;
              }
              ent.highlight(is);
            }
          };
          highlight(true);
          _context7.prev = 36;
        case 37:
          getPoint2 = new MxCADUiPrDist();
          getPoint2.setMessage("\\u6307\\u5B9A\\u6BD4\\u4F8B\\u56E0\\u5B50");
          getPoint2.setKeyWords("[\\u590D\\u5236(C)/\\u53C2\\u7167(R)]");
          getPoint2.setBasePt(ptBase);
          getPoint2.setUseBasePt(true);
          getPoint2.setUserDraw(draw);
          _context7.next = 46;
          return getPoint2.go();
        case 46:
          _dScale = _context7.sent;
          if (!getPoint2.isKeyWordPicked("C")) {
            _context7.next = 51;
            break;
          }
          isCopy = true;
          highlight(false);
          return _context7.abrupt("continue", 37);
        case 51:
          if (!getPoint2.isKeyWordPicked("R")) {
            _context7.next = 77;
            break;
          }
          getDist = new MxCADUiPrDist();
          getDist.setMessage("\\u6307\\u5B9A\\u53C2\\u7167\\u957F\\u5EA6");
          getDist.setBasePt(ptBase);
          _context7.next = 57;
          return getDist.go();
        case 57:
          dist2 = _context7.sent;
          if (dist2) {
            _context7.next = 60;
            break;
          }
          return _context7.abrupt("return", highlight(false));
        case 60:
          dScaleLen = dist2;
          getDist.setMessage("\\u6307\\u5B9A\\u65B0\\u7684\\u957F\\u5EA6");
          getDist.setKeyWords("[\\u70B9(P)]");
          getDist.setBasePt(ptBase);
          getDist.setUserDraw(draw);
          _context7.next = 67;
          return getDist.go();
        case 67:
          dist1 = _context7.sent;
          if (!getDist.isKeyWordPicked("P")) {
            _context7.next = 74;
            break;
          }
          getDist1 = new MxCADUiPrDist();
          getDist1.setMessage("\\u6307\\u5B9A\\u957F\\u5EA6");
          _context7.next = 73;
          return getDist1.go();
        case 73:
          dist1 = _context7.sent;
        case 74:
          if (dist1) {
            _context7.next = 76;
            break;
          }
          return _context7.abrupt("return", highlight(false));
        case 76:
          _dScale = dist1 / dist2;
        case 77:
          if (_dScale) {
            _context7.next = 79;
            break;
          }
          return _context7.abrupt("return", highlight(false));
        case 79:
          if (getPoint2.getDetailedResult() === DetailedResult.kCoordIn) {
            dScale = _dScale;
          }
          if (dScale > 1e5) dScale = 1e5;
          mat = new McGeMatrix3d();
          mat.setToScaling(dScale, ptBase);
          if (!isCopy) {
            _context7.next = 98;
            break;
          }
          cAryId = [];
          isMcDbEntity = function isMcDbEntity(idObj) {
            return idObj instanceof McDbEntity;
          };
          i = 0;
        case 87:
          if (!(i < aryId.length)) {
            _context7.next = 95;
            break;
          }
          tmp = aryId[i].clone();
          if (tmp) {
            _context7.next = 91;
            break;
          }
          return _context7.abrupt("continue", 92);
        case 91:
          if (isMcDbEntity(tmp)) {
            tmp.transformBy(mat);
            cAryId.push(MxCpp.getCurrentMxCAD().drawEntity(tmp));
          }
        case 92:
          i++;
          _context7.next = 87;
          break;
        case 95:
          return _context7.abrupt("return", cAryId);
        case 98:
          highlight(false);
          _i2 = 0;
        case 100:
          if (!(_i2 < aryId.length)) {
            _context7.next = 108;
            break;
          }
          _tmp2 = aryId[_i2].getMcDbObject();
          if (_tmp2) {
            _context7.next = 104;
            break;
          }
          return _context7.abrupt("continue", 105);
        case 104:
          _tmp2.transformBy(mat);
        case 105:
          _i2++;
          _context7.next = 100;
          break;
        case 108:
          return _context7.abrupt("return", aryId);
        case 109:
          _context7.next = 37;
          break;
        case 111:
          _context7.next = 117;
          break;
        case 113:
          _context7.prev = 113;
          _context7.t0 = _context7["catch"](36);
          console.error(_context7.t0);
          highlight(false);
        case 117:
        case "end":
          return _context7.stop();
      }
    }, _callee6, null, [[36, 113]]);
  }));
  return _Mx_Scale.apply(this, arguments);
}
function Mx_WindowZoom() {
  return _Mx_WindowZoom.apply(this, arguments);
}
function _Mx_WindowZoom() {
  _Mx_WindowZoom = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7() {
    var getPoint, pt1, mxcad, pt2;
    return regenerator.wrap(function _callee7$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          getPoint.disableAllTrace();
          getPoint.setMessage("\\n\\u70B9\\u53D6\\u7F29\\u653E\\u533A\\u57DF");
          getPoint.setDynamicInputType(DynamicInputType.kDynTip);
          _context8.next = 6;
          return getPoint.go();
        case 6:
          pt1 = _context8.sent;
          if (!(pt1 == null)) {
            _context8.next = 9;
            break;
          }
          return _context8.abrupt("return");
        case 9:
          mxcad = MxCpp.getCurrentMxCAD();
          getPoint.setUserDraw(function (p1, worldDraw) {
            worldDraw.drawRect(MxCoordConvert.cad2doc1(pt1), MxCoordConvert.cad2doc1(p1));
          });
          _context8.next = 13;
          return getPoint.go();
        case 13:
          pt2 = _context8.sent;
          if (!(pt2 == null)) {
            _context8.next = 16;
            break;
          }
          return _context8.abrupt("return");
        case 16:
          mxcad.zoomW(pt1, pt2);
        case 17:
        case "end":
          return _context8.stop();
      }
    }, _callee7);
  }));
  return _Mx_WindowZoom.apply(this, arguments);
}
function Mx_ZoomE() {
  return _Mx_ZoomE.apply(this, arguments);
}
function _Mx_ZoomE() {
  _Mx_ZoomE = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8() {
    return regenerator.wrap(function _callee8$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          MxCpp.getCurrentMxCAD().zoomAll(true);
        case 1:
        case "end":
          return _context9.stop();
      }
    }, _callee8);
  }));
  return _Mx_ZoomE.apply(this, arguments);
}
function Mx_Plan90CW() {
  return _Mx_Plan90CW.apply(this, arguments);
}
function _Mx_Plan90CW() {
  _Mx_Plan90CW = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee9() {
    var lAng, mxcad;
    return regenerator.wrap(function _callee9$(_context10) {
      while (1) switch (_context10.prev = _context10.next) {
        case 0:
          lAng = MxFun.getCurrentDraw().getViewAngle();
          lAng += Math.PI * 0.5;
          mxcad = MxCpp.getCurrentMxCAD();
          mxcad.zoomAngle(lAng);
        case 4:
        case "end":
          return _context10.stop();
      }
    }, _callee9);
  }));
  return _Mx_Plan90CW.apply(this, arguments);
}
var dist;
var isDel = false;
var isSourceLayer = true;
function Mx_Offset() {
  return _Mx_Offset.apply(this, arguments);
}
function _Mx_Offset() {
  _Mx_Offset = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee11() {
    var filter, getPoint, isMultiple, callOffsetObj, getDist, _dist, getKey, key, _getKey, _key;
    return regenerator.wrap(function _callee11$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          filter = new MxCADResbuf();
          filter.AddMcDbEntityTypes("LINE,CIRCLE,LWPOLYLINE,ARC");
          getPoint = new MxCADUiPrPoint();
          isMultiple = false;
          callOffsetObj = /*#__PURE__*/function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee10() {
              var isPassingPointDraw,
                _loop2,
                _ret2,
                _args13 = arguments;
              return regenerator.wrap(function _callee10$(_context13) {
                while (1) switch (_context13.prev = _context13.next) {
                  case 0:
                    isPassingPointDraw = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : false;
                    _loop2 = /*#__PURE__*/regenerator.mark(function _loop2() {
                      var mxGetPoint, basePoint, retIds, currentSelectIds, _loop3, _ret3;
                      return regenerator.wrap(function _loop2$(_context12) {
                        while (1) switch (_context12.prev = _context12.next) {
                          case 0:
                            currentSelectIds = MxCADUtility.getCurrentSelect();
                            if (!(currentSelectIds.length > 0 && isPassingPointDraw)) {
                              _context12.next = 5;
                              break;
                            }
                            retIds = currentSelectIds;
                            _context12.next = 8;
                            break;
                          case 5:
                            _context12.next = 7;
                            return MxCADUtility.selectEnt("\\n\\u9009\\u62E9\\u504F\\u79FB\\u5BF9\\u8C61", filter, false, function (getPoint2) {
                              getPoint2.setKeyWords("[\\u9000\\u51FA(E)/\\u653E\\u5F03(U)]");
                              mxGetPoint = getPoint2;
                            }, function (pt) {
                              basePoint = pt;
                            });
                          case 7:
                            retIds = _context12.sent;
                          case 8:
                            if (!mxGetPoint) {
                              _context12.next = 15;
                              break;
                            }
                            if (!mxGetPoint.isKeyWordPicked("E")) {
                              _context12.next = 11;
                              break;
                            }
                            return _context12.abrupt("return", {
                              v: void 0
                            });
                          case 11:
                            if (!mxGetPoint.isKeyWordPicked("U")) {
                              _context12.next = 13;
                              break;
                            }
                            return _context12.abrupt("return", 0);
                          case 13:
                            if (!(mxGetPoint.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                              _context12.next = 15;
                              break;
                            }
                            return _context12.abrupt("return", {
                              v: void 0
                            });
                          case 15:
                            if (!(retIds.length == 0)) {
                              _context12.next = 17;
                              break;
                            }
                            return _context12.abrupt("return", 0);
                          case 17:
                            _loop3 = /*#__PURE__*/regenerator.mark(function _loop3() {
                              var pt, curve, closestPointParam, aryObj;
                              return regenerator.wrap(function _loop3$(_context11) {
                                while (1) switch (_context11.prev = _context11.next) {
                                  case 0:
                                    getPoint.setDynamicInputType(DynamicInputType.kXYCoordInput);
                                    if (isPassingPointDraw) {
                                      getPoint.setMessage("\\n\\u6307\\u5B9A\\u901A\\u8FC7\\u70B9" + (isMultiple ? " <\\u4E0B\\u4E00\\u4E2A\\u5BF9\\u8C61>" : ""));
                                    } else {
                                      getPoint.setMessage("\\n\\u6307\\u5B9A\\u8981\\u504F\\u79FB\\u90A3\\u4E00\\u4FA7\\u4E0A\\u7684\\u70B9");
                                    }
                                    getPoint.setKeyWords(isMultiple ? "[\\u9000\\u51FA(E)/\\u653E\\u5F03(U)]" : "[\\u9000\\u51FA(E)/\\u591A\\u4E2A(M)/\\u653E\\u5F03(U)]");
                                    getPoint.disableAllTrace();
                                    getPoint.setUserDraw(function (pt2, pw) {
                                      var objs = retIds.map(function (id) {
                                        return id.clone();
                                      });
                                      var curve2 = objs[0];
                                      if (!curve2) return;
                                      var _dist = dist;
                                      if (isPassingPointDraw) {
                                        var closestPointParam = curve2.getClosestPointTo(pt2, true);
                                        if (!closestPointParam.ret) return;
                                        basePoint = closestPointParam.val;
                                        _dist = pt2.distanceTo(basePoint);
                                      }
                                      if (!_dist) return;
                                      var aryObj2 = curve2.offsetCurves(_dist, pt2);
                                      if (aryObj2.empty()) return;
                                      aryObj2.forEach(function (obj) {
                                        if (obj instanceof McDbEntity) {
                                          pw.drawMcDbEntity(obj);
                                        }
                                      });
                                    });
                                    _context11.next = 7;
                                    return getPoint.go();
                                  case 7:
                                    pt = _context11.sent;
                                    if (!getPoint.isKeyWordPicked("E")) {
                                      _context11.next = 10;
                                      break;
                                    }
                                    return _context11.abrupt("return", {
                                      v: {
                                        v: void 0
                                      }
                                    });
                                  case 10:
                                    if (!getPoint.isKeyWordPicked("M")) {
                                      _context11.next = 13;
                                      break;
                                    }
                                    isMultiple = true;
                                    return _context11.abrupt("return", 0);
                                  case 13:
                                    if (!getPoint.isKeyWordPicked("U")) {
                                      _context11.next = 15;
                                      break;
                                    }
                                    return _context11.abrupt("return", {
                                      v: 1
                                    });
                                  case 15:
                                    if (pt) {
                                      _context11.next = 17;
                                      break;
                                    }
                                    return _context11.abrupt("return", {
                                      v: {
                                        v: void 0
                                      }
                                    });
                                  case 17:
                                    curve = retIds[0].getMcDbCurve();
                                    if (curve) {
                                      _context11.next = 20;
                                      break;
                                    }
                                    return _context11.abrupt("return", {
                                      v: {
                                        v: void 0
                                      }
                                    });
                                  case 20:
                                    if (!isPassingPointDraw) {
                                      _context11.next = 25;
                                      break;
                                    }
                                    closestPointParam = curve.getClosestPointTo(pt, true);
                                    if (closestPointParam.ret) {
                                      _context11.next = 24;
                                      break;
                                    }
                                    return _context11.abrupt("return", {
                                      v: {
                                        v: void 0
                                      }
                                    });
                                  case 24:
                                    dist = pt.distanceTo(closestPointParam.val);
                                  case 25:
                                    if (dist) {
                                      _context11.next = 27;
                                      break;
                                    }
                                    return _context11.abrupt("return", {
                                      v: {
                                        v: void 0
                                      }
                                    });
                                  case 27:
                                    aryObj = curve.offsetCurves(dist, pt);
                                    if (!aryObj.empty()) {
                                      _context11.next = 30;
                                      break;
                                    }
                                    return _context11.abrupt("return", {
                                      v: {
                                        v: void 0
                                      }
                                    });
                                  case 30:
                                    aryObj.forEach(function (obj) {
                                      if (obj instanceof McDbEntity) {
                                        if (isSourceLayer && curve !== null && curve !== void 0 && curve.layer) {
                                          obj.layer = curve.layer;
                                        }
                                        if (!isSourceLayer) {
                                          obj.layer = MxCpp.getCurrentMxCAD().getDatabase().getCurrentlyLayerName();
                                        }
                                        MxCpp.getCurrentMxCAD().drawEntity(obj);
                                      }
                                    });
                                    if (isMultiple) {
                                      _context11.next = 34;
                                      break;
                                    }
                                    if (isDel) {
                                      retIds[0].erase(true);
                                    }
                                    return _context11.abrupt("return", 1);
                                  case 34:
                                  case "end":
                                    return _context11.stop();
                                }
                              }, _loop3);
                            });
                          case 19:
                            return _context12.delegateYield(_loop3(), "t0", 21);
                          case 21:
                            _ret3 = _context12.t0;
                            if (!(_ret3 === 0)) {
                              _context12.next = 24;
                              break;
                            }
                            return _context12.abrupt("continue", 19);
                          case 24:
                            if (!(_ret3 === 1)) {
                              _context12.next = 26;
                              break;
                            }
                            return _context12.abrupt("break", 30);
                          case 26:
                            if (!_ret3) {
                              _context12.next = 28;
                              break;
                            }
                            return _context12.abrupt("return", _ret3.v);
                          case 28:
                            _context12.next = 19;
                            break;
                          case 30:
                          case "end":
                            return _context12.stop();
                        }
                      }, _loop2);
                    });
                  case 2:
                    return _context13.delegateYield(_loop2(), "t0", 4);
                  case 4:
                    _ret2 = _context13.t0;
                    if (!(_ret2 === 0)) {
                      _context13.next = 7;
                      break;
                    }
                    return _context13.abrupt("continue", 2);
                  case 7:
                    if (!(_ret2 === 1)) {
                      _context13.next = 9;
                      break;
                    }
                    return _context13.abrupt("continue", 2);
                  case 9:
                    if (!_ret2) {
                      _context13.next = 11;
                      break;
                    }
                    return _context13.abrupt("return", _ret2.v);
                  case 11:
                    _context13.next = 2;
                    break;
                  case 13:
                  case "end":
                    return _context13.stop();
                }
              }, _callee10);
            }));
            return function callOffsetObj() {
              return _ref2.apply(this, arguments);
            };
          }();
        case 5:
          getDist = new MxCADUiPrDist();
          getDist.setMessage("\\n\\u6307\\u5B9A\\u504F\\u79FB\\u8DDD\\u79BB<".concat((dist || 0).toFixed(3), ">"));
          getDist.setKeyWords("[\\u901A\\u8FC7\\u70B9(T)/\\u5220\\u9664(E)/\\u56FE\\u5C42(L))]");
          _context14.next = 11;
          return getDist.go();
        case 11:
          _dist = _context14.sent;
          if (!(getDist.isKeyWordPicked("T") || getDist.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
            _context14.next = 16;
            break;
          }
          _context14.next = 15;
          return callOffsetObj(true);
        case 15:
          return _context14.abrupt("return");
        case 16:
          if (!getDist.isKeyWordPicked("E")) {
            _context14.next = 33;
            break;
          }
          getKey = new MxCADUiPrKeyWord();
          getKey.setMessage("\\u8981\\u5728\\u504F\\u79FB\\u540E\\u5220\\u9664\\u6E90\\u5BF9\\u8C61\\u5417?<".concat(isDel ? "\\u662F" : "\\u5426", ">"));
          getKey.setKeyWords("[\\u662F(Y)/\\u5426(N)]");
          _context14.next = 22;
          return getKey.go();
        case 22:
          key = _context14.sent;
          if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
            _context14.next = 25;
            break;
          }
          return _context14.abrupt("return");
        case 25:
          if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
            _context14.next = 27;
            break;
          }
          return _context14.abrupt("continue", 5);
        case 27:
          if (!((key === null || key === void 0 ? void 0 : key.toLocaleLowerCase()) === "y")) {
            _context14.next = 30;
            break;
          }
          isDel = true;
          return _context14.abrupt("continue", 5);
        case 30:
          if (!((key === null || key === void 0 ? void 0 : key.toLocaleLowerCase()) === "n")) {
            _context14.next = 33;
            break;
          }
          isDel = false;
          return _context14.abrupt("continue", 5);
        case 33:
          if (!getDist.isKeyWordPicked("L")) {
            _context14.next = 51;
            break;
          }
          _getKey = new MxCADUiPrKeyWord();
          _getKey.setMessage("\\u8F93\\u5165\\u504F\\u79FB\\u5BF9\\u8C61\\u7684\\u56FE\\u5C42\\u9009\\u9879<".concat(isSourceLayer ? "\\u6E90" : "\\u5F53\\u524D", ">"));
          _getKey.setKeyWords("[\\u5F53\\u524D(C)/\\u6E90(S)]");
          _context14.next = 39;
          return _getKey.go();
        case 39:
          _key = _context14.sent;
          if (!(_getKey.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
            _context14.next = 42;
            break;
          }
          return _context14.abrupt("return");
        case 42:
          if (!(_getKey.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
            _context14.next = 45;
            break;
          }
          isSourceLayer = true;
          return _context14.abrupt("continue", 5);
        case 45:
          if (!((_key === null || _key === void 0 ? void 0 : _key.toLocaleLowerCase()) === "c")) {
            _context14.next = 48;
            break;
          }
          isSourceLayer = false;
          return _context14.abrupt("continue", 5);
        case 48:
          if (!((_key === null || _key === void 0 ? void 0 : _key.toLocaleUpperCase()) === "s")) {
            _context14.next = 51;
            break;
          }
          isSourceLayer = true;
          return _context14.abrupt("continue", 5);
        case 51:
          if (_dist) {
            dist = _dist;
          }
          if (dist) {
            _context14.next = 54;
            break;
          }
          return _context14.abrupt("return");
        case 54:
          _context14.next = 56;
          return callOffsetObj();
        case 56:
          return _context14.abrupt("break", 59);
        case 59:
        case "end":
          return _context14.stop();
      }
    }, _callee11);
  }));
  return _Mx_Offset.apply(this, arguments);
}
function Mx_Regen() {
  MxCpp.getCurrentMxCAD().regen();
}
function Mx_Mirror() {
  return _Mx_Mirror.apply(this, arguments);
}
function _Mx_Mirror() {
  _Mx_Mirror = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee12() {
    var aryId, minPt, maxPt, retBox, getPoint, ptBase, ptBase2, getKey, key, i, tmp, _i3;
    return regenerator.wrap(function _callee12$(_context15) {
      while (1) switch (_context15.prev = _context15.next) {
        case 0:
          _context15.next = 2;
          return MxCADUtility.userSelect("\\u9009\\u62E9\\u955C\\u50CF\\u5BF9\\u8C61");
        case 2:
          aryId = _context15.sent;
          if (!(aryId.length == 0)) {
            _context15.next = 6;
            break;
          }
          MxFun.acutPrintf("\\n \\u6CA1\\u6709\\u80FD\\u955C\\u50CF\\u7684\\u5BF9\\u8C61");
          return _context15.abrupt("return");
        case 6:
          retBox = MxGetMcDbEntityBoundingBox(aryId);
          if (retBox) {
            minPt = retBox.minPt;
            maxPt = retBox.maxPt;
          }
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\u6307\\u5B9A\\u57FA\\u70B9");
          _context15.next = 12;
          return getPoint.go();
        case 12:
          ptBase = _context15.sent;
          if (!(ptBase == null)) {
            _context15.next = 15;
            break;
          }
          return _context15.abrupt("return");
        case 15:
          getPoint.setMessage("\\u6307\\u5B9A\\u955C\\u5411\\u70B9");
          getPoint.setBasePt(ptBase);
          getPoint.setUseBasePt(true);
          getPoint.setUserDraw(function (v, worldDraw) {
            if (minPt && maxPt) {
              var mat = new McGeMatrix3d();
              mat.setMirror(ptBase, v);
              var tmpPt1 = new McGePoint3d(minPt.x, maxPt.y, 0);
              var tmpPt2 = new McGePoint3d(maxPt.x, minPt.y, 0);
              var tmpPt3 = new McGePoint3d(tmpPt1.x, tmpPt2.y, 0);
              var tmpPt4 = new McGePoint3d(tmpPt2.x, tmpPt1.y, 0);
              tmpPt1.transformBy(mat);
              tmpPt2.transformBy(mat);
              tmpPt3.transformBy(mat);
              tmpPt4.transformBy(mat);
              tmpPt1 = MxCoordConvert.cad2doc(tmpPt1);
              tmpPt2 = MxCoordConvert.cad2doc(tmpPt2);
              tmpPt3 = MxCoordConvert.cad2doc(tmpPt3);
              tmpPt4 = MxCoordConvert.cad2doc(tmpPt4);
              worldDraw.drawLine(tmpPt4.toVector3(), tmpPt1.toVector3());
              worldDraw.drawLine(tmpPt1.toVector3(), tmpPt3.toVector3());
              worldDraw.drawLine(tmpPt3.toVector3(), tmpPt2.toVector3());
              worldDraw.drawLine(tmpPt2.toVector3(), tmpPt4.toVector3());
            }
            for (var i = 0; i < aryId.length && i < 10; i++) {
              var tmp = aryId[i].clone();
              if (!tmp) {
                continue;
              }
              tmp.mirror(ptBase, v);
              worldDraw.drawMcDbEntity(tmp);
            }
          });
          getPoint.setDynamicInputType(DynamicInputType.kXYCoordInput);
          _context15.next = 22;
          return getPoint.go();
        case 22:
          ptBase2 = _context15.sent;
          if (ptBase2) {
            _context15.next = 25;
            break;
          }
          return _context15.abrupt("return");
        case 25:
          getKey = new MxCADUiPrKeyWord();
          getKey.clearLastInputPoint();
          getKey.setMessage("\\u8981\\u5220\\u9664\\u6E90\\u5BF9\\u8C61\\u5417\\uFF1F<N>");
          getKey.setKeyWords("[\\u662F(Y)/\\u5426(N)]");
          _context15.next = 31;
          return getKey.go();
        case 31:
          key = _context15.sent;
          if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
            _context15.next = 34;
            break;
          }
          return _context15.abrupt("return");
        case 34:
          i = 0;
        case 35:
          if (!(i < aryId.length)) {
            _context15.next = 44;
            break;
          }
          tmp = aryId[i].clone();
          if (tmp) {
            _context15.next = 39;
            break;
          }
          return _context15.abrupt("continue", 41);
        case 39:
          tmp.mirror(ptBase, ptBase2);
          MxCpp.getCurrentMxCAD().drawEntity(tmp);
        case 41:
          i++;
          _context15.next = 35;
          break;
        case 44:
          if ((key === null || key === void 0 ? void 0 : key.toLocaleLowerCase()) === "y") {
            for (_i3 = 0; _i3 < aryId.length; _i3++) {
              aryId[_i3].erase();
            }
          }
        case 45:
        case "end":
          return _context15.stop();
      }
    }, _callee12);
  }));
  return _Mx_Mirror.apply(this, arguments);
}
var copyAttribute = function copyAttribute(oEnt, ent) {
  oEnt.layer = ent.layer;
  oEnt.trueColor = ent.trueColor;
  oEnt.colorIndex = ent.colorIndex;
  oEnt.linetype = ent.linetype;
  oEnt.visible = ent.visible;
  oEnt.textStyle = ent.textStyle;
  oEnt.lineweight = ent.lineweight;
  oEnt.drawOrder = ent.drawOrder;
  oEnt.linetypeScale = ent.linetypeScale;
};
var isShiftKey = false;
var onKeydown = function onKeydown(e) {
  isShiftKey = e.shiftKey;
};
var onKeyup = function onKeyup(e) {
  isShiftKey = e.shiftKey;
};
window.addEventListener("keydown", onKeydown);
window.addEventListener("keyup", onKeyup);
function Mx_Chamfer() {
  return _Mx_Chamfer.apply(this, arguments);
}
function _Mx_Chamfer() {
  _Mx_Chamfer = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee15() {
    var chamferDist, chamferDist1, chamferLength, chamferAngle, isAngleChamfer, isPruning, isMultiple, getChamferDists, getChamferAngle, calculateChamferDist2, _loop4, _ret4;
    return regenerator.wrap(function _callee15$(_context19) {
      while (1) switch (_context19.prev = _context19.next) {
        case 0:
          chamferDist = Number(localStorage.getItem("mx_chamfer_dist"));
          chamferDist1 = Number(localStorage.getItem("mx_chamfer_dist1"));
          if (typeof chamferDist !== "number") chamferDist = 0;
          if (typeof chamferDist1 !== "number") chamferDist1 = 0;
          chamferLength = 0;
          chamferAngle = 0;
          isAngleChamfer = false;
          isPruning = true;
          isMultiple = false;
          MxFun.acutPrintf("\\n(".concat(isPruning ? "\\u4FEE\\u526A" : "\\u4E0D\\u4FEE\\u526A", "\\u6A21\\u5F0F) \\u5F53\\u524D").concat(isAngleChamfer ? "\\u5012\\u89D2\\u957F\\u5EA6 = " + chamferDist.toFixed(4) + ", \\u89D2\\u5EA6 = " + Math.trunc(chamferAngle / (Math.PI / 180)) : "\\u5012\\u89D2\\u8DDD\\u79BB1 = " + chamferDist.toFixed(4) + ", \\u8DDD\\u79BB2 = " + chamferDist1.toFixed(4), "\\n"));
          getChamferDists = /*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee13() {
              var getDist, dist2, dist1;
              return regenerator.wrap(function _callee13$(_context16) {
                while (1) switch (_context16.prev = _context16.next) {
                  case 0:
                    getDist = new MxCADUiPrDist();
                    getDist.setDynamicInputType(DynamicInputType.kXYCoordInput);
                    getDist.setMessage("\\u6307\\u5B9A\\u7B2C\\u4E00\\u4E2A\\u5012\\u89D2\\u8DDD\\u79BB<".concat(chamferDist.toFixed(4), ">"));
                    getDist.setKeyWords("");
                    _context16.next = 6;
                    return getDist.go();
                  case 6:
                    dist2 = _context16.sent;
                    if (!(typeof dist2 !== "number")) {
                      _context16.next = 9;
                      break;
                    }
                    return _context16.abrupt("return");
                  case 9:
                    chamferDist = dist2;
                    getDist.setMessage("\\u6307\\u5B9A\\u7B2C\\u4E8C\\u4E2A\\u5012\\u89D2\\u8DDD\\u79BB<".concat(chamferDist1.toFixed(4), ">"));
                    getDist.setKeyWords("");
                    _context16.next = 14;
                    return getDist.go();
                  case 14:
                    dist1 = _context16.sent;
                    if (!(typeof dist1 !== "number")) {
                      _context16.next = 17;
                      break;
                    }
                    return _context16.abrupt("return");
                  case 17:
                    chamferDist1 = dist1;
                    localStorage.setItem("mx_chamfer_dist", chamferDist.toString());
                    localStorage.setItem("mx_chamfer_dist1", chamferDist1.toString());
                    isAngleChamfer = false;
                    return _context16.abrupt("return", [chamferDist, chamferDist1]);
                  case 22:
                  case "end":
                    return _context16.stop();
                }
              }, _callee13);
            }));
            return function getChamferDists() {
              return _ref3.apply(this, arguments);
            };
          }();
          getChamferAngle = /*#__PURE__*/function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee14() {
              var getDist, length, getAngle, angle;
              return regenerator.wrap(function _callee14$(_context17) {
                while (1) switch (_context17.prev = _context17.next) {
                  case 0:
                    getDist = new MxCADUiPrDist();
                    getDist.setMessage("\\u6307\\u5B9A\\u7B2C\\u4E00\\u6761\\u76F4\\u7EBF\\u7684\\u5012\\u89D2\\u957F\\u5EA6<".concat(chamferLength.toFixed(4), ">"));
                    getDist.setKeyWords("");
                    getDist.clearLastInputPoint();
                    _context17.next = 6;
                    return getDist.go();
                  case 6:
                    length = _context17.sent;
                    if (!(typeof length !== "number")) {
                      _context17.next = 9;
                      break;
                    }
                    return _context17.abrupt("return");
                  case 9:
                    chamferLength = length;
                    getAngle = new MxCADUiPrAngle();
                    getAngle.setMessage("\\u6307\\u5B9A\\u7B2C\\u4E00\\u6761\\u76F4\\u7EBF\\u7684\\u5012\\u89D2\\u89D2\\u5EA6<".concat(Math.trunc(chamferAngle / (Math.PI / 180)), ">"));
                    getAngle.setKeyWords("");
                    getDist.clearLastInputPoint();
                    _context17.next = 16;
                    return getAngle.go();
                  case 16:
                    angle = _context17.sent;
                    if (!(typeof angle !== "number")) {
                      _context17.next = 19;
                      break;
                    }
                    return _context17.abrupt("return");
                  case 19:
                    if (getAngle.getDetailedResult() === DetailedResult.kCoordIn) {
                      chamferAngle = angle * (Math.PI / 180);
                    } else {
                      chamferAngle = angle;
                    }
                    isAngleChamfer = true;
                    return _context17.abrupt("return", [chamferLength, chamferAngle]);
                  case 22:
                  case "end":
                    return _context17.stop();
                }
              }, _callee14);
            }));
            return function getChamferAngle() {
              return _ref4.apply(this, arguments);
            };
          }();
          calculateChamferDist2 = function calculateChamferDist2(line1, line2, dist2, angle) {
            var startPoint = line1.startPoint.clone();
            var midPoint = line2.startPoint.clone();
            var endPoint = line2.endPoint.clone();
            var point = midPoint.clone().addvec(midPoint.sub(startPoint).normalize().mult(-dist2));
            var vet = point.sub(midPoint).rotateBy(-angle).mult(-dist2);
            var point1 = point.clone().addvec(vet);
            var rayLine = new McDbLine(point, point1);
            var rayLine1 = new McDbLine(midPoint, endPoint.clone().addvec(midPoint.sub(endPoint).normalize().mult(-dist2)));
            var intersectPoints = rayLine.IntersectWith(rayLine1, McDb.Intersect.kExtendBoth);
            if (intersectPoints.isEmpty()) {
              return;
            }
            var intersectPoint = intersectPoints.at(0);
            return intersectPoint.distanceTo(midPoint);
          };
          _loop4 = /*#__PURE__*/regenerator.mark(function _loop4() {
            var getEnt, filter, objId, getEnt2, filter2, createNewEnts, objId2, val, ent, num, index, vNum, _index, _val$getWidthsAt, val1, val2, getKey, key, _getKey2, _key2, pt1, lineEnt, filter1, selectLineInfo, isChamferLengthWarningShow, showWarning, exit, calculateAndApplyChamferBetweenTwoLines, oLineId, oLine, line, pt2, _line, _oLine, iPoints, dist1, dist2, iPoint, _val, _ref7, line1, line2, apply, is;
            return regenerator.wrap(function _loop4$(_context18) {
              while (1) switch (_context18.prev = _context18.next) {
                case 0:
                  getEnt = new MxCADUiPrEntity();
                  getEnt.setDynamicInputType(DynamicInputType.kNoInput);
                  filter = new MxCADResbuf();
                  filter.AddMcDbEntityTypes("LINE,LWPOLYLINE");
                  getEnt.setFilter(filter);
                  getEnt.setMessage("\\u9009\\u62E9\\u4E00\\u6761\\u76F4\\u7EBF");
                  getEnt.setKeyWords("[\\u653E\\u5F03(U)/\\u591A\\u6BB5\\u7EBF(P)/\\u8DDD\\u79BB(D)/\\u89D2\\u5EA6(A)/\\u4FEE\\u526A(T)/\\u65B9\\u5F0F(E)/\\u591A\\u4E2A(M)]");
                  _context18.next = 9;
                  return getEnt.go();
                case 9:
                  objId = _context18.sent;
                  if (!getEnt.isKeyWordPicked("U")) {
                    _context18.next = 12;
                    break;
                  }
                  return _context18.abrupt("return", 0);
                case 12:
                  if (!getEnt.isKeyWordPicked("P")) {
                    _context18.next = 77;
                    break;
                  }
                case 13:
                  getEnt2 = new MxCADUiPrEntity();
                  getEnt2.setDynamicInputType(DynamicInputType.kNoInput);
                  filter2 = new MxCADResbuf();
                  filter2.AddMcDbEntityTypes("LWPOLYLINE");
                  getEnt2.setMessage("\\u9009\\u62E9\\u4E8C\\u7EF4\\u591A\\u6BB5\\u7EBF");
                  getEnt2.setKeyWords("[\\u8DDD\\u79BB(D)/\\u89D2\\u5EA6(A)/\\u65B9\\u6CD5(M)]");
                  createNewEnts = function createNewEnts(objId3) {
                    var ent2 = objId3.getMcDbEntity();
                    if (!(ent2 instanceof McDbPolyline)) return;
                    var length = ent2.numVerts();
                    if (length < 3) {
                      return MxFun.acutPrintf("\\u6CA1\\u6709\\u7EBF\\u53EF\\u4EE5\\u5F62\\u6210\\u5012\\u89D2\\n");
                    }
                    var dist1 = chamferDist;
                    var dist2 = chamferDist1;
                    if (isAngleChamfer) {
                      var startPoint = ent2.getPointAt(0).val;
                      var midPoint = ent2.getPointAt(1).val;
                      var endPoint = ent2.getPointAt(2).val;
                      dist1 = chamferLength;
                      var val2 = calculateChamferDist2(new McDbLine(startPoint, midPoint), new McDbLine(midPoint, endPoint), chamferLength, chamferAngle);
                      if (typeof val2 !== "number") {
                        return MxFun.acutPrintf("\\n\\u5012\\u89D2\\u89D2\\u5EA6\\u65E0\\u6548\\u3002");
                      }
                      dist2 = val2;
                    }
                    var pl = new McDbPolyline();
                    pl.isClosed = ent2.isClosed;
                    var linePoints = [];
                    var getChamferPoints = function getChamferPoints(point, nextPoint) {
                      var isReverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                      var vet = point.sub(nextPoint).normalize().mult(isReverse ? -dist2 : -dist1);
                      var pt12 = point.clone().addvec(vet);
                      var vet1 = nextPoint.sub(point).normalize().mult(isReverse ? -dist1 : -dist2);
                      var pt2 = nextPoint.clone().addvec(vet1);
                      return [pt12, pt2];
                    };
                    var addChamferLine = function addChamferLine(point, nextPoint) {
                      var isReverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                      var _getChamferPoints = getChamferPoints(point, nextPoint, isReverse),
                        _getChamferPoints2 = _slicedToArray$1(_getChamferPoints, 2),
                        pt12 = _getChamferPoints2[0],
                        pt2 = _getChamferPoints2[1];
                      if (isPruning) {
                        pl.addVertexAt(pt12);
                        pl.addVertexAt(pt2);
                      } else {
                        linePoints.push(pt12, pt2);
                      }
                    };
                    for (var index = 0; index < length; index++) {
                      var point = ent2.getPointAt(index).val;
                      var nextPoint = ent2.getPointAt(index + 1).val;
                      if (ent2.isClosed) {
                        if (index !== length - 1) {
                          addChamferLine(point, nextPoint);
                        }
                      } else {
                        if (index === 0) {
                          pl.addVertexAt(point);
                          var vet1 = nextPoint.sub(point).normalize().mult(-dist1);
                          var pt = nextPoint.clone().addvec(vet1);
                          pl.addVertexAt(nextPoint.clone().addvec(vet1));
                          linePoints.unshift(pt);
                        } else if (index === length - 2) {
                          var _vet = point.sub(nextPoint).normalize().mult(-dist2);
                          var _pt = point.clone().addvec(_vet);
                          pl.addVertexAt(_pt);
                          pl.addVertexAt(nextPoint);
                          linePoints.push(_pt);
                        } else {
                          if (index !== length - 1) {
                            addChamferLine(point, nextPoint, true);
                          }
                        }
                      }
                    }
                    if (ent2.isClosed) {
                      addChamferLine(ent2.getPointAt(length - 1).val, ent2.getPointAt(0).val);
                    }
                    if (isPruning) {
                      copyAttribute(pl, ent2);
                      return pl;
                    } else {
                      var line = [];
                      var lines = [];
                      if (ent2.isClosed) {
                        linePoints.unshift(linePoints[linePoints.length - 1]);
                      }
                      linePoints.forEach(function (point) {
                        line.push(point);
                        if (line.length === 2) {
                          var mcLine = new McDbLine(line[0], line[1]);
                          copyAttribute(mcLine, ent2);
                          lines.push(mcLine);
                          line = [];
                        }
                      });
                      return lines;
                    }
                  };
                  _context18.next = 23;
                  return getEnt2.go();
                case 23:
                  objId2 = _context18.sent;
                  if (!getEnt2.isKeyWordPicked("D")) {
                    _context18.next = 30;
                    break;
                  }
                  _context18.next = 27;
                  return getChamferDists();
                case 27:
                  if (_context18.sent) {
                    _context18.next = 29;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 29:
                  return _context18.abrupt("continue", 13);
                case 30:
                  if (!getEnt2.isKeyWordPicked("A")) {
                    _context18.next = 36;
                    break;
                  }
                  _context18.next = 33;
                  return getChamferAngle();
                case 33:
                  if (_context18.sent) {
                    _context18.next = 35;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 35:
                  return _context18.abrupt("continue", 13);
                case 36:
                  if (!getEnt2.isKeyWordPicked("M")) {
                    _context18.next = 39;
                    break;
                  }
                  isMultiple = true;
                  return _context18.abrupt("continue", 13);
                case 39:
                  if (!(getEnt2.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context18.next = 41;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 41:
                  if (objId2) {
                    _context18.next = 43;
                    break;
                  }
                  return _context18.abrupt("continue", 13);
                case 43:
                  if (objId2.isValid()) {
                    _context18.next = 45;
                    break;
                  }
                  return _context18.abrupt("continue", 13);
                case 45:
                  val = createNewEnts(objId2);
                  if (val) {
                    _context18.next = 52;
                    break;
                  }
                  if (!isMultiple) {
                    _context18.next = 51;
                    break;
                  }
                  return _context18.abrupt("continue", 13);
                case 51:
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 52:
                  ent = objId2.getMcDbEntity();
                  if (ent) {
                    _context18.next = 59;
                    break;
                  }
                  if (!isMultiple) {
                    _context18.next = 58;
                    break;
                  }
                  return _context18.abrupt("continue", 13);
                case 58:
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 59:
                  if (!(val instanceof McDbPolyline)) {
                    _context18.next = 68;
                    break;
                  }
                  if (ent instanceof McDbPolyline) {
                    _context18.next = 62;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 62:
                  num = ent.numVerts();
                  for (index = 0; index < num; index++) {
                    ent.removeVertexAt(0);
                  }
                  vNum = val.numVerts();
                  for (_index = 0; _index < vNum; _index++) {
                    _val$getWidthsAt = val.getWidthsAt(_index), val1 = _val$getWidthsAt.val1, val2 = _val$getWidthsAt.val2;
                    ent.addVertexAt(val.getPointAt(_index).val, val.getBulgeAt(_index), val1, val2);
                  }
                  _context18.next = 70;
                  break;
                case 68:
                  val.forEach(function (line) {
                    MxCpp.getCurrentMxCAD().drawEntity(line);
                  });
                  ent.visible = true;
                case 70:
                  if (!isMultiple) {
                    _context18.next = 74;
                    break;
                  }
                  return _context18.abrupt("continue", 13);
                case 74:
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 75:
                  _context18.next = 13;
                  break;
                case 77:
                  if (!getEnt.isKeyWordPicked("D")) {
                    _context18.next = 83;
                    break;
                  }
                  _context18.next = 80;
                  return getChamferDists();
                case 80:
                  if (_context18.sent) {
                    _context18.next = 82;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 82:
                  return _context18.abrupt("return", 0);
                case 83:
                  if (!getEnt.isKeyWordPicked("A")) {
                    _context18.next = 89;
                    break;
                  }
                  _context18.next = 86;
                  return getChamferAngle();
                case 86:
                  if (_context18.sent) {
                    _context18.next = 88;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 88:
                  return _context18.abrupt("return", 0);
                case 89:
                  if (!getEnt.isKeyWordPicked("T")) {
                    _context18.next = 108;
                    break;
                  }
                  getKey = new MxCADUiPrKeyWord();
                  getKey.setMessage("\\u8F93\\u5165\\u4FEE\\u526A\\u6A21\\u5F0F\\u9009\\u9879<".concat(isPruning ? "\\u4FEE\\u526A" : "\\u4E0D\\u4FEE\\u526A", ">"));
                  getKey.setKeyWords("[\\u4FEE\\u526A(T)/\\u4E0D\\u4FEE\\u526A(N)]");
                  _context18.next = 95;
                  return getKey.go();
                case 95:
                  key = _context18.sent;
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context18.next = 98;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 98:
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
                    _context18.next = 100;
                    break;
                  }
                  return _context18.abrupt("return", 0);
                case 100:
                  if (key) {
                    _context18.next = 102;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 102:
                  if (!(key.toLocaleLowerCase() === "t")) {
                    _context18.next = 105;
                    break;
                  }
                  isPruning = true;
                  return _context18.abrupt("return", 0);
                case 105:
                  if (!(key.toLocaleLowerCase() === "n")) {
                    _context18.next = 108;
                    break;
                  }
                  isPruning = false;
                  return _context18.abrupt("return", 0);
                case 108:
                  if (!getEnt.isKeyWordPicked("E")) {
                    _context18.next = 127;
                    break;
                  }
                  _getKey2 = new MxCADUiPrKeyWord();
                  _getKey2.setMessage("\\u8F93\\u5165\\u526A\\u5207\\u65B9\\u6CD5<".concat(isAngleChamfer ? "\\u89D2\\u5EA6" : "\\u8DDD\\u79BB", ">"));
                  _getKey2.setKeyWords("[\\u8DDD\\u79BB(D)/\\u89D2\\u5EA6(A)]");
                  _context18.next = 114;
                  return _getKey2.go();
                case 114:
                  _key2 = _context18.sent;
                  if (!(_getKey2.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context18.next = 117;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 117:
                  if (!(_getKey2.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
                    _context18.next = 119;
                    break;
                  }
                  return _context18.abrupt("return", 0);
                case 119:
                  if (!(typeof _key2 !== "string")) {
                    _context18.next = 121;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 121:
                  if (!(_key2.toLocaleLowerCase() === "d")) {
                    _context18.next = 124;
                    break;
                  }
                  isAngleChamfer = false;
                  return _context18.abrupt("return", 0);
                case 124:
                  if (!(_key2.toLocaleLowerCase() === "a")) {
                    _context18.next = 127;
                    break;
                  }
                  isAngleChamfer = true;
                  return _context18.abrupt("return", 0);
                case 127:
                  if (!getEnt.isKeyWordPicked("M")) {
                    _context18.next = 130;
                    break;
                  }
                  isMultiple = true;
                  return _context18.abrupt("return", 0);
                case 130:
                  if (!(getEnt.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context18.next = 132;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 132:
                  if (objId) {
                    _context18.next = 134;
                    break;
                  }
                  return _context18.abrupt("return", 0);
                case 134:
                  if (objId.isValid()) {
                    _context18.next = 136;
                    break;
                  }
                  return _context18.abrupt("return", 0);
                case 136:
                  pt1 = getEnt.pickPoint();
                  lineEnt = objId.getMcDbEntity();
                  if (lineEnt) {
                    _context18.next = 140;
                    break;
                  }
                  return _context18.abrupt("return", 0);
                case 140:
                  filter1 = new MxCADResbuf();
                  filter1.AddMcDbEntityTypes("LINE,LWPOLYLINE");
                  if (lineEnt instanceof McDbLine) {
                    lineEnt.highlight(true);
                  }
                  if (!(lineEnt instanceof McDbPolyline)) {
                    _context18.next = 147;
                    break;
                  }
                  selectLineInfo = selectLineSegmentFromPolylineByPoint(lineEnt, pt1, MxFun.viewCoordLong2Cad(2));
                  if (selectLineInfo) {
                    _context18.next = 147;
                    break;
                  }
                  return _context18.abrupt("return", 0);
                case 147:
                  isChamferLengthWarningShow = false;
                  showWarning = function showWarning(text) {
                    if (isChamferLengthWarningShow) {
                      MxFun.acutPrintf(text);
                      isChamferLengthWarningShow = false;
                    }
                  };
                  exit = function exit() {
                    isChamferLengthWarningShow = true;
                    lineEnt.highlight(false);
                  };
                  calculateAndApplyChamferBetweenTwoLines = function calculateAndApplyChamferBetweenTwoLines(line, oLine, opt, chamferDist2, chamferDist12) {
                    var draw = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function (line2) {
                      MxCpp.getCurrentMxCAD().drawEntity(line2);
                    };
                    var lineEnt2 = line;
                    var oLineEnt = oLine;
                    var apply;
                    if (line instanceof McDbPolyline && selectLineInfo) {
                      var _selectLineInfo = selectLineInfo,
                        start = _selectLineInfo.start,
                        end = _selectLineInfo.end;
                      line = new McDbLine(start, end);
                    }
                    var selectOLineInfo;
                    if (oLine instanceof McDbPolyline) {
                      selectOLineInfo = selectLineSegmentFromPolylineByPoint(oLine, opt, 1);
                      if (!selectOLineInfo) return exit();
                      var _selectOLineInfo = selectOLineInfo,
                        _start = _selectOLineInfo.start,
                        _end = _selectOLineInfo.end;
                      oLine = new McDbLine(_start, _end);
                    }
                    oLine = oLine.clone();
                    line = line.clone();
                    if (!oLine || !line) return exit();
                    if (oLine instanceof McDbLine && line instanceof McDbLine) {
                      if (oLine.startPoint.isEqualTo(line.startPoint) && oLine.endPoint.isEqualTo(line.endPoint)) {
                        showWarning("\\n\\u56FE\\u5143\\u65E0\\u6CD5\\u7528\\u81EA\\u8EAB\\u5012\\u89D2");
                        return;
                      }
                      var _intersectPoints = oLine.IntersectWith(line, McDb.Intersect.kOnBothOperands);
                      var isEmpty = _intersectPoints.isEmpty();
                      if (!isEmpty) {
                        var _intersectPoint = _intersectPoints.at(0);
                        if ((line.startPoint.isEqualTo(_intersectPoint) || line.endPoint.isEqualTo(_intersectPoint) || oLine.startPoint.isEqualTo(_intersectPoint) || oLine.endPoint.isEqualTo(_intersectPoint)) && chamferDist2 === 0 && chamferDist12 === 0) {
                          return {
                            apply: function apply() {}
                          };
                        }
                      }
                      var interSectPoints = line.IntersectWith(oLine, McDb.Intersect.kExtendBoth);
                      if (interSectPoints.isEmpty()) {
                        showWarning("\\n\\u4E24\\u76F4\\u7EBF\\u5E73\\u884C");
                        return;
                      }
                      var intersectPoint = interSectPoints.at(0);
                      var isChamferTooLarge = function isChamferTooLarge(isStart, isOStart, start, end, oStart, oEnd) {
                        var is = false;
                        if (isEmpty) {
                          is = Math.max(start.distanceTo(intersectPoint), end.distanceTo(intersectPoint)) < chamferDist2 && chamferDist2 > 0 || Math.max(oStart.distanceTo(intersectPoint), oEnd.distanceTo(intersectPoint)) < chamferDist12 && chamferDist12 > 0;
                        } else {
                          is = (isStart ? start.distanceTo(intersectPoint) : end.distanceTo(intersectPoint)) < chamferDist2 && chamferDist2 > 0 || (isOStart ? oStart.distanceTo(intersectPoint) : oEnd.distanceTo(intersectPoint)) < chamferDist12 && chamferDist12 > 0;
                        }
                        if (is) {
                          showWarning("\\n\\u5012\\u89D2\\u8DDD\\u79BB\\u592A\\u5927");
                        }
                        return is;
                      };
                      apply = function apply() {
                        var line2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : lineEnt2;
                        var oLine2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : oLineEnt;
                        var isSame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : line2.getHandle() === oLine2.getHandle();
                        if (line2 instanceof McDbLine && oLine2 instanceof McDbLine) {
                          var isStart = isSegmentStartCloserToPoint(line2.startPoint, line2.endPoint, intersectPoint, pt1);
                          var isOStart = isSegmentStartCloserToPoint(oLine2.startPoint, oLine2.endPoint, intersectPoint, opt);
                          if (isChamferTooLarge(isStart, isOStart, line2.startPoint, line2.endPoint, oLine2.startPoint, oLine2.endPoint)) return;
                          var segmentLine = createChamferedLinesFromSegments(line2, oLine2, intersectPoint, isStart, isOStart, chamferDist2, chamferDist12, isPruning);
                          segmentLine && draw(segmentLine);
                          return true;
                        }
                        var processPolylineChamferClosure = function processPolylineChamferClosure(line3, oLine3, pt, opt2, selectLineInfo2, selectOLineInfo2) {
                          var num = line3.numVerts();
                          if (!isSame) {
                            line3.isClosed = false;
                          }
                          if (!selectLineInfo2) return;
                          var start = selectLineInfo2.start,
                            end = selectLineInfo2.end,
                            endIndex = selectLineInfo2.endIndex,
                            startIndex = selectLineInfo2.startIndex,
                            isClosed = selectLineInfo2.isClosed;
                          var points = [];
                          var getPointInfo = function getPointInfo(pl, index) {
                            var bulge = pl.getBulgeAt(index);
                            var point = pl.getPointAt(index).val;
                            var _pl$getWidthsAt = pl.getWidthsAt(index),
                              startWidth = _pl$getWidthsAt.val1,
                              endWidth = _pl$getWidthsAt.val2;
                            return {
                              point: point,
                              bulge: bulge,
                              startWidth: startWidth,
                              endWidth: endWidth
                            };
                          };
                          var isStart = isSegmentStartCloserToPoint(start.clone(), end.clone(), intersectPoint, pt);
                          if (oLine3 instanceof McDbLine) {
                            if (isSame) {
                              showWarning("\\n \\u540C\\u4E00\\u6761\\u76F4\\u7EBF\\u65E0\\u6CD5\\u5012\\u89D2");
                              return;
                            }
                            var _isOStart = isSegmentStartCloserToPoint(oLine3.startPoint.clone(), oLine3.endPoint.clone(), intersectPoint, opt2);
                            if (isChamferTooLarge(isStart, _isOStart, start, end, oLine3.startPoint, oLine3.endPoint)) {
                              return;
                            }
                            var _oline = oLine3.clone();
                            var _segmentLine = createChamferedLinesFromSegments(new McDbLine(start.clone(), end.clone()), _oline, intersectPoint, isStart, _isOStart, chamferDist2, chamferDist12, isPruning);
                            if (isStart) {
                              var num2 = isClosed ? line3.numVerts() : endIndex;
                              for (var _index2 = 0; _index2 < num2; _index2++) {
                                points.push(getPointInfo(line3, _index2));
                              }
                              if (_segmentLine) {
                                if (isPruning) {
                                  points.push({
                                    point: _segmentLine.startPoint
                                  });
                                  points.push({
                                    point: _segmentLine.endPoint
                                  });
                                } else {
                                  draw(_segmentLine);
                                }
                              } else {
                                points.push({
                                  point: intersectPoint
                                });
                              }
                              if (_isOStart) {
                                points.push({
                                  point: _oline.startPoint.clone()
                                });
                              } else {
                                points.push({
                                  point: _oline.endPoint.clone()
                                });
                              }
                            } else {
                              var _num = line3.numVerts();
                              if (isClosed) {
                                points.push(getPointInfo(line3, 0));
                              } else {
                                for (var _index3 = endIndex; _index3 < _num; _index3++) {
                                  points.push(getPointInfo(line3, _index3));
                                }
                              }
                              if (_segmentLine) {
                                if (isPruning) {
                                  points.unshift({
                                    point: _segmentLine.startPoint
                                  });
                                  points.unshift({
                                    point: _segmentLine.endPoint
                                  });
                                } else {
                                  draw(_segmentLine);
                                }
                              } else {
                                points.unshift({
                                  point: intersectPoint
                                });
                              }
                              if (_isOStart) {
                                points.unshift({
                                  point: oLine3.startPoint.clone()
                                });
                              } else {
                                points.unshift({
                                  point: oLine3.endPoint.clone()
                                });
                              }
                            }
                          } else if (oLine3 instanceof McDbPolyline && selectOLineInfo2) {
                            var oStart = selectOLineInfo2.start,
                              oEnd = selectOLineInfo2.end,
                              oStratIndex = selectOLineInfo2.startIndex,
                              oEndIndex = selectOLineInfo2.endIndex,
                              isOClosed = selectOLineInfo2.isClosed;
                            var _isOStart2 = isSegmentStartCloserToPoint(oStart, oEnd, intersectPoint, opt2);
                            if (isChamferTooLarge(isStart, _isOStart2, start, end, oStart, oEnd)) {
                              return;
                            }
                            var _segmentLine2 = createChamferedLinesFromSegments(new McDbLine(start, end), new McDbLine(oStart, oEnd), intersectPoint, isStart, _isOStart2, chamferDist2, chamferDist12, isPruning);
                            if (isSame) {
                              var _num2 = line3.numVerts();
                              var oNum = oLine3.numVerts();
                              var isEndToEnd = (startIndex === 0 || startIndex === _num2 - (isClosed ? 1 : 2)) && (oStratIndex === 0 || oStratIndex === oNum - (isOClosed ? 1 : 2)) && _num2 > (isClosed || isOClosed ? 2 : 4);
                              var difference = oStratIndex - startIndex;
                              if (isEndToEnd) {
                                if (_segmentLine2) {
                                  if (isPruning) {
                                    if (startIndex === 0 || oStratIndex === 0) {
                                      if (startIndex === 0) {
                                        line3.setPointAt(0, _segmentLine2.startPoint);
                                        if (isClosed || isOClosed) {
                                          line3.addVertexAt(_segmentLine2.endPoint);
                                        } else {
                                          line3.setPointAt(_num2 - 1, _segmentLine2.endPoint);
                                        }
                                      } else {
                                        line3.setPointAt(0, _segmentLine2.endPoint);
                                        if (isClosed || isOClosed) {
                                          line3.addVertexAt(_segmentLine2.startPoint);
                                        } else {
                                          line3.setPointAt(_num2 - 1, _segmentLine2.startPoint);
                                        }
                                      }
                                      line3.isClosed = true;
                                    } else if (isPruning) {
                                      line3.setPointAt(_num2 - 1, isClosed ? _segmentLine2.endPoint : _segmentLine2.startPoint);
                                      line3.addVertexAt(isClosed ? _segmentLine2.startPoint : _segmentLine2.endPoint);
                                    }
                                  } else {
                                    draw(_segmentLine2);
                                  }
                                } else if (isPruning) {
                                  line3.setPointAt(0, intersectPoint);
                                  line3.removeVertexAt(_num2 - 1);
                                  line3.isClosed = true;
                                }
                                return true;
                              } else if (Math.abs(difference) > 2) {
                                showWarning("\\n\\u591A\\u6BB5\\u7EBF\\u4E2D\\u7684\\u76F4\\u7EBF\\u5FC5\\u987B\\u662F\\u8FDE\\u7EED\\u7684 \\u6216\\u88AB\\u4E00\\u6761\\u7EBF\\u6BB5\\u65AD\\u5F00\\u3002");
                                return;
                              } else {
                                oLine3 = oLine3.clone();
                              }
                            }
                            if (!(oLine3 instanceof McDbPolyline)) return;
                            if (isStart) {
                              for (var _index4 = 0; _index4 <= startIndex; _index4++) {
                                points.push(getPointInfo(line3, _index4));
                              }
                              if (_segmentLine2) {
                                if (isPruning) {
                                  points.push({
                                    point: _segmentLine2.startPoint
                                  });
                                  points.push({
                                    point: _segmentLine2.endPoint
                                  });
                                } else {
                                  draw(_segmentLine2);
                                }
                              } else {
                                points.push({
                                  point: intersectPoint
                                });
                              }
                              if (_isOStart2) {
                                for (var _index5 = oStratIndex; _index5 >= 0; _index5--) {
                                  points.push(getPointInfo(oLine3, _index5));
                                }
                              } else {
                                if (isOClosed) {
                                  points.push(getPointInfo(oLine3, 0));
                                } else {
                                  var _oNum = oLine3.numVerts();
                                  for (var _index6 = oEndIndex; _index6 < _oNum; _index6++) {
                                    points.push(getPointInfo(oLine3, _index6));
                                  }
                                }
                              }
                            } else {
                              var _num3 = line3.numVerts();
                              if (isClosed) {
                                points.push(getPointInfo(line3, 0));
                              } else {
                                for (var _index7 = endIndex; _index7 < _num3; _index7++) {
                                  points.push(getPointInfo(line3, _index7));
                                }
                              }
                              if (_segmentLine2) {
                                if (isPruning) {
                                  points.unshift({
                                    point: _segmentLine2.startPoint
                                  });
                                  points.unshift({
                                    point: _segmentLine2.endPoint
                                  });
                                } else {
                                  draw(_segmentLine2);
                                }
                              } else {
                                points.unshift({
                                  point: intersectPoint
                                });
                              }
                              if (_isOStart2) {
                                for (var _index8 = oStratIndex; _index8 >= 0; _index8--) {
                                  points.unshift(getPointInfo(oLine3, _index8));
                                }
                              } else {
                                if (isOClosed) {
                                  points.unshift(getPointInfo(oLine3, 0));
                                } else {
                                  var _oNum2 = oLine3.numVerts();
                                  for (var _index9 = oEndIndex; _index9 < _oNum2; _index9++) {
                                    points.unshift(getPointInfo(oLine3, _index9));
                                  }
                                }
                              }
                            }
                          } else {
                            return false;
                          }
                          if (isPruning) {
                            for (var _index10 = 0; _index10 < num; _index10++) {
                              line3.removeVertexAt(0);
                            }
                            points.forEach(function (_ref5) {
                              var point = _ref5.point,
                                bulge = _ref5.bulge,
                                startWidth = _ref5.startWidth,
                                endWidth = _ref5.endWidth;
                              line3.addVertexAt(point, bulge, startWidth, endWidth);
                            });
                            oLine3.erase();
                          }
                          return true;
                        };
                        if (line2 instanceof McDbPolyline && selectLineInfo) {
                          return processPolylineChamferClosure(line2, oLine2, pt1, opt, selectLineInfo, selectOLineInfo);
                        } else if (oLine2 instanceof McDbPolyline && selectOLineInfo) {
                          return processPolylineChamferClosure(oLine2, line2, opt, pt1, selectOLineInfo, selectLineInfo);
                        } else {
                          return false;
                        }
                      };
                      return {
                        apply: apply,
                        line1: line,
                        line2: oLine
                      };
                    }
                  };
                  getEnt.setUserDraw(function (pt, pw) {
                    var line = lineEnt.clone();
                    var findObjId = MxCADUtility.findEntAtPoint(pt.x, pt.y, pt.z, -1, filter1);
                    if (!findObjId) return exit();
                    if (!findObjId.isValid()) return exit();
                    var _oline = findObjId.getMcDbEntity();
                    if (!_oline) return exit();
                    var oLine = _oline === null || _oline === void 0 ? void 0 : _oline.clone();
                    if (!oLine) return exit();
                    var _ref6 = calculateAndApplyChamferBetweenTwoLines(line, oLine, pt, isShiftKey ? 0 : chamferDist, isShiftKey ? 0 : chamferDist1, function (ent) {
                        pw.drawMcDbEntity(ent);
                      }) || {},
                      line1 = _ref6.line1,
                      line2 = _ref6.line2,
                      apply = _ref6.apply;
                    var is = apply && apply(line, oLine, lineEnt.getHandle() === _oline.getHandle());
                    if (line1 && line2 && is) {
                      line.drawOrder = lineEnt.drawOrder + _oline.drawOrder + 102;
                      line1.drawOrder = lineEnt.drawOrder + _oline.drawOrder + 101;
                      line2.drawOrder = lineEnt.drawOrder + _oline.drawOrder + 101;
                      var color = new THREE.Color(Number(lineEnt.trueColor.getColorValue(lineEnt.layerId)));
                      var darkColor = color.clone();
                      if (isPruning) {
                        darkenColor(darkColor, 0.5);
                        pw.setColor(darkColor);
                      }
                      pw.drawMcDbEntity(line1);
                      pw.drawMcDbEntity(line2);
                      pw.setColor(color);
                      pw.drawMcDbEntity(line);
                    }
                  });
                case 152:
                  getEnt.setMessage("\\u9009\\u62E9\\u7B2C\\u4E8C\\u6761\\u76F4\\u7EBF\\uFF0C\\u6216\\u6309\\u4F4Fshift\\u952E\\u9009\\u62E9\\u76F4\\u7EBF\\u4EE5\\u5E94\\u7528\\u89D2\\u70B9");
                  getEnt.setKeyWords("[\\u8DDD\\u79BB(D)/\\u89D2\\u5EA6(A)/\\u65B9\\u6CD5(M)]");
                  _context18.next = 157;
                  return getEnt.go();
                case 157:
                  oLineId = _context18.sent;
                  if (!getEnt.isKeyWordPicked("D")) {
                    _context18.next = 164;
                    break;
                  }
                  _context18.next = 161;
                  return getChamferDists();
                case 161:
                  if (_context18.sent) {
                    _context18.next = 163;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 163:
                  return _context18.abrupt("continue", 152);
                case 164:
                  if (!getEnt.isKeyWordPicked("A")) {
                    _context18.next = 170;
                    break;
                  }
                  _context18.next = 167;
                  return getChamferAngle();
                case 167:
                  if (_context18.sent) {
                    _context18.next = 169;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 169:
                  return _context18.abrupt("continue", 152);
                case 170:
                  if (!getEnt.isKeyWordPicked("M")) {
                    _context18.next = 173;
                    break;
                  }
                  isMultiple = true;
                  return _context18.abrupt("continue", 152);
                case 173:
                  if (!(getEnt.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context18.next = 175;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: void 0
                  });
                case 175:
                  if (oLineId) {
                    _context18.next = 177;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: exit()
                  });
                case 177:
                  if (oLineId.isValid()) {
                    _context18.next = 179;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: exit()
                  });
                case 179:
                  oLine = oLineId.getMcDbEntity();
                  if (oLine) {
                    _context18.next = 182;
                    break;
                  }
                  return _context18.abrupt("return", {
                    v: exit()
                  });
                case 182:
                  line = lineEnt;
                  pt2 = getEnt.pickPoint();
                  _line = line.clone();
                  if (_line) {
                    _context18.next = 191;
                    break;
                  }
                  if (!isMultiple) {
                    _context18.next = 190;
                    break;
                  }
                  return _context18.abrupt("continue", 152);
                case 190:
                  return _context18.abrupt("return", {
                    v: exit()
                  });
                case 191:
                  _oLine = line.clone();
                  if (_oLine) {
                    _context18.next = 198;
                    break;
                  }
                  if (!isMultiple) {
                    _context18.next = 197;
                    break;
                  }
                  return _context18.abrupt("continue", 152);
                case 197:
                  return _context18.abrupt("return", {
                    v: exit()
                  });
                case 198:
                  iPoints = _line.IntersectWith(_oLine, McDb.Intersect.kOnBothOperands);
                  if (!iPoints.isEmpty()) {
                    _context18.next = 205;
                    break;
                  }
                  if (!isMultiple) {
                    _context18.next = 204;
                    break;
                  }
                  return _context18.abrupt("continue", 152);
                case 204:
                  return _context18.abrupt("return", {
                    v: exit()
                  });
                case 205:
                  dist1 = chamferDist;
                  dist2 = chamferDist1;
                  if (!isAngleChamfer) {
                    _context18.next = 219;
                    break;
                  }
                  iPoint = iPoints.at(0);
                  _val = calculateChamferDist2(new McDbLine(pt1, iPoint), new McDbLine(iPoint, pt2), chamferLength, chamferAngle);
                  if (!(typeof _val !== "number")) {
                    _context18.next = 217;
                    break;
                  }
                  MxFun.acutPrintf("\\n\\u5012\\u89D2\\u89D2\\u5EA6\\u65E0\\u6548\\u3002");
                  if (!isMultiple) {
                    _context18.next = 216;
                    break;
                  }
                  return _context18.abrupt("continue", 152);
                case 216:
                  return _context18.abrupt("return", {
                    v: exit()
                  });
                case 217:
                  dist1 = chamferLength;
                  dist2 = _val;
                case 219:
                  _ref7 = calculateAndApplyChamferBetweenTwoLines(line, oLine, pt2, isShiftKey ? 0 : dist1, isShiftKey ? 0 : dist2) || {}, line1 = _ref7.line1, line2 = _ref7.line2, apply = _ref7.apply;
                  if (!(line1 && line2 && areLinesCollinear(line1, line2))) {
                    _context18.next = 223;
                    break;
                  }
                  MxFun.acutPrintf("\\u5171\\u7EBF\\u76F4\\u7EBF\\u4E0D\\u80FD\\u4E3A \\u5012\\u89D2\\u3002");
                  return _context18.abrupt("return", {
                    v: exit()
                  });
                case 223:
                  if (!apply) {
                    _context18.next = 232;
                    break;
                  }
                  is = apply();
                  if (!(isMultiple && typeof is === "undefined")) {
                    _context18.next = 229;
                    break;
                  }
                  return _context18.abrupt("continue", 152);
                case 229:
                  return _context18.abrupt("break", 240);
                case 230:
                  _context18.next = 238;
                  break;
                case 232:
                  MxCpp.App.MxCADAssist.MxChamfer(objId.id, oLineId.id, pt1.x, pt1.y, pt2.x, pt2.y, dist1, dist2, isPruning);
                  if (!isMultiple) {
                    _context18.next = 237;
                    break;
                  }
                  return _context18.abrupt("continue", 152);
                case 237:
                  return _context18.abrupt("break", 240);
                case 238:
                  _context18.next = 152;
                  break;
                case 240:
                  if (lineEnt instanceof McDbLine) lineEnt.highlight(false);
                  if (!isMultiple) {
                    _context18.next = 245;
                    break;
                  }
                  return _context18.abrupt("return", 0);
                case 245:
                  exit();
                  return _context18.abrupt("return", 1);
                case 247:
                case "end":
                  return _context18.stop();
              }
            }, _loop4);
          });
        case 14:
          return _context19.delegateYield(_loop4(), "t0", 16);
        case 16:
          _ret4 = _context19.t0;
          if (!(_ret4 === 0)) {
            _context19.next = 19;
            break;
          }
          return _context19.abrupt("continue", 14);
        case 19:
          if (!(_ret4 === 1)) {
            _context19.next = 21;
            break;
          }
          return _context19.abrupt("break", 25);
        case 21:
          if (!_ret4) {
            _context19.next = 23;
            break;
          }
          return _context19.abrupt("return", _ret4.v);
        case 23:
          _context19.next = 14;
          break;
        case 25:
        case "end":
          return _context19.stop();
      }
    }, _callee15);
  }));
  return _Mx_Chamfer.apply(this, arguments);
}
function Mx_Fillet() {
  return _Mx_Fillet.apply(this, arguments);
}
function _Mx_Fillet() {
  _Mx_Fillet = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee17() {
    var radius, isPruning, isMultiple, getRadius, getEnt, entFilter, _loop5, _ret5;
    return regenerator.wrap(function _callee17$(_context23) {
      while (1) switch (_context23.prev = _context23.next) {
        case 0:
          radius = Number(localStorage.getItem("Mx_Fillet_radius")) || 0;
          isPruning = localStorage.getItem("Mx_Fillet_isPruning") === "false" ? false : true;
          isMultiple = false;
          MxFun.acutPrintf("\\n\\u5F53\\u524D\\u8BBE\\u7F6E: \\u6A21\\u5F0F = ".concat(isPruning ? "\\u4FEE\\u526A" : "\\u4E0D\\u4FEE\\u526A", ", \\u534A\\u5F84 = ").concat(radius.toFixed(4)));
          getRadius = /*#__PURE__*/function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee16() {
              var getDist, val;
              return regenerator.wrap(function _callee16$(_context20) {
                while (1) switch (_context20.prev = _context20.next) {
                  case 0:
                    getDist = new MxCADUiPrDist();
                    getDist.setDynamicInputType(DynamicInputType.kDistanceInput);
                    getDist.setKeyWords("\\u6307\\u5B9A\\u5706\\u89D2\\u534A\\u5F84<".concat(radius.toFixed(4), ">"));
                    _context20.next = 5;
                    return getDist.go();
                  case 5:
                    val = _context20.sent;
                    if (!(getDist.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                      _context20.next = 8;
                      break;
                    }
                    return _context20.abrupt("return");
                  case 8:
                    if (!(getDist.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
                      _context20.next = 10;
                      break;
                    }
                    return _context20.abrupt("return", radius);
                  case 10:
                    if (!(typeof val !== "number")) {
                      _context20.next = 12;
                      break;
                    }
                    return _context20.abrupt("return");
                  case 12:
                    radius = val;
                    localStorage.setItem("Mx_Fillet_radius", radius.toString());
                    return _context20.abrupt("return", radius);
                  case 15:
                  case "end":
                    return _context20.stop();
                }
              }, _callee16);
            }));
            return function getRadius() {
              return _ref8.apply(this, arguments);
            };
          }();
          getEnt = new MxCADUiPrEntity();
          entFilter = new MxCADResbuf();
          entFilter.AddMcDbEntityTypes("LINE,LWPOLYLINE");
          _loop5 = /*#__PURE__*/regenerator.mark(function _loop5() {
            var objId, _loop6, _ret6, getKey, key, pt1, filter, selEntity1, lineEnt, selectLineInfo, selEntity2, isChamferLengthWarningShow, showWarning, exit, calculateAndApplyFilletBetweenTwoLines, id2, oLine, line, pt2, _ref12, line1, line2, apply, is;
            return regenerator.wrap(function _loop5$(_context22) {
              while (1) switch (_context22.prev = _context22.next) {
                case 0:
                  getEnt.setDynamicInputType(DynamicInputType.kNoInput);
                  getEnt.setFilter(entFilter);
                  getEnt.setMessage("\\u9009\\u62E9\\u7B2C\\u4E00\\u4E2A\\u5BF9\\u8C61");
                  getEnt.setKeyWords("[\\u653E\\u5F03(U)/\\u591A\\u6BB5\\u7EBF(P)/\\u534A\\u5F84(R)/\\u4FEE\\u526A(T)/\\u591A\\u4E2A(M)]");
                  _context22.next = 6;
                  return getEnt.go();
                case 6:
                  objId = _context22.sent;
                  if (!(getEnt.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context22.next = 9;
                    break;
                  }
                  return _context22.abrupt("return", {
                    v: void 0
                  });
                case 9:
                  if (!getEnt.isKeyWordPicked("U")) {
                    _context22.next = 11;
                    break;
                  }
                  return _context22.abrupt("return", 0);
                case 11:
                  if (!getEnt.isKeyWordPicked("P")) {
                    _context22.next = 24;
                    break;
                  }
                  _loop6 = /*#__PURE__*/regenerator.mark(function _loop6() {
                    var plFilter, plObjeId, pl, numVerts, index, num, points, _pl$getPointAt, pt12, _pl$getPointAt2, pt2, _pl$getPointAt3, pt3, roundJoinInfo, arc, segmentLine, bulge, _pl$getWidthsAt2, ret, val1, val2, _pl$getWidthsAt3, ret2, val12, val22, num2, index2;
                    return regenerator.wrap(function _loop6$(_context21) {
                      while (1) switch (_context21.prev = _context21.next) {
                        case 0:
                          getEnt.setMessage("\\u9009\\u62E9\\u4E8C\\u7EF4\\u591A\\u6BB5\\u7EBF");
                          getEnt.setKeyWords("[\\u534A\\u5F84(R)]");
                          plFilter = new MxCADResbuf();
                          plFilter.AddMcDbEntityTypes("LWPOLYLINE");
                          getEnt.setFilter(plFilter);
                          _context21.next = 7;
                          return getEnt.go();
                        case 7:
                          plObjeId = _context21.sent;
                          if (!(getEnt.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                            _context21.next = 10;
                            break;
                          }
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 10:
                          if (!getEnt.isKeyWordPicked("R")) {
                            _context21.next = 17;
                            break;
                          }
                          _context21.next = 13;
                          return getRadius();
                        case 13:
                          _context21.t0 = _typeof$2(_context21.sent);
                          if (!(_context21.t0 !== "number")) {
                            _context21.next = 16;
                            break;
                          }
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 16:
                          return _context21.abrupt("return", 0);
                        case 17:
                          if (plObjeId) {
                            _context21.next = 19;
                            break;
                          }
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 19:
                          if (plObjeId.isValid()) {
                            _context21.next = 21;
                            break;
                          }
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 21:
                          pl = plObjeId.getMcDbEntity();
                          if (pl instanceof McDbPolyline) {
                            _context21.next = 24;
                            break;
                          }
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 24:
                          numVerts = pl.numVerts();
                          index = 0;
                          num = 0;
                          points = [];
                          if (!pl.isClosed) {
                            numVerts--;
                          }
                        case 29:
                          if (!(index < numVerts)) {
                            _context21.next = 82;
                            break;
                          }
                          index++;
                          if (num > numVerts - 1) num = 0;
                          _pl$getPointAt = pl.getPointAt(num), pt12 = _pl$getPointAt.val;
                          if (pt12) {
                            _context21.next = 39;
                            break;
                          }
                          if (!isMultiple) {
                            _context21.next = 38;
                            break;
                          }
                          return _context21.abrupt("return", 1);
                        case 38:
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 39:
                          num++;
                          if (num > numVerts - 1) num = 0;
                          _pl$getPointAt2 = pl.getPointAt(num), pt2 = _pl$getPointAt2.val;
                          if (pt2) {
                            _context21.next = 48;
                            break;
                          }
                          if (!isMultiple) {
                            _context21.next = 47;
                            break;
                          }
                          return _context21.abrupt("return", 1);
                        case 47:
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 48:
                          num++;
                          if (num > numVerts - 1) num = 0;
                          _pl$getPointAt3 = pl.getPointAt(num), pt3 = _pl$getPointAt3.val;
                          if (pt3) {
                            _context21.next = 57;
                            break;
                          }
                          if (!isMultiple) {
                            _context21.next = 56;
                            break;
                          }
                          return _context21.abrupt("return", 1);
                        case 56:
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 57:
                          num = index;
                          roundJoinInfo = createLineSegmentRoundJoin(radius, new McDbLine(pt12, pt2), new McDbLine(pt2, pt3), pt2, true, false, isPruning);
                          if (roundJoinInfo) {
                            _context21.next = 61;
                            break;
                          }
                          return _context21.abrupt("return", {
                            v: {
                              v: console.log("\\u4E24\\u76F4\\u7EBF\\u5E73\\u884C")
                            }
                          });
                        case 61:
                          arc = roundJoinInfo.arc, segmentLine = roundJoinInfo.segmentLine, bulge = roundJoinInfo.bulge;
                          if (segmentLine) {
                            _context21.next = 64;
                            break;
                          }
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 64:
                          if (!isPruning) {
                            _context21.next = 78;
                            break;
                          }
                          _pl$getWidthsAt2 = pl.getWidthsAt(index), ret = _pl$getWidthsAt2.ret, val1 = _pl$getWidthsAt2.val1, val2 = _pl$getWidthsAt2.val2;
                          if (ret) {
                            _context21.next = 74;
                            break;
                          }
                          if (!pl.isClosed) {
                            _context21.next = 73;
                            break;
                          }
                          _pl$getWidthsAt3 = pl.getWidthsAt(0), ret2 = _pl$getWidthsAt3.ret, val12 = _pl$getWidthsAt3.val1, val22 = _pl$getWidthsAt3.val2;
                          if (ret2) {
                            _context21.next = 71;
                            break;
                          }
                          return _context21.abrupt("continue", 29);
                        case 71:
                          points.push({
                            width: val12,
                            width1: val22,
                            bulge: bulge,
                            point: segmentLine.startPoint
                          });
                          points.unshift({
                            width: val12,
                            width1: val22,
                            bulge: pl.getBulgeAt(0),
                            point: segmentLine.endPoint
                          });
                        case 73:
                          return _context21.abrupt("continue", 29);
                        case 74:
                          points.push({
                            width: val1,
                            width1: val2,
                            bulge: bulge,
                            point: segmentLine.startPoint
                          });
                          points.push({
                            width: val1,
                            width1: val2,
                            bulge: pl.getBulgeAt(index),
                            point: segmentLine.endPoint
                          });
                          _context21.next = 80;
                          break;
                        case 78:
                          copyAttribute(arc, pl);
                          MxCpp.getCurrentMxCAD().drawEntity(arc);
                        case 80:
                          _context21.next = 29;
                          break;
                        case 82:
                          if (isPruning) {
                            num2 = pl.numVerts();
                            for (index2 = 0; index2 < num2; index2++) {
                              pl.removeVertexAt(0);
                            }
                            points.forEach(function (_ref9) {
                              var point = _ref9.point,
                                bulge = _ref9.bulge,
                                width = _ref9.width,
                                width1 = _ref9.width1;
                              pl.addVertexAt(point, bulge, width, width1);
                            });
                          }
                          if (!isMultiple) {
                            _context21.next = 87;
                            break;
                          }
                          return _context21.abrupt("return", 0);
                        case 87:
                          return _context21.abrupt("return", {
                            v: {
                              v: void 0
                            }
                          });
                        case 88:
                        case "end":
                          return _context21.stop();
                      }
                    }, _loop6);
                  });
                case 13:
                  return _context22.delegateYield(_loop6(), "t0", 15);
                case 15:
                  _ret6 = _context22.t0;
                  if (!(_ret6 === 0)) {
                    _context22.next = 18;
                    break;
                  }
                  return _context22.abrupt("continue", 13);
                case 18:
                  if (!(_ret6 === 1)) {
                    _context22.next = 20;
                    break;
                  }
                  return _context22.abrupt("continue", 13);
                case 20:
                  if (!_ret6) {
                    _context22.next = 22;
                    break;
                  }
                  return _context22.abrupt("return", _ret6.v);
                case 22:
                  _context22.next = 13;
                  break;
                case 24:
                  if (!getEnt.isKeyWordPicked("R")) {
                    _context22.next = 31;
                    break;
                  }
                  _context22.next = 27;
                  return getRadius();
                case 27:
                  _context22.t1 = _typeof$2(_context22.sent);
                  if (!(_context22.t1 !== "number")) {
                    _context22.next = 30;
                    break;
                  }
                  return _context22.abrupt("return", {
                    v: void 0
                  });
                case 30:
                  return _context22.abrupt("return", 0);
                case 31:
                  if (!getEnt.isKeyWordPicked("T")) {
                    _context22.next = 53;
                    break;
                  }
                  getKey = new MxCADUiPrKeyWord();
                  getKey.setDynamicInputType(DynamicInputType.kNoInput);
                  getKey.setMessage("\\u8F93\\u5165\\u526A\\u5207\\u6A21\\u5F0F\\u9009\\u9879<".concat(isPruning ? "\\u4FEE\\u526A" : "\\u4E0D\\u4FEE\\u526A", ">"));
                  getKey.setKeyWords("[\\u4FEE\\u526A(T)/\\u4E0D\\u4FEE\\u526A(N)]");
                  _context22.next = 38;
                  return getKey.go();
                case 38:
                  key = _context22.sent;
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context22.next = 41;
                    break;
                  }
                  return _context22.abrupt("return", {
                    v: void 0
                  });
                case 41:
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
                    _context22.next = 43;
                    break;
                  }
                  return _context22.abrupt("return", 0);
                case 43:
                  if (!(typeof key !== "string")) {
                    _context22.next = 45;
                    break;
                  }
                  return _context22.abrupt("return", {
                    v: void 0
                  });
                case 45:
                  if (!(key.toLocaleLowerCase() === "t")) {
                    _context22.next = 49;
                    break;
                  }
                  isPruning = true;
                  localStorage.setItem("Mx_Fillet_isPruning", "true");
                  return _context22.abrupt("return", 0);
                case 49:
                  if (!(key.toLocaleLowerCase() === "n")) {
                    _context22.next = 53;
                    break;
                  }
                  isPruning = false;
                  localStorage.setItem("Mx_Fillet_isPruning", "false");
                  return _context22.abrupt("return", 0);
                case 53:
                  if (!getEnt.isKeyWordPicked("M")) {
                    _context22.next = 56;
                    break;
                  }
                  isMultiple = true;
                  return _context22.abrupt("return", 0);
                case 56:
                  if (objId) {
                    _context22.next = 58;
                    break;
                  }
                  return _context22.abrupt("return", 0);
                case 58:
                  if (objId.isValid()) {
                    _context22.next = 60;
                    break;
                  }
                  return _context22.abrupt("return", 0);
                case 60:
                  pt1 = getEnt.pickPoint();
                  filter = new MxCADResbuf();
                  filter.AddMcDbEntityTypes("LINE,LWPOLYLINE");
                  selEntity1 = new MxCADUiPrEntity();
                  selEntity1.setFilter(filter);
                  lineEnt = objId.getMcDbEntity();
                  if (lineEnt) {
                    _context22.next = 68;
                    break;
                  }
                  return _context22.abrupt("return", 0);
                case 68:
                  if (lineEnt instanceof McDbLine) {
                    lineEnt.highlight(true);
                  }
                  if (!(lineEnt instanceof McDbPolyline)) {
                    _context22.next = 73;
                    break;
                  }
                  selectLineInfo = selectLineSegmentFromPolylineByPoint(lineEnt, pt1, MxFun.viewCoordLong2Cad(2));
                  if (selectLineInfo) {
                    _context22.next = 73;
                    break;
                  }
                  return _context22.abrupt("return", 0);
                case 73:
                  selEntity2 = new MxCADUiPrEntity();
                  selEntity2.setFilter(filter);
                  isChamferLengthWarningShow = false;
                  showWarning = function showWarning(text) {
                    if (isChamferLengthWarningShow) {
                      MxFun.acutPrintf(text);
                      isChamferLengthWarningShow = false;
                    }
                  };
                  exit = function exit() {
                    isChamferLengthWarningShow = true;
                    lineEnt.highlight(false);
                  };
                  calculateAndApplyFilletBetweenTwoLines = function calculateAndApplyFilletBetweenTwoLines(line, oLine, opt) {
                    var draw = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (line2) {
                      MxCpp.getCurrentMxCAD().drawEntity(line2);
                    };
                    var lineEnt2 = line;
                    var oLineEnt = oLine;
                    var apply;
                    if (line instanceof McDbPolyline && selectLineInfo) {
                      var _selectLineInfo2 = selectLineInfo,
                        start = _selectLineInfo2.start,
                        end = _selectLineInfo2.end;
                      line = new McDbLine(start, end);
                    }
                    var selectOLineInfo;
                    if (oLine instanceof McDbPolyline) {
                      selectOLineInfo = selectLineSegmentFromPolylineByPoint(oLine, opt, 1);
                      if (!selectOLineInfo) return exit();
                      var _selectOLineInfo2 = selectOLineInfo,
                        _start2 = _selectOLineInfo2.start,
                        _end2 = _selectOLineInfo2.end;
                      oLine = new McDbLine(_start2, _end2);
                    }
                    oLine = oLine.clone();
                    line = line.clone();
                    if (!oLine || !line) return exit();
                    if (oLine instanceof McDbLine && line instanceof McDbLine) {
                      if (oLine.startPoint.isEqualTo(line.startPoint) && oLine.endPoint.isEqualTo(line.endPoint)) {
                        showWarning("\\n\\u56FE\\u5143\\u65E0\\u6CD5\\u7528\\u81EA\\u8EAB\\u5012\\u89D2");
                        return;
                      }
                      var _intersectPoints = oLine.IntersectWith(line, McDb.Intersect.kOnBothOperands);
                      var isEmpty = _intersectPoints.isEmpty();
                      if (!isEmpty) {
                        var _intersectPoint = _intersectPoints.at(0);
                        if ((line.startPoint.isEqualTo(_intersectPoint) || line.endPoint.isEqualTo(_intersectPoint) || oLine.startPoint.isEqualTo(_intersectPoint) || oLine.endPoint.isEqualTo(_intersectPoint)) && radius === 0) {
                          return {
                            apply: function apply() {}
                          };
                        }
                      }
                      var interSectPoints = line.IntersectWith(oLine, McDb.Intersect.kExtendBoth);
                      if (interSectPoints.isEmpty()) {
                        showWarning("\\n\\u4E24\\u76F4\\u7EBF\\u5E73\\u884C");
                        return;
                      }
                      var intersectPoint = interSectPoints.at(0);
                      var isChamferTooLarge = function isChamferTooLarge(isStart, isOStart, start, end, oStart, oEnd, chamferDist) {
                        var is = false;
                        if (isEmpty) {
                          is = Math.max(start.distanceTo(intersectPoint), end.distanceTo(intersectPoint)) < chamferDist && chamferDist > 0 || Math.max(oStart.distanceTo(intersectPoint), oEnd.distanceTo(intersectPoint)) < chamferDist && chamferDist > 0;
                        } else {
                          is = (isStart ? start.distanceTo(intersectPoint) : end.distanceTo(intersectPoint)) < chamferDist && chamferDist > 0 || (isOStart ? oStart.distanceTo(intersectPoint) : oEnd.distanceTo(intersectPoint)) < chamferDist && chamferDist > 0;
                        }
                        if (is) {
                          showWarning("\\n\\u5012\\u89D2\\u8DDD\\u79BB\\u592A\\u5927");
                        }
                        return is;
                      };
                      apply = function apply() {
                        var line2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : lineEnt2;
                        var oLine2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : oLineEnt;
                        var isSame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : line2.getHandle() === oLine2.getHandle();
                        if (line2 instanceof McDbLine && oLine2 instanceof McDbLine) {
                          var isStart = isSegmentStartCloserToPoint(line2.startPoint, line2.endPoint, intersectPoint, pt1);
                          var isOStart = isSegmentStartCloserToPoint(oLine2.startPoint, oLine2.endPoint, intersectPoint, opt);
                          var roundJoinInfo = createLineSegmentRoundJoin(radius, line2, oLine2, intersectPoint, isStart, isOStart, isPruning, isShiftKey);
                          if (!roundJoinInfo) {
                            showWarning("\\n\\u76F4\\u7EBF\\u5E73\\u884C");
                            return;
                          }
                          var arc = roundJoinInfo.arc,
                            chamferDist = roundJoinInfo.chamferDist;
                          if (isChamferTooLarge(isStart, isOStart, line2.startPoint, line2.endPoint, oLine2.startPoint, oLine2.endPoint, chamferDist)) return;
                          arc && draw(arc);
                          return true;
                        }
                        var processPolylineChamferClosure = function processPolylineChamferClosure(line3, oLine3, pt, opt2, selectLineInfo2, selectOLineInfo2) {
                          var num = line3.numVerts();
                          if (!isSame) {
                            line3.isClosed = false;
                          }
                          if (!selectLineInfo2) return;
                          var start = selectLineInfo2.start,
                            end = selectLineInfo2.end,
                            endIndex = selectLineInfo2.endIndex,
                            startIndex = selectLineInfo2.startIndex,
                            isClosed = selectLineInfo2.isClosed;
                          var points = [];
                          var getPointInfo = function getPointInfo(pl, index) {
                            var bulge = pl.getBulgeAt(index);
                            var point = pl.getPointAt(index).val;
                            var _pl$getWidthsAt4 = pl.getWidthsAt(index),
                              startWidth = _pl$getWidthsAt4.val1,
                              endWidth = _pl$getWidthsAt4.val2;
                            return {
                              point: point,
                              bulge: bulge,
                              startWidth: startWidth,
                              endWidth: endWidth
                            };
                          };
                          var isStart = isSegmentStartCloserToPoint(start.clone(), end.clone(), intersectPoint, pt);
                          if (oLine3 instanceof McDbLine) {
                            if (isSame) {
                              showWarning("\\n \\u540C\\u4E00\\u6761\\u76F4\\u7EBF\\u65E0\\u6CD5\\u5012\\u89D2");
                              return;
                            }
                            var _isOStart3 = isSegmentStartCloserToPoint(oLine3.startPoint.clone(), oLine3.endPoint.clone(), intersectPoint, opt2);
                            var _oline = oLine3.clone();
                            var _roundJoinInfo = createLineSegmentRoundJoin(radius, new McDbLine(start.clone(), end.clone()), _oline, intersectPoint, isStart, _isOStart3, isPruning, isShiftKey);
                            if (!_roundJoinInfo) {
                              showWarning("\\n\\u76F4\\u7EBF\\u5E73\\u884C");
                              return;
                            }
                            var _chamferDist = _roundJoinInfo.chamferDist,
                              bulge = _roundJoinInfo.bulge,
                              segmentLine = _roundJoinInfo.segmentLine,
                              _arc = _roundJoinInfo.arc;
                            if (isChamferTooLarge(isStart, _isOStart3, start, end, oLine3.startPoint, oLine3.endPoint, _chamferDist)) {
                              return;
                            }
                            if (isStart) {
                              var num2 = isClosed ? line3.numVerts() : endIndex;
                              for (var index = 0; index < num2; index++) {
                                points.push(getPointInfo(line3, index));
                              }
                              if (segmentLine) {
                                if (isPruning) {
                                  points.push({
                                    point: segmentLine.startPoint,
                                    bulge: bulge
                                  });
                                  points.push({
                                    point: segmentLine.endPoint
                                  });
                                } else {
                                  draw(_arc);
                                }
                              } else {
                                points.push({
                                  point: intersectPoint
                                });
                              }
                              if (_isOStart3) {
                                points.push({
                                  point: _oline.startPoint.clone()
                                });
                              } else {
                                points.push({
                                  point: _oline.endPoint.clone()
                                });
                              }
                            } else {
                              var _num4 = line3.numVerts();
                              if (isClosed) {
                                points.push(getPointInfo(line3, 0));
                              } else {
                                for (var _index11 = endIndex; _index11 < _num4; _index11++) {
                                  points.push(getPointInfo(line3, _index11));
                                }
                              }
                              if (segmentLine) {
                                if (isPruning) {
                                  points.unshift({
                                    point: segmentLine.startPoint
                                  });
                                  points.unshift({
                                    point: segmentLine.endPoint,
                                    bulge: -bulge
                                  });
                                } else {
                                  draw(segmentLine);
                                }
                              } else {
                                points.unshift({
                                  point: intersectPoint
                                });
                              }
                              if (_isOStart3) {
                                points.unshift({
                                  point: oLine3.startPoint.clone()
                                });
                              } else {
                                points.unshift({
                                  point: oLine3.endPoint.clone()
                                });
                              }
                            }
                          } else if (oLine3 instanceof McDbPolyline && selectOLineInfo2) {
                            var oStart = selectOLineInfo2.start,
                              oEnd = selectOLineInfo2.end,
                              oStratIndex = selectOLineInfo2.startIndex,
                              oEndIndex = selectOLineInfo2.endIndex,
                              isOClosed = selectOLineInfo2.isClosed;
                            var _isOStart4 = isSegmentStartCloserToPoint(oStart, oEnd, intersectPoint, opt2);
                            var _roundJoinInfo2 = createLineSegmentRoundJoin(radius, new McDbLine(start, end), new McDbLine(oStart, oEnd), intersectPoint, isStart, _isOStart4, isPruning, isShiftKey);
                            if (!_roundJoinInfo2) {
                              showWarning("\\n\\u76F4\\u7EBF\\u5E73\\u884C");
                              return;
                            }
                            var _arc2 = _roundJoinInfo2.arc,
                              _segmentLine3 = _roundJoinInfo2.segmentLine,
                              _bulge = _roundJoinInfo2.bulge,
                              _chamferDist2 = _roundJoinInfo2.chamferDist;
                            if (isChamferTooLarge(isStart, _isOStart4, start, end, oStart, oEnd, _chamferDist2)) {
                              return;
                            }
                            if (isSame) {
                              var _num5 = line3.numVerts();
                              var oNum = oLine3.numVerts();
                              var isEndToEnd = (startIndex === 0 || startIndex === _num5 - (isClosed ? 1 : 2)) && (oStratIndex === 0 || oStratIndex === oNum - (isOClosed ? 1 : 2)) && _num5 > (isClosed || isOClosed ? 2 : 4);
                              var difference = oStratIndex - startIndex;
                              if (isEndToEnd) {
                                if (_segmentLine3) {
                                  if (isPruning) {
                                    if (startIndex === 0 || oStratIndex === 0) {
                                      if (startIndex === 0) {
                                        console.log("start1");
                                        line3.setPointAt(0, _segmentLine3.startPoint);
                                        if (isClosed || isOClosed) {
                                          line3.addVertexAt(_segmentLine3.endPoint, -_bulge);
                                        } else {
                                          line3.setPointAt(_num5 - 1, _segmentLine3.endPoint);
                                          line3.setBulgeAt(_num5 - 1, _bulge);
                                        }
                                      } else {
                                        line3.setPointAt(0, _segmentLine3.endPoint);
                                        if (isClosed || isOClosed) {
                                          line3.addVertexAt(_segmentLine3.startPoint, _bulge);
                                        } else {
                                          line3.setPointAt(_num5 - 1, _segmentLine3.startPoint);
                                          line3.setBulgeAt(_num5 - 1, _bulge);
                                        }
                                      }
                                      line3.isClosed = true;
                                    } else if (isPruning) {
                                      line3.setPointAt(_num5 - 1, isClosed ? _segmentLine3.endPoint : _segmentLine3.startPoint);
                                      line3.setBulgeAt(_num5 - 1, isClosed ? -_bulge : _bulge);
                                      line3.addVertexAt(isClosed ? _segmentLine3.startPoint : _segmentLine3.endPoint);
                                    }
                                  } else {
                                    draw(_arc2);
                                  }
                                } else if (isPruning) {
                                  line3.setPointAt(0, intersectPoint);
                                  line3.removeVertexAt(_num5 - 1);
                                  line3.isClosed = true;
                                }
                                return true;
                              } else if (Math.abs(difference) > 2) {
                                showWarning("\\n\\u591A\\u6BB5\\u7EBF\\u4E2D\\u7684\\u76F4\\u7EBF\\u5FC5\\u987B\\u662F\\u8FDE\\u7EED\\u7684 \\u6216\\u88AB\\u4E00\\u6761\\u7EBF\\u6BB5\\u65AD\\u5F00\\u3002");
                                return;
                              } else {
                                oLine3 = oLine3.clone();
                              }
                            }
                            if (!(oLine3 instanceof McDbPolyline)) return;
                            if (isStart) {
                              for (var _index12 = 0; _index12 <= startIndex; _index12++) {
                                points.push(getPointInfo(line3, _index12));
                              }
                              if (_segmentLine3) {
                                if (isPruning) {
                                  points.push({
                                    point: _segmentLine3.startPoint,
                                    bulge: _bulge
                                  });
                                  points.push({
                                    point: _segmentLine3.endPoint
                                  });
                                } else {
                                  draw(_arc2);
                                }
                              } else {
                                points.push({
                                  point: intersectPoint
                                });
                              }
                              if (_isOStart4) {
                                for (var _index13 = oStratIndex; _index13 >= 0; _index13--) {
                                  points.push(getPointInfo(oLine3, _index13));
                                }
                              } else {
                                if (isOClosed) {
                                  points.push(getPointInfo(oLine3, 0));
                                } else {
                                  var _oNum3 = oLine3.numVerts();
                                  for (var _index14 = oEndIndex; _index14 < _oNum3; _index14++) {
                                    points.push(getPointInfo(oLine3, _index14));
                                  }
                                }
                              }
                            } else {
                              var _num6 = line3.numVerts();
                              if (isClosed) {
                                points.push(getPointInfo(line3, 0));
                              } else {
                                for (var _index15 = endIndex; _index15 < _num6; _index15++) {
                                  points.push(getPointInfo(line3, _index15));
                                }
                              }
                              if (_segmentLine3) {
                                if (isPruning) {
                                  points.unshift({
                                    point: _segmentLine3.startPoint
                                  });
                                  points.unshift({
                                    point: _segmentLine3.endPoint,
                                    bulge: -_bulge
                                  });
                                } else {
                                  draw(_arc2);
                                }
                              } else {
                                points.unshift({
                                  point: intersectPoint
                                });
                              }
                              if (_isOStart4) {
                                for (var _index16 = oStratIndex; _index16 >= 0; _index16--) {
                                  points.unshift(getPointInfo(oLine3, _index16));
                                }
                              } else {
                                if (isOClosed) {
                                  points.unshift(getPointInfo(oLine3, 0));
                                } else {
                                  var _oNum4 = oLine3.numVerts();
                                  for (var _index17 = oEndIndex; _index17 < _oNum4; _index17++) {
                                    points.unshift(getPointInfo(oLine3, _index17));
                                  }
                                }
                              }
                            }
                          } else {
                            return false;
                          }
                          if (isPruning) {
                            for (var _index18 = 0; _index18 < num; _index18++) {
                              line3.removeVertexAt(0);
                            }
                            points.forEach(function (_ref10) {
                              var point = _ref10.point,
                                bulge = _ref10.bulge,
                                startWidth = _ref10.startWidth,
                                endWidth = _ref10.endWidth;
                              line3.addVertexAt(point, bulge, startWidth, endWidth);
                            });
                            oLine3.erase();
                          }
                          return true;
                        };
                        if (line2 instanceof McDbPolyline && selectLineInfo) {
                          return processPolylineChamferClosure(line2, oLine2, pt1, opt, selectLineInfo, selectOLineInfo);
                        } else if (oLine2 instanceof McDbPolyline && selectOLineInfo) {
                          return processPolylineChamferClosure(oLine2, line2, opt, pt1, selectOLineInfo, selectLineInfo);
                        } else {
                          return false;
                        }
                      };
                      return {
                        apply: apply,
                        line1: line,
                        line2: oLine
                      };
                    }
                  };
                  selEntity2.setUserDraw(function (pt, pw) {
                    var line = lineEnt.clone();
                    var findObjId = MxCADUtility.findEntAtPoint(pt.x, pt.y, pt.z, -1, filter);
                    if (!findObjId) return exit();
                    if (!findObjId.isValid()) return exit();
                    var _oline = findObjId.getMcDbEntity();
                    if (!_oline) return exit();
                    var oLine = _oline === null || _oline === void 0 ? void 0 : _oline.clone();
                    if (!oLine) return exit();
                    var _ref11 = calculateAndApplyFilletBetweenTwoLines(line, oLine, pt, function (ent) {
                        console.log(121);
                        pw.drawMcDbEntity(ent);
                      }) || {},
                      line1 = _ref11.line1,
                      line2 = _ref11.line2,
                      apply = _ref11.apply;
                    var is = apply && apply(line, oLine, lineEnt.getHandle() === _oline.getHandle());
                    if (line1 && line2 && is) {
                      line.drawOrder = lineEnt.drawOrder + _oline.drawOrder + 102;
                      line1.drawOrder = lineEnt.drawOrder + _oline.drawOrder + 101;
                      line2.drawOrder = lineEnt.drawOrder + _oline.drawOrder + 101;
                      var color = new THREE.Color(Number(lineEnt.trueColor.getColorValue(lineEnt.layerId)));
                      var darkColor = color.clone();
                      if (isPruning) {
                        darkenColor(darkColor, 0.5);
                        pw.setColor(darkColor);
                      }
                      pw.drawMcDbEntity(line1);
                      pw.drawMcDbEntity(line2);
                      pw.setColor(color);
                      pw.drawMcDbEntity(line);
                    }
                  });
                case 80:
                  selEntity2.setMessage("\\u9009\\u62E9\\u7B2C\\u4E8C\\u6761\\u76F4\\u7EBF");
                  selEntity2.setKeyWords("[\\u534A\\u5F84(R)]");
                  _context22.next = 85;
                  return selEntity2.go();
                case 85:
                  id2 = _context22.sent;
                  if (!selEntity2.isKeyWordPicked("R")) {
                    _context22.next = 93;
                    break;
                  }
                  _context22.next = 89;
                  return getRadius();
                case 89:
                  _context22.t2 = _typeof$2(_context22.sent);
                  if (!(_context22.t2 !== "number")) {
                    _context22.next = 92;
                    break;
                  }
                  return _context22.abrupt("return", {
                    v: void 0
                  });
                case 92:
                  return _context22.abrupt("continue", 80);
                case 93:
                  if (id2) {
                    _context22.next = 95;
                    break;
                  }
                  return _context22.abrupt("return", {
                    v: exit()
                  });
                case 95:
                  if (id2.isValid()) {
                    _context22.next = 97;
                    break;
                  }
                  return _context22.abrupt("return", {
                    v: exit()
                  });
                case 97:
                  oLine = id2.getMcDbEntity();
                  if (oLine) {
                    _context22.next = 100;
                    break;
                  }
                  return _context22.abrupt("return", {
                    v: exit()
                  });
                case 100:
                  line = lineEnt;
                  pt2 = selEntity2.pickPoint();
                  _ref12 = calculateAndApplyFilletBetweenTwoLines(line, oLine, pt2) || {}, line1 = _ref12.line1, line2 = _ref12.line2, apply = _ref12.apply;
                  if (!(line1 && line2 && areLinesCollinear(line1, line2))) {
                    _context22.next = 106;
                    break;
                  }
                  MxFun.acutPrintf("\\u5171\\u7EBF\\u76F4\\u7EBF\\u4E0D\\u80FD\\u4E3A \\u5012\\u5706\\u89D2\\u89D2\\u3002");
                  return _context22.abrupt("return", {
                    v: exit()
                  });
                case 106:
                  if (!apply) {
                    _context22.next = 115;
                    break;
                  }
                  is = apply();
                  if (!(isMultiple && typeof is === "undefined")) {
                    _context22.next = 112;
                    break;
                  }
                  return _context22.abrupt("continue", 80);
                case 112:
                  return _context22.abrupt("break", 123);
                case 113:
                  _context22.next = 121;
                  break;
                case 115:
                  MxCpp.App.MxCADAssist.MxFillet(objId.id, id2.id, pt1.x, pt1.y, pt2.x, pt2.y, radius, isPruning);
                  if (!isMultiple) {
                    _context22.next = 120;
                    break;
                  }
                  return _context22.abrupt("continue", 80);
                case 120:
                  return _context22.abrupt("break", 123);
                case 121:
                  _context22.next = 80;
                  break;
                case 123:
                  exit();
                  if (!isMultiple) {
                    _context22.next = 128;
                    break;
                  }
                  return _context22.abrupt("return", 0);
                case 128:
                  return _context22.abrupt("return", 1);
                case 129:
                case "end":
                  return _context22.stop();
              }
            }, _loop5);
          });
        case 9:
          return _context23.delegateYield(_loop5(), "t0", 11);
        case 11:
          _ret5 = _context23.t0;
          if (!(_ret5 === 0)) {
            _context23.next = 14;
            break;
          }
          return _context23.abrupt("continue", 9);
        case 14:
          if (!(_ret5 === 1)) {
            _context23.next = 16;
            break;
          }
          return _context23.abrupt("break", 20);
        case 16:
          if (!_ret5) {
            _context23.next = 18;
            break;
          }
          return _context23.abrupt("return", _ret5.v);
        case 18:
          _context23.next = 9;
          break;
        case 20:
        case "end":
          return _context23.stop();
      }
    }, _callee17);
  }));
  return _Mx_Fillet.apply(this, arguments);
}
var getHurdleSelectionPoints = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
    var points, getPoint, pt, point;
    return regenerator.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          points = [];
        case 1:
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage(points.length === 0 ? "\\u6307\\u5B9A\\u7B2C\\u4E00\\u4E2A\\u680F\\u9009\\u70B9" : "\\u6307\\u5B9A\\u4E0B\\u4E00\\u4E2A\\u680F\\u9009\\u70B9");
          getPoint.setKeyWords(points.length === 0 ? "" : "[\\u653E\\u5F03(U)]");
          getPoint.setUserDraw(function (pt2, pw) {
            var pl = new McDbPolyline();
            points.forEach(function (point) {
              pl.addVertexAt(point);
            });
            pl.addVertexAt(pt2);
            pw.drawMcDbEntity(pl);
          });
          _context.next = 8;
          return getPoint.go();
        case 8:
          pt = _context.sent;
          if (!getPoint.isKeyWordPicked("U")) {
            _context.next = 13;
            break;
          }
          point = points.pop();
          point && getPoint.setLastInputPoint(point);
          return _context.abrupt("continue", 1);
        case 13:
          if (!(getPoint.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
            _context.next = 15;
            break;
          }
          return _context.abrupt("return", false);
        case 15:
          if (!(getPoint.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
            _context.next = 17;
            break;
          }
          return _context.abrupt("break", 22);
        case 17:
          if (pt) {
            _context.next = 19;
            break;
          }
          return _context.abrupt("return", points);
        case 19:
          points.push(pt);
          _context.next = 1;
          break;
        case 22:
          return _context.abrupt("return", points);
        case 23:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getHurdleSelectionPoints() {
    return _ref.apply(this, arguments);
  };
}();
function Mx_Trim() {
  return _Mx_Trim.apply(this, arguments);
}
function _Mx_Trim() {
  _Mx_Trim = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee18() {
    var isByWindow, isExtend, cachings, filter, getPoint, ss, aryId, aryIdLong, mxcadTrimAssert, mxcadExtendAssert, isShiftKey2, onKeydown2, onkeyup, _loop7, _ret7;
    return regenerator.wrap(function _callee18$(_context25) {
      while (1) switch (_context25.prev = _context25.next) {
        case 0:
          isByWindow = false;
          isExtend = false;
          cachings = [];
          filter = new MxCADResbuf();
          filter.AddMcDbEntityTypes("LINE,LWPOLYLINE,ELLIPSE,ARC,CIRCLE,SPLINE,XLINE");
          aryId = MxCADUtility.getCurrentSelect(filter);
          if (!(aryId.length === 0)) {
            _context25.next = 16;
            break;
          }
          _context25.next = 10;
          return MxCADUtility.userSelect("\\u9009\\u62E9\\u5BF9\\u8C61\\u6216<\\u5168\\u90E8\\u9009\\u62E9>", filter, function (_ss, _getPoint) {
            getPoint = _getPoint;
            ss = _ss;
          });
        case 10:
          aryId = _context25.sent;
          if (!(getPoint.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
            _context25.next = 13;
            break;
          }
          return _context25.abrupt("return");
        case 13:
          if (getPoint.getStatus() === MrxDbgUiPrBaseReturn.kNone) {
            if (aryId.length === 0) {
              ss.allSelect(filter);
              ss.forEach(function (val) {
                aryId.push(val);
              });
            }
          }
          if (!(aryId.length === 0)) {
            _context25.next = 16;
            break;
          }
          return _context25.abrupt("return");
        case 16:
          aryIdLong = new McGeLongArray();
          aryIdLong.copyFormAryId(aryId);
          mxcadTrimAssert = new MxCpp.mxcadassemblyimp.MxDrawTrimAssist();
          if (mxcadTrimAssert.Init(aryIdLong.imp)) {
            _context25.next = 21;
            break;
          }
          return _context25.abrupt("return");
        case 21:
          mxcadExtendAssert = new MxCpp.mxcadassemblyimp.MxDrawExtendAssist();
          if (mxcadExtendAssert.Init(aryIdLong.imp)) {
            _context25.next = 24;
            break;
          }
          return _context25.abrupt("return");
        case 24:
          isShiftKey2 = false;
          onKeydown2 = function onKeydown2(e) {
            isShiftKey2 = e.key === "Shift";
          };
          window.addEventListener("keydown", onKeydown2);
          onkeyup = function onkeyup() {
            return isShiftKey2 = false;
          };
          window.addEventListener("keyup", onkeyup);
          _loop7 = /*#__PURE__*/regenerator.mark(function _loop7() {
            var ss2, getPoint2, points, pl, getKey, key, ids2, _ref13, _ref14, _ids, ents, mxcad, ids, selPoint, _pt2, pt2, _pl;
            return regenerator.wrap(function _loop7$(_context24) {
              while (1) switch (_context24.prev = _context24.next) {
                case 0:
                  ss2 = new MxCADSelectionSet();
                  ss2.isWhileSelect = false;
                  ss2.isSelectHighlight = false;
                  _context24.next = 5;
                  return ss2.userSelect("\\u9009\\u62E9\\u8981\\u4FEE\\u526A\\u7684\\u5BF9\\u8C61\\u6216\\u6309\\u4F4F Shift \\u952E\\u9009\\u62E9\\u8981\\u5EF6\\u4F38\\u7684\\u5BF9\\u8C61", filter, function (_getPoint) {
                    getPoint2 = _getPoint;
                    getPoint2.setKeyWords("[\\u680F\\u9009(F)/\\u7A97\\u4EA4(C)/\\u8FB9(E)/\\u5220\\u9664(R)".concat(cachings.length > 0 ? "/\\u653E\\u5F03(U)" : "", "]"));
                  });
                case 5:
                  if (_context24.sent) {
                    _context24.next = 7;
                    break;
                  }
                  return _context24.abrupt("return", 0);
                case 7:
                  if (!getPoint2.isKeyWordPicked("F")) {
                    _context24.next = 18;
                    break;
                  }
                  _context24.next = 10;
                  return getHurdleSelectionPoints();
                case 10:
                  points = _context24.sent;
                  if (points) {
                    _context24.next = 13;
                    break;
                  }
                  return _context24.abrupt("return", 0);
                case 13:
                  pl = new McDbPolyline();
                  points.forEach(function (point) {
                    pl.addVertexAt(point);
                  });
                  cachings.push([aryId, aryId.map(function (id) {
                    return id.clone();
                  })]);
                  aryId.forEach(function (objId) {
                    var ent = objId.getMcDbEntity();
                    if (!(ent instanceof McDbCurve)) return;
                    var intersectPoints = ent.IntersectWith(pl, McDb.Intersect.kOnBothOperands);
                    if (intersectPoints.isEmpty()) return;
                    intersectPoints.forEach(function (point) {
                      aryIdLong.copyFormAryId([objId]);
                      isShiftKey2 ? mxcadExtendAssert.DoExtend(aryIdLong.imp, point.x, point.y, point.x, point.y) : mxcadTrimAssert.DoTrim(aryIdLong.imp, point.x, point.y, point.x, point.y);
                    });
                  });
                  return _context24.abrupt("return", 1);
                case 18:
                  if (!getPoint2.isKeyWordPicked("C")) {
                    _context24.next = 21;
                    break;
                  }
                  isByWindow = true;
                  return _context24.abrupt("return", 1);
                case 21:
                  if (!getPoint2.isKeyWordPicked("E")) {
                    _context24.next = 39;
                    break;
                  }
                  getKey = new MxCADUiPrKeyWord();
                  getKey.setMessage("\\u6307\\u5B9A\\u9690\\u542B\\u8FB9\\u5EF6\\u4F38\\u6A21\\u5F0F<".concat(isExtend ? "\\u5EF6\\u4F38" : "\\u4E0D\\u5EF6\\u4F38", ">"));
                  getKey.setKeyWords("[\\u5EF6\\u4F38(E)/\\u4E0D\\u5EF6\\u4F38(N)]");
                  _context24.next = 27;
                  return getKey.go();
                case 27:
                  key = getKey.keyWordPicked();
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context24.next = 30;
                    break;
                  }
                  return _context24.abrupt("return", {
                    v: void 0
                  });
                case 30:
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
                    _context24.next = 32;
                    break;
                  }
                  return _context24.abrupt("return", 1);
                case 32:
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kKeyWord)) {
                    _context24.next = 39;
                    break;
                  }
                  if (!(key === "E")) {
                    _context24.next = 36;
                    break;
                  }
                  isExtend = true;
                  return _context24.abrupt("return", 1);
                case 36:
                  if (!(key === "N")) {
                    _context24.next = 39;
                    break;
                  }
                  isExtend = false;
                  return _context24.abrupt("return", 1);
                case 39:
                  if (!getPoint2.isKeyWordPicked("R")) {
                    _context24.next = 46;
                    break;
                  }
                  _context24.next = 42;
                  return MxCADUtility.userSelect("\\u9009\\u62E9\\u8981\\u5220\\u9664\\u7684\\u5BF9\\u8C61", filter);
                case 42:
                  ids2 = _context24.sent;
                  cachings.push([ids2, ids2.map(function (id) {
                    return id.clone();
                  })]);
                  ids2.forEach(function (id) {
                    id.erase();
                  });
                  return _context24.abrupt("return", 1);
                case 46:
                  if (!getPoint2.isKeyWordPicked("U")) {
                    _context24.next = 52;
                    break;
                  }
                  _ref13 = cachings.pop() || [], _ref14 = _slicedToArray$1(_ref13, 2), _ids = _ref14[0], ents = _ref14[1];
                  _ids === null || _ids === void 0 ? void 0 : _ids.forEach(function (id) {
                    id.erase();
                  });
                  mxcad = MxCpp.getCurrentMxCAD();
                  ents === null || ents === void 0 ? void 0 : ents.forEach(function (ent) {
                    if (ent instanceof McDbEntity) mxcad.drawEntity(ent);
                  });
                  return _context24.abrupt("return", 1);
                case 52:
                  ids = ss2.getIds();
                  if (!(ids.length == 0)) {
                    _context24.next = 55;
                    break;
                  }
                  return _context24.abrupt("return", 1);
                case 55:
                  selPoint = ss2.getSelectPoint();
                  if (!isByWindow) {
                    _context24.next = 67;
                    break;
                  }
                  _pt2 = selPoint.pt1, pt2 = selPoint.pt2;
                  _pl = new McDbPolyline();
                  _pl.addVertexAt(_pt2);
                  _pl.addVertexAt(new McGePoint3d(_pt2.x, pt2.y));
                  _pl.addVertexAt(pt2);
                  _pl.addVertexAt(new McGePoint3d(pt2.x, _pt2.y));
                  _pl.isClosed = true;
                  cachings.push([aryId, aryId.map(function (id) {
                    return id.clone();
                  })]);
                  aryId.forEach(function (objId) {
                    var ent = objId.getMcDbEntity();
                    if (!(ent instanceof McDbCurve)) return;
                    var intersectPoints = ent.IntersectWith(_pl, McDb.Intersect.kOnBothOperands);
                    if (intersectPoints.isEmpty()) return;
                    intersectPoints.forEach(function (point) {
                      aryIdLong.copyFormAryId([objId]);
                      isShiftKey2 ? mxcadExtendAssert.DoExtend(aryIdLong.imp, point.x, point.y, point.x, point.y) : mxcadTrimAssert.DoTrim(aryIdLong.imp, point.x, point.y, point.x, point.y);
                    });
                  });
                  return _context24.abrupt("return", 1);
                case 67:
                  cachings.push([ids, aryId.map(function (id) {
                    return id.clone();
                  })]);
                  aryIdLong.copyFormAryId(ids);
                  isShiftKey2 ? mxcadExtendAssert.DoExtend(aryIdLong.imp, selPoint.pt1.x, selPoint.pt1.y, selPoint.pt2.x, selPoint.pt2.y) : mxcadTrimAssert.DoTrim(aryIdLong.imp, selPoint.pt1.x, selPoint.pt1.y, selPoint.pt2.x, selPoint.pt2.y);
                case 70:
                case "end":
                  return _context24.stop();
              }
            }, _loop7);
          });
        case 30:
          return _context25.delegateYield(_loop7(), "t0", 32);
        case 32:
          _ret7 = _context25.t0;
          if (!(_ret7 === 0)) {
            _context25.next = 35;
            break;
          }
          return _context25.abrupt("break", 41);
        case 35:
          if (!(_ret7 === 1)) {
            _context25.next = 37;
            break;
          }
          return _context25.abrupt("continue", 30);
        case 37:
          if (!_ret7) {
            _context25.next = 39;
            break;
          }
          return _context25.abrupt("return", _ret7.v);
        case 39:
          _context25.next = 30;
          break;
        case 41:
          window.removeEventListener("keydown", onKeydown2);
          window.removeEventListener("keyup", onkeyup);
          mxcadTrimAssert.UnInit();
          mxcadExtendAssert.UnInit();
        case 45:
        case "end":
          return _context25.stop();
      }
    }, _callee18);
  }));
  return _Mx_Trim.apply(this, arguments);
}
function Mx_Extend() {
  return _Mx_Extend.apply(this, arguments);
}
function _Mx_Extend() {
  _Mx_Extend = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee19() {
    var filter, isByWindow, getPoint, ss, isExtend, aryId, aryIdLong, mxcadExtendAssert, mxcadTrimAssert, cachings, isShiftKey2, onKeydown2, onkeyup, _loop8, _ret8;
    return regenerator.wrap(function _callee19$(_context27) {
      while (1) switch (_context27.prev = _context27.next) {
        case 0:
          filter = new MxCADResbuf();
          isByWindow = false;
          isExtend = false;
          filter.AddMcDbEntityTypes("LINE,LWPOLYLINE,ARC");
          aryId = MxCADUtility.getCurrentSelect(filter);
          if (!(aryId.length === 0)) {
            _context27.next = 15;
            break;
          }
          _context27.next = 9;
          return MxCADUtility.userSelect("\\u9009\\u62E9\\u5BF9\\u8C61\\u6216<\\u5168\\u90E8\\u9009\\u62E9>", filter, function (_ss, _getPoint) {
            getPoint = _getPoint;
            ss = _ss;
          });
        case 9:
          aryId = _context27.sent;
          if (!(getPoint.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
            _context27.next = 12;
            break;
          }
          return _context27.abrupt("return");
        case 12:
          if (getPoint.getStatus() === MrxDbgUiPrBaseReturn.kNone) {
            if (aryId.length === 0) {
              ss.allSelect(filter);
              ss.forEach(function (val) {
                aryId.push(val);
              });
            }
          }
          if (!(aryId.length === 0)) {
            _context27.next = 15;
            break;
          }
          return _context27.abrupt("return");
        case 15:
          aryIdLong = new McGeLongArray();
          aryIdLong.copyFormAryId(aryId);
          mxcadExtendAssert = new MxCpp.mxcadassemblyimp.MxDrawExtendAssist();
          if (mxcadExtendAssert.Init(aryIdLong.imp)) {
            _context27.next = 20;
            break;
          }
          return _context27.abrupt("return");
        case 20:
          mxcadTrimAssert = new MxCpp.mxcadassemblyimp.MxDrawTrimAssist();
          if (mxcadTrimAssert.Init(aryIdLong.imp)) {
            _context27.next = 23;
            break;
          }
          return _context27.abrupt("return");
        case 23:
          cachings = [];
          isShiftKey2 = false;
          onKeydown2 = function onKeydown2(e) {
            isShiftKey2 = e.key === "Shift";
          };
          window.addEventListener("keydown", onKeydown2);
          onkeyup = function onkeyup() {
            return isShiftKey2 = false;
          };
          window.addEventListener("keyup", onkeyup);
          _loop8 = /*#__PURE__*/regenerator.mark(function _loop8() {
            var ss2, getPoint2, points, pl, getKey, key, _ref15, _ref16, ids2, ents, mxcad, ids, selPoint, _pt3, pt2, _pl2;
            return regenerator.wrap(function _loop8$(_context26) {
              while (1) switch (_context26.prev = _context26.next) {
                case 0:
                  ss2 = new MxCADSelectionSet();
                  ss2.isWhileSelect = false;
                  ss2.isSelectHighlight = false;
                  _context26.next = 5;
                  return ss2.userSelect("\\u9009\\u62E9\\u8981\\u5EF6\\u4F38\\u7684\\u5BF9\\u8C61\\u6216\\u6309\\u4F4F Shift \\u952E\\u9009\\u62E9\\u8981\\u4FEE\\u526A\\u7684\\u5BF9\\u8C61", filter, function (_getPoint) {
                    getPoint2 = _getPoint;
                    getPoint2.setKeyWords("[\\u680F\\u9009(F)/\\u7A97\\u4EA4(C)/\\u8FB9(E)".concat(cachings.length > 0 ? "/\\u653E\\u5F03(U)" : "", "]"));
                  });
                case 5:
                  if (_context26.sent) {
                    _context26.next = 7;
                    break;
                  }
                  return _context26.abrupt("return", 0);
                case 7:
                  if (!getPoint2.isKeyWordPicked("F")) {
                    _context26.next = 18;
                    break;
                  }
                  _context26.next = 10;
                  return getHurdleSelectionPoints();
                case 10:
                  points = _context26.sent;
                  if (points) {
                    _context26.next = 13;
                    break;
                  }
                  return _context26.abrupt("return", 0);
                case 13:
                  pl = new McDbPolyline();
                  points.forEach(function (point) {
                    pl.addVertexAt(point);
                  });
                  cachings.push([aryId, aryId.map(function (id) {
                    return id.clone();
                  })]);
                  aryId.forEach(function (objId) {
                    var ent = objId.getMcDbEntity();
                    if (!(ent instanceof McDbCurve)) return;
                    var intersectPoints = ent.IntersectWith(pl, McDb.Intersect.kOnBothOperands);
                    if (intersectPoints.isEmpty()) return;
                    intersectPoints.forEach(function (point) {
                      aryIdLong.copyFormAryId([objId]);
                      isShiftKey2 ? mxcadTrimAssert.DoTrim(aryIdLong.imp, point.x, point.y, point.x, point.y) : mxcadExtendAssert.DoExtend(aryIdLong.imp, point.x, point.y, point.x, point.y);
                    });
                  });
                  return _context26.abrupt("return", 1);
                case 18:
                  if (!getPoint2.isKeyWordPicked("C")) {
                    _context26.next = 21;
                    break;
                  }
                  isByWindow = true;
                  return _context26.abrupt("return", 1);
                case 21:
                  if (!getPoint2.isKeyWordPicked("E")) {
                    _context26.next = 39;
                    break;
                  }
                  getKey = new MxCADUiPrKeyWord();
                  getKey.setMessage("\\u6307\\u5B9A\\u9690\\u542B\\u8FB9\\u5EF6\\u4F38\\u6A21\\u5F0F<".concat(isExtend ? "\\u5EF6\\u4F38" : "\\u4E0D\\u5EF6\\u4F38", ">"));
                  getKey.setKeyWords("[\\u5EF6\\u4F38(E)/\\u4E0D\\u5EF6\\u4F38(N)]");
                  _context26.next = 27;
                  return getKey.go();
                case 27:
                  key = getKey.keyWordPicked();
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kCancel)) {
                    _context26.next = 30;
                    break;
                  }
                  return _context26.abrupt("return", {
                    v: void 0
                  });
                case 30:
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kNone)) {
                    _context26.next = 32;
                    break;
                  }
                  return _context26.abrupt("return", 1);
                case 32:
                  if (!(getKey.getStatus() === MrxDbgUiPrBaseReturn.kKeyWord)) {
                    _context26.next = 39;
                    break;
                  }
                  if (!(key === "E")) {
                    _context26.next = 36;
                    break;
                  }
                  isExtend = true;
                  return _context26.abrupt("return", 1);
                case 36:
                  if (!(key === "N")) {
                    _context26.next = 39;
                    break;
                  }
                  isExtend = false;
                  return _context26.abrupt("return", 1);
                case 39:
                  if (!getPoint2.isKeyWordPicked("U")) {
                    _context26.next = 46;
                    break;
                  }
                  _ref15 = cachings.pop() || [], _ref16 = _slicedToArray$1(_ref15, 2), ids2 = _ref16[0], ents = _ref16[1];
                  console.log(ids2);
                  ids2 === null || ids2 === void 0 ? void 0 : ids2.forEach(function (id) {
                    id.erase();
                  });
                  mxcad = MxCpp.getCurrentMxCAD();
                  ents === null || ents === void 0 ? void 0 : ents.forEach(function (ent) {
                    if (ent instanceof McDbEntity) mxcad.drawEntity(ent);
                  });
                  return _context26.abrupt("return", 1);
                case 46:
                  ids = ss2.getIds();
                  if (!(ids.length == 0)) {
                    _context26.next = 49;
                    break;
                  }
                  return _context26.abrupt("return", 1);
                case 49:
                  selPoint = ss2.getSelectPoint();
                  if (!isByWindow) {
                    _context26.next = 61;
                    break;
                  }
                  _pt3 = selPoint.pt1, pt2 = selPoint.pt2;
                  _pl2 = new McDbPolyline();
                  _pl2.addVertexAt(_pt3);
                  _pl2.addVertexAt(new McGePoint3d(_pt3.x, pt2.y));
                  _pl2.addVertexAt(pt2);
                  _pl2.addVertexAt(new McGePoint3d(pt2.x, _pt3.y));
                  _pl2.isClosed = true;
                  cachings.push([aryId, aryId.map(function (id) {
                    return id.clone();
                  })]);
                  aryId.forEach(function (objId) {
                    var ent = objId.getMcDbEntity();
                    if (!(ent instanceof McDbCurve)) return;
                    var intersectPoints = ent.IntersectWith(_pl2, McDb.Intersect.kOnBothOperands);
                    if (intersectPoints.isEmpty()) return;
                    intersectPoints.forEach(function (point) {
                      aryIdLong.copyFormAryId([objId]);
                      isShiftKey2 ? mxcadTrimAssert.DoTrim(aryIdLong.imp, point.x, point.y, point.x, point.y) : mxcadExtendAssert.DoExtend(aryIdLong.imp, point.x, point.y, point.x, point.y);
                    });
                  });
                  return _context26.abrupt("return", 1);
                case 61:
                  cachings.push([ids, aryId.map(function (id) {
                    return id.clone();
                  })]);
                  aryIdLong.copyFormAryId(ids);
                  isShiftKey2 ? mxcadTrimAssert.DoTrim(aryIdLong.imp, selPoint.pt1.x, selPoint.pt1.y, selPoint.pt2.x, selPoint.pt2.y) : mxcadExtendAssert.DoExtend(aryIdLong.imp, selPoint.pt1.x, selPoint.pt1.y, selPoint.pt2.x, selPoint.pt2.y);
                case 64:
                case "end":
                  return _context26.stop();
              }
            }, _loop8);
          });
        case 30:
          return _context27.delegateYield(_loop8(), "t0", 32);
        case 32:
          _ret8 = _context27.t0;
          if (!(_ret8 === 0)) {
            _context27.next = 35;
            break;
          }
          return _context27.abrupt("break", 41);
        case 35:
          if (!(_ret8 === 1)) {
            _context27.next = 37;
            break;
          }
          return _context27.abrupt("continue", 30);
        case 37:
          if (!_ret8) {
            _context27.next = 39;
            break;
          }
          return _context27.abrupt("return", _ret8.v);
        case 39:
          _context27.next = 30;
          break;
        case 41:
          window.removeEventListener("keydown", onKeydown2);
          window.removeEventListener("keyup", onkeyup);
          mxcadTrimAssert.UnInit();
          mxcadExtendAssert.UnInit();
        case 45:
        case "end":
          return _context27.stop();
      }
    }, _callee19);
  }));
  return _Mx_Extend.apply(this, arguments);
}
function Mx_Explode() {
  return _Mx_Explode.apply(this, arguments);
}
function _Mx_Explode() {
  _Mx_Explode = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee20() {
    var filter, aryId, aryIdLong;
    return regenerator.wrap(function _callee20$(_context28) {
      while (1) switch (_context28.prev = _context28.next) {
        case 0:
          filter = new MxCADResbuf();
          filter.AddMcDbEntityTypes("INSERT,MTEXT,ROTATEDDIMENSION,ALIGNEDDIMENSION,DIMENSION,LWPOLYLINE,CUSTOMENTITY");
          _context28.next = 4;
          return MxCADUtility.userSelect("\\u9009\\u62E9\\u5206\\u89E3\\u5BF9\\u8C61", filter);
        case 4:
          aryId = _context28.sent;
          if (!(aryId.length == 0)) {
            _context28.next = 7;
            break;
          }
          return _context28.abrupt("return");
        case 7:
          aryIdLong = new McGeLongArray();
          aryIdLong.copyFormAryId(aryId);
          MxCpp.App.MxCADAssist.MxExplode(aryIdLong.imp);
        case 10:
        case "end":
          return _context28.stop();
      }
    }, _callee20);
  }));
  return _Mx_Explode.apply(this, arguments);
}
function Mx_Join() {
  return _Mx_Join.apply(this, arguments);
}
function _Mx_Join() {
  _Mx_Join = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee21() {
    var filter, aryId, aryIdLong;
    return regenerator.wrap(function _callee21$(_context29) {
      while (1) switch (_context29.prev = _context29.next) {
        case 0:
          filter = new MxCADResbuf();
          filter.AddMcDbEntityTypes("LWPOLYLINE,ARC,LINE");
          _context29.next = 4;
          return MxCADUtility.userSelect("\\u9009\\u62E9\\u8981\\u5408\\u5E76\\u7684\\u5BF9\\u8C61", filter);
        case 4:
          aryId = _context29.sent;
          if (!(aryId.length == 0)) {
            _context29.next = 7;
            break;
          }
          return _context29.abrupt("return");
        case 7:
          aryIdLong = new McGeLongArray();
          aryIdLong.copyFormAryId(aryId);
          MxCpp.App.MxCADAssist.MxJoin(aryIdLong.imp);
        case 10:
        case "end":
          return _context29.stop();
      }
    }, _callee21);
  }));
  return _Mx_Join.apply(this, arguments);
}
function Mx_Break() {
  return _Mx_Break.apply(this, arguments);
}
function _Mx_Break() {
  _Mx_Break = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee22() {
    var filter, selEntity, id, curve, startPoint, _loop9, _ret9;
    return regenerator.wrap(function _callee22$(_context31) {
      while (1) switch (_context31.prev = _context31.next) {
        case 0:
          filter = new MxCADResbuf();
          filter.AddMcDbEntityTypes("LWPOLYLINE,ARC,LINE,CIRCLE");
          selEntity = new MxCADUiPrEntity();
          selEntity.setFilter(filter);
          selEntity.setMessage("\\u9009\\u62E9\\u8981\\u6253\\u65AD\\u7684\\u5BF9\\u8C61");
          _context31.next = 7;
          return selEntity.go();
        case 7:
          id = _context31.sent;
          if (id.isValid()) {
            _context31.next = 10;
            break;
          }
          return _context31.abrupt("return");
        case 10:
          curve = id.getMcDbCurve();
          if (curve) {
            _context31.next = 13;
            break;
          }
          return _context31.abrupt("return");
        case 13:
          startPoint = selEntity.pickPoint();
          curve.highlight(true);
          _loop9 = /*#__PURE__*/regenerator.mark(function _loop9() {
            var getPoint, ptBreak, pt, isNoShear, getDist, length, _curve$getPointAtDist, val, ret, _curve$getPointAtDist2, _val2, _ret10, ids, _curve, breakPoint2, breakcurve2, breakPoint, breakcurve;
            return regenerator.wrap(function _loop9$(_context30) {
              while (1) switch (_context30.prev = _context30.next) {
                case 0:
                  getPoint = new MxCADUiPrPoint();
                  getPoint.setMessage("\\n\\u6307\\u5B9A\\u7B2C\\u4E8C\\u4E2A\\u6253\\u65AD\\u70B9");
                  getPoint.setKeyWords("[\\u7B2C\\u4E00\\u70B9(F)/\\u6253\\u65AD\\u957F\\u5EA6(D)/\\u4E2D\\u70B9\\u6253\\u65AD(M)/\\u4EA4\\u70B9\\u6253\\u65AD(I)]");
                  getPoint.setUserDraw(function (pt, pw) {
                    var _curve = curve === null || curve === void 0 ? void 0 : curve.clone();
                    if (!_curve) return;
                    if (!(_curve instanceof McDbCurve)) return;
                    var breakPoint2 = [];
                    breakPoint2.push(startPoint);
                    breakPoint2.push(pt);
                    var breakcurve2 = _curve.splitCurves(breakPoint2);
                    if (breakcurve2.empty()) {
                      return;
                    }
                    breakcurve2.forEach(function (obj, index) {
                      if (index % 2 == 0) pw.drawMcDbEntity(obj);
                    });
                  });
                  _context30.next = 6;
                  return getPoint.go();
                case 6:
                  ptBreak = _context30.sent;
                  if (!getPoint.isKeyWordPicked("F")) {
                    _context30.next = 17;
                    break;
                  }
                  getPoint.setMessage("\\u6307\\u5B9A\\u7B2C\\u4E00\\u4E2A\\u6253\\u65AD\\u70B9");
                  getPoint.setKeyWords("");
                  _context30.next = 12;
                  return getPoint.go();
                case 12:
                  pt = _context30.sent;
                  if (pt) {
                    _context30.next = 15;
                    break;
                  }
                  return _context30.abrupt("return", {
                    v: void 0
                  });
                case 15:
                  startPoint = pt;
                  return _context30.abrupt("return", 0);
                case 17:
                  isNoShear = false;
                  if (!getPoint.isKeyWordPicked("D")) {
                    _context30.next = 33;
                    break;
                  }
                  getDist = new MxCADUiPrDist();
                  getDist.setMessage("\\u8F93\\u5165\\u6253\\u65AD\\u957F\\u5EA6");
                  getDist.setKeyWords("");
                  _context30.next = 24;
                  return getDist.go();
                case 24:
                  length = _context30.sent;
                  if (!(typeof length !== "number")) {
                    _context30.next = 27;
                    break;
                  }
                  return _context30.abrupt("return", {
                    v: void 0
                  });
                case 27:
                  startPoint = curve.getStartPoint().val;
                  _curve$getPointAtDist = curve.getPointAtDist(length), val = _curve$getPointAtDist.val, ret = _curve$getPointAtDist.ret;
                  if (ret) {
                    _context30.next = 31;
                    break;
                  }
                  return _context30.abrupt("return", {
                    v: MxFun.acutPrintf("\\n\\u6253\\u65AD\\u957F\\u5EA6\\u4E0D\\u6B63\\u786E")
                  });
                case 31:
                  ptBreak = val;
                  isNoShear = true;
                case 33:
                  if (!getPoint.isKeyWordPicked("M")) {
                    _context30.next = 40;
                    break;
                  }
                  startPoint = curve.getStartPoint().val;
                  _curve$getPointAtDist2 = curve.getPointAtDist(curve.getLength().val / 2), _val2 = _curve$getPointAtDist2.val, _ret10 = _curve$getPointAtDist2.ret;
                  if (_ret10) {
                    _context30.next = 38;
                    break;
                  }
                  return _context30.abrupt("return", {
                    v: void 0
                  });
                case 38:
                  ptBreak = _val2;
                  isNoShear = true;
                case 40:
                  if (!getPoint.isKeyWordPicked("I")) {
                    _context30.next = 56;
                    break;
                  }
                  _context30.next = 43;
                  return MxCADUtility.userSelect("\\u9009\\u62E9\\u76F8\\u4EA4\\u66F2\\u7EBF");
                case 43:
                  ids = _context30.sent;
                  _curve = curve.clone();
                  breakPoint2 = [];
                  ids.forEach(function (objId) {
                    if (!(_curve instanceof McDbCurve)) return;
                    var _ent = objId.clone();
                    if (!(_ent instanceof McDbCurve)) return;
                    var points = _curve.IntersectWith(_ent, McDb.Intersect.kOnBothOperands);
                    if (points.isEmpty()) {
                      return;
                    }
                    points.forEach(function (pt) {
                      return breakPoint2.push(pt);
                    });
                  });
                  if (!(breakPoint2.length === 0)) {
                    _context30.next = 49;
                    break;
                  }
                  return _context30.abrupt("return", {
                    v: MxFun.acutPrintf("\\n\\u4EA4\\u70B9\\u4E3A\\u7A7A")
                  });
                case 49:
                  breakcurve2 = curve.splitCurves(breakPoint2);
                  if (!breakcurve2.empty()) {
                    _context30.next = 53;
                    break;
                  }
                  curve.highlight(false);
                  return _context30.abrupt("return", {
                    v: void 0
                  });
                case 53:
                  breakcurve2.forEach(function (obj) {
                    if (obj instanceof McDbEntity) {
                      curve && copyAttribute(obj, curve);
                      MxCpp.getCurrentMxCAD().drawEntity(obj);
                    }
                  });
                  curve.erase();
                  return _context30.abrupt("return", 1);
                case 56:
                  if (ptBreak) {
                    _context30.next = 59;
                    break;
                  }
                  curve.highlight(false);
                  return _context30.abrupt("return", {
                    v: void 0
                  });
                case 59:
                  breakPoint = [];
                  breakPoint.push(startPoint);
                  breakPoint.push(ptBreak);
                  breakcurve = curve.splitCurves(breakPoint);
                  if (!breakcurve.empty()) {
                    _context30.next = 66;
                    break;
                  }
                  curve.highlight(false);
                  return _context30.abrupt("return", {
                    v: void 0
                  });
                case 66:
                  breakcurve.forEach(function (obj, index) {
                    if (obj instanceof McDbEntity) {
                      curve && copyAttribute(obj, curve);
                      if (index % 2 == 0 || isNoShear) MxCpp.getCurrentMxCAD().drawEntity(obj);
                    }
                  });
                  curve.erase();
                  return _context30.abrupt("return", 1);
                case 69:
                case "end":
                  return _context30.stop();
              }
            }, _loop9);
          });
        case 16:
          return _context31.delegateYield(_loop9(), "t0", 18);
        case 18:
          _ret9 = _context31.t0;
          if (!(_ret9 === 0)) {
            _context31.next = 21;
            break;
          }
          return _context31.abrupt("continue", 16);
        case 21:
          if (!(_ret9 === 1)) {
            _context31.next = 23;
            break;
          }
          return _context31.abrupt("break", 27);
        case 23:
          if (!_ret9) {
            _context31.next = 25;
            break;
          }
          return _context31.abrupt("return", _ret9.v);
        case 25:
          _context31.next = 16;
          break;
        case 27:
        case "end":
          return _context31.stop();
      }
    }, _callee22);
  }));
  return _Mx_Break.apply(this, arguments);
}
function Mx_DrawOrderTopmost() {
  return _Mx_DrawOrderTopmost.apply(this, arguments);
}
function _Mx_DrawOrderTopmost() {
  _Mx_DrawOrderTopmost = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee23() {
    var ss, minmaxOrder, lOrder;
    return regenerator.wrap(function _callee23$(_context32) {
      while (1) switch (_context32.prev = _context32.next) {
        case 0:
          ss = new MxCADSelectionSet();
          _context32.next = 3;
          return ss.userSelect("\\n\\u9009\\u62E9\\u5BF9\\u8C61");
        case 3:
          if (_context32.sent) {
            _context32.next = 5;
            break;
          }
          return _context32.abrupt("return");
        case 5:
          minmaxOrder = MxCpp.getCurrentDatabase().currentSpace.getMinMaxDrawOrder();
          lOrder = minmaxOrder.maxDrawOrder + 1;
          ss.forEach(function (id) {
            var ent = id.getMcDbEntity();
            if (ent) {
              ent.drawOrder = lOrder;
            }
          });
        case 8:
        case "end":
          return _context32.stop();
      }
    }, _callee23);
  }));
  return _Mx_DrawOrderTopmost.apply(this, arguments);
}
function Mx_DrawOrderButtomost() {
  return _Mx_DrawOrderButtomost.apply(this, arguments);
}
function _Mx_DrawOrderButtomost() {
  _Mx_DrawOrderButtomost = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee24() {
    var ss, minmaxOrder, lOrder;
    return regenerator.wrap(function _callee24$(_context33) {
      while (1) switch (_context33.prev = _context33.next) {
        case 0:
          ss = new MxCADSelectionSet();
          _context33.next = 3;
          return ss.userSelect("\\n\\u9009\\u62E9\\u5BF9\\u8C61");
        case 3:
          if (_context33.sent) {
            _context33.next = 5;
            break;
          }
          return _context33.abrupt("return");
        case 5:
          minmaxOrder = MxCpp.getCurrentDatabase().currentSpace.getMinMaxDrawOrder();
          lOrder = minmaxOrder.minDrawOrder - 1;
          ss.forEach(function (id) {
            var ent = id.getMcDbEntity();
            if (ent) {
              ent.drawOrder = lOrder;
            }
          });
        case 8:
        case "end":
          return _context33.stop();
      }
    }, _callee24);
  }));
  return _Mx_DrawOrderButtomost.apply(this, arguments);
}
function Mx_DrawOrderTop() {
  return _Mx_DrawOrderTop.apply(this, arguments);
}
function _Mx_DrawOrderTop() {
  _Mx_DrawOrderTop = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee25() {
    var ss, getEntity, id, ent, drawOrder;
    return regenerator.wrap(function _callee25$(_context34) {
      while (1) switch (_context34.prev = _context34.next) {
        case 0:
          ss = new MxCADSelectionSet();
          _context34.next = 3;
          return ss.userSelect("\\n\\u9009\\u62E9\\u5BF9\\u8C61");
        case 3:
          if (_context34.sent) {
            _context34.next = 5;
            break;
          }
          return _context34.abrupt("return");
        case 5:
          if (!ss.isNull()) {
            _context34.next = 7;
            break;
          }
          return _context34.abrupt("return");
        case 7:
          getEntity = new MxCADUiPrEntity();
          getEntity.setMessage("\\u9009\\u62E9\\u53C2\\u7167\\u5BF9\\u8C61");
          _context34.next = 11;
          return getEntity.go();
        case 11:
          id = _context34.sent;
          if (!id.isNull()) {
            _context34.next = 14;
            break;
          }
          return _context34.abrupt("return");
        case 14:
          ent = id.getMcDbEntity();
          if (ent) {
            _context34.next = 17;
            break;
          }
          return _context34.abrupt("return");
        case 17:
          drawOrder = ent.drawOrder + 1;
          ss.forEach(function (id2) {
            var ent2 = id2.getMcDbEntity();
            if (ent2) {
              ent2.drawOrder = drawOrder;
            }
          });
        case 19:
        case "end":
          return _context34.stop();
      }
    }, _callee25);
  }));
  return _Mx_DrawOrderTop.apply(this, arguments);
}
function Mx_DrawOrderButtom() {
  return _Mx_DrawOrderButtom.apply(this, arguments);
}
function _Mx_DrawOrderButtom() {
  _Mx_DrawOrderButtom = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee26() {
    var ss, getEntity, id, ent, drawOrder;
    return regenerator.wrap(function _callee26$(_context35) {
      while (1) switch (_context35.prev = _context35.next) {
        case 0:
          ss = new MxCADSelectionSet();
          _context35.next = 3;
          return ss.userSelect("\\n\\u9009\\u62E9\\u5BF9\\u8C61");
        case 3:
          if (_context35.sent) {
            _context35.next = 5;
            break;
          }
          return _context35.abrupt("return");
        case 5:
          if (!ss.isNull()) {
            _context35.next = 7;
            break;
          }
          return _context35.abrupt("return");
        case 7:
          getEntity = new MxCADUiPrEntity();
          getEntity.setMessage("\\u9009\\u62E9\\u53C2\\u7167\\u5BF9\\u8C61");
          _context35.next = 11;
          return getEntity.go();
        case 11:
          id = _context35.sent;
          if (!id.isNull()) {
            _context35.next = 14;
            break;
          }
          return _context35.abrupt("return");
        case 14:
          ent = id.getMcDbEntity();
          if (ent) {
            _context35.next = 17;
            break;
          }
          return _context35.abrupt("return");
        case 17:
          drawOrder = ent.drawOrder - 1;
          ss.forEach(function (id2) {
            var ent2 = id2.getMcDbEntity();
            if (ent2) {
              ent2.drawOrder = drawOrder;
            }
          });
        case 19:
        case "end":
          return _context35.stop();
      }
    }, _callee26);
  }));
  return _Mx_DrawOrderButtom.apply(this, arguments);
}
var storeName = "mx_clip_file_data";
var mx_clipboard_version = 1;
function openClipboardDatabase() {
  var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : mx_clipboard_version;
  return new Promise(function (resolve, reject) {
    var request = indexedDB.open("mx_clipboard", version);
    request.onerror = function (event) {
      reject(new Error("Error opening database: " + event));
    };
    request.onupgradeneeded = function (event) {
      var db = event.target.result;
      if (!db.objectStoreNames.contains(storeName)) {
        db.createObjectStore(storeName);
        console.log("Object store mx_clip_file_data created.");
      } else {
        console.log("Object store mx_clip_file_data already exists.");
      }
    };
    request.onsuccess = function (event) {
      var db = event.target.result;
      console.log("Database opened successfully.");
      resolve(db);
    };
  });
}
var sClipboardDatabaseFile = "_mxcad_clipboard_file.mxweb";
function Mx_CopyClipboardImp(_x) {
  return _Mx_CopyClipboardImp.apply(this, arguments);
}
function _Mx_CopyClipboardImp() {
  _Mx_CopyClipboardImp = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee27(earseEntity) {
    var aryId, database, writeDatabase, FS, data, db, transaction, store, addRequest;
    return regenerator.wrap(function _callee27$(_context36) {
      while (1) switch (_context36.prev = _context36.next) {
        case 0:
          aryId = MxCADUtility.getCurrentSelect(null, true, false);
          if (!(aryId.length == 0)) {
            _context36.next = 4;
            break;
          }
          MxFun.acutPrintf("\\n \\u6CA1\\u6709\\u590D\\u5236\\u7684\\u5BF9\\u8C61");
          return _context36.abrupt("return");
        case 4:
          database = MxCpp.getCurrentDatabase();
          writeDatabase = new McDbDatabase();
          if (database.wblock(writeDatabase, aryId)) {
            _context36.next = 9;
            break;
          }
          MxFun.acutPrintf("\\n \\u590D\\u5236\\u5931\\u8D25");
          return _context36.abrupt("return");
        case 9:
          if (writeDatabase.saveAs(sClipboardDatabaseFile)) {
            _context36.next = 12;
            break;
          }
          MxFun.acutPrintf("\\n \\u4FDD\\u5B58\\u590D\\u5236\\u6570\\u636E\\u5931\\u8D25");
          return _context36.abrupt("return");
        case 12:
          if (earseEntity) {
            aryId.forEach(function (id) {
              id.erase();
            });
          }
          FS = window.MX_WASM_FS;
          data = FS.readFile(sClipboardDatabaseFile);
          FS.unlink(sClipboardDatabaseFile);
          _context36.next = 18;
          return openClipboardDatabase();
        case 18:
          db = _context36.sent;
          transaction = db.transaction(storeName, "readwrite");
          store = transaction.objectStore(storeName);
          addRequest = store.put(data, "data");
          addRequest.onsuccess = function (e) {
            console.log("Data saved to IndexedDB");
            console.log(e);
          };
          addRequest.onerror = function (e) {
            console.error("Error saving data:", e.target.errorCode);
            console.log(e);
          };
        case 24:
        case "end":
          return _context36.stop();
      }
    }, _callee27);
  }));
  return _Mx_CopyClipboardImp.apply(this, arguments);
}
function Mx_CopyClipboard() {
  Mx_CopyClipboardImp(false);
}
function Mx_CutClipboard() {
  Mx_CopyClipboardImp(true);
}
function Mx_PasteClipboard() {
  return _Mx_PasteClipboard.apply(this, arguments);
}
function _Mx_PasteClipboard() {
  _Mx_PasteClipboard = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee29() {
    var mxcad, getClipboardDataToFile, readDatabase, FS, database, blkrecId, blkRec, bound, blkRef, getPoint, pt, newBlkRefId;
    return regenerator.wrap(function _callee29$(_context38) {
      while (1) switch (_context38.prev = _context38.next) {
        case 0:
          getClipboardDataToFile = function _getClipboardDataToFi(storeName2, sWriteFile) {
            return new Promise( /*#__PURE__*/function () {
              var _ref17 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee28(res) {
                var db, transaction, objectStore, request;
                return regenerator.wrap(function _callee28$(_context37) {
                  while (1) switch (_context37.prev = _context37.next) {
                    case 0:
                      _context37.next = 2;
                      return openClipboardDatabase();
                    case 2:
                      db = _context37.sent;
                      transaction = db.transaction(storeName2, "readonly");
                      objectStore = transaction.objectStore(storeName2);
                      request = objectStore.get("data");
                      request.onerror = function () {
                        res(void 0);
                      };
                      request.onsuccess = function () {
                        var data = request.result;
                        var FS2 = window.MX_WASM_FS;
                        FS2.writeFile(sWriteFile, data);
                        res(true);
                      };
                    case 8:
                    case "end":
                      return _context37.stop();
                  }
                }, _callee28);
              }));
              return function (_x2) {
                return _ref17.apply(this, arguments);
              };
            }());
          };
          mxcad = MxCpp.getCurrentMxCAD();
          _context38.next = 4;
          return getClipboardDataToFile(storeName, sClipboardDatabaseFile);
        case 4:
          if (_context38.sent) {
            _context38.next = 7;
            break;
          }
          MxFun.acutPrintf("\\n \\u5F97\\u5230\\u590D\\u5236\\u6570\\u636E\\u5931\\u8D25");
          return _context38.abrupt("return");
        case 7:
          readDatabase = new McDbDatabase();
          if (readDatabase.readFile(sClipboardDatabaseFile)) {
            _context38.next = 11;
            break;
          }
          MxFun.acutPrintf("\\n \\u8BFB\\u53D6\\u590D\\u5236\\u6570\\u636E\\u5931\\u8D25");
          return _context38.abrupt("return");
        case 11:
          FS = window.MX_WASM_FS;
          FS.unlink(sClipboardDatabaseFile);
          database = MxCpp.getCurrentDatabase();
          blkrecId = database.insert(readDatabase, "");
          if (!blkrecId.isNull()) {
            _context38.next = 17;
            break;
          }
          return _context38.abrupt("return");
        case 17:
          blkRec = blkrecId.getMcDbBlockTableRecord();
          if (blkRec) {
            bound = blkRec.getBoundingBox();
            if (bound.ret) {
              blkRec.origin = bound.minPt.addvec(bound.maxPt.sub(bound.minPt).mult(0.5));
            }
          }
          blkRef = new McDbBlockReference();
          blkRef.blockTableRecordId = blkrecId;
          getPoint = new MxCADUiPrPoint();
          getPoint.setMessage("\\u6307\\u5B9A\\u63D2\\u5165\\u57FA\\u70B9");
          getPoint.setUserDraw(function (v, worldDraw) {
            blkRef.position = v;
            worldDraw.drawMcDbEntity(blkRef);
          });
          _context38.next = 26;
          return getPoint.go();
        case 26:
          pt = _context38.sent;
          if (pt) {
            _context38.next = 29;
            break;
          }
          return _context38.abrupt("return");
        case 29:
          blkRef.position = pt;
          newBlkRefId = mxcad.drawEntity(blkRef);
          if (newBlkRefId.isValid) {
            _context38.next = 34;
            break;
          }
          console.log("insert error");
          return _context38.abrupt("return");
        case 34:
        case "end":
          return _context38.stop();
      }
    }, _callee29);
  }));
  return _Mx_PasteClipboard.apply(this, arguments);
}
MxFun.on("init", function () {
  MxFun.addCommand("Mx_Erase", Mx_Erase);
  MxFun.addCommand("Mx_Copy", Mx_Copy);
  MxFun.addCommand("Mx_Move", Mx_Move);
  MxFun.addCommand("Mx_Rotate", Mx_Rotate);
  MxFun.addCommand("Mx_Scale", Mx_Scale);
  MxFun.addCommand("Mx_WindowZoom", Mx_WindowZoom);
  MxFun.addCommand("Mx_ZoomE", Mx_ZoomE);
  MxFun.addCommand("Mx_Plan90CW", Mx_Plan90CW);
  MxFun.addCommand("Mx_Offset", Mx_Offset);
  MxFun.addCommand("Mx_Regen", Mx_Regen);
  MxFun.addCommand("Mx_Mirror", Mx_Mirror);
  MxFun.addCommand("Mx_Chamfer", Mx_Chamfer);
  MxFun.addCommand("Mx_Fillet", Mx_Fillet);
  MxFun.addCommand("Mx_Trim", Mx_Trim);
  MxFun.addCommand("Mx_Extend", Mx_Extend);
  MxFun.addCommand("Mx_Explode", Mx_Explode);
  MxFun.addCommand("Mx_Join", Mx_Join);
  MxFun.addCommand("Mx_Break", Mx_Break);
  MxFun.addCommand("Mx_DrawOrderTopmost", Mx_DrawOrderTopmost);
  MxFun.addCommand("Mx_DrawOrderButtomost", Mx_DrawOrderButtomost);
  MxFun.addCommand("Mx_DrawOrderTop", Mx_DrawOrderTop);
  MxFun.addCommand("Mx_DrawOrderButtom", Mx_DrawOrderButtom);
  MxFun.addCommand("Mx_CopyClipboard", Mx_CopyClipboard);
  MxFun.addCommand("Mx_PasteClipboard", Mx_PasteClipboard);
  MxFun.addCommand("Mx_CutClipboard", Mx_CutClipboard);
});

var getQuadrant = function getQuadrant(pt1, pt3) {
  return [pt3.x >= pt1.x && pt3.y >= pt1.y, pt3.x < pt1.x && pt3.y >= pt1.y, pt3.x < pt1.x && pt3.y < pt1.y, pt3.x >= pt1.x && pt3.y < pt1.y];
};
function calculateRoundedRectangleVertices(points, chamferDistance1, chamferDistance2) {
  if (chamferDistance1 === 0 && chamferDistance2 === 0) return points;
  var _points = _slicedToArray$1(points, 4),
    pt1 = _points[0],
    pt2 = _points[1],
    pt3 = _points[2],
    pt4 = _points[3];
  var width = pt1.distanceTo(pt4);
  var height = pt1.distanceTo(pt2);
  var _getQuadrant = getQuadrant(pt1, pt3),
    _getQuadrant2 = _slicedToArray$1(_getQuadrant, 4);
    _getQuadrant2[0];
    var isPt3InQuadrant2 = _getQuadrant2[1],
    isPt3InQuadrant3 = _getQuadrant2[2],
    isPt3InQuadrant4 = _getQuadrant2[3];
  var chamferDistanceX = isPt3InQuadrant2 || isPt3InQuadrant3 ? -chamferDistance1 : chamferDistance1;
  var chamferDistanceY = isPt3InQuadrant3 || isPt3InQuadrant4 ? -chamferDistance2 : chamferDistance2;
  if (width - Math.abs(chamferDistanceX) * 2 <= 0) return points;
  if (height - Math.abs(chamferDistanceY) * 2 <= 0) return points;
  var chamferedPt1 = new McGePoint3d(pt1.x + chamferDistanceX, pt1.y, pt1.z);
  var chamferedPt2 = new McGePoint3d(pt1.x, pt1.y + chamferDistanceY, pt1.z);
  var chamferedPt3 = new McGePoint3d(pt2.x, pt2.y - chamferDistanceY, pt2.z);
  var chamferedPt4 = new McGePoint3d(pt2.x + chamferDistanceX, pt2.y, pt2.z);
  var chamferedPt5 = new McGePoint3d(pt3.x - chamferDistanceX, pt3.y, pt3.z);
  var chamferedPt6 = new McGePoint3d(pt3.x, pt2.y - chamferDistanceY, pt3.z);
  var chamferedPt7 = new McGePoint3d(pt4.x, pt4.y + chamferDistanceY, pt4.z);
  var chamferedPt8 = new McGePoint3d(pt4.x - chamferDistanceX, pt4.y, pt4.z);
  var chamferedPolygon = [chamferedPt1, chamferedPt2, chamferedPt3, chamferedPt4, chamferedPt5, chamferedPt6, chamferedPt7, chamferedPt8];
  return chamferedPolygon;
}
var rotatePoint = function rotatePoint(center, point, angle) {
  var cosAngle = Math.cos(angle);
  var sinAngle = Math.sin(angle);
  var translatedX = point.x - center.x;
  var translatedY = point.y - center.y;
  var x = translatedX * cosAngle - translatedY * sinAngle + center.x;
  var y = translatedX * sinAngle + translatedY * cosAngle + center.y;
  var z = point.z;
  return new McGePoint3d(x, y, z);
};
var getRectPoints = function getRectPoints(pt1, pt3) {
  var angle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var center = new McGePoint3d((pt1.x + pt3.x) / 2, (pt1.y + pt3.y) / 2, (pt1.z + pt3.z) / 2);
  var pt2 = new McGePoint3d(pt1.x, pt3.y, pt1.z);
  var pt4 = new McGePoint3d(pt3.x, pt1.y, pt3.z);
  var rotatedPt2 = rotatePoint(center, pt2, angle);
  var rotatedPt4 = rotatePoint(center, pt4, angle);
  return [pt1, rotatedPt2, pt3, rotatedPt4];
};
var drawRectang = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
    var getPoint, chamfer1Length, chamfer2Length, elevation, filletRadius, thickness, width, area, rectWidth, rectLength, rotationAngle, type, _loop, _ret;
    return regenerator.wrap(function _callee3$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          getPoint = new MxCADUiPrPoint();
          chamfer1Length = 0;
          chamfer2Length = 0;
          elevation = 0;
          filletRadius = 0;
          thickness = 0;
          width = 0;
          area = 200;
          rectWidth = 0;
          rectLength = 0;
          rotationAngle = 0;
          type = "default";
          _loop = /*#__PURE__*/regenerator.mark(function _loop() {
            var getLength, pt1CAD, pt2CADOld, pl, getRect, userDrawPoint1Rect, run, is;
            return regenerator.wrap(function _loop$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  getLength = /*#__PURE__*/function () {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(id, pt1Msg) {
                      var getWidth, dWVal;
                      return regenerator.wrap(function _callee$(_context) {
                        while (1) switch (_context.prev = _context.next) {
                          case 0:
                            getWidth = new MxCADUiPrDist();
                            getWidth.setMessage(_ML_String(id, pt1Msg));
                            _context.next = 4;
                            return getWidth.go();
                          case 4:
                            dWVal = _context.sent;
                            if (dWVal) {
                              _context.next = 7;
                              break;
                            }
                            throw "error getLength";
                          case 7:
                            return _context.abrupt("return", getWidth.value());
                          case 8:
                          case "end":
                            return _context.stop();
                        }
                      }, _callee);
                    }));
                    return function getLength(_x, _x2) {
                      return _ref2.apply(this, arguments);
                    };
                  }();
                  getPoint.setUserDraw(function () {});
                  getPoint.clearLastInputPoint();
                  getPoint.setMessage("\\n\\u6307\\u5B9A\\u7B2C\\u4E00\\u4E2A\\u89D2\\u70B9");
                  getPoint.setKeyWords("[\\u5012\\u89D2(C)/\\u6807\\u9AD8(E)/\\u5706\\u89D2(F)/\\u539A\\u5EA6(T)/\\u5BBD\\u5EA6(W)]");
                  _context3.next = 7;
                  return getPoint.go();
                case 7:
                  pt1CAD = _context3.sent;
                  pl = new McDbPolyline();
                  _context3.prev = 9;
                  if (!getPoint.isKeyWordPicked("C")) {
                    _context3.next = 19;
                    break;
                  }
                  _context3.next = 13;
                  return getLength("ID_ARX_RECTANG_CHAMFEr1LENGTH", "\\n\\u6307\\u5B9A\\u7B2C\\u4E00\\u4E2A\\u5012\\u89D2\\u8DDD\\u79BB:");
                case 13:
                  chamfer1Length = _context3.sent;
                  _context3.next = 16;
                  return getLength("ID_ARX_RECTANG_CHAMFEr2LENGTH", "\\n\\u6307\\u5B9A\\u7B2C\\u4E8C\\u4E2A\\u5012\\u89D2\\u8DDD\\u79BB");
                case 16:
                  chamfer2Length = _context3.sent;
                  type = "chamfer";
                  return _context3.abrupt("return", 0);
                case 19:
                  if (!getPoint.isKeyWordPicked("E")) {
                    _context3.next = 24;
                    break;
                  }
                  _context3.next = 22;
                  return getLength("ID_ARX_RECTANG_ELEVATION", "\\n\\u6307\\u5B9A\\u77E9\\u5F62\\u7684\\u6807\\u9AD8");
                case 22:
                  elevation = _context3.sent;
                  return _context3.abrupt("return", 0);
                case 24:
                  if (!getPoint.isKeyWordPicked("F")) {
                    _context3.next = 30;
                    break;
                  }
                  _context3.next = 27;
                  return getLength("ID_ARX_RECTANG_RADIUS", "\\n\\u6307\\u5B9A\\u77E9\\u5F62\\u7684\\u5706\\u89D2\\u534A\\u5F84");
                case 27:
                  filletRadius = _context3.sent;
                  type = "angleRounded";
                  return _context3.abrupt("return", 0);
                case 30:
                  if (!getPoint.isKeyWordPicked("T")) {
                    _context3.next = 35;
                    break;
                  }
                  _context3.next = 33;
                  return getLength("ID_ARX_RECTANG_THICKNESS", "\\n\\u6307\\u5B9A\\u77E9\\u5F62\\u7684\\u539A\\u5EA6");
                case 33:
                  thickness = _context3.sent;
                  return _context3.abrupt("return", 0);
                case 35:
                  if (!getPoint.isKeyWordPicked("W")) {
                    _context3.next = 40;
                    break;
                  }
                  _context3.next = 38;
                  return getLength("ID_ARX_RECTANG_WIDTH", "\\n\\u6307\\u5B9A\\u77E9\\u5F62\\u7684\\u7EBF\\u5BBD");
                case 38:
                  width = _context3.sent;
                  return _context3.abrupt("return", 0);
                case 40:
                  _context3.next = 45;
                  break;
                case 42:
                  _context3.prev = 42;
                  _context3.t0 = _context3["catch"](9);
                  return _context3.abrupt("return", 1);
                case 45:
                  if (pt1CAD) {
                    _context3.next = 47;
                    break;
                  }
                  return _context3.abrupt("return", {
                    v: void 0
                  });
                case 47:
                  getRect = function getRect(pt1, pt3) {
                    var rotationAngle2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                    pl = new McDbPolyline();
                    pt1.z = pt3.z = thickness;
                    var rectPoint = getRectPoints(pt1, pt3, rotationAngle2);
                    var center = new McGePoint3d((pt1.x + pt3.x) / 2, (pt1.y + pt3.y) / 2, (pt1.z + pt3.z) / 2);
                    var points = rectPoint;
                    if (type === "chamfer") {
                      points = calculateRoundedRectangleVertices(getRectPoints(pt1, pt3), chamfer1Length, chamfer2Length);
                    }
                    if (type === "angleRounded" && filletRadius !== 0) {
                      points = calculateRoundedRectangleVertices(getRectPoints(pt1, pt3), filletRadius, filletRadius);
                      var _getQuadrant3 = getQuadrant(pt1, pt3),
                        _getQuadrant4 = _slicedToArray$1(_getQuadrant3, 4);
                        _getQuadrant4[0];
                        var isPt3InQuadrant2 = _getQuadrant4[1],
                        isPt3InQuadrant3 = _getQuadrant4[2],
                        isPt3InQuadrant4 = _getQuadrant4[3];
                      if (points.length === 8) {
                        var addArc = function addArc(startPoint, endPoint, key) {
                          var vecArcTangent = new McGeVector3d(key);
                          var bulge = CMxDrawPolylineDragArcDraw_CalcArcBulge(startPoint, endPoint, vecArcTangent);
                          pl.addVertexAt(startPoint, bulge);
                          pl.addVertexAt(endPoint, 0);
                        };
                        var vec1 = new McGeVector3d(-1, 0);
                        var vec2 = new McGeVector3d(0, 1);
                        var vec3 = new McGeVector3d(1, 0);
                        var vec4 = new McGeVector3d(0, -1);
                        if (isPt3InQuadrant4) {
                          vec2.y = -1;
                          vec3.x = 1;
                          vec4.y = 1;
                        }
                        if (isPt3InQuadrant2) {
                          vec1.x = 1;
                          vec2.y = 1;
                          vec3.x = -1;
                          vec4.y = -1;
                        }
                        if (isPt3InQuadrant3) {
                          vec1.x = 1;
                          vec2.y = -1;
                          vec3.x = -1;
                          vec4.y = 1;
                        }
                        addArc(points[0], points[1], vec1);
                        addArc(points[2], points[3], vec2);
                        addArc(points[4], points[5], vec3);
                        addArc(points[6], points[7], vec4);
                      } else {
                        points.forEach(function (pt) {
                          pl.addVertexAt(pt, 0);
                        });
                      }
                    } else {
                      points.forEach(function (pt) {
                        pl.addVertexAt(pt, 0, width, width);
                      });
                    }
                    if (type === "chamfer" || type === "angleRounded") pl.rotate(center, rotationAngle2);
                    pl.isClosed = true;
                    pl.constantWidth = width;
                    pt2CADOld = pt3;
                    return pl;
                  };
                  userDrawPoint1Rect = function userDrawPoint1Rect(currentPoint, pWorldDraw) {
                    if (!pt1CAD) return;
                    var pt1 = pt1CAD;
                    var pt3 = currentPoint;
                    pl = getRect(pt1, pt3, rotationAngle);
                    pWorldDraw.drawMcDbEntity(pl);
                  };
                  getPoint.setUserDraw(userDrawPoint1Rect);
                  run = /*#__PURE__*/function () {
                    var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
                      var pt2CAD, userDrawPoint2Rect, getInt, _area, getKey, key, is2, rotationPoint, pt1, pt2, _is;
                      return regenerator.wrap(function _callee2$(_context2) {
                        while (1) switch (_context2.prev = _context2.next) {
                          case 0:
                            getPoint.setMessage("\\n\\u6307\\u5B9A\\u53E6\\u4E00\\u4E2A\\u89D2\\u70B9");
                            getPoint.setKeyWords("[\\u9762\\u79EF(A)/\\u5C3A\\u5BF8(D)/\\u65CB\\u8F6C(R)]");
                            _context2.next = 4;
                            return getPoint.go();
                          case 4:
                            pt2CAD = _context2.sent;
                            userDrawPoint2Rect = function userDrawPoint2Rect(currentPoint, pWorldDraw) {
                              var _getQuadrant5 = getQuadrant(pt1CAD, currentPoint),
                                _getQuadrant6 = _slicedToArray$1(_getQuadrant5, 4),
                                isPt3InQuadrant1 = _getQuadrant6[0],
                                isPt3InQuadrant2 = _getQuadrant6[1],
                                isPt3InQuadrant3 = _getQuadrant6[2],
                                isPt3InQuadrant4 = _getQuadrant6[3];
                              if (isPt3InQuadrant1) {
                                pt2CAD = new McGePoint3d(pt1CAD.x + rectWidth, pt1CAD.y + rectLength, thickness);
                              }
                              if (isPt3InQuadrant2) {
                                pt2CAD = new McGePoint3d(pt1CAD.x - rectWidth, pt1CAD.y + rectLength, thickness);
                              }
                              if (isPt3InQuadrant3) {
                                pt2CAD = new McGePoint3d(pt1CAD.x - rectWidth, pt1CAD.y - rectLength, thickness);
                              }
                              if (isPt3InQuadrant4) {
                                pt2CAD = new McGePoint3d(pt1CAD.x + rectWidth, pt1CAD.y - rectLength, thickness);
                              }
                              if (!pt2CAD) return;
                              pl = getRect(pt1CAD, pt2CAD, rotationAngle);
                              pWorldDraw.drawMcDbEntity(pl);
                            };
                            if (!getPoint.isKeyWordPicked("A")) {
                              _context2.next = 40;
                              break;
                            }
                            getPoint.setUserDraw(function () {});
                            getInt = new MxCADUiPrInt();
                            getInt.setMessage("\\u8F93\\u5165\\u5F53\\u524D\\u5355\\u4F4D\\u8BA1\\u7B97\\u7684\\u77E9\\u5F62\\u9762\\u79EF<" + area + ">");
                            _context2.next = 12;
                            return getInt.go();
                          case 12:
                            _area = _context2.sent;
                            if (_area) {
                              _context2.next = 15;
                              break;
                            }
                            return _context2.abrupt("return");
                          case 15:
                            area = _area;
                            getKey = new MxCADUiPrKeyWord();
                            getKey.setMessage("\\u8BA1\\u7B97\\u77E9\\u5F62\\u6807\\u6CE8\\u65F6\\u7684\\u4F9D\\u636E");
                            getKey.setKeyWords("[\\u957F\\u5EA6(L)/\\u5BBD\\u5EA6(W)]");
                            _context2.next = 21;
                            return getKey.go();
                          case 21:
                            key = _context2.sent;
                            if (!(key === null)) {
                              _context2.next = 24;
                              break;
                            }
                            return _context2.abrupt("return");
                          case 24:
                            if (!(key === "w")) {
                              _context2.next = 31;
                              break;
                            }
                            _context2.next = 27;
                            return getLength("ID_ARX_RECTANG_AREA_WIDTH", "\\u8F93\\u5165\\u77E9\\u5F62\\u5BBD\\u5EA6");
                          case 27:
                            rectWidth = _context2.sent;
                            rectLength = area / rectWidth;
                            _context2.next = 35;
                            break;
                          case 31:
                            _context2.next = 33;
                            return getLength("ID_ARX_RECTANG_AREA_LENGTH", "\\u8F93\\u5165\\u77E9\\u5F62\\u957F\\u5EA6");
                          case 33:
                            rectLength = _context2.sent;
                            rectWidth = area / rectLength;
                          case 35:
                            pt2CAD = new McGePoint3d(pt1CAD.x + rectWidth, pt1CAD.y + rectLength, thickness);
                            pl = getRect(pt1CAD, pt2CAD, rotationAngle);
                            MxCpp.getCurrentMxCAD().drawEntity(pl, true);
                            _context2.next = 98;
                            break;
                          case 40:
                            if (!getPoint.isKeyWordPicked("D")) {
                              _context2.next = 62;
                              break;
                            }
                            _context2.prev = 41;
                            _context2.next = 44;
                            return getLength("ID_ARX_RECTANG_AREA_WIDTH", "\\u6307\\u5B9A\\u77E9\\u5F62\\u5BBD\\u5EA6");
                          case 44:
                            rectWidth = _context2.sent;
                            _context2.next = 47;
                            return getLength("ID_ARX_RECTANG_AREA_LENGTH", "\\u6307\\u5B9A\\u77E9\\u5F62\\u5BBD\\u5EA6");
                          case 47:
                            rectLength = _context2.sent;
                            _context2.next = 53;
                            break;
                          case 50:
                            _context2.prev = 50;
                            _context2.t0 = _context2["catch"](41);
                            return _context2.abrupt("return");
                          case 53:
                            getPoint.clearLastInputPoint();
                            getPoint.setUserDraw(userDrawPoint2Rect);
                            _context2.next = 57;
                            return run();
                          case 57:
                            is2 = _context2.sent;
                            if (!(typeof is2 === "undefined")) {
                              _context2.next = 60;
                              break;
                            }
                            return _context2.abrupt("return");
                          case 60:
                            _context2.next = 98;
                            break;
                          case 62:
                            if (!getPoint.isKeyWordPicked("R")) {
                              _context2.next = 97;
                              break;
                            }
                            getPoint.setMessage("\\n\\u6307\\u5B9A\\u65CB\\u8F6C\\u89D2\\u5EA6");
                            getPoint.setKeyWords("[\\u62FE\\u53D6\\u70B9(P)]");
                            getPoint.setUserDraw(function (currentPoint, pWorldDraw) {
                              rotationAngle = angleTo(currentPoint.x, currentPoint.y, pt1CAD.x, pt1CAD.y);
                              pl = getRect(pt1CAD, pt2CADOld);
                              pl.rotate(pt1CAD, rotationAngle);
                              pWorldDraw.drawMcDbEntity(pl);
                            });
                            _context2.next = 68;
                            return getPoint.go();
                          case 68:
                            rotationPoint = _context2.sent;
                            if (!getPoint.isKeyWordPicked("P")) {
                              _context2.next = 87;
                              break;
                            }
                            getPoint.clearLastInputPoint();
                            getPoint.setUserDraw(function () {});
                            getPoint.setMessage("\\n\\u6307\\u5B9A\\u7B2C\\u4E00\\u4E2A\\u70B9");
                            _context2.next = 75;
                            return getPoint.go();
                          case 75:
                            pt1 = _context2.sent;
                            if (pt1) {
                              _context2.next = 78;
                              break;
                            }
                            return _context2.abrupt("return");
                          case 78:
                            getPoint.setUserDraw(function (pt, pWorldDraw) {
                              pWorldDraw.drawLine(pt.toVector3(), pt1.toVector3());
                            });
                            _context2.next = 81;
                            return getPoint.go();
                          case 81:
                            pt2 = _context2.sent;
                            if (pt2) {
                              _context2.next = 84;
                              break;
                            }
                            return _context2.abrupt("return");
                          case 84:
                            rotationAngle = angleTo(pt1.x, pt1.y, pt2.x, pt2.y);
                            _context2.next = 89;
                            break;
                          case 87:
                            if (rotationPoint) {
                              _context2.next = 89;
                              break;
                            }
                            return _context2.abrupt("return");
                          case 89:
                            getPoint.setUserDraw(userDrawPoint1Rect);
                            _context2.next = 92;
                            return run();
                          case 92:
                            _is = _context2.sent;
                            if (!(typeof _is === "undefined")) {
                              _context2.next = 95;
                              break;
                            }
                            return _context2.abrupt("return");
                          case 95:
                            _context2.next = 98;
                            break;
                          case 97:
                            if (pt2CAD) {
                              MxCpp.getCurrentMxCAD().drawEntity(pl, true);
                            }
                          case 98:
                            pl.setxDataDouble("BG", elevation);
                          case 99:
                          case "end":
                            return _context2.stop();
                        }
                      }, _callee2, null, [[41, 50]]);
                    }));
                    return function run() {
                      return _ref3.apply(this, arguments);
                    };
                  }();
                  _context3.next = 53;
                  return run();
                case 53:
                  is = _context3.sent;
                  if (!(typeof is === "undefined")) {
                    _context3.next = 56;
                    break;
                  }
                  return _context3.abrupt("return", 1);
                case 56:
                case "end":
                  return _context3.stop();
              }
            }, _loop, null, [[9, 42]]);
          });
        case 13:
          return _context4.delegateYield(_loop(), "t0", 15);
        case 15:
          _ret = _context4.t0;
          if (!(_ret === 0)) {
            _context4.next = 18;
            break;
          }
          return _context4.abrupt("continue", 13);
        case 18:
          if (!(_ret === 1)) {
            _context4.next = 20;
            break;
          }
          return _context4.abrupt("break", 24);
        case 20:
          if (!_ret) {
            _context4.next = 22;
            break;
          }
          return _context4.abrupt("return", _ret.v);
        case 22:
          _context4.next = 13;
          break;
        case 24:
        case "end":
          return _context4.stop();
      }
    }, _callee3);
  }));
  return function drawRectang() {
    return _ref.apply(this, arguments);
  };
}();
MxFun.on("init", function () {
  MxFun.addCommand("Mx_Rectang", drawRectang);
});

var MdGe;
(function (MdGe2) {
  (function (MxShapeEnum2) {
    MxShapeEnum2[MxShapeEnum2["Enum_COMPOUND"] = 0] = "Enum_COMPOUND";
    MxShapeEnum2[MxShapeEnum2["Enum_COMPSOLID"] = 1] = "Enum_COMPSOLID";
    MxShapeEnum2[MxShapeEnum2["Enum_SOLID"] = 2] = "Enum_SOLID";
    MxShapeEnum2[MxShapeEnum2["Enum_SHELL"] = 3] = "Enum_SHELL";
    MxShapeEnum2[MxShapeEnum2["Enum_FACE"] = 4] = "Enum_FACE";
    MxShapeEnum2[MxShapeEnum2["Enum_WIRE"] = 5] = "Enum_WIRE";
    MxShapeEnum2[MxShapeEnum2["Enum_EDGE"] = 6] = "Enum_EDGE";
    MxShapeEnum2[MxShapeEnum2["Enum_VERTEX"] = 7] = "Enum_VERTEX";
    MxShapeEnum2[MxShapeEnum2["Enum_SHAPE"] = 8] = "Enum_SHAPE";
  })(MdGe2.MxShapeEnum || (MdGe2.MxShapeEnum = {}));
  (function (MxHorizontalTextAlignment2) {
    MxHorizontalTextAlignment2[MxHorizontalTextAlignment2["HTA_LEFT"] = 0] = "HTA_LEFT";
    MxHorizontalTextAlignment2[MxHorizontalTextAlignment2["HTA_CENTER"] = 1] = "HTA_CENTER";
    MxHorizontalTextAlignment2[MxHorizontalTextAlignment2["HTA_RIGHT"] = 2] = "HTA_RIGHT";
  })(MdGe2.MxHorizontalTextAlignment || (MdGe2.MxHorizontalTextAlignment = {}));
  (function (MxVerticalTextAlignment2) {
    MxVerticalTextAlignment2[MxVerticalTextAlignment2["CVTA_BOTTOM"] = 0] = "CVTA_BOTTOM";
    MxVerticalTextAlignment2[MxVerticalTextAlignment2["CVTA_CENTER"] = 1] = "CVTA_CENTER";
    MxVerticalTextAlignment2[MxVerticalTextAlignment2["CVTA_TOP"] = 2] = "CVTA_TOP";
    MxVerticalTextAlignment2[MxVerticalTextAlignment2["CVTA_TOPFIRSTLINE"] = 3] = "CVTA_TOPFIRSTLINE";
  })(MdGe2.MxVerticalTextAlignment || (MdGe2.MxVerticalTextAlignment = {}));
  (function (MxFontAspect2) {
    MxFontAspect2[MxFontAspect2["FA_UNDEFINED"] = -1] = "FA_UNDEFINED";
    MxFontAspect2[MxFontAspect2["FA_Regular"] = 0] = "FA_Regular";
    MxFontAspect2[MxFontAspect2["FA_Bold"] = 1] = "FA_Bold";
    MxFontAspect2[MxFontAspect2["FA_Italic"] = 2] = "FA_Italic";
    MxFontAspect2[MxFontAspect2["FA_BoldItalic"] = 3] = "FA_BoldItalic";
  })(MdGe2.MxFontAspect || (MdGe2.MxFontAspect = {}));
  (function (MxTypeOfDisplayText2) {
    MxTypeOfDisplayText2[MxTypeOfDisplayText2["TODT_NORMAL"] = 0] = "TODT_NORMAL";
    MxTypeOfDisplayText2[MxTypeOfDisplayText2["TODT_SUBTITLE"] = 1] = "TODT_SUBTITLE";
    MxTypeOfDisplayText2[MxTypeOfDisplayText2["TODT_DEKALE"] = 2] = "TODT_DEKALE";
    MxTypeOfDisplayText2[MxTypeOfDisplayText2["TODT_BLEND"] = 3] = "TODT_BLEND";
    MxTypeOfDisplayText2[MxTypeOfDisplayText2["TODT_DIMENSION"] = 4] = "TODT_DIMENSION";
    MxTypeOfDisplayText2[MxTypeOfDisplayText2["TODT_SHADOW"] = 5] = "TODT_SHADOW";
  })(MdGe2.MxTypeOfDisplayText || (MdGe2.MxTypeOfDisplayText = {}));
  (function (MxCF3dFilletShapeEnum2) {
    MxCF3dFilletShapeEnum2[MxCF3dFilletShapeEnum2["Enum_Rational"] = 0] = "Enum_Rational";
    MxCF3dFilletShapeEnum2[MxCF3dFilletShapeEnum2["Enum_QuasiAngular"] = 1] = "Enum_QuasiAngular";
    MxCF3dFilletShapeEnum2[MxCF3dFilletShapeEnum2["Enum_Polynomial"] = 2] = "Enum_Polynomial";
  })(MdGe2.MxCF3dFilletShapeEnum || (MdGe2.MxCF3dFilletShapeEnum = {}));
  (function (MxCFDSChamfMode2) {
    MxCFDSChamfMode2[MxCFDSChamfMode2["Enum_ClassicChamfer"] = 0] = "Enum_ClassicChamfer";
    MxCFDSChamfMode2[MxCFDSChamfMode2["Enum_ConstThroatChamfer"] = 1] = "Enum_ConstThroatChamfer";
    MxCFDSChamfMode2[MxCFDSChamfMode2["Enum_ConstThroatWithPenetrationChamfer"] = 2] = "Enum_ConstThroatWithPenetrationChamfer";
  })(MdGe2.MxCFDSChamfMode || (MdGe2.MxCFDSChamfMode = {}));
  (function (MxGFTrihedron2) {
    MxGFTrihedron2[MxGFTrihedron2["GF_IsCorrectedFrenet"] = 0] = "GF_IsCorrectedFrenet";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsFixed"] = 1] = "GF_IsFixed";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsFrenet"] = 2] = "GF_IsFrenet";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsConstantNormal"] = 3] = "GF_IsConstantNormal";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsDarboux"] = 4] = "GF_IsDarboux";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsGuideAC"] = 5] = "GF_IsGuideAC";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsGuidePlan"] = 6] = "GF_IsGuidePlan";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsGuideACWithContact"] = 7] = "GF_IsGuideACWithContact";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsGuidePlanWithContact"] = 8] = "GF_IsGuidePlanWithContact";
    MxGFTrihedron2[MxGFTrihedron2["GF_IsDiscreteTrihedron"] = 9] = "GF_IsDiscreteTrihedron";
  })(MdGe2.MxGFTrihedron || (MdGe2.MxGFTrihedron = {}));
  (function (MxGAShapeEnum2) {
    MxGAShapeEnum2[MxGAShapeEnum2["GA_C0"] = 0] = "GA_C0";
    MxGAShapeEnum2[MxGAShapeEnum2["GA_G1"] = 1] = "GA_G1";
    MxGAShapeEnum2[MxGAShapeEnum2["GA_C1"] = 2] = "GA_C1";
    MxGAShapeEnum2[MxGAShapeEnum2["GA_G2"] = 3] = "GA_G2";
    MxGAShapeEnum2[MxGAShapeEnum2["GA_C2"] = 4] = "GA_C2";
    MxGAShapeEnum2[MxGAShapeEnum2["GA_C3"] = 5] = "GA_C3";
    MxGAShapeEnum2[MxGAShapeEnum2["GA_CN"] = 6] = "GA_CN";
  })(MdGe2.MxGAShapeEnum || (MdGe2.MxGAShapeEnum = {}));
  (function (MxOffsetModeEnum2) {
    MxOffsetModeEnum2[MxOffsetModeEnum2["Offset_Skin"] = 0] = "Offset_Skin";
    MxOffsetModeEnum2[MxOffsetModeEnum2["Offset_Pipe"] = 1] = "Offset_Pipe";
    MxOffsetModeEnum2[MxOffsetModeEnum2["Offset_RectoVerso"] = 2] = "Offset_RectoVerso";
  })(MdGe2.MxOffsetModeEnum || (MdGe2.MxOffsetModeEnum = {}));
  (function (MxGAJoinTypeEnum2) {
    MxGAJoinTypeEnum2[MxGAJoinTypeEnum2["GA_Arc"] = 0] = "GA_Arc";
    MxGAJoinTypeEnum2[MxGAJoinTypeEnum2["GA_Tangent"] = 1] = "GA_Tangent";
    MxGAJoinTypeEnum2[MxGAJoinTypeEnum2["GA_Intersection"] = 2] = "GA_Intersection";
  })(MdGe2.MxGAJoinTypeEnum || (MdGe2.MxGAJoinTypeEnum = {}));
  (function (MxNameOfMaterial2) {
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Brass"] = 0] = "Material_NOM_Brass";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Bronze"] = 1] = "Material_NOM_Bronze";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Copper"] = 2] = "Material_NOM_Copper";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Gold"] = 3] = "Material_NOM_Gold";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Pewter"] = 4] = "Material_NOM_Pewter";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Plastered"] = 5] = "Material_NOM_Plastered";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Plastified"] = 6] = "Material_NOM_Plastified";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Silver"] = 7] = "Material_NOM_Silver";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Steel"] = 8] = "Material_NOM_Steel";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Stone"] = 9] = "Material_NOM_Stone";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_ShinyPlastified"] = 10] = "Material_NOM_ShinyPlastified";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Satin"] = 11] = "Material_NOM_Satin";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Metalized"] = 12] = "Material_NOM_Metalized";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Ionized"] = 13] = "Material_NOM_Ionized";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Chrome"] = 14] = "Material_NOM_Chrome";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Aluminum"] = 15] = "Material_NOM_Aluminum";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Obsidian"] = 16] = "Material_NOM_Obsidian";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Neon"] = 17] = "Material_NOM_Neon";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Jade"] = 18] = "Material_NOM_Jade";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Charcoal"] = 19] = "Material_NOM_Charcoal";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Water"] = 20] = "Material_NOM_Water";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Glass"] = 21] = "Material_NOM_Glass";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Diamond"] = 22] = "Material_NOM_Diamond";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_Transparent"] = 23] = "Material_NOM_Transparent";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_DEFAULT"] = 24] = "Material_NOM_DEFAULT";
    MxNameOfMaterial2[MxNameOfMaterial2["Material_NOM_UserDefined"] = 25] = "Material_NOM_UserDefined";
  })(MdGe2.MxNameOfMaterial || (MdGe2.MxNameOfMaterial = {}));
  (function (MxTypeOfMaterial2) {
    MxTypeOfMaterial2[MxTypeOfMaterial2["Material_TOM_ASPECT"] = 0] = "Material_TOM_ASPECT";
    MxTypeOfMaterial2[MxTypeOfMaterial2["Material_TOM_PHYSIC"] = 1] = "Material_TOM_PHYSIC";
  })(MdGe2.MxTypeOfMaterial || (MdGe2.MxTypeOfMaterial = {}));
  (function (MxTypeOfReflection2) {
    MxTypeOfReflection2[MxTypeOfReflection2["Reflection_TOR_AMBIENT"] = 0] = "Reflection_TOR_AMBIENT";
    MxTypeOfReflection2[MxTypeOfReflection2["Reflection_TOR_DIFFUSE"] = 1] = "Reflection_TOR_DIFFUSE";
    MxTypeOfReflection2[MxTypeOfReflection2["Reflection_TOR_SPECULAR"] = 2] = "Reflection_TOR_SPECULAR";
    MxTypeOfReflection2[MxTypeOfReflection2["Reflection_TOR_EMISSION"] = 3] = "Reflection_TOR_EMISSION";
  })(MdGe2.MxTypeOfReflection || (MdGe2.MxTypeOfReflection = {}));
  (function (MxNameOfColor2) {
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BLACK"] = 0] = "Color_NOC_BLACK";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MATRABLUE"] = 1] = "Color_NOC_MATRABLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MATRAGRAY"] = 2] = "Color_NOC_MATRAGRAY";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ALICEBLUE"] = 3] = "Color_NOC_ALICEBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ANTIQUEWHITE"] = 4] = "Color_NOC_ANTIQUEWHITE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ANTIQUEWHITE1"] = 5] = "Color_NOC_ANTIQUEWHITE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ANTIQUEWHITE2"] = 6] = "Color_NOC_ANTIQUEWHITE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ANTIQUEWHITE3"] = 7] = "Color_NOC_ANTIQUEWHITE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ANTIQUEWHITE4"] = 8] = "Color_NOC_ANTIQUEWHITE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_AQUAMARINE1"] = 9] = "Color_NOC_AQUAMARINE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_AQUAMARINE2"] = 10] = "Color_NOC_AQUAMARINE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_AQUAMARINE4"] = 11] = "Color_NOC_AQUAMARINE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_AZURE"] = 12] = "Color_NOC_AZURE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_AZURE2"] = 13] = "Color_NOC_AZURE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_AZURE3"] = 14] = "Color_NOC_AZURE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_AZURE4"] = 15] = "Color_NOC_AZURE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BEIGE"] = 16] = "Color_NOC_BEIGE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BISQUE"] = 17] = "Color_NOC_BISQUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BISQUE2"] = 18] = "Color_NOC_BISQUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BISQUE3"] = 19] = "Color_NOC_BISQUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BISQUE4"] = 20] = "Color_NOC_BISQUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BLANCHEDALMOND"] = 21] = "Color_NOC_BLANCHEDALMOND";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BLUE"] = 22] = "Color_NOC_BLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BLUE1"] = 22 /* Color_NOC_BLUE */] = "Color_NOC_BLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BLUE2"] = 23] = "Color_NOC_BLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BLUE3"] = 24] = "Color_NOC_BLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BLUE4"] = 25] = "Color_NOC_BLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BLUEVIOLET"] = 26] = "Color_NOC_BLUEVIOLET";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BROWN"] = 27] = "Color_NOC_BROWN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BROWN1"] = 28] = "Color_NOC_BROWN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BROWN2"] = 29] = "Color_NOC_BROWN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BROWN3"] = 30] = "Color_NOC_BROWN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BROWN4"] = 31] = "Color_NOC_BROWN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BURLYWOOD"] = 32] = "Color_NOC_BURLYWOOD";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BURLYWOOD1"] = 33] = "Color_NOC_BURLYWOOD1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BURLYWOOD2"] = 34] = "Color_NOC_BURLYWOOD2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BURLYWOOD3"] = 35] = "Color_NOC_BURLYWOOD3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BURLYWOOD4"] = 36] = "Color_NOC_BURLYWOOD4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CADETBLUE"] = 37] = "Color_NOC_CADETBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CADETBLUE1"] = 38] = "Color_NOC_CADETBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CADETBLUE2"] = 39] = "Color_NOC_CADETBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CADETBLUE3"] = 40] = "Color_NOC_CADETBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CADETBLUE4"] = 41] = "Color_NOC_CADETBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHARTREUSE"] = 42] = "Color_NOC_CHARTREUSE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHARTREUSE1"] = 42 /* Color_NOC_CHARTREUSE */] = "Color_NOC_CHARTREUSE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHARTREUSE2"] = 43] = "Color_NOC_CHARTREUSE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHARTREUSE3"] = 44] = "Color_NOC_CHARTREUSE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHARTREUSE4"] = 45] = "Color_NOC_CHARTREUSE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHOCOLATE"] = 46] = "Color_NOC_CHOCOLATE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHOCOLATE1"] = 47] = "Color_NOC_CHOCOLATE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHOCOLATE2"] = 48] = "Color_NOC_CHOCOLATE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHOCOLATE3"] = 49] = "Color_NOC_CHOCOLATE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CHOCOLATE4"] = 50] = "Color_NOC_CHOCOLATE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORAL"] = 51] = "Color_NOC_CORAL";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORAL1"] = 52] = "Color_NOC_CORAL1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORAL2"] = 53] = "Color_NOC_CORAL2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORAL3"] = 54] = "Color_NOC_CORAL3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORAL4"] = 55] = "Color_NOC_CORAL4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORNFLOWERBLUE"] = 56] = "Color_NOC_CORNFLOWERBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORNSILK1"] = 57] = "Color_NOC_CORNSILK1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORNSILK2"] = 58] = "Color_NOC_CORNSILK2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORNSILK3"] = 59] = "Color_NOC_CORNSILK3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CORNSILK4"] = 60] = "Color_NOC_CORNSILK4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CYAN"] = 61] = "Color_NOC_CYAN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CYAN1"] = 61 /* Color_NOC_CYAN */] = "Color_NOC_CYAN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CYAN2"] = 62] = "Color_NOC_CYAN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CYAN3"] = 63] = "Color_NOC_CYAN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_CYAN4"] = 64] = "Color_NOC_CYAN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKGOLDENROD"] = 65] = "Color_NOC_DARKGOLDENROD";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKGOLDENROD1"] = 66] = "Color_NOC_DARKGOLDENROD1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKGOLDENROD2"] = 67] = "Color_NOC_DARKGOLDENROD2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKGOLDENROD3"] = 68] = "Color_NOC_DARKGOLDENROD3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKGOLDENROD4"] = 69] = "Color_NOC_DARKGOLDENROD4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKGREEN"] = 70] = "Color_NOC_DARKGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKKHAKI"] = 71] = "Color_NOC_DARKKHAKI";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKOLIVEGREEN"] = 72] = "Color_NOC_DARKOLIVEGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKOLIVEGREEN1"] = 73] = "Color_NOC_DARKOLIVEGREEN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKOLIVEGREEN2"] = 74] = "Color_NOC_DARKOLIVEGREEN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKOLIVEGREEN3"] = 75] = "Color_NOC_DARKOLIVEGREEN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKOLIVEGREEN4"] = 76] = "Color_NOC_DARKOLIVEGREEN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORANGE"] = 77] = "Color_NOC_DARKORANGE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORANGE1"] = 78] = "Color_NOC_DARKORANGE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORANGE2"] = 79] = "Color_NOC_DARKORANGE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORANGE3"] = 80] = "Color_NOC_DARKORANGE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORANGE4"] = 81] = "Color_NOC_DARKORANGE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORCHID"] = 82] = "Color_NOC_DARKORCHID";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORCHID1"] = 83] = "Color_NOC_DARKORCHID1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORCHID2"] = 84] = "Color_NOC_DARKORCHID2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORCHID3"] = 85] = "Color_NOC_DARKORCHID3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKORCHID4"] = 86] = "Color_NOC_DARKORCHID4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSALMON"] = 87] = "Color_NOC_DARKSALMON";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSEAGREEN"] = 88] = "Color_NOC_DARKSEAGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSEAGREEN1"] = 89] = "Color_NOC_DARKSEAGREEN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSEAGREEN2"] = 90] = "Color_NOC_DARKSEAGREEN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSEAGREEN3"] = 91] = "Color_NOC_DARKSEAGREEN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSEAGREEN4"] = 92] = "Color_NOC_DARKSEAGREEN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSLATEBLUE"] = 93] = "Color_NOC_DARKSLATEBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSLATEGRAY1"] = 94] = "Color_NOC_DARKSLATEGRAY1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSLATEGRAY2"] = 95] = "Color_NOC_DARKSLATEGRAY2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSLATEGRAY3"] = 96] = "Color_NOC_DARKSLATEGRAY3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSLATEGRAY4"] = 97] = "Color_NOC_DARKSLATEGRAY4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKSLATEGRAY"] = 98] = "Color_NOC_DARKSLATEGRAY";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKTURQUOISE"] = 99] = "Color_NOC_DARKTURQUOISE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DARKVIOLET"] = 100] = "Color_NOC_DARKVIOLET";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DEEPPINK"] = 101] = "Color_NOC_DEEPPINK";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DEEPPINK2"] = 102] = "Color_NOC_DEEPPINK2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DEEPPINK3"] = 103] = "Color_NOC_DEEPPINK3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DEEPPINK4"] = 104] = "Color_NOC_DEEPPINK4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DEEPSKYBLUE1"] = 105] = "Color_NOC_DEEPSKYBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DEEPSKYBLUE2"] = 106] = "Color_NOC_DEEPSKYBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DEEPSKYBLUE3"] = 107] = "Color_NOC_DEEPSKYBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DEEPSKYBLUE4"] = 108] = "Color_NOC_DEEPSKYBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DODGERBLUE1"] = 109] = "Color_NOC_DODGERBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DODGERBLUE2"] = 110] = "Color_NOC_DODGERBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DODGERBLUE3"] = 111] = "Color_NOC_DODGERBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_DODGERBLUE4"] = 112] = "Color_NOC_DODGERBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_FIREBRICK"] = 113] = "Color_NOC_FIREBRICK";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_FIREBRICK1"] = 114] = "Color_NOC_FIREBRICK1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_FIREBRICK2"] = 115] = "Color_NOC_FIREBRICK2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_FIREBRICK3"] = 116] = "Color_NOC_FIREBRICK3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_FIREBRICK4"] = 117] = "Color_NOC_FIREBRICK4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_FLORALWHITE"] = 118] = "Color_NOC_FLORALWHITE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_FORESTGREEN"] = 119] = "Color_NOC_FORESTGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GAINSBORO"] = 120] = "Color_NOC_GAINSBORO";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GHOSTWHITE"] = 121] = "Color_NOC_GHOSTWHITE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLD"] = 122] = "Color_NOC_GOLD";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLD1"] = 122 /* Color_NOC_GOLD */] = "Color_NOC_GOLD1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLD2"] = 123] = "Color_NOC_GOLD2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLD3"] = 124] = "Color_NOC_GOLD3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLD4"] = 125] = "Color_NOC_GOLD4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLDENROD"] = 126] = "Color_NOC_GOLDENROD";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLDENROD1"] = 127] = "Color_NOC_GOLDENROD1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLDENROD2"] = 128] = "Color_NOC_GOLDENROD2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLDENROD3"] = 129] = "Color_NOC_GOLDENROD3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GOLDENROD4"] = 130] = "Color_NOC_GOLDENROD4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY"] = 131] = "Color_NOC_GRAY";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY0"] = 132] = "Color_NOC_GRAY0";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY1"] = 133] = "Color_NOC_GRAY1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY2"] = 134] = "Color_NOC_GRAY2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY3"] = 135] = "Color_NOC_GRAY3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY4"] = 136] = "Color_NOC_GRAY4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY5"] = 137] = "Color_NOC_GRAY5";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY6"] = 138] = "Color_NOC_GRAY6";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY7"] = 139] = "Color_NOC_GRAY7";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY8"] = 140] = "Color_NOC_GRAY8";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY9"] = 141] = "Color_NOC_GRAY9";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY10"] = 142] = "Color_NOC_GRAY10";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY11"] = 143] = "Color_NOC_GRAY11";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY12"] = 144] = "Color_NOC_GRAY12";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY13"] = 145] = "Color_NOC_GRAY13";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY14"] = 146] = "Color_NOC_GRAY14";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY15"] = 147] = "Color_NOC_GRAY15";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY16"] = 148] = "Color_NOC_GRAY16";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY17"] = 149] = "Color_NOC_GRAY17";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY18"] = 150] = "Color_NOC_GRAY18";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY19"] = 151] = "Color_NOC_GRAY19";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY20"] = 152] = "Color_NOC_GRAY20";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY21"] = 153] = "Color_NOC_GRAY21";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY22"] = 154] = "Color_NOC_GRAY22";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY23"] = 155] = "Color_NOC_GRAY23";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY24"] = 156] = "Color_NOC_GRAY24";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY25"] = 157] = "Color_NOC_GRAY25";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY26"] = 158] = "Color_NOC_GRAY26";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY27"] = 159] = "Color_NOC_GRAY27";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY28"] = 160] = "Color_NOC_GRAY28";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY29"] = 161] = "Color_NOC_GRAY29";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY30"] = 162] = "Color_NOC_GRAY30";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY31"] = 163] = "Color_NOC_GRAY31";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY32"] = 164] = "Color_NOC_GRAY32";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY33"] = 165] = "Color_NOC_GRAY33";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY34"] = 166] = "Color_NOC_GRAY34";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY35"] = 167] = "Color_NOC_GRAY35";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY36"] = 168] = "Color_NOC_GRAY36";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY37"] = 169] = "Color_NOC_GRAY37";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY38"] = 170] = "Color_NOC_GRAY38";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY39"] = 171] = "Color_NOC_GRAY39";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY40"] = 172] = "Color_NOC_GRAY40";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY41"] = 173] = "Color_NOC_GRAY41";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY42"] = 174] = "Color_NOC_GRAY42";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY43"] = 175] = "Color_NOC_GRAY43";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY44"] = 176] = "Color_NOC_GRAY44";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY45"] = 177] = "Color_NOC_GRAY45";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY46"] = 178] = "Color_NOC_GRAY46";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY47"] = 179] = "Color_NOC_GRAY47";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY48"] = 180] = "Color_NOC_GRAY48";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY49"] = 181] = "Color_NOC_GRAY49";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY50"] = 182] = "Color_NOC_GRAY50";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY51"] = 183] = "Color_NOC_GRAY51";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY52"] = 184] = "Color_NOC_GRAY52";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY53"] = 185] = "Color_NOC_GRAY53";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY54"] = 186] = "Color_NOC_GRAY54";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY55"] = 187] = "Color_NOC_GRAY55";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY56"] = 188] = "Color_NOC_GRAY56";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY57"] = 189] = "Color_NOC_GRAY57";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY58"] = 190] = "Color_NOC_GRAY58";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY59"] = 191] = "Color_NOC_GRAY59";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY60"] = 192] = "Color_NOC_GRAY60";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY61"] = 193] = "Color_NOC_GRAY61";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY62"] = 194] = "Color_NOC_GRAY62";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY63"] = 195] = "Color_NOC_GRAY63";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY64"] = 196] = "Color_NOC_GRAY64";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY65"] = 197] = "Color_NOC_GRAY65";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY66"] = 198] = "Color_NOC_GRAY66";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY67"] = 199] = "Color_NOC_GRAY67";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY68"] = 200] = "Color_NOC_GRAY68";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY69"] = 201] = "Color_NOC_GRAY69";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY70"] = 202] = "Color_NOC_GRAY70";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY71"] = 203] = "Color_NOC_GRAY71";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY72"] = 204] = "Color_NOC_GRAY72";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY73"] = 205] = "Color_NOC_GRAY73";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY74"] = 206] = "Color_NOC_GRAY74";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY75"] = 207] = "Color_NOC_GRAY75";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY76"] = 208] = "Color_NOC_GRAY76";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY77"] = 209] = "Color_NOC_GRAY77";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY78"] = 210] = "Color_NOC_GRAY78";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY79"] = 211] = "Color_NOC_GRAY79";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY80"] = 212] = "Color_NOC_GRAY80";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY81"] = 213] = "Color_NOC_GRAY81";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY82"] = 214] = "Color_NOC_GRAY82";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY83"] = 215] = "Color_NOC_GRAY83";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY85"] = 216] = "Color_NOC_GRAY85";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY86"] = 217] = "Color_NOC_GRAY86";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY87"] = 218] = "Color_NOC_GRAY87";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY88"] = 219] = "Color_NOC_GRAY88";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY89"] = 220] = "Color_NOC_GRAY89";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY90"] = 221] = "Color_NOC_GRAY90";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY91"] = 222] = "Color_NOC_GRAY91";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY92"] = 223] = "Color_NOC_GRAY92";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY93"] = 224] = "Color_NOC_GRAY93";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY94"] = 225] = "Color_NOC_GRAY94";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY95"] = 226] = "Color_NOC_GRAY95";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY97"] = 227] = "Color_NOC_GRAY97";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY98"] = 228] = "Color_NOC_GRAY98";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GRAY99"] = 229] = "Color_NOC_GRAY99";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GREEN"] = 230] = "Color_NOC_GREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GREEN1"] = 230 /* Color_NOC_GREEN */] = "Color_NOC_GREEN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GREEN2"] = 231] = "Color_NOC_GREEN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GREEN3"] = 232] = "Color_NOC_GREEN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GREEN4"] = 233] = "Color_NOC_GREEN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_GREENYELLOW"] = 234] = "Color_NOC_GREENYELLOW";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HONEYDEW"] = 235] = "Color_NOC_HONEYDEW";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HONEYDEW2"] = 236] = "Color_NOC_HONEYDEW2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HONEYDEW3"] = 237] = "Color_NOC_HONEYDEW3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HONEYDEW4"] = 238] = "Color_NOC_HONEYDEW4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HOTPINK"] = 239] = "Color_NOC_HOTPINK";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HOTPINK1"] = 240] = "Color_NOC_HOTPINK1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HOTPINK2"] = 241] = "Color_NOC_HOTPINK2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HOTPINK3"] = 242] = "Color_NOC_HOTPINK3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_HOTPINK4"] = 243] = "Color_NOC_HOTPINK4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_INDIANRED"] = 244] = "Color_NOC_INDIANRED";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_INDIANRED1"] = 245] = "Color_NOC_INDIANRED1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_INDIANRED2"] = 246] = "Color_NOC_INDIANRED2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_INDIANRED3"] = 247] = "Color_NOC_INDIANRED3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_INDIANRED4"] = 248] = "Color_NOC_INDIANRED4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_IVORY"] = 249] = "Color_NOC_IVORY";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_IVORY2"] = 250] = "Color_NOC_IVORY2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_IVORY3"] = 251] = "Color_NOC_IVORY3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_IVORY4"] = 252] = "Color_NOC_IVORY4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_KHAKI"] = 253] = "Color_NOC_KHAKI";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_KHAKI1"] = 254] = "Color_NOC_KHAKI1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_KHAKI2"] = 255] = "Color_NOC_KHAKI2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_KHAKI3"] = 256] = "Color_NOC_KHAKI3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_KHAKI4"] = 257] = "Color_NOC_KHAKI4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LAVENDER"] = 258] = "Color_NOC_LAVENDER";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LAVENDERBLUSH1"] = 259] = "Color_NOC_LAVENDERBLUSH1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LAVENDERBLUSH2"] = 260] = "Color_NOC_LAVENDERBLUSH2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LAVENDERBLUSH3"] = 261] = "Color_NOC_LAVENDERBLUSH3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LAVENDERBLUSH4"] = 262] = "Color_NOC_LAVENDERBLUSH4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LAWNGREEN"] = 263] = "Color_NOC_LAWNGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LEMONCHIFFON1"] = 264] = "Color_NOC_LEMONCHIFFON1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LEMONCHIFFON2"] = 265] = "Color_NOC_LEMONCHIFFON2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LEMONCHIFFON3"] = 266] = "Color_NOC_LEMONCHIFFON3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LEMONCHIFFON4"] = 267] = "Color_NOC_LEMONCHIFFON4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTBLUE"] = 268] = "Color_NOC_LIGHTBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTBLUE1"] = 269] = "Color_NOC_LIGHTBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTBLUE2"] = 270] = "Color_NOC_LIGHTBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTBLUE3"] = 271] = "Color_NOC_LIGHTBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTBLUE4"] = 272] = "Color_NOC_LIGHTBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTCORAL"] = 273] = "Color_NOC_LIGHTCORAL";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTCYAN"] = 274] = "Color_NOC_LIGHTCYAN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTCYAN1"] = 274 /* Color_NOC_LIGHTCYAN */] = "Color_NOC_LIGHTCYAN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTCYAN2"] = 275] = "Color_NOC_LIGHTCYAN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTCYAN3"] = 276] = "Color_NOC_LIGHTCYAN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTCYAN4"] = 277] = "Color_NOC_LIGHTCYAN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTGOLDENROD"] = 278] = "Color_NOC_LIGHTGOLDENROD";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTGOLDENROD1"] = 279] = "Color_NOC_LIGHTGOLDENROD1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTGOLDENROD2"] = 280] = "Color_NOC_LIGHTGOLDENROD2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTGOLDENROD3"] = 281] = "Color_NOC_LIGHTGOLDENROD3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTGOLDENROD4"] = 282] = "Color_NOC_LIGHTGOLDENROD4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTGOLDENRODYELLOW"] = 283] = "Color_NOC_LIGHTGOLDENRODYELLOW";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTGRAY"] = 284] = "Color_NOC_LIGHTGRAY";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTPINK"] = 285] = "Color_NOC_LIGHTPINK";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTPINK1"] = 286] = "Color_NOC_LIGHTPINK1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTPINK2"] = 287] = "Color_NOC_LIGHTPINK2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTPINK3"] = 288] = "Color_NOC_LIGHTPINK3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTPINK4"] = 289] = "Color_NOC_LIGHTPINK4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSALMON1"] = 290] = "Color_NOC_LIGHTSALMON1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSALMON2"] = 291] = "Color_NOC_LIGHTSALMON2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSALMON3"] = 292] = "Color_NOC_LIGHTSALMON3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSALMON4"] = 293] = "Color_NOC_LIGHTSALMON4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSEAGREEN"] = 294] = "Color_NOC_LIGHTSEAGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSKYBLUE"] = 295] = "Color_NOC_LIGHTSKYBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSKYBLUE1"] = 296] = "Color_NOC_LIGHTSKYBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSKYBLUE2"] = 297] = "Color_NOC_LIGHTSKYBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSKYBLUE3"] = 298] = "Color_NOC_LIGHTSKYBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSKYBLUE4"] = 299] = "Color_NOC_LIGHTSKYBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSLATEBLUE"] = 300] = "Color_NOC_LIGHTSLATEBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSLATEGRAY"] = 301] = "Color_NOC_LIGHTSLATEGRAY";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSTEELBLUE"] = 302] = "Color_NOC_LIGHTSTEELBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSTEELBLUE1"] = 303] = "Color_NOC_LIGHTSTEELBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSTEELBLUE2"] = 304] = "Color_NOC_LIGHTSTEELBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSTEELBLUE3"] = 305] = "Color_NOC_LIGHTSTEELBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTSTEELBLUE4"] = 306] = "Color_NOC_LIGHTSTEELBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTYELLOW"] = 307] = "Color_NOC_LIGHTYELLOW";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTYELLOW2"] = 308] = "Color_NOC_LIGHTYELLOW2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTYELLOW3"] = 309] = "Color_NOC_LIGHTYELLOW3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIGHTYELLOW4"] = 310] = "Color_NOC_LIGHTYELLOW4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LIMEGREEN"] = 311] = "Color_NOC_LIMEGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_LINEN"] = 312] = "Color_NOC_LINEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAGENTA"] = 313] = "Color_NOC_MAGENTA";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAGENTA1"] = 313 /* Color_NOC_MAGENTA */] = "Color_NOC_MAGENTA1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAGENTA2"] = 314] = "Color_NOC_MAGENTA2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAGENTA3"] = 315] = "Color_NOC_MAGENTA3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAGENTA4"] = 316] = "Color_NOC_MAGENTA4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAROON"] = 317] = "Color_NOC_MAROON";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAROON1"] = 318] = "Color_NOC_MAROON1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAROON2"] = 319] = "Color_NOC_MAROON2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAROON3"] = 320] = "Color_NOC_MAROON3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MAROON4"] = 321] = "Color_NOC_MAROON4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMAQUAMARINE"] = 322] = "Color_NOC_MEDIUMAQUAMARINE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMORCHID"] = 323] = "Color_NOC_MEDIUMORCHID";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMORCHID1"] = 324] = "Color_NOC_MEDIUMORCHID1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMORCHID2"] = 325] = "Color_NOC_MEDIUMORCHID2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMORCHID3"] = 326] = "Color_NOC_MEDIUMORCHID3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMORCHID4"] = 327] = "Color_NOC_MEDIUMORCHID4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMPURPLE"] = 328] = "Color_NOC_MEDIUMPURPLE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMPURPLE1"] = 329] = "Color_NOC_MEDIUMPURPLE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMPURPLE2"] = 330] = "Color_NOC_MEDIUMPURPLE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMPURPLE3"] = 331] = "Color_NOC_MEDIUMPURPLE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMPURPLE4"] = 332] = "Color_NOC_MEDIUMPURPLE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMSEAGREEN"] = 333] = "Color_NOC_MEDIUMSEAGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMSLATEBLUE"] = 334] = "Color_NOC_MEDIUMSLATEBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMSPRINGGREEN"] = 335] = "Color_NOC_MEDIUMSPRINGGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMTURQUOISE"] = 336] = "Color_NOC_MEDIUMTURQUOISE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MEDIUMVIOLETRED"] = 337] = "Color_NOC_MEDIUMVIOLETRED";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MIDNIGHTBLUE"] = 338] = "Color_NOC_MIDNIGHTBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MINTCREAM"] = 339] = "Color_NOC_MINTCREAM";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MISTYROSE"] = 340] = "Color_NOC_MISTYROSE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MISTYROSE2"] = 341] = "Color_NOC_MISTYROSE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MISTYROSE3"] = 342] = "Color_NOC_MISTYROSE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MISTYROSE4"] = 343] = "Color_NOC_MISTYROSE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_MOCCASIN"] = 344] = "Color_NOC_MOCCASIN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_NAVAJOWHITE1"] = 345] = "Color_NOC_NAVAJOWHITE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_NAVAJOWHITE2"] = 346] = "Color_NOC_NAVAJOWHITE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_NAVAJOWHITE3"] = 347] = "Color_NOC_NAVAJOWHITE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_NAVAJOWHITE4"] = 348] = "Color_NOC_NAVAJOWHITE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_NAVYBLUE"] = 349] = "Color_NOC_NAVYBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_OLDLACE"] = 350] = "Color_NOC_OLDLACE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_OLIVEDRAB"] = 351] = "Color_NOC_OLIVEDRAB";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_OLIVEDRAB1"] = 352] = "Color_NOC_OLIVEDRAB1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_OLIVEDRAB2"] = 353] = "Color_NOC_OLIVEDRAB2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_OLIVEDRAB3"] = 354] = "Color_NOC_OLIVEDRAB3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_OLIVEDRAB4"] = 355] = "Color_NOC_OLIVEDRAB4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGE"] = 356] = "Color_NOC_ORANGE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGE1"] = 356 /* Color_NOC_ORANGE */] = "Color_NOC_ORANGE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGE2"] = 357] = "Color_NOC_ORANGE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGE3"] = 358] = "Color_NOC_ORANGE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGE4"] = 359] = "Color_NOC_ORANGE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGERED"] = 360] = "Color_NOC_ORANGERED";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGERED1"] = 360 /* Color_NOC_ORANGERED */] = "Color_NOC_ORANGERED1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGERED2"] = 361] = "Color_NOC_ORANGERED2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGERED3"] = 362] = "Color_NOC_ORANGERED3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORANGERED4"] = 363] = "Color_NOC_ORANGERED4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORCHID"] = 364] = "Color_NOC_ORCHID";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORCHID1"] = 365] = "Color_NOC_ORCHID1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORCHID2"] = 366] = "Color_NOC_ORCHID2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORCHID3"] = 367] = "Color_NOC_ORCHID3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ORCHID4"] = 368] = "Color_NOC_ORCHID4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEGOLDENROD"] = 369] = "Color_NOC_PALEGOLDENROD";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEGREEN"] = 370] = "Color_NOC_PALEGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEGREEN1"] = 371] = "Color_NOC_PALEGREEN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEGREEN2"] = 372] = "Color_NOC_PALEGREEN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEGREEN3"] = 373] = "Color_NOC_PALEGREEN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEGREEN4"] = 374] = "Color_NOC_PALEGREEN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALETURQUOISE"] = 375] = "Color_NOC_PALETURQUOISE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALETURQUOISE1"] = 376] = "Color_NOC_PALETURQUOISE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALETURQUOISE2"] = 377] = "Color_NOC_PALETURQUOISE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALETURQUOISE3"] = 378] = "Color_NOC_PALETURQUOISE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALETURQUOISE4"] = 379] = "Color_NOC_PALETURQUOISE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEVIOLETRED"] = 380] = "Color_NOC_PALEVIOLETRED";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEVIOLETRED1"] = 381] = "Color_NOC_PALEVIOLETRED1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEVIOLETRED2"] = 382] = "Color_NOC_PALEVIOLETRED2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEVIOLETRED3"] = 383] = "Color_NOC_PALEVIOLETRED3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PALEVIOLETRED4"] = 384] = "Color_NOC_PALEVIOLETRED4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PAPAYAWHIP"] = 385] = "Color_NOC_PAPAYAWHIP";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PEACHPUFF"] = 386] = "Color_NOC_PEACHPUFF";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PEACHPUFF2"] = 387] = "Color_NOC_PEACHPUFF2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PEACHPUFF3"] = 388] = "Color_NOC_PEACHPUFF3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PEACHPUFF4"] = 389] = "Color_NOC_PEACHPUFF4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PERU"] = 390] = "Color_NOC_PERU";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PINK"] = 391] = "Color_NOC_PINK";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PINK1"] = 392] = "Color_NOC_PINK1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PINK2"] = 393] = "Color_NOC_PINK2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PINK3"] = 394] = "Color_NOC_PINK3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PINK4"] = 395] = "Color_NOC_PINK4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PLUM"] = 396] = "Color_NOC_PLUM";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PLUM1"] = 397] = "Color_NOC_PLUM1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PLUM2"] = 398] = "Color_NOC_PLUM2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PLUM3"] = 399] = "Color_NOC_PLUM3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PLUM4"] = 400] = "Color_NOC_PLUM4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_POWDERBLUE"] = 401] = "Color_NOC_POWDERBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PURPLE"] = 402] = "Color_NOC_PURPLE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PURPLE1"] = 403] = "Color_NOC_PURPLE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PURPLE2"] = 404] = "Color_NOC_PURPLE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PURPLE3"] = 405] = "Color_NOC_PURPLE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_PURPLE4"] = 406] = "Color_NOC_PURPLE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_RED"] = 407] = "Color_NOC_RED";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_RED1"] = 407 /* Color_NOC_RED */] = "Color_NOC_RED1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_RED2"] = 408] = "Color_NOC_RED2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_RED3"] = 409] = "Color_NOC_RED3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_RED4"] = 410] = "Color_NOC_RED4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROSYBROWN"] = 411] = "Color_NOC_ROSYBROWN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROSYBROWN1"] = 412] = "Color_NOC_ROSYBROWN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROSYBROWN2"] = 413] = "Color_NOC_ROSYBROWN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROSYBROWN3"] = 414] = "Color_NOC_ROSYBROWN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROSYBROWN4"] = 415] = "Color_NOC_ROSYBROWN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROYALBLUE"] = 416] = "Color_NOC_ROYALBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROYALBLUE1"] = 417] = "Color_NOC_ROYALBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROYALBLUE2"] = 418] = "Color_NOC_ROYALBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROYALBLUE3"] = 419] = "Color_NOC_ROYALBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_ROYALBLUE4"] = 420] = "Color_NOC_ROYALBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SADDLEBROWN"] = 421] = "Color_NOC_SADDLEBROWN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SALMON"] = 422] = "Color_NOC_SALMON";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SALMON1"] = 423] = "Color_NOC_SALMON1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SALMON2"] = 424] = "Color_NOC_SALMON2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SALMON3"] = 425] = "Color_NOC_SALMON3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SALMON4"] = 426] = "Color_NOC_SALMON4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SANDYBROWN"] = 427] = "Color_NOC_SANDYBROWN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEAGREEN"] = 428] = "Color_NOC_SEAGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEAGREEN1"] = 429] = "Color_NOC_SEAGREEN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEAGREEN2"] = 430] = "Color_NOC_SEAGREEN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEAGREEN3"] = 431] = "Color_NOC_SEAGREEN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEAGREEN4"] = 432] = "Color_NOC_SEAGREEN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEASHELL"] = 433] = "Color_NOC_SEASHELL";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEASHELL2"] = 434] = "Color_NOC_SEASHELL2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEASHELL3"] = 435] = "Color_NOC_SEASHELL3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SEASHELL4"] = 436] = "Color_NOC_SEASHELL4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_BEET"] = 437] = "Color_NOC_BEET";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TEAL"] = 438] = "Color_NOC_TEAL";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SIENNA"] = 439] = "Color_NOC_SIENNA";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SIENNA1"] = 440] = "Color_NOC_SIENNA1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SIENNA2"] = 441] = "Color_NOC_SIENNA2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SIENNA3"] = 442] = "Color_NOC_SIENNA3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SIENNA4"] = 443] = "Color_NOC_SIENNA4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SKYBLUE"] = 444] = "Color_NOC_SKYBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SKYBLUE1"] = 445] = "Color_NOC_SKYBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SKYBLUE2"] = 446] = "Color_NOC_SKYBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SKYBLUE3"] = 447] = "Color_NOC_SKYBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SKYBLUE4"] = 448] = "Color_NOC_SKYBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEBLUE"] = 449] = "Color_NOC_SLATEBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEBLUE1"] = 450] = "Color_NOC_SLATEBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEBLUE2"] = 451] = "Color_NOC_SLATEBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEBLUE3"] = 452] = "Color_NOC_SLATEBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEBLUE4"] = 453] = "Color_NOC_SLATEBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEGRAY1"] = 454] = "Color_NOC_SLATEGRAY1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEGRAY2"] = 455] = "Color_NOC_SLATEGRAY2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEGRAY3"] = 456] = "Color_NOC_SLATEGRAY3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEGRAY4"] = 457] = "Color_NOC_SLATEGRAY4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SLATEGRAY"] = 458] = "Color_NOC_SLATEGRAY";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SNOW"] = 459] = "Color_NOC_SNOW";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SNOW2"] = 460] = "Color_NOC_SNOW2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SNOW3"] = 461] = "Color_NOC_SNOW3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SNOW4"] = 462] = "Color_NOC_SNOW4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SPRINGGREEN"] = 463] = "Color_NOC_SPRINGGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SPRINGGREEN2"] = 464] = "Color_NOC_SPRINGGREEN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SPRINGGREEN3"] = 465] = "Color_NOC_SPRINGGREEN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_SPRINGGREEN4"] = 466] = "Color_NOC_SPRINGGREEN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_STEELBLUE"] = 467] = "Color_NOC_STEELBLUE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_STEELBLUE1"] = 468] = "Color_NOC_STEELBLUE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_STEELBLUE2"] = 469] = "Color_NOC_STEELBLUE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_STEELBLUE3"] = 470] = "Color_NOC_STEELBLUE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_STEELBLUE4"] = 471] = "Color_NOC_STEELBLUE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TAN"] = 472] = "Color_NOC_TAN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TAN1"] = 473] = "Color_NOC_TAN1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TAN2"] = 474] = "Color_NOC_TAN2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TAN3"] = 475] = "Color_NOC_TAN3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TAN4"] = 476] = "Color_NOC_TAN4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_THISTLE"] = 477] = "Color_NOC_THISTLE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_THISTLE1"] = 478] = "Color_NOC_THISTLE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_THISTLE2"] = 479] = "Color_NOC_THISTLE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_THISTLE3"] = 480] = "Color_NOC_THISTLE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_THISTLE4"] = 481] = "Color_NOC_THISTLE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TOMATO"] = 482] = "Color_NOC_TOMATO";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TOMATO1"] = 482 /* Color_NOC_TOMATO */] = "Color_NOC_TOMATO1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TOMATO2"] = 483] = "Color_NOC_TOMATO2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TOMATO3"] = 484] = "Color_NOC_TOMATO3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TOMATO4"] = 485] = "Color_NOC_TOMATO4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TURQUOISE"] = 486] = "Color_NOC_TURQUOISE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TURQUOISE1"] = 487] = "Color_NOC_TURQUOISE1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TURQUOISE2"] = 488] = "Color_NOC_TURQUOISE2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TURQUOISE3"] = 489] = "Color_NOC_TURQUOISE3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_TURQUOISE4"] = 490] = "Color_NOC_TURQUOISE4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_VIOLET"] = 491] = "Color_NOC_VIOLET";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_VIOLETRED"] = 492] = "Color_NOC_VIOLETRED";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_VIOLETRED1"] = 493] = "Color_NOC_VIOLETRED1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_VIOLETRED2"] = 494] = "Color_NOC_VIOLETRED2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_VIOLETRED3"] = 495] = "Color_NOC_VIOLETRED3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_VIOLETRED4"] = 496] = "Color_NOC_VIOLETRED4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_WHEAT"] = 497] = "Color_NOC_WHEAT";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_WHEAT1"] = 498] = "Color_NOC_WHEAT1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_WHEAT2"] = 499] = "Color_NOC_WHEAT2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_WHEAT3"] = 500] = "Color_NOC_WHEAT3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_WHEAT4"] = 501] = "Color_NOC_WHEAT4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_WHITESMOKE"] = 502] = "Color_NOC_WHITESMOKE";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_YELLOW"] = 503] = "Color_NOC_YELLOW";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_YELLOW1"] = 503 /* Color_NOC_YELLOW */] = "Color_NOC_YELLOW1";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_YELLOW2"] = 504] = "Color_NOC_YELLOW2";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_YELLOW3"] = 505] = "Color_NOC_YELLOW3";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_YELLOW4"] = 506] = "Color_NOC_YELLOW4";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_YELLOWGREEN"] = 507] = "Color_NOC_YELLOWGREEN";
    MxNameOfColor2[MxNameOfColor2["Color_NOC_WHITE"] = 508] = "Color_NOC_WHITE";
  })(MdGe2.MxNameOfColor || (MdGe2.MxNameOfColor = {}));
  (function (MxTypeOfColor2) {
    MxTypeOfColor2[MxTypeOfColor2["Color_TOC_RGB"] = 0] = "Color_TOC_RGB";
    MxTypeOfColor2[MxTypeOfColor2["Color_TOC_sRGB"] = 1] = "Color_TOC_sRGB";
    MxTypeOfColor2[MxTypeOfColor2["Color_TOC_HLS"] = 2] = "Color_TOC_HLS";
    MxTypeOfColor2[MxTypeOfColor2["Color_TOC_CIELab"] = 3] = "Color_TOC_CIELab";
    MxTypeOfColor2[MxTypeOfColor2["Color_TOC_CIELch"] = 4] = "Color_TOC_CIELch";
  })(MdGe2.MxTypeOfColor || (MdGe2.MxTypeOfColor = {}));
  (function (MxDisplayMode2) {
    MxDisplayMode2[MxDisplayMode2["DM_WireFrame"] = 0] = "DM_WireFrame";
    MxDisplayMode2[MxDisplayMode2["DM_Shaded"] = 1] = "DM_Shaded";
  })(MdGe2.MxDisplayMode || (MdGe2.MxDisplayMode = {}));
  (function (MxTypeOfLightSource2) {
    MxTypeOfLightSource2[MxTypeOfLightSource2["LightSource_TOLS_AMBIENT"] = 0] = "LightSource_TOLS_AMBIENT";
    MxTypeOfLightSource2[MxTypeOfLightSource2["LightSource_TOLS_DIRECTIONAL"] = 1] = "LightSource_TOLS_DIRECTIONAL";
    MxTypeOfLightSource2[MxTypeOfLightSource2["LightSource_TOLS_POSITIONAL"] = 2] = "LightSource_TOLS_POSITIONAL";
    MxTypeOfLightSource2[MxTypeOfLightSource2["LightSource_TOLS_SPOT"] = 3] = "LightSource_TOLS_SPOT";
  })(MdGe2.MxTypeOfLightSource || (MdGe2.MxTypeOfLightSource = {}));
  (function (MxCameraProjection2) {
    MxCameraProjection2[MxCameraProjection2["CProjection_Orthographic"] = 0] = "CProjection_Orthographic";
    MxCameraProjection2[MxCameraProjection2["CProjection_Perspective"] = 1] = "CProjection_Perspective";
    MxCameraProjection2[MxCameraProjection2["CProjection_Stereo"] = 2] = "CProjection_Stereo";
    MxCameraProjection2[MxCameraProjection2["CProjection_MonoLeftEye"] = 3] = "CProjection_MonoLeftEye";
    MxCameraProjection2[MxCameraProjection2["CProjection_MonoRightEye"] = 4] = "CProjection_MonoRightEye";
  })(MdGe2.MxCameraProjection || (MdGe2.MxCameraProjection = {}));
  (function (MxV3dTypeOfOrientation2) {
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_Xpos"] = 0] = "Orientation_Xpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_Ypos"] = 1] = "Orientation_Ypos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_Zpos"] = 2] = "Orientation_Zpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_Xneg"] = 3] = "Orientation_Xneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_Yneg"] = 4] = "Orientation_Yneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_Zneg"] = 5] = "Orientation_Zneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XposYpos"] = 6] = "Orientation_XposYpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XposZpos"] = 7] = "Orientation_XposZpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_YposZpos"] = 8] = "Orientation_YposZpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XnegYneg"] = 9] = "Orientation_XnegYneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XnegYpos"] = 10] = "Orientation_XnegYpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XnegZneg"] = 11] = "Orientation_XnegZneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XnegZpos"] = 12] = "Orientation_XnegZpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_YnegZneg"] = 13] = "Orientation_YnegZneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_YnegZpos"] = 14] = "Orientation_YnegZpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XposYneg"] = 15] = "Orientation_XposYneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XposZneg"] = 16] = "Orientation_XposZneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_YposZneg"] = 17] = "Orientation_YposZneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XposYposZpos"] = 18] = "Orientation_XposYposZpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XposYnegZpos"] = 19] = "Orientation_XposYnegZpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XposYposZneg"] = 20] = "Orientation_XposYposZneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XnegYposZpos"] = 21] = "Orientation_XnegYposZpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XposYnegZneg"] = 22] = "Orientation_XposYnegZneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XnegYposZneg"] = 23] = "Orientation_XnegYposZneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XnegYnegZpos"] = 24] = "Orientation_XnegYnegZpos";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_XnegYnegZneg"] = 25] = "Orientation_XnegYnegZneg";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Zup_AxoLeft"] = 24 /* Orientation_XnegYnegZpos */] = "Orientation_TypeOfOrientation_Zup_AxoLeft";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Zup_AxoRight"] = 19 /* Orientation_XposYnegZpos */] = "Orientation_TypeOfOrientation_Zup_AxoRight";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Zup_Front"] = 4 /* Orientation_Yneg */] = "Orientation_TypeOfOrientation_Zup_Front";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Zup_Back"] = 1 /* Orientation_Ypos */] = "Orientation_TypeOfOrientation_Zup_Back";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Zup_Top"] = 2 /* Orientation_Zpos */] = "Orientation_TypeOfOrientation_Zup_Top";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Zup_Bottom"] = 5 /* Orientation_Zneg */] = "Orientation_TypeOfOrientation_Zup_Bottom";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Zup_Left"] = 3 /* Orientation_Xneg */] = "Orientation_TypeOfOrientation_Zup_Left";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Zup_Right"] = 0 /* Orientation_Xpos */] = "Orientation_TypeOfOrientation_Zup_Right";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Yup_AxoLeft"] = 21 /* Orientation_XnegYposZpos */] = "Orientation_TypeOfOrientation_Yup_AxoLeft";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Yup_AxoRight"] = 18 /* Orientation_XposYposZpos */] = "Orientation_TypeOfOrientation_Yup_AxoRight";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Yup_Front"] = 2 /* Orientation_Zpos */] = "Orientation_TypeOfOrientation_Yup_Front";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Yup_Back"] = 5 /* Orientation_Zneg */] = "Orientation_TypeOfOrientation_Yup_Back";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Yup_Top"] = 1 /* Orientation_Ypos */] = "Orientation_TypeOfOrientation_Yup_Top";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Yup_Bottom"] = 4 /* Orientation_Yneg */] = "Orientation_TypeOfOrientation_Yup_Bottom";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Yup_Left"] = 0 /* Orientation_Xpos */] = "Orientation_TypeOfOrientation_Yup_Left";
    MxV3dTypeOfOrientation2[MxV3dTypeOfOrientation2["Orientation_TypeOfOrientation_Yup_Right"] = 3 /* Orientation_Xneg */] = "Orientation_TypeOfOrientation_Yup_Right";
  })(MdGe2.MxV3dTypeOfOrientation || (MdGe2.MxV3dTypeOfOrientation = {}));
  (function (MxTypeOfAngle2) {
    MxTypeOfAngle2[MxTypeOfAngle2["Angle_TypeOfAngle_Interior"] = 0] = "Angle_TypeOfAngle_Interior";
    MxTypeOfAngle2[MxTypeOfAngle2["Angle_TypeOfAngle_Exterior"] = 1] = "Angle_TypeOfAngle_Exterior";
  })(MdGe2.MxTypeOfAngle || (MdGe2.MxTypeOfAngle = {}));
  (function (MxTypeOfAngleArrowVisibility2) {
    MxTypeOfAngleArrowVisibility2[MxTypeOfAngleArrowVisibility2["Visibility_TOAAV_Both"] = 0] = "Visibility_TOAAV_Both";
    MxTypeOfAngleArrowVisibility2[MxTypeOfAngleArrowVisibility2["Visibility_TOAAV_First"] = 1] = "Visibility_TOAAV_First";
    MxTypeOfAngleArrowVisibility2[MxTypeOfAngleArrowVisibility2["Visibility_TOAAV_Second"] = 2] = "Visibility_TOAAV_Second";
    MxTypeOfAngleArrowVisibility2[MxTypeOfAngleArrowVisibility2["Visibility_TOAAV_None"] = 3] = "Visibility_TOAAV_None";
  })(MdGe2.MxTypeOfAngleArrowVisibility || (MdGe2.MxTypeOfAngleArrowVisibility = {}));
  (function (MxTypeOfLine2) {
    MxTypeOfLine2[MxTypeOfLine2["Line_TOL_EMPTY"] = -1] = "Line_TOL_EMPTY";
    MxTypeOfLine2[MxTypeOfLine2["Line_TOL_SOLID"] = 0] = "Line_TOL_SOLID";
    MxTypeOfLine2[MxTypeOfLine2["Line_TOL_DASH"] = 1] = "Line_TOL_DASH";
    MxTypeOfLine2[MxTypeOfLine2["Line_TOL_DOT"] = 2] = "Line_TOL_DOT";
    MxTypeOfLine2[MxTypeOfLine2["Line_TOL_DOTDASH"] = 3] = "Line_TOL_DOTDASH";
    MxTypeOfLine2[MxTypeOfLine2["Line_TOL_USERDEFINED"] = 4] = "Line_TOL_USERDEFINED";
  })(MdGe2.MxTypeOfLine || (MdGe2.MxTypeOfLine = {}));
  (function (MxTextPath2) {
    MxTextPath2[MxTextPath2["TextPath_TP_UP"] = 0] = "TextPath_TP_UP";
    MxTextPath2[MxTextPath2["TextPath_TP_DOWN"] = 1] = "TextPath_TP_DOWN";
    MxTextPath2[MxTextPath2["TextPath_TP_LEFT"] = 2] = "TextPath_TP_LEFT";
    MxTextPath2[MxTextPath2["TextPath_TP_RIGHT"] = 3] = "TextPath_TP_RIGHT";
  })(MdGe2.MxTextPath || (MdGe2.MxTextPath = {}));
  (function (MxDimensionArrowOrientation2) {
    MxDimensionArrowOrientation2[MxDimensionArrowOrientation2["DimensionArrowOrientation_DAO_Internal"] = 0] = "DimensionArrowOrientation_DAO_Internal";
    MxDimensionArrowOrientation2[MxDimensionArrowOrientation2["DimensionArrowOrientation_DAO_External"] = 1] = "DimensionArrowOrientation_DAO_External";
    MxDimensionArrowOrientation2[MxDimensionArrowOrientation2["DimensionArrowOrientation_DAO_Fit"] = 2] = "DimensionArrowOrientation_DAO_Fit";
  })(MdGe2.MxDimensionArrowOrientation || (MdGe2.MxDimensionArrowOrientation = {}));
  (function (MxDimensionTextVerticalPosition2) {
    MxDimensionTextVerticalPosition2[MxDimensionTextVerticalPosition2["DimensionTextVerticalPosition_DTVP_Above"] = 0] = "DimensionTextVerticalPosition_DTVP_Above";
    MxDimensionTextVerticalPosition2[MxDimensionTextVerticalPosition2["DimensionTextVerticalPosition_DTVP_Below"] = 1] = "DimensionTextVerticalPosition_DTVP_Below";
    MxDimensionTextVerticalPosition2[MxDimensionTextVerticalPosition2["DimensionTextVerticalPosition_DTVP_Center"] = 2] = "DimensionTextVerticalPosition_DTVP_Center";
  })(MdGe2.MxDimensionTextVerticalPosition || (MdGe2.MxDimensionTextVerticalPosition = {}));
  (function (MxDimensionTextHorizontalPosition2) {
    MxDimensionTextHorizontalPosition2[MxDimensionTextHorizontalPosition2["DimensionTextHorizontalPosition_DTHP_Left"] = 0] = "DimensionTextHorizontalPosition_DTHP_Left";
    MxDimensionTextHorizontalPosition2[MxDimensionTextHorizontalPosition2["DimensionTextHorizontalPosition_DTHP_Right"] = 1] = "DimensionTextHorizontalPosition_DTHP_Right";
    MxDimensionTextHorizontalPosition2[MxDimensionTextHorizontalPosition2["DimensionTextHorizontalPosition_DTHP_Center"] = 2] = "DimensionTextHorizontalPosition_DTHP_Center";
    MxDimensionTextHorizontalPosition2[MxDimensionTextHorizontalPosition2["DimensionTextHorizontalPosition_DTHP_Fit"] = 3] = "DimensionTextHorizontalPosition_DTHP_Fit";
  })(MdGe2.MxDimensionTextHorizontalPosition || (MdGe2.MxDimensionTextHorizontalPosition = {}));
  (function (MxKindOfDimension2) {
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_NONE"] = 0] = "KindOfDimension_KOD_NONE";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_LENGTH"] = 1] = "KindOfDimension_KOD_LENGTH";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_PLANEANGLE"] = 2] = "KindOfDimension_KOD_PLANEANGLE";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_SOLIDANGLE"] = 3] = "KindOfDimension_KOD_SOLIDANGLE";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_AREA"] = 4] = "KindOfDimension_KOD_AREA";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_VOLUME"] = 5] = "KindOfDimension_KOD_VOLUME";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_MASS"] = 6] = "KindOfDimension_KOD_MASS";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_TIME"] = 7] = "KindOfDimension_KOD_TIME";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_RADIUS"] = 8] = "KindOfDimension_KOD_RADIUS";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_DIAMETER"] = 9] = "KindOfDimension_KOD_DIAMETER";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_CHAMF2D"] = 10] = "KindOfDimension_KOD_CHAMF2D";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_CHAMF3D"] = 11] = "KindOfDimension_KOD_CHAMF3D";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_OFFSET"] = 12] = "KindOfDimension_KOD_OFFSET";
    MxKindOfDimension2[MxKindOfDimension2["KindOfDimension_KOD_ELLIPSERADIUS"] = 13] = "KindOfDimension_KOD_ELLIPSERADIUS";
  })(MdGe2.MxKindOfDimension || (MdGe2.MxKindOfDimension = {}));
  (function (MxDocColorType2) {
    MxDocColorType2[MxDocColorType2["DocColor_ColorGen"] = 0] = "DocColor_ColorGen";
    MxDocColorType2[MxDocColorType2["DocColor_ColorSurf"] = 1] = "DocColor_ColorSurf";
    MxDocColorType2[MxDocColorType2["DocColor_ColorCurv"] = 2] = "DocColor_ColorCurv";
  })(MdGe2.MxDocColorType || (MdGe2.MxDocColorType = {}));
  (function (MxKindOfInteractive2) {
    MxKindOfInteractive2[MxKindOfInteractive2["KindOfInteractive_None"] = 0] = "KindOfInteractive_None";
    MxKindOfInteractive2[MxKindOfInteractive2["KindOfInteractive_Datum"] = 1] = "KindOfInteractive_Datum";
    MxKindOfInteractive2[MxKindOfInteractive2["KindOfInteractive_Shape"] = 2] = "KindOfInteractive_Shape";
    MxKindOfInteractive2[MxKindOfInteractive2["KindOfInteractive_Object"] = 3] = "KindOfInteractive_Object";
    MxKindOfInteractive2[MxKindOfInteractive2["KindOfInteractive_Relation"] = 4] = "KindOfInteractive_Relation";
    MxKindOfInteractive2[MxKindOfInteractive2["KindOfInteractive_Dimension"] = 5] = "KindOfInteractive_Dimension";
    MxKindOfInteractive2[MxKindOfInteractive2["KindOfInteractive_LightSource"] = 6] = "KindOfInteractive_LightSource";
    MxKindOfInteractive2[MxKindOfInteractive2["KOI_None"] = 0 /* KindOfInteractive_None */] = "KOI_None";
    MxKindOfInteractive2[MxKindOfInteractive2["KOI_Datum"] = 1 /* KindOfInteractive_Datum */] = "KOI_Datum";
    MxKindOfInteractive2[MxKindOfInteractive2["KOI_Shape"] = 2 /* KindOfInteractive_Shape */] = "KOI_Shape";
    MxKindOfInteractive2[MxKindOfInteractive2["KOI_Object"] = 3 /* KindOfInteractive_Object */] = "KOI_Object";
    MxKindOfInteractive2[MxKindOfInteractive2["KOI_Relation"] = 4 /* KindOfInteractive_Relation */] = "KOI_Relation";
    MxKindOfInteractive2[MxKindOfInteractive2["KOI_Dimension"] = 5 /* KindOfInteractive_Dimension */] = "KOI_Dimension";
  })(MdGe2.MxKindOfInteractive || (MdGe2.MxKindOfInteractive = {}));
  (function (MxPrs3dTypeOfHLR2) {
    MxPrs3dTypeOfHLR2[MxPrs3dTypeOfHLR2["TOH_NotSet"] = 0] = "TOH_NotSet";
    MxPrs3dTypeOfHLR2[MxPrs3dTypeOfHLR2["TOH_PolyAlgo"] = 1] = "TOH_PolyAlgo";
    MxPrs3dTypeOfHLR2[MxPrs3dTypeOfHLR2["TOH_Algo"] = 2] = "TOH_Algo";
  })(MdGe2.MxPrs3dTypeOfHLR || (MdGe2.MxPrs3dTypeOfHLR = {}));
  (function (MxDisplayStatus2) {
    MxDisplayStatus2[MxDisplayStatus2["DisplayStatus_Displayed"] = 0] = "DisplayStatus_Displayed";
    MxDisplayStatus2[MxDisplayStatus2["DisplayStatus_Erased"] = 1] = "DisplayStatus_Erased";
    MxDisplayStatus2[MxDisplayStatus2["DisplayStatus_None"] = 2] = "DisplayStatus_None";
    MxDisplayStatus2[MxDisplayStatus2["DS_Displayed"] = 0 /* DisplayStatus_Displayed */] = "DS_Displayed";
    MxDisplayStatus2[MxDisplayStatus2["DS_Erased"] = 1 /* DisplayStatus_Erased */] = "DS_Erased";
    MxDisplayStatus2[MxDisplayStatus2["DS_None"] = 2 /* DisplayStatus_None */] = "DS_None";
  })(MdGe2.MxDisplayStatus || (MdGe2.MxDisplayStatus = {}));
  (function (MxGlobalDisplayMode2) {
    MxGlobalDisplayMode2[MxGlobalDisplayMode2["DisplayMode_Wireframe"] = 0] = "DisplayMode_Wireframe";
    MxGlobalDisplayMode2[MxGlobalDisplayMode2["DisplayMode_HiddenLineRemoval"] = 1] = "DisplayMode_HiddenLineRemoval";
    MxGlobalDisplayMode2[MxGlobalDisplayMode2["DisplayMode_Shaded"] = 2] = "DisplayMode_Shaded";
    MxGlobalDisplayMode2[MxGlobalDisplayMode2["DisplayMode_ShadedWithFaceBoundary"] = 3] = "DisplayMode_ShadedWithFaceBoundary";
    MxGlobalDisplayMode2[MxGlobalDisplayMode2["DisplayMode_Transparency"] = 4] = "DisplayMode_Transparency";
  })(MdGe2.MxGlobalDisplayMode || (MdGe2.MxGlobalDisplayMode = {}));
  (function (MxGradientFillMethod2) {
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_None"] = 0] = "GradientFillMethod_None";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Horizontal"] = 1] = "GradientFillMethod_Horizontal";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Vertical"] = 2] = "GradientFillMethod_Vertical";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Diagonal1"] = 3] = "GradientFillMethod_Diagonal1";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Diagonal2"] = 4] = "GradientFillMethod_Diagonal2";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Corner1"] = 5] = "GradientFillMethod_Corner1";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Corner2"] = 6] = "GradientFillMethod_Corner2";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Corner3"] = 7] = "GradientFillMethod_Corner3";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Corner4"] = 8] = "GradientFillMethod_Corner4";
    MxGradientFillMethod2[MxGradientFillMethod2["GradientFillMethod_Elliptical"] = 9] = "GradientFillMethod_Elliptical";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_NONE"] = 0 /* GradientFillMethod_None */] = "GFM_NONE";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_HOR"] = 1 /* GradientFillMethod_Horizontal */] = "GFM_HOR";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_VER"] = 2 /* GradientFillMethod_Vertical */] = "GFM_VER";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_DIAG1"] = 3 /* GradientFillMethod_Diagonal1 */] = "GFM_DIAG1";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_DIAG2"] = 4 /* GradientFillMethod_Diagonal2 */] = "GFM_DIAG2";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_CORNER1"] = 5 /* GradientFillMethod_Corner1 */] = "GFM_CORNER1";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_CORNER2"] = 6 /* GradientFillMethod_Corner2 */] = "GFM_CORNER2";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_CORNER3"] = 7 /* GradientFillMethod_Corner3 */] = "GFM_CORNER3";
    MxGradientFillMethod2[MxGradientFillMethod2["GFM_CORNER4"] = 8 /* GradientFillMethod_Corner4 */] = "GFM_CORNER4";
  })(MdGe2.MxGradientFillMethod || (MdGe2.MxGradientFillMethod = {}));
  (function (MxFormat2) {
    MxFormat2[MxFormat2["Format_Unknown"] = 0] = "Format_Unknown";
    MxFormat2[MxFormat2["Format_Image"] = 1] = "Format_Image";
    MxFormat2[MxFormat2["Format_3DS"] = 2] = "Format_3DS";
    MxFormat2[MxFormat2["Format_3MF"] = 3] = "Format_3MF";
    MxFormat2[MxFormat2["Format_AMF"] = 4] = "Format_AMF";
    MxFormat2[MxFormat2["Format_COLLADA"] = 5] = "Format_COLLADA";
    MxFormat2[MxFormat2["Format_DXF"] = 6] = "Format_DXF";
    MxFormat2[MxFormat2["Format_FBX"] = 7] = "Format_FBX";
    MxFormat2[MxFormat2["Format_GLTF"] = 8] = "Format_GLTF";
    MxFormat2[MxFormat2["Format_IGES"] = 9] = "Format_IGES";
    MxFormat2[MxFormat2["Format_OBJ"] = 10] = "Format_OBJ";
    MxFormat2[MxFormat2["Format_OCCBREP"] = 11] = "Format_OCCBREP";
    MxFormat2[MxFormat2["Format_OFF"] = 12] = "Format_OFF";
    MxFormat2[MxFormat2["Format_PLY"] = 13] = "Format_PLY";
    MxFormat2[MxFormat2["Format_STEP"] = 14] = "Format_STEP";
    MxFormat2[MxFormat2["Format_STL"] = 15] = "Format_STL";
    MxFormat2[MxFormat2["Format_VRML"] = 16] = "Format_VRML";
    MxFormat2[MxFormat2["Format_X3D"] = 17] = "Format_X3D";
    MxFormat2[MxFormat2["Format_Blender"] = 18] = "Format_Blender";
  })(MdGe2.MxFormat || (MdGe2.MxFormat = {}));
  (function (MxQuantAspect2) {
    MxQuantAspect2[MxQuantAspect2["Quant_Length"] = 0] = "Quant_Length";
    MxQuantAspect2[MxQuantAspect2["Quant_Area"] = 1] = "Quant_Area";
    MxQuantAspect2[MxQuantAspect2["Quant_Volume"] = 2] = "Quant_Volume";
  })(MdGe2.MxQuantAspect || (MdGe2.MxQuantAspect = {}));
  (function (MxOrientation2) {
    MxOrientation2[MxOrientation2["Orientation_FORWARD"] = 0] = "Orientation_FORWARD";
    MxOrientation2[MxOrientation2["Orientation_REVERSED"] = 1] = "Orientation_REVERSED";
    MxOrientation2[MxOrientation2["Orientation_INTERNAL"] = 2] = "Orientation_INTERNAL";
    MxOrientation2[MxOrientation2["Orientation_EXTERNAL"] = 3] = "Orientation_EXTERNAL";
  })(MdGe2.MxOrientation || (MdGe2.MxOrientation = {}));
  (function (MxTransitionMode2) {
    MxTransitionMode2[MxTransitionMode2["Mx_Transformed"] = 0] = "Mx_Transformed";
    MxTransitionMode2[MxTransitionMode2["Mx_RightCorner"] = 1] = "Mx_RightCorner";
    MxTransitionMode2[MxTransitionMode2["Mx_RoundCorner"] = 2] = "Mx_RoundCorner";
  })(MdGe2.MxTransitionMode || (MdGe2.MxTransitionMode = {}));
})(MdGe || (MdGe = {}));

var loadWams = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(baseFileName, namespace, config) {
    var locateFile, jsPath;
    return regenerator.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          locateFile = config.locateFile;
          jsPath = locateFile(baseFileName + ".js");
          _context.next = 4;
          return loadScript(jsPath);
        case 4:
          _context.next = 6;
          return globalThis[namespace](config);
        case 6:
          return _context.abrupt("return", _context.sent);
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function loadWams(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

function createResizeObserver(callback) {
  if (typeof ResizeObserver === "function") {
    var resizeObserver = new ResizeObserver(callback);
    return resizeObserver;
  }
  return null;
}
function addResizeListener(element, callback) {
  var call = function call() {
    return requestAnimationFrame(callback);
  };
  var resizeObserver = createResizeObserver(call);
  if (resizeObserver) {
    resizeObserver.observe(element);
    return;
  }
  if (!!MutationObserver) {
    var observer = new MutationObserver(call);
    observer.observe(element, {
      attributes: true
    });
    return;
  }
}

function throttle(func, delay) {
  var timer = null;
  return function () {
    var _this = this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (!timer) {
      timer = setTimeout(function () {
        func.apply(_this, args);
        timer = null;
      }, delay);
    }
  };
}

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var MxApp3DType = /*#__PURE__*/function (_PubSub) {
  _inherits$1(MxApp3DType, _PubSub);
  var _super = _createSuper$2(MxApp3DType);
  function MxApp3DType() {
    var _this;
    _classCallCheck$1(this, MxApp3DType);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "imp", void 0);
    _defineProperty(_assertThisInitialized$1(_this), "cpp_app", void 0);
    _defineProperty(_assertThisInitialized$1(_this), "tool", void 0);
    _defineProperty(_assertThisInitialized$1(_this), "globalMethods", void 0);
    return _this;
  }
  _createClass$1(MxApp3DType, [{
    key: "init",
    value: function init(imp) {
      this.imp = imp;
      this.cpp_app = new imp.Mx3dApplication();
      this.tool = new imp.MdGeTopo();
      this.globalMethods = new imp.Mx3dClassMethods();
    }
  }, {
    key: "createView",
    value: function createView(theCanvasSelector) {
      return new Mx3dView(this.cpp_app.createView(theCanvasSelector));
    }
  }, {
    key: "getCurrentActiveView",
    value: function getCurrentActiveView() {
      return new Mx3dView(this.cpp_app.getCurrentActiveView());
    }
  }]);
  return MxApp3DType;
}(PubSub);
var MxApp3D = new MxApp3DType();
var MxCAD3DObject = /*#__PURE__*/function () {
  function MxCAD3DObject() {
    _classCallCheck$1(this, MxCAD3DObject);
    _defineProperty(this, "event", {});
    _defineProperty(this, "imp", void 0);
    _defineProperty(this, "canvas", null);
    _defineProperty(this, "ctx", null);
    _defineProperty(this, "updateCanvasSizeFun", null);
    this.updateCanvasSizeFun = null;
  }
  _createClass$1(MxCAD3DObject, [{
    key: "getDocument",
    value: function getDocument() {
      return new Mx3dDbDocument(this.imp.getDoc(), "from view");
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      var theUpdateView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.imp.removeAll(theUpdateView);
    }
  }, {
    key: "removeSelected",
    value: function removeSelected() {
      this.imp.removeSelected();
    }
  }, {
    key: "update",
    value: function update() {
      var isUpAllData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var isRemoveAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.imp.update(isUpAllData, isRemoveAll);
    }
  }, {
    key: "setProjectionType",
    value: function setProjectionType(theProjection) {
      this.imp.setProjectionType(theProjection);
    }
  }, {
    key: "showCenterTrihedron",
    value: function showCenterTrihedron(theToShow) {
      this.imp.showCenterTrihedron(theToShow);
    }
  }, {
    key: "fitAllObjects",
    value: function fitAllObjects(theAuto) {
      this.imp.fitAllObjects(theAuto);
    }
  }, {
    key: "enableXClipPlane",
    value: function enableXClipPlane(theToEnabled) {
      this.imp.enableXClipPlane(theToEnabled);
    }
  }, {
    key: "setXClipPlaneXPosition",
    value: function setXClipPlaneXPosition(thePosition) {
      this.imp.setXClipPlaneXPosition(thePosition);
    }
  }, {
    key: "setXClipPlaneReverse",
    value: function setXClipPlaneReverse() {
      this.imp.setXClipPlaneReverse();
    }
  }, {
    key: "enableYClipPlane",
    value: function enableYClipPlane(theToEnabled) {
      this.imp.enableYClipPlane(theToEnabled);
    }
  }, {
    key: "setYClipPlaneYPosition",
    value: function setYClipPlaneYPosition(thePosition) {
      this.imp.setYClipPlaneYPosition(thePosition);
    }
  }, {
    key: "setYClipPlaneReverse",
    value: function setYClipPlaneReverse() {
      this.imp.setYClipPlaneReverse();
    }
  }, {
    key: "enableZClipPlane",
    value: function enableZClipPlane(theToEnabled) {
      this.imp.enableZClipPlane(theToEnabled);
    }
  }, {
    key: "setZClipPlaneZPosition",
    value: function setZClipPlaneZPosition(thePosition) {
      this.imp.setZClipPlaneZPosition(thePosition);
    }
  }, {
    key: "setZClipPlaneReverse",
    value: function setZClipPlaneReverse() {
      this.imp.setZClipPlaneReverse();
    }
  }, {
    key: "enableCustomClipPlane",
    value: function enableCustomClipPlane(theToEnabled) {
      this.imp.enableCustomClipPlane(theToEnabled);
    }
  }, {
    key: "setCustomClipPlanePosition",
    value: function setCustomClipPlanePosition(thePosition) {
      this.imp.setCustomClipPlanePosition(thePosition);
    }
  }, {
    key: "setCustomClipPlaneReverse",
    value: function setCustomClipPlaneReverse() {
      this.imp.setCustomClipPlaneReverse();
    }
  }, {
    key: "setCustomClipPlaneDirection",
    value: function setCustomClipPlaneDirection(x, y, z) {
      this.imp.setCustomClipPlaneDirection(x, y, z);
    }
  }, {
    key: "displaySymbolText",
    value: function displaySymbolText(theSymbol) {
      this.imp.displaySymbolText(theSymbol.getImp());
    }
  }, {
    key: "displayDimension",
    value: function displayDimension(theDimension) {
      this.imp.displayDimension(theDimension.getImp());
    }
  }, {
    key: "addModelTexture",
    value: function addModelTexture(theFileName) {
      this.imp.addModelTexture(theFileName);
    }
  }, {
    key: "removeModelTexture",
    value: function removeModelTexture() {
      this.imp.removeModelTexture();
    }
  }, {
    key: "setGradientBgColor",
    value: function setGradientBgColor(theColor1, theColor2, theMethod) {
      this.imp.setGradientBgColor(theColor1.getImp(), theColor2.getImp(), theMethod);
    }
  }, {
    key: "setProj",
    value: function setProj(theOrientation, theIsYup) {
      this.imp.setProj(theOrientation, theIsYup);
    }
  }, {
    key: "setSelectedColor",
    value: function setSelectedColor(color) {
      this.imp.setSelectedColor(color.getImp());
    }
  }, {
    key: "setSelectedMaterial",
    value: function setSelectedMaterial(material) {
      this.imp.setSelectedMaterial(material.getImp());
    }
  }, {
    key: "setDisplayMode",
    value: function setDisplayMode(theMode) {
      this.imp.setDisplayMode(theMode);
    }
  }, {
    key: "enableDirLightSrc",
    value: function enableDirLightSrc(theToEnabled) {
      this.imp.enableDirLightSrc(theToEnabled);
    }
  }, {
    key: "setCubemapBackground",
    value: function setCubemapBackground(theRight, theLeft, theTop, theBottom, theFront, theBack) {
      this.imp.setCubemapBackground(theRight, theLeft, theTop, theBottom, theFront, theBack);
    }
  }, {
    key: "setManipulatorEnabled",
    value: function setManipulatorEnabled(isEnabled) {
      this.imp.setManipulatorEnabled(isEnabled);
    }
  }, {
    key: "getImp",
    value: function getImp() {
      return this.imp;
    }
  }, {
    key: "getCtx",
    value: function getCtx() {
      return this.ctx;
    }
  }, {
    key: "updateCanvasSize",
    value: function updateCanvasSize() {
      if (this.updateCanvasSizeFun) {
        this.updateCanvasSizeFun();
      }
    }
  }, {
    key: "init",
    value: function init(imp) {
      this.imp = imp;
    }
  }, {
    key: "on",
    value: function on(name, fun) {
      if (this.event[name]) {
        if (this.event[name] instanceof Array) {
          if (!this.event[name].includes(fun)) {
            this.event[name].push(fun);
          }
        } else {
          var bakFun = this.event[name];
          if (bakFun == fun) return;
          this.event[name] = [];
          this.event[name].push(bakFun);
          this.event[name].push(fun);
        }
      } else {
        this.event[name] = fun;
      }
    }
  }, {
    key: "off",
    value: function off(name, fun) {
      if (!this.event[name]) return;
      if (!fun) {
        this.event[name] = [];
      } else {
        if (this.event[name] instanceof Array) {
          var index = this.event[name].indexOf(fun);
          if (index < 0) return;
          this.event[name].splice(index, 1);
        } else {
          if (this.event[name] === fun) {
            this.event[name] = [];
          }
        }
      }
    }
  }, {
    key: "callEvent",
    value: function callEvent(sEventName, param) {
      try {
        var calls = this.event[sEventName];
        if (!calls) return false;
        if (calls instanceof Array) {
          var ret = false;
          calls.forEach(function (val) {
            ret = val(param);
          });
          return ret;
        } else {
          return calls(param);
        }
      } catch (error) {
        console.log(error);
        throw error;
      }
    }
  }, {
    key: "create",
    value: function create(config) {
      var _this2 = this;
      var resize = function resize() {
        if (_this2.canvas) {
          var width = _this2.canvas.parentElement ? _this2.canvas.parentElement.clientWidth : window.innerWidth;
          var height = _this2.canvas.parentElement ? _this2.canvas.parentElement.clientHeight : window.innerHeight;
          var aSizeX = Math.min(width, window.screen.availWidth);
          var aSizeY = Math.min(height, window.screen.availHeight);
          aSizeX = Math.max(minWidth, aSizeX);
          aSizeY = Math.max(minHeight, aSizeY);
          _this2.canvas.style.width = aSizeX + 1 + "px";
          _this2.canvas.style.height = aSizeY + "px";
          var aDevicePixelRatio = window.devicePixelRatio || 1;
          _this2.canvas.width = aSizeX * aDevicePixelRatio;
          _this2.canvas.height = aSizeY * aDevicePixelRatio;
          window.dispatchEvent(new Event("resize"));
        }
      };
      var _updateCanvasSize = throttle(resize, 50);
      var canvasParam = config.canvas,
        _config$minWidth = config.minWidth,
        minWidth = _config$minWidth === void 0 ? 300 : _config$minWidth,
        _config$minHeight = config.minHeight,
        minHeight = _config$minHeight === void 0 ? 300 : _config$minHeight,
        _config$updateCanvasS = config.updateCanvasSize,
        updateCanvasSize = _config$updateCanvasS === void 0 ? _updateCanvasSize : _config$updateCanvasS;
      var isInit = false;
      var init = function init() {
        if (isInit) return;
        isInit = true;
        var isCssSelect = typeof canvasParam === "string";
        var canvas = isCssSelect ? document.querySelectorAll(canvasParam)[0] : canvasParam;
        if (!canvas) {
          canvas = document.createElement("canvas");
          if (isCssSelect) {
            if (canvasParam.startsWith(".")) {
              canvas.classList.add((canvasParam + "").replace(".", ""));
            }
            if (canvasParam.startsWith("#")) {
              canvas.id = (canvasParam + "").replace("#", "");
            }
          }
          var box = document.createElement("div");
          box.style.width = "100%";
          box.style.height = "".concat(Math.max(document.body.clientHeight, minHeight), "px");
          box.appendChild(canvas);
          document.body.appendChild(box);
        }
        var aGlCtx = canvas.getContext("webgl2", {
          alpha: false,
          depth: true,
          antialias: false,
          preserveDrawingBuffer: true
        });
        if (aGlCtx == null) {
          aGlCtx = canvas.getContext("webgl", {
            alpha: false,
            depth: true,
            antialias: false,
            preserveDrawingBuffer: true
          });
        }
        _this2.canvas = canvas;
        _this2.ctx = aGlCtx;
        if (_this2.canvas instanceof HTMLCanvasElement) {
          var el = _this2.canvas.parentElement || document.body;
          addResizeListener(el, updateCanvasSize);
        } else {
          console.error("createMxDraw3d canvas \\u53C2\\u6570\\u4E0D\\u6B63\\u786E \\u65E0\\u6CD5\\u83B7\\u53D6\\u5230canvas\\u5143\\u7D20");
        }
        resize();
        var on_init = function on_init() {
          _this2.updateCanvasSizeFun = updateCanvasSize;
          _this2.init(MxApp3D.cpp_app.createView(canvasParam));
          _this2.callEvent("init");
        };
        if (!config.locateFile) config.locateFile = get3DFileURL;
        config.canvas = canvas;
        config.on = MxApp3D.on.bind(MxApp3D);
        config.emit = MxApp3D.emit.bind(MxApp3D);
        config.off = MxApp3D.off.bind(MxApp3D);
        loadWams("mxdraw3d_min", "mxdraw3d", Object.assign({}, config)).then(function (module) {
          MxApp3D.init(module);
          on_init();
        });
      };
      window.onload = function () {
        init();
      };
      if (document.readyState === "complete") {
        init();
      } else {
        document.addEventListener("DOMContentLoaded", init);
      }
    }
  }]);
  return MxCAD3DObject;
}();
var _mxFinalizationRegistry = new FinalizationRegistry(function (key) {
  MxApp3D.tool.DestroyObject(key);
});
var _mxFinalizationRegistry_token = {};
function isUniPoint(p) {
  return p instanceof Mx3dGePoint || p instanceof Array && typeof p[0] === "number";
}
function isUniDir(p) {
  return p instanceof Mx3dGeDir || p instanceof Array && typeof p[0] === "number";
}
function isUniVec(p) {
  return p instanceof Mx3dGeVec || p instanceof Array && typeof p[0] === "number";
}
function uniToPoint(p) {
  if (p instanceof Mx3dGePoint) {
    return p;
  } else {
    return new Mx3dGePoint(p[0], p[1], p[2]);
  }
}
function uniToDir(p) {
  if (p instanceof Mx3dGeDir) {
    return p;
  } else {
    return new Mx3dGeDir(p[0], p[1], p[2]);
  }
}
function uniToVec(p) {
  if (p instanceof Mx3dGeVec) {
    return p;
  } else {
    return new Mx3dGeVec(p[0], p[1], p[2]);
  }
}
function arrShapeToShapeSequence(arr) {
  var ret = new Mx3dShapeObjectSequence();
  arr.forEach(function (shape) {
    return ret.Append(shape);
  });
  return ret;
}
var Mx3dApplication = /*#__PURE__*/function () {
  function Mx3dApplication() {
    _classCallCheck$1(this, Mx3dApplication);
    _defineProperty(this, "imp", void 0);
    this.imp = MxApp3D.cpp_app;
  }
  _createClass$1(Mx3dApplication, [{
    key: "createView",
    value: function createView(theCanvasSelector) {
      return new Mx3dView(this.imp.createView(theCanvasSelector));
    }
  }, {
    key: "getCurrentActiveView",
    value: function getCurrentActiveView() {
      return new Mx3dView(this.imp.getCurrentActiveView());
    }
  }]);
  return Mx3dApplication;
}();
var Mx3dBaseObject = /*#__PURE__*/function () {
  function Mx3dBaseObject(imp) {
    _classCallCheck$1(this, Mx3dBaseObject);
    _defineProperty(this, "imp", 0);
    this.imp = imp;
    if (this.imp) {
      _mxFinalizationRegistry.register(this, imp, _mxFinalizationRegistry_token);
    }
  }
  _createClass$1(Mx3dBaseObject, [{
    key: "getImp",
    value: function getImp() {
      return this.imp;
    }
  }, {
    key: "initTempObject",
    value: function initTempObject(imp) {
      this.imp = imp;
    }
  }]);
  return Mx3dBaseObject;
}();
var Mx3dDimObject = /*#__PURE__*/function (_Mx3dBaseObject) {
  _inherits$1(Mx3dDimObject, _Mx3dBaseObject);
  var _super2 = _createSuper$2(Mx3dDimObject);
  function Mx3dDimObject(p) {
    _classCallCheck$1(this, Mx3dDimObject);
    return _super2.call(this, p);
  }
  return _createClass$1(Mx3dDimObject);
}(Mx3dBaseObject);
var Mx3dSymbolObject = /*#__PURE__*/function (_Mx3dBaseObject2) {
  _inherits$1(Mx3dSymbolObject, _Mx3dBaseObject2);
  var _super3 = _createSuper$2(Mx3dSymbolObject);
  function Mx3dSymbolObject(p) {
    _classCallCheck$1(this, Mx3dSymbolObject);
    return _super3.call(this, p);
  }
  return _createClass$1(Mx3dSymbolObject);
}(Mx3dBaseObject);
var Mx3dAlgoObject = /*#__PURE__*/function (_Mx3dBaseObject3) {
  _inherits$1(Mx3dAlgoObject, _Mx3dBaseObject3);
  var _super4 = _createSuper$2(Mx3dAlgoObject);
  function Mx3dAlgoObject(p) {
    _classCallCheck$1(this, Mx3dAlgoObject);
    return _super4.call(this, p);
  }
  return _createClass$1(Mx3dAlgoObject);
}(Mx3dBaseObject);
var Mx3dAspectObject = /*#__PURE__*/function (_Mx3dBaseObject4) {
  _inherits$1(Mx3dAspectObject, _Mx3dBaseObject4);
  var _super5 = _createSuper$2(Mx3dAspectObject);
  function Mx3dAspectObject(p) {
    _classCallCheck$1(this, Mx3dAspectObject);
    return _super5.call(this, p);
  }
  return _createClass$1(Mx3dAspectObject);
}(Mx3dBaseObject);
var Mx3dGeObject = /*#__PURE__*/function (_Mx3dBaseObject5) {
  _inherits$1(Mx3dGeObject, _Mx3dBaseObject5);
  var _super6 = _createSuper$2(Mx3dGeObject);
  function Mx3dGeObject(p) {
    _classCallCheck$1(this, Mx3dGeObject);
    return _super6.call(this, p);
  }
  return _createClass$1(Mx3dGeObject);
}(Mx3dBaseObject);
var Mx3dGeCurve = /*#__PURE__*/function (_Mx3dGeObject) {
  _inherits$1(Mx3dGeCurve, _Mx3dGeObject);
  var _super7 = _createSuper$2(Mx3dGeCurve);
  function Mx3dGeCurve(p) {
    _classCallCheck$1(this, Mx3dGeCurve);
    return _super7.call(this, p);
  }
  return _createClass$1(Mx3dGeCurve);
}(Mx3dGeObject);
var Mx3dGeConic = /*#__PURE__*/function (_Mx3dGeCurve) {
  _inherits$1(Mx3dGeConic, _Mx3dGeCurve);
  var _super8 = _createSuper$2(Mx3dGeConic);
  function Mx3dGeConic(p) {
    _classCallCheck$1(this, Mx3dGeConic);
    return _super8.call(this, p);
  }
  return _createClass$1(Mx3dGeConic);
}(Mx3dGeCurve);
var Mx3dGePoint = /*#__PURE__*/function (_Mx3dGeObject2) {
  _inherits$1(Mx3dGePoint, _Mx3dGeObject2);
  var _super9 = _createSuper$2(Mx3dGePoint);
  function Mx3dGePoint(p1, p2, p3) {
    var _this3;
    _classCallCheck$1(this, Mx3dGePoint);
    if (arguments.length === 0) {
      _this3 = _super9.call(this);
      _this3.initTempObject(new MxApp3D.imp.Mx3dGePoint());
    } else if (p1 instanceof Array && typeof p1[0] === "number") {
      _this3 = _super9.call(this);
      _this3.initTempObject(new MxApp3D.imp.Mx3dGePoint(p1[0], p1[1], p1[2]));
    } else if (typeof p1 === "number" && typeof p2 === "number" && typeof p3 === "number") {
      _this3 = _super9.call(this);
      _this3.initTempObject(new MxApp3D.imp.Mx3dGePoint(p1, p2, p3));
    } else if (p1 instanceof Object && arguments.length === 1) {
      _this3 = _super9.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this3);
  }
  _createClass$1(Mx3dGePoint, [{
    key: "X",
    value: function X() {
      return this.imp.X();
    }
  }, {
    key: "Y",
    value: function Y() {
      return this.imp.Y();
    }
  }, {
    key: "Z",
    value: function Z() {
      return this.imp.Z();
    }
  }, {
    key: "setX",
    value: function setX(theX) {
      this.imp.setX(theX);
    }
  }, {
    key: "setY",
    value: function setY(theY) {
      this.imp.setY(theY);
    }
  }, {
    key: "setZ",
    value: function setZ(theZ) {
      this.imp.setZ(theZ);
    }
  }, {
    key: "setXYZ",
    value: function setXYZ(theX, theY, theZ) {
      this.imp.setX(theX);
      this.imp.setY(theY);
      this.imp.setZ(theZ);
    }
  }, {
    key: "Vertex",
    value: function Vertex() {
      return new Mx3dShapeVertex(this.imp.Vertex());
    }
  }]);
  return Mx3dGePoint;
}(Mx3dGeObject);
var Mx3dGeTrsf = /*#__PURE__*/function (_Mx3dGeObject3) {
  _inherits$1(Mx3dGeTrsf, _Mx3dGeObject3);
  var _super10 = _createSuper$2(Mx3dGeTrsf);
  function Mx3dGeTrsf(p) {
    var _this4;
    _classCallCheck$1(this, Mx3dGeTrsf);
    if (p) {
      _this4 = _super10.call(this, p);
    } else {
      _this4 = _super10.call(this);
      _this4.initTempObject(new MxApp3D.imp.Mx3dGeTrsf());
    }
    return _possibleConstructorReturn$1(_this4);
  }
  _createClass$1(Mx3dGeTrsf, [{
    key: "SetMirrorByPoint",
    value: function SetMirrorByPoint(point) {
      point = uniToPoint(point);
      this.imp.SetMirrorByPoint(point.getImp());
    }
  }, {
    key: "SetMirrorByAxis",
    value: function SetMirrorByAxis(axis) {
      this.imp.SetMirrorByAxis(axis.getImp());
    }
  }, {
    key: "SetMirrorByCSYSR",
    value: function SetMirrorByCSYSR(csysr) {
      this.imp.SetMirrorByCSYSR(csysr.getImp());
    }
  }, {
    key: "SetRotation",
    value: function SetRotation(axis, ang) {
      this.imp.SetRotation(axis.getImp(), ang);
    }
  }, {
    key: "SetScale",
    value: function SetScale(point, s) {
      point = uniToPoint(point);
      this.imp.SetScale(point.getImp(), s);
    }
  }, {
    key: "SetTranslationByVec",
    value: function SetTranslationByVec(vec) {
      vec = uniToVec(vec);
      this.imp.SetTranslationByVec(vec.getImp());
    }
  }, {
    key: "SetTranslationBy2Points",
    value: function SetTranslationBy2Points(point1, point2) {
      point1 = uniToPoint(point1);
      point2 = uniToPoint(point2);
      this.imp.SetTranslationBy2Points(point1.getImp(), point2.getImp());
    }
  }, {
    key: "SetTranslationPart",
    value: function SetTranslationPart(vec) {
      this.imp.SetTranslationPart(vec.getImp());
    }
  }, {
    key: "SetScaleFactor",
    value: function SetScaleFactor(s) {
      this.imp.SetScaleFactor(s);
    }
  }, {
    key: "SetValues",
    value: function SetValues(a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34) {
      this.imp.SetValues(a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34);
    }
  }, {
    key: "IsNegative",
    value: function IsNegative() {
      return this.imp.IsNegative();
    }
  }, {
    key: "ScaleFactor",
    value: function ScaleFactor() {
      return this.imp.ScaleFactor();
    }
  }, {
    key: "Value",
    value: function Value(row, col) {
      return this.imp.Value(row, col);
    }
  }, {
    key: "Invert",
    value: function Invert() {
      this.imp.Invert();
    }
  }, {
    key: "Inverted",
    value: function Inverted() {
      return new Mx3dGeTrsf(this.imp.Inverted());
    }
  }, {
    key: "Multiplied",
    value: function Multiplied(t) {
      return new Mx3dGeTrsf(this.imp.Multiplied(t.getImp()));
    }
  }, {
    key: "Multiply",
    value: function Multiply(t) {
      this.imp.Multiply(t.getImp());
    }
  }, {
    key: "PreMultiply",
    value: function PreMultiply(t) {
      this.imp.PreMultiply(t.getImp());
    }
  }, {
    key: "Power",
    value: function Power(n) {
      this.imp.Power(n);
    }
  }, {
    key: "Powered",
    value: function Powered(n) {
      return new Mx3dGeTrsf(this.imp.Powered(n));
    }
  }, {
    key: "Transforms",
    value: function Transforms(x, y, z) {
      this.imp.Transforms(x, y, z);
    }
  }]);
  return Mx3dGeTrsf;
}(Mx3dGeObject);
var Mx3dGeAxis = /*#__PURE__*/function (_Mx3dGeObject4) {
  _inherits$1(Mx3dGeAxis, _Mx3dGeObject4);
  var _super11 = _createSuper$2(Mx3dGeAxis);
  function Mx3dGeAxis(p1, p2) {
    var _this5;
    _classCallCheck$1(this, Mx3dGeAxis);
    if (arguments.length === 0) {
      _this5 = _super11.call(this);
      _this5.initTempObject(new MxApp3D.imp.Mx3dGeAxis());
    } else if (isUniPoint(p1) && isUniDir(p2)) {
      _this5 = _super11.call(this);
      p1 = uniToPoint(p1);
      p2 = uniToDir(p2);
      _this5.initTempObject(new MxApp3D.imp.Mx3dGeAxis(p1.getImp(), p2.getImp()));
    } else if (p1 instanceof Object && arguments.length === 1) {
      _this5 = _super11.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this5);
  }
  _createClass$1(Mx3dGeAxis, [{
    key: "Direction",
    value: function Direction() {
      return new Mx3dGeDir(this.imp.Direction());
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "SetDirection",
    value: function SetDirection(theDir) {
      this.imp.SetDirection(theDir.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theLoc) {
      theLoc = uniToPoint(theLoc);
      this.imp.SetLocation(theLoc.getImp());
    }
  }]);
  return Mx3dGeAxis;
}(Mx3dGeObject);
var Mx3dGeDir = /*#__PURE__*/function (_Mx3dGeObject5) {
  _inherits$1(Mx3dGeDir, _Mx3dGeObject5);
  var _super12 = _createSuper$2(Mx3dGeDir);
  function Mx3dGeDir(p1, p2, p3) {
    var _this6;
    _classCallCheck$1(this, Mx3dGeDir);
    if (arguments.length === 0) {
      _this6 = _super12.call(this);
      _this6.initTempObject(new MxApp3D.imp.Mx3dGeDir());
    } else if (typeof p1 === "number" && typeof p2 === "number" && typeof p3 === "number") {
      _this6 = _super12.call(this);
      _this6.initTempObject(new MxApp3D.imp.Mx3dGeDir(p1, p2, p3));
    } else if (p1 instanceof Object && arguments.length === 1) {
      _this6 = _super12.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this6);
  }
  _createClass$1(Mx3dGeDir, [{
    key: "X",
    value: function X() {
      return this.imp.X();
    }
  }, {
    key: "Y",
    value: function Y() {
      return this.imp.Y();
    }
  }, {
    key: "Z",
    value: function Z() {
      return this.imp.Z();
    }
  }, {
    key: "SetX",
    value: function SetX(theX) {
      this.imp.SetX(theX);
    }
  }, {
    key: "SetY",
    value: function SetY(theY) {
      this.imp.SetY(theY);
    }
  }, {
    key: "SetZ",
    value: function SetZ(theZ) {
      this.imp.SetZ(theZ);
    }
  }, {
    key: "SetXYZ",
    value: function SetXYZ(theXv, theYv, theZv) {
      this.imp.SetXYZ(theXv, theYv, theZv);
    }
  }, {
    key: "IsEqual",
    value: function IsEqual(theOther, theAngularTolerance) {
      return this.imp.IsEqual(theOther.getImp(), theAngularTolerance);
    }
  }, {
    key: "IsNormal",
    value: function IsNormal(theOther, theAngularTolerance) {
      return this.imp.IsNormal(theOther.getImp(), theAngularTolerance);
    }
  }, {
    key: "IsOpposite",
    value: function IsOpposite(theOther, theAngularTolerance) {
      return this.imp.IsOpposite(theOther.getImp(), theAngularTolerance);
    }
  }, {
    key: "IsParallel",
    value: function IsParallel(theOther, theAngularTolerance) {
      return this.imp.IsParallel(theOther.getImp(), theAngularTolerance);
    }
  }, {
    key: "Angle",
    value: function Angle(theOther) {
      return this.imp.Angle(theOther.getImp());
    }
  }, {
    key: "AngleWithRef",
    value: function AngleWithRef(theOther, theVRef) {
      return this.imp.AngleWithRef(theOther.getImp(), theVRef.getImp());
    }
  }, {
    key: "Cross",
    value: function Cross(theRight) {
      this.imp.Cross(theRight.getImp());
    }
  }, {
    key: "Crossed",
    value: function Crossed(theRight) {
      return new Mx3dGeDir(this.imp.Crossed(theRight.getImp()));
    }
  }, {
    key: "CrossCross",
    value: function CrossCross(theV1, theV2) {
      this.imp.CrossCross(theV1.getImp(), theV2.getImp());
    }
  }, {
    key: "CrossCrossed",
    value: function CrossCrossed(theV1, theV2) {
      return new Mx3dGeDir(this.imp.CrossCrossed(theV1.getImp(), theV2.getImp()));
    }
  }, {
    key: "Dot",
    value: function Dot(theOther) {
      return this.imp.Dot(theOther.getImp());
    }
  }, {
    key: "DotCross",
    value: function DotCross(theV1, theV2) {
      return this.imp.DotCross(theV1.getImp(), theV2.getImp());
    }
  }, {
    key: "Reverse",
    value: function Reverse() {
      this.imp.Reverse();
    }
  }, {
    key: "Reversed",
    value: function Reversed() {
      return new Mx3dGeDir(this.imp.Reversed());
    }
  }, {
    key: "MirrorByVec",
    value: function MirrorByVec(theV) {
      this.imp.MirrorByVec(theV.getImp());
    }
  }, {
    key: "MirroredByVec",
    value: function MirroredByVec(theV) {
      return new Mx3dGeDir(this.imp.MirroredByVec(theV.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(theA1) {
      this.imp.MirrorByAxis(theA1.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(theA1) {
      return new Mx3dGeDir(this.imp.MirroredByAxis(theA1.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(theA2) {
      this.imp.MirrorByCSYSR(theA2.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(theA2) {
      return new Mx3dGeDir(this.imp.MirroredByCSYSR(theA2.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(theA1, theAng) {
      this.imp.Rotate(theA1.getImp(), theAng);
    }
  }, {
    key: "Rotated",
    value: function Rotated(theA1, theAng) {
      return new Mx3dGeDir(this.imp.Rotated(theA1.getImp(), theAng));
    }
  }, {
    key: "Transform",
    value: function Transform(theT) {
      this.imp.Transform(theT.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(theT) {
      return new Mx3dGeDir(this.imp.Transformed(theT.getImp()));
    }
  }]);
  return Mx3dGeDir;
}(Mx3dGeObject);
var Mx3dGeEllipse = /*#__PURE__*/function (_Mx3dGeObject6) {
  _inherits$1(Mx3dGeEllipse, _Mx3dGeObject6);
  var _super13 = _createSuper$2(Mx3dGeEllipse);
  function Mx3dGeEllipse(theA2, theMajorRadius, theMinorRadius) {
    var _this7;
    _classCallCheck$1(this, Mx3dGeEllipse);
    if (!theA2 && !theMajorRadius && !theMinorRadius) {
      _this7 = _super13.call(this);
      _this7.initTempObject(new MxApp3D.imp.Mx3dGeEllipse());
    } else if (theA2 instanceof Mx3dGeCSYSR && typeof theMajorRadius === "number" && typeof theMinorRadius === "number") {
      _this7 = _super13.call(this);
      _this7.initTempObject(new MxApp3D.imp.Mx3dGeEllipse(theA2.getImp(), theMajorRadius, theMinorRadius));
    } else if (theA2 instanceof Object) {
      _this7 = _super13.call(this, theA2);
    }
    return _possibleConstructorReturn$1(_this7);
  }
  _createClass$1(Mx3dGeEllipse, [{
    key: "SetAxis",
    value: function SetAxis(theA1) {
      this.imp.SetAxis(theA1.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theP) {
      this.imp.SetLocation(theP.getImp());
    }
  }, {
    key: "SetMajorRadius",
    value: function SetMajorRadius(theMajorRadius) {
      this.imp.SetMajorRadius(theMajorRadius);
    }
  }, {
    key: "SetMinorRadius",
    value: function SetMinorRadius(theMinorRadius) {
      this.imp.SetMinorRadius(theMinorRadius);
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(theA2) {
      this.imp.SetPosition(theA2.getImp());
    }
  }, {
    key: "Area",
    value: function Area() {
      return this.imp.Area();
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "Directrix1",
    value: function Directrix1() {
      return new Mx3dGeAxis(this.imp.Directrix1());
    }
  }, {
    key: "Directrix2",
    value: function Directrix2() {
      return new Mx3dGeAxis(this.imp.Directrix2());
    }
  }, {
    key: "Eccentricity",
    value: function Eccentricity() {
      return this.imp.Eccentricity();
    }
  }, {
    key: "Focal",
    value: function Focal() {
      return this.imp.Focal();
    }
  }, {
    key: "Focus1",
    value: function Focus1() {
      return new Mx3dGePoint(this.imp.Focus1());
    }
  }, {
    key: "Focus2",
    value: function Focus2() {
      return new Mx3dGePoint(this.imp.Focus2());
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "MajorRadius",
    value: function MajorRadius() {
      return this.imp.MajorRadius();
    }
  }, {
    key: "MinorRadius",
    value: function MinorRadius() {
      return this.imp.MinorRadius();
    }
  }, {
    key: "Parameter",
    value: function Parameter() {
      return this.imp.Parameter();
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeCSYSR(this.imp.Position());
    }
  }, {
    key: "XAxis",
    value: function XAxis() {
      return new Mx3dGeAxis(this.imp.XAxis());
    }
  }, {
    key: "YAxis",
    value: function YAxis() {
      return new Mx3dGeAxis(this.imp.YAxis());
    }
  }, {
    key: "MirrorByPoint",
    value: function MirrorByPoint(theP) {
      this.imp.MirrorByPoint(theP.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(theP) {
      return new Mx3dGeEllipse(this.imp.MirroredByPoint(theP.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(theA1) {
      this.imp.MirrorByAxis(theA1.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(theA1) {
      return new Mx3dGeEllipse(this.imp.MirroredByAxis(theA1.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(theA2) {
      this.imp.MirrorByCSYSR(theA2.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(theA2) {
      return new Mx3dGeEllipse(this.imp.MirroredByCSYSR(theA2.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(theA1, theAng) {
      this.imp.Rotate(theA1.getImp(), theAng);
    }
  }, {
    key: "Rotated",
    value: function Rotated(theA1, theAng) {
      return new Mx3dGeEllipse(this.imp.Rotated(theA1.getImp(), theAng));
    }
  }, {
    key: "Scale",
    value: function Scale(theP, theS) {
      this.imp.Scale(theP.getImp(), theS);
    }
  }, {
    key: "Scaled",
    value: function Scaled(theP, theS) {
      return new Mx3dGeEllipse(this.imp.Scaled(theP.getImp(), theS));
    }
  }, {
    key: "Transform",
    value: function Transform(theT) {
      this.imp.Transform(theT.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(theT) {
      return new Mx3dGeEllipse(this.imp.Transformed(theT.getImp()));
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(theV) {
      this.imp.TranslateByVec(theV.getImp());
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(theV) {
      return new Mx3dGeEllipse(this.imp.TranslatedByVec(theV.getImp()));
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(theP1, theP2) {
      this.imp.TranslateBy2Points(theP1.getImp(), theP2.getImp());
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(theP1, theP2) {
      return new Mx3dGeEllipse(this.imp.TranslatedBy2Points(theP1.getImp(), theP2.getImp()));
    }
  }]);
  return Mx3dGeEllipse;
}(Mx3dGeObject);
var Mx3dGeHyperbola = /*#__PURE__*/function (_Mx3dGeObject7) {
  _inherits$1(Mx3dGeHyperbola, _Mx3dGeObject7);
  var _super14 = _createSuper$2(Mx3dGeHyperbola);
  function Mx3dGeHyperbola(theA2, theMajorRadius, theMinorRadius) {
    var _this8;
    _classCallCheck$1(this, Mx3dGeHyperbola);
    if (!theA2 && !theMajorRadius && !theMinorRadius) {
      _this8 = _super14.call(this);
      _this8.initTempObject(new MxApp3D.imp.Mx3dGeHyperbola());
    } else if (theA2 instanceof Mx3dGeCSYSR && typeof theMajorRadius === "number" && typeof theMinorRadius === "number") {
      _this8 = _super14.call(this);
      _this8.initTempObject(new MxApp3D.imp.Mx3dGeHyperbola(theA2.getImp(), theMajorRadius, theMinorRadius));
    } else if (theA2 instanceof Object) {
      _this8 = _super14.call(this, theA2);
    }
    return _possibleConstructorReturn$1(_this8);
  }
  _createClass$1(Mx3dGeHyperbola, [{
    key: "SetAxis",
    value: function SetAxis(theA1) {
      this.imp.SetAxis(theA1.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theP) {
      this.imp.SetLocation(theP.getImp());
    }
  }, {
    key: "SetMajorRadius",
    value: function SetMajorRadius(theMajorRadius) {
      this.imp.SetMajorRadius(theMajorRadius);
    }
  }, {
    key: "SetMinorRadius",
    value: function SetMinorRadius(theMinorRadius) {
      this.imp.SetMinorRadius(theMinorRadius);
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(theA2) {
      this.imp.SetPosition(theA2.getImp());
    }
  }, {
    key: "Asymptote1",
    value: function Asymptote1() {
      return new Mx3dGeAxis(this.imp.Asymptote1());
    }
  }, {
    key: "Asymptote2",
    value: function Asymptote2() {
      return new Mx3dGeAxis(this.imp.Asymptote2());
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "ConjugateBranch1",
    value: function ConjugateBranch1() {
      return new Mx3dGeHyperbola(this.imp.ConjugateBranch1());
    }
  }, {
    key: "ConjugateBranch2",
    value: function ConjugateBranch2() {
      return new Mx3dGeHyperbola(this.imp.ConjugateBranch2());
    }
  }, {
    key: "Directrix1",
    value: function Directrix1() {
      return new Mx3dGeAxis(this.imp.Directrix1());
    }
  }, {
    key: "Directrix2",
    value: function Directrix2() {
      return new Mx3dGeAxis(this.imp.Directrix2());
    }
  }, {
    key: "Eccentricity",
    value: function Eccentricity() {
      return this.imp.Eccentricity();
    }
  }, {
    key: "Focal",
    value: function Focal() {
      return this.imp.Focal();
    }
  }, {
    key: "Focus1",
    value: function Focus1() {
      return new Mx3dGePoint(this.imp.Focus1());
    }
  }, {
    key: "Focus2",
    value: function Focus2() {
      return new Mx3dGePoint(this.imp.Focus2());
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "MajorRadius",
    value: function MajorRadius() {
      return this.imp.MajorRadius();
    }
  }, {
    key: "MinorRadius",
    value: function MinorRadius() {
      return this.imp.MinorRadius();
    }
  }, {
    key: "OtherBranch",
    value: function OtherBranch() {
      return new Mx3dGeHyperbola(this.imp.OtherBranch());
    }
  }, {
    key: "Parameter",
    value: function Parameter() {
      return this.imp.Parameter();
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeCSYSR(this.imp.Position());
    }
  }, {
    key: "XAxis",
    value: function XAxis() {
      return new Mx3dGeAxis(this.imp.XAxis());
    }
  }, {
    key: "YAxis",
    value: function YAxis() {
      return new Mx3dGeAxis(this.imp.YAxis());
    }
  }, {
    key: "MirrorByPoint",
    value: function MirrorByPoint(theP) {
      this.imp.MirrorByPoint(theP.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(theP) {
      return new Mx3dGeHyperbola(this.imp.MirroredByPoint(theP.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(theA1) {
      this.imp.MirrorByAxis(theA1.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(theA1) {
      return new Mx3dGeHyperbola(this.imp.MirroredByAxis(theA1.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(theA2) {
      this.imp.MirrorByCSYSR(theA2.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(theA2) {
      return new Mx3dGeHyperbola(this.imp.MirroredByCSYSR(theA2.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(theA1, theAng) {
      this.imp.Rotate(theA1.getImp(), theAng);
    }
  }, {
    key: "Rotated",
    value: function Rotated(theA1, theAng) {
      return new Mx3dGeHyperbola(this.imp.Rotated(theA1.getImp(), theAng));
    }
  }, {
    key: "Scale",
    value: function Scale(theP, theS) {
      this.imp.Scale(theP.getImp(), theS);
    }
  }, {
    key: "Scaled",
    value: function Scaled(theP, theS) {
      return new Mx3dGeHyperbola(this.imp.Scaled(theP.getImp(), theS));
    }
  }, {
    key: "Transform",
    value: function Transform(theT) {
      this.imp.Transform(theT.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(theT) {
      return new Mx3dGeHyperbola(this.imp.Transformed(theT.getImp()));
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(theV) {
      this.imp.TranslateByVec(theV.getImp());
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(theV) {
      return new Mx3dGeHyperbola(this.imp.TranslatedByVec(theV.getImp()));
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(theP1, theP2) {
      this.imp.TranslateBy2Points(theP1.getImp(), theP2.getImp());
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(theP1, theP2) {
      return new Mx3dGeHyperbola(this.imp.TranslatedBy2Points(theP1.getImp(), theP2.getImp()));
    }
  }]);
  return Mx3dGeHyperbola;
}(Mx3dGeObject);
var Mx3dGeVec = /*#__PURE__*/function (_Mx3dGeObject8) {
  _inherits$1(Mx3dGeVec, _Mx3dGeObject8);
  var _super15 = _createSuper$2(Mx3dGeVec);
  function Mx3dGeVec(p1, p2, p3) {
    var _this9;
    _classCallCheck$1(this, Mx3dGeVec);
    if (arguments.length == 0) {
      _this9 = _super15.call(this);
      _this9.initTempObject(new MxApp3D.imp.Mx3dGeVec());
    } else if (p1 instanceof Mx3dGePoint && p2 instanceof Mx3dGePoint && arguments.length == 2) {
      _this9 = _super15.call(this);
      _this9.initTempObject(new MxApp3D.imp.Mx3dGeVec(p1.getImp(), p2.getImp()));
    } else if (typeof p1 == "number" && typeof p2 == "number" && arguments.length == 3) {
      _this9 = _super15.call(this);
      _this9.initTempObject(new MxApp3D.imp.Mx3dGeVec(p1, p2, p3));
    } else if (p1 instanceof Object && arguments.length == 1) {
      _this9 = _super15.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this9);
  }
  _createClass$1(Mx3dGeVec, [{
    key: "X",
    value: function X() {
      return this.imp.X();
    }
  }, {
    key: "Y",
    value: function Y() {
      return this.imp.Y();
    }
  }, {
    key: "Z",
    value: function Z() {
      return this.imp.Z();
    }
  }, {
    key: "SetX",
    value: function SetX(x) {
      this.imp.SetX(x);
    }
  }, {
    key: "SetY",
    value: function SetY(y) {
      this.imp.SetY(y);
    }
  }, {
    key: "SetZ",
    value: function SetZ(z) {
      this.imp.SetZ(z);
    }
  }, {
    key: "SetXYZ",
    value: function SetXYZ(x, y, z) {
      this.imp.SetXYZ(x, y, z);
    }
  }, {
    key: "IsEqual",
    value: function IsEqual(other, linearTolerance, angularTolerance) {
      return this.imp.IsEqual(other.getImp(), linearTolerance, angularTolerance);
    }
  }, {
    key: "IsNormal",
    value: function IsNormal(other, angularTolerance) {
      return this.imp.IsNormal(other.getImp(), angularTolerance);
    }
  }, {
    key: "IsOpposite",
    value: function IsOpposite(other, angularTolerance) {
      return this.imp.IsOpposite(other.getImp(), angularTolerance);
    }
  }, {
    key: "IsParallel",
    value: function IsParallel(other, angularTolerance) {
      return this.imp.IsParallel(other.getImp(), angularTolerance);
    }
  }, {
    key: "Angle",
    value: function Angle(other) {
      return this.imp.Angle(other.getImp());
    }
  }, {
    key: "AngleWithRef",
    value: function AngleWithRef(other, ref) {
      return this.imp.AngleWithRef(other.getImp(), ref.getImp());
    }
  }, {
    key: "Magnitude",
    value: function Magnitude() {
      return this.imp.Magnitude();
    }
  }, {
    key: "SquareMagnitude",
    value: function SquareMagnitude() {
      return this.imp.SquareMagnitude();
    }
  }, {
    key: "Add",
    value: function Add(other) {
      this.imp.Add(other.getImp());
    }
  }, {
    key: "Added",
    value: function Added(other) {
      return new Mx3dGeVec(this.imp.Added(other.getImp()));
    }
  }, {
    key: "Subtract",
    value: function Subtract(right) {
      this.imp.Subtract(right.getImp());
    }
  }, {
    key: "Subtracted",
    value: function Subtracted(right) {
      return new Mx3dGeVec(this.imp.Subtracted(right.getImp()));
    }
  }, {
    key: "Multiply",
    value: function Multiply(scalar) {
      this.imp.Multiply(scalar);
    }
  }, {
    key: "Multiplied",
    value: function Multiplied(scalar) {
      return new Mx3dGeVec(this.imp.Multiplied(scalar));
    }
  }, {
    key: "Divide",
    value: function Divide(scalar) {
      this.imp.Divide(scalar);
    }
  }, {
    key: "Divided",
    value: function Divided(scalar) {
      return new Mx3dGeVec(this.imp.Divided(scalar));
    }
  }, {
    key: "Cross",
    value: function Cross(right) {
      this.imp.Cross(right.getImp());
    }
  }, {
    key: "Crossed",
    value: function Crossed(right) {
      return new Mx3dGeVec(this.getImp().Crossed(right.getImp()));
    }
  }, {
    key: "CrossMagnitude",
    value: function CrossMagnitude(right) {
      return this.imp.CrossMagnitude(right.getImp());
    }
  }, {
    key: "CrossSquareMagnitude",
    value: function CrossSquareMagnitude(right) {
      return this.imp.CrossSquareMagnitude(right.getImp());
    }
  }, {
    key: "CrossCross",
    value: function CrossCross(v1, v2) {
      this.imp.CrossCross(v1.getImp(), v2.getImp());
    }
  }, {
    key: "CrossCrossed",
    value: function CrossCrossed(v1, v2) {
      return new Mx3dGeVec(this.imp.CrossCrossed(v1.getImp(), v2.getImp()));
    }
  }, {
    key: "Dot",
    value: function Dot(other) {
      return this.imp.Dot(other.getImp());
    }
  }, {
    key: "DotCross",
    value: function DotCross(v1, v2) {
      return this.imp.DotCross(v1.getImp(), v2.getImp());
    }
  }, {
    key: "Normalize",
    value: function Normalize() {
      this.imp.Normalize();
    }
  }, {
    key: "Normalized",
    value: function Normalized() {
      return new Mx3dGeVec(this.imp.Normalized());
    }
  }, {
    key: "Reverse",
    value: function Reverse() {
      this.imp.Reverse();
    }
  }, {
    key: "Reversed",
    value: function Reversed() {
      return new Mx3dGeVec(this.imp.Reversed());
    }
  }, {
    key: "SetLinearForm",
    value: function SetLinearForm(p1, p2, p3, p4, p5, p6, p7) {
      if (isUniVec(p1) && isUniVec(p2) && arguments.length == 2) {
        p1 = uniToVec(p1);
        p2 = uniToVec(p2);
        this.imp.SetLinearForm(p1.getImp(), p2.getImp());
      } else if (typeof p1 == "number" && isUniVec(p2) && isUniVec(p3) && arguments.length == 3) {
        p2 = uniToVec(p2);
        p3 = uniToVec(p3);
        this.imp.SetLinearForm(p1, p2.getImp(), p3.getImp());
      } else if (typeof p1 == "number" && isUniVec(p2) && typeof p3 == "number" && isUniVec(p4) && arguments.length == 4) {
        p2 = uniToVec(p2);
        p4 = uniToVec(p4);
        this.imp.SetLinearForm(p1, p2.getImp(), p3, p4.getImp());
      } else if (typeof p1 == "number" && isUniVec(p2) && typeof p3 == "number" && isUniVec(p4) && isUniVec(p5) && arguments.length == 5) {
        p2 = uniToVec(p2);
        p4 = uniToVec(p4);
        p5 = uniToVec(p5);
        this.imp.SetLinearForm(p1, p2.getImp(), p3, p4.getImp(), p5.getImp());
      } else if (typeof p1 == "number" && isUniVec(p2) && typeof p3 == "number" && isUniVec(p4) && typeof p5 == "number" && isUniVec(p6) && arguments.length == 6) {
        p2 = uniToVec(p2);
        p4 = uniToVec(p4);
        p6 = uniToVec(p6);
        this.imp.SetLinearForm(p1, p2.getImp(), p3, p4.getImp(), p5, p6.getImp());
      } else if (typeof p1 == "number" && isUniVec(p2) && typeof p3 == "number" && isUniVec(p4) && typeof p5 == "number" && isUniVec(p6) && isUniVec(p7)) {
        p2 = uniToVec(p2);
        p4 = uniToVec(p4);
        p6 = uniToVec(p6);
        p7 = uniToVec(p7);
        this.imp.SetLinearForm(p1, p2.getImp(), p3, p4.getImp(), p5, p6.getImp(), p7.getImp());
      }
    }
  }, {
    key: "MirrorByVec",
    value: function MirrorByVec(vec) {
      this.imp.MirrorByVec(vec.getImp());
    }
  }, {
    key: "MirroredByVec",
    value: function MirroredByVec(vec) {
      return new Mx3dGeVec(this.imp.MirroredByVec(vec.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(axis) {
      this.imp.MirrorByAxis(axis.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(axis) {
      return new Mx3dGeVec(this.imp.MirroredByAxis(axis.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(csysr) {
      this.imp.MirrorByCSYSR(csysr.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(csysr) {
      return new Mx3dGeVec(this.imp.MirroredByCSYSR(csysr.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(axis, ang) {
      this.imp.Rotate(axis.getImp(), ang);
    }
  }, {
    key: "Rotated",
    value: function Rotated(axis, ang) {
      return new Mx3dGeVec(this.imp.Rotated(axis.getImp(), ang));
    }
  }, {
    key: "Scale",
    value: function Scale(s) {
      this.imp.Scale(s);
    }
  }, {
    key: "Scaled",
    value: function Scaled(s) {
      return new Mx3dGeVec(this.imp.Scaled(s));
    }
  }, {
    key: "Transform",
    value: function Transform(t) {
      this.imp.Transform(t.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(t) {
      return new Mx3dGeVec(this.imp.Transformed(t.getImp()));
    }
  }]);
  return Mx3dGeVec;
}(Mx3dGeObject);
var Mx3dGeBndBox = /*#__PURE__*/function (_Mx3dGeObject9) {
  _inherits$1(Mx3dGeBndBox, _Mx3dGeObject9);
  var _super16 = _createSuper$2(Mx3dGeBndBox);
  function Mx3dGeBndBox(p1, p2) {
    var _this10;
    _classCallCheck$1(this, Mx3dGeBndBox);
    if (!p1) {
      _this10 = _super16.call(this);
      _this10.initTempObject(new MxApp3D.imp.Mx3dGeBndBox());
    } else if (p1 instanceof Mx3dGePoint && p2 instanceof Mx3dGePoint) {
      _this10 = _super16.call(this);
      _this10.initTempObject(new MxApp3D.imp.Mx3dGeBndBox(p1.getImp(), p2.getImp()));
    } else if (p1 instanceof Object && arguments.length === 1) {
      _this10 = _super16.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this10);
  }
  _createClass$1(Mx3dGeBndBox, [{
    key: "SetWhole",
    value: function SetWhole() {
      this.imp.SetWhole();
    }
  }, {
    key: "SetVoid",
    value: function SetVoid() {
      this.imp.SetVoid();
    }
  }, {
    key: "Set",
    value: function Set(P, D) {
      this.imp.Set(P.getImp(), D.getImp());
    }
  }, {
    key: "Update",
    value: function Update(aXmin, aYmin, aZmin, aXmax, aYmax, aZmax) {
      this.imp.Update(aXmin, aYmin, aZmin, aXmax, aYmax, aZmax);
    }
  }, {
    key: "GetGap",
    value: function GetGap() {
      return this.imp.GetGap();
    }
  }, {
    key: "SetGap",
    value: function SetGap(Tol) {
      this.imp.SetGap(Tol);
    }
  }, {
    key: "Enlarge",
    value: function Enlarge(Tol) {
      this.imp.Enlarge(Tol);
    }
  }, {
    key: "CornerMin",
    value: function CornerMin() {
      return new Mx3dGePoint(this.imp.CornerMin());
    }
  }, {
    key: "CornerMax",
    value: function CornerMax() {
      return new Mx3dGePoint(this.imp.CornerMax());
    }
  }, {
    key: "OpenXmin",
    value: function OpenXmin() {
      this.imp.OpenXmin();
    }
  }, {
    key: "OpenXmax",
    value: function OpenXmax() {
      this.imp.OpenXmax();
    }
  }, {
    key: "OpenYmin",
    value: function OpenYmin() {
      this.imp.OpenYmin();
    }
  }, {
    key: "OpenYmax",
    value: function OpenYmax() {
      this.imp.OpenYmax();
    }
  }, {
    key: "OpenZmin",
    value: function OpenZmin() {
      this.imp.OpenZmin();
    }
  }, {
    key: "OpenZmax",
    value: function OpenZmax() {
      this.imp.OpenZmax();
    }
  }, {
    key: "IsOpen",
    value: function IsOpen() {
      return this.imp.IsOpen();
    }
  }, {
    key: "IsOpenXmin",
    value: function IsOpenXmin() {
      return this.imp.IsOpenXmin();
    }
  }, {
    key: "IsOpenXmax",
    value: function IsOpenXmax() {
      return this.imp.IsOpenXmax();
    }
  }, {
    key: "IsOpenYmin",
    value: function IsOpenYmin() {
      return this.imp.IsOpenYmin();
    }
  }, {
    key: "IsOpenYmax",
    value: function IsOpenYmax() {
      return this.imp.IsOpenYmax();
    }
  }, {
    key: "IsOpenZmin",
    value: function IsOpenZmin() {
      return this.imp.IsOpenZmin();
    }
  }, {
    key: "IsOpenZmax",
    value: function IsOpenZmax() {
      return this.imp.IsOpenZmax();
    }
  }, {
    key: "IsWhole",
    value: function IsWhole() {
      return this.imp.IsWhole();
    }
  }, {
    key: "IsVoid",
    value: function IsVoid() {
      return this.imp.IsVoid();
    }
  }, {
    key: "IsXThin",
    value: function IsXThin(tol) {
      return this.imp.IsXThin(tol);
    }
  }, {
    key: "IsYThin",
    value: function IsYThin(tol) {
      return this.imp.IsYThin(tol);
    }
  }, {
    key: "IsZThin",
    value: function IsZThin(tol) {
      return this.imp.IsZThin(tol);
    }
  }, {
    key: "IsThin",
    value: function IsThin(tol) {
      return this.imp.IsThin(tol);
    }
  }, {
    key: "Transformed",
    value: function Transformed(T) {
      return new Mx3dGeBndBox(this.imp.Transformed(T.getImp()));
    }
  }, {
    key: "AddBndBox",
    value: function AddBndBox(Other) {
      this.imp.AddBndBox(Other.getImp());
    }
  }, {
    key: "AddPoint",
    value: function AddPoint(P) {
      this.imp.AddPoint(P.getImp());
    }
  }, {
    key: "AddPointDir",
    value: function AddPointDir(P, D) {
      this.imp.AddPointDir(P.getImp(), D.getImp());
    }
  }, {
    key: "AddDir",
    value: function AddDir(D) {
      this.imp.AddDir(D.getImp());
    }
  }, {
    key: "IsOutPoint",
    value: function IsOutPoint(P) {
      return this.imp.IsOutPoint(P.getImp());
    }
  }, {
    key: "IsOutBndBox",
    value: function IsOutBndBox(Other, T) {
      if (T) {
        return this.imp.IsOutBndBox(Other.getImp(), T.getImp());
      } else {
        return this.imp.IsOutBndBox(Other.getImp());
      }
    }
  }, {
    key: "IsOutTBT",
    value: function IsOutTBT(T1, Other, T2) {
      return this.imp.IsOutTBT(T1.getImp(), Other.getImp(), T2.getImp());
    }
  }, {
    key: "IsOutPPD",
    value: function IsOutPPD(P1, P2, D) {
      return this.imp.IsOutPPD(P1.getImp(), P2.getImp(), D.getImp());
    }
  }, {
    key: "Distance",
    value: function Distance(Other) {
      return this.imp.Distance(Other.getImp());
    }
  }, {
    key: "SquareExtent",
    value: function SquareExtent() {
      return this.imp.SquareExtent();
    }
  }, {
    key: "FinitePart",
    value: function FinitePart() {
      return new Mx3dGeBndBox(this.imp.FinitePart());
    }
  }, {
    key: "HasFinitePart",
    value: function HasFinitePart() {
      return this.imp.HasFinitePart();
    }
  }]);
  return Mx3dGeBndBox;
}(Mx3dGeObject);
var Mx3dGeCircle = /*#__PURE__*/function (_Mx3dGeObject10) {
  _inherits$1(Mx3dGeCircle, _Mx3dGeObject10);
  var _super17 = _createSuper$2(Mx3dGeCircle);
  function Mx3dGeCircle(theA2, theRadius) {
    var _this11;
    _classCallCheck$1(this, Mx3dGeCircle);
    if (!theA2 && !theRadius) {
      _this11 = _super17.call(this);
      _this11.initTempObject(new MxApp3D.imp.Mx3dGeCircle());
    } else if (theA2 instanceof Mx3dGeCSYSR && typeof theRadius === "number") {
      _this11 = _super17.call(this);
      _this11.initTempObject(new MxApp3D.imp.Mx3dGeCircle(theA2.getImp(), theRadius));
    } else if (theA2 instanceof Object) {
      _this11 = _super17.call(this, theA2);
    }
    return _possibleConstructorReturn$1(_this11);
  }
  _createClass$1(Mx3dGeCircle, [{
    key: "SetAxis",
    value: function SetAxis(theA1) {
      this.imp.SetAxis(theA1.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theP) {
      this.imp.SetLocation(theP.getImp());
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(theA2) {
      this.imp.SetPosition(theA2.getImp());
    }
  }, {
    key: "SetRadius",
    value: function SetRadius(theRadius) {
      this.imp.SetRadius(theRadius);
    }
  }, {
    key: "Area",
    value: function Area() {
      return this.imp.Area();
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeCSYSR(this.imp.Position());
    }
  }, {
    key: "Radius",
    value: function Radius() {
      return this.imp.Radius();
    }
  }, {
    key: "XAxis",
    value: function XAxis() {
      return new Mx3dGeAxis(this.imp.XAxis());
    }
  }, {
    key: "YAxis",
    value: function YAxis() {
      return new Mx3dGeAxis(this.imp.YAxis());
    }
  }, {
    key: "Distance",
    value: function Distance(theP) {
      return this.imp.Distance(theP.getImp());
    }
  }, {
    key: "SquareDistance",
    value: function SquareDistance(theP) {
      return this.imp.SquareDistance(theP.getImp());
    }
  }, {
    key: "Contains",
    value: function Contains(theP, theLinearTolerance) {
      return this.imp.Contains(theP.getImp(), theLinearTolerance);
    }
  }, {
    key: "MirrorByPoint",
    value: function MirrorByPoint(theP) {
      this.imp.MirrorByPoint(theP.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(theP) {
      return new Mx3dGeCircle(this.imp.MirroredByPoint(theP.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(theA1) {
      this.imp.MirrorByAxis(theA1.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(theA1) {
      return new Mx3dGeCircle(this.imp.MirroredByAxis(theA1.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(theA2) {
      this.imp.MirrorByCSYSR(theA2.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(theA2) {
      return new Mx3dGeCircle(this.imp.MirroredByCSYSR(theA2.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(theA1, theAng) {
      this.imp.Rotate(theA1.getImp(), theAng);
    }
  }, {
    key: "Rotated",
    value: function Rotated(theA1, theAng) {
      return new Mx3dGeCircle(this.imp.Rotated(theA1.getImp(), theAng));
    }
  }, {
    key: "Scale",
    value: function Scale(theP, theS) {
      this.imp.Scale(theP.getImp(), theS);
    }
  }, {
    key: "Scaled",
    value: function Scaled(theP, theS) {
      return new Mx3dGeCircle(this.imp.Scaled(theP.getImp(), theS));
    }
  }, {
    key: "Transform",
    value: function Transform(theT) {
      this.imp.Transform(theT.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(theT) {
      return new Mx3dGeCircle(this.imp.Transformed(theT.getImp()));
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(theV) {
      this.imp.TranslateByVec(theV.getImp());
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(theV) {
      return new Mx3dGeCircle(this.imp.TranslatedByVec(theV.getImp()));
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(theP1, theP2) {
      this.imp.TranslateBy2Points(theP1.getImp(), theP2.getImp());
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(theP1, theP2) {
      return new Mx3dGeCircle(this.imp.TranslatedBy2Points(theP1.getImp(), theP2.getImp()));
    }
  }]);
  return Mx3dGeCircle;
}(Mx3dGeObject);
var Mx3dShapeObject = /*#__PURE__*/function (_Mx3dBaseObject6) {
  _inherits$1(Mx3dShapeObject, _Mx3dBaseObject6);
  var _super18 = _createSuper$2(Mx3dShapeObject);
  function Mx3dShapeObject(p) {
    var _this12;
    _classCallCheck$1(this, Mx3dShapeObject);
    if (p) {
      _this12 = _super18.call(this, p);
    } else {
      _this12 = _super18.call(this);
    }
    return _possibleConstructorReturn$1(_this12);
  }
  _createClass$1(Mx3dShapeObject, [{
    key: "getBndBox",
    value: function getBndBox() {
      return new Mx3dGeBndBox(this.imp.getBndBox());
    }
  }, {
    key: "reverse",
    value: function reverse() {
      this.imp.reverse();
    }
  }, {
    key: "reversed",
    value: function reversed() {
      return new Mx3dShapeObject(this.imp.reversed());
    }
  }, {
    key: "Orientation",
    value: function Orientation() {
      return this.imp.Orientation();
    }
  }, {
    key: "move",
    value: function move(theLocation) {
      this.imp.move(theLocation.getImp());
    }
  }, {
    key: "moved",
    value: function moved(theLocation) {
      return new Mx3dShapeObject(this.imp.moved(theLocation.getImp()));
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Mx3dShapeObject(this.imp.clone());
    }
  }, {
    key: "fuse",
    value: function fuse(theOther) {
      return new Mx3dShapeObject(this.imp.fuse(theOther.getImp()));
    }
  }, {
    key: "cut",
    value: function cut(theOther) {
      return new Mx3dShapeObject(this.imp.cut(theOther.getImp()));
    }
  }, {
    key: "common",
    value: function common(theOther) {
      return new Mx3dShapeObject(this.imp.common(theOther.getImp()));
    }
  }, {
    key: "section",
    value: function section(theOther) {
      return new Mx3dShapeObject(this.imp.section(theOther.getImp()));
    }
  }, {
    key: "spliter",
    value: function spliter(theTools) {
      var paramSeq = new Mx3dShapeObjectSequence();
      theTools.forEach(function (item) {
        return paramSeq.Append(item);
      });
      var retShapes = new Mx3dShapeObjectSequence(this.imp.spliter(paramSeq.getImp()));
      var retArr = new Array();
      for (var i = 1; i <= retShapes.Length(); i++) {
        var retShape = retShapes.Value(i);
        retArr.push(retShape);
      }
      return retArr;
    }
  }, {
    key: "MirrorByPoint",
    value: function MirrorByPoint(theP) {
      this.imp.MirrorByPoint(theP.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(theP) {
      return new Mx3dShapeObject(this.imp.MirroredByPoint(theP.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(axis) {
      this.imp.MirrorByAxis(axis.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(axis) {
      return new Mx3dShapeObject(this.imp.MirroredByAxis(axis.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(csysr) {
      this.imp.MirrorByCSYSR(csysr.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(csysr) {
      return new Mx3dShapeObject(this.imp.MirroredByCSYSR(csysr.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(axis, ang) {
      this.imp.Rotate(axis.getImp(), ang);
    }
  }, {
    key: "Rotated",
    value: function Rotated(axis, ang) {
      return new Mx3dShapeObject(this.imp.Rotated(axis.getImp(), ang));
    }
  }, {
    key: "Scale",
    value: function Scale(point, s) {
      this.imp.Scale(point.getImp(), s);
    }
  }, {
    key: "Scaled",
    value: function Scaled(point, s) {
      return new Mx3dShapeObject(this.imp.Scaled(point.getImp(), s));
    }
  }, {
    key: "Transform",
    value: function Transform(trsf) {
      this.imp.Transform(trsf.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(trsf) {
      return new Mx3dShapeObject(this.imp.Transformed(trsf.getImp()));
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(theX, theY, theZ) {
      if (theX instanceof Mx3dGeVec) {
        this.imp.TranslateByVec(theX.getImp());
      } else {
        this.imp.TranslateByVec(theX, theY, theZ);
      }
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(theX, theY, theZ) {
      if (theX instanceof Mx3dGeVec) {
        return new Mx3dShapeObject(this.imp.TranslatedByVec(theX.getImp()));
      } else {
        return new Mx3dShapeObject(this.imp.TranslatedByVec(theX, theY, theZ));
      }
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(point1, point2) {
      this.imp.TranslateBy2Points(point1.getImp(), point2.getImp());
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(point1, point2) {
      return new Mx3dShapeObject(this.imp.TranslatedBy2Points(point1.getImp(), point2.getImp()));
    }
  }, {
    key: "Explore",
    value: function Explore(ToFind) {
      var shapeSeq = new Mx3dShapeObjectSequence(this.imp.Explore(ToFind));
      var retArr = new Array();
      for (var i = 1; i <= shapeSeq.Length(); i++) {
        var retShape = shapeSeq.Value(i);
        retArr.push(retShape);
      }
      return retArr;
    }
  }, {
    key: "ShapeType",
    value: function ShapeType() {
      return this.imp.ShapeType();
    }
  }, {
    key: "Quantities",
    value: function Quantities(theAspect) {
      return this.imp.Quantities(theAspect);
    }
  }, {
    key: "Centroid",
    value: function Centroid(theAspect) {
      return new Mx3dGePoint(this.imp.Centroid(theAspect));
    }
  }]);
  return Mx3dShapeObject;
}(Mx3dBaseObject);
var Mx3dShapeFace = /*#__PURE__*/function (_Mx3dShapeObject) {
  _inherits$1(Mx3dShapeFace, _Mx3dShapeObject);
  var _super19 = _createSuper$2(Mx3dShapeFace);
  function Mx3dShapeFace(p) {
    var _this13;
    _classCallCheck$1(this, Mx3dShapeFace);
    if (!p) {
      _this13 = _super19.call(this);
      _this13.initTempObject(new MxApp3D.imp.Mx3dShapeFace());
    } else {
      _this13 = _super19.call(this, p);
    }
    return _possibleConstructorReturn$1(_this13);
  }
  return _createClass$1(Mx3dShapeFace);
}(Mx3dShapeObject);
var Mx3dShapeVertex = /*#__PURE__*/function (_Mx3dShapeObject2) {
  _inherits$1(Mx3dShapeVertex, _Mx3dShapeObject2);
  var _super20 = _createSuper$2(Mx3dShapeVertex);
  function Mx3dShapeVertex(p) {
    var _this14;
    _classCallCheck$1(this, Mx3dShapeVertex);
    if (!p) {
      _this14 = _super20.call(this);
      _this14.initTempObject(new MxApp3D.imp.Mx3dShapeVertex());
    } else {
      _this14 = _super20.call(this, p);
    }
    return _possibleConstructorReturn$1(_this14);
  }
  return _createClass$1(Mx3dShapeVertex);
}(Mx3dShapeObject);
var Mx3dShapeEdge = /*#__PURE__*/function (_Mx3dShapeObject3) {
  _inherits$1(Mx3dShapeEdge, _Mx3dShapeObject3);
  var _super21 = _createSuper$2(Mx3dShapeEdge);
  function Mx3dShapeEdge(p1, p2) {
    var _this15;
    _classCallCheck$1(this, Mx3dShapeEdge);
    if (!p1) {
      _this15 = _super21.call(this);
      _this15.initTempObject(new MxApp3D.imp.Mx3dShapeEdge());
    } else if (p1 instanceof Mx3dGePoint && p2 instanceof Mx3dGePoint) {
      _this15 = _super21.call(this);
      _this15.initTempObject(new MxApp3D.imp.Mx3dShapeEdge(p1.getImp(), p2.getImp()));
    } else {
      _this15 = _super21.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this15);
  }
  return _createClass$1(Mx3dShapeEdge);
}(Mx3dShapeObject);
var Mx3dShapeWire = /*#__PURE__*/function (_Mx3dShapeObject4) {
  _inherits$1(Mx3dShapeWire, _Mx3dShapeObject4);
  var _super22 = _createSuper$2(Mx3dShapeWire);
  function Mx3dShapeWire(p) {
    var _this16;
    _classCallCheck$1(this, Mx3dShapeWire);
    if (!p) {
      _this16 = _super22.call(this);
      _this16.initTempObject(new MxApp3D.imp.Mx3dShapeWire());
    } else {
      _this16 = _super22.call(this, p);
    }
    return _possibleConstructorReturn$1(_this16);
  }
  return _createClass$1(Mx3dShapeWire);
}(Mx3dShapeObject);
var Mx3dShapeShell = /*#__PURE__*/function (_Mx3dShapeObject5) {
  _inherits$1(Mx3dShapeShell, _Mx3dShapeObject5);
  var _super23 = _createSuper$2(Mx3dShapeShell);
  function Mx3dShapeShell(p) {
    var _this17;
    _classCallCheck$1(this, Mx3dShapeShell);
    if (!p) {
      _this17 = _super23.call(this);
      _this17.initTempObject(new MxApp3D.imp.Mx3dShapeShell());
    } else {
      _this17 = _super23.call(this, p);
    }
    return _possibleConstructorReturn$1(_this17);
  }
  return _createClass$1(Mx3dShapeShell);
}(Mx3dShapeObject);
var Mx3dShapeSolid = /*#__PURE__*/function (_Mx3dShapeObject6) {
  _inherits$1(Mx3dShapeSolid, _Mx3dShapeObject6);
  var _super24 = _createSuper$2(Mx3dShapeSolid);
  function Mx3dShapeSolid(p) {
    var _this18;
    _classCallCheck$1(this, Mx3dShapeSolid);
    if (!p) {
      _this18 = _super24.call(this);
      _this18.initTempObject(new MxApp3D.imp.Mx3dShapeSolid());
    } else {
      _this18 = _super24.call(this, p);
    }
    return _possibleConstructorReturn$1(_this18);
  }
  return _createClass$1(Mx3dShapeSolid);
}(Mx3dShapeObject);
var Mx3dShapeCompSolid = /*#__PURE__*/function (_Mx3dShapeObject7) {
  _inherits$1(Mx3dShapeCompSolid, _Mx3dShapeObject7);
  var _super25 = _createSuper$2(Mx3dShapeCompSolid);
  function Mx3dShapeCompSolid(p) {
    var _this19;
    _classCallCheck$1(this, Mx3dShapeCompSolid);
    if (!p) {
      _this19 = _super25.call(this);
      _this19.initTempObject(new MxApp3D.imp.Mx3dShapeCompSolid());
    } else {
      _this19 = _super25.call(this, p);
    }
    return _possibleConstructorReturn$1(_this19);
  }
  return _createClass$1(Mx3dShapeCompSolid);
}(Mx3dShapeObject);
var Mx3dShapeCompound = /*#__PURE__*/function (_Mx3dShapeObject8) {
  _inherits$1(Mx3dShapeCompound, _Mx3dShapeObject8);
  var _super26 = _createSuper$2(Mx3dShapeCompound);
  function Mx3dShapeCompound(p) {
    var _this20;
    _classCallCheck$1(this, Mx3dShapeCompound);
    if (!p) {
      _this20 = _super26.call(this);
      _this20.initTempObject(new MxApp3D.imp.Mx3dShapeCompound());
    } else {
      _this20 = _super26.call(this, p);
    }
    return _possibleConstructorReturn$1(_this20);
  }
  return _createClass$1(Mx3dShapeCompound);
}(Mx3dShapeObject);
var Mx3dAlgoFillet = /*#__PURE__*/function (_Mx3dAlgoObject) {
  _inherits$1(Mx3dAlgoFillet, _Mx3dAlgoObject);
  var _super27 = _createSuper$2(Mx3dAlgoFillet);
  function Mx3dAlgoFillet(S, FShape) {
    var _this21;
    _classCallCheck$1(this, Mx3dAlgoFillet);
    if (S instanceof Mx3dShapeObject && typeof FShape === "number") {
      _this21 = _super27.call(this);
      _this21.initTempObject(new MxApp3D.imp.Mx3dAlgoFillet(S.getImp(), FShape));
    } else {
      _this21 = _super27.call(this, S);
    }
    return _possibleConstructorReturn$1(_this21);
  }
  _createClass$1(Mx3dAlgoFillet, [{
    key: "Add",
    value: function Add(Radius, E) {
      this.imp.Add(Radius, E.getImp());
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }]);
  return Mx3dAlgoFillet;
}(Mx3dAlgoObject);
var Mx3dAlgoChamfer = /*#__PURE__*/function (_Mx3dAlgoObject2) {
  _inherits$1(Mx3dAlgoChamfer, _Mx3dAlgoObject2);
  var _super28 = _createSuper$2(Mx3dAlgoChamfer);
  function Mx3dAlgoChamfer(S) {
    var _this22;
    _classCallCheck$1(this, Mx3dAlgoChamfer);
    if (S instanceof Mx3dShapeObject) {
      _this22 = _super28.call(this);
      _this22.initTempObject(new MxApp3D.imp.Mx3dAlgoChamfer(S.getImp()));
    } else if (S instanceof Object) {
      _this22 = _super28.call(this, S);
    }
    return _possibleConstructorReturn$1(_this22);
  }
  _createClass$1(Mx3dAlgoChamfer, [{
    key: "Add",
    value: function Add(Dis, E) {
      this.imp.Add(Dis, E.getImp());
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }]);
  return Mx3dAlgoChamfer;
}(Mx3dAlgoObject);
var Mx3dAlgoFillet2d = /*#__PURE__*/function (_Mx3dAlgoObject3) {
  _inherits$1(Mx3dAlgoFillet2d, _Mx3dAlgoObject3);
  var _super29 = _createSuper$2(Mx3dAlgoFillet2d);
  function Mx3dAlgoFillet2d(theEdge1, theEdge2, thePlane) {
    var _this23;
    _classCallCheck$1(this, Mx3dAlgoFillet2d);
    if (!theEdge1) {
      _this23 = _super29.call(this);
      _this23.initTempObject(new MxApp3D.imp.Mx3dAlgoFillet2d());
    } else if (theEdge1 instanceof Mx3dShapeWire && theEdge2 instanceof Mx3dGePlane) {
      _this23 = _super29.call(this);
      _this23.initTempObject(new MxApp3D.imp.Mx3dAlgoFillet2d(theEdge1.getImp(), theEdge2.getImp()));
    } else if (theEdge1 instanceof Mx3dShapeEdge && theEdge2 instanceof Mx3dShapeEdge && thePlane instanceof Mx3dGePlane) {
      _this23 = _super29.call(this);
      _this23.initTempObject(new MxApp3D.imp.Mx3dAlgoFillet2d(theEdge1.getImp(), theEdge2.getImp(), thePlane.getImp()));
    } else {
      _this23 = _super29.call(this, theEdge1);
    }
    return _possibleConstructorReturn$1(_this23);
  }
  _createClass$1(Mx3dAlgoFillet2d, [{
    key: "Init",
    value: function Init(theEdge1, theEdge2, thePlane) {
      if (theEdge1 instanceof Mx3dShapeWire && theEdge2 instanceof Mx3dGePlane) {
        this.imp.Init(theEdge1.getImp(), theEdge2.getImp());
      } else {
        this.imp.Init(theEdge1.getImp(), theEdge2.getImp(), thePlane === null || thePlane === void 0 ? void 0 : thePlane.getImp());
      }
    }
  }, {
    key: "Perform",
    value: function Perform(theRadius) {
      return this.imp.Perform(theRadius);
    }
  }, {
    key: "NbResults",
    value: function NbResults(thePoint) {
      return this.imp.NbResults(thePoint.getImp());
    }
  }, {
    key: "Result",
    value: function Result(thePoint, theEdge1, theEdge2) {
      var iSolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
      return new Mx3dShapeEdge(this.imp.Result(thePoint.getImp(), theEdge1.getImp(), theEdge2.getImp(), iSolution));
    }
  }]);
  return Mx3dAlgoFillet2d;
}(Mx3dAlgoObject);
var Mx3dShapeObjectSequence = /*#__PURE__*/function (_Mx3dBaseObject7) {
  _inherits$1(Mx3dShapeObjectSequence, _Mx3dBaseObject7);
  var _super30 = _createSuper$2(Mx3dShapeObjectSequence);
  function Mx3dShapeObjectSequence(p) {
    var _this24;
    _classCallCheck$1(this, Mx3dShapeObjectSequence);
    if (!p) {
      _this24 = _super30.call(this);
      _this24.initTempObject(new MxApp3D.imp.Mx3dShapeObjectSequence());
    } else {
      _this24 = _super30.call(this, p);
    }
    return _possibleConstructorReturn$1(_this24);
  }
  _createClass$1(Mx3dShapeObjectSequence, [{
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "Value",
    value: function Value(theIndex) {
      return new Mx3dShapeObject(this.imp.Value(theIndex));
    }
  }, {
    key: "Remove",
    value: function Remove(theFromIndex, theToIndex) {
      if (!theToIndex) {
        this.imp.Remove(theFromIndex);
      } else {
        this.imp.Remove(theFromIndex, theToIndex);
      }
    }
  }, {
    key: "Append",
    value: function Append(theShape) {
      this.imp.Append(theShape.getImp());
    }
  }, {
    key: "Prepend",
    value: function Prepend(theShape) {
      this.imp.Prepend(theShape.getImp());
    }
  }]);
  return Mx3dShapeObjectSequence;
}(Mx3dBaseObject);
var Mx3dDbObject = /*#__PURE__*/function (_Mx3dBaseObject8) {
  _inherits$1(Mx3dDbObject, _Mx3dBaseObject8);
  var _super31 = _createSuper$2(Mx3dDbObject);
  function Mx3dDbObject(p) {
    _classCallCheck$1(this, Mx3dDbObject);
    return _super31.call(this, p);
  }
  return _createClass$1(Mx3dDbObject);
}(Mx3dBaseObject);
var Mx3dView = /*#__PURE__*/function (_Mx3dBaseObject9) {
  _inherits$1(Mx3dView, _Mx3dBaseObject9);
  var _super32 = _createSuper$2(Mx3dView);
  function Mx3dView(p) {
    var _this25;
    _classCallCheck$1(this, Mx3dView);
    _this25 = _super32.call(this);
    _this25.initTempObject(p);
    return _this25;
  }
  _createClass$1(Mx3dView, [{
    key: "getDocument",
    value: function getDocument() {
      return new Mx3dDbDocument(this.imp.getDoc(), "from view");
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      var theUpdateView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.imp.removeAll(theUpdateView);
    }
  }, {
    key: "removeSelected",
    value: function removeSelected() {
      this.imp.removeSelected();
    }
  }, {
    key: "update",
    value: function update() {
      var isUpAllData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var isRemoveAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.imp.update(isUpAllData, isRemoveAll);
    }
  }, {
    key: "setProjectionType",
    value: function setProjectionType(theProjection) {
      this.imp.setProjectionType(theProjection);
    }
  }, {
    key: "showCenterTrihedron",
    value: function showCenterTrihedron(theToShow) {
      this.imp.showCenterTrihedron(theToShow);
    }
  }, {
    key: "fitAllObjects",
    value: function fitAllObjects(theAuto) {
      this.imp.fitAllObjects(theAuto);
    }
  }, {
    key: "enableXClipPlane",
    value: function enableXClipPlane(theToEnabled) {
      this.imp.enableXClipPlane(theToEnabled);
    }
  }, {
    key: "setXClipPlaneXPosition",
    value: function setXClipPlaneXPosition(thePosition) {
      this.imp.setXClipPlaneXPosition(thePosition);
    }
  }, {
    key: "setXClipPlaneReverse",
    value: function setXClipPlaneReverse() {
      this.imp.setXClipPlaneReverse();
    }
  }, {
    key: "enableYClipPlane",
    value: function enableYClipPlane(theToEnabled) {
      this.imp.enableYClipPlane(theToEnabled);
    }
  }, {
    key: "setYClipPlaneYPosition",
    value: function setYClipPlaneYPosition(thePosition) {
      this.imp.setYClipPlaneYPosition(thePosition);
    }
  }, {
    key: "setYClipPlaneReverse",
    value: function setYClipPlaneReverse() {
      this.imp.setYClipPlaneReverse();
    }
  }, {
    key: "enableZClipPlane",
    value: function enableZClipPlane(theToEnabled) {
      this.imp.enableZClipPlane(theToEnabled);
    }
  }, {
    key: "setZClipPlaneZPosition",
    value: function setZClipPlaneZPosition(thePosition) {
      this.imp.setZClipPlaneZPosition(thePosition);
    }
  }, {
    key: "setZClipPlaneReverse",
    value: function setZClipPlaneReverse() {
      this.imp.setZClipPlaneReverse();
    }
  }, {
    key: "enableCustomClipPlane",
    value: function enableCustomClipPlane(theToEnabled) {
      this.imp.enableCustomClipPlane(theToEnabled);
    }
  }, {
    key: "setCustomClipPlanePosition",
    value: function setCustomClipPlanePosition(thePosition) {
      this.imp.setCustomClipPlanePosition(thePosition);
    }
  }, {
    key: "setCustomClipPlaneReverse",
    value: function setCustomClipPlaneReverse() {
      this.imp.setCustomClipPlaneReverse();
    }
  }, {
    key: "setCustomClipPlaneDirection",
    value: function setCustomClipPlaneDirection(x, y, z) {
      this.imp.setCustomClipPlaneDirection(x, y, z);
    }
  }, {
    key: "displaySymbolText",
    value: function displaySymbolText(theSymbol) {
      this.imp.displaySymbolText(theSymbol.getImp());
    }
  }, {
    key: "displayDimension",
    value: function displayDimension(theDimension) {
      this.imp.displayDimension(theDimension.getImp());
    }
  }, {
    key: "addModelTexture",
    value: function addModelTexture(theFileName) {
      this.imp.addModelTexture(theFileName);
    }
  }, {
    key: "removeModelTexture",
    value: function removeModelTexture() {
      this.imp.removeModelTexture();
    }
  }, {
    key: "setGradientBgColor",
    value: function setGradientBgColor(theColor1, theColor2, theMethod) {
      this.imp.setGradientBgColor(theColor1.getImp(), theColor2.getImp(), theMethod);
    }
  }, {
    key: "setProj",
    value: function setProj(theOrientation, theIsYup) {
      this.imp.setProj(theOrientation, theIsYup);
    }
  }, {
    key: "setSelectedColor",
    value: function setSelectedColor(color) {
      this.imp.setSelectedColor(color.getImp());
    }
  }, {
    key: "setSelectedMaterial",
    value: function setSelectedMaterial(material) {
      this.imp.setSelectedMaterial(material.getImp());
    }
  }, {
    key: "setDisplayMode",
    value: function setDisplayMode(theMode) {
      this.imp.setDisplayMode(theMode);
    }
  }, {
    key: "enableDirLightSrc",
    value: function enableDirLightSrc(theToEnabled) {
      this.imp.enableDirLightSrc(theToEnabled);
    }
  }, {
    key: "setCubemapBackground",
    value: function setCubemapBackground(theRight, theLeft, theTop, theBottom, theFront, theBack) {
      this.imp.setCubemapBackground(theRight, theLeft, theTop, theBottom, theFront, theBack);
    }
  }, {
    key: "setManipulatorEnabled",
    value: function setManipulatorEnabled(isEnabled) {
      this.imp.setManipulatorEnabled(isEnabled);
    }
  }]);
  return Mx3dView;
}(Mx3dBaseObject);
var Mx3dGeColor = /*#__PURE__*/function (_Mx3dBaseObject10) {
  _inherits$1(Mx3dGeColor, _Mx3dBaseObject10);
  var _super33 = _createSuper$2(Mx3dGeColor);
  function Mx3dGeColor(p1, p2, p3, p4) {
    var _this26;
    _classCallCheck$1(this, Mx3dGeColor);
    if (arguments.length === 0) {
      _this26 = _super33.call(this);
      _this26.initTempObject(new MxApp3D.imp.Mx3dGeColor());
    } else if (typeof p1 === "number" && arguments.length === 1) {
      _this26 = _super33.call(this);
      _this26.initTempObject(new MxApp3D.imp.Mx3dGeColor(p1));
    } else if (p1 instanceof Object && arguments.length === 1) {
      _this26 = _super33.call(this, p1);
    } else if (typeof p1 === "number" && typeof p2 === "number" && typeof p3 === "number" && typeof p4 === "number") {
      _this26 = _super33.call(this);
      _this26.initTempObject(new MxApp3D.imp.Mx3dGeColor(p1, p2, p3, p4));
    }
    return _possibleConstructorReturn$1(_this26);
  }
  _createClass$1(Mx3dGeColor, [{
    key: "Name",
    value: function Name() {
      return this.imp.Name();
    }
  }, {
    key: "SetValues",
    value: function SetValues(p1, p2, p3, p4) {
      if (arguments.length === 1) {
        this.imp.SetValues(p1);
      } else if (arguments.length === 4) {
        this.imp.SetValues(p1, p2, p3, p4);
      }
    }
  }, {
    key: "Red",
    value: function Red() {
      return this.imp.Red();
    }
  }, {
    key: "Green",
    value: function Green() {
      return this.imp.Green();
    }
  }, {
    key: "Blue",
    value: function Blue() {
      return this.imp.Blue();
    }
  }, {
    key: "Hue",
    value: function Hue() {
      return this.imp.Hue();
    }
  }, {
    key: "Light",
    value: function Light() {
      return this.imp.Light();
    }
  }, {
    key: "ChangeIntensity",
    value: function ChangeIntensity(theDelta) {
      this.imp.ChangeIntensity(theDelta);
    }
  }, {
    key: "Saturation",
    value: function Saturation() {
      return this.imp.Saturation();
    }
  }, {
    key: "ChangeContrast",
    value: function ChangeContrast(theDelta) {
      this.imp.ChangeContrast(theDelta);
    }
  }, {
    key: "IsDifferent",
    value: function IsDifferent(theOther) {
      return this.imp.IsDifferent(theOther.getImp());
    }
  }, {
    key: "IsEqual",
    value: function IsEqual(theOther) {
      return this.imp.IsEqual(theOther.getImp());
    }
  }, {
    key: "Distance",
    value: function Distance(theColor) {
      return this.imp.Distance(theColor.getImp());
    }
  }, {
    key: "SquareDistance",
    value: function SquareDistance(theColor) {
      return this.imp.SquareDistance(theColor.getImp());
    }
  }, {
    key: "DeltaE2000",
    value: function DeltaE2000(theOther) {
      return this.imp.DeltaE2000(theOther.getImp());
    }
  }]);
  return Mx3dGeColor;
}(Mx3dBaseObject);
var Mx3dGeCSYS = /*#__PURE__*/function (_Mx3dGeObject11) {
  _inherits$1(Mx3dGeCSYS, _Mx3dGeObject11);
  var _super34 = _createSuper$2(Mx3dGeCSYS);
  function Mx3dGeCSYS(p1, p2, p3) {
    var _this27;
    _classCallCheck$1(this, Mx3dGeCSYS);
    if (!p1) {
      _this27 = _super34.call(this);
      _this27.initTempObject(new MxApp3D.imp.Mx3dGeCSYS());
    } else if (p1 instanceof Mx3dGeCSYSR && arguments.length === 1) {
      _this27 = _super34.call(this);
      _this27.initTempObject(new MxApp3D.imp.Mx3dGeCSYS(p1.getImp()));
    } else if (p1 instanceof Mx3dGePoint && p2 instanceof Mx3dGeDir && arguments.length === 2) {
      _this27 = _super34.call(this);
      _this27.initTempObject(new MxApp3D.imp.Mx3dGeCSYS(p1.getImp(), p2.getImp()));
    } else if (p1 instanceof Mx3dGePoint && p2 instanceof Mx3dGeDir && p3 instanceof Mx3dGeDir) {
      _this27 = _super34.call(this);
      _this27.initTempObject(new MxApp3D.imp.Mx3dGeCSYS(p1.getImp(), p2.getImp(), p3.getImp()));
    } else if (p1 instanceof Object) {
      _this27 = _super34.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this27);
  }
  _createClass$1(Mx3dGeCSYS, [{
    key: "XReverse",
    value: function XReverse() {
      this.imp.XReverse();
    }
  }, {
    key: "YReverse",
    value: function YReverse() {
      this.imp.YReverse();
    }
  }, {
    key: "ZReverse",
    value: function ZReverse() {
      this.imp.ZReverse();
    }
  }, {
    key: "SetAxis",
    value: function SetAxis(z_axis) {
      this.imp.SetAxis(z_axis.getImp());
    }
  }, {
    key: "SetDirection",
    value: function SetDirection(z_dir) {
      this.imp.SetDirection(z_dir.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theX, theY, theZ) {
      if (theX instanceof Mx3dGePoint) {
        this.imp.SetLocation(theX.getImp());
      } else {
        this.imp.SetLocation(theX, theY, theZ);
      }
    }
  }, {
    key: "SetXDirection",
    value: function SetXDirection(x_dir) {
      this.imp.SetXDirection(x_dir.getImp());
    }
  }, {
    key: "SetYDirection",
    value: function SetYDirection(y_dir) {
      this.imp.SetYDirection(y_dir.getImp());
    }
  }, {
    key: "Angle",
    value: function Angle(other) {
      return this.imp.Angle(other.getImp());
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "CSYSR",
    value: function CSYSR() {
      return new Mx3dGeCSYSR(this.imp.CSYSR());
    }
  }, {
    key: "Direction",
    value: function Direction() {
      return new Mx3dGeDir(this.imp.Direction());
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "XDirection",
    value: function XDirection() {
      return new Mx3dGeDir(this.imp.XDirection());
    }
  }, {
    key: "YDirection",
    value: function YDirection() {
      return new Mx3dGeDir(this.imp.YDirection());
    }
  }, {
    key: "Direct",
    value: function Direct() {
      return this.imp.Direct();
    }
  }, {
    key: "IsCoplanarWithCSYS",
    value: function IsCoplanarWithCSYS(other, linearTolerance, angularTolerance) {
      return this.imp.IsCoplanarWithCSYS(other.getImp(), linearTolerance, angularTolerance);
    }
  }, {
    key: "IsCoplanarWithAxis",
    value: function IsCoplanarWithAxis(axis, linearTolerance, angularTolerance) {
      return this.imp.IsCoplanarWithAxis(axis.getImp(), linearTolerance, angularTolerance);
    }
  }, {
    key: "MirrorByPoint",
    value: function MirrorByPoint(point) {
      this.imp.MirrorByPoint(point.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(point) {
      return new Mx3dGeCSYS(this.imp.MirroredByPoint(point.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(axis) {
      this.imp.MirrorByAxis(axis.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(axis) {
      return new Mx3dGeCSYS(this.imp.MirroredByAxis(axis.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(csysr) {
      this.imp.MirrorByCSYSR(csysr.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(csysr) {
      return new Mx3dGeCSYS(this.imp.MirroredByCSYSR(csysr.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(axis, ang) {
      this.imp.Rotate(axis.getImp(), ang);
    }
  }, {
    key: "Rotated",
    value: function Rotated(axis, ang) {
      return new Mx3dGeCSYS(this.imp.Rotated(axis.getImp(), ang));
    }
  }, {
    key: "Scale",
    value: function Scale(point, s) {
      this.imp.Scale(point.getImp(), s);
    }
  }, {
    key: "Scaled",
    value: function Scaled(point, s) {
      return new Mx3dGeCSYS(this.imp.Scaled(point.getImp(), s));
    }
  }, {
    key: "Transform",
    value: function Transform(t) {
      this.imp.Transform(t.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(t) {
      return new Mx3dGeCSYS(this.imp.Transformed(t.getImp()));
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(vec) {
      this.imp.TranslateByVec(vec.getImp());
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(vec) {
      return new Mx3dGeCSYS(this.imp.TranslatedByVec(vec.getImp()));
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(point1, point2) {
      this.imp.TranslateBy2Points(point1.getImp(), point2.getImp());
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(point1, point2) {
      return new Mx3dGeCSYS(this.imp.TranslatedBy2Points(point1.getImp(), point2.getImp()));
    }
  }]);
  return Mx3dGeCSYS;
}(Mx3dGeObject);
var Mx3dGeCSYSR = /*#__PURE__*/function (_Mx3dGeObject12) {
  _inherits$1(Mx3dGeCSYSR, _Mx3dGeObject12);
  var _super35 = _createSuper$2(Mx3dGeCSYSR);
  function Mx3dGeCSYSR(p1, p2, p3) {
    var _this28;
    _classCallCheck$1(this, Mx3dGeCSYSR);
    if (!p1) {
      _this28 = _super35.call(this);
      _this28.initTempObject(new MxApp3D.imp.Mx3dGeCSYSR());
    } else if (p1 instanceof Mx3dGePoint && p2 instanceof Mx3dGeDir && !p3) {
      _this28 = _super35.call(this);
      _this28.initTempObject(new MxApp3D.imp.Mx3dGeCSYSR(p1.getImp(), p2.getImp()));
    } else if (p1 instanceof Mx3dGePoint && p2 instanceof Mx3dGeDir && p3 instanceof Mx3dGeDir) {
      _this28 = _super35.call(this);
      _this28.initTempObject(new MxApp3D.imp.Mx3dGeCSYSR(p1.getImp(), p2.getImp(), p3.getImp()));
    } else if (p1 instanceof Object && arguments.length === 1) {
      _this28 = _super35.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this28);
  }
  _createClass$1(Mx3dGeCSYSR, [{
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "XDirection",
    value: function XDirection() {
      return new Mx3dGeDir(this.imp.XDirection());
    }
  }, {
    key: "YDirection",
    value: function YDirection() {
      return new Mx3dGeDir(this.imp.YDirection());
    }
  }, {
    key: "Direction",
    value: function Direction() {
      return new Mx3dGeDir(this.imp.Direction());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theX, theY, theZ) {
      if (theX instanceof Mx3dGePoint) {
        this.imp.SetLocation(theX.getImp());
      } else {
        this.imp.SetLocation(theX, theY, theZ);
      }
    }
  }, {
    key: "SetXDirection",
    value: function SetXDirection(x_dir) {
      this.imp.SetXDirection(x_dir.getImp());
    }
  }, {
    key: "SetYDirection",
    value: function SetYDirection(y_dir) {
      this.imp.SetYDirection(y_dir.getImp());
    }
  }, {
    key: "SetDirection",
    value: function SetDirection(z_dir) {
      this.imp.SetDirection(z_dir.getImp());
    }
  }, {
    key: "Angle",
    value: function Angle(theOther) {
      return this.imp.Angle(theOther.getImp());
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "IsCoplanarWithCSYSR",
    value: function IsCoplanarWithCSYSR(Other, LinearTolerance, AngularTolerance) {
      return this.imp.IsCoplanarWithCSYSR(Other.getImp(), LinearTolerance, AngularTolerance);
    }
  }, {
    key: "IsCoplanarWithAxis",
    value: function IsCoplanarWithAxis(A1, LinearTolerance, AngularTolerance) {
      return this.imp.IsCoplanarWithAxis(A1.getImp(), LinearTolerance, AngularTolerance);
    }
  }, {
    key: "MirrorByPoint",
    value: function MirrorByPoint(P) {
      this.imp.MirrorByPoint(P.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(P) {
      return new Mx3dGeCSYSR(this.imp.MirroredByPoint(P.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(A1) {
      this.imp.MirroredByAxis(A1.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(A1) {
      return new Mx3dGeCSYSR(this.imp.MirroredByAxis(A1.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(A2) {
      this.imp.MirrorByCSYSR(A2.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(A2) {
      return new Mx3dGeCSYSR(this.imp.MirroredByCSYSR(A2.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(theA1, theAng) {
      this.imp.Rotate(theA1.getImp(), theAng);
    }
  }, {
    key: "Rotated",
    value: function Rotated(theA1, theAng) {
      return new Mx3dGeCSYSR(this.imp.Rotated(theA1.getImp(), theAng));
    }
  }, {
    key: "Scale",
    value: function Scale(theP, theS) {
      this.imp.Scale(theP.getImp(), theS);
    }
  }, {
    key: "Scaled",
    value: function Scaled(theP, theS) {
      return new Mx3dGeCSYSR(this.imp.Scaled(theP.getImp(), theS));
    }
  }, {
    key: "Transform",
    value: function Transform(theT) {
      this.imp.Transform(theT.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(theT) {
      return new Mx3dGeCSYSR(this.imp.Transformed(theT.getImp()));
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(theV) {
      this.imp.TranslateByVec(theV.getImp());
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(theV) {
      return new Mx3dGeCSYSR(this.imp.TranslatedByVec(theV.getImp()));
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(theP1, theP2) {
      this.imp.TranslateBy2Points(theP1.getImp(), theP2.getImp());
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(theP1, theP2) {
      return new Mx3dGeCSYSR(this.imp.TranslatedBy2Points(theP1.getImp(), theP2.getImp()));
    }
  }]);
  return Mx3dGeCSYSR;
}(Mx3dGeObject);
var Mx3dGeCylinder = /*#__PURE__*/function (_Mx3dGeObject13) {
  _inherits$1(Mx3dGeCylinder, _Mx3dGeObject13);
  var _super36 = _createSuper$2(Mx3dGeCylinder);
  function Mx3dGeCylinder(theA3, theRadius) {
    var _this29;
    _classCallCheck$1(this, Mx3dGeCylinder);
    if (!theA3) {
      _this29 = _super36.call(this);
      _this29.initTempObject(new MxApp3D.imp.Mx3dGeCylinder());
    } else if (theA3 instanceof Mx3dGeCSYS && typeof theRadius === "number") {
      _this29 = _super36.call(this);
      _this29.initTempObject(new MxApp3D.imp.Mx3dGeCylinder(theA3.getImp(), theRadius));
    } else {
      _this29 = _super36.call(this, theA3);
    }
    return _possibleConstructorReturn$1(_this29);
  }
  _createClass$1(Mx3dGeCylinder, [{
    key: "SetAxis",
    value: function SetAxis(theA1) {
      this.imp.SetAxis(theA1.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theLoc) {
      this.imp.SetLocation(theLoc.getImp());
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(theA3) {
      this.imp.SetPosition(theA3.getImp());
    }
  }, {
    key: "SetRadius",
    value: function SetRadius(theR) {
      this.imp.SetRadius(theR);
    }
  }, {
    key: "UReverse",
    value: function UReverse() {
      this.imp.UReverse();
    }
  }, {
    key: "VReverse",
    value: function VReverse() {
      this.imp.VReverse();
    }
  }, {
    key: "Direct",
    value: function Direct() {
      return this.imp.Direct();
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeCSYS(this.imp.Position());
    }
  }, {
    key: "Radius",
    value: function Radius() {
      return this.imp.Radius();
    }
  }, {
    key: "XAxis",
    value: function XAxis() {
      return new Mx3dGeAxis(this.imp.XAxis());
    }
  }, {
    key: "YAxis",
    value: function YAxis() {
      return new Mx3dGeAxis(this.imp.YAxis());
    }
  }, {
    key: "MirrorByPoint",
    value: function MirrorByPoint(theP) {
      this.imp.MirrorByPoint(theP.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(theP) {
      return new Mx3dGeCylinder(this.imp.MirroredByPoint(theP.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(theA1) {
      this.imp.MirrorByAxis(theA1.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(theA1) {
      return new Mx3dGeCylinder(this.imp.MirroredByAxis(theA1.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(theA2) {
      this.imp.MirrorByCSYSR(theA2.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(theA2) {
      return new Mx3dGeCylinder(this.imp.MirroredByCSYSR(theA2.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(theA1, theAng) {
      this.imp.Rotate(theA1.getImp(), theAng);
    }
  }, {
    key: "Rotated",
    value: function Rotated(theA1, theAng) {
      return new Mx3dGeCylinder(this.imp.Rotated(theA1.getImp(), theAng));
    }
  }, {
    key: "Scale",
    value: function Scale(theP, theS) {
      this.imp.Scale(theP.getImp(), theS);
    }
  }, {
    key: "Scaled",
    value: function Scaled(theP, theS) {
      return new Mx3dGeCylinder(this.imp.Scaled(theP.getImp(), theS));
    }
  }, {
    key: "Transform",
    value: function Transform(theT) {
      this.imp.Transform(theT.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(theT) {
      return new Mx3dGeCylinder(this.imp.Transformed(theT.getImp()));
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(theV) {
      this.imp.TranslatedByVec(theV.getImp());
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(theV) {
      return new Mx3dGeCylinder(this.imp.TranslatedByVec(theV.getImp()));
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(theP1, theP2) {
      this.imp.TranslateBy2Points(theP1.getImp(), theP2.getImp());
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(theP1, theP2) {
      return new Mx3dGeCylinder(this.imp.TranslatedBy2Points(theP1.getImp(), theP2.getImp()));
    }
  }, {
    key: "Shape",
    value: function Shape(H, Angle) {
      if (Angle) {
        return new Mx3dShapeObject(this.imp.Shape(H, Angle));
      } else {
        return new Mx3dShapeObject(this.imp.Shape(H));
      }
    }
  }]);
  return Mx3dGeCylinder;
}(Mx3dGeObject);
var MxNewMdGeArray1OfInteger = /*#__PURE__*/function (_Mx3dBaseObject11) {
  _inherits$1(MxNewMdGeArray1OfInteger, _Mx3dBaseObject11);
  var _super37 = _createSuper$2(MxNewMdGeArray1OfInteger);
  function MxNewMdGeArray1OfInteger(p1, p2) {
    var _this30;
    _classCallCheck$1(this, MxNewMdGeArray1OfInteger);
    if (arguments.length == 0) {
      _this30 = _super37.call(this);
      _this30.initTempObject(new MxApp3D.imp.MdGeArray1OfInteger());
    } else if (typeof p1 == "number" && arguments.length == 2) {
      _this30 = _super37.call(this);
      _this30.initTempObject(new MxApp3D.imp.MdGeArray1OfInteger(p1, p2));
    } else if (p1 instanceof Object && arguments.length == 1) {
      _this30 = _super37.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this30);
  }
  _createClass$1(MxNewMdGeArray1OfInteger, [{
    key: "Init",
    value: function Init(theInteger) {
      this.imp.Init(theInteger);
    }
  }, {
    key: "Size",
    value: function Size() {
      return this.imp.Size();
    }
  }, {
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "IsEmpty",
    value: function IsEmpty() {
      return this.imp.IsEmpty();
    }
  }, {
    key: "Lower",
    value: function Lower() {
      return this.imp.Lower();
    }
  }, {
    key: "Upper",
    value: function Upper() {
      return this.imp.Upper();
    }
  }, {
    key: "IsDeletable",
    value: function IsDeletable() {
      return this.imp.IsDeletable();
    }
  }, {
    key: "IsAllocated",
    value: function IsAllocated() {
      return this.imp.IsAllocated();
    }
  }, {
    key: "First",
    value: function First() {
      return this.imp.First();
    }
  }, {
    key: "Last",
    value: function Last() {
      return this.imp.Last();
    }
  }, {
    key: "Value",
    value: function Value(theIndex) {
      return this.imp.Value(theIndex);
    }
  }, {
    key: "SetValue",
    value: function SetValue(theIndex, theInteger) {
      this.imp.SetValue(theIndex, theInteger);
    }
  }, {
    key: "Resize",
    value: function Resize(theLower, theUpper, theToCopyData) {
      this.imp.Resize(theLower, theUpper, theToCopyData);
    }
  }]);
  return MxNewMdGeArray1OfInteger;
}(Mx3dBaseObject);
var Mx3dDbDocument = /*#__PURE__*/function (_Mx3dDbObject) {
  _inherits$1(Mx3dDbDocument, _Mx3dDbObject);
  var _super38 = _createSuper$2(Mx3dDbDocument);
  function Mx3dDbDocument(p1, p2) {
    var _this31;
    _classCallCheck$1(this, Mx3dDbDocument);
    if (!p1) {
      _this31 = _super38.call(this);
      _this31.initTempObject(new MxApp3D.imp.Mx3dDbDocument());
    } else if (p1 instanceof Object && p2 === "from view") {
      _this31 = _super38.call(this);
      _this31.initTempObject(p1);
    } else {
      _this31 = _super38.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this31);
  }
  _createClass$1(Mx3dDbDocument, [{
    key: "read",
    value: function read(theFile, theFormat) {
      var _this32 = this;
      var filePath = theFile.name;
      var aReader = new FileReader();
      return new Promise(function (res, rej) {
        aReader.onload = function () {
          var aDataArray = new Uint8Array(aReader.result);
          var len = aDataArray.length;
          var arrayPointer = MxApp3D.imp._malloc(len);
          var mx3dMapArray = new Uint8Array(MxApp3D.imp.HEAPU8.buffer, arrayPointer, len);
          mx3dMapArray.set(aDataArray);
          var funRes = function funRes(strPtr) {
            var str = getStrFromMemory(strPtr);
            console.log(str);
          };
          var funRej = function funRej(strPtr) {
            var str = getStrFromMemory(strPtr);
            console.log("failed load file: " + str);
          };
          var funResPtr = MxApp3D.imp.addFunction(funRes, "vp");
          var funRejPtr = MxApp3D.imp.addFunction(funRej, "vp");
          MxApp3D.imp.loadFileFromMemory("/" + filePath, arrayPointer, len, true, funResPtr, funRejPtr);
          MxApp3D.imp._free(arrayPointer);
          res(_this32.imp.read(filePath, theFormat));
        };
        aReader.onerror = function (err) {
          rej(err);
        };
        aReader.readAsArrayBuffer(theFile);
      });
    }
  }, {
    key: "readFile",
    value: function readFile(theFilePath, theFormat) {
      return this.imp.read(theFilePath, theFormat);
    }
  }, {
    key: "getAccessLabel",
    value: function getAccessLabel() {
      return new Mx3dDbLabel(this.imp.getAccessLabel());
    }
  }, {
    key: "getShapesLabel",
    value: function getShapesLabel() {
      return new Mx3dDbLabel(this.imp.getShapesLabel());
    }
  }, {
    key: "getColorsLabel",
    value: function getColorsLabel() {
      return new Mx3dDbLabel(this.imp.getColorsLabel());
    }
  }, {
    key: "getLayersLabel",
    value: function getLayersLabel() {
      return new Mx3dDbLabel(this.imp.getLayersLabel());
    }
  }, {
    key: "addShapeLabel",
    value: function addShapeLabel() {
      return new Mx3dDbLabel(this.imp.addShapeLabel());
    }
  }, {
    key: "removeShapeLabel",
    value: function removeShapeLabel(theLabel) {
      return this.imp.removeShapeLabel(theLabel.getImp());
    }
  }, {
    key: "removeComponent",
    value: function removeComponent(theLabel) {
      this.imp.removeComponent(theLabel.getImp());
    }
  }, {
    key: "getTopFreeLabels",
    value: function getTopFreeLabels() {
      var labelSq = new Mx3dLabelSequence(this.imp.getTopFreeLabels());
      var retArr = new Array();
      for (var i = 1; i <= labelSq.Length(); i++) {
        var label = labelSq.Value(i);
        retArr.push(label);
      }
      return retArr;
    }
  }, {
    key: "getDocName",
    value: function getDocName() {
      var intArr = new MxNewMdGeArray1OfInteger(this.imp.getDocName());
      var arr = [];
      for (var i = 1; i <= intArr.Length(); i++) {
        arr.push(intArr.Value(i));
      }
      return arr.map(function (num) {
        return String.fromCharCode(num);
      }).join("");
    }
  }, {
    key: "getView",
    value: function getView() {
      return new Mx3dView(this.imp.getView());
    }
  }, {
    key: "addColorLabel",
    value: function addColorLabel(theColor) {
      return new Mx3dDbLabel(this.imp.addColorLabel(theColor.getImp()));
    }
  }, {
    key: "write",
    value: function write(theFilePath, theFormat) {
      var status = this.imp.write(theFilePath, theFormat);
      if (!status) return status;
      var fileSize = MxApp3D.imp.getFileSize(theFilePath);
      if (fileSize == -1) {
        return false;
      }
      var fileBufferPointer = MxApp3D.imp.getFileArryBufferPointer(theFilePath);
      if (fileBufferPointer == 0) {
        return false;
      }
      var mx3dMapArray = new Uint8Array(MxApp3D.imp.HEAPU8.buffer, fileBufferPointer, fileSize);
      var blob = new Blob([mx3dMapArray], {
        type: "application/octet-stream"
      });
      MxTools.saveAsFileDialog({
        blob: blob,
        filename: theFilePath,
        types: []
      });
      MxApp3D.imp._free(fileBufferPointer);
      return true;
    }
  }, {
    key: "newCommand",
    value: function newCommand() {
      this.imp.newCommand();
    }
  }, {
    key: "abortCommand",
    value: function abortCommand() {
      this.imp.abortCommand();
    }
  }, {
    key: "commitCommand",
    value: function commitCommand() {
      return this.imp.commitCommand();
    }
  }, {
    key: "undo",
    value: function undo() {
      return this.imp.undo();
    }
  }, {
    key: "redo",
    value: function redo() {
      return this.imp.redo();
    }
  }]);
  return Mx3dDbDocument;
}(Mx3dDbObject);
var Mx3dDbLabel = /*#__PURE__*/function (_Mx3dDbObject2) {
  _inherits$1(Mx3dDbLabel, _Mx3dDbObject2);
  var _super39 = _createSuper$2(Mx3dDbLabel);
  function Mx3dDbLabel(p) {
    var _this33;
    _classCallCheck$1(this, Mx3dDbLabel);
    if (p) {
      _this33 = _super39.call(this, p);
    } else {
      _this33 = _super39.call(this);
      _this33.initTempObject(new MxApp3D.imp.Mx3dDbLabel());
    }
    return _possibleConstructorReturn$1(_this33);
  }
  _createClass$1(Mx3dDbLabel, [{
    key: "setShape",
    value: function setShape(theShape) {
      this.imp.setShape(theShape.getImp());
    }
  }, {
    key: "getShape",
    value: function getShape() {
      return new Mx3dShapeObject(this.imp.getShape());
    }
  }, {
    key: "hasChildLabel",
    value: function hasChildLabel() {
      return this.imp.hasChildLabel();
    }
  }, {
    key: "getChildLabels",
    value: function getChildLabels() {
      var labelSq = new Mx3dLabelSequence(this.imp.getChildLabels());
      var retArr = new Array();
      for (var i = 1; i <= labelSq.Length(); i++) {
        var label = labelSq.Value(i);
        retArr.push(label);
      }
      return retArr;
    }
  }, {
    key: "hasParentLabel",
    value: function hasParentLabel() {
      return this.imp.hasParentLabel();
    }
  }, {
    key: "getParentLabel",
    value: function getParentLabel() {
      return new Mx3dDbLabel(this.imp.getParentLabel());
    }
  }, {
    key: "addChildLabel",
    value: function addChildLabel() {
      return new Mx3dDbLabel(this.imp.addChildLabel());
    }
  }, {
    key: "addSubShape",
    value: function addSubShape(theShape) {
      return new Mx3dDbLabel(this.imp.addChildShape(theShape.getImp()));
    }
  }, {
    key: "isReference",
    value: function isReference() {
      return this.imp.isReference();
    }
  }, {
    key: "isAssembly",
    value: function isAssembly() {
      return this.imp.isAssembly();
    }
  }, {
    key: "isSimpleShape",
    value: function isSimpleShape() {
      return this.imp.isSimpleShape();
    }
  }, {
    key: "isTopLevel",
    value: function isTopLevel() {
      return this.imp.isTopLevel();
    }
  }, {
    key: "isFree",
    value: function isFree() {
      return this.imp.isFree();
    }
  }, {
    key: "isShape",
    value: function isShape() {
      return this.imp.isShape();
    }
  }, {
    key: "isComponent",
    value: function isComponent() {
      return this.imp.isComponent();
    }
  }, {
    key: "isCompound",
    value: function isCompound() {
      return this.imp.isCompound();
    }
  }, {
    key: "isSubShape",
    value: function isSubShape() {
      return this.imp.isSubShape();
    }
  }, {
    key: "getReferredLabel",
    value: function getReferredLabel() {
      return new Mx3dDbLabel(this.imp.getReferredLabel());
    }
  }, {
    key: "getLocation",
    value: function getLocation() {
      return new Mx3dGeLocation(this.imp.getLocation());
    }
  }, {
    key: "addComponent",
    value: function addComponent(comp, Loc) {
      return new Mx3dDbLabel(this.imp.addComponent(comp.getImp(), Loc.getImp()));
    }
  }, {
    key: "setName",
    value: function setName(theName) {
      this.imp.setName(theName);
    }
  }, {
    key: "hasShape",
    value: function hasShape() {
      return this.imp.hasShape();
    }
  }, {
    key: "isSetColor",
    value: function isSetColor() {
      return this.imp.isSetColor();
    }
  }, {
    key: "setColor",
    value: function setColor(theColor) {
      this.imp.setColor(theColor.getImp());
    }
  }, {
    key: "getColor",
    value: function getColor() {
      return new Mx3dGeColor(this.imp.getColor());
    }
  }, {
    key: "getName",
    value: function getName() {
      var intArr = new MxNewMdGeArray1OfInteger(this.imp.getName());
      var arr = [];
      for (var i = 1; i <= intArr.Length(); i++) {
        arr.push(intArr.Value(i));
      }
      return arr.map(function (num) {
        return String.fromCharCode(num);
      }).join("");
    }
  }, {
    key: "getEntry",
    value: function getEntry() {
      return this.imp.getEntry();
    }
  }, {
    key: "getAttributeStr",
    value: function getAttributeStr() {
      return this.imp.getAttributeStr();
    }
  }, {
    key: "setTexture",
    value: function setTexture(theFilePath) {
      var theScaleU = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var theScaleV = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var theRepeatU = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var theRepeatV = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var theOriginU = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var theOriginV = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      this.imp.setTexture(theFilePath, theScaleU, theScaleV, theRepeatU, theRepeatV, theOriginU, theOriginV);
    }
  }, {
    key: "setMaterial",
    value: function setMaterial(theMaterial) {
      this.imp.setMaterial(theMaterial.getImp());
    }
  }]);
  return Mx3dDbLabel;
}(Mx3dDbObject);
var Mx3dLabelSequence = /*#__PURE__*/function (_Mx3dBaseObject12) {
  _inherits$1(Mx3dLabelSequence, _Mx3dBaseObject12);
  var _super40 = _createSuper$2(Mx3dLabelSequence);
  function Mx3dLabelSequence(p) {
    var _this34;
    _classCallCheck$1(this, Mx3dLabelSequence);
    if (p) {
      _this34 = _super40.call(this, p);
    } else {
      _this34 = _super40.call(this);
      _this34.initTempObject(new MxApp3D.imp.Mx3dLabelSequence());
    }
    return _possibleConstructorReturn$1(_this34);
  }
  _createClass$1(Mx3dLabelSequence, [{
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "Value",
    value: function Value(theIndex) {
      return new Mx3dDbLabel(this.imp.Value(theIndex));
    }
  }]);
  return Mx3dLabelSequence;
}(Mx3dBaseObject);
var Mx3dGeLocation = /*#__PURE__*/function (_Mx3dGeObject14) {
  _inherits$1(Mx3dGeLocation, _Mx3dGeObject14);
  var _super41 = _createSuper$2(Mx3dGeLocation);
  function Mx3dGeLocation(p) {
    var _this35;
    _classCallCheck$1(this, Mx3dGeLocation);
    if (!p) {
      _this35 = _super41.call(this);
      _this35.initTempObject(new MxApp3D.imp.Mx3dGeLocation());
    } else if (p instanceof Mx3dGeTrsf) {
      _this35 = _super41.call(this);
      _this35.initTempObject(new MxApp3D.imp.Mx3dGeLocation(p.getImp()));
    } else {
      _this35 = _super41.call(this, p);
    }
    return _possibleConstructorReturn$1(_this35);
  }
  _createClass$1(Mx3dGeLocation, [{
    key: "IsIdentity",
    value: function IsIdentity() {
      return this.imp.IsIdentity();
    }
  }, {
    key: "Identity",
    value: function Identity() {
      this.imp.Identity();
    }
  }, {
    key: "FirstPower",
    value: function FirstPower() {
      return this.imp.FirstPower();
    }
  }, {
    key: "NextLocation",
    value: function NextLocation() {
      return new Mx3dGeLocation(this.imp.NextLocation());
    }
  }, {
    key: "Inverted",
    value: function Inverted() {
      return new Mx3dGeLocation(this.imp.Inverted());
    }
  }, {
    key: "Multiplied",
    value: function Multiplied(theLocation) {
      return new Mx3dGeLocation(this.imp.Multiplied(theLocation.getImp()));
    }
  }, {
    key: "Divided",
    value: function Divided(Other) {
      return new Mx3dGeLocation(this.imp.Divided(Other.getImp()));
    }
  }, {
    key: "Predivided",
    value: function Predivided(Other) {
      return new Mx3dGeLocation(this.imp.Predivided(Other.getImp()));
    }
  }, {
    key: "Powered",
    value: function Powered(pwr) {
      return new Mx3dGeLocation(this.imp.Powered(pwr));
    }
  }, {
    key: "IsEqual",
    value: function IsEqual(Other) {
      return this.imp.IsEqual(Other.getImp());
    }
  }, {
    key: "IsDifferent",
    value: function IsDifferent(Other) {
      return this.imp.IsDifferent(Other.getImp());
    }
  }, {
    key: "Clear",
    value: function Clear() {
      this.imp.Clear();
    }
  }, {
    key: "ScalePrec",
    value: function ScalePrec() {
      return this.imp.ScalePrec();
    }
  }]);
  return Mx3dGeLocation;
}(Mx3dGeObject);
var Mx3dGePlane = /*#__PURE__*/function (_Mx3dGeObject15) {
  _inherits$1(Mx3dGePlane, _Mx3dGeObject15);
  var _super42 = _createSuper$2(Mx3dGePlane);
  function Mx3dGePlane(theA, theB, theC, theD) {
    var _this36;
    _classCallCheck$1(this, Mx3dGePlane);
    if (!theA) {
      _this36 = _super42.call(this);
      _this36.initTempObject(new MxApp3D.imp.Mx3dGePlane());
    } else if (theA instanceof Mx3dGeCSYS) {
      _this36 = _super42.call(this);
      _this36.initTempObject(new MxApp3D.imp.Mx3dGePlane(theA.getImp()));
    } else if (theA instanceof Mx3dGePoint && theB instanceof Mx3dGeDir) {
      _this36 = _super42.call(this);
      _this36.initTempObject(new MxApp3D.imp.Mx3dGePlane(theA.getImp(), theB.getImp()));
    } else if (typeof theA === "number" && typeof theB === "number" && typeof theC === "number" && typeof theD === "number") {
      _this36 = _super42.call(this);
      _this36.initTempObject(new MxApp3D.imp.Mx3dGePlane(theA, theB, theC, theD));
    } else if (theA instanceof Object) {
      _this36 = _super42.call(this, theA);
    }
    return _possibleConstructorReturn$1(_this36);
  }
  _createClass$1(Mx3dGePlane, [{
    key: "SetAxis",
    value: function SetAxis(theA1) {
      this.imp.SetAxis(theA1.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theLoc) {
      this.imp.SetLocation(theLoc.getImp());
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(theA3) {
      this.imp.SetPosition(theA3.getImp());
    }
  }, {
    key: "UReverse",
    value: function UReverse() {
      this.imp.UReverse();
    }
  }, {
    key: "VReverse",
    value: function VReverse() {
      this.imp.VReverse();
    }
  }, {
    key: "Direct",
    value: function Direct() {
      return this.imp.Direct();
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeCSYS(this.imp.Position());
    }
  }, {
    key: "DistanceToPoint",
    value: function DistanceToPoint(theP) {
      return this.imp.DistanceToPoint(theP.getImp());
    }
  }, {
    key: "DistanceToPlane",
    value: function DistanceToPlane(theOther) {
      return this.imp.DistanceToPlane(theOther.getImp());
    }
  }, {
    key: "SquareDistanceToPoint",
    value: function SquareDistanceToPoint(theP) {
      return this.imp.SquareDistanceToPoint(theP.getImp());
    }
  }, {
    key: "SquareDistanceToPlane",
    value: function SquareDistanceToPlane(theOther) {
      return this.imp.SquareDistanceToPlane(theOther.getImp());
    }
  }, {
    key: "XAxis",
    value: function XAxis() {
      return new Mx3dGeAxis(this.imp.XAxis());
    }
  }, {
    key: "YAxis",
    value: function YAxis() {
      return new Mx3dGeAxis(this.imp.YAxis());
    }
  }, {
    key: "Contains",
    value: function Contains(theP, theLinearTolerance) {
      return this.imp.Contains(theP.getImp(), theLinearTolerance);
    }
  }, {
    key: "MirrorByPoint",
    value: function MirrorByPoint(theP) {
      this.imp.MirrorByPoint(theP.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(theP) {
      return new Mx3dGePlane(this.imp.MirroredByPoint(theP.getImp()));
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(theA1) {
      this.imp.MirrorByAxis(theA1.getImp());
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(theA1) {
      return new Mx3dGePlane(this.imp.MirroredByAxis(theA1.getImp()));
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(theA2) {
      this.imp.MirrorByCSYSR(theA2.getImp());
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(theA2) {
      return new Mx3dGePlane(this.imp.MirroredByCSYSR(theA2.getImp()));
    }
  }, {
    key: "Rotate",
    value: function Rotate(theA1, theAng) {
      this.imp.Rotate(theA1.getImp(), theAng);
    }
  }, {
    key: "Rotated",
    value: function Rotated(theA1, theAng) {
      return new Mx3dGePlane(this.imp.Rotated(theA1.getImp(), theAng));
    }
  }, {
    key: "Scale",
    value: function Scale(theP, theS) {
      this.imp.Scale(theP.getImp(), theS);
    }
  }, {
    key: "Scaled",
    value: function Scaled(theP, theS) {
      return new Mx3dGePlane(this.imp.Scaled(theP.getImp(), theS));
    }
  }, {
    key: "Transform",
    value: function Transform(theT) {
      this.imp.Transform(theT.getImp());
    }
  }, {
    key: "Transformed",
    value: function Transformed(theT) {
      return new Mx3dGePlane(this.imp.Transformed(theT.getImp()));
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(theV) {
      this.imp.TranslateByVec(theV.getImp());
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(theV) {
      return new Mx3dGePlane(this.imp.TranslatedByVec(theV.getImp()));
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(theP1, theP2) {
      this.imp.TranslateBy2Points(theP1.getImp(), theP2.getImp());
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(theP1, theP2) {
      return new Mx3dGePlane(this.imp.TranslatedBy2Points(theP1.getImp(), theP2.getImp()));
    }
  }, {
    key: "Shape",
    value: function Shape(UMin, UMax, VMin, VMax) {
      if (!UMin) {
        return new Mx3dShapeObject(this.imp.Shape());
      }
      return new Mx3dShapeObject(this.imp.Shape(UMin, UMax, VMin, VMax));
    }
  }]);
  return Mx3dGePlane;
}(Mx3dGeObject);
var Mx3dSymbolText = /*#__PURE__*/function (_Mx3dSymbolObject) {
  _inherits$1(Mx3dSymbolText, _Mx3dSymbolObject);
  var _super43 = _createSuper$2(Mx3dSymbolText);
  function Mx3dSymbolText(text, height, position) {
    var _this37;
    _classCallCheck$1(this, Mx3dSymbolText);
    if (!text) {
      _this37 = _super43.call(this);
      _this37.initTempObject(new MxApp3D.imp.Mx3dSymbolText());
    } else if (typeof text === "string" && typeof height === "number" && position instanceof Mx3dGePoint) {
      _this37 = _super43.call(this);
      _this37.initTempObject(new MxApp3D.imp.Mx3dSymbolText(text, height, position.getImp()));
    } else if (text instanceof Object) {
      _this37 = _super43.call(this, text);
    }
    return _possibleConstructorReturn$1(_this37);
  }
  _createClass$1(Mx3dSymbolText, [{
    key: "SetColor",
    value: function SetColor(theR, theG, theB) {
      if (theR instanceof Mx3dGeColor) {
        this.imp.SetColor(theR.getImp());
      } else {
        this.imp.SetColor(theR, theG, theB);
      }
    }
  }, {
    key: "SetText",
    value: function SetText(text) {
      this.imp.SetText(text);
    }
  }, {
    key: "SetPositon",
    value: function SetPositon(position) {
      this.imp.SetPositon(position.getImp());
    }
  }, {
    key: "SetHJustification",
    value: function SetHJustification(theHJust) {
      this.imp.SetHJustification(theHJust);
    }
  }, {
    key: "SetVJustification",
    value: function SetVJustification(theVJust) {
      this.imp.SetVJustification(theVJust);
    }
  }, {
    key: "SetAngle",
    value: function SetAngle(theAngle) {
      this.imp.SetAngle(theAngle);
    }
  }, {
    key: "SetZoomable",
    value: function SetZoomable(theIsZoomable) {
      this.imp.SetZoomable(theIsZoomable);
    }
  }, {
    key: "SetHeight",
    value: function SetHeight(height) {
      this.imp.SetHeight(height);
    }
  }, {
    key: "SetFontAspect",
    value: function SetFontAspect(theFontAspect) {
      this.imp.SetFontAspect(theFontAspect);
    }
  }, {
    key: "SetFont",
    value: function SetFont(theFont) {
      this.imp.SetFont(theFont);
    }
  }, {
    key: "SetOrientation3D",
    value: function SetOrientation3D(theOrientation) {
      this.imp.SetOrientation3D(theOrientation.getImp());
    }
  }, {
    key: "UnsetOrientation3D",
    value: function UnsetOrientation3D() {
      this.imp.UnsetOrientation3D();
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGePoint(this.imp.Position());
    }
  }, {
    key: "FontAspect",
    value: function FontAspect() {
      return this.imp.FontAspect();
    }
  }, {
    key: "Orientation3D",
    value: function Orientation3D() {
      return new Mx3dGeCSYSR(this.imp.Orientation3D());
    }
  }, {
    key: "HasOrientation3D",
    value: function HasOrientation3D() {
      return this.imp.HasOrientation3D();
    }
  }, {
    key: "SetFlipping",
    value: function SetFlipping(theIsFlipping) {
      this.imp.SetFlipping(theIsFlipping);
    }
  }, {
    key: "HasFlipping",
    value: function HasFlipping() {
      return this.imp.HasFlipping();
    }
  }, {
    key: "HasOwnAnchorPoint",
    value: function HasOwnAnchorPoint() {
      return this.imp.HasOwnAnchorPoint();
    }
  }, {
    key: "SetOwnAnchorPoint",
    value: function SetOwnAnchorPoint(theOwnAnchorPoint) {
      this.imp.SetOwnAnchorPoint(theOwnAnchorPoint);
    }
  }, {
    key: "SetDisplayType",
    value: function SetDisplayType(theDisplayType) {
      this.imp.SetDisplayType(theDisplayType);
    }
  }, {
    key: "SetColorSubTitle",
    value: function SetColorSubTitle(theR, theG, theB) {
      this.imp.SetColorSubTitle(theR, theG, theB);
    }
  }]);
  return Mx3dSymbolText;
}(Mx3dSymbolObject);
var Mx3dShapeDownCast = /*#__PURE__*/function () {
  function Mx3dShapeDownCast() {
    _classCallCheck$1(this, Mx3dShapeDownCast);
  }
  _createClass$1(Mx3dShapeDownCast, null, [{
    key: "Vertex",
    value: function Vertex(S) {
      return new Mx3dShapeVertex(MxApp3D.globalMethods.Vertex(S.getImp()));
    }
  }, {
    key: "Edge",
    value: function Edge(S) {
      return new Mx3dShapeEdge(MxApp3D.globalMethods.Edge(S.getImp()));
    }
  }, {
    key: "Wire",
    value: function Wire(S) {
      return new Mx3dShapeWire(MxApp3D.globalMethods.Wire(S.getImp()));
    }
  }, {
    key: "Face",
    value: function Face(S) {
      return new Mx3dShapeFace(MxApp3D.globalMethods.Face(S.getImp()));
    }
  }, {
    key: "Shell",
    value: function Shell(S) {
      return new Mx3dShapeShell(MxApp3D.globalMethods.Shell(S.getImp()));
    }
  }, {
    key: "Solid",
    value: function Solid(S) {
      return new Mx3dShapeSolid(MxApp3D.globalMethods.Solid(S.getImp()));
    }
  }, {
    key: "CompSolid",
    value: function CompSolid(S) {
      return new Mx3dShapeCompSolid(MxApp3D.globalMethods.CompSolid(S.getImp()));
    }
  }, {
    key: "Compound",
    value: function Compound(S) {
      return new Mx3dShapeCompound(MxApp3D.globalMethods.Compound(S.getImp()));
    }
  }]);
  return Mx3dShapeDownCast;
}();
var Mx3dBrepCastGeom = /*#__PURE__*/function () {
  function Mx3dBrepCastGeom() {
    _classCallCheck$1(this, Mx3dBrepCastGeom);
  }
  _createClass$1(Mx3dBrepCastGeom, null, [{
    key: "Surface",
    value: function Surface(F) {
      return new Mx3dGeomSurface(MxApp3D.globalMethods.Surface(F.getImp()));
    }
  }, {
    key: "Curve",
    value: function Curve(E, SEParam) {
      var arr = new MxApp3D.imp.MdGeArray1OfReal(1, 2);
      var curve = MxApp3D.globalMethods.Curve(E.getImp(), arr);
      SEParam[0] = arr.Value(1);
      SEParam[1] = arr.Value(2);
      return new Mx3dGeomCurve(curve);
    }
  }]);
  return Mx3dBrepCastGeom;
}();
function getStrFromMemory(strPtr) {
  var cppIntArr = MxApp3D.globalMethods.getStrFromMemory(strPtr);
  var arr = [];
  for (var i = 1; i <= cppIntArr.Length(); i++) {
    arr.push(cppIntArr.Value(i));
  }
  return arr.map(function (num) {
    return String.fromCharCode(num);
  }).join("");
}
var Mx3dUtils = /*#__PURE__*/function () {
  function Mx3dUtils() {
    _classCallCheck$1(this, Mx3dUtils);
  }
  _createClass$1(Mx3dUtils, null, [{
    key: "LoadFileFromUrl",
    value: function LoadFileFromUrl(theFileUrl, theSaveFileName) {
      return new Promise(function (res, rej) {
        var funRes = function funRes(strPtr) {
          var str = getStrFromMemory(strPtr);
          res(str);
        };
        var funRej = function funRej(strPtr) {
          var str = getStrFromMemory(strPtr);
          rej("failed load file: " + str);
        };
        var funResPtr = MxApp3D.imp.addFunction(funRes, "vp");
        var funRejPtr = MxApp3D.imp.addFunction(funRej, "vp");
        MxApp3D.globalMethods.LoadFileFromUrl(theFileUrl, theSaveFileName, funResPtr, funRejPtr);
      });
    }
  }, {
    key: "LoadShapeFromFile",
    value: function LoadShapeFromFile(theFilePath, theFormat) {
      var ret = [];
      var cppArrShape = MxApp3D.globalMethods.LoadShapeFromFile(theFilePath, theFormat);
      for (var i = 1; i <= cppArrShape.Length(); i++) {
        ret.push(new Mx3dShapeObject(cppArrShape.Value(i)));
      }
      return ret;
    }
  }, {
    key: "LoadLocalFile",
    value: function LoadLocalFile(theFile, theFilePath) {
      var aReader = new FileReader();
      return new Promise(function (res, rej) {
        aReader.onload = function () {
          var aDataArray = new Uint8Array(aReader.result);
          var len = aDataArray.length;
          var arrayPointer = MxApp3D.imp._malloc(len);
          var mx3dMapArray = new Uint8Array(MxApp3D.imp.HEAPU8.buffer, arrayPointer, len);
          mx3dMapArray.set(aDataArray);
          var funRes = function funRes(strPtr) {
            var str = getStrFromMemory(strPtr);
            res(str);
          };
          var funRej = function funRej(strPtr) {
            var str = getStrFromMemory(strPtr);
            rej("failed load file: " + str);
          };
          var funResPtr = MxApp3D.imp.addFunction(funRes, "vp");
          var funRejPtr = MxApp3D.imp.addFunction(funRej, "vp");
          MxApp3D.imp.loadFileFromMemory(theFilePath, arrayPointer, len, true, funResPtr, funRejPtr);
          MxApp3D.imp._free(arrayPointer);
        };
        aReader.onerror = function (err) {
          rej(err);
        };
        aReader.readAsArrayBuffer(theFile);
      });
    }
  }]);
  return Mx3dUtils;
}();
var Mx3dGeLine = /*#__PURE__*/function (_Mx3dGeCurve2) {
  _inherits$1(Mx3dGeLine, _Mx3dGeCurve2);
  var _super44 = _createSuper$2(Mx3dGeLine);
  function Mx3dGeLine(P, V) {
    var _this38;
    _classCallCheck$1(this, Mx3dGeLine);
    if (P instanceof Mx3dGeAxis) {
      _this38 = _super44.call(this);
      _this38.initTempObject(new MxApp3D.imp.Mx3dGeLine(P.getImp()));
    } else if (P instanceof Mx3dGePoint && V instanceof Mx3dGeDir) {
      _this38 = _super44.call(this);
      _this38.initTempObject(new MxApp3D.imp.Mx3dGeLine(P.getImp(), V.getImp()));
    } else {
      _this38 = _super44.call(this, P);
    }
    return _possibleConstructorReturn$1(_this38);
  }
  _createClass$1(Mx3dGeLine, [{
    key: "SetDirection",
    value: function SetDirection(V) {
      this.imp.SetDirection(V.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(P) {
      this.imp.SetLocation(P.getImp());
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(A1) {
      this.imp.SetPosition(A1.getImp());
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeAxis(this.imp.Position());
    }
  }, {
    key: "Reverse",
    value: function Reverse() {
      this.imp.Reverse();
    }
  }, {
    key: "Reversed",
    value: function Reversed() {
      return new Mx3dGeLine(this.imp.Reversed());
    }
  }, {
    key: "ReversedParameter",
    value: function ReversedParameter(U) {
      return this.imp.ReversedParameter(U);
    }
  }, {
    key: "FirstParameter",
    value: function FirstParameter() {
      return this.imp.FirstParameter();
    }
  }, {
    key: "LastParameter",
    value: function LastParameter() {
      return this.imp.LastParameter();
    }
  }, {
    key: "IsClosed",
    value: function IsClosed() {
      return this.imp.IsClosed();
    }
  }, {
    key: "IsPeriodic",
    value: function IsPeriodic() {
      return this.imp.IsPeriodic();
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "IsCN",
    value: function IsCN(N) {
      return this.imp.IsCN(N);
    }
  }, {
    key: "D0",
    value: function D0(U, P) {
      this.imp.D0(U, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, P, V1) {
      this.imp.D1(U, P.getImp(), V1.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, P, V1, V2) {
      this.imp.D2(U, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, P, V1, V2, V3) {
      this.imp.D3(U, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, N) {
      return new Mx3dGeVec(this.imp.DN(U, N));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "TransformedParameter",
    value: function TransformedParameter(U, T) {
      return this.imp.TransformedParameter(U, T.getImp());
    }
  }, {
    key: "ParametricTransformation",
    value: function ParametricTransformation(T) {
      return this.imp.ParametricTransformation(T.getImp());
    }
  }, {
    key: "Period",
    value: function Period() {
      return this.imp.Period();
    }
  }, {
    key: "Value",
    value: function Value(U) {
      return new Mx3dGePoint(this.imp.Value(U));
    }
  }, {
    key: "Edge",
    value: function Edge(p1, p2) {
      return new Mx3dShapeEdge(this.imp.Edge(p1, p2));
    }
  }]);
  return Mx3dGeLine;
}(Mx3dGeCurve);
var Mx3dGeomObject = /*#__PURE__*/function (_Mx3dBaseObject13) {
  _inherits$1(Mx3dGeomObject, _Mx3dBaseObject13);
  var _super45 = _createSuper$2(Mx3dGeomObject);
  function Mx3dGeomObject(p) {
    _classCallCheck$1(this, Mx3dGeomObject);
    return _super45.call(this, p);
  }
  _createClass$1(Mx3dGeomObject, [{
    key: "MirrorByPoint",
    value: function MirrorByPoint(P) {
      this.imp.MirrorByPoint(P.getImp());
    }
  }, {
    key: "MirrorByAxis",
    value: function MirrorByAxis(A1) {
      this.imp.MirrorByAxis(A1.getImp());
    }
  }, {
    key: "MirrorByCSYSR",
    value: function MirrorByCSYSR(A2) {
      this.imp.MirrorByCSYSR(A2.getImp());
    }
  }, {
    key: "Rotate",
    value: function Rotate(A1, Ang) {
      this.imp.Rotate(A1.getImp(), Ang);
    }
  }, {
    key: "Scale",
    value: function Scale(P, S) {
      this.imp.Scale(P.getImp(), S);
    }
  }, {
    key: "TranslateByVec",
    value: function TranslateByVec(V) {
      this.imp.TranslateByVec(V.getImp());
    }
  }, {
    key: "TranslateBy2Points",
    value: function TranslateBy2Points(P1, P2) {
      this.imp.TranslateBy2Points(P1.getImp(), P2.getImp());
    }
  }, {
    key: "MirroredByPoint",
    value: function MirroredByPoint(P) {
      return this.DynCast(new Mx3dGeomObject(this.imp.MirroredByPoint(P.getImp())));
    }
  }, {
    key: "MirroredByAxis",
    value: function MirroredByAxis(A1) {
      return this.DynCast(new Mx3dGeomObject(this.imp.MirroredByAxis(A1.getImp())));
    }
  }, {
    key: "MirroredByCSYSR",
    value: function MirroredByCSYSR(A2) {
      return this.DynCast(new Mx3dGeomObject(this.imp.MirroredByCSYSR(A2.getImp())));
    }
  }, {
    key: "Rotated",
    value: function Rotated(A1, Ang) {
      return this.DynCast(new Mx3dGeomObject(this.imp.Rotated(A1.getImp(), Ang)));
    }
  }, {
    key: "Scaled",
    value: function Scaled(P, S) {
      return this.DynCast(new Mx3dGeomObject(this.imp.Scaled(P.getImp(), S)));
    }
  }, {
    key: "Transformed",
    value: function Transformed(T) {
      return this.DynCast(new Mx3dGeomObject(this.imp.Transformed(T.getImp())));
    }
  }, {
    key: "TranslatedByVec",
    value: function TranslatedByVec(V) {
      return this.DynCast(new Mx3dGeomObject(this.imp.TranslatedByVec(V.getImp())));
    }
  }, {
    key: "TranslatedBy2Points",
    value: function TranslatedBy2Points(P1, P2) {
      return this.DynCast(new Mx3dGeomObject(this.imp.TranslatedBy2Points(P1.getImp(), P2.getImp())));
    }
  }]);
  return Mx3dGeomObject;
}(Mx3dBaseObject);
var Mx3dGeomCurve = /*#__PURE__*/function (_Mx3dGeomObject) {
  _inherits$1(Mx3dGeomCurve, _Mx3dGeomObject);
  var _super46 = _createSuper$2(Mx3dGeomCurve);
  function Mx3dGeomCurve(p) {
    _classCallCheck$1(this, Mx3dGeomCurve);
    return _super46.call(this, p);
  }
  _createClass$1(Mx3dGeomCurve, [{
    key: "Reversed",
    value: function Reversed() {
      return this.DynCast(new Mx3dGeomCurve(this.imp.Reversed()));
    }
  }, {
    key: "Period",
    value: function Period() {
      return this.imp.Period();
    }
  }, {
    key: "Value",
    value: function Value(U) {
      return new Mx3dGePoint(U);
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }]);
  return Mx3dGeomCurve;
}(Mx3dGeomObject);
var Mx3dGeomConic = /*#__PURE__*/function (_Mx3dGeomCurve) {
  _inherits$1(Mx3dGeomConic, _Mx3dGeomCurve);
  var _super47 = _createSuper$2(Mx3dGeomConic);
  function Mx3dGeomConic(p) {
    _classCallCheck$1(this, Mx3dGeomConic);
    return _super47.call(this, p);
  }
  _createClass$1(Mx3dGeomConic, [{
    key: "SetAxis",
    value: function SetAxis(theA1) {
      this.imp.SetAxis(theA1.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theP) {
      this.imp.SetLocation(theP.getImp());
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(theA2) {
      this.imp.SetPosition(theA2.getImp());
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeCSYSR(this.imp.Position());
    }
  }, {
    key: "XAxis",
    value: function XAxis() {
      return new Mx3dGeAxis(this.imp.XAxis());
    }
  }, {
    key: "YAxis",
    value: function YAxis() {
      return new Mx3dGeAxis(this.imp.YAxis());
    }
  }, {
    key: "Reverse",
    value: function Reverse() {
      this.imp.Reverse();
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "IsCN",
    value: function IsCN(N) {
      return this.imp.IsCN(N);
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }]);
  return Mx3dGeomConic;
}(Mx3dGeomCurve);
var Mx3dGeomCircle = /*#__PURE__*/function (_Mx3dGeomConic) {
  _inherits$1(Mx3dGeomCircle, _Mx3dGeomConic);
  var _super48 = _createSuper$2(Mx3dGeomCircle);
  function Mx3dGeomCircle(theCSYSR, theRadius) {
    var _this39;
    _classCallCheck$1(this, Mx3dGeomCircle);
    if (theCSYSR instanceof Mx3dGeCSYSR && typeof theRadius === "number") {
      _this39 = _super48.call(this);
      _this39.initTempObject(new MxApp3D.imp.Mx3dGeomCircle(theCSYSR.getImp(), theRadius));
    } else {
      _this39 = _super48.call(this, theCSYSR);
    }
    return _possibleConstructorReturn$1(_this39);
  }
  _createClass$1(Mx3dGeomCircle, [{
    key: "SetRadius",
    value: function SetRadius(R) {
      this.imp.SetRadius(R);
    }
  }, {
    key: "Radius",
    value: function Radius() {
      return this.imp.Radius();
    }
  }, {
    key: "ReversedParameter",
    value: function ReversedParameter(U) {
      return this.imp.ReversedParameter(U);
    }
  }, {
    key: "Eccentricity",
    value: function Eccentricity() {
      return this.imp.Eccentricity();
    }
  }, {
    key: "FirstParameter",
    value: function FirstParameter() {
      return this.imp.FirstParameter();
    }
  }, {
    key: "LastParameter",
    value: function LastParameter() {
      return this.imp.LastParameter();
    }
  }, {
    key: "IsClosed",
    value: function IsClosed() {
      return this.imp.IsClosed();
    }
  }, {
    key: "IsPeriodic",
    value: function IsPeriodic() {
      return this.imp.IsPeriodic();
    }
  }, {
    key: "D0",
    value: function D0(U, P) {
      this.imp.D0(U, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, P, V1) {
      this.imp.D1(U, P.getImp(), V1.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, P, V1, V2) {
      this.imp.D2(U, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, P, V1, V2, V3) {
      this.imp.D3(U, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, N) {
      return new Mx3dGeVec(this.imp.DN(U, N));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "Edge",
    value: function Edge(p1, p2) {
      return new Mx3dShapeEdge(this.imp.Edge(p1, p2));
    }
  }, {
    key: "Wire",
    value: function Wire() {
      return new Mx3dShapeWire(this.imp.Wire());
    }
  }, {
    key: "OffsetCurve",
    value: function OffsetCurve(Offset, V, isNotCheckC0) {
      return new Mx3dShapeEdge(this.imp.OffsetCurve(Offset, V.getImp(), isNotCheckC0));
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomCircle(MxApp3D.globalMethods.DynCastToCircle(theObject.getImp()));
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }], [{
    key: "MakeArcOfCircle",
    value: function MakeArcOfCircle(thePt1, thePt2, thePt3) {
      thePt1 = uniToPoint(thePt1);
      thePt2 = uniToPoint(thePt2);
      thePt3 = uniToPoint(thePt3);
      return new Mx3dShapeEdge(MxApp3D.globalMethods.MakeArcOfCircle(thePt1.getImp(), thePt2.getImp(), thePt3.getImp()));
    }
  }, {
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomCircle(MxApp3D.globalMethods.DynCastToCircle(theObject.getImp()));
    }
  }]);
  return Mx3dGeomCircle;
}(Mx3dGeomConic);
var Mx3dGeomLine = /*#__PURE__*/function (_Mx3dGeomCurve2) {
  _inherits$1(Mx3dGeomLine, _Mx3dGeomCurve2);
  var _super49 = _createSuper$2(Mx3dGeomLine);
  function Mx3dGeomLine(P, V) {
    var _this40;
    _classCallCheck$1(this, Mx3dGeomLine);
    if (P instanceof Mx3dGeAxis) {
      _this40 = _super49.call(this);
      _this40.initTempObject(new MxApp3D.imp.Mx3dGeomLine(P.getImp()));
    } else if (P instanceof Mx3dGePoint && V instanceof Mx3dGeDir) {
      _this40 = _super49.call(this);
      _this40.initTempObject(new MxApp3D.imp.Mx3dGeomLine(P.getImp(), V.getImp()));
    } else {
      _this40 = _super49.call(this, P);
    }
    return _possibleConstructorReturn$1(_this40);
  }
  _createClass$1(Mx3dGeomLine, [{
    key: "SetDirection",
    value: function SetDirection(V) {
      this.imp.SetDirection(V.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(P) {
      this.imp.SetLocation(P.getImp());
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(A1) {
      this.imp.SetPosition(A1.getImp());
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeAxis(this.imp.Position());
    }
  }, {
    key: "Reverse",
    value: function Reverse() {
      this.imp.Reverse();
    }
  }, {
    key: "ReversedParameter",
    value: function ReversedParameter(U) {
      return this.imp.ReversedParameter(U);
    }
  }, {
    key: "FirstParameter",
    value: function FirstParameter() {
      return this.imp.FirstParameter();
    }
  }, {
    key: "LastParameter",
    value: function LastParameter() {
      return this.imp.LastParameter();
    }
  }, {
    key: "IsClosed",
    value: function IsClosed() {
      return this.imp.IsClosed();
    }
  }, {
    key: "IsPeriodic",
    value: function IsPeriodic() {
      return this.imp.IsPeriodic();
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "IsCN",
    value: function IsCN(N) {
      return this.imp.IsCN(N);
    }
  }, {
    key: "D0",
    value: function D0(U, P) {
      this.imp.D0(U, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, P, V1) {
      this.imp.D1(U, P.getImp(), V1.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, P, V1, V2) {
      this.imp.D2(U, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, P, V1, V2, V3) {
      this.imp.D3(U, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, N) {
      return new Mx3dGeVec(this.imp.DN(U, N));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "TransformedParameter",
    value: function TransformedParameter(U, T) {
      return this.imp.TransformedParameter(U, T.getImp());
    }
  }, {
    key: "ParametricTransformation",
    value: function ParametricTransformation(T) {
      return this.imp.ParametricTransformation(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "Edge",
    value: function Edge(p1, p2) {
      return new Mx3dShapeEdge(this.imp.Edge(p1, p2));
    }
  }, {
    key: "OffsetCurve",
    value: function OffsetCurve(Offset, V, isNotCheckC0) {
      return new Mx3dShapeEdge(this.imp.OffsetCurve(Offset, V.getImp(), isNotCheckC0));
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomLine(MxApp3D.globalMethods.DynCastToLine(theObject.getImp()));
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomLine(MxApp3D.globalMethods.DynCastToLine(theObject.getImp()));
    }
  }]);
  return Mx3dGeomLine;
}(Mx3dGeomCurve);
var Mx3dGeomEllipse = /*#__PURE__*/function (_Mx3dGeomConic2) {
  _inherits$1(Mx3dGeomEllipse, _Mx3dGeomConic2);
  var _super50 = _createSuper$2(Mx3dGeomEllipse);
  function Mx3dGeomEllipse(A2, MajorRadius, MinorRadius) {
    var _this41;
    _classCallCheck$1(this, Mx3dGeomEllipse);
    if (A2 instanceof Mx3dGeCSYSR && typeof MajorRadius === "number" && typeof MinorRadius === "number") {
      _this41 = _super50.call(this);
      _this41.initTempObject(new MxApp3D.imp.Mx3dGeomEllipse(A2.getImp(), MajorRadius, MinorRadius));
    } else {
      _this41 = _super50.call(this, A2);
    }
    return _possibleConstructorReturn$1(_this41);
  }
  _createClass$1(Mx3dGeomEllipse, [{
    key: "SetMajorRadius",
    value: function SetMajorRadius(MajorRadius) {
      this.imp.SetMajorRadius(MajorRadius);
    }
  }, {
    key: "SetMinorRadius",
    value: function SetMinorRadius(MinorRadius) {
      this.imp.SetMinorRadius(MinorRadius);
    }
  }, {
    key: "ReversedParameter",
    value: function ReversedParameter(U) {
      return this.imp.ReversedParameter(U);
    }
  }, {
    key: "Directrix1",
    value: function Directrix1() {
      return new Mx3dGeAxis(this.imp.Directrix1());
    }
  }, {
    key: "Directrix2",
    value: function Directrix2() {
      return new Mx3dGeAxis(this.imp.Directrix2());
    }
  }, {
    key: "Eccentricity",
    value: function Eccentricity() {
      return this.imp.Eccentricity();
    }
  }, {
    key: "Focal",
    value: function Focal() {
      return this.imp.Focal();
    }
  }, {
    key: "Focus1",
    value: function Focus1() {
      return new Mx3dGePoint(this.imp.Focus1());
    }
  }, {
    key: "Focus2",
    value: function Focus2() {
      return new Mx3dGePoint(this.imp.Focus2());
    }
  }, {
    key: "MajorRadius",
    value: function MajorRadius() {
      return this.imp.MajorRadius();
    }
  }, {
    key: "MinorRadius",
    value: function MinorRadius() {
      return this.imp.MinorRadius();
    }
  }, {
    key: "Parameter",
    value: function Parameter() {
      return this.imp.Parameter();
    }
  }, {
    key: "FirstParameter",
    value: function FirstParameter() {
      return this.imp.FirstParameter();
    }
  }, {
    key: "LastParameter",
    value: function LastParameter() {
      return this.imp.LastParameter();
    }
  }, {
    key: "IsClosed",
    value: function IsClosed() {
      return this.imp.IsClosed();
    }
  }, {
    key: "IsPeriodic",
    value: function IsPeriodic() {
      return this.imp.IsPeriodic();
    }
  }, {
    key: "D0",
    value: function D0(U, P) {
      this.imp.D0(U, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, P, V1) {
      this.imp.D1(U, P.getImp(), V1.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, P, V1, V2) {
      this.imp.D2(U, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, P, V1, V2, V3) {
      this.imp.D3(U, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, N) {
      return new Mx3dGeVec(this.imp.DN(U, N));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "Edge",
    value: function Edge(p1, p2) {
      return new Mx3dShapeEdge(this.imp.Edge(p1, p2));
    }
  }, {
    key: "Wire",
    value: function Wire() {
      return new Mx3dShapeWire(this.imp.Wire());
    }
  }, {
    key: "OffsetCurve",
    value: function OffsetCurve(Offset, V, isNotCheckC0) {
      return new Mx3dShapeEdge(this.imp.OffsetCurve(Offset, V.getImp(), isNotCheckC0));
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomEllipse(MxApp3D.globalMethods.DynCastToEllipse(theObject.getImp()));
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomEllipse(MxApp3D.globalMethods.DynCastToEllipse(theObject.getImp()));
    }
  }]);
  return Mx3dGeomEllipse;
}(Mx3dGeomConic);
var Mx3dGeomHyperbola = /*#__PURE__*/function (_Mx3dGeomConic3) {
  _inherits$1(Mx3dGeomHyperbola, _Mx3dGeomConic3);
  var _super51 = _createSuper$2(Mx3dGeomHyperbola);
  function Mx3dGeomHyperbola(A2, MajorRadius, MinorRadius) {
    var _this42;
    _classCallCheck$1(this, Mx3dGeomHyperbola);
    if (A2 instanceof Mx3dGeCSYSR && typeof MajorRadius === "number" && typeof MinorRadius === "number") {
      _this42 = _super51.call(this);
      _this42.initTempObject(new MxApp3D.imp.Mx3dGeomHyperbola(A2.getImp(), MajorRadius, MinorRadius));
    } else {
      _this42 = _super51.call(this, A2);
    }
    return _possibleConstructorReturn$1(_this42);
  }
  _createClass$1(Mx3dGeomHyperbola, [{
    key: "SetMajorRadius",
    value: function SetMajorRadius(MajorRadius) {
      this.imp.SetMajorRadius(MajorRadius);
    }
  }, {
    key: "SetMinorRadius",
    value: function SetMinorRadius(MinorRadius) {
      this.imp.SetMinorRadius(MinorRadius);
    }
  }, {
    key: "ReversedParameter",
    value: function ReversedParameter(U) {
      return this.imp.ReversedParameter(U);
    }
  }, {
    key: "FirstParameter",
    value: function FirstParameter() {
      return this.imp.FirstParameter();
    }
  }, {
    key: "LastParameter",
    value: function LastParameter() {
      return this.imp.LastParameter();
    }
  }, {
    key: "IsClosed",
    value: function IsClosed() {
      return this.imp.IsClosed();
    }
  }, {
    key: "IsPeriodic",
    value: function IsPeriodic() {
      return this.imp.IsPeriodic();
    }
  }, {
    key: "Asymptote1",
    value: function Asymptote1() {
      return new Mx3dGeAxis(this.imp.Asymptote1());
    }
  }, {
    key: "Asymptote2",
    value: function Asymptote2() {
      return new Mx3dGeAxis(this.imp.Asymptote2());
    }
  }, {
    key: "ConjugateBranch1",
    value: function ConjugateBranch1() {
      return new Mx3dGeomHyperbola(this.imp.ConjugateBranch1());
    }
  }, {
    key: "ConjugateBranch2",
    value: function ConjugateBranch2() {
      return new Mx3dGeomHyperbola(this.imp.ConjugateBranch2());
    }
  }, {
    key: "Directrix1",
    value: function Directrix1() {
      return new Mx3dGeAxis(this.imp.Directrix1());
    }
  }, {
    key: "Directrix2",
    value: function Directrix2() {
      return new Mx3dGeAxis(this.imp.Directrix2());
    }
  }, {
    key: "Eccentricity",
    value: function Eccentricity() {
      return this.imp.Eccentricity();
    }
  }, {
    key: "Focal",
    value: function Focal() {
      return this.imp.Focal();
    }
  }, {
    key: "Focus1",
    value: function Focus1() {
      return new Mx3dGePoint(this.imp.Focus1());
    }
  }, {
    key: "Focus2",
    value: function Focus2() {
      return new Mx3dGePoint(this.imp.Focus2());
    }
  }, {
    key: "MajorRadius",
    value: function MajorRadius() {
      return this.imp.MajorRadius();
    }
  }, {
    key: "MinorRadius",
    value: function MinorRadius() {
      return this.imp.MinorRadius();
    }
  }, {
    key: "OtherBranch",
    value: function OtherBranch() {
      return new Mx3dGeomHyperbola(this.imp.OtherBranch());
    }
  }, {
    key: "Parameter",
    value: function Parameter() {
      return this.imp.Parameter();
    }
  }, {
    key: "D0",
    value: function D0(U, P) {
      this.imp.D0(U, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, P, V1) {
      this.imp.D1(U, P.getImp(), V1.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, P, V1, V2) {
      this.imp.D2(U, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, P, V1, V2, V3) {
      this.imp.D3(U, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, N) {
      return new Mx3dGeVec(this.imp.DN(U, N));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "Edge",
    value: function Edge(p1, p2) {
      return new Mx3dShapeEdge(this.imp.Edge(p1, p2));
    }
  }, {
    key: "OffsetCurve",
    value: function OffsetCurve(Offset, V, isNotCheckC0) {
      return new Mx3dShapeEdge(this.imp.OffsetCurve(Offset, V.getImp(), isNotCheckC0));
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomHyperbola(MxApp3D.globalMethods.DynCastToHyperbola(theObject.getImp()));
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomHyperbola(MxApp3D.globalMethods.DynCastToHyperbola(theObject.getImp()));
    }
  }]);
  return Mx3dGeomHyperbola;
}(Mx3dGeomConic);
var Mx3dGeomParabola = /*#__PURE__*/function (_Mx3dGeomConic4) {
  _inherits$1(Mx3dGeomParabola, _Mx3dGeomConic4);
  var _super52 = _createSuper$2(Mx3dGeomParabola);
  function Mx3dGeomParabola(D, F) {
    var _this43;
    _classCallCheck$1(this, Mx3dGeomParabola);
    if (D instanceof Mx3dGeCSYSR && typeof F === "number") {
      _this43 = _super52.call(this);
      _this43.initTempObject(new MxApp3D.imp.Mx3dGeomParabola(D.getImp(), F));
    } else {
      _this43 = _super52.call(this, D);
    }
    return _possibleConstructorReturn$1(_this43);
  }
  _createClass$1(Mx3dGeomParabola, [{
    key: "SetFocal",
    value: function SetFocal(Focal) {
      this.imp.SetFocal(Focal);
    }
  }, {
    key: "ReversedParameter",
    value: function ReversedParameter(U) {
      return this.imp.ReversedParameter(U);
    }
  }, {
    key: "FirstParameter",
    value: function FirstParameter() {
      return this.imp.FirstParameter();
    }
  }, {
    key: "LastParameter",
    value: function LastParameter() {
      return this.imp.LastParameter();
    }
  }, {
    key: "IsClosed",
    value: function IsClosed() {
      return this.imp.IsClosed();
    }
  }, {
    key: "IsPeriodic",
    value: function IsPeriodic() {
      return this.imp.IsPeriodic();
    }
  }, {
    key: "Directrix",
    value: function Directrix() {
      return new Mx3dGeAxis(this.imp.Directrix());
    }
  }, {
    key: "Eccentricity",
    value: function Eccentricity() {
      return this.imp.Eccentricity();
    }
  }, {
    key: "Focus",
    value: function Focus() {
      return new Mx3dGePoint(this.imp.Focus());
    }
  }, {
    key: "Focal",
    value: function Focal() {
      return this.imp.Focal();
    }
  }, {
    key: "Parameter",
    value: function Parameter() {
      return this.imp.Parameter();
    }
  }, {
    key: "D0",
    value: function D0(U, P) {
      this.imp.D0(U, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, P, V1) {
      this.imp.D1(U, P.getImp(), V1.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, P, V1, V2) {
      this.imp.D2(U, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, P, V1, V2, V3) {
      this.imp.D3(U, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, N) {
      return new Mx3dGeVec(this.imp.DN(U, N));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "TransformedParameter",
    value: function TransformedParameter(U, T) {
      return this.imp.TransformedParameter(U, T.getImp());
    }
  }, {
    key: "ParametricTransformation",
    value: function ParametricTransformation(T) {
      return this.imp.ParametricTransformation(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "Edge",
    value: function Edge(p1, p2) {
      return new Mx3dShapeEdge(this.imp.Edge(p1, p2));
    }
  }, {
    key: "OffsetCurve",
    value: function OffsetCurve(Offset, V, isNotCheckC0) {
      return new Mx3dShapeEdge(this.imp.OffsetCurve(Offset, V.getImp(), isNotCheckC0));
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomParabola(MxApp3D.globalMethods.DynCastToParabola(theObject.getImp()));
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomParabola(MxApp3D.globalMethods.DynCastToParabola(theObject.getImp()));
    }
  }]);
  return Mx3dGeomParabola;
}(Mx3dGeomConic);
var Mx3dMkObject = /*#__PURE__*/function (_Mx3dBaseObject14) {
  _inherits$1(Mx3dMkObject, _Mx3dBaseObject14);
  var _super53 = _createSuper$2(Mx3dMkObject);
  function Mx3dMkObject(p) {
    _classCallCheck$1(this, Mx3dMkObject);
    return _super53.call(this, p);
  }
  return _createClass$1(Mx3dMkObject);
}(Mx3dBaseObject);
var Mx3dMkBox = /*#__PURE__*/function (_Mx3dMkObject) {
  _inherits$1(Mx3dMkBox, _Mx3dMkObject);
  var _super54 = _createSuper$2(Mx3dMkBox);
  function Mx3dMkBox(theAxes, theDX, theDY, theDZ) {
    var _this44;
    _classCallCheck$1(this, Mx3dMkBox);
    if (isUniPoint(theAxes) && isUniPoint(theDX)) {
      _this44 = _super54.call(this);
      var a = uniToPoint(theAxes);
      var dx = uniToPoint(theDX);
      _this44.initTempObject(new MxApp3D.imp.Mx3dMkBox(a.getImp(), dx.getImp()));
    } else if (typeof theAxes === "number" && typeof theDX === "number" && typeof theDY === "number") {
      _this44 = _super54.call(this);
      _this44.initTempObject(new MxApp3D.imp.Mx3dMkBox(theAxes, theDX, theDY));
    } else if (theAxes instanceof Mx3dGeCSYSR && typeof theDX === "number" && typeof theDY === "number" && typeof theDZ === "number") {
      _this44 = _super54.call(this);
      _this44.initTempObject(new MxApp3D.imp.Mx3dMkBox(theAxes.getImp(), theDX, theDY, theDZ));
    } else if (theAxes instanceof Object) {
      _this44 = _super54.call(this, theAxes);
    }
    return _possibleConstructorReturn$1(_this44);
  }
  _createClass$1(Mx3dMkBox, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "Shell",
    value: function Shell() {
      return new Mx3dShapeShell(this.imp.Shell());
    }
  }, {
    key: "Solid",
    value: function Solid() {
      return new Mx3dShapeSolid(this.imp.Solid());
    }
  }, {
    key: "BottomFace",
    value: function BottomFace() {
      return new Mx3dShapeFace(this.imp.BottomFace());
    }
  }, {
    key: "BackFace",
    value: function BackFace() {
      return new Mx3dShapeFace(this.imp.BackFace());
    }
  }, {
    key: "FrontFace",
    value: function FrontFace() {
      return new Mx3dShapeFace(this.imp.FrontFace());
    }
  }, {
    key: "LeftFace",
    value: function LeftFace() {
      return new Mx3dShapeFace(this.imp.LeftFace());
    }
  }, {
    key: "RightFace",
    value: function RightFace() {
      return new Mx3dShapeFace(this.imp.RightFace());
    }
  }, {
    key: "TopFace",
    value: function TopFace() {
      return new Mx3dShapeFace(this.imp.TopFace());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkBox;
}(Mx3dMkObject);
var Mx3dMkCone = /*#__PURE__*/function (_Mx3dMkObject2) {
  _inherits$1(Mx3dMkCone, _Mx3dMkObject2);
  var _super55 = _createSuper$2(Mx3dMkCone);
  function Mx3dMkCone(Axes, R1, R2, H, angle) {
    var _this45;
    _classCallCheck$1(this, Mx3dMkCone);
    if (Axes instanceof Mx3dGeCSYSR && !angle) {
      _this45 = _super55.call(this);
      _this45.initTempObject(new MxApp3D.imp.Mx3dMkCone(Axes.getImp(), R1, R2, H));
    } else if (Axes instanceof Mx3dGeCSYSR && angle) {
      _this45 = _super55.call(this);
      _this45.initTempObject(new MxApp3D.imp.Mx3dMkCone(Axes.getImp(), R1, R2, H, angle));
    } else if (Axes instanceof Object) {
      _this45 = _super55.call(this, Axes);
    }
    return _possibleConstructorReturn$1(_this45);
  }
  _createClass$1(Mx3dMkCone, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "Face",
    value: function Face() {
      return new Mx3dShapeFace(this.imp.Face());
    }
  }, {
    key: "Shell",
    value: function Shell() {
      return new Mx3dShapeShell(this.imp.Shell());
    }
  }, {
    key: "Solid",
    value: function Solid() {
      return new Mx3dShapeSolid(this.imp.Solid());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkCone;
}(Mx3dMkObject);
var Mx3dMkCylinder = /*#__PURE__*/function (_Mx3dMkObject3) {
  _inherits$1(Mx3dMkCylinder, _Mx3dMkObject3);
  var _super56 = _createSuper$2(Mx3dMkCylinder);
  function Mx3dMkCylinder(Axes, R, H, Angle) {
    var _this46;
    _classCallCheck$1(this, Mx3dMkCylinder);
    if (Axes instanceof Mx3dGeCSYSR && !Angle) {
      _this46 = _super56.call(this);
      _this46.initTempObject(new MxApp3D.imp.Mx3dMkCylinder(Axes.getImp(), R, H));
    } else if (Axes instanceof Mx3dGeCSYSR && Angle) {
      _this46 = _super56.call(this);
      _this46.initTempObject(new MxApp3D.imp.Mx3dMkCylinder(Axes.getImp(), R, H, Angle));
    } else if (Axes instanceof Object) {
      _this46 = _super56.call(this, Axes);
    }
    return _possibleConstructorReturn$1(_this46);
  }
  _createClass$1(Mx3dMkCylinder, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "Face",
    value: function Face() {
      return new Mx3dShapeFace(this.imp.Face());
    }
  }, {
    key: "Shell",
    value: function Shell() {
      return new Mx3dShapeShell(this.imp.Shell());
    }
  }, {
    key: "Solid",
    value: function Solid() {
      return new Mx3dShapeSolid(this.imp.Solid());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkCylinder;
}(Mx3dMkObject);
var Mx3dMkRevol = /*#__PURE__*/function (_Mx3dMkObject4) {
  _inherits$1(Mx3dMkRevol, _Mx3dMkObject4);
  var _super57 = _createSuper$2(Mx3dMkRevol);
  function Mx3dMkRevol(S, A, D) {
    var _this47;
    _classCallCheck$1(this, Mx3dMkRevol);
    if (S instanceof Mx3dShapeObject && !D) {
      _this47 = _super57.call(this);
      _this47.initTempObject(new MxApp3D.imp.Mx3dMkRevol(S.getImp(), A.getImp()));
    } else if (S instanceof Mx3dShapeObject && D) {
      _this47 = _super57.call(this);
      _this47.initTempObject(new MxApp3D.imp.Mx3dMkRevol(S.getImp(), A.getImp(), D));
    } else if (S instanceof Object) {
      _this47 = _super57.call(this, S);
    }
    return _possibleConstructorReturn$1(_this47);
  }
  _createClass$1(Mx3dMkRevol, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkRevol;
}(Mx3dMkObject);
var Mx3dMkSphere = /*#__PURE__*/function (_Mx3dMkObject5) {
  _inherits$1(Mx3dMkSphere, _Mx3dMkObject5);
  var _super58 = _createSuper$2(Mx3dMkSphere);
  function Mx3dMkSphere(Axes, R, angle1, angle2, angle3) {
    var _this48;
    _classCallCheck$1(this, Mx3dMkSphere);
    if (Axes instanceof Mx3dGeCSYSR && arguments.length === 2) {
      _this48 = _super58.call(this);
      _this48.initTempObject(new MxApp3D.imp.Mx3dMkSphere(Axes.getImp(), R));
    } else if (Axes instanceof Mx3dGeCSYSR && arguments.length === 3) {
      _this48 = _super58.call(this);
      _this48.initTempObject(new MxApp3D.imp.Mx3dMkSphere(Axes.getImp(), R, angle1));
    } else if (Axes instanceof Mx3dGeCSYSR && arguments.length === 4) {
      _this48 = _super58.call(this);
      _this48.initTempObject(new MxApp3D.imp.Mx3dMkSphere(Axes.getImp(), R, angle1, angle2));
    } else if (Axes instanceof Mx3dGeCSYSR && arguments.length === 5) {
      _this48 = _super58.call(this);
      _this48.initTempObject(new MxApp3D.imp.Mx3dMkSphere(Axes.getImp(), R, angle1, angle2, angle3));
    } else if (Axes instanceof Object) {
      _this48 = _super58.call(this, Axes);
    }
    return _possibleConstructorReturn$1(_this48);
  }
  _createClass$1(Mx3dMkSphere, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "Face",
    value: function Face() {
      return new Mx3dShapeFace(this.imp.Face());
    }
  }, {
    key: "Shell",
    value: function Shell() {
      return new Mx3dShapeShell(this.imp.Shell());
    }
  }, {
    key: "Solid",
    value: function Solid() {
      return new Mx3dShapeSolid(this.imp.Solid());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkSphere;
}(Mx3dMkObject);
var Mx3dMkTorus = /*#__PURE__*/function (_Mx3dMkObject6) {
  _inherits$1(Mx3dMkTorus, _Mx3dMkObject6);
  var _super59 = _createSuper$2(Mx3dMkTorus);
  function Mx3dMkTorus(Axes, R1, R2, angle1, angle2, angle) {
    var _this49;
    _classCallCheck$1(this, Mx3dMkTorus);
    if (Axes instanceof Mx3dGeCSYSR && arguments.length === 3) {
      _this49 = _super59.call(this);
      _this49.initTempObject(new MxApp3D.imp.Mx3dMkTorus(Axes.getImp(), R1, R2));
    } else if (Axes instanceof Mx3dGeCSYSR && arguments.length === 4) {
      _this49 = _super59.call(this);
      _this49.initTempObject(new MxApp3D.imp.Mx3dMkTorus(Axes.getImp(), R1, R2, angle1));
    } else if (Axes instanceof Mx3dGeCSYSR && arguments.length === 5) {
      _this49 = _super59.call(this);
      _this49.initTempObject(new MxApp3D.imp.Mx3dMkTorus(Axes.getImp(), R1, R2, angle1, angle2));
    } else if (Axes instanceof Mx3dGeCSYSR && arguments.length === 6) {
      _this49 = _super59.call(this);
      _this49.initTempObject(new MxApp3D.imp.Mx3dMkTorus(Axes.getImp(), R1, R2, angle1, angle2, angle));
    } else if (Axes instanceof Object) {
      _this49 = _super59.call(this, Axes);
    }
    return _possibleConstructorReturn$1(_this49);
  }
  _createClass$1(Mx3dMkTorus, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "Face",
    value: function Face() {
      return new Mx3dShapeFace(this.imp.Face());
    }
  }, {
    key: "Shell",
    value: function Shell() {
      return new Mx3dShapeShell(this.imp.Shell());
    }
  }, {
    key: "Solid",
    value: function Solid() {
      return new Mx3dShapeSolid(this.imp.Solid());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkTorus;
}(Mx3dMkObject);
var Mx3dMkPipe = /*#__PURE__*/function (_Mx3dMkObject7) {
  _inherits$1(Mx3dMkPipe, _Mx3dMkObject7);
  var _super60 = _createSuper$2(Mx3dMkPipe);
  function Mx3dMkPipe(Spine, Profile, aMode, ForceApproxC1) {
    var _this50;
    _classCallCheck$1(this, Mx3dMkPipe);
    if (Spine instanceof Mx3dShapeWire && Profile instanceof Mx3dShapeObject && typeof aMode === "number" && typeof ForceApproxC1 === "boolean") {
      _this50 = _super60.call(this);
      _this50.initTempObject(new MxApp3D.imp.Mx3dMkPipe(Spine.getImp(), Profile.getImp(), aMode, ForceApproxC1));
    } else if (Spine instanceof Mx3dShapeWire && Profile instanceof Mx3dShapeObject) {
      _this50 = _super60.call(this);
      _this50.initTempObject(new MxApp3D.imp.Mx3dMkPipe(Spine.getImp(), Profile.getImp()));
    } else if (Spine instanceof Object) {
      _this50 = _super60.call(this, Spine);
    }
    return _possibleConstructorReturn$1(_this50);
  }
  _createClass$1(Mx3dMkPipe, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkPipe;
}(Mx3dMkObject);
var Mx3dMkPipeShell = /*#__PURE__*/function (_Mx3dMkObject8) {
  _inherits$1(Mx3dMkPipeShell, _Mx3dMkObject8);
  var _super61 = _createSuper$2(Mx3dMkPipeShell);
  function Mx3dMkPipeShell(Spine) {
    var _this51;
    _classCallCheck$1(this, Mx3dMkPipeShell);
    _this51 = _super61.call(this);
    _this51.initTempObject(new MxApp3D.imp.Mx3dMkPipeShell(Spine.getImp()));
    return _this51;
  }
  _createClass$1(Mx3dMkPipeShell, [{
    key: "SetTransitionMode",
    value: function SetTransitionMode(Mode) {
      this.imp.SetTransitionMode(Mode);
    }
  }, {
    key: "Add",
    value: function Add(Profile) {
      this.imp.Add(Profile.getImp());
    }
  }, {
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "MakeSolid",
    value: function MakeSolid() {
      return this.imp.MakeSolid();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkPipeShell;
}(Mx3dMkObject);
var Mx3dMkPrism = /*#__PURE__*/function (_Mx3dMkObject9) {
  _inherits$1(Mx3dMkPrism, _Mx3dMkObject9);
  var _super62 = _createSuper$2(Mx3dMkPrism);
  function Mx3dMkPrism(S, D) {
    var _this52;
    _classCallCheck$1(this, Mx3dMkPrism);
    if (S instanceof Mx3dShapeObject && D instanceof Mx3dGeVec) {
      _this52 = _super62.call(this);
      _this52.initTempObject(new MxApp3D.imp.Mx3dMkPrism(S.getImp(), D.getImp(), false, true));
    } else if (S instanceof Mx3dShapeObject && D instanceof Mx3dGeDir) {
      _this52 = _super62.call(this);
      _this52.initTempObject(new MxApp3D.imp.Mx3dMkPrism(S.getImp(), D.getImp(), true, false, true));
    } else if (S instanceof Object) {
      _this52 = _super62.call(this, S);
    }
    return _possibleConstructorReturn$1(_this52);
  }
  _createClass$1(Mx3dMkPrism, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkPrism;
}(Mx3dMkObject);
var Mx3dMkWedge = /*#__PURE__*/function (_Mx3dMkObject10) {
  _inherits$1(Mx3dMkWedge, _Mx3dMkObject10);
  var _super63 = _createSuper$2(Mx3dMkWedge);
  function Mx3dMkWedge(Axes, dx, dy, dz, xmin, zmin, xmax, zmax) {
    var _this53;
    _classCallCheck$1(this, Mx3dMkWedge);
    if (typeof Axes === "number" && arguments.length === 4) {
      _this53 = _super63.call(this);
      _this53.initTempObject(new MxApp3D.imp.Mx3dMkWedge(Axes, dx, dy, dz));
    } else if (Axes instanceof Mx3dGeCSYSR && arguments.length === 5) {
      _this53 = _super63.call(this);
      _this53.initTempObject(new MxApp3D.imp.Mx3dMkWedge(Axes.getImp(), dx, dy, dz, xmin));
    } else if (typeof Axes === "number" && arguments.length === 7) {
      _this53 = _super63.call(this);
      _this53.initTempObject(new MxApp3D.imp.Mx3dMkWedge(Axes, dx, dy, dz, xmin, zmin, xmax));
    } else if (Axes instanceof Mx3dGeCSYSR && arguments.length === 8) {
      _this53 = _super63.call(this);
      _this53.initTempObject(new MxApp3D.imp.Mx3dMkWedge(Axes.getImp(), dx, dy, dz, xmin, zmin, xmax, zmax));
    } else if (Axes instanceof Object) {
      _this53 = _super63.call(this, Axes);
    }
    return _possibleConstructorReturn$1(_this53);
  }
  _createClass$1(Mx3dMkWedge, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "Shell",
    value: function Shell() {
      return new Mx3dShapeShell(this.imp.Shell());
    }
  }, {
    key: "Solid",
    value: function Solid() {
      return new Mx3dShapeSolid(this.imp.Solid());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkWedge;
}(Mx3dMkObject);
var Mx3dMkLoft = /*#__PURE__*/function (_Mx3dMkObject11) {
  _inherits$1(Mx3dMkLoft, _Mx3dMkObject11);
  var _super64 = _createSuper$2(Mx3dMkLoft);
  function Mx3dMkLoft(isSolid, ruled, pres3d) {
    var _this54;
    _classCallCheck$1(this, Mx3dMkLoft);
    if (arguments.length === 0) {
      _this54 = _super64.call(this);
      _this54.initTempObject(new MxApp3D.imp.Mx3dMkLoft());
    } else if (typeof isSolid === "boolean" && arguments.length === 1) {
      _this54 = _super64.call(this);
      _this54.initTempObject(new MxApp3D.imp.Mx3dMkLoft(isSolid));
    } else if (typeof isSolid === "boolean" && typeof ruled === "boolean" && arguments.length === 2) {
      _this54 = _super64.call(this);
      _this54.initTempObject(new MxApp3D.imp.Mx3dMkLoft(isSolid, ruled));
    } else if (typeof isSolid === "boolean" && typeof ruled === "boolean" && typeof pres3d === "number") {
      _this54 = _super64.call(this);
      _this54.initTempObject(new MxApp3D.imp.Mx3dMkLoft(isSolid, ruled, pres3d));
    } else if (isSolid instanceof Object) {
      _this54 = _super64.call(this, isSolid);
    }
    return _possibleConstructorReturn$1(_this54);
  }
  _createClass$1(Mx3dMkLoft, [{
    key: "AddWire",
    value: function AddWire(wire) {
      this.imp.AddWire(wire.getImp());
    }
  }, {
    key: "AddVertex",
    value: function AddVertex(aVertex) {
      this.imp.AddVertex(aVertex.getImp());
    }
  }, {
    key: "SetSmoothing",
    value: function SetSmoothing(UseSmoothing) {
      this.imp.SetSmoothing(UseSmoothing);
    }
  }, {
    key: "SetContinuity",
    value: function SetContinuity(C) {
      this.imp.SetContinuity(C);
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "UseSmoothing",
    value: function UseSmoothing() {
      return this.imp.UseSmoothing();
    }
  }, {
    key: "Build",
    value: function Build() {
      return this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkLoft;
}(Mx3dMkObject);
var Mx3dMkPolygon = /*#__PURE__*/function (_Mx3dMkObject12) {
  _inherits$1(Mx3dMkPolygon, _Mx3dMkObject12);
  var _super65 = _createSuper$2(Mx3dMkPolygon);
  function Mx3dMkPolygon(p) {
    var _this55;
    _classCallCheck$1(this, Mx3dMkPolygon);
    if (!p) {
      _this55 = _super65.call(this);
      _this55.initTempObject(new MxApp3D.imp.Mx3dMkPolygon());
    } else {
      _this55 = _super65.call(this, p);
    }
    return _possibleConstructorReturn$1(_this55);
  }
  _createClass$1(Mx3dMkPolygon, [{
    key: "Add",
    value: function Add(P) {
      this.imp.Add(P.getImp());
    }
  }, {
    key: "Added",
    value: function Added() {
      return this.imp.Added();
    }
  }, {
    key: "Close",
    value: function Close() {
      this.imp.Close();
    }
  }, {
    key: "FirstVertex",
    value: function FirstVertex() {
      return new Mx3dShapeVertex(this.imp.FirstVertex());
    }
  }, {
    key: "LastVertex",
    value: function LastVertex() {
      return new Mx3dShapeVertex(this.imp.LastVertex());
    }
  }, {
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }, {
    key: "Edge",
    value: function Edge() {
      return new Mx3dShapeEdge(this.imp.Edge());
    }
  }, {
    key: "Wire",
    value: function Wire() {
      return new Mx3dShapeWire(this.imp.Wire());
    }
  }]);
  return Mx3dMkPolygon;
}(Mx3dMkObject);
var Mx3dMkFace = /*#__PURE__*/function (_Mx3dMkObject13) {
  _inherits$1(Mx3dMkFace, _Mx3dMkObject13);
  var _super66 = _createSuper$2(Mx3dMkFace);
  function Mx3dMkFace(theWire) {
    var _this56;
    var OnlyPlane = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    _classCallCheck$1(this, Mx3dMkFace);
    if (theWire instanceof Mx3dShapeWire) {
      _this56 = _super66.call(this);
      _this56.initTempObject(new MxApp3D.imp.Mx3dMkFace(theWire.getImp(), OnlyPlane));
    } else {
      _this56 = _super66.call(this);
      _this56.initTempObject(new MxApp3D.imp.Mx3dMkFace(theWire.getImp()));
    }
    return _possibleConstructorReturn$1(_this56);
  }
  _createClass$1(Mx3dMkFace, [{
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "Face",
    value: function Face() {
      return new Mx3dShapeFace(this.imp.Face());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }, {
    key: "Add",
    value: function Add(W) {
      this.imp.Add(W.getImp());
    }
  }]);
  return Mx3dMkFace;
}(Mx3dMkObject);
var Mx3dMkThickSolid = /*#__PURE__*/function (_Mx3dMkObject14) {
  _inherits$1(Mx3dMkThickSolid, _Mx3dMkObject14);
  var _super67 = _createSuper$2(Mx3dMkThickSolid);
  function Mx3dMkThickSolid() {
    var _this57;
    _classCallCheck$1(this, Mx3dMkThickSolid);
    _this57 = _super67.call(this);
    _this57.initTempObject(new MxApp3D.imp.Mx3dMkThickSolid());
    return _this57;
  }
  _createClass$1(Mx3dMkThickSolid, [{
    key: "MakeThickSolidBySimple",
    value: function MakeThickSolidBySimple(theS, theOffsetValue) {
      this.imp.MakeThickSolidBySimple(theS.getImp(), theOffsetValue);
    }
  }, {
    key: "MakeThickSolidByJoin",
    value: function MakeThickSolidByJoin(S, ClosingFaces, Offset, Tol) {
      var Mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : MdGe.MxOffsetModeEnum.Offset_Skin;
      var Intersection = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      var SelfInter = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
      var Join = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : MdGe.MxGAJoinTypeEnum.GA_Arc;
      var RemoveIntEdges = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;
      var faces = arrShapeToShapeSequence(ClosingFaces);
      this.imp.MakeThickSolidByJoin(S.getImp(), faces.getImp(), Offset, Tol, Mode, Intersection, SelfInter, Join, RemoveIntEdges);
    }
  }, {
    key: "Build",
    value: function Build() {
      this.imp.Build();
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dMkThickSolid;
}(Mx3dMkObject);
var Mx3dWireTool = /*#__PURE__*/function () {
  function Mx3dWireTool() {
    _classCallCheck$1(this, Mx3dWireTool);
  }
  _createClass$1(Mx3dWireTool, null, [{
    key: "ConnectEdgesToWires",
    value: function ConnectEdgesToWires(edges) {
      var toler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-6;
      var shared = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var paramShapeSeq = new Mx3dShapeObjectSequence();
      edges.forEach(function (e) {
        return paramShapeSeq.Append(e);
      });
      var retShapeSeq = new Mx3dShapeObjectSequence(MxApp3D.globalMethods.ConnectEdgesToWires(paramShapeSeq.getImp(), toler, shared));
      var retShapeArray = new Array();
      for (var i = 1; i <= retShapeSeq.Length(); i++) {
        retShapeArray.push(retShapeSeq.Value(i));
      }
      return retShapeArray;
    }
  }, {
    key: "ConnectWiresToWires",
    value: function ConnectWiresToWires(wires) {
      var toler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-6;
      var shared = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var paramShapeSeq = new Mx3dShapeObjectSequence();
      wires.forEach(function (w) {
        return paramShapeSeq.Append(w);
      });
      var retShapeSeq = new Mx3dShapeObjectSequence(MxApp3D.globalMethods.ConnectWiresToWires(paramShapeSeq.getImp(), toler, shared));
      var retShapeArray = new Array();
      for (var i = 1; i <= retShapeSeq.Length(); i++) {
        retShapeArray.push(retShapeSeq.Value(i));
      }
      return retShapeArray;
    }
  }, {
    key: "EdgeToWire",
    value: function EdgeToWire(theEdge) {
      return new Mx3dShapeWire(MxApp3D.globalMethods.EdgeToWire(theEdge.getImp()));
    }
  }]);
  return Mx3dWireTool;
}();
var MxNewMdGeArray1OfReal = /*#__PURE__*/function (_Mx3dBaseObject15) {
  _inherits$1(MxNewMdGeArray1OfReal, _Mx3dBaseObject15);
  var _super68 = _createSuper$2(MxNewMdGeArray1OfReal);
  function MxNewMdGeArray1OfReal(p1, p2) {
    var _this58;
    _classCallCheck$1(this, MxNewMdGeArray1OfReal);
    if (arguments.length == 0) {
      _this58 = _super68.call(this);
      _this58.initTempObject(new MxApp3D.imp.MdGeArray1OfReal());
    } else if (typeof p1 == "number" && arguments.length == 2) {
      _this58 = _super68.call(this);
      _this58.initTempObject(new MxApp3D.imp.MdGeArray1OfReal(p1, p2));
    } else if (p1 instanceof Object && arguments.length == 1) {
      _this58 = _super68.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this58);
  }
  _createClass$1(MxNewMdGeArray1OfReal, [{
    key: "Init",
    value: function Init(theReal) {
      this.imp.Init(theReal);
    }
  }, {
    key: "Size",
    value: function Size() {
      return this.imp.Size();
    }
  }, {
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "IsEmpty",
    value: function IsEmpty() {
      return this.imp.IsEmpty();
    }
  }, {
    key: "Lower",
    value: function Lower() {
      return this.imp.Lower();
    }
  }, {
    key: "Upper",
    value: function Upper() {
      return this.imp.Upper();
    }
  }, {
    key: "IsDeletable",
    value: function IsDeletable() {
      return this.imp.IsDeletable();
    }
  }, {
    key: "IsAllocated",
    value: function IsAllocated() {
      return this.imp.IsAllocated();
    }
  }, {
    key: "First",
    value: function First() {
      return this.imp.First();
    }
  }, {
    key: "Last",
    value: function Last() {
      return this.imp.Last();
    }
  }, {
    key: "Value",
    value: function Value(theIndex) {
      return this.imp.Value(theIndex);
    }
  }, {
    key: "SetValue",
    value: function SetValue(theIndex, theReal) {
      this.imp.SetValue(theIndex, theReal);
    }
  }, {
    key: "Resize",
    value: function Resize(theLower, theUpper, theToCopyData) {
      this.imp.Resize(theLower, theUpper, theToCopyData);
    }
  }]);
  return MxNewMdGeArray1OfReal;
}(Mx3dBaseObject);
var MxNewMdGeArray1OfPnt = /*#__PURE__*/function (_Mx3dBaseObject16) {
  _inherits$1(MxNewMdGeArray1OfPnt, _Mx3dBaseObject16);
  var _super69 = _createSuper$2(MxNewMdGeArray1OfPnt);
  function MxNewMdGeArray1OfPnt(p1, p2) {
    var _this59;
    _classCallCheck$1(this, MxNewMdGeArray1OfPnt);
    if (arguments.length == 0) {
      _this59 = _super69.call(this);
      _this59.initTempObject(new MxApp3D.imp.MdGeArray1OfPnt());
    } else if (typeof p1 == "number" && arguments.length == 2) {
      _this59 = _super69.call(this);
      _this59.initTempObject(new MxApp3D.imp.MdGeArray1OfPnt(p1, p2));
    } else if (p1 instanceof Object && arguments.length == 1) {
      _this59 = _super69.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this59);
  }
  _createClass$1(MxNewMdGeArray1OfPnt, [{
    key: "Init",
    value: function Init(thePnt) {
      this.imp.Init(thePnt.getImp());
    }
  }, {
    key: "Size",
    value: function Size() {
      return this.imp.Size();
    }
  }, {
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "IsEmpty",
    value: function IsEmpty() {
      return this.imp.IsEmpty();
    }
  }, {
    key: "Lower",
    value: function Lower() {
      return this.imp.Lower();
    }
  }, {
    key: "Upper",
    value: function Upper() {
      return this.imp.Upper();
    }
  }, {
    key: "IsDeletable",
    value: function IsDeletable() {
      return this.imp.IsDeletable();
    }
  }, {
    key: "IsAllocated",
    value: function IsAllocated() {
      return this.imp.IsAllocated();
    }
  }, {
    key: "First",
    value: function First() {
      return new Mx3dGePoint(this.imp.First());
    }
  }, {
    key: "Last",
    value: function Last() {
      return new Mx3dGePoint(this.imp.Last());
    }
  }, {
    key: "Value",
    value: function Value(theIndex) {
      return new Mx3dGePoint(this.imp.Value(theIndex));
    }
  }, {
    key: "SetValue",
    value: function SetValue(theIndex, thePnt) {
      this.imp.SetValue(theIndex, thePnt.getImp());
    }
  }, {
    key: "Resize",
    value: function Resize(theLower, theUpper, theToCopyData) {
      this.imp.Resize(theLower, theUpper, theToCopyData);
    }
  }]);
  return MxNewMdGeArray1OfPnt;
}(Mx3dBaseObject);
var MxNewMdGeArray2OfPnt = /*#__PURE__*/function (_Mx3dBaseObject17) {
  _inherits$1(MxNewMdGeArray2OfPnt, _Mx3dBaseObject17);
  var _super70 = _createSuper$2(MxNewMdGeArray2OfPnt);
  function MxNewMdGeArray2OfPnt(p1, p2, p3, p4, p5) {
    var _this60;
    _classCallCheck$1(this, MxNewMdGeArray2OfPnt);
    if (arguments.length == 0) {
      _this60 = _super70.call(this);
      _this60.initTempObject(new MxApp3D.imp.MdGeArray2OfPnt());
    } else if (typeof p1 == "number" && arguments.length == 4) {
      _this60 = _super70.call(this);
      _this60.initTempObject(new MxApp3D.imp.MdGeArray2OfPnt(p1, p2, p3, p4));
    } else if (p1 instanceof Mx3dGePoint && arguments.length == 5) {
      _this60 = _super70.call(this);
      _this60.initTempObject(new MxApp3D.imp.MdGeArray2OfPnt(p1.getImp(), p2, p3, p4, p5));
    } else if (p1 instanceof Object && arguments.length == 1) {
      _this60 = _super70.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this60);
  }
  _createClass$1(MxNewMdGeArray2OfPnt, [{
    key: "Init",
    value: function Init(thePoint) {
      this.imp.Init(thePoint.getImp());
    }
  }, {
    key: "Size",
    value: function Size() {
      return this.imp.Size();
    }
  }, {
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "NbRows",
    value: function NbRows() {
      return this.imp.NbRows();
    }
  }, {
    key: "NbColumns",
    value: function NbColumns() {
      return this.imp.NbColumns();
    }
  }, {
    key: "RowLength",
    value: function RowLength() {
      return this.imp.RowLength();
    }
  }, {
    key: "ColLength",
    value: function ColLength() {
      return this.imp.ColLength();
    }
  }, {
    key: "LowerRow",
    value: function LowerRow() {
      return this.imp.LowerRow();
    }
  }, {
    key: "UpperRow",
    value: function UpperRow() {
      return this.imp.UpperRow();
    }
  }, {
    key: "LowerCol",
    value: function LowerCol() {
      return this.imp.LowerCol();
    }
  }, {
    key: "UpperCol",
    value: function UpperCol() {
      return this.imp.UpperCol();
    }
  }, {
    key: "IsDeletable",
    value: function IsDeletable() {
      return this.imp.IsDeletable();
    }
  }, {
    key: "Value",
    value: function Value(theRow, theCol) {
      return new Mx3dGePoint(this.imp.Value(theRow, theCol));
    }
  }, {
    key: "SetValue",
    value: function SetValue(theRow, theCol, thePoint) {
      this.imp.SetValue(theRow, theCol, thePoint.getImp());
    }
  }, {
    key: "Resize",
    value: function Resize(theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData) {
      this.imp.Resize(theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData);
    }
  }]);
  return MxNewMdGeArray2OfPnt;
}(Mx3dBaseObject);
var MxNewMdGeArray2OfReal = /*#__PURE__*/function (_Mx3dBaseObject18) {
  _inherits$1(MxNewMdGeArray2OfReal, _Mx3dBaseObject18);
  var _super71 = _createSuper$2(MxNewMdGeArray2OfReal);
  function MxNewMdGeArray2OfReal(p1, p2, p3, p4, p5) {
    var _this61;
    _classCallCheck$1(this, MxNewMdGeArray2OfReal);
    if (arguments.length == 0) {
      _this61 = _super71.call(this);
      _this61.initTempObject(new MxApp3D.imp.MdGeArray2OfReal());
    } else if (typeof p1 == "number" && arguments.length == 4) {
      _this61 = _super71.call(this);
      _this61.initTempObject(new MxApp3D.imp.MdGeArray2OfReal(p1, p2, p3, p4));
    } else if (typeof p1 == "number" && arguments.length == 5) {
      _this61 = _super71.call(this);
      _this61.initTempObject(new MxApp3D.imp.MdGeArray2OfReal(p1, p2, p3, p4, p5));
    } else if (p1 instanceof Object && arguments.length == 1) {
      _this61 = _super71.call(this, p1);
    }
    return _possibleConstructorReturn$1(_this61);
  }
  _createClass$1(MxNewMdGeArray2OfReal, [{
    key: "Init",
    value: function Init(theReal) {
      this.imp.Init(theReal);
    }
  }, {
    key: "Size",
    value: function Size() {
      return this.imp.Size();
    }
  }, {
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "NbRows",
    value: function NbRows() {
      return this.imp.NbRows();
    }
  }, {
    key: "NbColumns",
    value: function NbColumns() {
      return this.imp.NbColumns();
    }
  }, {
    key: "RowLength",
    value: function RowLength() {
      return this.imp.RowLength();
    }
  }, {
    key: "ColLength",
    value: function ColLength() {
      return this.imp.ColLength();
    }
  }, {
    key: "LowerRow",
    value: function LowerRow() {
      return this.imp.LowerRow();
    }
  }, {
    key: "UpperRow",
    value: function UpperRow() {
      return this.imp.UpperRow();
    }
  }, {
    key: "LowerCol",
    value: function LowerCol() {
      return this.imp.LowerCol();
    }
  }, {
    key: "UpperCol",
    value: function UpperCol() {
      return this.imp.UpperCol();
    }
  }, {
    key: "IsDeletable",
    value: function IsDeletable() {
      return this.imp.IsDeletable();
    }
  }, {
    key: "Value",
    value: function Value(theRow, theCol) {
      return this.imp.Value(theRow, theCol);
    }
  }, {
    key: "SetValue",
    value: function SetValue(theRow, theCol, theReal) {
      this.imp.SetValue(theRow, theCol, theReal);
    }
  }, {
    key: "Resize",
    value: function Resize(theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData) {
      this.imp.Resize(theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData);
    }
  }]);
  return MxNewMdGeArray2OfReal;
}(Mx3dBaseObject);
var Mx3dGeomBoundedCurve = /*#__PURE__*/function (_Mx3dGeomCurve3) {
  _inherits$1(Mx3dGeomBoundedCurve, _Mx3dGeomCurve3);
  var _super72 = _createSuper$2(Mx3dGeomBoundedCurve);
  function Mx3dGeomBoundedCurve(p) {
    _classCallCheck$1(this, Mx3dGeomBoundedCurve);
    return _super72.call(this, p);
  }
  _createClass$1(Mx3dGeomBoundedCurve, [{
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }]);
  return Mx3dGeomBoundedCurve;
}(Mx3dGeomCurve);
var Mx3dGeomBSplineCurve = /*#__PURE__*/function (_Mx3dGeomBoundedCurve) {
  _inherits$1(Mx3dGeomBSplineCurve, _Mx3dGeomBoundedCurve);
  var _super73 = _createSuper$2(Mx3dGeomBSplineCurve);
  function Mx3dGeomBSplineCurve(Poles, Weights, Knots, Multiplicities, Degree) {
    var _this62;
    _classCallCheck$1(this, Mx3dGeomBSplineCurve);
    if (Poles[0] instanceof Mx3dGePoint && typeof Weights[0] === "number" && typeof Knots[0] === "number" && typeof Multiplicities === "number") {
      _this62 = _super73.call(this);
      var p = new MxNewMdGeArray1OfPnt(0, Poles.length - 1);
      for (var i = 0; i < Poles.length; i++) {
        p.SetValue(i, Poles[i]);
      }
      var w = new MxNewMdGeArray1OfReal(0, Weights.length - 1);
      for (var _i = 0; _i < Weights.length; _i++) {
        w.SetValue(_i, Weights[_i]);
      }
      var k = new MxNewMdGeArray1OfInteger(0, Knots.length - 1);
      for (var _i2 = 0; _i2 < Knots.length; _i2++) {
        k.SetValue(_i2, Knots[_i2]);
      }
      _this62.initTempObject(new MxApp3D.imp.Mx3dGeomBSplineCurve(p.getImp(), w.getImp(), k.getImp(), Multiplicities));
    } else if (Poles[0] instanceof Mx3dGePoint && typeof Weights[0] === "number" && typeof Knots[0] === "number" && Multiplicities instanceof Array && typeof Multiplicities[0] === "number" && typeof Degree === "number") {
      _this62 = _super73.call(this);
      var _p = new MxNewMdGeArray1OfPnt(0, Poles.length - 1);
      for (var _i3 = 0; _i3 < Poles.length; _i3++) {
        _p.SetValue(_i3, Poles[_i3]);
      }
      var _w = new MxNewMdGeArray1OfReal(0, Weights.length - 1);
      for (var _i4 = 0; _i4 < Weights.length; _i4++) {
        _w.SetValue(_i4, Weights[_i4]);
      }
      var _k = new MxNewMdGeArray1OfReal(0, Knots.length - 1);
      for (var _i5 = 0; _i5 < Knots.length; _i5++) {
        _k.SetValue(_i5, Knots[_i5]);
      }
      var m = new MxNewMdGeArray1OfInteger(0, Multiplicities.length - 1);
      for (var _i6 = 0; _i6 < Multiplicities.length; _i6++) {
        m.SetValue(_i6, Multiplicities[_i6]);
      }
      _this62.initTempObject(new MxApp3D.imp.Mx3dGeomBSplineCurve(_p.getImp(), _w.getImp(), _k.getImp(), m.getImp(), Degree));
    } else if (Poles instanceof Object) {
      _this62 = _super73.call(this, Poles);
    }
    return _possibleConstructorReturn$1(_this62);
  }
  _createClass$1(Mx3dGeomBSplineCurve, [{
    key: "IncreaseDegree",
    value: function IncreaseDegree(Degree) {
      this.imp.IncreaseDegree(Degree);
    }
  }, {
    key: "IncreaseMultiplicity",
    value: function IncreaseMultiplicity(I1, I2, M) {
      if (!M) {
        this.imp.IncreaseMultiplicity(I1, I2);
      } else {
        this.imp.IncreaseMultiplicity(I1, I2, M);
      }
    }
  }, {
    key: "IncrementMultiplicity",
    value: function IncrementMultiplicity(I1, I2, M) {
      this.imp.IncrementMultiplicity(I1, I2, M);
    }
  }, {
    key: "InsertKnot",
    value: function InsertKnot(U, M, ParametricTolerance, Add) {
      if (!M && !ParametricTolerance && !Add) {
        this.imp.InsertKnot(U);
      } else if (M && !ParametricTolerance && !Add) {
        this.imp.InsertKnot(U, M);
      } else if (M && ParametricTolerance && !Add) {
        this.imp.InsertKnot(U, M, ParametricTolerance);
      } else if (M && ParametricTolerance && Add) {
        this.imp.InsertKnot(U, M, ParametricTolerance, Add);
      }
    }
  }, {
    key: "InsertKnots",
    value: function InsertKnots(Knots, Mults, ParametricTolerance, Add) {
      var k = new MxNewMdGeArray1OfReal(0, Knots.length - 1);
      for (var i = 0; i < Knots.length; i++) {
        k.SetValue(i, Knots[i]);
      }
      var m = new MxNewMdGeArray1OfInteger(0, Mults.length - 1);
      for (var _i7 = 0; _i7 < Mults.length; _i7++) {
        m.SetValue(_i7, Mults[_i7]);
      }
      if (!ParametricTolerance && !Add) {
        this.imp.InsertKnots(k.getImp(), m.getImp());
      } else if (ParametricTolerance && !Add) {
        this.imp.InsertKnots(k.getImp(), m.getImp(), ParametricTolerance);
      } else if (ParametricTolerance && Add) {
        this.imp.InsertKnots(k.getImp(), m.getImp(), ParametricTolerance, Add);
      }
    }
  }, {
    key: "RemoveKnot",
    value: function RemoveKnot(Index, M, Tolerance) {
      return this.imp.RemoveKnot(Index, M, Tolerance);
    }
  }, {
    key: "Reverse",
    value: function Reverse() {
      this.imp.Reverse();
    }
  }, {
    key: "ReversedParameter",
    value: function ReversedParameter(U) {
      return this.imp.ReversedParameter(U);
    }
  }, {
    key: "Segment",
    value: function Segment(U1, U2) {
      this.imp.Segment(U1, U2);
    }
  }, {
    key: "SetKnot",
    value: function SetKnot(Index, K, M) {
      if (!M) {
        this.imp.SetKnot(Index, K);
      } else {
        this.imp.SetKnot(Index, K, M);
      }
    }
  }, {
    key: "SetKnots",
    value: function SetKnots(dK) {
      var k = new MxNewMdGeArray1OfReal(0, dK.length);
      for (var i = 0; i < dK.length; i++) {
        k.SetValue(i, dK[i]);
      }
      this.imp.SetKnots(k.getImp());
    }
  }, {
    key: "SetPeriodic",
    value: function SetPeriodic() {
      this.imp.SetPeriodic();
    }
  }, {
    key: "SetOrigin",
    value: function SetOrigin(U, Tol) {
      if (!Tol) {
        this.imp.SetOrigin(U);
      } else {
        this.imp.SetOrigin(U, Tol);
      }
    }
  }, {
    key: "SetNotPeriodic",
    value: function SetNotPeriodic() {
      this.imp.SetNotPeriodic();
    }
  }, {
    key: "SetPole",
    value: function SetPole(Index, P, Weight) {
      P = uniToPoint(P);
      if (!Weight) {
        this.imp.SetPole(Index, P.getImp());
      } else {
        this.imp.SetPole(Index, P.getImp(), Weight);
      }
    }
  }, {
    key: "SetWeight",
    value: function SetWeight(Index, Weight) {
      this.imp.SetWeight(Index, Weight);
    }
  }, {
    key: "IsCN",
    value: function IsCN(N) {
      return this.imp.IsCN(N);
    }
  }, {
    key: "IsG1",
    value: function IsG1(theTf, theTl, theAngTol) {
      return this.imp.IsG1(theTf, theTl, theAngTol);
    }
  }, {
    key: "IsClosed",
    value: function IsClosed() {
      return this.imp.IsClosed();
    }
  }, {
    key: "IsPeriodic",
    value: function IsPeriodic() {
      return this.imp.IsPeriodic();
    }
  }, {
    key: "IsRational",
    value: function IsRational() {
      return this.imp.IsRational();
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "Degree",
    value: function Degree() {
      return this.imp.Degree();
    }
  }, {
    key: "D0",
    value: function D0(U, P) {
      this.imp.D0(U, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, P, V1) {
      this.imp.D1(U, P.getImp(), V1.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, P, V1, V2) {
      this.imp.D2(U, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, P, V1, V2, V3) {
      this.imp.D3(U, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, N) {
      return new Mx3dGeVec(this.imp.DN(U, N));
    }
  }, {
    key: "LocalValue",
    value: function LocalValue(U, FromK1, ToK2) {
      return new Mx3dGePoint(this.imp.LocalValue(U, FromK1, ToK2));
    }
  }, {
    key: "LocalD0",
    value: function LocalD0(U, FromK1, ToK2, P) {
      this.imp.LocalD0(U, FromK1, ToK2, P.getImp());
    }
  }, {
    key: "LocalD1",
    value: function LocalD1(U, FromK1, ToK2, P, V1) {
      this.imp.LocalD1(U, FromK1, ToK2, P.getImp(), V1.getImp());
    }
  }, {
    key: "LocalD2",
    value: function LocalD2(U, FromK1, ToK2, P, V1, V2) {
      this.imp.LocalD2(U, FromK1, ToK2, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "LocalD3",
    value: function LocalD3(U, FromK1, ToK2, P, V1, V2, V3) {
      this.imp.LocalD3(U, FromK1, ToK2, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "LocalDN",
    value: function LocalDN(U, FromK1, ToK2, N) {
      return new Mx3dGeVec(this.imp.LocalDN(U, FromK1, ToK2, N));
    }
  }, {
    key: "EndPoint",
    value: function EndPoint() {
      return new Mx3dGePoint(this.imp.EndPoint());
    }
  }, {
    key: "FirstUKnotIndex",
    value: function FirstUKnotIndex() {
      return this.imp.FirstUKnotIndex();
    }
  }, {
    key: "FirstParameter",
    value: function FirstParameter() {
      return this.imp.FirstParameter();
    }
  }, {
    key: "Knot",
    value: function Knot(Index) {
      return this.imp.Knot(Index);
    }
  }, {
    key: "Knots",
    value: function Knots() {
      var arrReal = this.imp.Knots();
      var retRealArray = new Array();
      for (var i = 1; i <= arrReal.Length(); i++) {
        retRealArray.push(arrReal.Value(i));
      }
      return retRealArray;
    }
  }, {
    key: "LastUKnotIndex",
    value: function LastUKnotIndex() {
      return this.imp.LastUKnotIndex();
    }
  }, {
    key: "LastParameter",
    value: function LastParameter() {
      return this.imp.LastParameter();
    }
  }, {
    key: "Multiplicity",
    value: function Multiplicity(Index) {
      return this.imp.Multiplicity(Index);
    }
  }, {
    key: "Multiplicities",
    value: function Multiplicities() {
      var arrInt = this.imp.Multiplicities();
      var retIntArray = new Array();
      for (var i = 1; i <= arrInt.Length(); i++) {
        retIntArray.push(arrInt.Value(i));
      }
      return retIntArray;
    }
  }, {
    key: "NbKnots",
    value: function NbKnots() {
      return this.imp.NbKnots();
    }
  }, {
    key: "NbPoles",
    value: function NbPoles() {
      return this.imp.NbPoles();
    }
  }, {
    key: "Pole",
    value: function Pole(Index) {
      return new Mx3dGePoint(this.imp.Pole(Index));
    }
  }, {
    key: "Poles",
    value: function Poles() {
      var arrPoint = this.imp.Poles();
      var retPointArray = new Array();
      for (var i = 1; i <= arrPoint.Length(); i++) {
        retPointArray.push(new Mx3dGePoint(arrPoint.Value(i)));
      }
      return retPointArray;
    }
  }, {
    key: "StartPoint",
    value: function StartPoint() {
      return new Mx3dGePoint(this.imp.StartPoint());
    }
  }, {
    key: "Weight",
    value: function Weight(Index) {
      return this.imp.Weight(Index);
    }
  }, {
    key: "Weights",
    value: function Weights() {
      var arrReal = this.imp.Weights();
      var retRealArray = new Array();
      for (var i = 1; i <= arrReal.Length(); i++) {
        retRealArray.push(arrReal.Value(i));
      }
      return retRealArray;
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "Edge",
    value: function Edge(p1, p2) {
      return new Mx3dShapeEdge(this.imp.Edge(p1, p2));
    }
  }, {
    key: "Wire",
    value: function Wire() {
      return new Mx3dShapeWire(this.imp.Wire());
    }
  }, {
    key: "OffsetCurve",
    value: function OffsetCurve(Offset, V, isNotCheckC0) {
      V = uniToDir(V);
      return new Mx3dShapeEdge(this.imp.OffsetCurve(Offset, V.getImp(), isNotCheckC0));
    }
  }, {
    key: "IsEqual",
    value: function IsEqual(theOther, thePreci) {
      return this.imp.IsEqual(theOther.getImp(), thePreci);
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomBSplineCurve(MxApp3D.globalMethods.DynCastToBSplineCurve(theObject.getImp()));
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomBSplineCurve(MxApp3D.globalMethods.DynCastToBSplineCurve(theObject.getImp()));
    }
  }]);
  return Mx3dGeomBSplineCurve;
}(Mx3dGeomBoundedCurve);
function getPointArrObject(arr) {
  var p = new MxNewMdGeArray1OfPnt(0, arr.length - 1);
  for (var i = 0; i < arr.length; i++) {
    p.SetValue(i, arr[i]);
  }
  return p;
}
function getRealArrObject(arr) {
  var r = new MxNewMdGeArray1OfReal(0, arr.length - 1);
  for (var i = 0; i < arr.length; i++) {
    r.SetValue(i, arr[i]);
  }
  return r;
}
var Mx3dGeomBezierCurve = /*#__PURE__*/function (_Mx3dGeomBoundedCurve2) {
  _inherits$1(Mx3dGeomBezierCurve, _Mx3dGeomBoundedCurve2);
  var _super74 = _createSuper$2(Mx3dGeomBezierCurve);
  function Mx3dGeomBezierCurve(CurvePoles, PoleWeights) {
    var _this63;
    _classCallCheck$1(this, Mx3dGeomBezierCurve);
    if (CurvePoles[0] instanceof Mx3dGePoint && !PoleWeights) {
      _this63 = _super74.call(this);
      var p = getPointArrObject(CurvePoles);
      _this63.initTempObject(new MxApp3D.imp.Mx3dGeomBezierCurve(p.getImp()));
    } else if (CurvePoles[0] instanceof Mx3dGePoint && PoleWeights instanceof Array && typeof PoleWeights[0] === "number") {
      _this63 = _super74.call(this);
      var _p2 = getPointArrObject(CurvePoles);
      var w = getRealArrObject(PoleWeights);
      _this63.initTempObject(new MxApp3D.imp.Mx3dGeomBezierCurve(_p2.getImp(), w.getImp()));
    } else if (CurvePoles instanceof Object) {
      _this63 = _super74.call(this, CurvePoles);
    }
    return _possibleConstructorReturn$1(_this63);
  }
  _createClass$1(Mx3dGeomBezierCurve, [{
    key: "Increase",
    value: function Increase(Degree) {
      this.imp.Increase(Degree);
    }
  }, {
    key: "InsertPoleAfter",
    value: function InsertPoleAfter(Index, P, Weight) {
      if (!Weight) {
        this.imp.InsertPoleAfter(Index, P.getImp());
      } else {
        this.imp.InsertPoleAfter(Index, P.getImp(), Weight);
      }
    }
  }, {
    key: "InsertPoleBefore",
    value: function InsertPoleBefore(Index, P, Weight) {
      if (!Weight) {
        this.imp.InsertPoleBefore(Index, P.getImp());
      } else {
        this.imp.InsertPoleBefore(Index, P.getImp(), Weight);
      }
    }
  }, {
    key: "RemovePole",
    value: function RemovePole(Index) {
      this.imp.RemovePole(Index);
    }
  }, {
    key: "Reverse",
    value: function Reverse() {
      this.imp.Reverse();
    }
  }, {
    key: "ReversedParameter",
    value: function ReversedParameter(U) {
      return this.imp.ReversedParameter(U);
    }
  }, {
    key: "Segment",
    value: function Segment(U1, U2) {
      this.imp.Segment(U1, U2);
    }
  }, {
    key: "SetPole",
    value: function SetPole(Index, P, Weight) {
      if (!Weight) {
        this.imp.SetPole(Index, P.getImp());
      } else {
        this.imp.SetPole(Index, P.getImp(), Weight);
      }
    }
  }, {
    key: "SetWeight",
    value: function SetWeight(Index, Weight) {
      this.imp.SetWeight(Index, Weight);
    }
  }, {
    key: "IsClosed",
    value: function IsClosed() {
      return this.imp.IsClosed();
    }
  }, {
    key: "IsCN",
    value: function IsCN(N) {
      return this.imp.IsCN(N);
    }
  }, {
    key: "IsPeriodic",
    value: function IsPeriodic() {
      return this.imp.IsPeriodic();
    }
  }, {
    key: "IsRational",
    value: function IsRational() {
      return this.imp.IsRational();
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "Degree",
    value: function Degree() {
      return this.imp.Degree();
    }
  }, {
    key: "D0",
    value: function D0(U, P) {
      this.imp.D0(U, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, P, V1) {
      this.imp.D1(U, P.getImp(), V1.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, P, V1, V2) {
      this.imp.D2(U, P.getImp(), V1.getImp(), V2.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, P, V1, V2, V3) {
      this.imp.D3(U, P.getImp(), V1.getImp(), V2.getImp(), V3.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, N) {
      return new Mx3dGeVec(this.imp.DN(U, N));
    }
  }, {
    key: "StartPoint",
    value: function StartPoint() {
      return new Mx3dGePoint(this.imp.StartPoint());
    }
  }, {
    key: "EndPoint",
    value: function EndPoint() {
      return new Mx3dGePoint(this.imp.EndPoint());
    }
  }, {
    key: "FirstParameter",
    value: function FirstParameter() {
      return this.imp.FirstParameter();
    }
  }, {
    key: "LastParameter",
    value: function LastParameter() {
      return this.imp.LastParameter();
    }
  }, {
    key: "NbPoles",
    value: function NbPoles() {
      return this.imp.NbPoles();
    }
  }, {
    key: "Pole",
    value: function Pole(Index) {
      return new Mx3dGePoint(this.imp.Pole(Index));
    }
  }, {
    key: "Poles",
    value: function Poles() {
      var pts = this.imp.Poles();
      var retPointsArr = new Array();
      for (var i = 1; i <= pts.Length(); i++) {
        retPointsArr.push(pts.Value(i));
      }
      return retPointsArr;
    }
  }, {
    key: "Weight",
    value: function Weight(Index) {
      return this.imp.Weight(Index);
    }
  }, {
    key: "Weights",
    value: function Weights() {
      var reals = this.imp.Weights();
      var retRealsArr = new Array();
      for (var i = 0; i <= reals.Length(); i++) {
        retRealsArr.push(reals.Value(i));
      }
      return retRealsArr;
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "Edge",
    value: function Edge(p1, p2) {
      return new Mx3dShapeEdge(this.imp.Edge(p1, p2));
    }
  }, {
    key: "Wire",
    value: function Wire() {
      return new Mx3dShapeWire(this.imp.Wire());
    }
  }, {
    key: "OffsetCurve",
    value: function OffsetCurve(Offset, V, isNotCheckC0) {
      V = uniToDir(V);
      return new Mx3dShapeEdge(this.imp.OffsetCurve(Offset, V.getImp(), isNotCheckC0));
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomBezierCurve(MxApp3D.globalMethods.DynCastToBezierCurve(theObject.getImp()));
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomBezierCurve(MxApp3D.globalMethods.DynCastToBezierCurve(theObject.getImp()));
    }
  }]);
  return Mx3dGeomBezierCurve;
}(Mx3dGeomBoundedCurve);
var Mx3dGeomSurface = /*#__PURE__*/function (_Mx3dGeomObject2) {
  _inherits$1(Mx3dGeomSurface, _Mx3dGeomObject2);
  var _super75 = _createSuper$2(Mx3dGeomSurface);
  function Mx3dGeomSurface(p) {
    _classCallCheck$1(this, Mx3dGeomSurface);
    return _super75.call(this, p);
  }
  _createClass$1(Mx3dGeomSurface, [{
    key: "UReversed",
    value: function UReversed() {
      return this.DynCast(new Mx3dGeomSurface(this.imp.UReversed()));
    }
  }, {
    key: "VReversed",
    value: function VReversed() {
      return this.DynCast(new Mx3dGeomSurface(this.imp.VReversed()));
    }
  }, {
    key: "TransformParameters",
    value: function TransformParameters(UV, T) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 2);
      this.imp.TransformParameters(cppArray1OfReal, T.getImp());
      UV[0] = cppArray1OfReal.Value(1);
      UV[1] = cppArray1OfReal.Value(2);
    }
  }, {
    key: "UPeriod",
    value: function UPeriod() {
      return this.imp.UPeriod();
    }
  }, {
    key: "VPeriod",
    value: function VPeriod() {
      return this.imp.VPeriod();
    }
  }, {
    key: "Value",
    value: function Value(U, V) {
      return new Mx3dGePoint(this.imp.Value(U, V));
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }]);
  return Mx3dGeomSurface;
}(Mx3dGeomObject);
var Mx3dGeomElementarySurface = /*#__PURE__*/function (_Mx3dGeomSurface) {
  _inherits$1(Mx3dGeomElementarySurface, _Mx3dGeomSurface);
  var _super76 = _createSuper$2(Mx3dGeomElementarySurface);
  function Mx3dGeomElementarySurface(p) {
    _classCallCheck$1(this, Mx3dGeomElementarySurface);
    return _super76.call(this, p);
  }
  _createClass$1(Mx3dGeomElementarySurface, [{
    key: "SetAxis",
    value: function SetAxis(theA1) {
      this.imp.SetAxis(theA1.getImp());
    }
  }, {
    key: "SetLocation",
    value: function SetLocation(theLoc) {
      this.imp.SetLocation(theLoc.getImp());
    }
  }, {
    key: "SetPosition",
    value: function SetPosition(theAx3) {
      this.imp.SetPosition(theAx3.getImp());
    }
  }, {
    key: "Axis",
    value: function Axis() {
      return new Mx3dGeAxis(this.imp.Axis());
    }
  }, {
    key: "Location",
    value: function Location() {
      return new Mx3dGePoint(this.imp.Location());
    }
  }, {
    key: "Position",
    value: function Position() {
      return new Mx3dGeCSYSR(this.imp.Position());
    }
  }, {
    key: "UReverse",
    value: function UReverse() {
      this.imp.UReverse();
    }
  }, {
    key: "VReverse",
    value: function VReverse() {
      this.imp.VReverse();
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "IsCNu",
    value: function IsCNu(N) {
      return this.imp.IsCNu(N);
    }
  }, {
    key: "IsCNv",
    value: function IsCNv(N) {
      return this.imp.IsCNv(N);
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }]);
  return Mx3dGeomElementarySurface;
}(Mx3dGeomSurface);
var Mx3dGeomPlane = /*#__PURE__*/function (_Mx3dGeomElementarySu) {
  _inherits$1(Mx3dGeomPlane, _Mx3dGeomElementarySu);
  var _super77 = _createSuper$2(Mx3dGeomPlane);
  function Mx3dGeomPlane(A, B, C, D) {
    var _this64;
    _classCallCheck$1(this, Mx3dGeomPlane);
    if (A instanceof Mx3dGeCSYSR) {
      _this64 = _super77.call(this);
      _this64.initTempObject(new MxApp3D.imp.Mx3dGeomPlane(A.getImp()));
    } else if (isUniPoint(A) && isUniDir(B)) {
      _this64 = _super77.call(this);
      A = uniToPoint(A);
      B = uniToDir(B);
      _this64.initTempObject(new MxApp3D.imp.Mx3dGeomPlane(A.getImp(), B.getImp()));
    } else if (typeof A === "number" && typeof B === "number" && typeof C === "number" && typeof D === "number") {
      _this64 = _super77.call(this);
      _this64.initTempObject(new MxApp3D.imp.Mx3dGeomPlane(A, B, C, D));
    } else if (A instanceof Object) {
      _this64 = _super77.call(this, A);
    }
    return _possibleConstructorReturn$1(_this64);
  }
  _createClass$1(Mx3dGeomPlane, [{
    key: "UReverse",
    value: function UReverse() {
      this.imp.UReverse();
    }
  }, {
    key: "UReversedParameter",
    value: function UReversedParameter(U) {
      return this.imp.UReversedParameter(U);
    }
  }, {
    key: "VReverse",
    value: function VReverse() {
      this.imp.VReverse();
    }
  }, {
    key: "VReversedParameter",
    value: function VReversedParameter(V) {
      return this.imp.VReversedParameter(V);
    }
  }, {
    key: "TransformParameters",
    value: function TransformParameters(UV, T) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 2);
      this.imp.TransformParameters(cppArray1OfReal, T.getImp());
      UV[0] = cppArray1OfReal.Value(1);
      UV[1] = cppArray1OfReal.Value(2);
    }
  }, {
    key: "Bounds",
    value: function Bounds(U1U2V1V2) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 4);
      this.imp.Bounds(cppArray1OfReal);
      U1U2V1V2[0] = cppArray1OfReal.Value(1);
      U1U2V1V2[1] = cppArray1OfReal.Value(2);
      U1U2V1V2[2] = cppArray1OfReal.Value(3);
      U1U2V1V2[3] = cppArray1OfReal.Value(4);
    }
  }, {
    key: "Coefficients",
    value: function Coefficients(ABCD) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 4);
      this.imp.Coefficients(cppArray1OfReal);
      ABCD[0] = cppArray1OfReal.Value(1);
      ABCD[1] = cppArray1OfReal.Value(2);
      ABCD[2] = cppArray1OfReal.Value(3);
      ABCD[3] = cppArray1OfReal.Value(4);
    }
  }, {
    key: "IsUClosed",
    value: function IsUClosed() {
      return this.imp.IsUClosed();
    }
  }, {
    key: "IsVClosed",
    value: function IsVClosed() {
      return this.imp.IsVClosed();
    }
  }, {
    key: "IsUPeriodic",
    value: function IsUPeriodic() {
      return this.imp.IsUPeriodic();
    }
  }, {
    key: "IsVPeriodic",
    value: function IsVPeriodic() {
      return this.imp.IsVPeriodic();
    }
  }, {
    key: "D0",
    value: function D0(U, V, P) {
      this.imp.D0(U, V, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, V, P, D1U, D1V) {
      this.imp.D1(U, V, P.getImp(), D1U.getImp(), D1V.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, V, P, D1U, D1V, D2U, D2V, D2UV) {
      this.imp.D2(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV) {
      this.imp.D3(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp(), D3U.getImp(), D3V.getImp(), D3UUV.getImp(), D3UVV.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, V, Nu, Nv) {
      return new Mx3dGeVec(this.imp.DN(U, V, Nu, Nv));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomPlane(MxApp3D.globalMethods.DynCastToPlane(theObject.getImp()));
    }
  }, {
    key: "Face",
    value: function Face(UMin, UMax, VMin, VMax, TolDegen) {
      if (typeof UMin === "number" && arguments.length === 1) {
        return new Mx3dShapeFace(this.imp.Face(UMin));
      } else if (UMin instanceof Mx3dShapeWire && typeof UMax === "boolean") {
        return new Mx3dShapeFace(this.imp.Face(UMin.getImp(), UMax));
      } else if (typeof UMin === "number" && typeof UMax === "number" && typeof VMin === "number" && typeof VMax === "number" && typeof TolDegen === "number") {
        return new Mx3dShapeFace(this.imp.Face(UMin, UMax, VMin, VMax, TolDegen));
      } else {
        return new Mx3dShapeFace();
      }
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomPlane(MxApp3D.globalMethods.DynCastToPlane(theObject.getImp()));
    }
  }]);
  return Mx3dGeomPlane;
}(Mx3dGeomElementarySurface);
var Mx3dGeomConicalSurface = /*#__PURE__*/function (_Mx3dGeomElementarySu2) {
  _inherits$1(Mx3dGeomConicalSurface, _Mx3dGeomElementarySu2);
  var _super78 = _createSuper$2(Mx3dGeomConicalSurface);
  function Mx3dGeomConicalSurface(A3, Ang, Radius) {
    var _this65;
    _classCallCheck$1(this, Mx3dGeomConicalSurface);
    if (A3 instanceof Mx3dGeCSYSR && typeof Ang === "number" && typeof Radius === "number") {
      _this65 = _super78.call(this);
      _this65.initTempObject(new MxApp3D.imp.Mx3dGeomConicalSurface(A3.getImp(), Ang, Radius));
    } else if (A3 instanceof Object) {
      _this65 = _super78.call(this, A3);
    }
    return _possibleConstructorReturn$1(_this65);
  }
  _createClass$1(Mx3dGeomConicalSurface, [{
    key: "SetRadius",
    value: function SetRadius(R) {
      this.imp.SetRadius(R);
    }
  }, {
    key: "SetSemiAngle",
    value: function SetSemiAngle(Ang) {
      this.imp.SetSemiAngle(Ang);
    }
  }, {
    key: "UReversedParameter",
    value: function UReversedParameter(U) {
      return this.imp.rameter(U);
    }
  }, {
    key: "VReversedParameter",
    value: function VReversedParameter(V) {
      return this.imp.rameter(V);
    }
  }, {
    key: "VReverse",
    value: function VReverse() {
      this.imp.VReverse();
    }
  }, {
    key: "TransformParameters",
    value: function TransformParameters(UV, T) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 2);
      this.imp.TransformParameters(cppArray1OfReal, T.getImp());
      UV[0] = cppArray1OfReal.Value(1);
      UV[1] = cppArray1OfReal.Value(2);
    }
  }, {
    key: "Apex",
    value: function Apex() {
      return new Mx3dGePoint(this.imp.Apex());
    }
  }, {
    key: "Bounds",
    value: function Bounds(U1U2V1V2) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 4);
      this.imp.Bounds(cppArray1OfReal);
      U1U2V1V2[0] = cppArray1OfReal.Value(1);
      U1U2V1V2[1] = cppArray1OfReal.Value(2);
      U1U2V1V2[2] = cppArray1OfReal.Value(3);
      U1U2V1V2[3] = cppArray1OfReal.Value(4);
    }
  }, {
    key: "Coefficients",
    value: function Coefficients(A1A2A3B1B2B3C1C2C3D) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 10);
      this.imp.Coefficients(cppArray1OfReal);
      A1A2A3B1B2B3C1C2C3D[0] = cppArray1OfReal.Value(1);
      A1A2A3B1B2B3C1C2C3D[1] = cppArray1OfReal.Value(2);
      A1A2A3B1B2B3C1C2C3D[2] = cppArray1OfReal.Value(3);
      A1A2A3B1B2B3C1C2C3D[3] = cppArray1OfReal.Value(4);
      A1A2A3B1B2B3C1C2C3D[4] = cppArray1OfReal.Value(5);
      A1A2A3B1B2B3C1C2C3D[5] = cppArray1OfReal.Value(6);
      A1A2A3B1B2B3C1C2C3D[6] = cppArray1OfReal.Value(7);
      A1A2A3B1B2B3C1C2C3D[7] = cppArray1OfReal.Value(8);
      A1A2A3B1B2B3C1C2C3D[8] = cppArray1OfReal.Value(9);
      A1A2A3B1B2B3C1C2C3D[9] = cppArray1OfReal.Value(10);
    }
  }, {
    key: "RefRadius",
    value: function RefRadius() {
      return this.imp.RefRadius();
    }
  }, {
    key: "SemiAngle",
    value: function SemiAngle() {
      return this.imp.SemiAngle();
    }
  }, {
    key: "IsUClosed",
    value: function IsUClosed() {
      return this.imp.IsUClosed();
    }
  }, {
    key: "IsVClosed",
    value: function IsVClosed() {
      return this.imp.IsVClosed();
    }
  }, {
    key: "IsUPeriodic",
    value: function IsUPeriodic() {
      return this.imp.IsUPeriodic();
    }
  }, {
    key: "IsVPeriodic",
    value: function IsVPeriodic() {
      return this.imp.IsVPeriodic();
    }
  }, {
    key: "D0",
    value: function D0(U, V, P) {
      this.imp.D0(U, V, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, V, P, D1U, D1V) {
      this.imp.D1(U, V, P.getImp(), D1U.getImp(), D1V.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, V, P, D1U, D1V, D2U, D2V, D2UV) {
      this.imp.D2(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV) {
      this.imp.D3(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp(), D3U.getImp(), D3V.getImp(), D3UUV.getImp(), D3UVV.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, V, Nu, Nv) {
      return new Mx3dGeVec(this.imp.DN(U, V, Nu, Nv));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomConicalSurface(MxApp3D.globalMethods.DynCastToConicalSurface(theObject.getImp()));
    }
  }, {
    key: "Face",
    value: function Face(UMin, UMax, VMin, VMax, TolDegen) {
      if (typeof UMin === "number" && arguments.length === 1) {
        return new Mx3dShapeFace(this.imp.Face(UMin));
      } else if (UMin instanceof Mx3dShapeWire && typeof UMax === "boolean") {
        return new Mx3dShapeFace(this.imp.Face(UMin.getImp(), UMax));
      } else if (typeof UMin === "number" && typeof UMax === "number" && typeof VMin === "number" && typeof VMax === "number" && typeof TolDegen === "number") {
        return new Mx3dShapeFace(this.imp.Face(UMin, UMax, VMin, VMax, TolDegen));
      } else {
        return new Mx3dShapeFace();
      }
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomConicalSurface(MxApp3D.globalMethods.DynCastToConicalSurface(theObject.getImp()));
    }
  }]);
  return Mx3dGeomConicalSurface;
}(Mx3dGeomElementarySurface);
var Mx3dGeomCylindricalSurface = /*#__PURE__*/function (_Mx3dGeomElementarySu3) {
  _inherits$1(Mx3dGeomCylindricalSurface, _Mx3dGeomElementarySu3);
  var _super79 = _createSuper$2(Mx3dGeomCylindricalSurface);
  function Mx3dGeomCylindricalSurface(A3, Radius) {
    var _this66;
    _classCallCheck$1(this, Mx3dGeomCylindricalSurface);
    if (A3 instanceof Mx3dGeCSYSR && typeof Radius === "number") {
      _this66 = _super79.call(this);
      _this66.initTempObject(new MxApp3D.imp.Mx3dGeomCylindricalSurface(A3.getImp(), Radius));
    } else if (A3 instanceof Object) {
      _this66 = _super79.call(this, A3);
    }
    return _possibleConstructorReturn$1(_this66);
  }
  _createClass$1(Mx3dGeomCylindricalSurface, [{
    key: "SetRadius",
    value: function SetRadius(R) {
      this.imp.SetRadius(R);
    }
  }, {
    key: "UReversedParameter",
    value: function UReversedParameter(U) {
      return this.imp.rameter(U);
    }
  }, {
    key: "VReversedParameter",
    value: function VReversedParameter(V) {
      return this.imp.rameter(V);
    }
  }, {
    key: "TransformParameters",
    value: function TransformParameters(UV, T) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 2);
      this.imp.TransformParameters(cppArray1OfReal, T.getImp());
      UV[0] = cppArray1OfReal.Value(1);
      UV[1] = cppArray1OfReal.Value(2);
    }
  }, {
    key: "Bounds",
    value: function Bounds(U1U2V1V2) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 4);
      this.imp.Bounds(cppArray1OfReal);
      U1U2V1V2[0] = cppArray1OfReal.Value(1);
      U1U2V1V2[1] = cppArray1OfReal.Value(2);
      U1U2V1V2[2] = cppArray1OfReal.Value(3);
      U1U2V1V2[3] = cppArray1OfReal.Value(4);
    }
  }, {
    key: "Coefficients",
    value: function Coefficients(A1A2A3B1B2B3C1C2C3D) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 10);
      this.imp.Coefficients(cppArray1OfReal);
      A1A2A3B1B2B3C1C2C3D[0] = cppArray1OfReal.Value(1);
      A1A2A3B1B2B3C1C2C3D[1] = cppArray1OfReal.Value(2);
      A1A2A3B1B2B3C1C2C3D[2] = cppArray1OfReal.Value(3);
      A1A2A3B1B2B3C1C2C3D[3] = cppArray1OfReal.Value(4);
      A1A2A3B1B2B3C1C2C3D[4] = cppArray1OfReal.Value(5);
      A1A2A3B1B2B3C1C2C3D[5] = cppArray1OfReal.Value(6);
      A1A2A3B1B2B3C1C2C3D[6] = cppArray1OfReal.Value(7);
      A1A2A3B1B2B3C1C2C3D[7] = cppArray1OfReal.Value(8);
      A1A2A3B1B2B3C1C2C3D[8] = cppArray1OfReal.Value(9);
      A1A2A3B1B2B3C1C2C3D[9] = cppArray1OfReal.Value(10);
    }
  }, {
    key: "Radius",
    value: function Radius() {
      return this.imp.Radius();
    }
  }, {
    key: "IsUClosed",
    value: function IsUClosed() {
      return this.imp.IsUClosed();
    }
  }, {
    key: "IsVClosed",
    value: function IsVClosed() {
      return this.imp.IsVClosed();
    }
  }, {
    key: "IsUPeriodic",
    value: function IsUPeriodic() {
      return this.imp.IsUPeriodic();
    }
  }, {
    key: "IsVPeriodic",
    value: function IsVPeriodic() {
      return this.imp.IsVPeriodic();
    }
  }, {
    key: "D0",
    value: function D0(U, V, P) {
      this.imp.D0(U, V, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, V, P, D1U, D1V) {
      this.imp.D1(U, V, P.getImp(), D1U.getImp(), D1V.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, V, P, D1U, D1V, D2U, D2V, D2UV) {
      this.imp.D2(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV) {
      this.imp.D3(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp(), D3U.getImp(), D3V.getImp(), D3UUV.getImp(), D3UVV.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, V, Nu, Nv) {
      return new Mx3dGeVec(this.imp.DN(U, V, Nu, Nv));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomCylindricalSurface(MxApp3D.globalMethods.DynCastToCylindricalSurface(theObject.getImp()));
    }
  }, {
    key: "Face",
    value: function Face(UMin, UMax, VMin, VMax, TolDegen) {
      if (typeof UMin === "number" && arguments.length === 1) {
        return new Mx3dShapeFace(this.imp.Face(UMin));
      } else if (UMin instanceof Mx3dShapeWire && typeof UMax === "boolean") {
        return new Mx3dShapeFace(this.imp.Face(UMin.getImp(), UMax));
      } else if (typeof UMin === "number" && typeof UMax === "number" && typeof VMin === "number" && typeof VMax === "number" && typeof TolDegen === "number") {
        return new Mx3dShapeFace(this.imp.Face(UMin, UMax, VMin, VMax, TolDegen));
      } else {
        return new Mx3dShapeFace();
      }
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomCylindricalSurface(MxApp3D.globalMethods.DynCastToCylindricalSurface(theObject.getImp()));
    }
  }]);
  return Mx3dGeomCylindricalSurface;
}(Mx3dGeomElementarySurface);
var Mx3dGeomSphericalSurface = /*#__PURE__*/function (_Mx3dGeomElementarySu4) {
  _inherits$1(Mx3dGeomSphericalSurface, _Mx3dGeomElementarySu4);
  var _super80 = _createSuper$2(Mx3dGeomSphericalSurface);
  function Mx3dGeomSphericalSurface(A3, Radius) {
    var _this67;
    _classCallCheck$1(this, Mx3dGeomSphericalSurface);
    if (A3 instanceof Mx3dGeCSYSR && typeof Radius === "number") {
      _this67 = _super80.call(this);
      _this67.initTempObject(new MxApp3D.imp.Mx3dGeomSphericalSurface(A3.getImp(), Radius));
    } else if (A3 instanceof Object) {
      _this67 = _super80.call(this, A3);
    }
    return _possibleConstructorReturn$1(_this67);
  }
  _createClass$1(Mx3dGeomSphericalSurface, [{
    key: "SetRadius",
    value: function SetRadius(R) {
      this.imp.SetRadius(R);
    }
  }, {
    key: "UReversedParameter",
    value: function UReversedParameter(U) {
      return this.imp.rameter(U);
    }
  }, {
    key: "VReversedParameter",
    value: function VReversedParameter(V) {
      return this.imp.rameter(V);
    }
  }, {
    key: "Area",
    value: function Area() {
      return this.imp.Area();
    }
  }, {
    key: "Bounds",
    value: function Bounds(U1U2V1V2) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 4);
      this.imp.Bounds(cppArray1OfReal);
      U1U2V1V2[0] = cppArray1OfReal.Value(1);
      U1U2V1V2[1] = cppArray1OfReal.Value(2);
      U1U2V1V2[2] = cppArray1OfReal.Value(3);
      U1U2V1V2[3] = cppArray1OfReal.Value(4);
    }
  }, {
    key: "Coefficients",
    value: function Coefficients(A1A2A3B1B2B3C1C2C3D) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 10);
      this.imp.Coefficients(cppArray1OfReal);
      A1A2A3B1B2B3C1C2C3D[0] = cppArray1OfReal.Value(1);
      A1A2A3B1B2B3C1C2C3D[1] = cppArray1OfReal.Value(2);
      A1A2A3B1B2B3C1C2C3D[2] = cppArray1OfReal.Value(3);
      A1A2A3B1B2B3C1C2C3D[3] = cppArray1OfReal.Value(4);
      A1A2A3B1B2B3C1C2C3D[4] = cppArray1OfReal.Value(5);
      A1A2A3B1B2B3C1C2C3D[5] = cppArray1OfReal.Value(6);
      A1A2A3B1B2B3C1C2C3D[6] = cppArray1OfReal.Value(7);
      A1A2A3B1B2B3C1C2C3D[7] = cppArray1OfReal.Value(8);
      A1A2A3B1B2B3C1C2C3D[8] = cppArray1OfReal.Value(9);
      A1A2A3B1B2B3C1C2C3D[9] = cppArray1OfReal.Value(10);
    }
  }, {
    key: "Radius",
    value: function Radius() {
      return this.imp.Radius();
    }
  }, {
    key: "Volume",
    value: function Volume() {
      return this.imp.Volume();
    }
  }, {
    key: "IsUClosed",
    value: function IsUClosed() {
      return this.imp.IsUClosed();
    }
  }, {
    key: "IsVClosed",
    value: function IsVClosed() {
      return this.imp.IsVClosed();
    }
  }, {
    key: "IsUPeriodic",
    value: function IsUPeriodic() {
      return this.imp.IsUPeriodic();
    }
  }, {
    key: "IsVPeriodic",
    value: function IsVPeriodic() {
      return this.imp.IsVPeriodic();
    }
  }, {
    key: "D0",
    value: function D0(U, V, P) {
      this.imp.D0(U, V, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, V, P, D1U, D1V) {
      this.imp.D1(U, V, P.getImp(), D1U.getImp(), D1V.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, V, P, D1U, D1V, D2U, D2V, D2UV) {
      this.imp.D2(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV) {
      this.imp.D3(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp(), D3U.getImp(), D3V.getImp(), D3UUV.getImp(), D3UVV.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, V, Nu, Nv) {
      return new Mx3dGeVec(this.imp.DN(U, V, Nu, Nv));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomSphericalSurface(MxApp3D.globalMethods.DynCastToSphericalSurface(theObject.getImp()));
    }
  }, {
    key: "Face",
    value: function Face(UMin, UMax, VMin, VMax, TolDegen) {
      if (typeof UMin === "number" && arguments.length === 1) {
        return new Mx3dShapeFace(this.imp.Face(UMin));
      } else if (UMin instanceof Mx3dShapeWire && typeof UMax === "boolean") {
        return new Mx3dShapeFace(this.imp.Face(UMin.getImp(), UMax));
      } else if (typeof UMin === "number" && typeof UMax === "number" && typeof VMin === "number" && typeof VMax === "number" && typeof TolDegen === "number") {
        return new Mx3dShapeFace(this.imp.Face(UMin, UMax, VMin, VMax, TolDegen));
      } else {
        return new Mx3dShapeFace();
      }
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomSphericalSurface(MxApp3D.globalMethods.DynCastToSphericalSurface(theObject.getImp()));
    }
  }]);
  return Mx3dGeomSphericalSurface;
}(Mx3dGeomElementarySurface);
var Mx3dGeomToroidalSurface = /*#__PURE__*/function (_Mx3dGeomElementarySu5) {
  _inherits$1(Mx3dGeomToroidalSurface, _Mx3dGeomElementarySu5);
  var _super81 = _createSuper$2(Mx3dGeomToroidalSurface);
  function Mx3dGeomToroidalSurface(A3, MajorRadius, MinorRadius) {
    var _this68;
    _classCallCheck$1(this, Mx3dGeomToroidalSurface);
    if (A3 instanceof Mx3dGeCSYSR && typeof MajorRadius === "number" && typeof MinorRadius === "number") {
      _this68 = _super81.call(this);
      _this68.initTempObject(new MxApp3D.imp.Mx3dGeomToroidalSurface(A3.getImp(), MajorRadius, MinorRadius));
    } else if (A3 instanceof Object) {
      _this68 = _super81.call(this, A3);
    }
    return _possibleConstructorReturn$1(_this68);
  }
  _createClass$1(Mx3dGeomToroidalSurface, [{
    key: "SetMajorRadius",
    value: function SetMajorRadius(MajorRadius) {
      this.imp.ajorRadius(MajorRadius);
    }
  }, {
    key: "SetMinorRadius",
    value: function SetMinorRadius(MinorRadius) {
      this.imp.inorRadius(MinorRadius);
    }
  }, {
    key: "UReversedParameter",
    value: function UReversedParameter(U) {
      return this.imp.rameter(U);
    }
  }, {
    key: "VReversedParameter",
    value: function VReversedParameter(V) {
      return this.imp.rameter(V);
    }
  }, {
    key: "Area",
    value: function Area() {
      return this.imp.Area();
    }
  }, {
    key: "Bounds",
    value: function Bounds(U1U2V1V2) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 4);
      this.imp.Bounds(cppArray1OfReal);
      U1U2V1V2[0] = cppArray1OfReal.Value(1);
      U1U2V1V2[1] = cppArray1OfReal.Value(2);
      U1U2V1V2[2] = cppArray1OfReal.Value(3);
      U1U2V1V2[3] = cppArray1OfReal.Value(4);
    }
  }, {
    key: "Coefficients",
    value: function Coefficients(Coef) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 31);
      this.imp.Coefficients(cppArray1OfReal);
      for (var i = 1; i <= cppArray1OfReal.Length(); i++) {
        Coef.push(cppArray1OfReal.Value(i));
      }
    }
  }, {
    key: "MajorRadius",
    value: function MajorRadius() {
      return this.imp.MajorRadius();
    }
  }, {
    key: "MinorRadius",
    value: function MinorRadius() {
      return this.imp.MinorRadius();
    }
  }, {
    key: "Volume",
    value: function Volume() {
      return this.imp.Volume();
    }
  }, {
    key: "IsUClosed",
    value: function IsUClosed() {
      return this.imp.IsUClosed();
    }
  }, {
    key: "IsVClosed",
    value: function IsVClosed() {
      return this.imp.IsVClosed();
    }
  }, {
    key: "IsUPeriodic",
    value: function IsUPeriodic() {
      return this.imp.IsUPeriodic();
    }
  }, {
    key: "IsVPeriodic",
    value: function IsVPeriodic() {
      return this.imp.IsVPeriodic();
    }
  }, {
    key: "D0",
    value: function D0(U, V, P) {
      this.imp.D0(U, V, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, V, P, D1U, D1V) {
      this.imp.D1(U, V, P.getImp(), D1U.getImp(), D1V.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, V, P, D1U, D1V, D2U, D2V, D2UV) {
      this.imp.D2(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV) {
      this.imp.D3(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp(), D3U.getImp(), D3V.getImp(), D3UUV.getImp(), D3UVV.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, V, Nu, Nv) {
      return new Mx3dGeVec(this.imp.DN(U, V, Nu, Nv));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomToroidalSurface(MxApp3D.globalMethods.DynCastToToroidalSurface(theObject.getImp()));
    }
  }, {
    key: "Face",
    value: function Face(UMin, UMax, VMin, VMax, TolDegen) {
      if (typeof UMin === "number" && arguments.length === 1) {
        return new Mx3dShapeFace(this.imp.Face(UMin));
      } else if (UMin instanceof Mx3dShapeWire && typeof UMax === "boolean") {
        return new Mx3dShapeFace(this.imp.Face(UMin.getImp(), UMax));
      } else if (typeof UMin === "number" && typeof UMax === "number" && typeof VMin === "number" && typeof VMax === "number" && typeof TolDegen === "number") {
        return new Mx3dShapeFace(this.imp.Face(UMin, UMax, VMin, VMax, TolDegen));
      } else {
        return new Mx3dShapeFace();
      }
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomToroidalSurface(MxApp3D.globalMethods.DynCastToToroidalSurface(theObject.getImp()));
    }
  }]);
  return Mx3dGeomToroidalSurface;
}(Mx3dGeomElementarySurface);
var Mx3dGeomBoundedSurface = /*#__PURE__*/function (_Mx3dGeomSurface2) {
  _inherits$1(Mx3dGeomBoundedSurface, _Mx3dGeomSurface2);
  var _super82 = _createSuper$2(Mx3dGeomBoundedSurface);
  function Mx3dGeomBoundedSurface(p) {
    _classCallCheck$1(this, Mx3dGeomBoundedSurface);
    return _super82.call(this, p);
  }
  _createClass$1(Mx3dGeomBoundedSurface, [{
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }]);
  return Mx3dGeomBoundedSurface;
}(Mx3dGeomSurface);
function arrayToArray1OfReal(dArr) {
  var ret = new MxNewMdGeArray1OfReal(1, dArr.length);
  for (var i = 0; i < dArr.length; i++) {
    ret.SetValue(i + 1, dArr[i]);
  }
  return ret;
}
function arrayToArray1OfInteger(iArr) {
  var ret = new MxNewMdGeArray1OfInteger(1, iArr.length);
  for (var i = 0; i < iArr.length; i++) {
    ret.SetValue(i + 1, iArr[i]);
  }
  return ret;
}
function arrayToArray1OfPnt(ptArr) {
  var ret = new MxNewMdGeArray1OfPnt(1, ptArr.length);
  for (var i = 0; i < ptArr.length; i++) {
    ret.SetValue(i + 1, ptArr[i]);
  }
  return ret;
}
function arrayToArray2OfPnt(ptArr2d) {
  var row = ptArr2d.length;
  var col = ptArr2d[0].length;
  var ret = new MxNewMdGeArray2OfPnt(1, row, 1, col);
  for (var i = 0; i < row; i++) {
    for (var j = 0; j < col; j++) {
      ret.SetValue(i + 1, j + 1, ptArr2d[i][j]);
    }
  }
  return ret;
}
function arrayToArray2OfReal(dArr2d) {
  var row = dArr2d.length;
  var col = dArr2d[0].length;
  var ret = new MxNewMdGeArray2OfReal(1, row, 1, col);
  for (var i = 0; i < row; i++) {
    for (var j = 0; j < col; j++) {
      ret.SetValue(i + 1, j + 1, dArr2d[i][j]);
    }
  }
  return ret;
}
function array2OfPntToArray(array2OfPnt) {
  var ret = new Array();
  for (var i = 1; i <= array2OfPnt.UpperRow(); i++) {
    var col = new Array();
    for (var j = 1; j <= array2OfPnt.UpperCol(); j++) {
      col.push(array2OfPnt.Value(i, j));
    }
    ret.push(col);
  }
  return ret;
}
function array2OfRealToArray(array2OfReal) {
  var ret = new Array();
  for (var i = 1; i <= array2OfReal.UpperRow(); i++) {
    var col = new Array();
    for (var j = 1; j <= array2OfReal.UpperCol(); j++) {
      col.push(array2OfReal.Value(i, j));
    }
    ret.push(col);
  }
  return ret;
}
function array1OfRealToArray(array1OfReal) {
  var ret = new Array();
  for (var i = 1; i <= array1OfReal.Length(); i++) {
    ret.push(array1OfReal.Value(i));
  }
  return ret;
}
function array1OfIntegerToArray(array1OfInteger) {
  var ret = new Array();
  for (var i = 1; i <= array1OfInteger.Length(); i++) {
    ret.push(array1OfInteger.Value(i));
  }
  return ret;
}
var Mx3dGeomBSplineSurface = /*#__PURE__*/function (_Mx3dGeomBoundedSurfa) {
  _inherits$1(Mx3dGeomBSplineSurface, _Mx3dGeomBoundedSurfa);
  var _super83 = _createSuper$2(Mx3dGeomBSplineSurface);
  function Mx3dGeomBSplineSurface(Poles, dWeights, dUKnots, dVKnots, iUMults, iVMults, UDegree, VDegree, UPeriodic, VPeriodic) {
    var _this69;
    _classCallCheck$1(this, Mx3dGeomBSplineSurface);
    if (Poles instanceof Array && dWeights instanceof Array && typeof dWeights[0] === "number") {
      _this69 = _super83.call(this);
      var p = arrayToArray2OfPnt(Poles);
      var uk = arrayToArray1OfReal(dWeights);
      var vk = arrayToArray1OfReal(dUKnots);
      var um = arrayToArray1OfInteger(dVKnots);
      var vm = arrayToArray1OfInteger(iUMults);
      _this69.initTempObject(new MxApp3D.imp.Mx3dGeomBSplineSurface(p.getImp(), uk.getImp(), vk.getImp(), um.getImp(), vm.getImp(), iVMults, UDegree, VDegree, UPeriodic));
    } else if (dWeights instanceof Array && dWeights[0] instanceof Array) {
      _this69 = _super83.call(this);
      var _p3 = arrayToArray2OfPnt(Poles);
      var w = arrayToArray2OfReal(dWeights);
      var _uk = arrayToArray1OfReal(dUKnots);
      var _vk = arrayToArray1OfReal(dVKnots);
      var _um = arrayToArray1OfInteger(iUMults);
      var _vm = arrayToArray1OfInteger(iVMults);
      _this69.initTempObject(new MxApp3D.imp.Mx3dGeomBSplineSurface(_p3.getImp(), w.getImp(), _uk.getImp(), _vk.getImp(), _um.getImp(), _vm.getImp(), UDegree, VDegree, UPeriodic, VPeriodic));
    } else if (Poles instanceof Object) {
      _this69 = _super83.call(this, Poles);
    }
    return _possibleConstructorReturn$1(_this69);
  }
  _createClass$1(Mx3dGeomBSplineSurface, [{
    key: "ExchangeUV",
    value: function ExchangeUV() {
      this.imp.ExchangeUV();
    }
  }, {
    key: "SetUPeriodic",
    value: function SetUPeriodic() {
      this.imp.SetUPeriodic();
    }
  }, {
    key: "SetVPeriodic",
    value: function SetVPeriodic() {
      this.imp.SetVPeriodic();
    }
  }, {
    key: "PeriodicNormalization",
    value: function PeriodicNormalization(UV) {
      var theUV = arrayToArray1OfReal(UV);
      this.imp.PeriodicNormalization(theUV.getImp());
    }
  }, {
    key: "SetUOrigin",
    value: function SetUOrigin(Index) {
      this.imp.SetUOrigin(Index);
    }
  }, {
    key: "SetVOrigin",
    value: function SetVOrigin(Index) {
      this.imp.SetVOrigin(Index);
    }
  }, {
    key: "SetUNotPeriodic",
    value: function SetUNotPeriodic() {
      this.imp.SetUNotPeriodic();
    }
  }, {
    key: "SetVNotPeriodic",
    value: function SetVNotPeriodic() {
      this.imp.SetVNotPeriodic();
    }
  }, {
    key: "UReverse",
    value: function UReverse() {
      this.imp.UReverse();
    }
  }, {
    key: "VReverse",
    value: function VReverse() {
      this.imp.VReverse();
    }
  }, {
    key: "UReversedParameter",
    value: function UReversedParameter(U) {
      return this.imp.UReversedParameter(U);
    }
  }, {
    key: "VReversedParameter",
    value: function VReversedParameter(V) {
      return this.imp.VReversedParameter(V);
    }
  }, {
    key: "IncreaseDegree",
    value: function IncreaseDegree(UDegree, VDegree) {
      this.imp.IncreaseDegree(UDegree, VDegree);
    }
  }, {
    key: "InsertUKnots",
    value: function InsertUKnots(dKnots, iMults, dParametricTolerance, Add) {
      var k = arrayToArray1OfReal(dKnots);
      var m = arrayToArray1OfInteger(iMults);
      this.imp.InsertUKnots(k.getImp(), m.getImp(), dParametricTolerance, Add);
    }
  }, {
    key: "InsertVKnots",
    value: function InsertVKnots(dKnots, iMults, dParametricTolerance, Add) {
      var k = arrayToArray1OfReal(dKnots);
      var m = arrayToArray1OfInteger(iMults);
      this.imp.InsertVKnots(k.getImp(), m.getImp(), dParametricTolerance, Add);
    }
  }, {
    key: "RemoveUKnot",
    value: function RemoveUKnot(iIndex, iM, dTolerance) {
      return this.imp.RemoveUKnot(iIndex, iM, dTolerance);
    }
  }, {
    key: "RemoveVKnot",
    value: function RemoveVKnot(iIndex, iM, dTolerance) {
      return this.imp.RemoveVKnot(iIndex, iM, dTolerance);
    }
  }, {
    key: "IncreaseUMultiplicity",
    value: function IncreaseUMultiplicity(FromI1, ToI2, M) {
      if (!M) {
        this.imp.IncreaseUMultiplicity(FromI1, ToI2);
      } else {
        this.imp.IncreaseUMultiplicity(FromI1, ToI2, M);
      }
    }
  }, {
    key: "IncrementUMultiplicity",
    value: function IncrementUMultiplicity(FromI1, ToI2, Step) {
      this.imp.IncrementUMultiplicity(FromI1, ToI2, Step);
    }
  }, {
    key: "IncreaseVMultiplicity",
    value: function IncreaseVMultiplicity(FromI1, ToI2, M) {
      if (!M) {
        this.imp.IncreaseVMultiplicity(FromI1, ToI2);
      } else {
        this.imp.IncreaseVMultiplicity(FromI1, ToI2, M);
      }
    }
  }, {
    key: "IncrementVMultiplicity",
    value: function IncrementVMultiplicity(FromI1, ToI2, Step) {
      this.imp.IncrementVMultiplicity(FromI1, ToI2, Step);
    }
  }, {
    key: "InsertUKnot",
    value: function InsertUKnot(U, M, ParametricTolerance, Add) {
      this.imp.InsertUKnot(U, M, ParametricTolerance, Add);
    }
  }, {
    key: "InsertVKnot",
    value: function InsertVKnot(V, M, ParametricTolerance, Add) {
      this.imp.InsertVKnot(V, M, ParametricTolerance, Add);
    }
  }, {
    key: "Segment",
    value: function Segment(U1, U2, V1, V2) {
      this.imp.Segment(U1, U2, V1, V2);
    }
  }, {
    key: "CheckAndSegment",
    value: function CheckAndSegment(U1, U2, V1, V2) {
      this.imp.CheckAndSegment(U1, U2, V1, V2);
    }
  }, {
    key: "SetUKnot",
    value: function SetUKnot(UIndex, K, M) {
      if (!M) {
        this.imp.SetUKnot(UIndex, K);
      } else {
        this.imp.SetUKnot(UIndex, K, M);
      }
    }
  }, {
    key: "SetVKnot",
    value: function SetVKnot(VIndex, K, M) {
      if (!M) {
        this.imp.SetVKnot(VIndex, K);
      } else {
        this.imp.SetVKnot(VIndex, K, M);
      }
    }
  }, {
    key: "SetUKnots",
    value: function SetUKnots(dUK) {
      var uk = arrayToArray1OfReal(dUK);
      this.imp.SetUKnots(uk.getImp());
    }
  }, {
    key: "SetVKnots",
    value: function SetVKnots(dVK) {
      var vk = arrayToArray1OfReal(dVK);
      this.imp.SetVKnots(vk.getImp());
    }
  }, {
    key: "LocateU",
    value: function LocateU(U, ParametricTolerance, I1I2, WithKnotRepetition) {
      var i = arrayToArray1OfInteger(I1I2);
      this.imp.LocateU(U, ParametricTolerance, i.getImp(), WithKnotRepetition);
    }
  }, {
    key: "LocateV",
    value: function LocateV(V, ParametricTolerance, I1I2, WithKnotRepetition) {
      var i = arrayToArray1OfInteger(I1I2);
      this.imp.LocateV(V, ParametricTolerance, i.getImp(), WithKnotRepetition);
    }
  }, {
    key: "SetPole",
    value: function SetPole(UIndex, VIndex, P, Weight) {
      if (!Weight) {
        this.imp.SetPole(UIndex, VIndex, P.getImp());
      } else {
        this.imp.SetPole(UIndex, VIndex, P.getImp(), Weight);
      }
    }
  }, {
    key: "SetPoleCol",
    value: function SetPoleCol(VIndex, CPoles, dCPoleWeights) {
      var p = arrayToArray1OfPnt(CPoles);
      if (!dCPoleWeights) {
        this.imp.SetPoleCol(VIndex, p.getImp());
      } else {
        var pw = arrayToArray1OfReal(dCPoleWeights);
        this.imp.SetPoleCol(VIndex, p.getImp(), pw.getImp());
      }
    }
  }, {
    key: "SetPoleRow",
    value: function SetPoleRow(UIndex, CPoles, dCPoleWeights) {
      var p = arrayToArray1OfPnt(CPoles);
      if (!dCPoleWeights) {
        this.imp.SetPoleRow(UIndex, p.getImp());
      } else {
        var pw = arrayToArray1OfReal(dCPoleWeights);
        this.imp.SetPoleRow(UIndex, p.getImp(), pw.getImp());
      }
    }
  }, {
    key: "SetWeight",
    value: function SetWeight(UIndex, VIndex, Weight) {
      this.imp.SetWeight(UIndex, VIndex, Weight);
    }
  }, {
    key: "SetWeightCol",
    value: function SetWeightCol(VIndex, dCPoleWeights) {
      var pw = arrayToArray1OfReal(dCPoleWeights);
      this.imp.SetWeightCol(VIndex, pw.getImp());
    }
  }, {
    key: "SetWeightRow",
    value: function SetWeightRow(UIndex, dCPoleWeights) {
      var pw = arrayToArray1OfReal(dCPoleWeights);
      this.imp.SetWeightRow(UIndex, pw.getImp());
    }
  }, {
    key: "MovePoint",
    value: function MovePoint(U, V, P, UIndex1, UIndex2, VIndex1, VIndex2, UFULVFVL) {
      var a = arrayToArray1OfInteger(UFULVFVL);
      this.imp.MovePoint(U, V, P.getImp(), UIndex1, UIndex2, VIndex1, VIndex2, a.getImp());
    }
  }, {
    key: "IsUClosed",
    value: function IsUClosed() {
      return this.imp.IsUClosed();
    }
  }, {
    key: "IsVClosed",
    value: function IsVClosed() {
      return this.imp.IsVClosed();
    }
  }, {
    key: "IsCNu",
    value: function IsCNu(N) {
      return this.imp.IsCNu(N);
    }
  }, {
    key: "IsCNv",
    value: function IsCNv(N) {
      return this.imp.IsCNv(N);
    }
  }, {
    key: "IsUPeriodic",
    value: function IsUPeriodic() {
      return this.imp.IsUPeriodic();
    }
  }, {
    key: "IsURational",
    value: function IsURational() {
      return this.imp.IsURational();
    }
  }, {
    key: "IsVPeriodic",
    value: function IsVPeriodic() {
      return this.imp.IsVPeriodic();
    }
  }, {
    key: "IsVRational",
    value: function IsVRational() {
      return this.imp.IsVRational();
    }
  }, {
    key: "Bounds",
    value: function Bounds(U1U2V1V2) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 4);
      this.imp.Bounds(cppArray1OfReal);
      U1U2V1V2[0] = cppArray1OfReal.Value(1);
      U1U2V1V2[1] = cppArray1OfReal.Value(2);
      U1U2V1V2[2] = cppArray1OfReal.Value(3);
      U1U2V1V2[3] = cppArray1OfReal.Value(4);
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "FirstUKnotIndex",
    value: function FirstUKnotIndex() {
      return this.imp.FirstUKnotIndex();
    }
  }, {
    key: "FirstVKnotIndex",
    value: function FirstVKnotIndex() {
      return this.imp.FirstVKnotIndex();
    }
  }, {
    key: "LastUKnotIndex",
    value: function LastUKnotIndex() {
      return this.imp.LastUKnotIndex();
    }
  }, {
    key: "LastVKnotIndex",
    value: function LastVKnotIndex() {
      return this.imp.LastVKnotIndex();
    }
  }, {
    key: "NbUKnots",
    value: function NbUKnots() {
      return this.imp.NbUKnots();
    }
  }, {
    key: "NbUPoles",
    value: function NbUPoles() {
      return this.imp.NbUPoles();
    }
  }, {
    key: "NbVKnots",
    value: function NbVKnots() {
      return this.imp.NbVKnots();
    }
  }, {
    key: "NbVPoles",
    value: function NbVPoles() {
      return this.imp.NbVPoles();
    }
  }, {
    key: "Pole",
    value: function Pole(UIndex, VIndex) {
      return new Mx3dGePoint(this.imp.Pole(UIndex, VIndex));
    }
  }, {
    key: "Poles",
    value: function Poles() {
      var arr = new MxNewMdGeArray2OfPnt(this.imp.Poles());
      return array2OfPntToArray(arr);
    }
  }, {
    key: "UDegree",
    value: function UDegree() {
      return this.imp.UDegree();
    }
  }, {
    key: "UKnot",
    value: function UKnot(UIndex) {
      return this.imp.UKnot(UIndex);
    }
  }, {
    key: "UKnots",
    value: function UKnots() {
      var arr = new MxNewMdGeArray1OfReal(this.imp.UKnots());
      return array1OfRealToArray(arr);
    }
  }, {
    key: "UKnotSequence",
    value: function UKnotSequence() {
      var arr = new MxNewMdGeArray1OfReal(this.imp.UKnotSequence());
      return array1OfRealToArray(arr);
    }
  }, {
    key: "UMultiplicity",
    value: function UMultiplicity(UIndex) {
      return this.imp.UMultiplicity(UIndex);
    }
  }, {
    key: "UMultiplicities",
    value: function UMultiplicities() {
      var arr = new MxNewMdGeArray1OfInteger(this.imp.UMultiplicities());
      return array1OfIntegerToArray(arr);
    }
  }, {
    key: "VDegree",
    value: function VDegree() {
      return this.imp.VDegree();
    }
  }, {
    key: "VKnot",
    value: function VKnot(VIndex) {
      return this.imp.VKnot(VIndex);
    }
  }, {
    key: "VKnots",
    value: function VKnots() {
      var arr = new MxNewMdGeArray1OfReal(this.imp.VKnots());
      return array1OfRealToArray(arr);
    }
  }, {
    key: "VKnotSequence",
    value: function VKnotSequence() {
      var arr = new MxNewMdGeArray1OfReal(this.imp.VKnotSequence());
      return array1OfRealToArray(arr);
    }
  }, {
    key: "VMultiplicity",
    value: function VMultiplicity(VIndex) {
      return this.imp.VMultiplicity(VIndex);
    }
  }, {
    key: "VMultiplicities",
    value: function VMultiplicities() {
      var arr = new MxNewMdGeArray1OfInteger(this.imp.VMultiplicities());
      return array1OfIntegerToArray(arr);
    }
  }, {
    key: "Weight",
    value: function Weight(UIndex, VIndex) {
      return this.imp.Weight(UIndex, VIndex);
    }
  }, {
    key: "Weights",
    value: function Weights() {
      var arr = new MxNewMdGeArray2OfReal(this.imp.Weights());
      return array2OfRealToArray(arr);
    }
  }, {
    key: "D0",
    value: function D0(U, V, P) {
      this.imp.D0(U, V, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, V, P, D1U, D1V) {
      this.imp.D1(U, V, P.getImp(), D1U.getImp(), D1V.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, V, P, D1U, D1V, D2U, D2V, D2UV) {
      this.imp.D2(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV) {
      this.imp.D3(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp(), D3U.getImp(), D3V.getImp(), D3UUV.getImp(), D3UVV.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, V, Nu, Nv) {
      return new Mx3dGeVec(this.imp.DN(U, V, Nu, Nv));
    }
  }, {
    key: "LocalD0",
    value: function LocalD0(U, V, FromUK1, ToUK2, FromVK1, ToVK2, P) {
      this.imp.LocalD0(U, V, FromUK1, ToUK2, FromVK1, ToVK2, P.getImp());
    }
  }, {
    key: "LocalD1",
    value: function LocalD1(U, V, FromUK1, ToUK2, FromVK1, ToVK2, P, D1U, D1V) {
      this.imp.LocalD1(U, V, FromUK1, ToUK2, FromVK1, ToVK2, P.getImp(), D1U.getImp(), D1V.getImp());
    }
  }, {
    key: "LocalD2",
    value: function LocalD2(U, V, FromUK1, ToUK2, FromVK1, ToVK2, P, D1U, D1V, D2U, D2V, D2UV) {
      this.imp.LocalD2(U, V, FromUK1, ToUK2, FromVK1, ToVK2, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp());
    }
  }, {
    key: "LocalD3",
    value: function LocalD3(U, V, FromUK1, ToUK2, FromVK1, ToVK2, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV) {
      this.imp.LocalD3(U, V, FromUK1, ToUK2, FromVK1, ToVK2, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp(), D3U.getImp(), D3V.getImp(), D3UUV.getImp(), D3UVV.getImp());
    }
  }, {
    key: "LocalDN",
    value: function LocalDN(U, V, FromUK1, ToUK2, FromVK1, ToVK2, Nu, Nv) {
      return new Mx3dGeVec(this.imp.LocalDN(U, V, FromUK1, ToUK2, FromVK1, ToVK2, Nu, Nv));
    }
  }, {
    key: "LocalValue",
    value: function LocalValue(U, V, FromUK1, ToUK2, FromVK1, ToVK2) {
      return new Mx3dGePoint(this.imp.LocalValue(U, V, FromUK1, ToUK2, FromVK1, ToVK2));
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "DynamicType",
    value: function DynamicType() {
      return this.imp.DynamicType();
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomBSplineSurface(MxApp3D.globalMethods.DynCastToBSplineSurface(theObject.getImp()));
    }
  }, {
    key: "Face",
    value: function Face(UMin, UMax, VMin, VMax, TolDegen) {
      if (typeof UMin === "number" && arguments.length === 1) {
        return new Mx3dShapeFace(this.imp.Face(UMin));
      } else if (UMin instanceof Mx3dShapeWire && typeof UMax === "boolean") {
        return new Mx3dShapeFace(this.imp.Face(UMin.getImp(), UMax));
      } else if (typeof UMin === "number" && typeof UMax === "number" && typeof VMin === "number" && typeof VMax === "number" && typeof TolDegen === "number") {
        return new Mx3dShapeFace(this.imp.Face(UMin, UMax, VMin, VMax, TolDegen));
      } else {
        return new Mx3dShapeFace();
      }
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomBSplineSurface(MxApp3D.globalMethods.DynCastToBSplineSurface(theObject.getImp()));
    }
  }]);
  return Mx3dGeomBSplineSurface;
}(Mx3dGeomBoundedSurface);
var Mx3dGeomBezierSurface = /*#__PURE__*/function (_Mx3dGeomBoundedSurfa2) {
  _inherits$1(Mx3dGeomBezierSurface, _Mx3dGeomBoundedSurfa2);
  var _super84 = _createSuper$2(Mx3dGeomBezierSurface);
  function Mx3dGeomBezierSurface(SurfacePoles, PoleWeights) {
    var _this70;
    _classCallCheck$1(this, Mx3dGeomBezierSurface);
    var p = arrayToArray2OfPnt(SurfacePoles);
    if (SurfacePoles instanceof Array && SurfacePoles[0] instanceof Array && SurfacePoles[0][0] instanceof Mx3dGePoint && arguments.length === 1) {
      _this70 = _super84.call(this);
      _this70.initTempObject(new MxApp3D.imp.Mx3dGeomBezierSurface(p.getImp()));
    } else if (SurfacePoles instanceof Array && SurfacePoles[0] instanceof Array && SurfacePoles[0][0] instanceof Mx3dGePoint && PoleWeights instanceof Array && PoleWeights[0] instanceof Array && typeof PoleWeights[0][0] === "number") {
      _this70 = _super84.call(this);
      var w = arrayToArray2OfReal(PoleWeights);
      _this70.initTempObject(new MxApp3D.imp.Mx3dGeomBezierSurface(p.getImp(), w.getImp()));
    } else if (SurfacePoles instanceof Object) {
      _this70 = _super84.call(this, SurfacePoles);
    }
    return _possibleConstructorReturn$1(_this70);
  }
  _createClass$1(Mx3dGeomBezierSurface, [{
    key: "ExchangeUV",
    value: function ExchangeUV() {
      this.imp.ExchangeUV();
    }
  }, {
    key: "Increase",
    value: function Increase(UDeg, VDeg) {
      this.imp.Increase(UDeg, VDeg);
    }
  }, {
    key: "InsertPoleColAfter",
    value: function InsertPoleColAfter(VIndex, CPoles, CPoleWeights) {
      var p = arrayToArray1OfPnt(CPoles);
      if (!CPoleWeights) {
        this.imp.InsertPoleColAfter(VIndex, p.getImp());
      } else {
        var pw = arrayToArray1OfReal(CPoleWeights);
        this.imp.InsertPoleColAfter(VIndex, p.getImp(), pw.getImp());
      }
    }
  }, {
    key: "InsertPoleColBefore",
    value: function InsertPoleColBefore(VIndex, CPoles, CPoleWeights) {
      var p = arrayToArray1OfPnt(CPoles);
      if (!CPoleWeights) {
        this.imp.InsertPoleColBefore(VIndex, p.getImp());
      } else {
        var pw = arrayToArray1OfReal(CPoleWeights);
        this.imp.InsertPoleColBefore(VIndex, p.getImp(), pw.getImp());
      }
    }
  }, {
    key: "InsertPoleRowAfter",
    value: function InsertPoleRowAfter(UIndex, CPoles, CPoleWeights) {
      var p = arrayToArray1OfPnt(CPoles);
      if (!CPoleWeights) {
        this.imp.InsertPoleRowAfter(UIndex, p.getImp());
      } else {
        var pw = arrayToArray1OfReal(CPoleWeights);
        this.imp.InsertPoleRowAfter(UIndex, p.getImp(), pw.getImp());
      }
    }
  }, {
    key: "InsertPoleRowBefore",
    value: function InsertPoleRowBefore(UIndex, CPoles, CPoleWeights) {
      var p = arrayToArray1OfPnt(CPoles);
      if (!CPoleWeights) {
        this.imp.InsertPoleRowBefore(UIndex, p.getImp());
      } else {
        var pw = arrayToArray1OfReal(CPoleWeights);
        this.imp.InsertPoleRowBefore(UIndex, p.getImp(), pw.getImp());
      }
    }
  }, {
    key: "RemovePoleCol",
    value: function RemovePoleCol(VIndex) {
      this.imp.RemovePoleCol(VIndex);
    }
  }, {
    key: "RemovePoleRow",
    value: function RemovePoleRow(UIndex) {
      this.imp.RemovePoleRow(UIndex);
    }
  }, {
    key: "Segment",
    value: function Segment(U1, U2, V1, V2) {
      this.imp.Segment(U1, U2, V1, V2);
    }
  }, {
    key: "SetPole",
    value: function SetPole(UIndex, VIndex, P, Weight) {
      if (!Weight) {
        this.imp.SetPole(UIndex, VIndex, P.getImp());
      } else {
        this.imp.SetPole(UIndex, VIndex, P.getImp(), Weight);
      }
    }
  }, {
    key: "SetPoleCol",
    value: function SetPoleCol(VIndex, CPoles, CPoleWeights) {
      var p = arrayToArray1OfPnt(CPoles);
      if (!CPoleWeights) {
        this.imp.SetPoleCol(VIndex, p.getImp());
      } else {
        var pw = arrayToArray1OfReal(CPoleWeights);
        this.imp.SetPoleCol(VIndex, p.getImp(), pw.getImp());
      }
    }
  }, {
    key: "SetPoleRow",
    value: function SetPoleRow(UIndex, CPoles, CPoleWeights) {
      var p = arrayToArray1OfPnt(CPoles);
      if (!CPoleWeights) {
        this.imp.SetPoleRow(UIndex, p.getImp());
      } else {
        var pw = arrayToArray1OfReal(CPoleWeights);
        this.imp.SetPoleRow(UIndex, p.getImp(), pw.getImp());
      }
    }
  }, {
    key: "SetWeight",
    value: function SetWeight(UIndex, VIndex, Weight) {
      this.imp.SetWeight(UIndex, VIndex, Weight);
    }
  }, {
    key: "SetWeightCol",
    value: function SetWeightCol(VIndex, CPoleWeights) {
      var pw = arrayToArray1OfReal(CPoleWeights);
      this.imp.SetWeightCol(VIndex, pw.getImp());
    }
  }, {
    key: "SetWeightRow",
    value: function SetWeightRow(UIndex, CPoleWeights) {
      var pw = arrayToArray1OfReal(CPoleWeights);
      this.imp.SetWeightRow(UIndex, pw.getImp());
    }
  }, {
    key: "UReverse",
    value: function UReverse() {
      this.imp.UReverse();
    }
  }, {
    key: "UReversedParameter",
    value: function UReversedParameter(U) {
      return this.imp.UReversedParameter(U);
    }
  }, {
    key: "VReverse",
    value: function VReverse() {
      this.imp.VReverse();
    }
  }, {
    key: "VReversedParameter",
    value: function VReversedParameter(V) {
      return this.imp.VReversedParameter(V);
    }
  }, {
    key: "Bounds",
    value: function Bounds(U1U2V1V2) {
      var cppArray1OfReal = new MxApp3D.imp.MdGeArray1OfReal(1, 4);
      this.imp.Bounds(cppArray1OfReal);
      U1U2V1V2[0] = cppArray1OfReal.Value(1);
      U1U2V1V2[1] = cppArray1OfReal.Value(2);
      U1U2V1V2[2] = cppArray1OfReal.Value(3);
      U1U2V1V2[3] = cppArray1OfReal.Value(4);
    }
  }, {
    key: "Continuity",
    value: function Continuity() {
      return this.imp.Continuity();
    }
  }, {
    key: "D0",
    value: function D0(U, V, P) {
      this.imp.D0(U, V, P.getImp());
    }
  }, {
    key: "D1",
    value: function D1(U, V, P, D1U, D1V) {
      this.imp.D1(U, V, P.getImp(), D1U.getImp(), D1V.getImp());
    }
  }, {
    key: "D2",
    value: function D2(U, V, P, D1U, D1V, D2U, D2V, D2UV) {
      this.imp.D2(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp());
    }
  }, {
    key: "D3",
    value: function D3(U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV) {
      this.imp.D3(U, V, P.getImp(), D1U.getImp(), D1V.getImp(), D2U.getImp(), D2V.getImp(), D2UV.getImp(), D3U.getImp(), D3V.getImp(), D3UUV.getImp(), D3UVV.getImp());
    }
  }, {
    key: "DN",
    value: function DN(U, V, Nu, Nv) {
      return new Mx3dGeVec(this.imp.DN(U, V, Nu, Nv));
    }
  }, {
    key: "NbUPoles",
    value: function NbUPoles() {
      return this.imp.NbUPoles();
    }
  }, {
    key: "NbVPoles",
    value: function NbVPoles() {
      return this.imp.NbVPoles();
    }
  }, {
    key: "Pole",
    value: function Pole(UIndex, VIndex) {
      return new Mx3dGePoint(this.imp.Pole(UIndex, VIndex));
    }
  }, {
    key: "Poles",
    value: function Poles() {
      var arr = new MxNewMdGeArray2OfPnt(this.imp.Poles());
      return array2OfPntToArray(arr);
    }
  }, {
    key: "UDegree",
    value: function UDegree() {
      return this.imp.UDegree();
    }
  }, {
    key: "Weight",
    value: function Weight(UIndex, VIndex) {
      return this.imp.Weight(UIndex, VIndex);
    }
  }, {
    key: "Weights",
    value: function Weights() {
      var arr = new MxNewMdGeArray2OfReal(this.imp.Weights());
      return array2OfRealToArray(arr);
    }
  }, {
    key: "IsUClosed",
    value: function IsUClosed() {
      return this.imp.IsUClosed();
    }
  }, {
    key: "IsVClosed",
    value: function IsVClosed() {
      return this.imp.IsVClosed();
    }
  }, {
    key: "IsCNu",
    value: function IsCNu(N) {
      return this.imp.IsCNu(N);
    }
  }, {
    key: "IsCNv",
    value: function IsCNv(N) {
      return this.imp.IsCNv(N);
    }
  }, {
    key: "IsUPeriodic",
    value: function IsUPeriodic() {
      return this.imp.IsUPeriodic();
    }
  }, {
    key: "IsVPeriodic",
    value: function IsVPeriodic() {
      return this.imp.IsVPeriodic();
    }
  }, {
    key: "IsURational",
    value: function IsURational() {
      return this.imp.IsURational();
    }
  }, {
    key: "IsVRational",
    value: function IsVRational() {
      return this.imp.IsVRational();
    }
  }, {
    key: "Transform",
    value: function Transform(T) {
      this.imp.Transform(T.getImp());
    }
  }, {
    key: "Copy",
    value: function Copy() {
      return new Mx3dGeomObject(this.imp.Copy());
    }
  }, {
    key: "DynCast",
    value: function DynCast(theObject) {
      return new Mx3dGeomBezierSurface(MxApp3D.globalMethods.DynCastToBezierSurface(theObject.getImp()));
    }
  }, {
    key: "Face",
    value: function Face(UMin, UMax, VMin, VMax, TolDegen) {
      if (typeof UMin === "number" && arguments.length === 1) {
        return new Mx3dShapeFace(this.imp.Face(UMin));
      } else if (UMin instanceof Mx3dShapeWire && typeof UMax === "boolean") {
        return new Mx3dShapeFace(this.imp.Face(UMin.getImp(), UMax));
      } else if (typeof UMin === "number" && typeof UMax === "number" && typeof VMin === "number" && typeof VMax === "number" && typeof TolDegen === "number") {
        return new Mx3dShapeFace(this.imp.Face(UMin, UMax, VMin, VMax, TolDegen));
      } else {
        return new Mx3dShapeFace();
      }
    }
  }], [{
    key: "DownCast",
    value: function DownCast(theObject) {
      return new Mx3dGeomBezierSurface(MxApp3D.globalMethods.DynCastToBezierSurface(theObject.getImp()));
    }
  }]);
  return Mx3dGeomBezierSurface;
}(Mx3dGeomBoundedSurface);
var Mx3dGeMaterial = /*#__PURE__*/function (_Mx3dBaseObject19) {
  _inherits$1(Mx3dGeMaterial, _Mx3dBaseObject19);
  var _super85 = _createSuper$2(Mx3dGeMaterial);
  function Mx3dGeMaterial(theName) {
    var _this71;
    _classCallCheck$1(this, Mx3dGeMaterial);
    if (!theName) {
      _this71 = _super85.call(this);
      _this71.initTempObject(new MxApp3D.imp.Mx3dGeMaterial());
    } else if (typeof theName === "number") {
      _this71 = _super85.call(this);
      _this71.initTempObject(new MxApp3D.imp.Mx3dGeMaterial(theName));
    } else if (theName instanceof Object) {
      _this71 = _super85.call(this, theName);
    }
    return _possibleConstructorReturn$1(_this71);
  }
  _createClass$1(Mx3dGeMaterial, [{
    key: "Name",
    value: function Name() {
      return this.imp.Name();
    }
  }, {
    key: "RequestedName",
    value: function RequestedName() {
      return this.imp.RequestedName();
    }
  }, {
    key: "StringName",
    value: function StringName() {
      return this.imp.StringName();
    }
  }, {
    key: "MaterialName",
    value: function MaterialName() {
      return this.imp.MaterialName();
    }
  }, {
    key: "SetMaterialName",
    value: function SetMaterialName(theName) {
      this.imp.SetMaterialName(theName);
    }
  }, {
    key: "Reset",
    value: function Reset() {
      this.imp.Reset();
    }
  }, {
    key: "Color",
    value: function Color() {
      return new Mx3dGeColor(this.imp.Color());
    }
  }, {
    key: "SetColor",
    value: function SetColor(theColor) {
      this.imp.SetColor(theColor.getImp());
    }
  }, {
    key: "Transparency",
    value: function Transparency() {
      return this.imp.Transparency();
    }
  }, {
    key: "Alpha",
    value: function Alpha() {
      return this.imp.Alpha();
    }
  }, {
    key: "SetTransparency",
    value: function SetTransparency(theValue) {
      this.imp.SetTransparency(theValue);
    }
  }, {
    key: "SetAlpha",
    value: function SetAlpha(theValue) {
      this.imp.SetAlpha(theValue);
    }
  }, {
    key: "AmbientColor",
    value: function AmbientColor() {
      return new Mx3dGeColor(this.imp.AmbientColor());
    }
  }, {
    key: "SetAmbientColor",
    value: function SetAmbientColor(theColor) {
      this.imp.SetAmbientColor(theColor.getImp());
    }
  }, {
    key: "DiffuseColor",
    value: function DiffuseColor() {
      return new Mx3dGeColor(this.imp.DiffuseColor());
    }
  }, {
    key: "SetDiffuseColor",
    value: function SetDiffuseColor(theColor) {
      this.imp.SetDiffuseColor(theColor.getImp());
    }
  }, {
    key: "SpecularColor",
    value: function SpecularColor() {
      return new Mx3dGeColor(this.imp.SpecularColor());
    }
  }, {
    key: "SetSpecularColor",
    value: function SetSpecularColor(theColor) {
      this.imp.SetSpecularColor(theColor.getImp());
    }
  }, {
    key: "EmissiveColor",
    value: function EmissiveColor() {
      return new Mx3dGeColor(this.imp.EmissiveColor());
    }
  }, {
    key: "SetEmissiveColor",
    value: function SetEmissiveColor(theColor) {
      this.imp.SetEmissiveColor(theColor.getImp());
    }
  }, {
    key: "Shininess",
    value: function Shininess() {
      return this.imp.Shininess();
    }
  }, {
    key: "SetShininess",
    value: function SetShininess(theValue) {
      this.imp.SetShininess(theValue);
    }
  }, {
    key: "IncreaseShine",
    value: function IncreaseShine(theDelta) {
      this.imp.IncreaseShine(theDelta);
    }
  }, {
    key: "RefractionIndex",
    value: function RefractionIndex() {
      return this.imp.RefractionIndex();
    }
  }, {
    key: "SetRefractionIndex",
    value: function SetRefractionIndex(theValue) {
      this.imp.SetRefractionIndex(theValue);
    }
  }, {
    key: "ReflectionMode",
    value: function ReflectionMode(theType) {
      return this.imp.ReflectionMode(theType);
    }
  }, {
    key: "MaterialType",
    value: function MaterialType() {
      return this.imp.MaterialType();
    }
  }, {
    key: "SetMaterialType",
    value: function SetMaterialType(theType) {
      this.imp.SetMaterialType(theType);
    }
  }, {
    key: "IsDifferent",
    value: function IsDifferent(theOther) {
      return this.imp.IsDifferent(theOther.getImp());
    }
  }, {
    key: "IsEqual",
    value: function IsEqual(theOther) {
      return this.imp.IsEqual(theOther.getImp());
    }
  }]);
  return Mx3dGeMaterial;
}(Mx3dBaseObject);
var Mx3dAspectLine = /*#__PURE__*/function (_Mx3dAspectObject) {
  _inherits$1(Mx3dAspectLine, _Mx3dAspectObject);
  var _super86 = _createSuper$2(Mx3dAspectLine);
  function Mx3dAspectLine(theColor, theType, theWidth) {
    var _this72;
    _classCallCheck$1(this, Mx3dAspectLine);
    if (theColor instanceof Mx3dGeColor && typeof theType === "number" && typeof theWidth === "number") {
      _this72 = _super86.call(this);
      _this72.initTempObject(new MxApp3D.imp.Mx3dAspectLine(theColor.getImp(), theType, theWidth));
    } else if (theColor instanceof Object) {
      _this72 = _super86.call(this, theColor);
    }
    return _possibleConstructorReturn$1(_this72);
  }
  _createClass$1(Mx3dAspectLine, [{
    key: "SetColor",
    value: function SetColor(theColor) {
      this.imp.SetColor(theColor.getImp());
    }
  }, {
    key: "SetTypeOfLine",
    value: function SetTypeOfLine(theType) {
      this.imp.SetTypeOfLine(theType);
    }
  }, {
    key: "SetWidth",
    value: function SetWidth(theWidth) {
      this.imp.SetWidth(theWidth);
    }
  }]);
  return Mx3dAspectLine;
}(Mx3dAspectObject);
var Mx3dAspectText = /*#__PURE__*/function (_Mx3dAspectObject2) {
  _inherits$1(Mx3dAspectText, _Mx3dAspectObject2);
  var _super87 = _createSuper$2(Mx3dAspectText);
  function Mx3dAspectText(p) {
    var _this73;
    _classCallCheck$1(this, Mx3dAspectText);
    if (!p) {
      _this73 = _super87.call(this);
      _this73.initTempObject(new MxApp3D.imp.Mx3dAspectText());
    } else {
      _this73 = _super87.call(this, p);
    }
    return _possibleConstructorReturn$1(_this73);
  }
  _createClass$1(Mx3dAspectText, [{
    key: "SetColor",
    value: function SetColor(theColor) {
      this.imp.SetColor(theColor.getImp());
    }
  }, {
    key: "SetFont",
    value: function SetFont(theFont) {
      this.imp.SetFont(theFont);
    }
  }, {
    key: "SetHeight",
    value: function SetHeight(theHeight) {
      this.imp.SetHeight(theHeight);
    }
  }, {
    key: "SetAngle",
    value: function SetAngle(theAngle) {
      this.imp.SetAngle(theAngle);
    }
  }, {
    key: "Height",
    value: function Height() {
      return this.imp.Height();
    }
  }, {
    key: "Angle",
    value: function Angle() {
      return this.imp.Angle();
    }
  }, {
    key: "SetHorizontalJustification",
    value: function SetHorizontalJustification(theJustification) {
      this.imp.SetHorizontalJustification(theJustification);
    }
  }, {
    key: "SetVerticalJustification",
    value: function SetVerticalJustification(theJustification) {
      this.imp.SetVerticalJustification(theJustification);
    }
  }, {
    key: "SetOrientation",
    value: function SetOrientation(theOrientation) {
      this.imp.SetOrientation(theOrientation);
    }
  }, {
    key: "HorizontalJustification",
    value: function HorizontalJustification() {
      return this.imp.HorizontalJustification();
    }
  }, {
    key: "VerticalJustification",
    value: function VerticalJustification() {
      return this.imp.VerticalJustification();
    }
  }, {
    key: "Orientation",
    value: function Orientation() {
      return this.imp.Orientation();
    }
  }]);
  return Mx3dAspectText;
}(Mx3dAspectObject);
var Mx3dAspectArrow = /*#__PURE__*/function (_Mx3dAspectObject3) {
  _inherits$1(Mx3dAspectArrow, _Mx3dAspectObject3);
  var _super88 = _createSuper$2(Mx3dAspectArrow);
  function Mx3dAspectArrow(anAngle, aLength) {
    var _this74;
    _classCallCheck$1(this, Mx3dAspectArrow);
    if (!anAngle && !aLength) {
      _this74 = _super88.call(this);
      _this74.initTempObject(new MxApp3D.imp.Mx3dAspectArrow());
    } else if (typeof anAngle === "number" && typeof aLength === "number") {
      _this74 = _super88.call(this);
      _this74.initTempObject(new MxApp3D.imp.Mx3dAspectArrow(anAngle, aLength));
    } else if (anAngle instanceof Object) {
      _this74 = _super88.call(this, anAngle);
    }
    return _possibleConstructorReturn$1(_this74);
  }
  _createClass$1(Mx3dAspectArrow, [{
    key: "SetAngle",
    value: function SetAngle(anAngle) {
      this.imp.SetAngle(anAngle);
    }
  }, {
    key: "Angle",
    value: function Angle() {
      return this.imp.Angle();
    }
  }, {
    key: "SetLength",
    value: function SetLength(theLength) {
      this.imp.SetLength(theLength);
    }
  }, {
    key: "Length",
    value: function Length() {
      return this.imp.Length();
    }
  }, {
    key: "SetZoomable",
    value: function SetZoomable(theIsZoomable) {
      this.imp.SetZoomable(theIsZoomable);
    }
  }, {
    key: "IsZoomable",
    value: function IsZoomable() {
      return this.imp.IsZoomable();
    }
  }, {
    key: "SetColor",
    value: function SetColor(theColor) {
      this.imp.SetColor(theColor.getImp());
    }
  }]);
  return Mx3dAspectArrow;
}(Mx3dAspectObject);
var Mx3dAspectDim = /*#__PURE__*/function (_Mx3dAspectObject4) {
  _inherits$1(Mx3dAspectDim, _Mx3dAspectObject4);
  var _super89 = _createSuper$2(Mx3dAspectDim);
  function Mx3dAspectDim(p) {
    var _this75;
    _classCallCheck$1(this, Mx3dAspectDim);
    if (!p) {
      _this75 = _super89.call(this);
      _this75.initTempObject(new MxApp3D.imp.Mx3dAspectDim());
    } else {
      _this75 = _super89.call(this, p);
    }
    return _possibleConstructorReturn$1(_this75);
  }
  _createClass$1(Mx3dAspectDim, [{
    key: "SetLineAspect",
    value: function SetLineAspect(theAspect) {
      this.imp.SetLineAspect(theAspect.getImp());
    }
  }, {
    key: "SetTextAspect",
    value: function SetTextAspect(theAspect) {
      this.imp.SetTextAspect(theAspect.getImp());
    }
  }, {
    key: "IsText3d",
    value: function IsText3d() {
      return this.imp.IsText3d();
    }
  }, {
    key: "MakeText3d",
    value: function MakeText3d(isText3d) {
      this.imp.MakeText3d(isText3d);
    }
  }, {
    key: "IsTextShaded",
    value: function IsTextShaded() {
      return this.imp.IsTextShaded();
    }
  }, {
    key: "MakeTextShaded",
    value: function MakeTextShaded(theIsTextShaded) {
      this.imp.MakeTextShaded(theIsTextShaded);
    }
  }, {
    key: "IsArrows3d",
    value: function IsArrows3d() {
      return this.imp.IsArrows3d();
    }
  }, {
    key: "MakeArrows3d",
    value: function MakeArrows3d(theIsArrows3d) {
      this.imp.MakeArrows3d(theIsArrows3d);
    }
  }, {
    key: "IsUnitsDisplayed",
    value: function IsUnitsDisplayed() {
      return this.imp.IsUnitsDisplayed();
    }
  }, {
    key: "MakeUnitsDisplayed",
    value: function MakeUnitsDisplayed(theIsDisplayed) {
      this.imp.MakeUnitsDisplayed(theIsDisplayed);
    }
  }, {
    key: "SetArrowOrientation",
    value: function SetArrowOrientation(theArrowOrient) {
      this.imp.SetArrowOrientation(theArrowOrient);
    }
  }, {
    key: "ArrowOrientation",
    value: function ArrowOrientation() {
      return this.imp.ArrowOrientation();
    }
  }, {
    key: "SetTextVerticalPosition",
    value: function SetTextVerticalPosition(thePosition) {
      this.imp.SetTextVerticalPosition(thePosition);
    }
  }, {
    key: "TextVerticalPosition",
    value: function TextVerticalPosition() {
      return this.imp.TextVerticalPosition();
    }
  }, {
    key: "SetTextHorizontalPosition",
    value: function SetTextHorizontalPosition(thePosition) {
      this.imp.SetTextHorizontalPosition(thePosition);
    }
  }, {
    key: "TextHorizontalPosition",
    value: function TextHorizontalPosition() {
      return this.imp.TextHorizontalPosition();
    }
  }, {
    key: "SetArrowAspect",
    value: function SetArrowAspect(theAspect) {
      this.imp.SetArrowAspect(theAspect.getImp());
    }
  }, {
    key: "SetCommonColor",
    value: function SetCommonColor(theColor) {
      this.imp.SetCommonColor(theColor.getImp());
    }
  }, {
    key: "SetExtensionSize",
    value: function SetExtensionSize(theSize) {
      this.imp.SetExtensionSize(theSize);
    }
  }, {
    key: "ExtensionSize",
    value: function ExtensionSize() {
      return this.imp.ExtensionSize();
    }
  }, {
    key: "SetArrowTailSize",
    value: function SetArrowTailSize(theSize) {
      this.imp.SetArrowTailSize(theSize);
    }
  }, {
    key: "ArrowTailSize",
    value: function ArrowTailSize() {
      return this.imp.ArrowTailSize();
    }
  }, {
    key: "SetValueStringFormat",
    value: function SetValueStringFormat(theFormat) {
      this.imp.SetValueStringFormat(theFormat);
    }
  }, {
    key: "ValueStringFormat",
    value: function ValueStringFormat() {
      return this.imp.ValueStringFormat();
    }
  }]);
  return Mx3dAspectDim;
}(Mx3dAspectObject);
var Mx3dDimDiameter = /*#__PURE__*/function (_Mx3dDimObject) {
  _inherits$1(Mx3dDimDiameter, _Mx3dDimObject);
  var _super90 = _createSuper$2(Mx3dDimDiameter);
  function Mx3dDimDiameter(theCircle, thePlane) {
    var _this76;
    _classCallCheck$1(this, Mx3dDimDiameter);
    if (theCircle instanceof Mx3dGeCircle && !thePlane) {
      _this76 = _super90.call(this);
      _this76.initTempObject(new MxApp3D.imp.Mx3dDimDiameter(theCircle.getImp()));
    } else if (theCircle instanceof Mx3dGeCircle && thePlane instanceof Mx3dGePlane) {
      _this76 = _super90.call(this);
      _this76.initTempObject(new MxApp3D.imp.Mx3dDimDiameter(theCircle.getImp(), thePlane.getImp()));
    } else if (theCircle instanceof Object) {
      _this76 = _super90.call(this, theCircle);
    }
    return _possibleConstructorReturn$1(_this76);
  }
  _createClass$1(Mx3dDimDiameter, [{
    key: "Circle",
    value: function Circle() {
      return new Mx3dGeCircle(this.imp.Circle());
    }
  }, {
    key: "AnchorPoint",
    value: function AnchorPoint() {
      return new Mx3dGePoint(this.imp.AnchorPoint());
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "SetMeasuredGeometry",
    value: function SetMeasuredGeometry(theCircle) {
      this.imp.SetMeasuredGeometry(theCircle.getImp());
    }
  }, {
    key: "SetTextPosition",
    value: function SetTextPosition(theTextPos) {
      this.imp.SetTextPosition(theTextPos.getImp());
    }
  }, {
    key: "GetTextPosition",
    value: function GetTextPosition() {
      return new Mx3dGePoint(this.imp.GetTextPosition());
    }
  }, {
    key: "SetDisplayUnits",
    value: function SetDisplayUnits(theUnits) {
      this.imp.SetDisplayUnits(theUnits);
    }
  }, {
    key: "SetModelUnits",
    value: function SetModelUnits(theUnits) {
      this.imp.SetModelUnits(theUnits);
    }
  }, {
    key: "GetValue",
    value: function GetValue() {
      return this.imp.GetValue();
    }
  }, {
    key: "SetComputedValue",
    value: function SetComputedValue() {
      this.imp.SetComputedValue();
    }
  }, {
    key: "SetCustomValue",
    value: function SetCustomValue(theValue) {
      this.imp.SetCustomValue(theValue);
    }
  }, {
    key: "GetPlane",
    value: function GetPlane() {
      return new Mx3dGePlane(this.imp.GetPlane());
    }
  }, {
    key: "GetGeometryType",
    value: function GetGeometryType() {
      return this.imp.GetGeometryType();
    }
  }, {
    key: "SetCustomPlane",
    value: function SetCustomPlane(thePlane) {
      this.imp.SetCustomPlane(thePlane.getImp());
    }
  }, {
    key: "UnsetCustomPlane",
    value: function UnsetCustomPlane() {
      this.imp.UnsetCustomPlane();
    }
  }, {
    key: "IsTextPositionCustom",
    value: function IsTextPositionCustom() {
      return this.imp.IsTextPositionCustom();
    }
  }, {
    key: "SetDimensionAspect",
    value: function SetDimensionAspect(theDimensionAspect) {
      this.imp.SetDimensionAspect(theDimensionAspect.getImp());
    }
  }, {
    key: "KindOfDimension",
    value: function KindOfDimension() {
      return this.imp.KindOfDimension();
    }
  }, {
    key: "UnsetFixedTextPosition",
    value: function UnsetFixedTextPosition() {
      this.imp.UnsetFixedTextPosition();
    }
  }, {
    key: "SelToleranceForText2d",
    value: function SelToleranceForText2d() {
      return this.imp.SelToleranceForText2d();
    }
  }, {
    key: "SetSelToleranceForText2d",
    value: function SetSelToleranceForText2d(theTol) {
      this.imp.SetSelToleranceForText2d(theTol);
    }
  }, {
    key: "GetFlyout",
    value: function GetFlyout() {
      return this.imp.GetFlyout();
    }
  }, {
    key: "SetFlyout",
    value: function SetFlyout(theFlyout) {
      this.imp.SetFlyout(theFlyout);
    }
  }, {
    key: "IsValid",
    value: function IsValid() {
      return this.imp.IsValid();
    }
  }]);
  return Mx3dDimDiameter;
}(Mx3dDimObject);
var Mx3dDimRadius = /*#__PURE__*/function (_Mx3dDimObject2) {
  _inherits$1(Mx3dDimRadius, _Mx3dDimObject2);
  var _super91 = _createSuper$2(Mx3dDimRadius);
  function Mx3dDimRadius(theCircle, theAnchorPoint) {
    var _this77;
    _classCallCheck$1(this, Mx3dDimRadius);
    if (theCircle instanceof Mx3dGeCircle && !theAnchorPoint) {
      _this77 = _super91.call(this);
      _this77.initTempObject(new MxApp3D.imp.Mx3dDimRadius(theCircle.getImp()));
    } else if (theCircle instanceof Mx3dGeCircle && theAnchorPoint instanceof Mx3dGePoint) {
      _this77 = _super91.call(this);
      _this77.initTempObject(new MxApp3D.imp.Mx3dDimRadius(theCircle.getImp(), theAnchorPoint.getImp()));
    } else if (theCircle instanceof Object) {
      _this77 = _super91.call(this, theCircle);
    }
    return _possibleConstructorReturn$1(_this77);
  }
  _createClass$1(Mx3dDimRadius, [{
    key: "Circle",
    value: function Circle() {
      return new Mx3dGeCircle(this.imp.Circle());
    }
  }, {
    key: "AnchorPoint",
    value: function AnchorPoint() {
      return new Mx3dGePoint(this.imp.AnchorPoint());
    }
  }, {
    key: "Shape",
    value: function Shape() {
      return new Mx3dShapeObject(this.imp.Shape());
    }
  }, {
    key: "SetMeasuredGeometry",
    value: function SetMeasuredGeometry(theCircle, theAnchorPoint, theHasAnchor) {
      if (theCircle instanceof Mx3dGeCircle && !theAnchorPoint && !theHasAnchor) {
        this.imp.SetMeasuredGeometry(theCircle.getImp());
      } else if (theCircle instanceof Mx3dGeCircle && theAnchorPoint instanceof Mx3dGePoint && typeof theHasAnchor === "boolean") {
        this.imp.SetMeasuredGeometry(theCircle.getImp(), theAnchorPoint.getImp(), theHasAnchor);
      }
    }
  }, {
    key: "SetTextPosition",
    value: function SetTextPosition(theTextPos) {
      this.imp.SetTextPosition(theTextPos.getImp());
    }
  }, {
    key: "GetTextPosition",
    value: function GetTextPosition() {
      return new Mx3dGePoint(this.imp.GetTextPosition());
    }
  }, {
    key: "GetValue",
    value: function GetValue() {
      return this.imp.GetValue();
    }
  }, {
    key: "SetComputedValue",
    value: function SetComputedValue() {
      this.imp.SetComputedValue();
    }
  }, {
    key: "SetCustomValue",
    value: function SetCustomValue(theValue) {
      this.imp.SetCustomValue(theValue);
    }
  }, {
    key: "GetPlane",
    value: function GetPlane() {
      return new Mx3dGePlane(this.imp.GetPlane());
    }
  }, {
    key: "GetGeometryType",
    value: function GetGeometryType() {
      return this.imp.GetGeometryType();
    }
  }, {
    key: "SetCustomPlane",
    value: function SetCustomPlane(thePlane) {
      this.imp.SetCustomPlane(thePlane.getImp());
    }
  }, {
    key: "UnsetCustomPlane",
    value: function UnsetCustomPlane() {
      this.imp.UnsetCustomPlane();
    }
  }, {
    key: "IsTextPositionCustom",
    value: function IsTextPositionCustom() {
      return this.imp.IsTextPositionCustom();
    }
  }, {
    key: "SetDimensionAspect",
    value: function SetDimensionAspect(theDimensionAspect) {
      this.imp.SetDimensionAspect(theDimensionAspect.getImp());
    }
  }, {
    key: "KindOfDimension",
    value: function KindOfDimension() {
      return this.imp.KindOfDimension();
    }
  }, {
    key: "UnsetFixedTextPosition",
    value: function UnsetFixedTextPosition() {
      this.imp.UnsetFixedTextPosition();
    }
  }, {
    key: "SelToleranceForText2d",
    value: function SelToleranceForText2d() {
      return this.imp.SelToleranceForText2d();
    }
  }, {
    key: "SetSelToleranceForText2d",
    value: function SetSelToleranceForText2d(theTol) {
      this.imp.SetSelToleranceForText2d(theTol);
    }
  }, {
    key: "GetFlyout",
    value: function GetFlyout() {
      return this.imp.GetFlyout();
    }
  }, {
    key: "SetFlyout",
    value: function SetFlyout(theFlyout) {
      this.imp.SetFlyout(theFlyout);
    }
  }, {
    key: "IsValid",
    value: function IsValid() {
      return this.imp.IsValid();
    }
  }]);
  return Mx3dDimRadius;
}(Mx3dDimObject);
var Mx3dDimAngle = /*#__PURE__*/function (_Mx3dDimObject3) {
  _inherits$1(Mx3dDimAngle, _Mx3dDimObject3);
  var _super92 = _createSuper$2(Mx3dDimAngle);
  function Mx3dDimAngle(theFirstPoint, theSecondPoint, theThirdPoint) {
    var _this78;
    _classCallCheck$1(this, Mx3dDimAngle);
    if (theFirstPoint instanceof Mx3dShapeEdge && theSecondPoint instanceof Mx3dShapeEdge) {
      _this78 = _super92.call(this);
      _this78.initTempObject(new MxApp3D.imp.Mx3dDimAngle(theFirstPoint.getImp(), theSecondPoint.getImp()));
    } else if (theFirstPoint instanceof Mx3dGePoint && theSecondPoint instanceof Mx3dGePoint && theThirdPoint instanceof Mx3dGePoint) {
      _this78 = _super92.call(this);
      _this78.initTempObject(new MxApp3D.imp.Mx3dDimAngle(theFirstPoint.getImp(), theSecondPoint.getImp(), theThirdPoint.getImp()));
    } else if (theFirstPoint instanceof Object) {
      _this78 = _super92.call(this, theFirstPoint);
    }
    return _possibleConstructorReturn$1(_this78);
  }
  _createClass$1(Mx3dDimAngle, [{
    key: "FirstPoint",
    value: function FirstPoint() {
      return new Mx3dGePoint(this.imp.FirstPoint());
    }
  }, {
    key: "SecondPoint",
    value: function SecondPoint() {
      return new Mx3dGePoint(this.imp.SecondPoint());
    }
  }, {
    key: "CenterPoint",
    value: function CenterPoint() {
      return new Mx3dGePoint(this.imp.CenterPoint());
    }
  }, {
    key: "FirstShape",
    value: function FirstShape() {
      return new Mx3dShapeObject(this.imp.FirstShape());
    }
  }, {
    key: "SecondShape",
    value: function SecondShape() {
      return new Mx3dShapeObject(this.imp.SecondShape());
    }
  }, {
    key: "ThirdShape",
    value: function ThirdShape() {
      return new Mx3dShapeObject(this.imp.ThirdShape());
    }
  }, {
    key: "SetMeasuredGeometry",
    value: function SetMeasuredGeometry(theFirstPoint, theSecondPoint, theThridPoint) {
      if (theFirstPoint instanceof Mx3dShapeFace) {
        this.imp.SetMeasuredGeometry(theFirstPoint.getImp());
      } else if (theFirstPoint instanceof Mx3dShapeEdge && theSecondPoint instanceof Mx3dShapeEdge) {
        this.imp.SetMeasuredGeometry(theFirstPoint.getImp(), theSecondPoint.getImp());
      } else if (theFirstPoint instanceof Mx3dGePoint && theSecondPoint instanceof Mx3dGePoint && theThridPoint instanceof Mx3dGePoint) {
        this.imp.SetMeasuredGeometry(theFirstPoint.getImp(), theSecondPoint.getImp(), theThridPoint.getImp());
      }
    }
  }, {
    key: "SetTextPosition",
    value: function SetTextPosition(theTextPos) {
      this.imp.SetTextPosition(theTextPos.getImp());
    }
  }, {
    key: "GetTextPosition",
    value: function GetTextPosition() {
      return new Mx3dGePoint(this.imp.GetTextPosition());
    }
  }, {
    key: "GetDisplayUnits",
    value: function GetDisplayUnits() {
      return this.imp.GetDisplayUnits();
    }
  }, {
    key: "GetModelUnits",
    value: function GetModelUnits() {
      return this.imp.GetModelUnits();
    }
  }, {
    key: "SetDisplayUnits",
    value: function SetDisplayUnits(theUnits) {
      this.imp.SetDisplayUnits(theUnits);
    }
  }, {
    key: "SetModelUnits",
    value: function SetModelUnits(theUnits) {
      this.imp.SetModelUnits(theUnits);
    }
  }, {
    key: "SetType",
    value: function SetType(theType) {
      this.imp.SetType(theType);
    }
  }, {
    key: "GetType",
    value: function GetType() {
      return this.imp.GetType();
    }
  }, {
    key: "SetArrowsVisibility",
    value: function SetArrowsVisibility(theType) {
      this.imp.SetArrowsVisibility(theType);
    }
  }, {
    key: "GetArrowsVisibility",
    value: function GetArrowsVisibility() {
      return this.imp.GetArrowsVisibility();
    }
  }, {
    key: "GetValue",
    value: function GetValue() {
      return this.imp.GetValue();
    }
  }, {
    key: "SetComputedValue",
    value: function SetComputedValue() {
      this.imp.SetComputedValue();
    }
  }, {
    key: "SetCustomValue",
    value: function SetCustomValue(theValue) {
      this.imp.SetCustomValue(theValue);
    }
  }, {
    key: "GetPlane",
    value: function GetPlane() {
      return new Mx3dGePlane(this.imp.GetPlane());
    }
  }, {
    key: "GetGeometryType",
    value: function GetGeometryType() {
      return this.imp.GetGeometryType();
    }
  }, {
    key: "SetCustomPlane",
    value: function SetCustomPlane(thePlane) {
      this.imp.SetCustomPlane(thePlane.getImp());
    }
  }, {
    key: "UnsetCustomPlane",
    value: function UnsetCustomPlane() {
      this.imp.UnsetCustomPlane();
    }
  }, {
    key: "IsTextPositionCustom",
    value: function IsTextPositionCustom() {
      return this.imp.IsTextPositionCustom();
    }
  }, {
    key: "SetDimensionAspect",
    value: function SetDimensionAspect(theDimensionAspect) {
      this.imp.SetDimensionAspect(theDimensionAspect.getImp());
    }
  }, {
    key: "KindOfDimension",
    value: function KindOfDimension() {
      return this.imp.KindOfDimension();
    }
  }, {
    key: "UnsetFixedTextPosition",
    value: function UnsetFixedTextPosition() {
      this.imp.UnsetFixedTextPosition();
    }
  }, {
    key: "SelToleranceForText2d",
    value: function SelToleranceForText2d() {
      return this.imp.SelToleranceForText2d();
    }
  }, {
    key: "SetSelToleranceForText2d",
    value: function SetSelToleranceForText2d(theTol) {
      this.imp.SetSelToleranceForText2d(theTol);
    }
  }, {
    key: "GetFlyout",
    value: function GetFlyout() {
      return this.imp.GetFlyout();
    }
  }, {
    key: "SetFlyout",
    value: function SetFlyout(theFlyout) {
      this.imp.SetFlyout(theFlyout);
    }
  }, {
    key: "IsValid",
    value: function IsValid() {
      return this.imp.IsValid();
    }
  }]);
  return Mx3dDimAngle;
}(Mx3dDimObject);
var Mx3dDimLength = /*#__PURE__*/function (_Mx3dDimObject4) {
  _inherits$1(Mx3dDimLength, _Mx3dDimObject4);
  var _super93 = _createSuper$2(Mx3dDimLength);
  function Mx3dDimLength(theFirstPoint, theSecondPoint, thePlane) {
    var _this79;
    _classCallCheck$1(this, Mx3dDimLength);
    if (!theFirstPoint) {
      _this79 = _super93.call(this);
      _this79.initTempObject(new MxApp3D.imp.Mx3dDimLength());
    } else if (theFirstPoint instanceof Mx3dShapeEdge && theSecondPoint instanceof Mx3dGePlane) {
      _this79 = _super93.call(this);
      _this79.initTempObject(new MxApp3D.imp.Mx3dDimLength(theFirstPoint.getImp(), theSecondPoint.getImp()));
    } else if (theFirstPoint instanceof Mx3dGePoint && theSecondPoint instanceof Mx3dGePoint && thePlane instanceof Mx3dGePlane) {
      _this79 = _super93.call(this);
      _this79.initTempObject(new MxApp3D.imp.Mx3dDimLength(theFirstPoint.getImp(), theSecondPoint.getImp(), thePlane.getImp()));
    } else if (theFirstPoint instanceof Object) {
      _this79 = _super93.call(this, theFirstPoint);
    }
    return _possibleConstructorReturn$1(_this79);
  }
  _createClass$1(Mx3dDimLength, [{
    key: "FirstPoint",
    value: function FirstPoint() {
      return new Mx3dGePoint(this.imp.FirstPoint());
    }
  }, {
    key: "SecondPoint",
    value: function SecondPoint() {
      return new Mx3dGePoint(this.imp.SecondPoint());
    }
  }, {
    key: "FirstShape",
    value: function FirstShape() {
      return new Mx3dShapeObject(this.imp.FirstShape());
    }
  }, {
    key: "SecondShape",
    value: function SecondShape() {
      return new Mx3dShapeObject(this.imp.SecondShape());
    }
  }, {
    key: "SetMeasuredGeometry",
    value: function SetMeasuredGeometry(theFirstPoint, theSecondPoint, thePlane) {
      this.imp.SetMeasuredGeometry(theFirstPoint.getImp(), theSecondPoint.getImp(), thePlane.getImp());
    }
  }, {
    key: "SetMeasuredShapes",
    value: function SetMeasuredShapes(theFirstShape, theSecondShape) {
      this.imp.SetMeasuredShapes(theFirstShape.getImp(), theSecondShape.getImp());
    }
  }, {
    key: "SetTextPosition",
    value: function SetTextPosition(theTextPos) {
      this.imp.SetTextPosition(theTextPos.getImp());
    }
  }, {
    key: "GetTextPosition",
    value: function GetTextPosition() {
      return new Mx3dGePoint(this.imp.GetTextPosition());
    }
  }, {
    key: "SetDirection",
    value: function SetDirection(theDirection, theUseDirection) {
      this.imp.SetDirection(theDirection.getImp(), theUseDirection);
    }
  }, {
    key: "GetValue",
    value: function GetValue() {
      return this.imp.GetValue();
    }
  }, {
    key: "SetComputedValue",
    value: function SetComputedValue() {
      this.imp.SetComputedValue();
    }
  }, {
    key: "SetCustomValue",
    value: function SetCustomValue(theValue) {
      this.imp.SetCustomValue(theValue);
    }
  }, {
    key: "GetPlane",
    value: function GetPlane() {
      return new Mx3dGePlane(this.imp.GetPlane());
    }
  }, {
    key: "GetGeometryType",
    value: function GetGeometryType() {
      return this.imp.GetGeometryType();
    }
  }, {
    key: "SetCustomPlane",
    value: function SetCustomPlane(thePlane) {
      this.imp.SetCustomPlane(thePlane.getImp());
    }
  }, {
    key: "UnsetCustomPlane",
    value: function UnsetCustomPlane() {
      this.imp.UnsetCustomPlane();
    }
  }, {
    key: "IsTextPositionCustom",
    value: function IsTextPositionCustom() {
      return this.imp.IsTextPositionCustom();
    }
  }, {
    key: "SetDimensionAspect",
    value: function SetDimensionAspect(theDimensionAspect) {
      this.imp.SetDimensionAspect(theDimensionAspect.getImp());
    }
  }, {
    key: "KindOfDimension",
    value: function KindOfDimension() {
      return this.imp.KindOfDimension();
    }
  }, {
    key: "UnsetFixedTextPosition",
    value: function UnsetFixedTextPosition() {
      this.imp.UnsetFixedTextPosition();
    }
  }, {
    key: "SelToleranceForText2d",
    value: function SelToleranceForText2d() {
      return this.imp.SelToleranceForText2d();
    }
  }, {
    key: "SetSelToleranceForText2d",
    value: function SetSelToleranceForText2d(theTol) {
      this.imp.SetSelToleranceForText2d(theTol);
    }
  }, {
    key: "GetFlyout",
    value: function GetFlyout() {
      return this.imp.GetFlyout();
    }
  }, {
    key: "SetFlyout",
    value: function SetFlyout(theFlyout) {
      this.imp.SetFlyout(theFlyout);
    }
  }, {
    key: "IsValid",
    value: function IsValid() {
      return this.imp.IsValid();
    }
  }]);
  return Mx3dDimLength;
}(Mx3dDimObject);
var Mx3dInterpolateBSplineCurve = /*#__PURE__*/function (_Mx3dBaseObject20) {
  _inherits$1(Mx3dInterpolateBSplineCurve, _Mx3dBaseObject20);
  var _super94 = _createSuper$2(Mx3dInterpolateBSplineCurve);
  function Mx3dInterpolateBSplineCurve(Points, Parameters, PeriodicFlag, Tolerance) {
    var _this80;
    _classCallCheck$1(this, Mx3dInterpolateBSplineCurve);
    if (typeof Parameters === "boolean" && typeof PeriodicFlag === "number") {
      if (Points.length === 0) {
        throw new Error("Points.length === 0");
      }
      var ptArr = arrayToArray1OfPnt(Points);
      _this80 = _super94.call(this);
      _this80.initTempObject(new MxApp3D.imp.Mx3dInterpolateBSplineCurve(ptArr.getImp(), Parameters, PeriodicFlag));
    } else if (Parameters instanceof Array) {
      if (Parameters.length === 0) {
        throw new Error("Parameters.length === 0");
      } else if (typeof Parameters[0] !== "number") {
        throw new Error("Member of Array is not number");
      } else if (typeof PeriodicFlag === "boolean" && typeof Tolerance === "number") {
        var _ptArr = arrayToArray1OfPnt(Points);
        var realArr = arrayToArray1OfReal(Parameters);
        _this80 = _super94.call(this);
        _this80.initTempObject(new MxApp3D.imp.Mx3dInterpolateBSplineCurve(_ptArr.getImp(), realArr, PeriodicFlag, Tolerance));
      }
    }
    return _possibleConstructorReturn$1(_this80);
  }
  _createClass$1(Mx3dInterpolateBSplineCurve, [{
    key: "LoadEnds",
    value: function LoadEnds(InitialTangent, FinalTangent) {
      var iTan = uniToVec(InitialTangent);
      var fTan = uniToVec(FinalTangent);
      this.imp.LoadEnds(iTan.getImp(), fTan.getImp());
    }
  }, {
    key: "Load",
    value: function Load(Tangents, TangentFlags) {
      var lenTangents = Tangents.length;
      var lenTangentFlags = TangentFlags.length;
      var p = new MxNewMdGeArray1OfPnt(1, lenTangents);
      var b = new MxNewMdGeArray1OfInteger(1, lenTangentFlags);
      for (var i = 1; i <= lenTangents; i++) {
        p.SetValue(i, new Mx3dGePoint(Tangents[i - 1].X(), Tangents[i - 1].Y(), Tangents[i - 1].Z()));
      }
      for (var _i8 = 1; _i8 <= lenTangentFlags; _i8++) {
        b.SetValue(_i8, TangentFlags[_i8 - 1] ? 1 : 0);
      }
      this.imp.Load(p.getImp(), b.getImp());
    }
  }, {
    key: "Perform",
    value: function Perform() {
      this.imp.Perform();
    }
  }, {
    key: "Curve",
    value: function Curve() {
      return new Mx3dGeomBSplineCurve(this.imp.Curve());
    }
  }, {
    key: "IsDone",
    value: function IsDone() {
      return this.imp.IsDone();
    }
  }]);
  return Mx3dInterpolateBSplineCurve;
}(Mx3dBaseObject);

function _objectDestructuringEmpty(obj) {
  if (obj == null) throw new TypeError("Cannot destructure " + obj);
}

var MxMap = /*#__PURE__*/function () {
  function MxMap() {
    _classCallCheck$1(this, MxMap);
    _defineProperty(this, "imp", {});
    _defineProperty(this, "map", void 0);
    _defineProperty(this, "originLngLatLike", [0, 0]);
    _defineProperty(this, "originCAD", [0, 0]);
    _defineProperty(this, "meterInCADUnits", 1);
    _defineProperty(this, "modelAltitude", 0);
    _defineProperty(this, "loadOldEditionMethod", false);
    _defineProperty(this, "mxcad", new McObject());
  }
  _createClass$1(MxMap, [{
    key: "setLoadOldEditionMethod",
    value: function setLoadOldEditionMethod() {
      this.loadOldEditionMethod = true;
    }
  }, {
    key: "getMxDrawObject",
    value: function getMxDrawObject() {
      return this.mxcad.getMxDrawObject();
    }
  }, {
    key: "initMapbox",
    value: function initMapbox(map) {
      this.map = map;
    }
  }, {
    key: "getMapbox",
    value: function getMapbox() {
      return this.map;
    }
  }, {
    key: "mercatorCoord2CAD",
    value: function mercatorCoord2CAD(x, y) {
      var ptCAD = new THREE.Vector3(x, y, 0);
      ptCAD.applyMatrix4(this.imp.matMapToCad);
      return ptCAD;
    }
  }, {
    key: "mercatorCoordToCAD",
    value: function mercatorCoordToCAD(x, y) {
      var ptCAD = new THREE.Vector3(x, y, 0);
      ptCAD.applyMatrix4(this.imp.matMapToCad);
      return ptCAD;
    }
  }, {
    key: "cadToMercatorCoord",
    value: function cadToMercatorCoord(pt) {
      pt.applyMatrix4(this.imp.matCadToMap);
      return pt;
    }
  }, {
    key: "lnglatToCAD",
    value: function lnglatToCAD(lng, lat) {
      var mer = this.lnglat_to_mercator(lng, lat);
      return this.mercatorCoord2CAD(mer.x, mer.y);
    }
  }, {
    key: "cadTolnglat",
    value: function cadTolnglat(pt) {
      var mer = this.cadToMercatorCoord(pt);
      return this.mercator_to_lnglat(mer.x, mer.y, 0);
    }
  }, {
    key: "map_meters_to_lnglat",
    value: function map_meters_to_lnglat(x, y) {
      x = x / 200375083427892e-7 * 180;
      y = y / 200375083427892e-7 * 180;
      y = 180 / Math.PI * (2 * Math.atan(Math.exp(y * Math.PI / 180)) - Math.PI / 2);
      return [x, y];
    }
  }, {
    key: "map_lnglat_to_meters",
    value: function map_lnglat_to_meters(lng, lat) {
      var x = lng * 200375083427892e-7 / 180;
      var y = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
      y = y * 200375083427892e-7 / 180;
      return [x, y];
    }
  }, {
    key: "lnglat_to_mercator",
    value: function lnglat_to_mercator(lng, lat) {
      var pt = this.map.lnglat_to_mercator(lng, lat);
      return new THREE.Vector3(pt.x, pt.y, 0);
    }
  }, {
    key: "mercator_to_lnglat",
    value: function mercator_to_lnglat(x, y, z) {
      var lnglat = this.map.mercator_to_lnglat(x, y, z);
      return [lnglat.lng, lnglat.lat];
    }
  }, {
    key: "outOfChina",
    value: function outOfChina(lng, lat) {
      return !(lng > 73.66 && lng < 135.05 && lat > 3.86 && lat < 53.55);
    }
  }, {
    key: "cadLongToMercatorCoord",
    value: function cadLongToMercatorCoord(len) {
      var pt1 = new THREE.Vector3(0, 0, 0);
      var pt2 = new THREE.Vector3(len, 0, 0);
      pt1.applyMatrix4(this.imp.matCadToMap);
      pt2.applyMatrix4(this.imp.matCadToMap);
      return pt1.distanceTo(pt2);
    }
  }, {
    key: "setCoordinatePointAlignment",
    value: function setCoordinatePointAlignment(originLngLatLike, originCAD, meterInCADUnits) {
      this.originCAD = originCAD;
      this.originLngLatLike = originLngLatLike;
      this.meterInCADUnits = meterInCADUnits;
    }
  }, {
    key: "create",
    value: function () {
      var _create = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(map, config) {
        var myThis, point, lDistForM, mxMapImp, customLayer;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.map = map;
              if (config.middlePan !== void 0) {
                this.map.dragPan.useMouseMiddle(config.middlePan);
              }
              if (config.viewBackgroundColor === void 0) {
                config.viewBackgroundColor = {
                  red: 255,
                  green: 255,
                  blue: 255
                };
              }
              myThis = this;
              point = map.mercatorCoordinate_from_LngLat(myThis.originLngLatLike, myThis.modelAltitude);
              lDistForM = point.meterInMercatorCoordinateUnits();
              mxMapImp = myThis.imp;
              mxMapImp.map = map;
              mxMapImp.elevation = this.modelAltitude;
              mxMapImp.mapOrigin = new THREE.Vector3(point.x, point.y, point.z);
              mxMapImp.cadOrigin = new THREE.Vector3(this.originCAD[0], this.originCAD[1], 0);
              mxMapImp.mapLenInCADUnits = myThis.meterInCADUnits * lDistForM;
              customLayer = {
                id: "3d-model",
                type: "custom",
                renderingMode: "3d",
                onAdd: function onAdd(map2, gl) {
                  return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
                    var bakonOpenFileComplete, oldConfig;
                    return regenerator.wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          try {
                            mxMapImp.canvas = map2.getCanvas();
                            mxMapImp.gl = gl;
                            mxMapImp.canvasContainer = map2.getCanvasContainer();
                            if (!myThis.loadOldEditionMethod) {
                              config.map = mxMapImp;
                              bakonOpenFileComplete = config.onOpenFileComplete;
                              config.onOpenFileComplete = function (mxcad) {
                                if (bakonOpenFileComplete) bakonOpenFileComplete(mxcad);
                                myThis.map.triggerRepaint();
                              };
                              config.onInit = function () {
                                MxFun.setIniset({
                                  MapBox: true
                                });
                              };
                              createMxCad(config, myThis.mxcad);
                            } else {
                              oldConfig = config;
                              oldConfig.mapBox = mxMapImp;
                              oldConfig.isAutoResize = true;
                              oldConfig.callback = function (mxObj, _ref) {
                                _objectDestructuringEmpty(_ref);
                                mxObj.addEvent("loadComplete", function () {
                                  myThis.map.triggerRepaint();
                                });
                              };
                              MxFun.createMxObject(oldConfig);
                            }
                          } catch (e) {
                            console.log(e);
                          }
                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee);
                  }))();
                },
                render: function render(gl, matrix) {
                  mxMapImp.map.repaint = false;
                  if (mxMapImp.render) {
                    mxMapImp.render(gl, matrix);
                  }
                }
              };
              map.addLayer(customLayer);
              map.on("resize", function () {
                if (mxMapImp.onResize) mxMapImp.onResize();
              });
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function create(_x, _x2) {
        return _create.apply(this, arguments);
      }
      return create;
    }()
  }]);
  return MxMap;
}();

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen); }
function _arrayLikeToArray2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/*
     * @namespace Util
     *
     * Various utility functions, used by Leaflet internally.
     */
Object.freeze = function (obj) {
  return obj;
};

// @function create(proto: Object, properties?: Object): Object
// Compatibility polyfill for [Object.create](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/create)
var create$3 = Object.create || function () {
  function F() {}
  return function (proto) {
    F.prototype = proto;
    return new F();
  };
}();

// @function setOptions(obj: Object, options: Object): Object
// Merges the given properties to the \`options\` of the \`obj\` object, returning the resulting options. See \`Class options\`. Has an \`L.setOptions\` shortcut.
function setOptions(obj, options) {
  if (!obj.hasOwnProperty('options')) {
    obj.options = obj.options ? create$3(obj.options) : {};
  }
  for (var i in options) {
    obj.options[i] = options[i] || obj.options[i];
  }
  return obj.options;
}
var templateRe = /\\{ *([\\w_-]+) *\\}/g;

// @function template(str: String, data: Object): String
// Simple templating facility, accepts a template string of the form \`'Hello {a}, {b}'\`
// and a data object like \`{a: 'foo', b: 'bar'}\`, returns evaluated string
// \`('Hello foo, bar')\`. You can also specify functions instead of strings for
// data values — they will be evaluated passing \`data\` as an argument.
function template(str, data) {
  return str.replace(templateRe, function (str, key) {
    var value = data[key];
    if (value === undefined) {
      throw new Error('No value provided for variable ' + str);
    } else if (typeof value === 'function') {
      value = value(data);
    }
    return value;
  });
}

// @function isArray(obj): Boolean
// Compatibility polyfill for [Array.isArray](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)
var isArray = Array.isArray || function (obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
};

//坐标转换
var pi$1 = 3.1415926535897932384626;
var a$1 = 6378245.0;
var ee$1 = 0.00669342162296594323;
var x_pi = pi$1 * 3000.0 / 180.0;

//经纬度转xyz协议瓦片编号
function lonLatToTileNumbers(lon_deg, lat_deg, zoom) {
  var lat_rad = pi$1 / 180 * lat_deg; //math.radians(lat_deg)  角度转弧度
  var n = Math.pow(2, zoom);
  var xtile = parseInt((lon_deg + 180.0) / 360.0 * n);
  var ytile = parseInt((1.0 - Math.asinh(Math.tan(lat_rad)) / pi$1) / 2.0 * n);
  return [xtile, ytile];
}

//xyz协议瓦片编号转经纬度
function tileNumbersToLonLat(xtile, ytile, zoom) {
  var n = Math.pow(2, zoom);
  var lon_deg = xtile / n * 360.0 - 180.0;
  var lat_rad = Math.atan(Math.sinh(pi$1 * (1 - 2 * ytile / n)));
  var lat_deg = lat_rad * 180.0 / pi$1;
  return [lon_deg, lat_deg];
}

/**百度转84*/
function bd09_To_gps84(lng, lat) {
  if (isArray(lng)) {
    var _lng = lng[0];
    lat = lng[1];
    lng = _lng;
  }
  if (lng instanceof Object) {
    var _lng = lng.lng;
    lat = lng.lat;
    lng = _lng;
  }
  var gcj02 = bd09_To_gcj02(lng, lat);
  var map84 = gcj02_To_gps84(gcj02.lng, gcj02.lat);
  return map84;
}
/**84转百度*/
function gps84_To_bd09(lng, lat) {
  if (isArray(lng)) {
    var _lng = lng[0];
    lat = lng[1];
    lng = _lng;
  }
  if (lng instanceof Object) {
    var _lng = lng.lng;
    lat = lng.lat;
    lng = _lng;
  }
  var gcj02 = gps84_To_gcj02(lng, lat);
  var bd09 = gcj02_To_bd09(gcj02.lng, gcj02.lat);
  return bd09;
}
/**84转火星*/
function gps84_To_gcj02(lng, lat) {
  if (isArray(lng)) {
    var _lng = lng[0];
    lat = lng[1];
    lng = _lng;
  }
  if (lng instanceof Object) {
    var _lng = lng.lng;
    lat = lng.lat;
    lng = _lng;
  }
  var dLat = transformLat$1(lng - 105.0, lat - 35.0);
  var dLng = transformLng$1(lng - 105.0, lat - 35.0);
  var radLat = lat / 180.0 * pi$1;
  var magic = Math.sin(radLat);
  magic = 1 - ee$1 * magic * magic;
  var sqrtMagic = Math.sqrt(magic);
  dLat = dLat * 180.0 / (a$1 * (1 - ee$1) / (magic * sqrtMagic) * pi$1);
  dLng = dLng * 180.0 / (a$1 / sqrtMagic * Math.cos(radLat) * pi$1);
  var mgLat = lat + dLat;
  var mgLng = lng + dLng;
  var newCoord = {
    lng: mgLng,
    lat: mgLat
  };
  return newCoord;
}
/**火星转84*/
function gcj02_To_gps84(lng, lat) {
  if (isArray(lng)) {
    var _lng = lng[0];
    lat = lng[1];
    lng = _lng;
  }
  if (lng instanceof Object) {
    var _lng = lng.lng;
    lat = lng.lat;
    lng = _lng;
  }
  var coord = transform$1(lng, lat);
  var lontitude = lng * 2 - coord.lng;
  var latitude = lat * 2 - coord.lat;
  var newCoord = {
    lng: lontitude,
    lat: latitude
  };
  return newCoord;
}
/**火星转百度*/
function gcj02_To_bd09(x, y) {
  var z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * x_pi);
  var theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * x_pi);
  var bd_lng = z * Math.cos(theta) + 0.0065;
  var bd_lat = z * Math.sin(theta) + 0.006;
  var newCoord = {
    lng: bd_lng,
    lat: bd_lat
  };
  return newCoord;
}
/**百度转火星*/
function bd09_To_gcj02(bd_lng, bd_lat) {
  var x = bd_lng - 0.0065;
  var y = bd_lat - 0.006;
  var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * x_pi);
  var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * x_pi);
  var gg_lng = z * Math.cos(theta);
  var gg_lat = z * Math.sin(theta);
  var newCoord = {
    lng: gg_lng,
    lat: gg_lat
  };
  return newCoord;
}
function transform$1(lng, lat) {
  var dLat = transformLat$1(lng - 105.0, lat - 35.0);
  var dLng = transformLng$1(lng - 105.0, lat - 35.0);
  var radLat = lat / 180.0 * pi$1;
  var magic = Math.sin(radLat);
  magic = 1 - ee$1 * magic * magic;
  var sqrtMagic = Math.sqrt(magic);
  dLat = dLat * 180.0 / (a$1 * (1 - ee$1) / (magic * sqrtMagic) * pi$1);
  dLng = dLng * 180.0 / (a$1 / sqrtMagic * Math.cos(radLat) * pi$1);
  var mgLat = lat + dLat;
  var mgLng = lng + dLng;
  var newCoord = {
    lng: mgLng,
    lat: mgLat
  };
  return newCoord;
}
function transformLat$1(x, y) {
  var ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x));
  ret += (20.0 * Math.sin(6.0 * x * pi$1) + 20.0 * Math.sin(2.0 * x * pi$1)) * 2.0 / 3.0;
  ret += (20.0 * Math.sin(y * pi$1) + 40.0 * Math.sin(y / 3.0 * pi$1)) * 2.0 / 3.0;
  ret += (160.0 * Math.sin(y / 12.0 * pi$1) + 320 * Math.sin(y * pi$1 / 30.0)) * 2.0 / 3.0;
  return ret;
}
function transformLng$1(x, y) {
  var ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x));
  ret += (20.0 * Math.sin(6.0 * x * pi$1) + 20.0 * Math.sin(2.0 * x * pi$1)) * 2.0 / 3.0;
  ret += (20.0 * Math.sin(x * pi$1) + 40.0 * Math.sin(x / 3.0 * pi$1)) * 2.0 / 3.0;
  ret += (150.0 * Math.sin(x / 12.0 * pi$1) + 300.0 * Math.sin(x / 30.0 * pi$1)) * 2.0 / 3.0;
  return ret;
}

/*
 * Created by CntChen 2016.05.04
 * 从百度JavaScritp API v2.0 抽取代码,并作少量命名修改
 * http://lbsyun.baidu.com/index.php?title=jspopular
 * http://api.map.baidu.com/getscript?v=2.0&ak=E4805d16520de693a3fe707cdc962045&t=20160503160001
 */

// ----- Baidu API start

// util function
function Extend(a, b) {
  for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]);
  return a;
}
function S(a, b) {
  for (var c in b) a[c] = b[c];
}
function Xa(a) {
  return "string" == typeof a;
}
var j = void 0,
  p = null;

// Point
function H(a, b) {
  isNaN(a) && (a = Ib(a), a = isNaN(a) ? 0 : a);
  Xa(a) && (a = parseFloat(a));
  isNaN(b) && (b = Ib(b), b = isNaN(b) ? 0 : b);
  Xa(b) && (b = parseFloat(b));
  this.lng = a;
  this.lat = b;
}
H.TL = function (a) {
  return a && 180 >= a.lng && -180 <= a.lng && 74 >= a.lat && -74 <= a.lat;
};
H.prototype.lb = function (a) {
  return a && this.lat == a.lat && this.lng == a.lng;
};

// Pixel
function Q(a, b) {
  this.x = a || 0;
  this.y = b || 0;
  this.x = this.x;
  this.y = this.y;
}
Q.prototype.lb = function (a) {
  return a && a.x == this.x && a.y == this.y;
};

// MercatorProjection
function fc() {}
fc.prototype.nh = function () {
  aa("lngLatToPoint\\u65B9\\u6CD5\\u672A\\u5B9E\\u73B0");
};
fc.prototype.wi = function () {
  aa("pointToLngLat\\u65B9\\u6CD5\\u672A\\u5B9E\\u73B0");
};
function R() {}
R.prototype = new fc();
Extend(R, {
  $O: 6370996.81,
  lG: [1.289059486E7, 8362377.87, 5591021, 3481989.83, 1678043.12, 0],
  Au: [75, 60, 45, 30, 15, 0],
  fP: [[1.410526172116255E-8, 8.98305509648872E-6, -1.9939833816331, 200.9824383106796, -187.2403703815547, 91.6087516669843, -23.38765649603339, 2.57121317296198, -0.03801003308653, 1.73379812E7], [-7.435856389565537E-9, 8.983055097726239E-6, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 1.026014486E7], [-3.030883460898826E-8, 8.98305509983578E-6, 0.30071316287616, 59.74293618442277, 7.357984074871, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6856817.37], [-1.981981304930552E-8, 8.983055099779535E-6, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4482777.06], [3.09191371068437E-9, 8.983055096812155E-6, 6.995724062E-5, 23.10934304144901, -2.3663490511E-4, -0.6321817810242, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2555164.4], [2.890871144776878E-9, 8.983055095805407E-6, -3.068298E-8, 7.47137025468032, -3.53937994E-6, -0.02145144861037, -1.234426596E-5, 1.0322952773E-4, -3.23890364E-6, 826088.5]],
  iG: [[-0.0015702102444, 111320.7020616939, 1704480524535203, -10338987376042340, 26112667856603880, -35149669176653700, 26595700718403920, -10725012454188240, 1800819912950474, 82.5], [8.277824516172526E-4, 111320.7020463578, 6.477955746671607E8, -4.082003173641316E9, 1.077490566351142E10, -1.517187553151559E10, 1.205306533862167E10, -5.124939663577472E9, 9.133119359512032E8, 67.5], [0.00337398766765, 111320.7020202162, 4481351.045890365, -2.339375119931662E7, 7.968221547186455E7, -1.159649932797253E8, 9.723671115602145E7, -4.366194633752821E7, 8477230.501135234, 52.5], [0.00220636496208, 111320.7020209128, 51751.86112841131, 3796837.749470245, 992013.7397791013, -1221952.21711287, 1340652.697009075, -620943.6990984312, 144416.9293806241, 37.5], [-3.441963504368392E-4, 111320.7020576856, 278.2353980772752, 2485758.690035394, 6070.750963243378, 54821.18345352118, 9540.606633304236, -2710.55326746645, 1405.483844121726, 22.5], [-3.218135878613132E-4, 111320.7020701615, 0.00369383431289, 823725.6402795718, 0.46104986909093, 2351.343141331292, 1.58060784298199, 8.77738589078284, 0.37238884252424, 7.45]],
  Z1: function Z1(a, b) {
    if (!a || !b) return 0;
    var c,
      d,
      a = this.Fb(a);
    if (!a) return 0;
    c = this.Tk(a.lng);
    d = this.Tk(a.lat);
    b = this.Fb(b);
    return !b ? 0 : this.Pe(c, this.Tk(b.lng), d, this.Tk(b.lat));
  },
  Vo: function Vo(a, b) {
    if (!a || !b) return 0;
    a.lng = this.JD(a.lng, -180, 180);
    a.lat = this.ND(a.lat, -74, 74);
    b.lng = this.JD(b.lng, -180, 180);
    b.lat = this.ND(b.lat, -74, 74);
    return this.Pe(this.Tk(a.lng), this.Tk(b.lng), this.Tk(a.lat), this.Tk(b.lat));
  },
  Fb: function Fb(a) {
    if (a === p || a === j) return new H(0, 0);
    var b, c;
    b = new H(Math.abs(a.lng), Math.abs(a.lat));
    for (var d = 0; d < this.lG.length; d++) if (b.lat >= this.lG[d]) {
      c = this.fP[d];
      break;
    }
    a = this.gK(a, c);
    return a = new H(a.lng.toFixed(6), a.lat.toFixed(6));
  },
  Eb: function Eb(a) {
    if (a === p || a === j || 180 < a.lng || -180 > a.lng || 90 < a.lat || -90 > a.lat) return new H(0, 0);
    var b, c;
    a.lng = this.JD(a.lng, -180, 180);
    a.lat = this.ND(a.lat, -74, 74);
    b = new H(a.lng, a.lat);
    for (var d = 0; d < this.Au.length; d++) if (b.lat >= this.Au[d]) {
      c = this.iG[d];
      break;
    }

    // 对疑似bug的修改 start
    // by CntChen 2016.05.08
    // @2016-09-19 已经得到官方确认为bug：https://cntchen.github.io/2016/05/09/%E7%99%BE%E5%BA%A6JavaScirpt%20%20API%E4%B8%AD%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%9D%90%E6%A0%87%E8%BD%AC%E7%93%A6%E7%89%87%E5%9D%90%E6%A0%87bug/
    if (!c) for (d = 0; d < this.Au.length; d++) if (b.lat <= -this.Au[d]) {
      c = this.iG[d];
      break;
    }
    // 对疑似bug的修改 end

    // Baidu JavaScript 中原本代码, 2016.05.08依然如此
    // if (!c)
    //   for (d = this.Au.length - 1; 0 <= d; d--)
    //     if (b.lat <= -this.Au[d]) {
    //       c = this.iG[d];
    //       break
    //     }
    // Baidu JavaScript 中原本代码 end

    a = this.gK(a, c);
    return a = new H(a.lng.toFixed(2), a.lat.toFixed(2));
  },
  gK: function gK(a, b) {
    if (a && b) {
      var c = b[0] + b[1] * Math.abs(a.lng),
        d = Math.abs(a.lat) / b[9],
        d = b[2] + b[3] * d + b[4] * d * d + b[5] * d * d * d + b[6] * d * d * d * d + b[7] * d * d * d * d * d + b[8] * d * d * d * d * d * d,
        c = c * (0 > a.lng ? -1 : 1),
        d = d * (0 > a.lat ? -1 : 1);
      return new H(c, d);
    }
  },
  Pe: function Pe(a, b, c, d) {
    return this.$O * Math.acos(Math.sin(c) * Math.sin(d) + Math.cos(c) * Math.cos(d) * Math.cos(b - a));
  },
  Tk: function Tk(a) {
    return Math.PI * a / 180;
  },
  Z3: function Z3(a) {
    return 180 * a / Math.PI;
  },
  ND: function ND(a, b, c) {
    b != p && (a = Math.max(a, b));
    c != p && (a = Math.min(a, c));
    return a;
  },
  JD: function JD(a, b, c) {
    for (; a > c;) a -= c - b;
    for (; a < b;) a += c - b;
    return a;
  }
});
Extend(R.prototype, {
  Jm: function Jm(a) {
    return R.Eb(a);
  },
  nh: function nh(a) {
    a = R.Eb(a);
    return new Q(a.lng, a.lat);
  },
  qh: function qh(a) {
    return R.Fb(a);
  },
  wi: function wi(a) {
    a = new H(a.x, a.y);
    return R.Fb(a);
  },
  fc: function fc(a, b, c, d, e) {
    if (a) return a = this.Jm(a, e), b = this.Lc(b), new Q(Math.round((a.lng - c.lng) / b + d.width / 2), Math.round((c.lat - a.lat) / b + d.height / 2));
  },
  zb: function zb(a, b, c, d, e) {
    if (a) return b = this.Lc(b), this.qh(new H(c.lng + b * (a.x - d.width / 2), c.lat - b * (a.y - d.height / 2)), e);
  },
  Lc: function Lc(a) {
    return Math.pow(2, 18 - a);
  }
});
var Je = R.prototype;
S(Je, {
  lngLatToPoint: Je.nh,
  pointToLngLat: Je.wi
});

// ----- Baidu API end

var BMap = {
  Point: H,
  Pixel: Q,
  MercatorProjection: R
};

/*
 * Created by CntChen 2016.05.04
 * 坐标相关参考文章：
 * http://www.cnblogs.com/jz1108/archive/2011/07/02/2095376.html
 * http://www.cnblogs.com/janehlp/archive/2012/08/27/2658106.html
 * 适用地图：百度
 */
var TransformClassBaidu = /*#__PURE__*/function () {
  function TransformClassBaidu(levelRange_max, LevelRange_min) {
    _classCallCheck$1(this, TransformClassBaidu);
    this.levelMax = levelRange_max;
    this.levelMin = LevelRange_min;
    this.projection = new BMap.MercatorProjection();
  }
  _createClass$1(TransformClassBaidu, [{
    key: "_getRetain",
    value: function _getRetain(level) {
      return Math.pow(2, level - 18);
    }

    /*
     * 分辨率，表示水平方向上一个像素点代表的真实距离(m)
     * 百度地图18级时的平面坐标就是地图距离原点的距离(m)
     * 使用{lng:180, lat:0}时候的pointX是否等于地球赤道长一半来验证
     */
  }, {
    key: "getResolution",
    value: function getResolution(latitude, level) {
      return Math.pow(2, 18 - level) * Math.cos(latitude);
    }

    /*
     * 从经纬度到百度平面坐标
     */
  }, {
    key: "lnglatToPoint",
    value: function lnglatToPoint(longitude, latitude) {
      var lnglat = new BMap.Point(longitude, latitude);
      var point = this.projection.lngLatToPoint(lnglat);

      // 提取对象的字段并返回
      return {
        pointX: point.x,
        pointY: point.y
      };
    }

    /*
     * 从百度平面坐标到经纬度
     */
  }, {
    key: "pointToLnglat",
    value: function pointToLnglat(pointX, pointY) {
      var point = new BMap.Pixel(pointX, pointY);
      var lnglat = this.projection.pointToLngLat(point);

      // 不直接返回lnglat对象，因为该对象在百SDK中还有其他属性和方法
      // 提取对象的字段后，与其他地图平台统一Lnglat的格式
      return {
        lng: lnglat.lng,
        lat: lnglat.lat
      };
    }
  }, {
    key: "_lngToTileX",
    value: function _lngToTileX(longitude, level) {
      var point = this.lnglatToPoint(longitude, 0);
      var tileX = Math.floor(point.pointX * this._getRetain(level) / 256);
      return tileX;
    }
  }, {
    key: "_latToTileY",
    value: function _latToTileY(latitude, level) {
      var point = this.lnglatToPoint(0, latitude);
      var tileY = Math.floor(point.pointY * this._getRetain(level) / 256);
      return tileY;
    }

    /*
     * 从经纬度获取某一级别瓦片编号
     */
  }, {
    key: "lnglatToTile",
    value: function lnglatToTile(longitude, latitude, level) {
      var tileX = this._lngToTileX(longitude, level);
      var tileY = this._latToTileY(latitude, level);
      return [tileX, tileY];
    }
  }, {
    key: "_lngToPixelX",
    value: function _lngToPixelX(longitude, level) {
      var tileX = this._lngToTileX(longitude, level);
      var point = this.lnglatToPoint(longitude, 0);
      var pixelX = Math.floor(point.pointX * this._getRetain(level) - tileX * 256);
      return pixelX;
    }
  }, {
    key: "_latToPixelY",
    value: function _latToPixelY(latitude, level) {
      var tileY = this._latToTileY(latitude, level);
      var point = this.lnglatToPoint(0, latitude);
      var pixelY = Math.floor(point.pointY * this._getRetain(level) - tileY * 256);
      return pixelY;
    }

    /*
     * 从经纬度到瓦片的像素坐标
     */
  }, {
    key: "lnglatToPixel",
    value: function lnglatToPixel(longitude, latitude, level) {
      var pixelX = this._lngToPixelX(longitude, level);
      var pixelY = this._latToPixelY(latitude, level);
      return {
        pixelX: pixelX,
        pixelY: pixelY
      };
    }
  }, {
    key: "_pixelXToLng",
    value: function _pixelXToLng(pixelX, tileX, level) {
      var pointX = (tileX * 256 + pixelX) / this._getRetain(level);
      var lnglat = this.pointToLnglat(pointX, 0);
      return lnglat.lng;
    }
  }, {
    key: "_pixelYToLat",
    value: function _pixelYToLat(pixelY, tileY, level) {
      var pointY = (tileY * 256 + pixelY) / this._getRetain(level);
      var lnglat = this.pointToLnglat(0, pointY);
      return lnglat.lat;
    }

    /*
     * 从某一瓦片的某一像素点到经纬度
     */
  }, {
    key: "pixelToLnglat",
    value: function pixelToLnglat(pixelX, pixelY, tileX, tileY, level) {
      var pointX = (tileX * 256 + pixelX) / this._getRetain(level);
      var pointY = (tileY * 256 + pixelY) / this._getRetain(level);
      var lnglat = this.pointToLnglat(pointX, pointY);
      return [lnglat.lng, lnglat.lat];
    }
  }]);
  return TransformClassBaidu;
}();
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
    i = arguments.length;
  while (i--) {
    y += arguments[i] * arguments[i];
  }
  return Math.sqrt(y);
};

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create$2() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function scale$1(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create$2();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }
    return a;
  };
})();
function createMat4() {
  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}
function transformVector(matrix, vector) {
  var result = transformMat4([], vector, matrix);
  scale$1(result, result, 1 / result[3]);
  return result;
}

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function invert(out, a) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a03 = a[3];
  var a10 = a[4],
    a11 = a[5],
    a12 = a[6],
    a13 = a[7];
  var a20 = a[8],
    a21 = a[9],
    a22 = a[10],
    a23 = a[11];
  var a30 = a[12],
    a31 = a[13],
    a32 = a[14],
    a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a03 = a[3];
  var a10 = a[4],
    a11 = a[5],
    a12 = a[6],
    a13 = a[7];
  var a20 = a[8],
    a21 = a[9],
    a22 = a[10],
    a23 = a[11];
  var a30 = a[12],
    a31 = a[13],
    a32 = a[14],
    a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
    y = v[1],
    z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }
  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale(out, a, v) {
  var x = v[0],
    y = v[1],
    z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication

  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication

  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
    nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }
  return out;
}
/**
 * Alias for {@link mat4.perspectiveNO}
 * @function
 */

var perspective = perspectiveNO;
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals$1(a, b) {
  var a0 = a[0],
    a1 = a[1],
    a2 = a[2],
    a3 = a[3];
  var a4 = a[4],
    a5 = a[5],
    a6 = a[6],
    a7 = a[7];
  var a8 = a[8],
    a9 = a[9],
    a10 = a[10],
    a11 = a[11];
  var a12 = a[12],
    a13 = a[13],
    a14 = a[14],
    a15 = a[15];
  var b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3];
  var b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7];
  var b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11];
  var b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function create$1() {
  var out = new ARRAY_TYPE(2);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to negate
 * @returns {vec2} out
 */

function negate$1(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function lerp(out, a, b, t) {
  var ax = a[0],
    ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create$1();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 2;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }
    return a;
  };
})();

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create() {
  var out = new ARRAY_TYPE(3);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }
    return a;
  };
})();
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'viewport-mercator-project: assertion failed.');
  }
}
var PI$1 = Math.PI;
var PI_4 = PI$1 / 4;
var DEGREES_TO_RADIANS$1 = PI$1 / 180;
var RADIANS_TO_DEGREES = 180 / PI$1;
var TILE_SIZE$1 = 512;
var EARTH_CIRCUMFERENCE$1 = 40.03e6;
var DEFAULT_ALTITUDE = 1.5;
function zoomToScale$1(zoom) {
  return Math.pow(2, zoom);
}
function lngLatToWorld(_ref, scale) {
  var _ref2 = _slicedToArray(_ref, 2),
    lng = _ref2[0],
    lat = _ref2[1];
  assert(Number.isFinite(lng) && Number.isFinite(scale));
  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');
  scale *= TILE_SIZE$1;
  var lambda2 = lng * DEGREES_TO_RADIANS$1;
  var phi2 = lat * DEGREES_TO_RADIANS$1;
  var x = scale * (lambda2 + PI$1) / (2 * PI$1);
  var y = scale * (PI$1 - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI$1);
  return [x, y];
}
function worldToLngLat(_ref3, scale) {
  var _ref4 = _slicedToArray(_ref3, 2),
    x = _ref4[0],
    y = _ref4[1];
  scale *= TILE_SIZE$1;
  var lambda2 = x / scale * (2 * PI$1) - PI$1;
  var phi2 = 2 * (Math.atan(Math.exp(PI$1 - y / scale * (2 * PI$1))) - PI_4);
  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];
}
function getDistanceScales$1(_ref6) {
  var latitude = _ref6.latitude,
    longitude = _ref6.longitude,
    zoom = _ref6.zoom,
    scale = _ref6.scale,
    _ref6$highPrecision = _ref6.highPrecision,
    highPrecision = _ref6$highPrecision === void 0 ? false : _ref6$highPrecision;
  scale = scale !== undefined ? scale : zoomToScale$1(zoom);
  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));
  var result = {};
  var worldSize = TILE_SIZE$1 * scale;
  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS$1);
  var pixelsPerDegreeX = worldSize / 360;
  var pixelsPerDegreeY = pixelsPerDegreeX / latCosine;
  var altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE$1 / latCosine;
  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];
  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];
  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];
  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];
  if (highPrecision) {
    var latCosine2 = DEGREES_TO_RADIANS$1 * Math.tan(latitude * DEGREES_TO_RADIANS$1) / latCosine;
    var pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;
    var altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE$1 * latCosine2;
    var altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;
    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];
    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];
  }
  return result;
}
function getViewMatrix(_ref7) {
  var height = _ref7.height,
    pitch = _ref7.pitch,
    bearing = _ref7.bearing,
    altitude = _ref7.altitude,
    _ref7$center = _ref7.center,
    center = _ref7$center === void 0 ? null : _ref7$center,
    _ref7$flipY = _ref7.flipY,
    flipY = _ref7$flipY === void 0 ? false : _ref7$flipY;
  var vm = createMat4();
  translate(vm, vm, [0, 0, -altitude]);
  scale(vm, vm, [1, 1, 1 / height]);
  rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS$1);
  rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS$1);
  if (flipY) {
    scale(vm, vm, [1, -1, 1]);
  }
  if (center) {
    translate(vm, vm, negate([], center));
  }
  return vm;
}
function getProjectionParameters(_ref8) {
  var width = _ref8.width,
    height = _ref8.height,
    _ref8$altitude = _ref8.altitude,
    altitude = _ref8$altitude === void 0 ? DEFAULT_ALTITUDE : _ref8$altitude,
    _ref8$pitch = _ref8.pitch,
    pitch = _ref8$pitch === void 0 ? 0 : _ref8$pitch,
    _ref8$nearZMultiplier = _ref8.nearZMultiplier,
    nearZMultiplier = _ref8$nearZMultiplier === void 0 ? 1 : _ref8$nearZMultiplier,
    _ref8$farZMultiplier = _ref8.farZMultiplier,
    farZMultiplier = _ref8$farZMultiplier === void 0 ? 1 : _ref8$farZMultiplier;
  var pitchRadians = pitch * DEGREES_TO_RADIANS$1;
  var halfFov = Math.atan(0.5 / altitude);
  var topHalfSurfaceDistance = Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);
  var farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;
  return {
    fov: 2 * Math.atan(height / 2 / altitude),
    aspect: width / height,
    focalDistance: altitude,
    near: nearZMultiplier,
    far: farZ * farZMultiplier
  };
}
function getProjectionMatrix(_ref9) {
  var width = _ref9.width,
    height = _ref9.height,
    pitch = _ref9.pitch,
    altitude = _ref9.altitude,
    nearZMultiplier = _ref9.nearZMultiplier,
    farZMultiplier = _ref9.farZMultiplier;
  var _getProjectionParamet = getProjectionParameters({
      width: width,
      height: height,
      altitude: altitude,
      pitch: pitch,
      nearZMultiplier: nearZMultiplier,
      farZMultiplier: farZMultiplier
    }),
    fov = _getProjectionParamet.fov,
    aspect = _getProjectionParamet.aspect,
    near = _getProjectionParamet.near,
    far = _getProjectionParamet.far;
  var projectionMatrix = perspective([], fov, aspect, near, far);
  return projectionMatrix;
}
function worldToPixels(xyz, pixelProjectionMatrix) {
  var _xyz2 = _slicedToArray(xyz, 3),
    x = _xyz2[0],
    y = _xyz2[1],
    _xyz2$ = _xyz2[2],
    z = _xyz2$ === void 0 ? 0 : _xyz2$;
  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));
  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);
}
function pixelsToWorld(xyz, pixelUnprojectionMatrix) {
  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var _xyz3 = _slicedToArray(xyz, 3),
    x = _xyz3[0],
    y = _xyz3[1],
    z = _xyz3[2];
  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');
  if (Number.isFinite(z)) {
    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);
    return coord;
  }
  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);
  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);
  var z0 = coord0[2];
  var z1 = coord1[2];
  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);
  return lerp([], coord0, coord1, t);
}
var IDENTITY = createMat4();
var Viewport = function () {
  function Viewport() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      width = _ref.width,
      height = _ref.height,
      _ref$viewMatrix = _ref.viewMatrix,
      viewMatrix = _ref$viewMatrix === void 0 ? IDENTITY : _ref$viewMatrix,
      _ref$projectionMatrix = _ref.projectionMatrix,
      projectionMatrix = _ref$projectionMatrix === void 0 ? IDENTITY : _ref$projectionMatrix;
    _classCallCheck(this, Viewport);
    this.width = width || 1;
    this.height = height || 1;
    this.scale = 1;
    this.pixelsPerMeter = 1;
    this.viewMatrix = viewMatrix;
    this.projectionMatrix = projectionMatrix;
    var vpm = createMat4();
    multiply(vpm, vpm, this.projectionMatrix);
    multiply(vpm, vpm, this.viewMatrix);
    this.viewProjectionMatrix = vpm;
    var m = createMat4();
    scale(m, m, [this.width / 2, -this.height / 2, 1]);
    translate(m, m, [1, -1, 0]);
    multiply(m, m, this.viewProjectionMatrix);
    var mInverse = invert(createMat4(), m);
    if (!mInverse) {
      throw new Error('Pixel project matrix not invertible');
    }
    this.pixelProjectionMatrix = m;
    this.pixelUnprojectionMatrix = mInverse;
    this.equals = this.equals.bind(this);
    this.project = this.project.bind(this);
    this.unproject = this.unproject.bind(this);
    this.projectPosition = this.projectPosition.bind(this);
    this.unprojectPosition = this.unprojectPosition.bind(this);
    this.projectFlat = this.projectFlat.bind(this);
    this.unprojectFlat = this.unprojectFlat.bind(this);
  }
  _createClass(Viewport, [{
    key: "equals",
    value: function equals$1$1(viewport) {
      if (!(viewport instanceof Viewport)) {
        return false;
      }
      return viewport.width === this.width && viewport.height === this.height && equals$1(viewport.projectionMatrix, this.projectionMatrix) && equals$1(viewport.viewMatrix, this.viewMatrix);
    }
  }, {
    key: "project",
    value: function project(xyz) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$topLeft = _ref2.topLeft,
        topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft;
      var worldPosition = this.projectPosition(xyz);
      var coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);
      var _coord = _slicedToArray(coord, 2),
        x = _coord[0],
        y = _coord[1];
      var y2 = topLeft ? y : this.height - y;
      return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];
    }
  }, {
    key: "unproject",
    value: function unproject(xyz) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref3$topLeft = _ref3.topLeft,
        topLeft = _ref3$topLeft === void 0 ? true : _ref3$topLeft,
        targetZ = _ref3.targetZ;
      var _xyz = _slicedToArray(xyz, 3),
        x = _xyz[0],
        y = _xyz[1],
        z = _xyz[2];
      var y2 = topLeft ? y : this.height - y;
      var targetZWorld = targetZ && targetZ * this.pixelsPerMeter;
      var coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);
      var _this$unprojectPositi = this.unprojectPosition(coord),
        _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),
        X = _this$unprojectPositi2[0],
        Y = _this$unprojectPositi2[1],
        Z = _this$unprojectPositi2[2];
      if (Number.isFinite(z)) {
        return [X, Y, Z];
      }
      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];
    }
  }, {
    key: "projectPosition",
    value: function projectPosition(xyz) {
      var _this$projectFlat = this.projectFlat(xyz),
        _this$projectFlat2 = _slicedToArray(_this$projectFlat, 2),
        X = _this$projectFlat2[0],
        Y = _this$projectFlat2[1];
      var Z = (xyz[2] || 0) * this.pixelsPerMeter;
      return [X, Y, Z];
    }
  }, {
    key: "unprojectPosition",
    value: function unprojectPosition(xyz) {
      var _this$unprojectFlat = this.unprojectFlat(xyz),
        _this$unprojectFlat2 = _slicedToArray(_this$unprojectFlat, 2),
        X = _this$unprojectFlat2[0],
        Y = _this$unprojectFlat2[1];
      var Z = (xyz[2] || 0) / this.pixelsPerMeter;
      return [X, Y, Z];
    }
  }, {
    key: "projectFlat",
    value: function projectFlat(xyz) {
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;
      return xyz;
    }
  }, {
    key: "unprojectFlat",
    value: function unprojectFlat(xyz) {
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;
      return xyz;
    }
  }]);
  return Viewport;
}();
function fitBounds(_ref) {
  var width = _ref.width,
    height = _ref.height,
    bounds = _ref.bounds,
    _ref$minExtent = _ref.minExtent,
    minExtent = _ref$minExtent === void 0 ? 0 : _ref$minExtent,
    _ref$maxZoom = _ref.maxZoom,
    maxZoom = _ref$maxZoom === void 0 ? 24 : _ref$maxZoom,
    _ref$padding = _ref.padding,
    padding = _ref$padding === void 0 ? 0 : _ref$padding,
    _ref$offset = _ref.offset,
    offset = _ref$offset === void 0 ? [0, 0] : _ref$offset;
  var _bounds = _slicedToArray(bounds, 2),
    _bounds$ = _slicedToArray(_bounds[0], 2),
    west = _bounds$[0],
    south = _bounds$[1],
    _bounds$2 = _slicedToArray(_bounds[1], 2),
    east = _bounds$2[0],
    north = _bounds$2[1];
  if (Number.isFinite(padding)) {
    var p = padding;
    padding = {
      top: p,
      bottom: p,
      left: p,
      right: p
    };
  } else {
    assert(Number.isFinite(padding.top) && Number.isFinite(padding.bottom) && Number.isFinite(padding.left) && Number.isFinite(padding.right));
  }
  var viewport = new WebMercatorViewport({
    width: width,
    height: height,
    longitude: 0,
    latitude: 0,
    zoom: 0
  });
  var nw = viewport.project([west, north]);
  var se = viewport.project([east, south]);
  var size = [Math.max(Math.abs(se[0] - nw[0]), minExtent), Math.max(Math.abs(se[1] - nw[1]), minExtent)];
  var targetSize = [width - padding.left - padding.right - Math.abs(offset[0]) * 2, height - padding.top - padding.bottom - Math.abs(offset[1]) * 2];
  assert(targetSize[0] > 0 && targetSize[1] > 0);
  var scaleX = targetSize[0] / size[0];
  var scaleY = targetSize[1] / size[1];
  var offsetX = (padding.right - padding.left) / 2 / scaleX;
  var offsetY = (padding.bottom - padding.top) / 2 / scaleY;
  var center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];
  var centerLngLat = viewport.unproject(center);
  var zoom = viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY)));
  return {
    longitude: centerLngLat[0],
    latitude: centerLngLat[1],
    zoom: Math.min(zoom, maxZoom)
  };
}
var WebMercatorViewport = function (_Viewport) {
  _inherits(WebMercatorViewport, _Viewport);
  function WebMercatorViewport() {
    var _this;
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      width = _ref.width,
      height = _ref.height,
      _ref$latitude = _ref.latitude,
      latitude = _ref$latitude === void 0 ? 0 : _ref$latitude,
      _ref$longitude = _ref.longitude,
      longitude = _ref$longitude === void 0 ? 0 : _ref$longitude,
      _ref$zoom = _ref.zoom,
      zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,
      _ref$pitch = _ref.pitch,
      pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,
      _ref$bearing = _ref.bearing,
      bearing = _ref$bearing === void 0 ? 0 : _ref$bearing,
      _ref$altitude = _ref.altitude,
      altitude = _ref$altitude === void 0 ? 1.5 : _ref$altitude,
      nearZMultiplier = _ref.nearZMultiplier,
      farZMultiplier = _ref.farZMultiplier;
    _classCallCheck(this, WebMercatorViewport);
    width = width || 1;
    height = height || 1;
    var scale = zoomToScale$1(zoom);
    altitude = Math.max(0.75, altitude);
    var center = lngLatToWorld([longitude, latitude], scale);
    center[2] = 0;
    var projectionMatrix = getProjectionMatrix({
      width: width,
      height: height,
      pitch: pitch,
      bearing: bearing,
      altitude: altitude,
      nearZMultiplier: nearZMultiplier || 1 / height,
      farZMultiplier: farZMultiplier || 1.01
    });
    var viewMatrix = getViewMatrix({
      height: height,
      center: center,
      pitch: pitch,
      bearing: bearing,
      altitude: altitude,
      flipY: true
    });
    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebMercatorViewport).call(this, {
      width: width,
      height: height,
      viewMatrix: viewMatrix,
      projectionMatrix: projectionMatrix
    }));
    _this.latitude = latitude;
    _this.longitude = longitude;
    _this.zoom = zoom;
    _this.pitch = pitch;
    _this.bearing = bearing;
    _this.altitude = altitude;
    _this.scale = scale;
    _this.center = center;
    _this.pixelsPerMeter = getDistanceScales$1(_assertThisInitialized(_assertThisInitialized(_this))).pixelsPerMeter[2];
    Object.freeze(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  _createClass(WebMercatorViewport, [{
    key: "projectFlat",
    value: function projectFlat(lngLat) {
      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;
      return lngLatToWorld(lngLat, scale);
    }
  }, {
    key: "unprojectFlat",
    value: function unprojectFlat(xy) {
      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;
      return worldToLngLat(xy, scale);
    }
  }, {
    key: "getMapCenterByLngLatPosition",
    value: function getMapCenterByLngLatPosition(_ref2) {
      var lngLat = _ref2.lngLat,
        pos = _ref2.pos;
      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);
      var toLocation = lngLatToWorld(lngLat, this.scale);
      var translate = add([], toLocation, negate$1([], fromLocation));
      var newCenter = add([], this.center, translate);
      return worldToLngLat(newCenter, this.scale);
    }
  }, {
    key: "getLocationAtPoint",
    value: function getLocationAtPoint(_ref3) {
      var lngLat = _ref3.lngLat,
        pos = _ref3.pos;
      return this.getMapCenterByLngLatPosition({
        lngLat: lngLat,
        pos: pos
      });
    }
  }, {
    key: "fitBounds",
    value: function fitBounds$1(bounds) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var width = this.width,
        height = this.height;
      var _fitBounds2 = fitBounds(Object.assign({
          width: width,
          height: height,
          bounds: bounds
        }, options)),
        longitude = _fitBounds2.longitude,
        latitude = _fitBounds2.latitude,
        zoom = _fitBounds2.zoom;
      return new WebMercatorViewport({
        width: width,
        height: height,
        longitude: longitude,
        latitude: latitude,
        zoom: zoom
      });
    }
  }]);
  return WebMercatorViewport;
}(Viewport);

/**
 * borrow from 
 * https://github.com/uber-common/viewport-mercator-project/blob/master/src/web-mercator-utils.js
 */

var PI = Math.PI;
var DEGREES_TO_RADIANS = PI / 180;
// const RADIANS_TO_DEGREES = 180 / PI;
var TILE_SIZE = 512;
// Average circumference (40075 km equatorial, 40007 km meridional)
var EARTH_CIRCUMFERENCE = 40.03e6;

// Mapbox default altitude
// const DEFAULT_ALTITUDE = 1.5;

function zoomToScale(zoom) {
  return Math.pow(2, zoom);
}

/**
 * Calculate distance scales in meters around current lat/lon, both for
 * degrees and pixels.
 * In mercator projection mode, the distance scales vary significantly
 * with latitude.
 */
function getDistanceScales(options) {
  var _options$latitude = options.latitude,
    latitude = _options$latitude === void 0 ? 0 : _options$latitude,
    _options$zoom = options.zoom,
    zoom = _options$zoom === void 0 ? 1 : _options$zoom,
    scale = options.scale,
    _options$highPrecisio = options.highPrecision,
    highPrecision = _options$highPrecisio === void 0 ? false : _options$highPrecisio;

  // Calculate scale from zoom if not provided
  scale = scale !== undefined ? scale : zoomToScale(zoom);
  var result = {};
  var worldSize = TILE_SIZE * scale * window.devicePixelRatio;
  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);

  /**
   * Number of pixels occupied by one degree longitude around current lat/lon:
     pixelsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)
        = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)
      pixelsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)
        = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)
    */
  var pixelsPerDegreeX = worldSize / 360;
  var pixelsPerDegreeY = pixelsPerDegreeX / latCosine;

  /**
   * Number of pixels occupied by one meter around current lat/lon:
   */
  var altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;

  /**
   * LngLat: longitude -> east and latitude -> north (bottom left)
   * UTM meter offset: x -> east and y -> north (bottom left)
   * World space: x -> east and y -> south (top left)
   *
   * Y needs to be flipped when converting delta degree/meter to delta pixels
   */
  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];
  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];
  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];
  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];

  /**
   * Taylor series 2nd order for 1/latCosine
     f'(a) * (x - a)
        = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat
        = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat
    */
  if (highPrecision) {
    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;
    var pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;
    var altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;
    var altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;
    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];
    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];
  }

  // Main results, used for converting meters to latlng deltas and scaling offsets
  return result;
}
var customTileLayer = /*#__PURE__*/function () {
  function customTileLayer(layerId, url, options) {
    _classCallCheck$1(this, customTileLayer);
    this.id = layerId;
    this.type = "custom";
    this.renderingMode = '2d';
    this.url = url;
    this.options = {
      //服务器编号
      subdomains: null,
      minZoom: 0,
      maxZoom: 24,
      tileType: 'xyz' //bd09,xyz
    };

    setOptions(this, options); //合并属性

    //着色器程序 
    this.program;

    //存放当前显示的瓦片
    this.showTiles = [];

    //存放所有加载过的瓦片
    this.tileCache = {};

    //存放瓦片号对应的经纬度
    this.gridCache = {};

    //记录渲染时的变换矩阵。
    //如果瓦片因为网速慢，在渲染完成后才加载过来，可以使用这个矩阵主动更新渲染
    this.matrix;
    this.map;

    //记录当前图层是否在显示
    this.isLayerShow;
    this.transformBaidu = new TransformClassBaidu();
  }
  _createClass$1(customTileLayer, [{
    key: "onAdd",
    value: function onAdd(map, gl) {
      var _this2 = this;
      this.map = map;

      // 着色器程序参考：https://github.com/xiaoiver/custom-mapbox-layer/blob/master/src/shaders/project.glsl
      var vertexSource = "" + "uniform mat4 u_matrix;" + "attribute vec2 a_pos;" + "attribute vec2 a_TextCoord;" + "varying vec2 v_TextCoord;" + "const float TILE_SIZE = 512.0;" + "const float PI = 3.1415926536;" + "const float WORLD_SCALE = TILE_SIZE / (PI * 2.0);" + "uniform float u_project_scale;" + "uniform bool u_is_offset;" + "uniform vec3 u_pixels_per_degree;" + "uniform vec3 u_pixels_per_degree2;" + "uniform vec3 u_pixels_per_meter;" + "uniform vec2 u_viewport_center;" + "uniform vec4 u_viewport_center_projection;" + "uniform vec2 u_viewport_size;" + "float project_scale(float meters) {" + "    return meters * u_pixels_per_meter.z;" + "}" + "vec3 project_scale(vec3 position) {" + "    return position * u_pixels_per_meter;" + "}" + "vec2 project_mercator(vec2 lnglat) {" + "    float x = lnglat.x;" + "    return vec2(" + "    radians(x) + PI, PI - log(tan(PI * 0.25 + radians(lnglat.y) * 0.5))" + "    );" + "}" + "vec4 project_offset(vec4 offset) {" + "    float dy = offset.y;" + "    dy = clamp(dy, -1., 1.);" + "    vec3 pixels_per_unit = u_pixels_per_degree + u_pixels_per_degree2 * dy;" + "    return vec4(offset.xyz * pixels_per_unit, offset.w);" + "}" + "vec4 project_position(vec4 position) {" + "    if (u_is_offset) {" + "        float X = position.x - u_viewport_center.x;" + "        float Y = position.y - u_viewport_center.y;" + "        return project_offset(vec4(X, Y, position.z, position.w));" + "    }" + "    else {" + "        return vec4(" + "        project_mercator(position.xy) * WORLD_SCALE * u_project_scale, project_scale(position.z), position.w" + "        );" + "    }" + "}" + "vec4 project_to_clipping_space(vec3 position) {" + "    vec4 project_pos = project_position(vec4(position, 1.0));" + "    return u_matrix * project_pos + u_viewport_center_projection;" + "}" + "void main() {" + "   vec4 project_pos = project_position(vec4(a_pos, 0.0, 1.0));" + "   gl_Position = u_matrix * project_pos + u_viewport_center_projection;" + "   v_TextCoord = a_TextCoord;" + "}";
      var fragmentSource = "" + "precision mediump float;" + "uniform sampler2D u_Sampler; " + "varying vec2 v_TextCoord; " + "void main() {" + "   gl_FragColor = texture2D(u_Sampler, v_TextCoord);" +
      // "    gl_FragColor = vec4(1.0, 0.0, 0.0, 0.5);" +
      "}";

      //初始化顶点着色器
      var vertexShader = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(vertexShader, vertexSource);
      gl.compileShader(vertexShader);
      //初始化片元着色器
      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fragmentShader, fragmentSource);
      gl.compileShader(fragmentShader);
      //初始化着色器程序
      this.program = gl.createProgram();
      gl.attachShader(this.program, vertexShader);
      gl.attachShader(this.program, fragmentShader);
      gl.linkProgram(this.program);

      //获取顶点位置变量
      this.a_Pos = gl.getAttribLocation(this.program, "a_pos");
      this.a_TextCoord = gl.getAttribLocation(this.program, 'a_TextCoord');
      this.isLayerShow = true;
      map.on('move', function () {
        if (_this2.isLayerShow) _this2.update(gl, map);
      });
      this.update(gl, map);
    }
  }, {
    key: "update",
    value: function update(gl, map) {
      var _this3 = this;
      var center = map.getCenter();
      var zoom;
      var bounds = map.getBounds();
      var minTile, maxTile;
      if (this.options.tileType === 'xyz') {
        zoom = parseInt(map.getZoom() + 1.4); //解决瓦片上文字偏大的问题
        //把当前显示范围做偏移，后面加载瓦片时会再偏移回来
        //如果不这样做的话，大比例尺时，瓦片偏移后，屏幕边缘会有空白区域
        var northWest = gps84_To_gcj02(bounds.getNorthWest());
        var southEast = gps84_To_gcj02(bounds.getSouthEast());
        //算出当前范围的瓦片编号
        minTile = lonLatToTileNumbers(northWest.lng, northWest.lat, zoom);
        maxTile = lonLatToTileNumbers(southEast.lng, southEast.lat, zoom);
      } else if (this.options.tileType === 'bd09') {
        zoom = parseInt(map.getZoom() + 1.8); //解决瓦片上文字偏大的问题
        var southWest = gps84_To_bd09(bounds.getSouthWest());
        var northEast = gps84_To_bd09(bounds.getNorthEast());
        minTile = this.transformBaidu.lnglatToTile(southWest.lng, southWest.lat, zoom);
        maxTile = this.transformBaidu.lnglatToTile(northEast.lng, northEast.lat, zoom);
      }
      var currentTiles = [];
      for (var x = minTile[0]; x <= maxTile[0]; x++) {
        for (var y = minTile[1]; y <= maxTile[1]; y++) {
          var xyz = {
            x: x,
            y: y,
            z: zoom
          };
          currentTiles.push(xyz);

          //把瓦片号对应的经纬度缓存起来，
          //存起来是因为贴纹理时需要瓦片4个角的经纬度，这样可以避免重复计算
          //行和列向外多计算一个瓦片数，这样保证瓦片4个角都有经纬度可以取到
          this.addGridCache(xyz, 0, 0);
          if (x === maxTile[0]) this.addGridCache(xyz, 1, 0);
          if (y === maxTile[1]) this.addGridCache(xyz, 0, 1);
          if (x === maxTile[0] && y === maxTile[1]) this.addGridCache(xyz, 1, 1);
        }
      }

      //瓦片设置为从中间向周边的排序
      if (this.options.tileType === 'xyz') var centerTile = lonLatToTileNumbers(center.lng, center.lat, zoom); //计算中心点所在的瓦片号
      else if (this.options.tileType === 'bd09') centerTile = this.transformBaidu.lnglatToTile(center.lng, center.lat, zoom);
      currentTiles.sort(function (a, b) {
        return _this3.tileDistance(a, centerTile) - _this3.tileDistance(b, centerTile);
      });

      //加载瓦片
      this.showTiles = [];
      for (var _i2 = 0, _currentTiles = currentTiles; _i2 < _currentTiles.length; _i2++) {
        var xyz = _currentTiles[_i2];
        //走缓存或新加载
        if (this.tileCache[this.createTileKey(xyz)]) {
          this.showTiles.push(this.tileCache[this.createTileKey(xyz)]);
        } else {
          var tile = this.createTile(gl, xyz);
          this.showTiles.push(tile);
          this.tileCache[this.createTileKey(xyz)] = tile;
        }
      }
    }

    //缓存瓦片号对应的经纬度
  }, {
    key: "addGridCache",
    value: function addGridCache(xyz, xPlus, yPlus) {
      var key = this.createTileKey(xyz.x + xPlus, xyz.y + yPlus, xyz.z);
      if (!this.gridCache[key]) {
        if (this.options.tileType === 'xyz') this.gridCache[key] = gcj02_To_gps84(tileNumbersToLonLat(xyz.x + xPlus, xyz.y + yPlus, xyz.z));else if (this.options.tileType === 'bd09') this.gridCache[key] = bd09_To_gps84(this.transformBaidu.pixelToLnglat(0, 0, xyz.x + xPlus, xyz.y + yPlus, xyz.z));
      }
    }

    //计算两个瓦片编号的距离
  }, {
    key: "tileDistance",
    value: function tileDistance(tile1, tile2) {
      //计算直角三角形斜边长度，c（斜边）=√（a²+b²）。（a，b为两直角边）
      return Math.sqrt(Math.pow(tile1.x - tile2[0], 2) + Math.pow(tile1.y - tile2[1], 2));
    }

    //创建瓦片id
  }, {
    key: "createTileKey",
    value: function createTileKey(xyz, y, z) {
      if (xyz instanceof Object) {
        return xyz.z + '/' + xyz.x + '/' + xyz.y;
      } else {
        var x = xyz;
        return z + '/' + x + '/' + y;
      }
    }

    //创建瓦片
  }, {
    key: "createTile",
    value: function createTile(gl, xyz) {
      var _this4 = this;
      //替换请求地址中的变量
      var _url = template(this.url, {
        s: this.options.subdomains[Math.abs(xyz.x + xyz.y) % this.options.subdomains.length],
        x: xyz.x,
        y: xyz.y,
        z: xyz.z
      });
      var tile = {
        xyz: xyz
      };

      //瓦片编号转经纬度，并进行偏移
      var leftTop, rightTop, leftBottom, rightBottom;
      if (this.options.tileType === 'xyz') {
        leftTop = this.gridCache[this.createTileKey(xyz)];
        rightTop = this.gridCache[this.createTileKey(xyz.x + 1, xyz.y, xyz.z)];
        leftBottom = this.gridCache[this.createTileKey(xyz.x, xyz.y + 1, xyz.z)];
        rightBottom = this.gridCache[this.createTileKey(xyz.x + 1, xyz.y + 1, xyz.z)];
      } else if (this.options.tileType === 'bd09') {
        leftTop = this.gridCache[this.createTileKey(xyz.x, xyz.y + 1, xyz.z)];
        rightTop = this.gridCache[this.createTileKey(xyz.x + 1, xyz.y + 1, xyz.z)];
        leftBottom = this.gridCache[this.createTileKey(xyz)];
        rightBottom = this.gridCache[this.createTileKey(xyz.x + 1, xyz.y, xyz.z)];
      }

      //顶点坐标+纹理坐标
      var attrData = new Float32Array([leftTop.lng, leftTop.lat, 0.0, 1.0, leftBottom.lng, leftBottom.lat, 0.0, 0.0, rightTop.lng, rightTop.lat, 1.0, 1.0, rightBottom.lng, rightBottom.lat, 1.0, 0.0]);
      // var attrData = new Float32Array([
      //     116.38967958133532, 39.90811009556515, 0.0, 1.0,
      //     116.38967958133532, 39.90294980726742, 0.0, 0.0,
      //     116.39486013141436, 39.90811009556515, 1.0, 1.0,
      //     116.39486013141436, 39.90294980726742, 1.0, 0.0
      // ])
      var FSIZE = attrData.BYTES_PER_ELEMENT;
      //创建缓冲区并传入数据
      var buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
      gl.bufferData(gl.ARRAY_BUFFER, attrData, gl.STATIC_DRAW);
      tile.buffer = buffer;
      //从缓冲区中获取顶点数据的参数
      tile.PosParam = {
        size: 2,
        stride: FSIZE * 4,
        offset: 0
        //从缓冲区中获取纹理数据的参数
      };
      tile.TextCoordParam = {
        size: 2,
        stride: FSIZE * 4,
        offset: FSIZE * 2

        //加载瓦片
      };
      var img = new Image();
      img.onload = function () {
        // 创建纹理对象
        tile.texture = gl.createTexture();
        //向target绑定纹理对象
        gl.bindTexture(gl.TEXTURE_2D, tile.texture);
        //对纹理进行Y轴反转
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
        //配置纹理图像
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
        tile.isLoad = true;
        _this4.map.triggerRepaint(); //主动让地图重绘
      };

      img.crossOrigin = true;
      img.src = _url;
      return tile;
    }

    //渲染
  }, {
    key: "render",
    value: function render(gl, matrix) {
      if (this.map.getZoom() < this.options.minZoom || this.map.getZoom() > this.options.maxZoom) return;

      //记录变换矩阵，用于瓦片加载后主动绘制
      this.matrix = matrix;

      //应用着色程序
      //必须写到这里，不能写到onAdd中，不然gl中的着色程序可能不是上面写的，会导致下面的变量获取不到
      gl.useProgram(this.program);
      var _iterator = _createForOfIteratorHelper(this.showTiles),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var tile = _step.value;
          if (!tile.isLoad) continue;

          //向target绑定纹理对象
          gl.bindTexture(gl.TEXTURE_2D, tile.texture);
          //开启0号纹理单元
          gl.activeTexture(gl.TEXTURE0);
          //配置纹理参数
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);
          // 获取纹理的存储位置
          var u_Sampler = gl.getUniformLocation(this.program, 'u_Sampler');
          //将0号纹理传递给着色器
          gl.uniform1i(u_Sampler, 0);
          gl.bindBuffer(gl.ARRAY_BUFFER, tile.buffer);
          //设置从缓冲区获取顶点数据的规则
          gl.vertexAttribPointer(this.a_Pos, tile.PosParam.size, gl.FLOAT, false, tile.PosParam.stride, tile.PosParam.offset);
          gl.vertexAttribPointer(this.a_TextCoord, tile.TextCoordParam.size, gl.FLOAT, false, tile.TextCoordParam.stride, tile.TextCoordParam.offset);
          //激活顶点数据缓冲区
          gl.enableVertexAttribArray(this.a_Pos);
          gl.enableVertexAttribArray(this.a_TextCoord);

          // 设置位置的顶点参数
          this.setVertex(gl);

          //开启阿尔法混合，实现注记半透明效果
          gl.enable(gl.BLEND);
          gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

          //绘制图形
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    // 设置位置的顶点参数
    //参考：https://github.com/xiaoiver/custom-mapbox-layer/blob/master/src/layers/PointCloudLayer2.ts
  }, {
    key: "setVertex",
    value: function setVertex(gl) {
      var currentZoomLevel = this.map.getZoom();
      var bearing = this.map.getBearing();
      var pitch = this.map.getPitch();
      var center = this.map.getCenter();
      var viewport = new WebMercatorViewport({
        // width: gl.drawingBufferWidth*1.11,
        // height: gl.drawingBufferHeight*1.11,
        width: gl.drawingBufferWidth,
        height: gl.drawingBufferHeight,
        longitude: center.lng,
        latitude: center.lat,
        zoom: currentZoomLevel,
        pitch: pitch,
        bearing: bearing
      });

      // @ts-ignore
      var viewProjectionMatrix = viewport.viewProjectionMatrix,
        projectionMatrix = viewport.projectionMatrix,
        viewMatrix = viewport.viewMatrix,
        viewMatrixUncentered = viewport.viewMatrixUncentered;
      var drawParams = {
        // @ts-ignore
        'u_matrix': viewProjectionMatrix,
        'u_point_size': this.pointSize,
        'u_is_offset': false,
        'u_pixels_per_degree': [0, 0, 0],
        'u_pixels_per_degree2': [0, 0, 0],
        'u_viewport_center': [0, 0],
        'u_pixels_per_meter': [0, 0, 0],
        'u_project_scale': zoomToScale(currentZoomLevel),
        'u_viewport_center_projection': [0, 0, 0, 0]
      };
      if (currentZoomLevel > 0) {
        var _getDistanceScales = getDistanceScales({
            longitude: center.lng,
            latitude: center.lat,
            zoom: currentZoomLevel,
            highPrecision: true
          }),
          pixelsPerDegree = _getDistanceScales.pixelsPerDegree,
          pixelsPerDegree2 = _getDistanceScales.pixelsPerDegree2;
        var positionPixels = viewport.projectFlat([Math.fround(center.lng), Math.fround(center.lat)], Math.pow(2, currentZoomLevel));
        var projectionCenter = transformMat4([], [positionPixels[0], positionPixels[1], 0.0, 1.0], viewProjectionMatrix);

        // Always apply uncentered projection matrix if available (shader adds center)
        var viewMatrix2 = viewMatrixUncentered || viewMatrix;

        // Zero out 4th coordinate ("after" model matrix) - avoids further translations
        // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)
        //   .multiplyRight(VECTOR_TO_POINT_MATRIX);
        var viewProjectionMatrix2 = multiply([], projectionMatrix, viewMatrix2);
        var VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
        viewProjectionMatrix2 = multiply([], viewProjectionMatrix2, VECTOR_TO_POINT_MATRIX);
        drawParams['u_matrix'] = viewProjectionMatrix2;
        drawParams['u_is_offset'] = true;
        drawParams['u_viewport_center'] = [Math.fround(center.lng), Math.fround(center.lat)];
        // @ts-ignore
        drawParams['u_viewport_center_projection'] = projectionCenter;
        drawParams['u_pixels_per_degree'] = pixelsPerDegree && pixelsPerDegree.map(function (p) {
          return Math.fround(p);
        });
        drawParams['u_pixels_per_degree2'] = pixelsPerDegree2 && pixelsPerDegree2.map(function (p) {
          return Math.fround(p);
        });
      }
      gl.uniformMatrix4fv(gl.getUniformLocation(this.program, "u_matrix"), false, drawParams['u_matrix']);
      gl.uniform1f(gl.getUniformLocation(this.program, "u_project_scale"), drawParams['u_project_scale']);
      gl.uniform1i(gl.getUniformLocation(this.program, "u_is_offset"), drawParams['u_is_offset'] ? 1 : 0);
      gl.uniform3fv(gl.getUniformLocation(this.program, "u_pixels_per_degree"), drawParams['u_pixels_per_degree']);
      gl.uniform3fv(gl.getUniformLocation(this.program, "u_pixels_per_degree2"), drawParams['u_pixels_per_degree2']);
      gl.uniform3fv(gl.getUniformLocation(this.program, "u_pixels_per_meter"), drawParams['u_pixels_per_meter']);
      gl.uniform2fv(gl.getUniformLocation(this.program, "u_viewport_center"), drawParams['u_viewport_center']);
      gl.uniform4fv(gl.getUniformLocation(this.program, "u_viewport_center_projection"), drawParams['u_viewport_center_projection']);
    }

    //当map移除当前图层时调用
  }, {
    key: "onRemove",
    value: function onRemove(map, gl) {
      this.isLayerShow = false;
    }
  }]);
  return customTileLayer;
}();
function RasterTileLayer(layerId, layerType, options, providers) {
  var _options = options || {};
  if (!providers) {
    providers = {
      TianDiTu: {
        Normal: {
          Map: "http://t{s}.tianditu.com/DataServer?T=vec_w&X={x}&Y={y}&L={z}&tk={key}",
          Annotion: "http://t{s}.tianditu.com/DataServer?T=cva_w&X={x}&Y={y}&L={z}&tk={key}",
          minzoom: 0,
          maxzoom: 18
        },
        Satellite: {
          Map: "http://t{s}.tianditu.com/DataServer?T=img_w&X={x}&Y={y}&L={z}&tk={key}",
          Annotion: "http://t{s}.tianditu.com/DataServer?T=cia_w&X={x}&Y={y}&L={z}&tk={key}",
          minzoom: 0,
          maxzoom: 18
        },
        Terrain: {
          Map: "http://t{s}.tianditu.com/DataServer?T=ter_w&X={x}&Y={y}&L={z}&tk={key}",
          Annotion: "http://t{s}.tianditu.com/DataServer?T=cta_w&X={x}&Y={y}&L={z}&tk={key}",
          minzoom: 0,
          maxzoom: 14
        },
        Subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'],
        key: ""
      },
      GaoDe: {
        Normal: {
          Map: 'http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}',
          minzoom: 0,
          maxzoom: 18
        },
        Normal_NoTag: {
          Map: 'https://wprd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&style=7&scl=1&ltype=11&x={x}&y={y}&z={z}',
          minzoom: 3,
          maxzoom: 18
        },
        Satellite: {
          Map: 'http://webst0{s}.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}',
          Annotion: 'http://webst0{s}.is.autonavi.com/appmaptile?style=8&x={x}&y={y}&z={z}',
          minzoom: 3,
          maxzoom: 18
        },
        Subdomains: ["1", "2", "3", "4"]
      },
      Baidu: {
        Normal: {
          Map: 'http://online{s}.map.bdimg.com/onlinelabel/?qt=tile&x={x}&y={y}&z={z}&styles=pl&scaler=1&p=1'
        },
        Satellite: {
          Map: 'http://shangetu{s}.map.bdimg.com/it/u=x={x};y={y};z={z};v=009;type=sate&fm=46',
          Annotion: 'http://online{s}.map.bdimg.com/tile/?qt=tile&x={x}&y={y}&z={z}&styles=sl&v=020'
        },
        Subdomains: '0123456789',
        tileType: 'bd09'
      },
      Geoq: {
        Normal: {
          Map: "http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineCommunity/MapServer/tile/{z}/{y}/{x}",
          PurplishBlue: "http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}",
          Gray: "http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetGray/MapServer/tile/{z}/{y}/{x}",
          Warm: "http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetWarm/MapServer/tile/{z}/{y}/{x}",
          minzoom: 3,
          maxzoom: 16
        },
        Subdomains: []
      },
      OSM: {
        Normal: {
          Map: "http://{s}.tile.osm.org/{z}/{x}/{y}.png",
          minzoom: 0,
          maxzoom: 18
        },
        Subdomains: ['a', 'b', 'c']
      }
    };
  }
  var parts = layerType.split('.');
  var providerName = parts[0];
  var mapName = parts[1];
  var mapType = parts[2];
  var url = providers[providerName][mapName][mapType];
  var subdomains = providers[providerName].Subdomains;
  var minzoom = providers[providerName][mapName].minzoom;
  var maxzoom = providers[providerName][mapName].maxzoom;
  var tileType = providers[providerName].tileType;
  var tilelayer;
  if (providerName === 'TianDiTu' || providerName === 'OSM') {
    //天地图使用大地2000坐标可以直接使用，不用偏移
    var key = _options.key || providers[providerName].key;
    var urls = [];
    var _iterator2 = _createForOfIteratorHelper(subdomains),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var sub = _step2.value;
        urls.push(url.replace('{s}', sub).replace('{key}', key));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    tilelayer = {
      "id": layerId,
      "type": "raster",
      "source": {
        "type": "raster",
        'tiles': urls,
        "tileSize": 256,
        "minzoom": minzoom,
        "maxzoom": maxzoom
      }
    };
  } else {
    tilelayer = new customTileLayer(layerId, url, {
      subdomains: subdomains,
      minZoom: minzoom,
      maxZoom: maxzoom,
      tileType: tileType
    });
  }
  return tilelayer;
}

var loadLayer = [];
function MxMapAddRasterTileLayer(map, layerList, key, providers) {
  loadLayer.forEach(function (layerId) {
    if (map.getLayer(layerId)) {
      map.removeLayer(layerId);
    }
    if (map.getSource(layerId)) {
      map.removeSource(layerId);
    }
  });
  loadLayer = [];
  layerList.forEach(function (layer) {
    loadLayer.push(layer[0]);
    var param = key ? {
      key: key
    } : null;
    var mapLayer = RasterTileLayer(layer[0], layer[1], param, providers);
    map.addLayer(mapLayer, "mx.layer.fill");
  });
}
function MxMapAddGoogleCnLayer(map, types, urls) {
  types.forEach(function (val, index) {
    if (val == "Image") {
      var url = "https://gac-geo.googlecnapps.cn/maps/vt?lyrs=s&x={x}&y={y}&z={z}";
      if (urls && index < urls.length) {
        url = urls[index];
      }
      map.addLayer({
        id: "GoogleImageLayer",
        type: "raster",
        source: {
          "type": "raster",
          "tiles": [url],
          "tileSize": 256
        }
      });
    } else if (val == "Lable") {
      var _url = "https://gac-geo.googlecnapps.cn/maps/vt?lyrs=s,m&gl=CN&x={x}&y={y}&z={z}";
      if (urls && index < urls.length) {
        _url = urls[index];
      }
      map.addLayer({
        id: "GoogleImageLableLayer",
        type: "raster",
        source: {
          "type": "raster",
          "tiles": [_url],
          "tileSize": 256
        }
      });
    }
  });
}
var pi = 3.141592653589793;
var a = 6378245;
var ee = 0.006693421622965943;
function transformLat(x, y) {
  var ret = -100 + 2 * x + 3 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x));
  ret += (20 * Math.sin(6 * x * pi) + 20 * Math.sin(2 * x * pi)) * 2 / 3;
  ret += (20 * Math.sin(y * pi) + 40 * Math.sin(y / 3 * pi)) * 2 / 3;
  ret += (160 * Math.sin(y / 12 * pi) + 320 * Math.sin(y * pi / 30)) * 2 / 3;
  return ret;
}
function transformLng(x, y) {
  var ret = 300 + x + 2 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x));
  ret += (20 * Math.sin(6 * x * pi) + 20 * Math.sin(2 * x * pi)) * 2 / 3;
  ret += (20 * Math.sin(x * pi) + 40 * Math.sin(x / 3 * pi)) * 2 / 3;
  ret += (150 * Math.sin(x / 12 * pi) + 300 * Math.sin(x / 30 * pi)) * 2 / 3;
  return ret;
}
function transform(lng, lat) {
  var dLat = transformLat(lng - 105, lat - 35);
  var dLng = transformLng(lng - 105, lat - 35);
  var radLat = lat / 180 * pi;
  var magic = Math.sin(radLat);
  magic = 1 - ee * magic * magic;
  var sqrtMagic = Math.sqrt(magic);
  dLat = dLat * 180 / (a * (1 - ee) / (magic * sqrtMagic) * pi);
  dLng = dLng * 180 / (a / sqrtMagic * Math.cos(radLat) * pi);
  var mgLat = lat + dLat;
  var mgLng = lng + dLng;
  var newCoord = {
    lng: mgLng,
    lat: mgLat
  };
  return newCoord;
}
function mx_gps84_To_gcj02(lng, lat) {
  if (lng instanceof Object) {
    var _lng = lng.lng;
    lat = lng.lat;
    lng = _lng;
  }
  var dLat = transformLat(lng - 105, lat - 35);
  var dLng = transformLng(lng - 105, lat - 35);
  var radLat = lat / 180 * pi;
  var magic = Math.sin(radLat);
  magic = 1 - ee * magic * magic;
  var sqrtMagic = Math.sqrt(magic);
  dLat = dLat * 180 / (a * (1 - ee) / (magic * sqrtMagic) * pi);
  dLng = dLng * 180 / (a / sqrtMagic * Math.cos(radLat) * pi);
  var mgLat = lat + dLat;
  var mgLng = lng + dLng;
  var newCoord = {
    lng: mgLng,
    lat: mgLat
  };
  return newCoord;
}
function mx_gcj02_To_gps84(lng, lat) {
  if (lng instanceof Object) {
    var _lng = lng.lng;
    lat = lng.lat;
    lng = _lng;
  }
  var coord = transform(lng, lat);
  var lontitude = lng * 2 - coord.lng;
  var latitude = lat * 2 - coord.lat;
  var newCoord = {
    lng: lontitude,
    lat: latitude
  };
  return newCoord;
}

function _createSuper$1(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct$1();return function _createSuperInternal(){var Super=_getPrototypeOf$1(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf$1(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else {result=Super.apply(this,arguments);}return _possibleConstructorReturn$1(this,result);};}function _isNativeReflectConstruct$1(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}// Polyfills
if(Number.EPSILON===undefined){Number.EPSILON=Math.pow(2,-52);}if(Number.isInteger===undefined){// Missing in IE
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
Number.isInteger=function(value){return typeof value==='number'&&isFinite(value)&&Math.floor(value)===value;};}//
if(Math.sign===undefined){// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
Math.sign=function(x){return x<0?-1:x>0?1:+x;};}if('name'in Function.prototype===false){// Missing in IE
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
Object.defineProperty(Function.prototype,'name',{get:function get(){return this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1];}});}if(Object.assign===undefined){// Missing in IE
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
Object.assign=function(target){if(target===undefined||target===null){throw new TypeError('Cannot convert undefined or null to object');}var output=Object(target);for(var index=1;index<arguments.length;index++){var source=arguments[index];if(source!==undefined&&source!==null){for(var nextKey in source){if(Object.prototype.hasOwnProperty.call(source,nextKey)){output[nextKey]=source[nextKey];}}}}return output;};}var REVISION='113';var CullFaceNone=0;var CullFaceBack=1;var CullFaceFront=2;var PCFShadowMap=1;var PCFSoftShadowMap=2;var VSMShadowMap=3;var FrontSide=0;var BackSide=1;var DoubleSide=2;var FlatShading=1;var NoColors=0;var FaceColors=1;var VertexColors=2;var NoBlending=0;var NormalBlending=1;var AdditiveBlending=2;var SubtractiveBlending=3;var MultiplyBlending=4;var CustomBlending=5;var AddEquation=100;var SubtractEquation=101;var ReverseSubtractEquation=102;var MinEquation=103;var MaxEquation=104;var ZeroFactor=200;var OneFactor=201;var SrcColorFactor=202;var OneMinusSrcColorFactor=203;var SrcAlphaFactor=204;var OneMinusSrcAlphaFactor=205;var DstAlphaFactor=206;var OneMinusDstAlphaFactor=207;var DstColorFactor=208;var OneMinusDstColorFactor=209;var SrcAlphaSaturateFactor=210;var NeverDepth=0;var AlwaysDepth=1;var LessDepth=2;var LessEqualDepth=3;var EqualDepth=4;var GreaterEqualDepth=5;var GreaterDepth=6;var NotEqualDepth=7;var MultiplyOperation=0;var MixOperation=1;var AddOperation=2;var NoToneMapping=0;var LinearToneMapping=1;var ReinhardToneMapping=2;var Uncharted2ToneMapping=3;var CineonToneMapping=4;var ACESFilmicToneMapping=5;var UVMapping=300;var CubeReflectionMapping=301;var CubeRefractionMapping=302;var EquirectangularReflectionMapping=303;var EquirectangularRefractionMapping=304;var SphericalReflectionMapping=305;var CubeUVReflectionMapping=306;var CubeUVRefractionMapping=307;var RepeatWrapping=1000;var ClampToEdgeWrapping=1001;var MirroredRepeatWrapping=1002;var NearestFilter=1003;var NearestMipmapNearestFilter=1004;var NearestMipmapLinearFilter=1005;var LinearFilter=1006;var LinearMipmapNearestFilter=1007;var LinearMipmapLinearFilter=1008;var UnsignedByteType=1009;var ByteType=1010;var ShortType=1011;var UnsignedShortType=1012;var IntType=1013;var UnsignedIntType=1014;var FloatType=1015;var HalfFloatType=1016;var UnsignedShort4444Type=1017;var UnsignedShort5551Type=1018;var UnsignedShort565Type=1019;var UnsignedInt248Type=1020;var AlphaFormat=1021;var RGBFormat=1022;var RGBAFormat=1023;var LuminanceFormat=1024;var LuminanceAlphaFormat=1025;var RGBEFormat=RGBAFormat;var DepthFormat=1026;var DepthStencilFormat=1027;var RedFormat=1028;var RedIntegerFormat=1029;var RGFormat=1030;var RGIntegerFormat=1031;var RGBIntegerFormat=1032;var RGBAIntegerFormat=1033;var RGB_S3TC_DXT1_Format=33776;var RGBA_S3TC_DXT1_Format=33777;var RGBA_S3TC_DXT3_Format=33778;var RGBA_S3TC_DXT5_Format=33779;var RGB_PVRTC_4BPPV1_Format=35840;var RGB_PVRTC_2BPPV1_Format=35841;var RGBA_PVRTC_4BPPV1_Format=35842;var RGBA_PVRTC_2BPPV1_Format=35843;var RGB_ETC1_Format=36196;var RGBA_ASTC_4x4_Format=37808;var RGBA_ASTC_5x4_Format=37809;var RGBA_ASTC_5x5_Format=37810;var RGBA_ASTC_6x5_Format=37811;var RGBA_ASTC_6x6_Format=37812;var RGBA_ASTC_8x5_Format=37813;var RGBA_ASTC_8x6_Format=37814;var RGBA_ASTC_8x8_Format=37815;var RGBA_ASTC_10x5_Format=37816;var RGBA_ASTC_10x6_Format=37817;var RGBA_ASTC_10x8_Format=37818;var RGBA_ASTC_10x10_Format=37819;var RGBA_ASTC_12x10_Format=37820;var RGBA_ASTC_12x12_Format=37821;var LoopOnce=2200;var LoopRepeat=2201;var LoopPingPong=2202;var InterpolateDiscrete=2300;var InterpolateLinear=2301;var InterpolateSmooth=2302;var ZeroCurvatureEnding=2400;var ZeroSlopeEnding=2401;var WrapAroundEnding=2402;var TrianglesDrawMode=0;var LinearEncoding=3000;var sRGBEncoding=3001;var GammaEncoding=3007;var RGBEEncoding=3002;var LogLuvEncoding=3003;var RGBM7Encoding=3004;var RGBM16Encoding=3005;var RGBDEncoding=3006;var BasicDepthPacking=3200;var RGBADepthPacking=3201;var TangentSpaceNormalMap=0;var ObjectSpaceNormalMap=1;var KeepStencilOp=7680;var AlwaysStencilFunc=519;var StaticDrawUsage=35044;var DynamicDrawUsage=35048;/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */function EventDispatcher(){}Object.assign(EventDispatcher.prototype,{addEventListener:function addEventListener(type,listener){if(this._listeners===undefined)this._listeners={};var listeners=this._listeners;if(listeners[type]===undefined){listeners[type]=[];}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener);}},hasEventListener:function hasEventListener(type,listener){if(this._listeners===undefined)return false;var listeners=this._listeners;return listeners[type]!==undefined&&listeners[type].indexOf(listener)!==-1;},removeEventListener:function removeEventListener(type,listener){if(this._listeners===undefined)return;var listeners=this._listeners;var listenerArray=listeners[type];if(listenerArray!==undefined){var index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1);}}},dispatchEvent:function dispatchEvent(event){if(this._listeners===undefined)return;var listeners=this._listeners;var listenerArray=listeners[event.type];if(listenerArray!==undefined){event.target=this;var array=listenerArray.slice(0);for(var i=0,l=array.length;i<l;i++){array[i].call(this,event);}}}});/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author thezwap
 */var _lut=[];for(var i=0;i<256;i++){_lut[i]=(i<16?'0':'')+i.toString(16);}var MathUtils={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function generateUUID(){// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
var d0=Math.random()*0xffffffff|0;var d1=Math.random()*0xffffffff|0;var d2=Math.random()*0xffffffff|0;var d3=Math.random()*0xffffffff|0;var uuid=_lut[d0&0xff]+_lut[d0>>8&0xff]+_lut[d0>>16&0xff]+_lut[d0>>24&0xff]+'-'+_lut[d1&0xff]+_lut[d1>>8&0xff]+'-'+_lut[d1>>16&0x0f|0x40]+_lut[d1>>24&0xff]+'-'+_lut[d2&0x3f|0x80]+_lut[d2>>8&0xff]+'-'+_lut[d2>>16&0xff]+_lut[d2>>24&0xff]+_lut[d3&0xff]+_lut[d3>>8&0xff]+_lut[d3>>16&0xff]+_lut[d3>>24&0xff];// .toUpperCase() here flattens concatenated strings to save heap memory space.
return uuid.toUpperCase();},clamp:function clamp(value,min,max){return Math.max(min,Math.min(max,value));},// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
euclideanModulo:function euclideanModulo(n,m){return (n%m+m)%m;},// Linear mapping from range <a1, a2> to range <b1, b2>
mapLinear:function mapLinear(x,a1,a2,b1,b2){return b1+(x-a1)*(b2-b1)/(a2-a1);},// https://en.wikipedia.org/wiki/Linear_interpolation
lerp:function lerp(x,y,t){return (1-t)*x+t*y;},// http://en.wikipedia.org/wiki/Smoothstep
smoothstep:function smoothstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*(3-2*x);},smootherstep:function smootherstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*x*(x*(x*6-15)+10);},// Random integer from <low, high> interval
randInt:function randInt(low,high){return low+Math.floor(Math.random()*(high-low+1));},// Random float from <low, high> interval
randFloat:function randFloat(low,high){return low+Math.random()*(high-low);},// Random float from <-range/2, range/2> interval
randFloatSpread:function randFloatSpread(range){return range*(0.5-Math.random());},degToRad:function degToRad(degrees){return degrees*MathUtils.DEG2RAD;},radToDeg:function radToDeg(radians){return radians*MathUtils.RAD2DEG;},isPowerOfTwo:function isPowerOfTwo(value){return (value&value-1)===0&&value!==0;},ceilPowerOfTwo:function ceilPowerOfTwo(value){return Math.pow(2,Math.ceil(Math.log(value)/Math.LN2));},floorPowerOfTwo:function floorPowerOfTwo(value){return Math.pow(2,Math.floor(Math.log(value)/Math.LN2));},setQuaternionFromProperEuler:function setQuaternionFromProperEuler(q,a,b,c,order){// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
// rotations are applied to the axes in the order specified by 'order'
// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
// angles are in radians
var cos=Math.cos;var sin=Math.sin;var c2=cos(b/2);var s2=sin(b/2);var c13=cos((a+c)/2);var s13=sin((a+c)/2);var c1_3=cos((a-c)/2);var s1_3=sin((a-c)/2);var c3_1=cos((c-a)/2);var s3_1=sin((c-a)/2);if(order==='XYX'){q.set(c2*s13,s2*c1_3,s2*s1_3,c2*c13);}else if(order==='YZY'){q.set(s2*s1_3,c2*s13,s2*c1_3,c2*c13);}else if(order==='ZXZ'){q.set(s2*c1_3,s2*s1_3,c2*s13,c2*c13);}else if(order==='XZX'){q.set(c2*s13,s2*s3_1,s2*c3_1,c2*c13);}else if(order==='YXY'){q.set(s2*c3_1,c2*s13,s2*s3_1,c2*c13);}else if(order==='ZYZ'){q.set(s2*s3_1,s2*c3_1,c2*s13,c2*c13);}else {console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.');}}};/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */function Vector2(x,y){this.x=x||0;this.y=y||0;}Object.defineProperties(Vector2.prototype,{"width":{get:function get(){return this.x;},set:function set(value){this.x=value;}},"height":{get:function get(){return this.y;},set:function set(value){this.y=value;}}});Object.assign(Vector2.prototype,{isVector2:true,set:function set(x,y){this.x=x;this.y=y;return this;},setScalar:function setScalar(scalar){this.x=scalar;this.y=scalar;return this;},setX:function setX(x){this.x=x;return this;},setY:function setY(y){this.y=y;return this;},setComponent:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw new Error('index is out of range: '+index);}return this;},getComponent:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw new Error('index is out of range: '+index);}},clone:function clone(){return new this.constructor(this.x,this.y);},copy:function copy(v){this.x=v.x;this.y=v.y;return this;},add:function add(v,w){if(w!==undefined){console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;return this;},addScalar:function addScalar(s){this.x+=s;this.y+=s;return this;},addVectors:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this;},addScaledVector:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;return this;},sub:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;return this;},subScalar:function subScalar(s){this.x-=s;this.y-=s;return this;},subVectors:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this;},multiply:function multiply(v){this.x*=v.x;this.y*=v.y;return this;},multiplyScalar:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;return this;},divide:function divide(v){this.x/=v.x;this.y/=v.y;return this;},divideScalar:function divideScalar(scalar){return this.multiplyScalar(1/scalar);},applyMatrix3:function applyMatrix3(m){var x=this.x,y=this.y;var e=m.elements;this.x=e[0]*x+e[3]*y+e[6];this.y=e[1]*x+e[4]*y+e[7];return this;},min:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);return this;},max:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);return this;},clamp:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));return this;},clampScalar:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));return this;},clampLength:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));},floor:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this;},ceil:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this;},round:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this;},roundToZero:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);return this;},negate:function negate(){this.x=-this.x;this.y=-this.y;return this;},dot:function dot(v){return this.x*v.x+this.y*v.y;},cross:function cross(v){return this.x*v.y-this.y*v.x;},lengthSq:function lengthSq(){return this.x*this.x+this.y*this.y;},length:function length(){return Math.sqrt(this.x*this.x+this.y*this.y);},manhattanLength:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y);},normalize:function normalize(){return this.divideScalar(this.length()||1);},angle:function angle(){// computes the angle in radians with respect to the positive x-axis
var angle=Math.atan2(this.y,this.x);if(angle<0)angle+=2*Math.PI;return angle;},distanceTo:function distanceTo(v){return Math.sqrt(this.distanceToSquared(v));},distanceToSquared:function distanceToSquared(v){var dx=this.x-v.x,dy=this.y-v.y;return dx*dx+dy*dy;},manhattanDistanceTo:function manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y);},setLength:function setLength(length){return this.normalize().multiplyScalar(length);},lerp:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;return this;},lerpVectors:function lerpVectors(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1);},equals:function equals(v){return v.x===this.x&&v.y===this.y;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;return array;},fromBufferAttribute:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);return this;},rotateAround:function rotateAround(center,angle){var c=Math.cos(angle),s=Math.sin(angle);var x=this.x-center.x;var y=this.y-center.y;this.x=x*c-y*s+center.x;this.y=x*s+y*c+center.y;return this;}});/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 * @author tschw
 */function Matrix3(){this.elements=[1,0,0,0,1,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');}}Object.assign(Matrix3.prototype,{isMatrix3:true,set:function set(n11,n12,n13,n21,n22,n23,n31,n32,n33){var te=this.elements;te[0]=n11;te[1]=n21;te[2]=n31;te[3]=n12;te[4]=n22;te[5]=n32;te[6]=n13;te[7]=n23;te[8]=n33;return this;},identity:function identity(){this.set(1,0,0,0,1,0,0,0,1);return this;},clone:function clone(){return new this.constructor().fromArray(this.elements);},copy:function copy(m){var te=this.elements;var me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];return this;},setFromMatrix4:function setFromMatrix4(m){var me=m.elements;this.set(me[0],me[4],me[8],me[1],me[5],me[9],me[2],me[6],me[10]);return this;},multiply:function multiply(m){return this.multiplyMatrices(this,m);},premultiply:function premultiply(m){return this.multiplyMatrices(m,this);},multiplyMatrices:function multiplyMatrices(a,b){var ae=a.elements;var be=b.elements;var te=this.elements;var a11=ae[0],a12=ae[3],a13=ae[6];var a21=ae[1],a22=ae[4],a23=ae[7];var a31=ae[2],a32=ae[5],a33=ae[8];var b11=be[0],b12=be[3],b13=be[6];var b21=be[1],b22=be[4],b23=be[7];var b31=be[2],b32=be[5],b33=be[8];te[0]=a11*b11+a12*b21+a13*b31;te[3]=a11*b12+a12*b22+a13*b32;te[6]=a11*b13+a12*b23+a13*b33;te[1]=a21*b11+a22*b21+a23*b31;te[4]=a21*b12+a22*b22+a23*b32;te[7]=a21*b13+a22*b23+a23*b33;te[2]=a31*b11+a32*b21+a33*b31;te[5]=a31*b12+a32*b22+a33*b32;te[8]=a31*b13+a32*b23+a33*b33;return this;},multiplyScalar:function multiplyScalar(s){var te=this.elements;te[0]*=s;te[3]*=s;te[6]*=s;te[1]*=s;te[4]*=s;te[7]*=s;te[2]*=s;te[5]*=s;te[8]*=s;return this;},determinant:function determinant(){var te=this.elements;var a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7],i=te[8];return a*e*i-a*f*h-b*d*i+b*f*g+c*d*h-c*e*g;},getInverse:function getInverse(matrix,throwOnDegenerate){if(matrix&&matrix.isMatrix4){console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");}var me=matrix.elements,te=this.elements,n11=me[0],n21=me[1],n31=me[2],n12=me[3],n22=me[4],n32=me[5],n13=me[6],n23=me[7],n33=me[8],t11=n33*n22-n32*n23,t12=n32*n13-n33*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(det===0){var msg="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(throwOnDegenerate===true){throw new Error(msg);}else {console.warn(msg);}return this.identity();}var detInv=1/det;te[0]=t11*detInv;te[1]=(n31*n23-n33*n21)*detInv;te[2]=(n32*n21-n31*n22)*detInv;te[3]=t12*detInv;te[4]=(n33*n11-n31*n13)*detInv;te[5]=(n31*n12-n32*n11)*detInv;te[6]=t13*detInv;te[7]=(n21*n13-n23*n11)*detInv;te[8]=(n22*n11-n21*n12)*detInv;return this;},transpose:function transpose(){var tmp,m=this.elements;tmp=m[1];m[1]=m[3];m[3]=tmp;tmp=m[2];m[2]=m[6];m[6]=tmp;tmp=m[5];m[5]=m[7];m[7]=tmp;return this;},getNormalMatrix:function getNormalMatrix(matrix4){return this.setFromMatrix4(matrix4).getInverse(this).transpose();},transposeIntoArray:function transposeIntoArray(r){var m=this.elements;r[0]=m[0];r[1]=m[3];r[2]=m[6];r[3]=m[1];r[4]=m[4];r[5]=m[7];r[6]=m[2];r[7]=m[5];r[8]=m[8];return this;},setUvTransform:function setUvTransform(tx,ty,sx,sy,rotation,cx,cy){var c=Math.cos(rotation);var s=Math.sin(rotation);this.set(sx*c,sx*s,-sx*(c*cx+s*cy)+cx+tx,-sy*s,sy*c,-sy*(-s*cx+c*cy)+cy+ty,0,0,1);},scale:function scale(sx,sy){var te=this.elements;te[0]*=sx;te[3]*=sx;te[6]*=sx;te[1]*=sy;te[4]*=sy;te[7]*=sy;return this;},rotate:function rotate(theta){var c=Math.cos(theta);var s=Math.sin(theta);var te=this.elements;var a11=te[0],a12=te[3],a13=te[6];var a21=te[1],a22=te[4],a23=te[7];te[0]=c*a11+s*a21;te[3]=c*a12+s*a22;te[6]=c*a13+s*a23;te[1]=-s*a11+c*a21;te[4]=-s*a12+c*a22;te[7]=-s*a13+c*a23;return this;},translate:function translate(tx,ty){var te=this.elements;te[0]+=tx*te[2];te[3]+=tx*te[5];te[6]+=tx*te[8];te[1]+=ty*te[2];te[4]+=ty*te[5];te[7]+=ty*te[8];return this;},equals:function equals(matrix){var te=this.elements;var me=matrix.elements;for(var i=0;i<9;i++){if(te[i]!==me[i])return false;}return true;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;for(var i=0;i<9;i++){this.elements[i]=array[i+offset];}return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];return array;}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */var _canvas;var ImageUtils={getDataURL:function getDataURL(image){var canvas;if(typeof HTMLCanvasElement=='undefined'){return image.src;}else if(image instanceof HTMLCanvasElement){canvas=image;}else {if(_canvas===undefined)_canvas=document.createElementNS('http://www.w3.org/1999/xhtml','canvas');_canvas.width=image.width;_canvas.height=image.height;var context=_canvas.getContext('2d');if(image instanceof ImageData){context.putImageData(image,0,0);}else {context.drawImage(image,0,0,image.width,image.height);}canvas=_canvas;}if(canvas.width>2048||canvas.height>2048){return canvas.toDataURL('image/jpeg',0.6);}else {return canvas.toDataURL('image/png');}}};/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */var textureId=0;function Texture(image,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){Object.defineProperty(this,'id',{value:textureId++});this.uuid=MathUtils.generateUUID();this.name='';this.image=image!==undefined?image:Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=mapping!==undefined?mapping:Texture.DEFAULT_MAPPING;this.wrapS=wrapS!==undefined?wrapS:ClampToEdgeWrapping;this.wrapT=wrapT!==undefined?wrapT:ClampToEdgeWrapping;this.magFilter=magFilter!==undefined?magFilter:LinearFilter;this.minFilter=minFilter!==undefined?minFilter:LinearMipmapLinearFilter;this.anisotropy=anisotropy!==undefined?anisotropy:1;this.format=format!==undefined?format:RGBAFormat;this.internalFormat=null;this.type=type!==undefined?type:UnsignedByteType;this.offset=new Vector2(0,0);this.repeat=new Vector2(1,1);this.center=new Vector2(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Matrix3();this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
//
// Also changing the encoding after already used by a Material will not automatically make the Material
// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
this.encoding=encoding!==undefined?encoding:LinearEncoding;this.version=0;this.onUpdate=null;}Texture.DEFAULT_IMAGE=undefined;Texture.DEFAULT_MAPPING=UVMapping;Texture.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Texture,isTexture:true,updateMatrix:function updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y);},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.name=source.name;this.image=source.image;this.mipmaps=source.mipmaps.slice(0);this.mapping=source.mapping;this.wrapS=source.wrapS;this.wrapT=source.wrapT;this.magFilter=source.magFilter;this.minFilter=source.minFilter;this.anisotropy=source.anisotropy;this.format=source.format;this.internalFormat=source.internalFormat;this.type=source.type;this.offset.copy(source.offset);this.repeat.copy(source.repeat);this.center.copy(source.center);this.rotation=source.rotation;this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrix.copy(source.matrix);this.generateMipmaps=source.generateMipmaps;this.premultiplyAlpha=source.premultiplyAlpha;this.flipY=source.flipY;this.unpackAlignment=source.unpackAlignment;this.encoding=source.encoding;return this;},toJSON:function toJSON(meta){var isRootObject=meta===undefined||typeof meta==='string';if(!isRootObject&&meta.textures[this.uuid]!==undefined){return meta.textures[this.uuid];}var output={metadata:{version:4.5,type:'Texture',generator:'Texture.toJSON'},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==undefined){// TODO: Move to THREE.Image
var image=this.image;if(image.uuid===undefined){image.uuid=MathUtils.generateUUID();// UGH
}if(!isRootObject&&meta.images[image.uuid]===undefined){var url;if(Array.isArray(image)){// process array of images e.g. CubeTexture
url=[];for(var i=0,l=image.length;i<l;i++){url.push(ImageUtils.getDataURL(image[i]));}}else {// process single image
url=ImageUtils.getDataURL(image);}meta.images[image.uuid]={uuid:image.uuid,url:url};}output.image=image.uuid;}if(!isRootObject){meta.textures[this.uuid]=output;}return output;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});},transformUv:function transformUv(uv){if(this.mapping!==UVMapping)return uv;uv.applyMatrix3(this.matrix);if(uv.x<0||uv.x>1){switch(this.wrapS){case RepeatWrapping:uv.x=uv.x-Math.floor(uv.x);break;case ClampToEdgeWrapping:uv.x=uv.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.x)%2)===1){uv.x=Math.ceil(uv.x)-uv.x;}else {uv.x=uv.x-Math.floor(uv.x);}break;}}if(uv.y<0||uv.y>1){switch(this.wrapT){case RepeatWrapping:uv.y=uv.y-Math.floor(uv.y);break;case ClampToEdgeWrapping:uv.y=uv.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.y)%2)===1){uv.y=Math.ceil(uv.y)-uv.y;}else {uv.y=uv.y-Math.floor(uv.y);}break;}}if(this.flipY){uv.y=1-uv.y;}return uv;}});Object.defineProperty(Texture.prototype,"needsUpdate",{set:function set(value){if(value===true)this.version++;}});/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */function Vector4(x,y,z,w){this.x=x||0;this.y=y||0;this.z=z||0;this.w=w!==undefined?w:1;}Object.defineProperties(Vector4.prototype,{"width":{get:function get(){return this.z;},set:function set(value){this.z=value;}},"height":{get:function get(){return this.w;},set:function set(value){this.w=value;}}});Object.assign(Vector4.prototype,{isVector4:true,set:function set(x,y,z,w){this.x=x;this.y=y;this.z=z;this.w=w;return this;},setScalar:function setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;this.w=scalar;return this;},setX:function setX(x){this.x=x;return this;},setY:function setY(y){this.y=y;return this;},setZ:function setZ(z){this.z=z;return this;},setW:function setW(w){this.w=w;return this;},setComponent:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw new Error('index is out of range: '+index);}return this;},getComponent:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error('index is out of range: '+index);}},clone:function clone(){return new this.constructor(this.x,this.y,this.z,this.w);},copy:function copy(v){this.x=v.x;this.y=v.y;this.z=v.z;this.w=v.w!==undefined?v.w:1;return this;},add:function add(v,w){if(w!==undefined){console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;this.w+=v.w;return this;},addScalar:function addScalar(s){this.x+=s;this.y+=s;this.z+=s;this.w+=s;return this;},addVectors:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this;},addScaledVector:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;this.w+=v.w*s;return this;},sub:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;this.w-=v.w;return this;},subScalar:function subScalar(s){this.x-=s;this.y-=s;this.z-=s;this.w-=s;return this;},subVectors:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this;},multiplyScalar:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;this.w*=scalar;return this;},applyMatrix4:function applyMatrix4(m){var x=this.x,y=this.y,z=this.z,w=this.w;var e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z+e[12]*w;this.y=e[1]*x+e[5]*y+e[9]*z+e[13]*w;this.z=e[2]*x+e[6]*y+e[10]*z+e[14]*w;this.w=e[3]*x+e[7]*y+e[11]*z+e[15]*w;return this;},divideScalar:function divideScalar(scalar){return this.multiplyScalar(1/scalar);},setAxisAngleFromQuaternion:function setAxisAngleFromQuaternion(q){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
// q is assumed to be normalized
this.w=2*Math.acos(q.w);var s=Math.sqrt(1-q.w*q.w);if(s<0.0001){this.x=1;this.y=0;this.z=0;}else {this.x=q.x/s;this.y=q.y/s;this.z=q.z/s;}return this;},setAxisAngleFromRotationMatrix:function setAxisAngleFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var angle,x,y,z,// variables for result
epsilon=0.01,// margin to allow for rounding errors
epsilon2=0.1,// margin to distinguish between 0 and 180 degrees
te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];if(Math.abs(m12-m21)<epsilon&&Math.abs(m13-m31)<epsilon&&Math.abs(m23-m32)<epsilon){// singularity found
// first check for identity matrix which must have +1 for all terms
// in leading diagonal and zero in other terms
if(Math.abs(m12+m21)<epsilon2&&Math.abs(m13+m31)<epsilon2&&Math.abs(m23+m32)<epsilon2&&Math.abs(m11+m22+m33-3)<epsilon2){// this singularity is identity matrix so angle = 0
this.set(1,0,0,0);return this;// zero angle, arbitrary axis
}// otherwise this singularity is angle = 180
angle=Math.PI;var xx=(m11+1)/2;var yy=(m22+1)/2;var zz=(m33+1)/2;var xy=(m12+m21)/4;var xz=(m13+m31)/4;var yz=(m23+m32)/4;if(xx>yy&&xx>zz){// m11 is the largest diagonal term
if(xx<epsilon){x=0;y=0.707106781;z=0.707106781;}else {x=Math.sqrt(xx);y=xy/x;z=xz/x;}}else if(yy>zz){// m22 is the largest diagonal term
if(yy<epsilon){x=0.707106781;y=0;z=0.707106781;}else {y=Math.sqrt(yy);x=xy/y;z=yz/y;}}else {// m33 is the largest diagonal term so base result on this
if(zz<epsilon){x=0.707106781;y=0.707106781;z=0;}else {z=Math.sqrt(zz);x=xz/z;y=yz/z;}}this.set(x,y,z,angle);return this;// return 180 deg rotation
}// as we have reached here there are no singularities so we can handle normally
var s=Math.sqrt((m32-m23)*(m32-m23)+(m13-m31)*(m13-m31)+(m21-m12)*(m21-m12));// used to normalize
if(Math.abs(s)<0.001)s=1;// prevent divide by zero, should not happen if matrix is orthogonal and should be
// caught by singularity test above, but I've left it in just in case
this.x=(m32-m23)/s;this.y=(m13-m31)/s;this.z=(m21-m12)/s;this.w=Math.acos((m11+m22+m33-1)/2);return this;},min:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);this.w=Math.min(this.w,v.w);return this;},max:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);this.w=Math.max(this.w,v.w);return this;},clamp:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));this.w=Math.max(min.w,Math.min(max.w,this.w));return this;},clampScalar:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));this.z=Math.max(minVal,Math.min(maxVal,this.z));this.w=Math.max(minVal,Math.min(maxVal,this.w));return this;},clampLength:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));},floor:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this;},ceil:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this;},round:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this;},roundToZero:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w);return this;},negate:function negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this;},dot:function dot(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w;},lengthSq:function lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;},length:function length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);},manhattanLength:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w);},normalize:function normalize(){return this.divideScalar(this.length()||1);},setLength:function setLength(length){return this.normalize().multiplyScalar(length);},lerp:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;this.w+=(v.w-this.w)*alpha;return this;},lerpVectors:function lerpVectors(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1);},equals:function equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];this.w=array[offset+3];return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;array[offset+3]=this.w;return array;},fromBufferAttribute:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);this.w=attribute.getW(index);return this;}});/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 * @author Marius Kintel / https://github.com/kintel
 */ /*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/function WebGLRenderTarget(width,height,options){this.width=width;this.height=height;this.scissor=new Vector4(0,0,width,height);this.scissorTest=false;this.viewport=new Vector4(0,0,width,height);options=options||{};this.texture=new Texture(undefined,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);this.texture.image={};this.texture.image.width=width;this.texture.image.height=height;this.texture.generateMipmaps=options.generateMipmaps!==undefined?options.generateMipmaps:false;this.texture.minFilter=options.minFilter!==undefined?options.minFilter:LinearFilter;this.depthBuffer=options.depthBuffer!==undefined?options.depthBuffer:true;this.stencilBuffer=options.stencilBuffer!==undefined?options.stencilBuffer:true;this.depthTexture=options.depthTexture!==undefined?options.depthTexture:null;}WebGLRenderTarget.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:WebGLRenderTarget,isWebGLRenderTarget:true,setSize:function setSize(width,height){if(this.width!==width||this.height!==height){this.width=width;this.height=height;this.texture.image.width=width;this.texture.image.height=height;this.dispose();}this.viewport.set(0,0,width,height);this.scissor.set(0,0,width,height);},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.width=source.width;this.height=source.height;this.viewport.copy(source.viewport);this.texture=source.texture.clone();this.depthBuffer=source.depthBuffer;this.stencilBuffer=source.stencilBuffer;this.depthTexture=source.depthTexture;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});/**
 * @author Mugen87 / https://github.com/Mugen87
 * @author Matt DesLauriers / @mattdesl
 */function WebGLMultisampleRenderTarget(width,height,options){WebGLRenderTarget.call(this,width,height,options);this.samples=4;}WebGLMultisampleRenderTarget.prototype=Object.assign(Object.create(WebGLRenderTarget.prototype),{constructor:WebGLMultisampleRenderTarget,isWebGLMultisampleRenderTarget:true,copy:function copy(source){WebGLRenderTarget.prototype.copy.call(this,source);this.samples=source.samples;return this;}});/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */function Quaternion(x,y,z,w){this._x=x||0;this._y=y||0;this._z=z||0;this._w=w!==undefined?w:1;}Object.assign(Quaternion,{slerp:function slerp(qa,qb,qm,t){return qm.copy(qa).slerp(qb,t);},slerpFlat:function slerpFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){// fuzz-free, array-based Quaternion SLERP operation
var x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3],x1=src1[srcOffset1+0],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];if(w0!==w1||x0!==x1||y0!==y1||z0!==z1){var s=1-t,cos=x0*x1+y0*y1+z0*z1+w0*w1,dir=cos>=0?1:-1,sqrSin=1-cos*cos;// Skip the Slerp for tiny steps to avoid numeric problems:
if(sqrSin>Number.EPSILON){var sin=Math.sqrt(sqrSin),len=Math.atan2(sin,cos*dir);s=Math.sin(s*len)/sin;t=Math.sin(t*len)/sin;}var tDir=t*dir;x0=x0*s+x1*tDir;y0=y0*s+y1*tDir;z0=z0*s+z1*tDir;w0=w0*s+w1*tDir;// Normalize in case we just did a lerp:
if(s===1-t){var f=1/Math.sqrt(x0*x0+y0*y0+z0*z0+w0*w0);x0*=f;y0*=f;z0*=f;w0*=f;}}dst[dstOffset]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;}});Object.defineProperties(Quaternion.prototype,{x:{get:function get(){return this._x;},set:function set(value){this._x=value;this._onChangeCallback();}},y:{get:function get(){return this._y;},set:function set(value){this._y=value;this._onChangeCallback();}},z:{get:function get(){return this._z;},set:function set(value){this._z=value;this._onChangeCallback();}},w:{get:function get(){return this._w;},set:function set(value){this._w=value;this._onChangeCallback();}}});Object.assign(Quaternion.prototype,{isQuaternion:true,set:function set(x,y,z,w){this._x=x;this._y=y;this._z=z;this._w=w;this._onChangeCallback();return this;},clone:function clone(){return new this.constructor(this._x,this._y,this._z,this._w);},copy:function copy(quaternion){this._x=quaternion.x;this._y=quaternion.y;this._z=quaternion.z;this._w=quaternion.w;this._onChangeCallback();return this;},setFromEuler:function setFromEuler(euler,update){if(!(euler&&euler.isEuler)){throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');}var x=euler._x,y=euler._y,z=euler._z,order=euler.order;// http://www.mathworks.com/matlabcentral/fileexchange/
// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
//	content/SpinCalc.m
var cos=Math.cos;var sin=Math.sin;var c1=cos(x/2);var c2=cos(y/2);var c3=cos(z/2);var s1=sin(x/2);var s2=sin(y/2);var s3=sin(z/2);if(order==='XYZ'){this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;}else if(order==='YXZ'){this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;}else if(order==='ZXY'){this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;}else if(order==='ZYX'){this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;}else if(order==='YZX'){this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;}else if(order==='XZY'){this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;}if(update!==false)this._onChangeCallback();return this;},setFromAxisAngle:function setFromAxisAngle(axis,angle){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
// assumes axis is normalized
var halfAngle=angle/2,s=Math.sin(halfAngle);this._x=axis.x*s;this._y=axis.y*s;this._z=axis.z*s;this._w=Math.cos(halfAngle);this._onChangeCallback();return this;},setFromRotationMatrix:function setFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10],trace=m11+m22+m33,s;if(trace>0){s=0.5/Math.sqrt(trace+1.0);this._w=0.25/s;this._x=(m32-m23)*s;this._y=(m13-m31)*s;this._z=(m21-m12)*s;}else if(m11>m22&&m11>m33){s=2.0*Math.sqrt(1.0+m11-m22-m33);this._w=(m32-m23)/s;this._x=0.25*s;this._y=(m12+m21)/s;this._z=(m13+m31)/s;}else if(m22>m33){s=2.0*Math.sqrt(1.0+m22-m11-m33);this._w=(m13-m31)/s;this._x=(m12+m21)/s;this._y=0.25*s;this._z=(m23+m32)/s;}else {s=2.0*Math.sqrt(1.0+m33-m11-m22);this._w=(m21-m12)/s;this._x=(m13+m31)/s;this._y=(m23+m32)/s;this._z=0.25*s;}this._onChangeCallback();return this;},setFromUnitVectors:function setFromUnitVectors(vFrom,vTo){// assumes direction vectors vFrom and vTo are normalized
var EPS=0.000001;var r=vFrom.dot(vTo)+1;if(r<EPS){r=0;if(Math.abs(vFrom.x)>Math.abs(vFrom.z)){this._x=-vFrom.y;this._y=vFrom.x;this._z=0;this._w=r;}else {this._x=0;this._y=-vFrom.z;this._z=vFrom.y;this._w=r;}}else {// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
this._x=vFrom.y*vTo.z-vFrom.z*vTo.y;this._y=vFrom.z*vTo.x-vFrom.x*vTo.z;this._z=vFrom.x*vTo.y-vFrom.y*vTo.x;this._w=r;}return this.normalize();},angleTo:function angleTo(q){return 2*Math.acos(Math.abs(MathUtils.clamp(this.dot(q),-1,1)));},rotateTowards:function rotateTowards(q,step){var angle=this.angleTo(q);if(angle===0)return this;var t=Math.min(1,step/angle);this.slerp(q,t);return this;},inverse:function inverse(){// quaternion is assumed to have unit length
return this.conjugate();},conjugate:function conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this;},dot:function dot(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w;},lengthSq:function lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w;},length:function length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w);},normalize:function normalize(){var l=this.length();if(l===0){this._x=0;this._y=0;this._z=0;this._w=1;}else {l=1/l;this._x=this._x*l;this._y=this._y*l;this._z=this._z*l;this._w=this._w*l;}this._onChangeCallback();return this;},multiply:function multiply(q,p){if(p!==undefined){console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');return this.multiplyQuaternions(q,p);}return this.multiplyQuaternions(this,q);},premultiply:function premultiply(q){return this.multiplyQuaternions(q,this);},multiplyQuaternions:function multiplyQuaternions(a,b){// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
var qax=a._x,qay=a._y,qaz=a._z,qaw=a._w;var qbx=b._x,qby=b._y,qbz=b._z,qbw=b._w;this._x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby;this._y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz;this._z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx;this._w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz;this._onChangeCallback();return this;},slerp:function slerp(qb,t){if(t===0)return this;if(t===1)return this.copy(qb);var x=this._x,y=this._y,z=this._z,w=this._w;// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
var cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;if(cosHalfTheta<0){this._w=-qb._w;this._x=-qb._x;this._y=-qb._y;this._z=-qb._z;cosHalfTheta=-cosHalfTheta;}else {this.copy(qb);}if(cosHalfTheta>=1.0){this._w=w;this._x=x;this._y=y;this._z=z;return this;}var sqrSinHalfTheta=1.0-cosHalfTheta*cosHalfTheta;if(sqrSinHalfTheta<=Number.EPSILON){var s=1-t;this._w=s*w+t*this._w;this._x=s*x+t*this._x;this._y=s*y+t*this._y;this._z=s*z+t*this._z;this.normalize();this._onChangeCallback();return this;}var sinHalfTheta=Math.sqrt(sqrSinHalfTheta);var halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta);var ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta,ratioB=Math.sin(t*halfTheta)/sinHalfTheta;this._w=w*ratioA+this._w*ratioB;this._x=x*ratioA+this._x*ratioB;this._y=y*ratioA+this._y*ratioB;this._z=z*ratioA+this._z*ratioB;this._onChangeCallback();return this;},equals:function equals(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this._x=array[offset];this._y=array[offset+1];this._z=array[offset+2];this._w=array[offset+3];this._onChangeCallback();return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._w;return array;},_onChange:function _onChange(callback){this._onChangeCallback=callback;return this;},_onChangeCallback:function _onChangeCallback(){}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */var _vector=new Vector3();var _quaternion=new Quaternion();function Vector3(x,y,z){this.x=x||0;this.y=y||0;this.z=z||0;}Object.assign(Vector3.prototype,{isVector3:true,set:function set(x,y,z){this.x=x;this.y=y;this.z=z;return this;},setScalar:function setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;return this;},setX:function setX(x){this.x=x;return this;},setY:function setY(y){this.y=y;return this;},setZ:function setZ(z){this.z=z;return this;},setComponent:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw new Error('index is out of range: '+index);}return this;},getComponent:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error('index is out of range: '+index);}},clone:function clone(){return new this.constructor(this.x,this.y,this.z);},copy:function copy(v){this.x=v.x;this.y=v.y;this.z=v.z;return this;},add:function add(v,w){if(w!==undefined){console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;return this;},addScalar:function addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this;},addVectors:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this;},addScaledVector:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;return this;},sub:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;return this;},subScalar:function subScalar(s){this.x-=s;this.y-=s;this.z-=s;return this;},subVectors:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this;},multiply:function multiply(v,w){if(w!==undefined){console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');return this.multiplyVectors(v,w);}this.x*=v.x;this.y*=v.y;this.z*=v.z;return this;},multiplyScalar:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;return this;},multiplyVectors:function multiplyVectors(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this;},applyEuler:function applyEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');}return this.applyQuaternion(_quaternion.setFromEuler(euler));},applyAxisAngle:function applyAxisAngle(axis,angle){return this.applyQuaternion(_quaternion.setFromAxisAngle(axis,angle));},applyMatrix3:function applyMatrix3(m){var x=this.x,y=this.y,z=this.z;var e=m.elements;this.x=e[0]*x+e[3]*y+e[6]*z;this.y=e[1]*x+e[4]*y+e[7]*z;this.z=e[2]*x+e[5]*y+e[8]*z;return this;},applyNormalMatrix:function applyNormalMatrix(m){return this.applyMatrix3(m).normalize();},applyMatrix4:function applyMatrix4(m){var x=this.x,y=this.y,z=this.z;var e=m.elements;var w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w;this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w;this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w;return this;},applyQuaternion:function applyQuaternion(q){var x=this.x,y=this.y,z=this.z;var qx=q.x,qy=q.y,qz=q.z,qw=q.w;// calculate quat * vector
var ix=qw*x+qy*z-qz*y;var iy=qw*y+qz*x-qx*z;var iz=qw*z+qx*y-qy*x;var iw=-qx*x-qy*y-qz*z;// calculate result * inverse quat
this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy;this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz;this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx;return this;},project:function project(camera){return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);},unproject:function unproject(camera){return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);},transformDirection:function transformDirection(m){// input: THREE.Matrix4 affine matrix
// vector interpreted as a direction
var x=this.x,y=this.y,z=this.z;var e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z;this.y=e[1]*x+e[5]*y+e[9]*z;this.z=e[2]*x+e[6]*y+e[10]*z;return this.normalize();},divide:function divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this;},divideScalar:function divideScalar(scalar){return this.multiplyScalar(1/scalar);},min:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);return this;},max:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);return this;},clamp:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));return this;},clampScalar:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));this.z=Math.max(minVal,Math.min(maxVal,this.z));return this;},clampLength:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));},floor:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this;},ceil:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this;},round:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this;},roundToZero:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);return this;},negate:function negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this;},dot:function dot(v){return this.x*v.x+this.y*v.y+this.z*v.z;},// TODO lengthSquared?
lengthSq:function lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z;},length:function length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);},manhattanLength:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z);},normalize:function normalize(){return this.divideScalar(this.length()||1);},setLength:function setLength(length){return this.normalize().multiplyScalar(length);},lerp:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;return this;},lerpVectors:function lerpVectors(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1);},cross:function cross(v,w){if(w!==undefined){console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');return this.crossVectors(v,w);}return this.crossVectors(this,v);},crossVectors:function crossVectors(a,b){var ax=a.x,ay=a.y,az=a.z;var bx=b.x,by=b.y,bz=b.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this;},projectOnVector:function projectOnVector(v){var denominator=v.lengthSq();if(denominator===0)return this.set(0,0,0);var scalar=v.dot(this)/denominator;return this.copy(v).multiplyScalar(scalar);},projectOnPlane:function projectOnPlane(planeNormal){_vector.copy(this).projectOnVector(planeNormal);return this.sub(_vector);},reflect:function reflect(normal){// reflect incident vector off plane orthogonal to normal
// normal is assumed to have unit length
return this.sub(_vector.copy(normal).multiplyScalar(2*this.dot(normal)));},angleTo:function angleTo(v){var denominator=Math.sqrt(this.lengthSq()*v.lengthSq());if(denominator===0)return Math.PI/2;var theta=this.dot(v)/denominator;// clamp, to handle numerical problems
return Math.acos(MathUtils.clamp(theta,-1,1));},distanceTo:function distanceTo(v){return Math.sqrt(this.distanceToSquared(v));},distanceToSquared:function distanceToSquared(v){var dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz;},manhattanDistanceTo:function manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)+Math.abs(this.z-v.z);},setFromSpherical:function setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta);},setFromSphericalCoords:function setFromSphericalCoords(radius,phi,theta){var sinPhiRadius=Math.sin(phi)*radius;this.x=sinPhiRadius*Math.sin(theta);this.y=Math.cos(phi)*radius;this.z=sinPhiRadius*Math.cos(theta);return this;},setFromCylindrical:function setFromCylindrical(c){return this.setFromCylindricalCoords(c.radius,c.theta,c.y);},setFromCylindricalCoords:function setFromCylindricalCoords(radius,theta,y){this.x=radius*Math.sin(theta);this.y=y;this.z=radius*Math.cos(theta);return this;},setFromMatrixPosition:function setFromMatrixPosition(m){var e=m.elements;this.x=e[12];this.y=e[13];this.z=e[14];return this;},setFromMatrixScale:function setFromMatrixScale(m){var sx=this.setFromMatrixColumn(m,0).length();var sy=this.setFromMatrixColumn(m,1).length();var sz=this.setFromMatrixColumn(m,2).length();this.x=sx;this.y=sy;this.z=sz;return this;},setFromMatrixColumn:function setFromMatrixColumn(m,index){return this.fromArray(m.elements,index*4);},setFromMatrix3Column:function setFromMatrix3Column(m,index){return this.fromArray(m.elements,index*3);},equals:function equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;return array;},fromBufferAttribute:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);return this;}});var _v1=new Vector3();var _m1=new Matrix4();var _zero=new Vector3(0,0,0);var _one=new Vector3(1,1,1);var _x=new Vector3();var _y=new Vector3();var _z=new Vector3();/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */function Matrix4(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');}}Object.assign(Matrix4.prototype,{isMatrix4:true,set:function set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){var te=this.elements;te[0]=n11;te[4]=n12;te[8]=n13;te[12]=n14;te[1]=n21;te[5]=n22;te[9]=n23;te[13]=n24;te[2]=n31;te[6]=n32;te[10]=n33;te[14]=n34;te[3]=n41;te[7]=n42;te[11]=n43;te[15]=n44;return this;},identity:function identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this;},clone:function clone(){return new Matrix4().fromArray(this.elements);},copy:function copy(m){var te=this.elements;var me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];te[9]=me[9];te[10]=me[10];te[11]=me[11];te[12]=me[12];te[13]=me[13];te[14]=me[14];te[15]=me[15];return this;},copyPosition:function copyPosition(m){var te=this.elements,me=m.elements;te[12]=me[12];te[13]=me[13];te[14]=me[14];return this;},extractBasis:function extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrixColumn(this,0);yAxis.setFromMatrixColumn(this,1);zAxis.setFromMatrixColumn(this,2);return this;},makeBasis:function makeBasis(xAxis,yAxis,zAxis){this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1);return this;},extractRotation:function extractRotation(m){// this method does not support reflection matrices
var te=this.elements;var me=m.elements;var scaleX=1/_v1.setFromMatrixColumn(m,0).length();var scaleY=1/_v1.setFromMatrixColumn(m,1).length();var scaleZ=1/_v1.setFromMatrixColumn(m,2).length();te[0]=me[0]*scaleX;te[1]=me[1]*scaleX;te[2]=me[2]*scaleX;te[3]=0;te[4]=me[4]*scaleY;te[5]=me[5]*scaleY;te[6]=me[6]*scaleY;te[7]=0;te[8]=me[8]*scaleZ;te[9]=me[9]*scaleZ;te[10]=me[10]*scaleZ;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;},makeRotationFromEuler:function makeRotationFromEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');}var te=this.elements;var x=euler.x,y=euler.y,z=euler.z;var a=Math.cos(x),b=Math.sin(x);var c=Math.cos(y),d=Math.sin(y);var e=Math.cos(z),f=Math.sin(z);if(euler.order==='XYZ'){var ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=-c*f;te[8]=d;te[1]=af+be*d;te[5]=ae-bf*d;te[9]=-b*c;te[2]=bf-ae*d;te[6]=be+af*d;te[10]=a*c;}else if(euler.order==='YXZ'){var ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b;te[4]=de*b-cf;te[8]=a*d;te[1]=a*f;te[5]=a*e;te[9]=-b;te[2]=cf*b-de;te[6]=df+ce*b;te[10]=a*c;}else if(euler.order==='ZXY'){var ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce-df*b;te[4]=-a*f;te[8]=de+cf*b;te[1]=cf+de*b;te[5]=a*e;te[9]=df-ce*b;te[2]=-a*d;te[6]=b;te[10]=a*c;}else if(euler.order==='ZYX'){var ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=be*d-af;te[8]=ae*d+bf;te[1]=c*f;te[5]=bf*d+ae;te[9]=af*d-be;te[2]=-d;te[6]=b*c;te[10]=a*c;}else if(euler.order==='YZX'){var ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=bd-ac*f;te[8]=bc*f+ad;te[1]=f;te[5]=a*e;te[9]=-b*e;te[2]=-d*e;te[6]=ad*f+bc;te[10]=ac-bd*f;}else if(euler.order==='XZY'){var ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=-f;te[8]=d*e;te[1]=ac*f+bd;te[5]=a*e;te[9]=ad*f-bc;te[2]=bc*f-ad;te[6]=b*e;te[10]=bd*f+ac;}// bottom row
te[3]=0;te[7]=0;te[11]=0;// last column
te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;},makeRotationFromQuaternion:function makeRotationFromQuaternion(q){return this.compose(_zero,q,_one);},lookAt:function lookAt(eye,target,up){var te=this.elements;_z.subVectors(eye,target);if(_z.lengthSq()===0){// eye and target are in the same position
_z.z=1;}_z.normalize();_x.crossVectors(up,_z);if(_x.lengthSq()===0){// up and z are parallel
if(Math.abs(up.z)===1){_z.x+=0.0001;}else {_z.z+=0.0001;}_z.normalize();_x.crossVectors(up,_z);}_x.normalize();_y.crossVectors(_z,_x);te[0]=_x.x;te[4]=_y.x;te[8]=_z.x;te[1]=_x.y;te[5]=_y.y;te[9]=_z.y;te[2]=_x.z;te[6]=_y.z;te[10]=_z.z;return this;},multiply:function multiply(m,n){if(n!==undefined){console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');return this.multiplyMatrices(m,n);}return this.multiplyMatrices(this,m);},premultiply:function premultiply(m){return this.multiplyMatrices(m,this);},multiplyMatrices:function multiplyMatrices(a,b){var ae=a.elements;var be=b.elements;var te=this.elements;var a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12];var a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13];var a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14];var a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15];var b11=be[0],b12=be[4],b13=be[8],b14=be[12];var b21=be[1],b22=be[5],b23=be[9],b24=be[13];var b31=be[2],b32=be[6],b33=be[10],b34=be[14];var b41=be[3],b42=be[7],b43=be[11],b44=be[15];te[0]=a11*b11+a12*b21+a13*b31+a14*b41;te[4]=a11*b12+a12*b22+a13*b32+a14*b42;te[8]=a11*b13+a12*b23+a13*b33+a14*b43;te[12]=a11*b14+a12*b24+a13*b34+a14*b44;te[1]=a21*b11+a22*b21+a23*b31+a24*b41;te[5]=a21*b12+a22*b22+a23*b32+a24*b42;te[9]=a21*b13+a22*b23+a23*b33+a24*b43;te[13]=a21*b14+a22*b24+a23*b34+a24*b44;te[2]=a31*b11+a32*b21+a33*b31+a34*b41;te[6]=a31*b12+a32*b22+a33*b32+a34*b42;te[10]=a31*b13+a32*b23+a33*b33+a34*b43;te[14]=a31*b14+a32*b24+a33*b34+a34*b44;te[3]=a41*b11+a42*b21+a43*b31+a44*b41;te[7]=a41*b12+a42*b22+a43*b32+a44*b42;te[11]=a41*b13+a42*b23+a43*b33+a44*b43;te[15]=a41*b14+a42*b24+a43*b34+a44*b44;return this;},multiplyScalar:function multiplyScalar(s){var te=this.elements;te[0]*=s;te[4]*=s;te[8]*=s;te[12]*=s;te[1]*=s;te[5]*=s;te[9]*=s;te[13]*=s;te[2]*=s;te[6]*=s;te[10]*=s;te[14]*=s;te[3]*=s;te[7]*=s;te[11]*=s;te[15]*=s;return this;},determinant:function determinant(){var te=this.elements;var n11=te[0],n12=te[4],n13=te[8],n14=te[12];var n21=te[1],n22=te[5],n23=te[9],n24=te[13];var n31=te[2],n32=te[6],n33=te[10],n34=te[14];var n41=te[3],n42=te[7],n43=te[11],n44=te[15];//TODO: make this more efficient
//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
return n41*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34)+n42*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+n43*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+n44*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31);},transpose:function transpose(){var te=this.elements;var tmp;tmp=te[1];te[1]=te[4];te[4]=tmp;tmp=te[2];te[2]=te[8];te[8]=tmp;tmp=te[6];te[6]=te[9];te[9]=tmp;tmp=te[3];te[3]=te[12];te[12]=tmp;tmp=te[7];te[7]=te[13];te[13]=tmp;tmp=te[11];te[11]=te[14];te[14]=tmp;return this;},setPosition:function setPosition(x,y,z){var te=this.elements;if(x.isVector3){te[12]=x.x;te[13]=x.y;te[14]=x.z;}else {te[12]=x;te[13]=y;te[14]=z;}return this;},getInverse:function getInverse(m,throwOnDegenerate){// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
var te=this.elements,me=m.elements,n11=me[0],n21=me[1],n31=me[2],n41=me[3],n12=me[4],n22=me[5],n32=me[6],n42=me[7],n13=me[8],n23=me[9],n33=me[10],n43=me[11],n14=me[12],n24=me[13],n34=me[14],n44=me[15],t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*n44+n22*n33*n44,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*n44-n12*n33*n44,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*n44+n12*n23*n44,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34;var det=n11*t11+n21*t12+n31*t13+n41*t14;if(det===0){var msg="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(throwOnDegenerate===true){throw new Error(msg);}else {console.warn(msg);}return this.identity();}var detInv=1/det;te[0]=t11*detInv;te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*n44-n21*n33*n44)*detInv;te[2]=(n22*n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*n44+n21*n32*n44)*detInv;te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*detInv;te[4]=t12*detInv;te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-n11*n34*n43-n13*n31*n44+n11*n33*n44)*detInv;te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+n11*n34*n42+n12*n31*n44-n11*n32*n44)*detInv;te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-n11*n33*n42-n12*n31*n43+n11*n32*n43)*detInv;te[8]=t13*detInv;te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+n11*n24*n43+n13*n21*n44-n11*n23*n44)*detInv;te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-n11*n24*n42-n12*n21*n44+n11*n22*n44)*detInv;te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+n11*n23*n42+n12*n21*n43-n11*n22*n43)*detInv;te[12]=t14*detInv;te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-n11*n24*n33-n13*n21*n34+n11*n23*n34)*detInv;te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+n11*n24*n32+n12*n21*n34-n11*n22*n34)*detInv;te[15]=(n12*n23*n31-n13*n22*n31+n13*n21*n32-n11*n23*n32-n12*n21*n33+n11*n22*n33)*detInv;return this;},scale:function scale(v){var te=this.elements;var x=v.x,y=v.y,z=v.z;te[0]*=x;te[4]*=y;te[8]*=z;te[1]*=x;te[5]*=y;te[9]*=z;te[2]*=x;te[6]*=y;te[10]*=z;te[3]*=x;te[7]*=y;te[11]*=z;return this;},getMaxScaleOnAxis:function getMaxScaleOnAxis(){var te=this.elements;var scaleXSq=te[0]*te[0]+te[1]*te[1]+te[2]*te[2];var scaleYSq=te[4]*te[4]+te[5]*te[5]+te[6]*te[6];var scaleZSq=te[8]*te[8]+te[9]*te[9]+te[10]*te[10];return Math.sqrt(Math.max(scaleXSq,scaleYSq,scaleZSq));},makeTranslation:function makeTranslation(x,y,z){this.set(1,0,0,x,0,1,0,y,0,0,1,z,0,0,0,1);return this;},makeRotationX:function makeRotationX(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1);return this;},makeRotationY:function makeRotationY(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1);return this;},makeRotationZ:function makeRotationZ(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1);return this;},makeRotationAxis:function makeRotationAxis(axis,angle){// Based on http://www.gamedev.net/reference/articles/article1199.asp
var c=Math.cos(angle);var s=Math.sin(angle);var t=1-c;var x=axis.x,y=axis.y,z=axis.z;var tx=t*x,ty=t*y;this.set(tx*x+c,tx*y-s*z,tx*z+s*y,0,tx*y+s*z,ty*y+c,ty*z-s*x,0,tx*z-s*y,ty*z+s*x,t*z*z+c,0,0,0,0,1);return this;},makeScale:function makeScale(x,y,z){this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1);return this;},makeShear:function makeShear(x,y,z){this.set(1,y,z,0,x,1,z,0,x,y,1,0,0,0,0,1);return this;},compose:function compose(position,quaternion,scale){var te=this.elements;var x=quaternion._x,y=quaternion._y,z=quaternion._z,w=quaternion._w;var x2=x+x,y2=y+y,z2=z+z;var xx=x*x2,xy=x*y2,xz=x*z2;var yy=y*y2,yz=y*z2,zz=z*z2;var wx=w*x2,wy=w*y2,wz=w*z2;var sx=scale.x,sy=scale.y,sz=scale.z;te[0]=(1-(yy+zz))*sx;te[1]=(xy+wz)*sx;te[2]=(xz-wy)*sx;te[3]=0;te[4]=(xy-wz)*sy;te[5]=(1-(xx+zz))*sy;te[6]=(yz+wx)*sy;te[7]=0;te[8]=(xz+wy)*sz;te[9]=(yz-wx)*sz;te[10]=(1-(xx+yy))*sz;te[11]=0;te[12]=position.x;te[13]=position.y;te[14]=position.z;te[15]=1;return this;},decompose:function decompose(position,quaternion,scale){var te=this.elements;var sx=_v1.set(te[0],te[1],te[2]).length();var sy=_v1.set(te[4],te[5],te[6]).length();var sz=_v1.set(te[8],te[9],te[10]).length();// if determine is negative, we need to invert one scale
var det=this.determinant();if(det<0)sx=-sx;position.x=te[12];position.y=te[13];position.z=te[14];// scale the rotation part
_m1.copy(this);var invSX=1/sx;var invSY=1/sy;var invSZ=1/sz;_m1.elements[0]*=invSX;_m1.elements[1]*=invSX;_m1.elements[2]*=invSX;_m1.elements[4]*=invSY;_m1.elements[5]*=invSY;_m1.elements[6]*=invSY;_m1.elements[8]*=invSZ;_m1.elements[9]*=invSZ;_m1.elements[10]*=invSZ;quaternion.setFromRotationMatrix(_m1);scale.x=sx;scale.y=sy;scale.z=sz;return this;},makePerspective:function makePerspective(left,right,top,bottom,near,far){if(far===undefined){console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');}var te=this.elements;var x=2*near/(right-left);var y=2*near/(top-bottom);var a=(right+left)/(right-left);var b=(top+bottom)/(top-bottom);var c=-(far+near)/(far-near);var d=-2*far*near/(far-near);te[0]=x;te[4]=0;te[8]=a;te[12]=0;te[1]=0;te[5]=y;te[9]=b;te[13]=0;te[2]=0;te[6]=0;te[10]=c;te[14]=d;te[3]=0;te[7]=0;te[11]=-1;te[15]=0;return this;},makeOrthographic:function makeOrthographic(left,right,top,bottom,near,far){var te=this.elements;var w=1.0/(right-left);var h=1.0/(top-bottom);var p=1.0/(far-near);var x=(right+left)*w;var y=(top+bottom)*h;var z=(far+near)*p;te[0]=2*w;te[4]=0;te[8]=0;te[12]=-x;te[1]=0;te[5]=2*h;te[9]=0;te[13]=-y;te[2]=0;te[6]=0;te[10]=-2*p;te[14]=-z;te[3]=0;te[7]=0;te[11]=0;te[15]=1;return this;},equals:function equals(matrix){var te=this.elements;var me=matrix.elements;for(var i=0;i<16;i++){if(te[i]!==me[i])return false;}return true;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;for(var i=0;i<16;i++){this.elements[i]=array[i+offset];}return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];array[offset+9]=te[9];array[offset+10]=te[10];array[offset+11]=te[11];array[offset+12]=te[12];array[offset+13]=te[13];array[offset+14]=te[14];array[offset+15]=te[15];return array;}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */var _matrix=new Matrix4();var _quaternion$1=new Quaternion();function Euler(x,y,z,order){this._x=x||0;this._y=y||0;this._z=z||0;this._order=order||Euler.DefaultOrder;}Euler.RotationOrders=['XYZ','YZX','ZXY','XZY','YXZ','ZYX'];Euler.DefaultOrder='XYZ';Object.defineProperties(Euler.prototype,{x:{get:function get(){return this._x;},set:function set(value){this._x=value;this._onChangeCallback();}},y:{get:function get(){return this._y;},set:function set(value){this._y=value;this._onChangeCallback();}},z:{get:function get(){return this._z;},set:function set(value){this._z=value;this._onChangeCallback();}},order:{get:function get(){return this._order;},set:function set(value){this._order=value;this._onChangeCallback();}}});Object.assign(Euler.prototype,{isEuler:true,set:function set(x,y,z,order){this._x=x;this._y=y;this._z=z;this._order=order||this._order;this._onChangeCallback();return this;},clone:function clone(){return new this.constructor(this._x,this._y,this._z,this._order);},copy:function copy(euler){this._x=euler._x;this._y=euler._y;this._z=euler._z;this._order=euler._order;this._onChangeCallback();return this;},setFromRotationMatrix:function setFromRotationMatrix(m,order,update){var clamp=MathUtils.clamp;// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var te=m.elements;var m11=te[0],m12=te[4],m13=te[8];var m21=te[1],m22=te[5],m23=te[9];var m31=te[2],m32=te[6],m33=te[10];order=order||this._order;if(order==='XYZ'){this._y=Math.asin(clamp(m13,-1,1));if(Math.abs(m13)<0.9999999){this._x=Math.atan2(-m23,m33);this._z=Math.atan2(-m12,m11);}else {this._x=Math.atan2(m32,m22);this._z=0;}}else if(order==='YXZ'){this._x=Math.asin(-clamp(m23,-1,1));if(Math.abs(m23)<0.9999999){this._y=Math.atan2(m13,m33);this._z=Math.atan2(m21,m22);}else {this._y=Math.atan2(-m31,m11);this._z=0;}}else if(order==='ZXY'){this._x=Math.asin(clamp(m32,-1,1));if(Math.abs(m32)<0.9999999){this._y=Math.atan2(-m31,m33);this._z=Math.atan2(-m12,m22);}else {this._y=0;this._z=Math.atan2(m21,m11);}}else if(order==='ZYX'){this._y=Math.asin(-clamp(m31,-1,1));if(Math.abs(m31)<0.9999999){this._x=Math.atan2(m32,m33);this._z=Math.atan2(m21,m11);}else {this._x=0;this._z=Math.atan2(-m12,m22);}}else if(order==='YZX'){this._z=Math.asin(clamp(m21,-1,1));if(Math.abs(m21)<0.9999999){this._x=Math.atan2(-m23,m22);this._y=Math.atan2(-m31,m11);}else {this._x=0;this._y=Math.atan2(m13,m33);}}else if(order==='XZY'){this._z=Math.asin(-clamp(m12,-1,1));if(Math.abs(m12)<0.9999999){this._x=Math.atan2(m32,m22);this._y=Math.atan2(m13,m11);}else {this._x=Math.atan2(-m23,m33);this._y=0;}}else {console.warn('THREE.Euler: .setFromRotationMatrix() given unsupported order: '+order);}this._order=order;if(update!==false)this._onChangeCallback();return this;},setFromQuaternion:function setFromQuaternion(q,order,update){_matrix.makeRotationFromQuaternion(q);return this.setFromRotationMatrix(_matrix,order,update);},setFromVector3:function setFromVector3(v,order){return this.set(v.x,v.y,v.z,order||this._order);},reorder:function reorder(newOrder){// WARNING: this discards revolution information -bhouston
_quaternion$1.setFromEuler(this);return this.setFromQuaternion(_quaternion$1,newOrder);},equals:function equals(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order;},fromArray:function fromArray(array){this._x=array[0];this._y=array[1];this._z=array[2];if(array[3]!==undefined)this._order=array[3];this._onChangeCallback();return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._order;return array;},toVector3:function toVector3(optionalResult){if(optionalResult){return optionalResult.set(this._x,this._y,this._z);}else {return new Vector3(this._x,this._y,this._z);}},_onChange:function _onChange(callback){this._onChangeCallback=callback;return this;},_onChangeCallback:function _onChangeCallback(){}});/**
 * @author mrdoob / http://mrdoob.com/
 */function Layers(){this.mask=1|0;}Object.assign(Layers.prototype,{set:function set(channel){this.mask=1<<channel|0;},enable:function enable(channel){this.mask|=1<<channel|0;},enableAll:function enableAll(){this.mask=0xffffffff|0;},toggle:function toggle(channel){this.mask^=1<<channel|0;},disable:function disable(channel){this.mask&=~(1<<channel|0);},disableAll:function disableAll(){this.mask=0;},test:function test(layers){return (this.mask&layers.mask)!==0;}});var _object3DId=0;var _v1$1=new Vector3();var _q1=new Quaternion();var _m1$1=new Matrix4();var _target=new Vector3();var _position=new Vector3();var _scale=new Vector3();var _quaternion$2=new Quaternion();var _xAxis=new Vector3(1,0,0);var _yAxis=new Vector3(0,1,0);var _zAxis=new Vector3(0,0,1);var _addedEvent={type:'added'};var _removedEvent={type:'removed'};/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author elephantatwork / www.elephantatwork.ch
 */function Object3D(){Object.defineProperty(this,'id',{value:_object3DId++});this.uuid=MathUtils.generateUUID();this.name='';this.type='Object3D';this.parent=null;this.children=[];this.up=Object3D.DefaultUp.clone();var position=new Vector3();var rotation=new Euler();var quaternion=new Quaternion();var scale=new Vector3(1,1,1);function onRotationChange(){quaternion.setFromEuler(rotation,false);}function onQuaternionChange(){rotation.setFromQuaternion(quaternion,undefined,false);}rotation._onChange(onRotationChange);quaternion._onChange(onQuaternionChange);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:position},rotation:{configurable:true,enumerable:true,value:rotation},quaternion:{configurable:true,enumerable:true,value:quaternion},scale:{configurable:true,enumerable:true,value:scale},modelViewMatrix:{value:new Matrix4()},normalMatrix:{value:new Matrix3()}});this.matrix=new Matrix4();this.matrixWorld=new Matrix4();this.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=false;this.layers=new Layers();this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.userData={};}Object3D.DefaultUp=new Vector3(0,1,0);Object3D.DefaultMatrixAutoUpdate=true;Object3D.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Object3D,isObject3D:true,onBeforeRender:function onBeforeRender(){},onAfterRender:function onAfterRender(){},applyMatrix4:function applyMatrix4(matrix){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(matrix);this.matrix.decompose(this.position,this.quaternion,this.scale);},applyQuaternion:function applyQuaternion(q){this.quaternion.premultiply(q);return this;},setRotationFromAxisAngle:function setRotationFromAxisAngle(axis,angle){// assumes axis is normalized
this.quaternion.setFromAxisAngle(axis,angle);},setRotationFromEuler:function setRotationFromEuler(euler){this.quaternion.setFromEuler(euler,true);},setRotationFromMatrix:function setRotationFromMatrix(m){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
this.quaternion.setFromRotationMatrix(m);},setRotationFromQuaternion:function setRotationFromQuaternion(q){// assumes q is normalized
this.quaternion.copy(q);},rotateOnAxis:function rotateOnAxis(axis,angle){// rotate object on axis in object space
// axis is assumed to be normalized
_q1.setFromAxisAngle(axis,angle);this.quaternion.multiply(_q1);return this;},rotateOnWorldAxis:function rotateOnWorldAxis(axis,angle){// rotate object on axis in world space
// axis is assumed to be normalized
// method assumes no rotated parent
_q1.setFromAxisAngle(axis,angle);this.quaternion.premultiply(_q1);return this;},rotateX:function rotateX(angle){return this.rotateOnAxis(_xAxis,angle);},rotateY:function rotateY(angle){return this.rotateOnAxis(_yAxis,angle);},rotateZ:function rotateZ(angle){return this.rotateOnAxis(_zAxis,angle);},translateOnAxis:function translateOnAxis(axis,distance){// translate object by distance along axis in object space
// axis is assumed to be normalized
_v1$1.copy(axis).applyQuaternion(this.quaternion);this.position.add(_v1$1.multiplyScalar(distance));return this;},translateX:function translateX(distance){return this.translateOnAxis(_xAxis,distance);},translateY:function translateY(distance){return this.translateOnAxis(_yAxis,distance);},translateZ:function translateZ(distance){return this.translateOnAxis(_zAxis,distance);},localToWorld:function localToWorld(vector){return vector.applyMatrix4(this.matrixWorld);},worldToLocal:function worldToLocal(vector){return vector.applyMatrix4(_m1$1.getInverse(this.matrixWorld));},lookAt:function lookAt(x,y,z){// This method does not support objects having non-uniformly-scaled parent(s)
if(x.isVector3){_target.copy(x);}else {_target.set(x,y,z);}var parent=this.parent;this.updateWorldMatrix(true,false);_position.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$1.lookAt(_position,_target,this.up);}else {_m1$1.lookAt(_target,_position,this.up);}this.quaternion.setFromRotationMatrix(_m1$1);if(parent){_m1$1.extractRotation(parent.matrixWorld);_q1.setFromRotationMatrix(_m1$1);this.quaternion.premultiply(_q1.inverse());}},add:function add(object){if(arguments.length>1){for(var i=0;i<arguments.length;i++){this.add(arguments[i]);}return this;}if(object===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",object);return this;}if(object&&object.isObject3D){if(object.parent!==null){object.parent.remove(object);}object.parent=this;this.children.push(object);object.dispatchEvent(_addedEvent);}else {console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object);}return this;},remove:function remove(object){if(arguments.length>1){for(var i=0;i<arguments.length;i++){this.remove(arguments[i]);}return this;}var index=this.children.indexOf(object);if(index!==-1){object.parent=null;this.children.splice(index,1);object.dispatchEvent(_removedEvent);}return this;},attach:function attach(object){// adds object as a child of this, while maintaining the object's world transform
this.updateWorldMatrix(true,false);_m1$1.getInverse(this.matrixWorld);if(object.parent!==null){object.parent.updateWorldMatrix(true,false);_m1$1.multiply(object.parent.matrixWorld);}object.applyMatrix4(_m1$1);object.updateWorldMatrix(false,false);this.add(object);return this;},getObjectById:function getObjectById(id){return this.getObjectByProperty('id',id);},getObjectByName:function getObjectByName(name){return this.getObjectByProperty('name',name);},getObjectByProperty:function getObjectByProperty(name,value){if(this[name]===value)return this;for(var i=0,l=this.children.length;i<l;i++){var child=this.children[i];var object=child.getObjectByProperty(name,value);if(object!==undefined){return object;}}return undefined;},getWorldPosition:function getWorldPosition(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldPosition() target is now required');target=new Vector3();}this.updateMatrixWorld(true);return target.setFromMatrixPosition(this.matrixWorld);},getWorldQuaternion:function getWorldQuaternion(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldQuaternion() target is now required');target=new Quaternion();}this.updateMatrixWorld(true);this.matrixWorld.decompose(_position,target,_scale);return target;},getWorldScale:function getWorldScale(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldScale() target is now required');target=new Vector3();}this.updateMatrixWorld(true);this.matrixWorld.decompose(_position,_quaternion$2,target);return target;},getWorldDirection:function getWorldDirection(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldDirection() target is now required');target=new Vector3();}this.updateMatrixWorld(true);var e=this.matrixWorld.elements;return target.set(e[8],e[9],e[10]).normalize();},raycast:function raycast(){},traverse:function traverse(callback){callback(this);var children=this.children;for(var i=0,l=children.length;i<l;i++){children[i].traverse(callback);}},traverseVisible:function traverseVisible(callback){if(this.visible===false)return;callback(this);var children=this.children;for(var i=0,l=children.length;i<l;i++){children[i].traverseVisible(callback);}},traverseAncestors:function traverseAncestors(callback){var parent=this.parent;if(parent!==null){callback(parent);parent.traverseAncestors(callback);}},updateMatrix:function updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true;},updateMatrixWorld:function updateMatrixWorld(force){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||force){if(this.parent===null){this.matrixWorld.copy(this.matrix);}else {this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}this.matrixWorldNeedsUpdate=false;force=true;}// update children
var children=this.children;for(var i=0,l=children.length;i<l;i++){children[i].updateMatrixWorld(force);}},updateWorldMatrix:function updateWorldMatrix(updateParents,updateChildren){var parent=this.parent;if(updateParents===true&&parent!==null){parent.updateWorldMatrix(true,false);}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix);}else {this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}// update children
if(updateChildren===true){var children=this.children;for(var i=0,l=children.length;i<l;i++){children[i].updateWorldMatrix(false,true);}}},toJSON:function toJSON(meta){// meta is a string when called from JSON.stringify
var isRootObject=meta===undefined||typeof meta==='string';var output={};// meta is a hash used to collect geometries, materials.
// not providing it implies that this is the root object
// being serialized.
if(isRootObject){// initialize meta obj
meta={geometries:{},materials:{},textures:{},images:{},shapes:{}};output.metadata={version:4.5,type:'Object',generator:'Object3D.toJSON'};}// standard Object3D serialization
var object={};object.uuid=this.uuid;object.type=this.type;if(this.name!=='')object.name=this.name;if(this.castShadow===true)object.castShadow=true;if(this.receiveShadow===true)object.receiveShadow=true;if(this.visible===false)object.visible=false;if(this.frustumCulled===false)object.frustumCulled=false;if(this.renderOrder!==0)object.renderOrder=this.renderOrder;if(JSON.stringify(this.userData)!=='{}')object.userData=this.userData;object.layers=this.layers.mask;object.matrix=this.matrix.toArray();if(this.matrixAutoUpdate===false)object.matrixAutoUpdate=false;// object specific properties
if(this.isInstancedMesh){object.type='InstancedMesh';object.count=this.count;object.instanceMatrix=this.instanceMatrix.toJSON();}//
function serialize(library,element){if(library[element.uuid]===undefined){library[element.uuid]=element.toJSON(meta);}return element.uuid;}if(this.isMesh||this.isLine||this.isPoints){object.geometry=serialize(meta.geometries,this.geometry);var parameters=this.geometry.parameters;if(parameters!==undefined&&parameters.shapes!==undefined){var shapes=parameters.shapes;if(Array.isArray(shapes)){for(var i=0,l=shapes.length;i<l;i++){var shape=shapes[i];serialize(meta.shapes,shape);}}else {serialize(meta.shapes,shapes);}}}if(this.material!==undefined){if(Array.isArray(this.material)){var uuids=[];for(var i=0,l=this.material.length;i<l;i++){uuids.push(serialize(meta.materials,this.material[i]));}object.material=uuids;}else {object.material=serialize(meta.materials,this.material);}}//
if(this.children.length>0){object.children=[];for(var i=0;i<this.children.length;i++){object.children.push(this.children[i].toJSON(meta).object);}}if(isRootObject){var geometries=extractFromCache(meta.geometries);var materials=extractFromCache(meta.materials);var textures=extractFromCache(meta.textures);var images=extractFromCache(meta.images);var shapes=extractFromCache(meta.shapes);if(geometries.length>0)output.geometries=geometries;if(materials.length>0)output.materials=materials;if(textures.length>0)output.textures=textures;if(images.length>0)output.images=images;if(shapes.length>0)output.shapes=shapes;}output.object=object;return output;// extract data from the cache hash
// remove metadata on each item
// and return as array
function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata;values.push(data);}return values;}},clone:function clone(recursive){return new this.constructor().copy(this,recursive);},copy:function copy(source,recursive){if(recursive===undefined)recursive=true;this.name=source.name;this.up.copy(source.up);this.position.copy(source.position);this.quaternion.copy(source.quaternion);this.scale.copy(source.scale);this.matrix.copy(source.matrix);this.matrixWorld.copy(source.matrixWorld);this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate;this.layers.mask=source.layers.mask;this.visible=source.visible;this.castShadow=source.castShadow;this.receiveShadow=source.receiveShadow;this.frustumCulled=source.frustumCulled;this.renderOrder=source.renderOrder;this.userData=JSON.parse(JSON.stringify(source.userData));if(recursive===true){for(var i=0;i<source.children.length;i++){var child=source.children[i];this.add(child.clone());}}return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function Scene(){Object3D.call(this);this.type='Scene';this.background=null;this.environment=null;this.fog=null;this.overrideMaterial=null;this.autoUpdate=true;// checked by the renderer
if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe',{detail:this}));// eslint-disable-line no-undef
}}Scene.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Scene,isScene:true,copy:function copy(source,recursive){Object3D.prototype.copy.call(this,source,recursive);if(source.background!==null)this.background=source.background.clone();if(source.environment!==null)this.environment=source.environment.clone();if(source.fog!==null)this.fog=source.fog.clone();if(source.overrideMaterial!==null)this.overrideMaterial=source.overrideMaterial.clone();this.autoUpdate=source.autoUpdate;this.matrixAutoUpdate=source.matrixAutoUpdate;return this;},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);if(this.background!==null)data.object.background=this.background.toJSON(meta);if(this.environment!==null)data.object.environment=this.environment.toJSON(meta);if(this.fog!==null)data.object.fog=this.fog.toJSON();return data;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});var _points=[new Vector3(),new Vector3(),new Vector3(),new Vector3(),new Vector3(),new Vector3(),new Vector3(),new Vector3()];var _vector$1=new Vector3();var _box=new Box3();// triangle centered vertices
var _v0=new Vector3();var _v1$2=new Vector3();var _v2=new Vector3();// triangle edge vectors
var _f0=new Vector3();var _f1=new Vector3();var _f2=new Vector3();var _center=new Vector3();var _extents=new Vector3();var _triangleNormal=new Vector3();var _testAxis=new Vector3();/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */function Box3(min,max){this.min=min!==undefined?min:new Vector3(+Infinity,+Infinity,+Infinity);this.max=max!==undefined?max:new Vector3(-Infinity,-Infinity,-Infinity);}Object.assign(Box3.prototype,{isBox3:true,set:function set(min,max){this.min.copy(min);this.max.copy(max);return this;},setFromArray:function setFromArray(array){var minX=+Infinity;var minY=+Infinity;var minZ=+Infinity;var maxX=-Infinity;var maxY=-Infinity;var maxZ=-Infinity;for(var i=0,l=array.length;i<l;i+=3){var x=array[i];var y=array[i+1];var z=array[i+2];if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;},setFromBufferAttribute:function setFromBufferAttribute(attribute){var minX=+Infinity;var minY=+Infinity;var minZ=+Infinity;var maxX=-Infinity;var maxY=-Infinity;var maxZ=-Infinity;for(var i=0,l=attribute.count;i<l;i++){var x=attribute.getX(i);var y=attribute.getY(i);var z=attribute.getZ(i);if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;},setFromPoints:function setFromPoints(points){this.makeEmpty();for(var i=0,il=points.length;i<il;i++){this.expandByPoint(points[i]);}return this;},setFromCenterAndSize:function setFromCenterAndSize(center,size){var halfSize=_vector$1.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;},setFromObject:function setFromObject(object){this.makeEmpty();return this.expandByObject(object);},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;},makeEmpty:function makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this;},isEmpty:function isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z;},getCenter:function getCenter(target){if(target===undefined){console.warn('THREE.Box3: .getCenter() target is now required');target=new Vector3();}return this.isEmpty()?target.set(0,0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);},getSize:function getSize(target){if(target===undefined){console.warn('THREE.Box3: .getSize() target is now required');target=new Vector3();}return this.isEmpty()?target.set(0,0,0):target.subVectors(this.max,this.min);},expandByPoint:function expandByPoint(point){this.min.min(point);this.max.max(point);return this;},expandByVector:function expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;},expandByScalar:function expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;},expandByObject:function expandByObject(object){// Computes the world-axis-aligned bounding box of an object (including its children),
// accounting for both the object's, and children's, world transforms
object.updateWorldMatrix(false,false);var geometry=object.geometry;if(geometry!==undefined){if(geometry.boundingBox===null){geometry.computeBoundingBox();}_box.copy(geometry.boundingBox);_box.applyMatrix4(object.matrixWorld);this.expandByPoint(_box.min);this.expandByPoint(_box.max);}var children=object.children;for(var i=0,l=children.length;i<l;i++){this.expandByObject(children[i]);}return this;},containsPoint:function containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y||point.z<this.min.z||point.z>this.max.z?false:true;},containsBox:function containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y&&this.min.z<=box.min.z&&box.max.z<=this.max.z;},getParameter:function getParameter(point,target){// This can potentially have a divide by zero if the box
// has a size dimension of 0.
if(target===undefined){console.warn('THREE.Box3: .getParameter() target is now required');target=new Vector3();}return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y),(point.z-this.min.z)/(this.max.z-this.min.z));},intersectsBox:function intersectsBox(box){// using 6 splitting planes to rule out intersections.
return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y||box.max.z<this.min.z||box.min.z>this.max.z?false:true;},intersectsSphere:function intersectsSphere(sphere){// Find the point on the AABB closest to the sphere center.
this.clampPoint(sphere.center,_vector$1);// If that point is inside the sphere, the AABB and sphere intersect.
return _vector$1.distanceToSquared(sphere.center)<=sphere.radius*sphere.radius;},intersectsPlane:function intersectsPlane(plane){// We compute the minimum and maximum dot product values. If those values
// are on the same side (back or front) of the plane, then there is no intersection.
var min,max;if(plane.normal.x>0){min=plane.normal.x*this.min.x;max=plane.normal.x*this.max.x;}else {min=plane.normal.x*this.max.x;max=plane.normal.x*this.min.x;}if(plane.normal.y>0){min+=plane.normal.y*this.min.y;max+=plane.normal.y*this.max.y;}else {min+=plane.normal.y*this.max.y;max+=plane.normal.y*this.min.y;}if(plane.normal.z>0){min+=plane.normal.z*this.min.z;max+=plane.normal.z*this.max.z;}else {min+=plane.normal.z*this.max.z;max+=plane.normal.z*this.min.z;}return min<=-plane.constant&&max>=-plane.constant;},intersectsTriangle:function intersectsTriangle(triangle){if(this.isEmpty()){return false;}// compute box center and extents
this.getCenter(_center);_extents.subVectors(this.max,_center);// translate triangle to aabb origin
_v0.subVectors(triangle.a,_center);_v1$2.subVectors(triangle.b,_center);_v2.subVectors(triangle.c,_center);// compute edge vectors for triangle
_f0.subVectors(_v1$2,_v0);_f1.subVectors(_v2,_v1$2);_f2.subVectors(_v0,_v2);// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
var axes=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(axes,_v0,_v1$2,_v2,_extents)){return false;}// test 3 face normals from the aabb
axes=[1,0,0,0,1,0,0,0,1];if(!satForAxes(axes,_v0,_v1$2,_v2,_extents)){return false;}// finally testing the face normal of the triangle
// use already existing triangle edge vectors here
_triangleNormal.crossVectors(_f0,_f1);axes=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(axes,_v0,_v1$2,_v2,_extents);},clampPoint:function clampPoint(point,target){if(target===undefined){console.warn('THREE.Box3: .clampPoint() target is now required');target=new Vector3();}return target.copy(point).clamp(this.min,this.max);},distanceToPoint:function distanceToPoint(point){var clampedPoint=_vector$1.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();},getBoundingSphere:function getBoundingSphere(target){if(target===undefined){console.error('THREE.Box3: .getBoundingSphere() target is now required');//target = new Sphere(); // removed to avoid cyclic dependency
}this.getCenter(target.center);target.radius=this.getSize(_vector$1).length()*0.5;return target;},intersect:function intersect(box){this.min.max(box.min);this.max.min(box.max);// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
if(this.isEmpty())this.makeEmpty();return this;},union:function union(box){this.min.min(box.min);this.max.max(box.max);return this;},applyMatrix4:function applyMatrix4(matrix){// transform of empty box is an empty box.
if(this.isEmpty())return this;// NOTE: I am using a binary pattern to specify all 2^3 combinations below
_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix);// 000
_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix);// 001
_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(matrix);// 010
_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix);// 011
_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix);// 100
_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix);// 101
_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix);// 110
_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix);// 111
this.setFromPoints(_points);return this;},translate:function translate(offset){this.min.add(offset);this.max.add(offset);return this;},equals:function equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}});function satForAxes(axes,v0,v1,v2,extents){var i,j;for(i=0,j=axes.length-3;i<=j;i+=3){_testAxis.fromArray(axes,i);// project the aabb onto the seperating axis
var r=extents.x*Math.abs(_testAxis.x)+extents.y*Math.abs(_testAxis.y)+extents.z*Math.abs(_testAxis.z);// project all 3 vertices of the triangle onto the seperating axis
var p0=v0.dot(_testAxis);var p1=v1.dot(_testAxis);var p2=v2.dot(_testAxis);// actual test, basically see if either of the most extreme of the triangle points intersects r
if(Math.max(-Math.max(p0,p1,p2),Math.min(p0,p1,p2))>r){// points of the projected triangle are outside the projected half-length of the aabb
// the axis is seperating and we can exit
return false;}}return true;}var _box$1=new Box3();/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */function Sphere(center,radius){this.center=center!==undefined?center:new Vector3();this.radius=radius!==undefined?radius:0;}Object.assign(Sphere.prototype,{set:function set(center,radius){this.center.copy(center);this.radius=radius;return this;},setFromPoints:function setFromPoints(points,optionalCenter){var center=this.center;if(optionalCenter!==undefined){center.copy(optionalCenter);}else {_box$1.setFromPoints(points).getCenter(center);}var maxRadiusSq=0;for(var i=0,il=points.length;i<il;i++){maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(points[i]));}this.radius=Math.sqrt(maxRadiusSq);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(sphere){this.center.copy(sphere.center);this.radius=sphere.radius;return this;},empty:function empty(){return this.radius<=0;},containsPoint:function containsPoint(point){return point.distanceToSquared(this.center)<=this.radius*this.radius;},distanceToPoint:function distanceToPoint(point){return point.distanceTo(this.center)-this.radius;},intersectsSphere:function intersectsSphere(sphere){var radiusSum=this.radius+sphere.radius;return sphere.center.distanceToSquared(this.center)<=radiusSum*radiusSum;},intersectsBox:function intersectsBox(box){return box.intersectsSphere(this);},intersectsPlane:function intersectsPlane(plane){return Math.abs(plane.distanceToPoint(this.center))<=this.radius;},clampPoint:function clampPoint(point,target){var deltaLengthSq=this.center.distanceToSquared(point);if(target===undefined){console.warn('THREE.Sphere: .clampPoint() target is now required');target=new Vector3();}target.copy(point);if(deltaLengthSq>this.radius*this.radius){target.sub(this.center).normalize();target.multiplyScalar(this.radius).add(this.center);}return target;},getBoundingBox:function getBoundingBox(target){if(target===undefined){console.warn('THREE.Sphere: .getBoundingBox() target is now required');target=new Box3();}target.set(this.center,this.center);target.expandByScalar(this.radius);return target;},applyMatrix4:function applyMatrix4(matrix){this.center.applyMatrix4(matrix);this.radius=this.radius*matrix.getMaxScaleOnAxis();return this;},translate:function translate(offset){this.center.add(offset);return this;},equals:function equals(sphere){return sphere.center.equals(this.center)&&sphere.radius===this.radius;}});var _vector$2=new Vector3();var _segCenter=new Vector3();var _segDir=new Vector3();var _diff=new Vector3();var _edge1=new Vector3();var _edge2=new Vector3();var _normal=new Vector3();/**
 * @author bhouston / http://clara.io
 */function Ray(origin,direction){this.origin=origin!==undefined?origin:new Vector3();this.direction=direction!==undefined?direction:new Vector3(0,0,-1);}Object.assign(Ray.prototype,{set:function set(origin,direction){this.origin.copy(origin);this.direction.copy(direction);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(ray){this.origin.copy(ray.origin);this.direction.copy(ray.direction);return this;},at:function at(t,target){if(target===undefined){console.warn('THREE.Ray: .at() target is now required');target=new Vector3();}return target.copy(this.direction).multiplyScalar(t).add(this.origin);},lookAt:function lookAt(v){this.direction.copy(v).sub(this.origin).normalize();return this;},recast:function recast(t){this.origin.copy(this.at(t,_vector$2));return this;},closestPointToPoint:function closestPointToPoint(point,target){if(target===undefined){console.warn('THREE.Ray: .closestPointToPoint() target is now required');target=new Vector3();}target.subVectors(point,this.origin);var directionDistance=target.dot(this.direction);if(directionDistance<0){return target.copy(this.origin);}return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);},distanceToPoint:function distanceToPoint(point){return Math.sqrt(this.distanceSqToPoint(point));},distanceSqToPoint:function distanceSqToPoint(point){var directionDistance=_vector$2.subVectors(point,this.origin).dot(this.direction);// point behind the ray
if(directionDistance<0){return this.origin.distanceToSquared(point);}_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);return _vector$2.distanceToSquared(point);},distanceSqToSegment:function distanceSqToSegment(v0,v1,optionalPointOnRay,optionalPointOnSegment){// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
// It returns the min distance between the ray and the segment
// defined by v0 and v1
// It can also set two optional targets :
// - The closest point on the ray
// - The closest point on the segment
_segCenter.copy(v0).add(v1).multiplyScalar(0.5);_segDir.copy(v1).sub(v0).normalize();_diff.copy(this.origin).sub(_segCenter);var segExtent=v0.distanceTo(v1)*0.5;var a01=-this.direction.dot(_segDir);var b0=_diff.dot(this.direction);var b1=-_diff.dot(_segDir);var c=_diff.lengthSq();var det=Math.abs(1-a01*a01);var s0,s1,sqrDist,extDet;if(det>0){// The ray and segment are not parallel.
s0=a01*b1-b0;s1=a01*b0-b1;extDet=segExtent*det;if(s0>=0){if(s1>=-extDet){if(s1<=extDet){// region 0
// Minimum at interior points of ray and segment.
var invDet=1/det;s0*=invDet;s1*=invDet;sqrDist=s0*(s0+a01*s1+2*b0)+s1*(a01*s0+s1+2*b1)+c;}else {// region 1
s1=segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else {// region 5
s1=-segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else {if(s1<=-extDet){// region 4
s0=Math.max(0,-(-a01*segExtent+b0));s1=s0>0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}else if(s1<=extDet){// region 3
s0=0;s1=Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=s1*(s1+2*b1)+c;}else {// region 2
s0=Math.max(0,-(a01*segExtent+b0));s1=s0>0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}}else {// Ray and segment are parallel.
s1=a01>0?-segExtent:segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}if(optionalPointOnRay){optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);}if(optionalPointOnSegment){optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);}return sqrDist;},intersectSphere:function intersectSphere(sphere,target){_vector$2.subVectors(sphere.center,this.origin);var tca=_vector$2.dot(this.direction);var d2=_vector$2.dot(_vector$2)-tca*tca;var radius2=sphere.radius*sphere.radius;if(d2>radius2)return null;var thc=Math.sqrt(radius2-d2);// t0 = first intersect point - entrance on front of sphere
var t0=tca-thc;// t1 = second intersect point - exit point on back of sphere
var t1=tca+thc;// test to see if both t0 and t1 are behind the ray - if so, return null
if(t0<0&&t1<0)return null;// test to see if t0 is behind the ray:
// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
// in order to always return an intersect point that is in front of the ray.
if(t0<0)return this.at(t1,target);// else t0 is in front of the ray, so return the first collision point scaled by t0
return this.at(t0,target);},intersectsSphere:function intersectsSphere(sphere){return this.distanceSqToPoint(sphere.center)<=sphere.radius*sphere.radius;},distanceToPlane:function distanceToPlane(plane){var denominator=plane.normal.dot(this.direction);if(denominator===0){// line is coplanar, return origin
if(plane.distanceToPoint(this.origin)===0){return 0;}// Null is preferable to undefined since undefined means.... it is undefined
return null;}var t=-(this.origin.dot(plane.normal)+plane.constant)/denominator;// Return if the ray never intersects the plane
return t>=0?t:null;},intersectPlane:function intersectPlane(plane,target){var t=this.distanceToPlane(plane);if(t===null){return null;}return this.at(t,target);},intersectsPlane:function intersectsPlane(plane){// check if the ray lies on the plane first
var distToPoint=plane.distanceToPoint(this.origin);if(distToPoint===0){return true;}var denominator=plane.normal.dot(this.direction);if(denominator*distToPoint<0){return true;}// ray origin is behind the plane (and is pointing behind it)
return false;},intersectBox:function intersectBox(box,target){var tmin,tmax,tymin,tymax,tzmin,tzmax;var invdirx=1/this.direction.x,invdiry=1/this.direction.y,invdirz=1/this.direction.z;var origin=this.origin;if(invdirx>=0){tmin=(box.min.x-origin.x)*invdirx;tmax=(box.max.x-origin.x)*invdirx;}else {tmin=(box.max.x-origin.x)*invdirx;tmax=(box.min.x-origin.x)*invdirx;}if(invdiry>=0){tymin=(box.min.y-origin.y)*invdiry;tymax=(box.max.y-origin.y)*invdiry;}else {tymin=(box.max.y-origin.y)*invdiry;tymax=(box.min.y-origin.y)*invdiry;}if(tmin>tymax||tymin>tmax)return null;// These lines also handle the case where tmin or tmax is NaN
// (result of 0 * Infinity). x !== x returns true if x is NaN
if(tymin>tmin||tmin!==tmin)tmin=tymin;if(tymax<tmax||tmax!==tmax)tmax=tymax;if(invdirz>=0){tzmin=(box.min.z-origin.z)*invdirz;tzmax=(box.max.z-origin.z)*invdirz;}else {tzmin=(box.max.z-origin.z)*invdirz;tzmax=(box.min.z-origin.z)*invdirz;}if(tmin>tzmax||tzmin>tmax)return null;if(tzmin>tmin||tmin!==tmin)tmin=tzmin;if(tzmax<tmax||tmax!==tmax)tmax=tzmax;//return point closest to the ray (positive side)
if(tmax<0)return null;return this.at(tmin>=0?tmin:tmax,target);},intersectsBox:function intersectsBox(box){return this.intersectBox(box,_vector$2)!==null;},intersectTriangle:function intersectTriangle(a,b,c,backfaceCulling,target){// Compute the offset origin, edges, and normal.
// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
_edge1.subVectors(b,a);_edge2.subVectors(c,a);_normal.crossVectors(_edge1,_edge2);// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
var DdN=this.direction.dot(_normal);var sign;if(DdN>0){if(backfaceCulling)return null;sign=1;}else if(DdN<0){sign=-1;DdN=-DdN;}else {return null;}_diff.subVectors(this.origin,a);var DdQxE2=sign*this.direction.dot(_edge2.crossVectors(_diff,_edge2));// b1 < 0, no intersection
if(DdQxE2<0){return null;}var DdE1xQ=sign*this.direction.dot(_edge1.cross(_diff));// b2 < 0, no intersection
if(DdE1xQ<0){return null;}// b1+b2 > 1, no intersection
if(DdQxE2+DdE1xQ>DdN){return null;}// Line intersects triangle, check if ray does.
var QdN=-sign*_diff.dot(_normal);// t < 0, no intersection
if(QdN<0){return null;}// Ray intersects triangle.
return this.at(QdN/DdN,target);},applyMatrix4:function applyMatrix4(matrix4){this.origin.applyMatrix4(matrix4);this.direction.transformDirection(matrix4);return this;},equals:function equals(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction);}});/**
 * @author bhouston / http://clara.io
 */var _vector1=new Vector3();var _vector2=new Vector3();var _normalMatrix=new Matrix3();function Plane(normal,constant){// normal is assumed to be normalized
this.normal=normal!==undefined?normal:new Vector3(1,0,0);this.constant=constant!==undefined?constant:0;}Object.assign(Plane.prototype,{isPlane:true,set:function set(normal,constant){this.normal.copy(normal);this.constant=constant;return this;},setComponents:function setComponents(x,y,z,w){this.normal.set(x,y,z);this.constant=w;return this;},setFromNormalAndCoplanarPoint:function setFromNormalAndCoplanarPoint(normal,point){this.normal.copy(normal);this.constant=-point.dot(this.normal);return this;},setFromCoplanarPoints:function setFromCoplanarPoints(a,b,c){var normal=_vector1.subVectors(c,b).cross(_vector2.subVectors(a,b)).normalize();// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
this.setFromNormalAndCoplanarPoint(normal,a);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(plane){this.normal.copy(plane.normal);this.constant=plane.constant;return this;},normalize:function normalize(){// Note: will lead to a divide by zero if the plane is invalid.
var inverseNormalLength=1.0/this.normal.length();this.normal.multiplyScalar(inverseNormalLength);this.constant*=inverseNormalLength;return this;},negate:function negate(){this.constant*=-1;this.normal.negate();return this;},distanceToPoint:function distanceToPoint(point){return this.normal.dot(point)+this.constant;},distanceToSphere:function distanceToSphere(sphere){return this.distanceToPoint(sphere.center)-sphere.radius;},projectPoint:function projectPoint(point,target){if(target===undefined){console.warn('THREE.Plane: .projectPoint() target is now required');target=new Vector3();}return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);},intersectLine:function intersectLine(line,target){if(target===undefined){console.warn('THREE.Plane: .intersectLine() target is now required');target=new Vector3();}var direction=line.delta(_vector1);var denominator=this.normal.dot(direction);if(denominator===0){// line is coplanar, return origin
if(this.distanceToPoint(line.start)===0){return target.copy(line.start);}// Unsure if this is the correct method to handle this case.
return undefined;}var t=-(line.start.dot(this.normal)+this.constant)/denominator;if(t<0||t>1){return undefined;}return target.copy(direction).multiplyScalar(t).add(line.start);},intersectsLine:function intersectsLine(line){// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
var startSign=this.distanceToPoint(line.start);var endSign=this.distanceToPoint(line.end);return startSign<0&&endSign>0||endSign<0&&startSign>0;},intersectsBox:function intersectsBox(box){return box.intersectsPlane(this);},intersectsSphere:function intersectsSphere(sphere){return sphere.intersectsPlane(this);},coplanarPoint:function coplanarPoint(target){if(target===undefined){console.warn('THREE.Plane: .coplanarPoint() target is now required');target=new Vector3();}return target.copy(this.normal).multiplyScalar(-this.constant);},applyMatrix4:function applyMatrix4(matrix,optionalNormalMatrix){var normalMatrix=optionalNormalMatrix||_normalMatrix.getNormalMatrix(matrix);var referencePoint=this.coplanarPoint(_vector1).applyMatrix4(matrix);var normal=this.normal.applyMatrix3(normalMatrix).normalize();this.constant=-referencePoint.dot(normal);return this;},translate:function translate(offset){this.constant-=offset.dot(this.normal);return this;},equals:function equals(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant;}});/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */var _v0$1=new Vector3();var _v1$3=new Vector3();var _v2$1=new Vector3();var _v3=new Vector3();var _vab=new Vector3();var _vac=new Vector3();var _vbc=new Vector3();var _vap=new Vector3();var _vbp=new Vector3();var _vcp=new Vector3();function Triangle(a,b,c){this.a=a!==undefined?a:new Vector3();this.b=b!==undefined?b:new Vector3();this.c=c!==undefined?c:new Vector3();}Object.assign(Triangle,{getNormal:function getNormal(a,b,c,target){if(target===undefined){console.warn('THREE.Triangle: .getNormal() target is now required');target=new Vector3();}target.subVectors(c,b);_v0$1.subVectors(a,b);target.cross(_v0$1);var targetLengthSq=target.lengthSq();if(targetLengthSq>0){return target.multiplyScalar(1/Math.sqrt(targetLengthSq));}return target.set(0,0,0);},// static/instance method to calculate barycentric coordinates
// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
getBarycoord:function getBarycoord(point,a,b,c,target){_v0$1.subVectors(c,a);_v1$3.subVectors(b,a);_v2$1.subVectors(point,a);var dot00=_v0$1.dot(_v0$1);var dot01=_v0$1.dot(_v1$3);var dot02=_v0$1.dot(_v2$1);var dot11=_v1$3.dot(_v1$3);var dot12=_v1$3.dot(_v2$1);var denom=dot00*dot11-dot01*dot01;if(target===undefined){console.warn('THREE.Triangle: .getBarycoord() target is now required');target=new Vector3();}// collinear or singular triangle
if(denom===0){// arbitrary location outside of triangle?
// not sure if this is the best idea, maybe should be returning undefined
return target.set(-2,-1,-1);}var invDenom=1/denom;var u=(dot11*dot02-dot01*dot12)*invDenom;var v=(dot00*dot12-dot01*dot02)*invDenom;// barycentric coordinates must always sum to 1
return target.set(1-u-v,v,u);},containsPoint:function containsPoint(point,a,b,c){Triangle.getBarycoord(point,a,b,c,_v3);return _v3.x>=0&&_v3.y>=0&&_v3.x+_v3.y<=1;},getUV:function getUV(point,p1,p2,p3,uv1,uv2,uv3,target){this.getBarycoord(point,p1,p2,p3,_v3);target.set(0,0);target.addScaledVector(uv1,_v3.x);target.addScaledVector(uv2,_v3.y);target.addScaledVector(uv3,_v3.z);return target;},isFrontFacing:function isFrontFacing(a,b,c,direction){_v0$1.subVectors(c,b);_v1$3.subVectors(a,b);// strictly front facing
return _v0$1.cross(_v1$3).dot(direction)<0?true:false;}});Object.assign(Triangle.prototype,{set:function set(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;},setFromPointsAndIndices:function setFromPointsAndIndices(points,i0,i1,i2){this.a.copy(points[i0]);this.b.copy(points[i1]);this.c.copy(points[i2]);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(triangle){this.a.copy(triangle.a);this.b.copy(triangle.b);this.c.copy(triangle.c);return this;},getArea:function getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*0.5;},getMidpoint:function getMidpoint(target){if(target===undefined){console.warn('THREE.Triangle: .getMidpoint() target is now required');target=new Vector3();}return target.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3);},getNormal:function getNormal(target){return Triangle.getNormal(this.a,this.b,this.c,target);},getPlane:function getPlane(target){if(target===undefined){console.warn('THREE.Triangle: .getPlane() target is now required');target=new Plane();}return target.setFromCoplanarPoints(this.a,this.b,this.c);},getBarycoord:function getBarycoord(point,target){return Triangle.getBarycoord(point,this.a,this.b,this.c,target);},getUV:function getUV(point,uv1,uv2,uv3,target){return Triangle.getUV(point,this.a,this.b,this.c,uv1,uv2,uv3,target);},containsPoint:function containsPoint(point){return Triangle.containsPoint(point,this.a,this.b,this.c);},isFrontFacing:function isFrontFacing(direction){return Triangle.isFrontFacing(this.a,this.b,this.c,direction);},intersectsBox:function intersectsBox(box){return box.intersectsTriangle(this);},closestPointToPoint:function closestPointToPoint(p,target){if(target===undefined){console.warn('THREE.Triangle: .closestPointToPoint() target is now required');target=new Vector3();}var a=this.a,b=this.b,c=this.c;var v,w;// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
// under the accompanying license; see chapter 5.1.5 for detailed explanation.
// basically, we're distinguishing which of the voronoi regions of the triangle
// the point lies in with the minimum amount of redundant computation.
_vab.subVectors(b,a);_vac.subVectors(c,a);_vap.subVectors(p,a);var d1=_vab.dot(_vap);var d2=_vac.dot(_vap);if(d1<=0&&d2<=0){// vertex region of A; barycentric coords (1, 0, 0)
return target.copy(a);}_vbp.subVectors(p,b);var d3=_vab.dot(_vbp);var d4=_vac.dot(_vbp);if(d3>=0&&d4<=d3){// vertex region of B; barycentric coords (0, 1, 0)
return target.copy(b);}var vc=d1*d4-d3*d2;if(vc<=0&&d1>=0&&d3<=0){v=d1/(d1-d3);// edge region of AB; barycentric coords (1-v, v, 0)
return target.copy(a).addScaledVector(_vab,v);}_vcp.subVectors(p,c);var d5=_vab.dot(_vcp);var d6=_vac.dot(_vcp);if(d6>=0&&d5<=d6){// vertex region of C; barycentric coords (0, 0, 1)
return target.copy(c);}var vb=d5*d2-d1*d6;if(vb<=0&&d2>=0&&d6<=0){w=d2/(d2-d6);// edge region of AC; barycentric coords (1-w, 0, w)
return target.copy(a).addScaledVector(_vac,w);}var va=d3*d6-d5*d4;if(va<=0&&d4-d3>=0&&d5-d6>=0){_vbc.subVectors(c,b);w=(d4-d3)/(d4-d3+(d5-d6));// edge region of BC; barycentric coords (0, 1-w, w)
return target.copy(b).addScaledVector(_vbc,w);// edge region of BC
}// face region
var denom=1/(va+vb+vc);// u = va * denom
v=vb*denom;w=vc*denom;return target.copy(a).addScaledVector(_vab,v).addScaledVector(_vac,w);},equals:function equals(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c);}});/**
 * @author mrdoob / http://mrdoob.com/
 */var _colorKeywords={'aliceblue':0xF0F8FF,'antiquewhite':0xFAEBD7,'aqua':0x00FFFF,'aquamarine':0x7FFFD4,'azure':0xF0FFFF,'beige':0xF5F5DC,'bisque':0xFFE4C4,'black':0x000000,'blanchedalmond':0xFFEBCD,'blue':0x0000FF,'blueviolet':0x8A2BE2,'brown':0xA52A2A,'burlywood':0xDEB887,'cadetblue':0x5F9EA0,'chartreuse':0x7FFF00,'chocolate':0xD2691E,'coral':0xFF7F50,'cornflowerblue':0x6495ED,'cornsilk':0xFFF8DC,'crimson':0xDC143C,'cyan':0x00FFFF,'darkblue':0x00008B,'darkcyan':0x008B8B,'darkgoldenrod':0xB8860B,'darkgray':0xA9A9A9,'darkgreen':0x006400,'darkgrey':0xA9A9A9,'darkkhaki':0xBDB76B,'darkmagenta':0x8B008B,'darkolivegreen':0x556B2F,'darkorange':0xFF8C00,'darkorchid':0x9932CC,'darkred':0x8B0000,'darksalmon':0xE9967A,'darkseagreen':0x8FBC8F,'darkslateblue':0x483D8B,'darkslategray':0x2F4F4F,'darkslategrey':0x2F4F4F,'darkturquoise':0x00CED1,'darkviolet':0x9400D3,'deeppink':0xFF1493,'deepskyblue':0x00BFFF,'dimgray':0x696969,'dimgrey':0x696969,'dodgerblue':0x1E90FF,'firebrick':0xB22222,'floralwhite':0xFFFAF0,'forestgreen':0x228B22,'fuchsia':0xFF00FF,'gainsboro':0xDCDCDC,'ghostwhite':0xF8F8FF,'gold':0xFFD700,'goldenrod':0xDAA520,'gray':0x808080,'green':0x008000,'greenyellow':0xADFF2F,'grey':0x808080,'honeydew':0xF0FFF0,'hotpink':0xFF69B4,'indianred':0xCD5C5C,'indigo':0x4B0082,'ivory':0xFFFFF0,'khaki':0xF0E68C,'lavender':0xE6E6FA,'lavenderblush':0xFFF0F5,'lawngreen':0x7CFC00,'lemonchiffon':0xFFFACD,'lightblue':0xADD8E6,'lightcoral':0xF08080,'lightcyan':0xE0FFFF,'lightgoldenrodyellow':0xFAFAD2,'lightgray':0xD3D3D3,'lightgreen':0x90EE90,'lightgrey':0xD3D3D3,'lightpink':0xFFB6C1,'lightsalmon':0xFFA07A,'lightseagreen':0x20B2AA,'lightskyblue':0x87CEFA,'lightslategray':0x778899,'lightslategrey':0x778899,'lightsteelblue':0xB0C4DE,'lightyellow':0xFFFFE0,'lime':0x00FF00,'limegreen':0x32CD32,'linen':0xFAF0E6,'magenta':0xFF00FF,'maroon':0x800000,'mediumaquamarine':0x66CDAA,'mediumblue':0x0000CD,'mediumorchid':0xBA55D3,'mediumpurple':0x9370DB,'mediumseagreen':0x3CB371,'mediumslateblue':0x7B68EE,'mediumspringgreen':0x00FA9A,'mediumturquoise':0x48D1CC,'mediumvioletred':0xC71585,'midnightblue':0x191970,'mintcream':0xF5FFFA,'mistyrose':0xFFE4E1,'moccasin':0xFFE4B5,'navajowhite':0xFFDEAD,'navy':0x000080,'oldlace':0xFDF5E6,'olive':0x808000,'olivedrab':0x6B8E23,'orange':0xFFA500,'orangered':0xFF4500,'orchid':0xDA70D6,'palegoldenrod':0xEEE8AA,'palegreen':0x98FB98,'paleturquoise':0xAFEEEE,'palevioletred':0xDB7093,'papayawhip':0xFFEFD5,'peachpuff':0xFFDAB9,'peru':0xCD853F,'pink':0xFFC0CB,'plum':0xDDA0DD,'powderblue':0xB0E0E6,'purple':0x800080,'rebeccapurple':0x663399,'red':0xFF0000,'rosybrown':0xBC8F8F,'royalblue':0x4169E1,'saddlebrown':0x8B4513,'salmon':0xFA8072,'sandybrown':0xF4A460,'seagreen':0x2E8B57,'seashell':0xFFF5EE,'sienna':0xA0522D,'silver':0xC0C0C0,'skyblue':0x87CEEB,'slateblue':0x6A5ACD,'slategray':0x708090,'slategrey':0x708090,'snow':0xFFFAFA,'springgreen':0x00FF7F,'steelblue':0x4682B4,'tan':0xD2B48C,'teal':0x008080,'thistle':0xD8BFD8,'tomato':0xFF6347,'turquoise':0x40E0D0,'violet':0xEE82EE,'wheat':0xF5DEB3,'white':0xFFFFFF,'whitesmoke':0xF5F5F5,'yellow':0xFFFF00,'yellowgreen':0x9ACD32};var _hslA={h:0,s:0,l:0};var _hslB={h:0,s:0,l:0};function Color(r,g,b){if(g===undefined&&b===undefined){// r is THREE.Color, hex or string
return this.set(r);}return this.setRGB(r,g,b);}function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*6*(2/3-t);return p;}function SRGBToLinear(c){return c<0.04045?c*0.0773993808:Math.pow(c*0.9478672986+0.0521327014,2.4);}function LinearToSRGB(c){return c<0.0031308?c*12.92:1.055*Math.pow(c,0.41666)-0.055;}Object.assign(Color.prototype,{isColor:true,r:1,g:1,b:1,set:function set(value){if(value&&value.isColor){this.copy(value);}else if(typeof value==='number'){this.setHex(value);}else if(typeof value==='string'){this.setStyle(value);}return this;},setScalar:function setScalar(scalar){this.r=scalar;this.g=scalar;this.b=scalar;return this;},setHex:function setHex(hex){hex=Math.floor(hex);this.r=(hex>>16&255)/255;this.g=(hex>>8&255)/255;this.b=(hex&255)/255;return this;},setRGB:function setRGB(r,g,b){this.r=r;this.g=g;this.b=b;return this;},setHSL:function setHSL(h,s,l){// h,s,l ranges are in 0.0 - 1.0
h=MathUtils.euclideanModulo(h,1);s=MathUtils.clamp(s,0,1);l=MathUtils.clamp(l,0,1);if(s===0){this.r=this.g=this.b=l;}else {var p=l<=0.5?l*(1+s):l+s-l*s;var q=2*l-p;this.r=hue2rgb(q,p,h+1/3);this.g=hue2rgb(q,p,h);this.b=hue2rgb(q,p,h-1/3);}return this;},setStyle:function setStyle(style){function handleAlpha(string){if(string===undefined)return;if(parseFloat(string)<1){console.warn('THREE.Color: Alpha component of '+style+' will be ignored.');}}var m;if(m=/^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style)){// rgb / hsl
var color;var name=m[1];var components=m[2];switch(name){case'rgb':case'rgba':if(color=/^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)){// rgb(255,0,0) rgba(255,0,0,0.5)
this.r=Math.min(255,parseInt(color[1],10))/255;this.g=Math.min(255,parseInt(color[2],10))/255;this.b=Math.min(255,parseInt(color[3],10))/255;handleAlpha(color[5]);return this;}if(color=/^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)){// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
this.r=Math.min(100,parseInt(color[1],10))/100;this.g=Math.min(100,parseInt(color[2],10))/100;this.b=Math.min(100,parseInt(color[3],10))/100;handleAlpha(color[5]);return this;}break;case'hsl':case'hsla':if(color=/^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)){// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
var h=parseFloat(color[1])/360;var s=parseInt(color[2],10)/100;var l=parseInt(color[3],10)/100;handleAlpha(color[5]);return this.setHSL(h,s,l);}break;}}else if(m=/^\\#([A-Fa-f0-9]+)$/.exec(style)){// hex color
var hex=m[1];var size=hex.length;if(size===3){// #ff0
this.r=parseInt(hex.charAt(0)+hex.charAt(0),16)/255;this.g=parseInt(hex.charAt(1)+hex.charAt(1),16)/255;this.b=parseInt(hex.charAt(2)+hex.charAt(2),16)/255;return this;}else if(size===6){// #ff0000
this.r=parseInt(hex.charAt(0)+hex.charAt(1),16)/255;this.g=parseInt(hex.charAt(2)+hex.charAt(3),16)/255;this.b=parseInt(hex.charAt(4)+hex.charAt(5),16)/255;return this;}}if(style&&style.length>0){return this.setColorName(style);}return this;},setColorName:function setColorName(style){// color keywords
var hex=_colorKeywords[style];if(hex!==undefined){// red
this.setHex(hex);}else {// unknown color
console.warn('THREE.Color: Unknown color '+style);}return this;},clone:function clone(){return new this.constructor(this.r,this.g,this.b);},copy:function copy(color){this.r=color.r;this.g=color.g;this.b=color.b;return this;},copyGammaToLinear:function copyGammaToLinear(color,gammaFactor){if(gammaFactor===undefined)gammaFactor=2.0;this.r=Math.pow(color.r,gammaFactor);this.g=Math.pow(color.g,gammaFactor);this.b=Math.pow(color.b,gammaFactor);return this;},copyLinearToGamma:function copyLinearToGamma(color,gammaFactor){if(gammaFactor===undefined)gammaFactor=2.0;var safeInverse=gammaFactor>0?1.0/gammaFactor:1.0;this.r=Math.pow(color.r,safeInverse);this.g=Math.pow(color.g,safeInverse);this.b=Math.pow(color.b,safeInverse);return this;},convertGammaToLinear:function convertGammaToLinear(gammaFactor){this.copyGammaToLinear(this,gammaFactor);return this;},convertLinearToGamma:function convertLinearToGamma(gammaFactor){this.copyLinearToGamma(this,gammaFactor);return this;},copySRGBToLinear:function copySRGBToLinear(color){this.r=SRGBToLinear(color.r);this.g=SRGBToLinear(color.g);this.b=SRGBToLinear(color.b);return this;},copyLinearToSRGB:function copyLinearToSRGB(color){this.r=LinearToSRGB(color.r);this.g=LinearToSRGB(color.g);this.b=LinearToSRGB(color.b);return this;},convertSRGBToLinear:function convertSRGBToLinear(){this.copySRGBToLinear(this);return this;},convertLinearToSRGB:function convertLinearToSRGB(){this.copyLinearToSRGB(this);return this;},getHex:function getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0;},getHexString:function getHexString(){return ('000000'+this.getHex().toString(16)).slice(-6);},getHSL:function getHSL(target){// h,s,l ranges are in 0.0 - 1.0
if(target===undefined){console.warn('THREE.Color: .getHSL() target is now required');target={h:0,s:0,l:0};}var r=this.r,g=this.g,b=this.b;var max=Math.max(r,g,b);var min=Math.min(r,g,b);var hue,saturation;var lightness=(min+max)/2.0;if(min===max){hue=0;saturation=0;}else {var delta=max-min;saturation=lightness<=0.5?delta/(max+min):delta/(2-max-min);switch(max){case r:hue=(g-b)/delta+(g<b?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4;break;}hue/=6;}target.h=hue;target.s=saturation;target.l=lightness;return target;},getStyle:function getStyle(){return 'rgb('+(this.r*255|0)+','+(this.g*255|0)+','+(this.b*255|0)+')';},offsetHSL:function offsetHSL(h,s,l){this.getHSL(_hslA);_hslA.h+=h;_hslA.s+=s;_hslA.l+=l;this.setHSL(_hslA.h,_hslA.s,_hslA.l);return this;},add:function add(color){this.r+=color.r;this.g+=color.g;this.b+=color.b;return this;},addColors:function addColors(color1,color2){this.r=color1.r+color2.r;this.g=color1.g+color2.g;this.b=color1.b+color2.b;return this;},addScalar:function addScalar(s){this.r+=s;this.g+=s;this.b+=s;return this;},sub:function sub(color){this.r=Math.max(0,this.r-color.r);this.g=Math.max(0,this.g-color.g);this.b=Math.max(0,this.b-color.b);return this;},multiply:function multiply(color){this.r*=color.r;this.g*=color.g;this.b*=color.b;return this;},multiplyScalar:function multiplyScalar(s){this.r*=s;this.g*=s;this.b*=s;return this;},lerp:function lerp(color,alpha){this.r+=(color.r-this.r)*alpha;this.g+=(color.g-this.g)*alpha;this.b+=(color.b-this.b)*alpha;return this;},lerpHSL:function lerpHSL(color,alpha){this.getHSL(_hslA);color.getHSL(_hslB);var h=MathUtils.lerp(_hslA.h,_hslB.h,alpha);var s=MathUtils.lerp(_hslA.s,_hslB.s,alpha);var l=MathUtils.lerp(_hslA.l,_hslB.l,alpha);this.setHSL(h,s,l);return this;},equals:function equals(c){return c.r===this.r&&c.g===this.g&&c.b===this.b;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this.r=array[offset];this.g=array[offset+1];this.b=array[offset+2];return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.r;array[offset+1]=this.g;array[offset+2]=this.b;return array;},toJSON:function toJSON(){return this.getHex();}});Color.NAMES=_colorKeywords;/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */function Face3(a,b,c,normal,color,materialIndex){this.a=a;this.b=b;this.c=c;this.normal=normal&&normal.isVector3?normal:new Vector3();this.vertexNormals=Array.isArray(normal)?normal:[];this.color=color&&color.isColor?color:new Color();this.vertexColors=Array.isArray(color)?color:[];this.materialIndex=materialIndex!==undefined?materialIndex:0;}Object.assign(Face3.prototype,{clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.a=source.a;this.b=source.b;this.c=source.c;this.normal.copy(source.normal);this.color.copy(source.color);this.materialIndex=source.materialIndex;for(var i=0,il=source.vertexNormals.length;i<il;i++){this.vertexNormals[i]=source.vertexNormals[i].clone();}for(var i=0,il=source.vertexColors.length;i<il;i++){this.vertexColors[i]=source.vertexColors[i].clone();}return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */var materialId=0;function Material(){Object.defineProperty(this,'id',{value:materialId++});this.uuid=MathUtils.generateUUID();this.name='';this.type='Material';this.fog=true;this.blending=NormalBlending;this.side=FrontSide;this.flatShading=false;this.vertexTangents=false;this.vertexColors=NoColors;// THREE.NoColors, THREE.VertexColors, THREE.FaceColors
this.opacity=1;this.transparent=false;this.blendSrc=SrcAlphaFactor;this.blendDst=OneMinusSrcAlphaFactor;this.blendEquation=AddEquation;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.depthFunc=LessEqualDepth;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=0xff;this.stencilFunc=AlwaysStencilFunc;this.stencilRef=0;this.stencilFuncMask=0xff;this.stencilFail=KeepStencilOp;this.stencilZFail=KeepStencilOp;this.stencilZPass=KeepStencilOp;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;// override the renderer's default precision for this material
this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaTest=0;this.premultipliedAlpha=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;}Material.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Material,isMaterial:true,onBeforeCompile:function onBeforeCompile(){},setValues:function setValues(values){if(values===undefined)return;for(var key in values){var newValue=values[key];if(newValue===undefined){console.warn("THREE.Material: '"+key+"' parameter is undefined.");continue;}// for backward compatability if shading is set in the constructor
if(key==='shading'){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=newValue===FlatShading?true:false;continue;}var currentValue=this[key];if(currentValue===undefined){console.warn("THREE."+this.type+": '"+key+"' is not a property of this material.");continue;}if(currentValue&&currentValue.isColor){currentValue.set(newValue);}else if(currentValue&&currentValue.isVector3&&newValue&&newValue.isVector3){currentValue.copy(newValue);}else {this[key]=newValue;}}},toJSON:function toJSON(meta){var isRoot=meta===undefined||typeof meta==='string';if(isRoot){meta={textures:{},images:{}};}var data={metadata:{version:4.5,type:'Material',generator:'Material.toJSON'}};// standard Material serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.color&&this.color.isColor)data.color=this.color.getHex();if(this.roughness!==undefined)data.roughness=this.roughness;if(this.metalness!==undefined)data.metalness=this.metalness;if(this.sheen&&this.sheen.isColor)data.sheen=this.sheen.getHex();if(this.emissive&&this.emissive.isColor)data.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)data.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)data.specular=this.specular.getHex();if(this.shininess!==undefined)data.shininess=this.shininess;if(this.clearcoat!==undefined)data.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)data.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){data.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(meta).uuid;data.clearcoatNormalScale=this.clearcoatNormalScale.toArray();}if(this.map&&this.map.isTexture)data.map=this.map.toJSON(meta).uuid;if(this.matcap&&this.matcap.isTexture)data.matcap=this.matcap.toJSON(meta).uuid;if(this.alphaMap&&this.alphaMap.isTexture)data.alphaMap=this.alphaMap.toJSON(meta).uuid;if(this.lightMap&&this.lightMap.isTexture)data.lightMap=this.lightMap.toJSON(meta).uuid;if(this.aoMap&&this.aoMap.isTexture){data.aoMap=this.aoMap.toJSON(meta).uuid;data.aoMapIntensity=this.aoMapIntensity;}if(this.bumpMap&&this.bumpMap.isTexture){data.bumpMap=this.bumpMap.toJSON(meta).uuid;data.bumpScale=this.bumpScale;}if(this.normalMap&&this.normalMap.isTexture){data.normalMap=this.normalMap.toJSON(meta).uuid;data.normalMapType=this.normalMapType;data.normalScale=this.normalScale.toArray();}if(this.displacementMap&&this.displacementMap.isTexture){data.displacementMap=this.displacementMap.toJSON(meta).uuid;data.displacementScale=this.displacementScale;data.displacementBias=this.displacementBias;}if(this.roughnessMap&&this.roughnessMap.isTexture)data.roughnessMap=this.roughnessMap.toJSON(meta).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)data.metalnessMap=this.metalnessMap.toJSON(meta).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)data.emissiveMap=this.emissiveMap.toJSON(meta).uuid;if(this.specularMap&&this.specularMap.isTexture)data.specularMap=this.specularMap.toJSON(meta).uuid;if(this.envMap&&this.envMap.isTexture){data.envMap=this.envMap.toJSON(meta).uuid;data.reflectivity=this.reflectivity;// Scale behind envMap
data.refractionRatio=this.refractionRatio;if(this.combine!==undefined)data.combine=this.combine;if(this.envMapIntensity!==undefined)data.envMapIntensity=this.envMapIntensity;}if(this.gradientMap&&this.gradientMap.isTexture){data.gradientMap=this.gradientMap.toJSON(meta).uuid;}if(this.size!==undefined)data.size=this.size;if(this.sizeAttenuation!==undefined)data.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)data.blending=this.blending;if(this.flatShading===true)data.flatShading=this.flatShading;if(this.side!==FrontSide)data.side=this.side;if(this.vertexColors!==NoColors)data.vertexColors=this.vertexColors;if(this.opacity<1)data.opacity=this.opacity;if(this.transparent===true)data.transparent=this.transparent;data.depthFunc=this.depthFunc;data.depthTest=this.depthTest;data.depthWrite=this.depthWrite;data.stencilWrite=this.stencilWrite;data.stencilWriteMask=this.stencilWriteMask;data.stencilFunc=this.stencilFunc;data.stencilRef=this.stencilRef;data.stencilFuncMask=this.stencilFuncMask;data.stencilFail=this.stencilFail;data.stencilZFail=this.stencilZFail;data.stencilZPass=this.stencilZPass;// rotation (SpriteMaterial)
if(this.rotation&&this.rotation!==0)data.rotation=this.rotation;if(this.polygonOffset===true)data.polygonOffset=true;if(this.polygonOffsetFactor!==0)data.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)data.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth&&this.linewidth!==1)data.linewidth=this.linewidth;if(this.dashSize!==undefined)data.dashSize=this.dashSize;if(this.gapSize!==undefined)data.gapSize=this.gapSize;if(this.scale!==undefined)data.scale=this.scale;if(this.dithering===true)data.dithering=true;if(this.alphaTest>0)data.alphaTest=this.alphaTest;if(this.premultipliedAlpha===true)data.premultipliedAlpha=this.premultipliedAlpha;if(this.wireframe===true)data.wireframe=this.wireframe;if(this.wireframeLinewidth>1)data.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=='round')data.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=='round')data.wireframeLinejoin=this.wireframeLinejoin;if(this.morphTargets===true)data.morphTargets=true;if(this.morphNormals===true)data.morphNormals=true;if(this.skinning===true)data.skinning=true;if(this.visible===false)data.visible=false;if(this.toneMapped===false)data.toneMapped=false;if(JSON.stringify(this.userData)!=='{}')data.userData=this.userData;// TODO: Copied from Object3D.toJSON
function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata;values.push(data);}return values;}if(isRoot){var textures=extractFromCache(meta.textures);var images=extractFromCache(meta.images);if(textures.length>0)data.textures=textures;if(images.length>0)data.images=images;}return data;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.name=source.name;this.fog=source.fog;this.blending=source.blending;this.side=source.side;this.flatShading=source.flatShading;this.vertexTangents=source.vertexTangents;this.vertexColors=source.vertexColors;this.opacity=source.opacity;this.transparent=source.transparent;this.blendSrc=source.blendSrc;this.blendDst=source.blendDst;this.blendEquation=source.blendEquation;this.blendSrcAlpha=source.blendSrcAlpha;this.blendDstAlpha=source.blendDstAlpha;this.blendEquationAlpha=source.blendEquationAlpha;this.depthFunc=source.depthFunc;this.depthTest=source.depthTest;this.depthWrite=source.depthWrite;this.stencilWriteMask=source.stencilWriteMask;this.stencilFunc=source.stencilFunc;this.stencilRef=source.stencilRef;this.stencilFuncMask=source.stencilFuncMask;this.stencilFail=source.stencilFail;this.stencilZFail=source.stencilZFail;this.stencilZPass=source.stencilZPass;this.stencilWrite=source.stencilWrite;var srcPlanes=source.clippingPlanes,dstPlanes=null;if(srcPlanes!==null){var n=srcPlanes.length;dstPlanes=new Array(n);for(var i=0;i!==n;++i)dstPlanes[i]=srcPlanes[i].clone();}this.clippingPlanes=dstPlanes;this.clipIntersection=source.clipIntersection;this.clipShadows=source.clipShadows;this.shadowSide=source.shadowSide;this.colorWrite=source.colorWrite;this.precision=source.precision;this.polygonOffset=source.polygonOffset;this.polygonOffsetFactor=source.polygonOffsetFactor;this.polygonOffsetUnits=source.polygonOffsetUnits;this.dithering=source.dithering;this.alphaTest=source.alphaTest;this.premultipliedAlpha=source.premultipliedAlpha;this.visible=source.visible;this.toneMapped=source.toneMapped;this.userData=JSON.parse(JSON.stringify(source.userData));return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});Object.defineProperty(Material.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>
 * }
 */function MeshBasicMaterial(parameters){Material.call(this);this.type='MeshBasicMaterial';this.color=new Color(0xffffff);// emissive
this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.setValues(parameters);}MeshBasicMaterial.prototype=Object.create(Material.prototype);MeshBasicMaterial.prototype.constructor=MeshBasicMaterial;MeshBasicMaterial.prototype.isMeshBasicMaterial=true;MeshBasicMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;return this;};/**
 * @author mrdoob / http://mrdoob.com/
 */var _vector$3=new Vector3();function BufferAttribute(array,itemSize,normalized){if(Array.isArray(array)){throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');}this.name='';this.array=array;this.itemSize=itemSize;this.count=array!==undefined?array.length/itemSize:0;this.normalized=normalized===true;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;}Object.defineProperty(BufferAttribute.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});Object.assign(BufferAttribute.prototype,{isBufferAttribute:true,onUploadCallback:function onUploadCallback(){},setUsage:function setUsage(value){this.usage=value;return this;},copy:function copy(source){this.name=source.name;this.array=new source.array.constructor(source.array);this.itemSize=source.itemSize;this.count=source.count;this.normalized=source.normalized;this.usage=source.usage;return this;},copyAt:function copyAt(index1,attribute,index2){index1*=this.itemSize;index2*=attribute.itemSize;for(var i=0,l=this.itemSize;i<l;i++){this.array[index1+i]=attribute.array[index2+i];}return this;},copyArray:function copyArray(array){this.array.set(array);return this;},copyColorsArray:function copyColorsArray(colors){var array=this.array,offset=0;for(var i=0,l=colors.length;i<l;i++){var color=colors[i];if(color===undefined){console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined',i);color=new Color();}array[offset++]=color.r;array[offset++]=color.g;array[offset++]=color.b;}return this;},copyVector2sArray:function copyVector2sArray(vectors){var array=this.array,offset=0;for(var i=0,l=vectors.length;i<l;i++){var vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined',i);vector=new Vector2();}array[offset++]=vector.x;array[offset++]=vector.y;}return this;},copyVector3sArray:function copyVector3sArray(vectors){var array=this.array,offset=0;for(var i=0,l=vectors.length;i<l;i++){var vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined',i);vector=new Vector3();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;}return this;},copyVector4sArray:function copyVector4sArray(vectors){var array=this.array,offset=0;for(var i=0,l=vectors.length;i<l;i++){var vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined',i);vector=new Vector4();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;array[offset++]=vector.w;}return this;},applyMatrix3:function applyMatrix3(m){for(var i=0,l=this.count;i<l;i++){_vector$3.x=this.getX(i);_vector$3.y=this.getY(i);_vector$3.z=this.getZ(i);_vector$3.applyMatrix3(m);this.setXYZ(i,_vector$3.x,_vector$3.y,_vector$3.z);}return this;},applyMatrix4:function applyMatrix4(m){for(var i=0,l=this.count;i<l;i++){_vector$3.x=this.getX(i);_vector$3.y=this.getY(i);_vector$3.z=this.getZ(i);_vector$3.applyMatrix4(m);this.setXYZ(i,_vector$3.x,_vector$3.y,_vector$3.z);}return this;},applyNormalMatrix:function applyNormalMatrix(m){for(var i=0,l=this.count;i<l;i++){_vector$3.x=this.getX(i);_vector$3.y=this.getY(i);_vector$3.z=this.getZ(i);_vector$3.applyNormalMatrix(m);this.setXYZ(i,_vector$3.x,_vector$3.y,_vector$3.z);}return this;},transformDirection:function transformDirection(m){for(var i=0,l=this.count;i<l;i++){_vector$3.x=this.getX(i);_vector$3.y=this.getY(i);_vector$3.z=this.getZ(i);_vector$3.transformDirection(m);this.setXYZ(i,_vector$3.x,_vector$3.y,_vector$3.z);}return this;},set:function set(value,offset){if(offset===undefined)offset=0;this.array.set(value,offset);return this;},getX:function getX(index){return this.array[index*this.itemSize];},setX:function setX(index,x){this.array[index*this.itemSize]=x;return this;},getY:function getY(index){return this.array[index*this.itemSize+1];},setY:function setY(index,y){this.array[index*this.itemSize+1]=y;return this;},getZ:function getZ(index){return this.array[index*this.itemSize+2];},setZ:function setZ(index,z){this.array[index*this.itemSize+2]=z;return this;},getW:function getW(index){return this.array[index*this.itemSize+3];},setW:function setW(index,w){this.array[index*this.itemSize+3]=w;return this;},setXY:function setXY(index,x,y){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;return this;},setXYZ:function setXYZ(index,x,y,z){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;return this;},setXYZW:function setXYZW(index,x,y,z,w){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;this.array[index+3]=w;return this;},onUpload:function onUpload(callback){this.onUploadCallback=callback;return this;},clone:function clone(){return new this.constructor(this.array,this.itemSize).copy(this);},toJSON:function toJSON(){return {itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};}});//
function Int8BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int8Array(array),itemSize,normalized);}Int8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int8BufferAttribute.prototype.constructor=Int8BufferAttribute;function Uint8BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint8Array(array),itemSize,normalized);}Uint8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8BufferAttribute.prototype.constructor=Uint8BufferAttribute;function Uint8ClampedBufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint8ClampedArray(array),itemSize,normalized);}Uint8ClampedBufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8ClampedBufferAttribute.prototype.constructor=Uint8ClampedBufferAttribute;function Int16BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int16Array(array),itemSize,normalized);}Int16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int16BufferAttribute.prototype.constructor=Int16BufferAttribute;function Uint16BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint16Array(array),itemSize,normalized);}Uint16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint16BufferAttribute.prototype.constructor=Uint16BufferAttribute;function Int32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int32Array(array),itemSize,normalized);}Int32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int32BufferAttribute.prototype.constructor=Int32BufferAttribute;function Uint32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint32Array(array),itemSize,normalized);}Uint32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint32BufferAttribute.prototype.constructor=Uint32BufferAttribute;function Float32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Float32Array(array),itemSize,normalized);}Float32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float32BufferAttribute.prototype.constructor=Float32BufferAttribute;function Float64BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Float64Array(array),itemSize,normalized);}Float64BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float64BufferAttribute.prototype.constructor=Float64BufferAttribute;/**
 * @author mrdoob / http://mrdoob.com/
 */function DirectGeometry(){this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=[];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];// this.lineDistances = [];
this.boundingBox=null;this.boundingSphere=null;// update flags
this.verticesNeedUpdate=false;this.normalsNeedUpdate=false;this.colorsNeedUpdate=false;this.uvsNeedUpdate=false;this.groupsNeedUpdate=false;}Object.assign(DirectGeometry.prototype,{computeGroups:function computeGroups(geometry){var group;var groups=[];var materialIndex=undefined;var faces=geometry.faces;for(var i=0;i<faces.length;i++){var face=faces[i];// materials
if(face.materialIndex!==materialIndex){materialIndex=face.materialIndex;if(group!==undefined){group.count=i*3-group.start;groups.push(group);}group={start:i*3,materialIndex:materialIndex};}}if(group!==undefined){group.count=i*3-group.start;groups.push(group);}this.groups=groups;},fromGeometry:function fromGeometry(geometry){var faces=geometry.faces;var vertices=geometry.vertices;var faceVertexUvs=geometry.faceVertexUvs;var hasFaceVertexUv=faceVertexUvs[0]&&faceVertexUvs[0].length>0;var hasFaceVertexUv2=faceVertexUvs[1]&&faceVertexUvs[1].length>0;// morphs
var morphTargets=geometry.morphTargets;var morphTargetsLength=morphTargets.length;var morphTargetsPosition;if(morphTargetsLength>0){morphTargetsPosition=[];for(var i=0;i<morphTargetsLength;i++){morphTargetsPosition[i]={name:morphTargets[i].name,data:[]};}this.morphTargets.position=morphTargetsPosition;}var morphNormals=geometry.morphNormals;var morphNormalsLength=morphNormals.length;var morphTargetsNormal;if(morphNormalsLength>0){morphTargetsNormal=[];for(var i=0;i<morphNormalsLength;i++){morphTargetsNormal[i]={name:morphNormals[i].name,data:[]};}this.morphTargets.normal=morphTargetsNormal;}// skins
var skinIndices=geometry.skinIndices;var skinWeights=geometry.skinWeights;var hasSkinIndices=skinIndices.length===vertices.length;var hasSkinWeights=skinWeights.length===vertices.length;//
if(vertices.length>0&&faces.length===0){console.error('THREE.DirectGeometry: Faceless geometries are not supported.');}for(var i=0;i<faces.length;i++){var face=faces[i];this.vertices.push(vertices[face.a],vertices[face.b],vertices[face.c]);var vertexNormals=face.vertexNormals;if(vertexNormals.length===3){this.normals.push(vertexNormals[0],vertexNormals[1],vertexNormals[2]);}else {var normal=face.normal;this.normals.push(normal,normal,normal);}var vertexColors=face.vertexColors;if(vertexColors.length===3){this.colors.push(vertexColors[0],vertexColors[1],vertexColors[2]);}else {var color=face.color;this.colors.push(color,color,color);}if(hasFaceVertexUv===true){var vertexUvs=faceVertexUvs[0][i];if(vertexUvs!==undefined){this.uvs.push(vertexUvs[0],vertexUvs[1],vertexUvs[2]);}else {console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ',i);this.uvs.push(new Vector2(),new Vector2(),new Vector2());}}if(hasFaceVertexUv2===true){var vertexUvs=faceVertexUvs[1][i];if(vertexUvs!==undefined){this.uvs2.push(vertexUvs[0],vertexUvs[1],vertexUvs[2]);}else {console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ',i);this.uvs2.push(new Vector2(),new Vector2(),new Vector2());}}// morphs
for(var j=0;j<morphTargetsLength;j++){var morphTarget=morphTargets[j].vertices;morphTargetsPosition[j].data.push(morphTarget[face.a],morphTarget[face.b],morphTarget[face.c]);}for(var j=0;j<morphNormalsLength;j++){var morphNormal=morphNormals[j].vertexNormals[i];morphTargetsNormal[j].data.push(morphNormal.a,morphNormal.b,morphNormal.c);}// skins
if(hasSkinIndices){this.skinIndices.push(skinIndices[face.a],skinIndices[face.b],skinIndices[face.c]);}if(hasSkinWeights){this.skinWeights.push(skinWeights[face.a],skinWeights[face.b],skinWeights[face.c]);}}this.computeGroups(geometry);this.verticesNeedUpdate=geometry.verticesNeedUpdate;this.normalsNeedUpdate=geometry.normalsNeedUpdate;this.colorsNeedUpdate=geometry.colorsNeedUpdate;this.uvsNeedUpdate=geometry.uvsNeedUpdate;this.groupsNeedUpdate=geometry.groupsNeedUpdate;if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function arrayMax(array){if(array.length===0)return -Infinity;var max=array[0];for(var i=1,l=array.length;i<l;++i){if(array[i]>max)max=array[i];}return max;}/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */var _bufferGeometryId=1;// BufferGeometry uses odd numbers as Id
var _m1$2=new Matrix4();var _obj=new Object3D();var _offset=new Vector3();var _box$2=new Box3();var _boxMorphTargets=new Box3();var _vector$4=new Vector3();function BufferGeometry(){Object.defineProperty(this,'id',{value:_bufferGeometryId+=2});this.uuid=MathUtils.generateUUID();this.name='';this.type='BufferGeometry';this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={};}BufferGeometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:BufferGeometry,isBufferGeometry:true,getIndex:function getIndex(){return this.index;},setIndex:function setIndex(index){if(Array.isArray(index)){this.index=new(arrayMax(index)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(index,1);}else {this.index=index;}},getAttribute:function getAttribute(name){return this.attributes[name];},setAttribute:function setAttribute(name,attribute){this.attributes[name]=attribute;return this;},deleteAttribute:function deleteAttribute(name){delete this.attributes[name];return this;},addGroup:function addGroup(start,count,materialIndex){this.groups.push({start:start,count:count,materialIndex:materialIndex!==undefined?materialIndex:0});},clearGroups:function clearGroups(){this.groups=[];},setDrawRange:function setDrawRange(start,count){this.drawRange.start=start;this.drawRange.count=count;},applyMatrix4:function applyMatrix4(matrix){var position=this.attributes.position;if(position!==undefined){position.applyMatrix4(matrix);position.needsUpdate=true;}var normal=this.attributes.normal;if(normal!==undefined){var normalMatrix=new Matrix3().getNormalMatrix(matrix);normal.applyNormalMatrix(normalMatrix);normal.needsUpdate=true;}var tangent=this.attributes.tangent;if(tangent!==undefined){tangent.transformDirection(matrix);tangent.needsUpdate=true;}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}return this;},rotateX:function rotateX(angle){// rotate geometry around world x-axis
_m1$2.makeRotationX(angle);this.applyMatrix4(_m1$2);return this;},rotateY:function rotateY(angle){// rotate geometry around world y-axis
_m1$2.makeRotationY(angle);this.applyMatrix4(_m1$2);return this;},rotateZ:function rotateZ(angle){// rotate geometry around world z-axis
_m1$2.makeRotationZ(angle);this.applyMatrix4(_m1$2);return this;},translate:function translate(x,y,z){// translate geometry
_m1$2.makeTranslation(x,y,z);this.applyMatrix4(_m1$2);return this;},scale:function scale(x,y,z){// scale geometry
_m1$2.makeScale(x,y,z);this.applyMatrix4(_m1$2);return this;},lookAt:function lookAt(vector){_obj.lookAt(vector);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this;},center:function center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this;},setFromObject:function setFromObject(object){// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
var geometry=object.geometry;if(object.isPoints||object.isLine){var positions=new Float32BufferAttribute(geometry.vertices.length*3,3);var colors=new Float32BufferAttribute(geometry.colors.length*3,3);this.setAttribute('position',positions.copyVector3sArray(geometry.vertices));this.setAttribute('color',colors.copyColorsArray(geometry.colors));if(geometry.lineDistances&&geometry.lineDistances.length===geometry.vertices.length){var lineDistances=new Float32BufferAttribute(geometry.lineDistances.length,1);this.setAttribute('lineDistance',lineDistances.copyArray(geometry.lineDistances));}if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}}else if(object.isMesh){if(geometry&&geometry.isGeometry){this.fromGeometry(geometry);}}return this;},setFromPoints:function setFromPoints(points){var position=[];for(var i=0,l=points.length;i<l;i++){var point=points[i];position.push(point.x,point.y,point.z||0);}this.setAttribute('position',new Float32BufferAttribute(position,3));return this;},updateFromObject:function updateFromObject(object){var geometry=object.geometry;if(object.isMesh){var direct=geometry.__directGeometry;if(geometry.elementsNeedUpdate===true){direct=undefined;geometry.elementsNeedUpdate=false;}if(direct===undefined){return this.fromGeometry(geometry);}direct.verticesNeedUpdate=geometry.verticesNeedUpdate;direct.normalsNeedUpdate=geometry.normalsNeedUpdate;direct.colorsNeedUpdate=geometry.colorsNeedUpdate;direct.uvsNeedUpdate=geometry.uvsNeedUpdate;direct.groupsNeedUpdate=geometry.groupsNeedUpdate;geometry.verticesNeedUpdate=false;geometry.normalsNeedUpdate=false;geometry.colorsNeedUpdate=false;geometry.uvsNeedUpdate=false;geometry.groupsNeedUpdate=false;geometry=direct;}var attribute;if(geometry.verticesNeedUpdate===true){attribute=this.attributes.position;if(attribute!==undefined){attribute.copyVector3sArray(geometry.vertices);attribute.needsUpdate=true;}geometry.verticesNeedUpdate=false;}if(geometry.normalsNeedUpdate===true){attribute=this.attributes.normal;if(attribute!==undefined){attribute.copyVector3sArray(geometry.normals);attribute.needsUpdate=true;}geometry.normalsNeedUpdate=false;}if(geometry.colorsNeedUpdate===true){attribute=this.attributes.color;if(attribute!==undefined){attribute.copyColorsArray(geometry.colors);attribute.needsUpdate=true;}geometry.colorsNeedUpdate=false;}if(geometry.uvsNeedUpdate){attribute=this.attributes.uv;if(attribute!==undefined){attribute.copyVector2sArray(geometry.uvs);attribute.needsUpdate=true;}geometry.uvsNeedUpdate=false;}if(geometry.lineDistancesNeedUpdate){attribute=this.attributes.lineDistance;if(attribute!==undefined){attribute.copyArray(geometry.lineDistances);attribute.needsUpdate=true;}geometry.lineDistancesNeedUpdate=false;}if(geometry.groupsNeedUpdate){geometry.computeGroups(object.geometry);this.groups=geometry.groups;geometry.groupsNeedUpdate=false;}return this;},fromGeometry:function fromGeometry(geometry){geometry.__directGeometry=new DirectGeometry().fromGeometry(geometry);return this.fromDirectGeometry(geometry.__directGeometry);},fromDirectGeometry:function fromDirectGeometry(geometry){var positions=new Float32Array(geometry.vertices.length*3);this.setAttribute('position',new BufferAttribute(positions,3).copyVector3sArray(geometry.vertices));if(geometry.normals.length>0){var normals=new Float32Array(geometry.normals.length*3);this.setAttribute('normal',new BufferAttribute(normals,3).copyVector3sArray(geometry.normals));}if(geometry.colors.length>0){var colors=new Float32Array(geometry.colors.length*3);this.setAttribute('color',new BufferAttribute(colors,3).copyColorsArray(geometry.colors));}if(geometry.uvs.length>0){var uvs=new Float32Array(geometry.uvs.length*2);this.setAttribute('uv',new BufferAttribute(uvs,2).copyVector2sArray(geometry.uvs));}if(geometry.uvs2.length>0){var uvs2=new Float32Array(geometry.uvs2.length*2);this.setAttribute('uv2',new BufferAttribute(uvs2,2).copyVector2sArray(geometry.uvs2));}// groups
this.groups=geometry.groups;// morphs
for(var name in geometry.morphTargets){var array=[];var morphTargets=geometry.morphTargets[name];for(var i=0,l=morphTargets.length;i<l;i++){var morphTarget=morphTargets[i];var attribute=new Float32BufferAttribute(morphTarget.data.length*3,3);attribute.name=morphTarget.name;array.push(attribute.copyVector3sArray(morphTarget.data));}this.morphAttributes[name]=array;}// skinning
if(geometry.skinIndices.length>0){var skinIndices=new Float32BufferAttribute(geometry.skinIndices.length*4,4);this.setAttribute('skinIndex',skinIndices.copyVector4sArray(geometry.skinIndices));}if(geometry.skinWeights.length>0){var skinWeights=new Float32BufferAttribute(geometry.skinWeights.length*4,4);this.setAttribute('skinWeight',skinWeights.copyVector4sArray(geometry.skinWeights));}//
if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}return this;},computeBoundingBox:function computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}var position=this.attributes.position;var morphAttributesPosition=this.morphAttributes.position;if(position!==undefined){this.boundingBox.setFromBufferAttribute(position);// process morph attributes if present
if(morphAttributesPosition){for(var i=0,il=morphAttributesPosition.length;i<il;i++){var morphAttribute=morphAttributesPosition[i];_box$2.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$4.addVectors(this.boundingBox.min,_box$2.min);this.boundingBox.expandByPoint(_vector$4);_vector$4.addVectors(this.boundingBox.max,_box$2.max);this.boundingBox.expandByPoint(_vector$4);}else {this.boundingBox.expandByPoint(_box$2.min);this.boundingBox.expandByPoint(_box$2.max);}}}}else {this.boundingBox.makeEmpty();}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this);}},computeBoundingSphere:function computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}var position=this.attributes.position;var morphAttributesPosition=this.morphAttributes.position;if(position){// first, find the center of the bounding sphere
var center=this.boundingSphere.center;_box$2.setFromBufferAttribute(position);// process morph attributes if present
if(morphAttributesPosition){for(var i=0,il=morphAttributesPosition.length;i<il;i++){var morphAttribute=morphAttributesPosition[i];_boxMorphTargets.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$4.addVectors(_box$2.min,_boxMorphTargets.min);_box$2.expandByPoint(_vector$4);_vector$4.addVectors(_box$2.max,_boxMorphTargets.max);_box$2.expandByPoint(_vector$4);}else {_box$2.expandByPoint(_boxMorphTargets.min);_box$2.expandByPoint(_boxMorphTargets.max);}}}_box$2.getCenter(center);// second, try to find a boundingSphere with a radius smaller than the
// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
var maxRadiusSq=0;for(var i=0,il=position.count;i<il;i++){_vector$4.fromBufferAttribute(position,i);maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$4));}// process morph attributes if present
if(morphAttributesPosition){for(var i=0,il=morphAttributesPosition.length;i<il;i++){var morphAttribute=morphAttributesPosition[i];var morphTargetsRelative=this.morphTargetsRelative;for(var j=0,jl=morphAttribute.count;j<jl;j++){_vector$4.fromBufferAttribute(morphAttribute,j);if(morphTargetsRelative){_offset.fromBufferAttribute(position,j);_vector$4.add(_offset);}maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$4));}}}this.boundingSphere.radius=Math.sqrt(maxRadiusSq);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this);}}},computeFaceNormals:function computeFaceNormals(){// backwards compatibility
},computeVertexNormals:function computeVertexNormals(){var index=this.index;var attributes=this.attributes;if(attributes.position){var positions=attributes.position.array;if(attributes.normal===undefined){this.setAttribute('normal',new BufferAttribute(new Float32Array(positions.length),3));}else {// reset existing normals to zero
var array=attributes.normal.array;for(var i=0,il=array.length;i<il;i++){array[i]=0;}}var normals=attributes.normal.array;var vA,vB,vC;var pA=new Vector3(),pB=new Vector3(),pC=new Vector3();var cb=new Vector3(),ab=new Vector3();// indexed elements
if(index){var indices=index.array;for(var i=0,il=index.count;i<il;i+=3){vA=indices[i+0]*3;vB=indices[i+1]*3;vC=indices[i+2]*3;pA.fromArray(positions,vA);pB.fromArray(positions,vB);pC.fromArray(positions,vC);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);normals[vA]+=cb.x;normals[vA+1]+=cb.y;normals[vA+2]+=cb.z;normals[vB]+=cb.x;normals[vB+1]+=cb.y;normals[vB+2]+=cb.z;normals[vC]+=cb.x;normals[vC+1]+=cb.y;normals[vC+2]+=cb.z;}}else {// non-indexed elements (unconnected triangle soup)
for(var i=0,il=positions.length;i<il;i+=9){pA.fromArray(positions,i);pB.fromArray(positions,i+3);pC.fromArray(positions,i+6);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);normals[i]=cb.x;normals[i+1]=cb.y;normals[i+2]=cb.z;normals[i+3]=cb.x;normals[i+4]=cb.y;normals[i+5]=cb.z;normals[i+6]=cb.x;normals[i+7]=cb.y;normals[i+8]=cb.z;}}this.normalizeNormals();attributes.normal.needsUpdate=true;}},merge:function merge(geometry,offset){if(!(geometry&&geometry.isBufferGeometry)){console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.',geometry);return;}if(offset===undefined){offset=0;console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '+'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');}var attributes=this.attributes;for(var key in attributes){if(geometry.attributes[key]===undefined)continue;var attribute1=attributes[key];var attributeArray1=attribute1.array;var attribute2=geometry.attributes[key];var attributeArray2=attribute2.array;var attributeOffset=attribute2.itemSize*offset;var length=Math.min(attributeArray2.length,attributeArray1.length-attributeOffset);for(var i=0,j=attributeOffset;i<length;i++,j++){attributeArray1[j]=attributeArray2[i];}}return this;},normalizeNormals:function normalizeNormals(){var normals=this.attributes.normal;for(var i=0,il=normals.count;i<il;i++){_vector$4.x=normals.getX(i);_vector$4.y=normals.getY(i);_vector$4.z=normals.getZ(i);_vector$4.normalize();normals.setXYZ(i,_vector$4.x,_vector$4.y,_vector$4.z);}},toNonIndexed:function toNonIndexed(){function convertBufferAttribute(attribute,indices){var array=attribute.array;var itemSize=attribute.itemSize;var array2=new array.constructor(indices.length*itemSize);var index=0,index2=0;for(var i=0,l=indices.length;i<l;i++){index=indices[i]*itemSize;for(var j=0;j<itemSize;j++){array2[index2++]=array[index++];}}return new BufferAttribute(array2,itemSize);}//
if(this.index===null){console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');return this;}var geometry2=new BufferGeometry();var indices=this.index.array;var attributes=this.attributes;// attributes
for(var name in attributes){var attribute=attributes[name];var newAttribute=convertBufferAttribute(attribute,indices);geometry2.setAttribute(name,newAttribute);}// morph attributes
var morphAttributes=this.morphAttributes;for(name in morphAttributes){var morphArray=[];var morphAttribute=morphAttributes[name];// morphAttribute: array of Float32BufferAttributes
for(var i=0,il=morphAttribute.length;i<il;i++){var attribute=morphAttribute[i];var newAttribute=convertBufferAttribute(attribute,indices);morphArray.push(newAttribute);}geometry2.morphAttributes[name]=morphArray;}geometry2.morphTargetsRelative=this.morphTargetsRelative;// groups
var groups=this.groups;for(var i=0,l=groups.length;i<l;i++){var group=groups[i];geometry2.addGroup(group.start,group.count,group.materialIndex);}return geometry2;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'BufferGeometry',generator:'BufferGeometry.toJSON'}};// standard BufferGeometry serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(Object.keys(this.userData).length>0)data.userData=this.userData;if(this.parameters!==undefined){var parameters=this.parameters;for(var key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}data.data={attributes:{}};var index=this.index;if(index!==null){data.data.index={type:index.array.constructor.name,array:Array.prototype.slice.call(index.array)};}var attributes=this.attributes;for(var key in attributes){var attribute=attributes[key];var attributeData=attribute.toJSON();if(attribute.name!=='')attributeData.name=attribute.name;data.data.attributes[key]=attributeData;}var morphAttributes={};var hasMorphAttributes=false;for(var key in this.morphAttributes){var attributeArray=this.morphAttributes[key];var array=[];for(var i=0,il=attributeArray.length;i<il;i++){var attribute=attributeArray[i];var attributeData=attribute.toJSON();if(attribute.name!=='')attributeData.name=attribute.name;array.push(attributeData);}if(array.length>0){morphAttributes[key]=array;hasMorphAttributes=true;}}if(hasMorphAttributes){data.data.morphAttributes=morphAttributes;data.data.morphTargetsRelative=this.morphTargetsRelative;}var groups=this.groups;if(groups.length>0){data.data.groups=JSON.parse(JSON.stringify(groups));}var boundingSphere=this.boundingSphere;if(boundingSphere!==null){data.data.boundingSphere={center:boundingSphere.center.toArray(),radius:boundingSphere.radius};}return data;},clone:function clone(){/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */return new BufferGeometry().copy(this);},copy:function copy(source){var name,i,l;// reset
this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;// name
this.name=source.name;// index
var index=source.index;if(index!==null){this.setIndex(index.clone());}// attributes
var attributes=source.attributes;for(name in attributes){var attribute=attributes[name];this.setAttribute(name,attribute.clone());}// morph attributes
var morphAttributes=source.morphAttributes;for(name in morphAttributes){var array=[];var morphAttribute=morphAttributes[name];// morphAttribute: array of Float32BufferAttributes
for(i=0,l=morphAttribute.length;i<l;i++){array.push(morphAttribute[i].clone());}this.morphAttributes[name]=array;}this.morphTargetsRelative=source.morphTargetsRelative;// groups
var groups=source.groups;for(i=0,l=groups.length;i<l;i++){var group=groups[i];this.addGroup(group.start,group.count,group.materialIndex);}// bounding box
var boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere
var boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// draw range
this.drawRange.start=source.drawRange.start;this.drawRange.count=source.drawRange.count;// user data
this.userData=source.userData;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */var _inverseMatrix=new Matrix4();var _ray=new Ray();var _sphere=new Sphere();var _vA=new Vector3();var _vB=new Vector3();var _vC=new Vector3();var _tempA=new Vector3();var _tempB=new Vector3();var _tempC=new Vector3();var _morphA=new Vector3();var _morphB=new Vector3();var _morphC=new Vector3();var _uvA=new Vector2();var _uvB=new Vector2();var _uvC=new Vector2();var _intersectionPoint=new Vector3();var _intersectionPointWorld=new Vector3();function Mesh(geometry,material){Object3D.call(this);this.type='Mesh';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new MeshBasicMaterial();this.updateMorphTargets();}Mesh.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Mesh,isMesh:true,copy:function copy(source){Object3D.prototype.copy.call(this,source);if(source.morphTargetInfluences!==undefined){this.morphTargetInfluences=source.morphTargetInfluences.slice();}if(source.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary);}return this;},updateMorphTargets:function updateMorphTargets(){var geometry=this.geometry;var m,ml,name;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes;var keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(m=0,ml=morphAttribute.length;m<ml;m++){name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else {var morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}},raycast:function raycast(raycaster,intersects){var geometry=this.geometry;var material=this.material;var matrixWorld=this.matrixWorld;if(material===undefined)return;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere.copy(geometry.boundingSphere);_sphere.applyMatrix4(matrixWorld);if(raycaster.ray.intersectsSphere(_sphere)===false)return;//
_inverseMatrix.getInverse(matrixWorld);_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);// Check boundingBox before continuing
if(geometry.boundingBox!==null){if(_ray.intersectsBox(geometry.boundingBox)===false)return;}var intersection;if(geometry.isBufferGeometry){var a,b,c;var index=geometry.index;var position=geometry.attributes.position;var morphPosition=geometry.morphAttributes.position;var morphTargetsRelative=geometry.morphTargetsRelative;var uv=geometry.attributes.uv;var uv2=geometry.attributes.uv2;var groups=geometry.groups;var drawRange=geometry.drawRange;var i,j,il,jl;var group,groupMaterial;var start,end;if(index!==null){// indexed buffer geometry
if(Array.isArray(material)){for(i=0,il=groups.length;i<il;i++){group=groups[i];groupMaterial=material[group.materialIndex];start=Math.max(group.start,drawRange.start);end=Math.min(group.start+group.count,drawRange.start+drawRange.count);for(j=start,jl=end;j<jl;j+=3){a=index.getX(j);b=index.getX(j+1);c=index.getX(j+2);intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,_ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in indexed buffer semantics
intersection.face.materialIndex=group.materialIndex;intersects.push(intersection);}}}}else {start=Math.max(0,drawRange.start);end=Math.min(index.count,drawRange.start+drawRange.count);for(i=start,il=end;i<il;i+=3){a=index.getX(i);b=index.getX(i+1);c=index.getX(i+2);intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(i/3);// triangle number in indexed buffer semantics
intersects.push(intersection);}}}}else if(position!==undefined){// non-indexed buffer geometry
if(Array.isArray(material)){for(i=0,il=groups.length;i<il;i++){group=groups[i];groupMaterial=material[group.materialIndex];start=Math.max(group.start,drawRange.start);end=Math.min(group.start+group.count,drawRange.start+drawRange.count);for(j=start,jl=end;j<jl;j+=3){a=j;b=j+1;c=j+2;intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,_ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in non-indexed buffer semantics
intersection.face.materialIndex=group.materialIndex;intersects.push(intersection);}}}}else {start=Math.max(0,drawRange.start);end=Math.min(position.count,drawRange.start+drawRange.count);for(i=start,il=end;i<il;i+=3){a=i;b=i+1;c=i+2;intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(i/3);// triangle number in non-indexed buffer semantics
intersects.push(intersection);}}}}}else if(geometry.isGeometry){var fvA,fvB,fvC;var isMultiMaterial=Array.isArray(material);var vertices=geometry.vertices;var faces=geometry.faces;var uvs;var faceVertexUvs=geometry.faceVertexUvs[0];if(faceVertexUvs.length>0)uvs=faceVertexUvs;for(var f=0,fl=faces.length;f<fl;f++){var face=faces[f];var faceMaterial=isMultiMaterial?material[face.materialIndex]:material;if(faceMaterial===undefined)continue;fvA=vertices[face.a];fvB=vertices[face.b];fvC=vertices[face.c];intersection=checkIntersection(this,faceMaterial,raycaster,_ray,fvA,fvB,fvC,_intersectionPoint);if(intersection){if(uvs&&uvs[f]){var uvs_f=uvs[f];_uvA.copy(uvs_f[0]);_uvB.copy(uvs_f[1]);_uvC.copy(uvs_f[2]);intersection.uv=Triangle.getUV(_intersectionPoint,fvA,fvB,fvC,_uvA,_uvB,_uvC,new Vector2());}intersection.face=face;intersection.faceIndex=f;intersects.push(intersection);}}}},clone:function clone(){return new this.constructor(this.geometry,this.material).copy(this);}});function checkIntersection(object,material,raycaster,ray,pA,pB,pC,point){var intersect;if(material.side===BackSide){intersect=ray.intersectTriangle(pC,pB,pA,true,point);}else {intersect=ray.intersectTriangle(pA,pB,pC,material.side!==DoubleSide,point);}if(intersect===null)return null;_intersectionPointWorld.copy(point);_intersectionPointWorld.applyMatrix4(object.matrixWorld);var distance=raycaster.ray.origin.distanceTo(_intersectionPointWorld);if(distance<raycaster.near||distance>raycaster.far)return null;return {distance:distance,point:_intersectionPointWorld.clone(),object:object};}function checkBufferGeometryIntersection(object,material,raycaster,ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c){_vA.fromBufferAttribute(position,a);_vB.fromBufferAttribute(position,b);_vC.fromBufferAttribute(position,c);var morphInfluences=object.morphTargetInfluences;if(material.morphTargets&&morphPosition&&morphInfluences){_morphA.set(0,0,0);_morphB.set(0,0,0);_morphC.set(0,0,0);for(var i=0,il=morphPosition.length;i<il;i++){var influence=morphInfluences[i];var morphAttribute=morphPosition[i];if(influence===0)continue;_tempA.fromBufferAttribute(morphAttribute,a);_tempB.fromBufferAttribute(morphAttribute,b);_tempC.fromBufferAttribute(morphAttribute,c);if(morphTargetsRelative){_morphA.addScaledVector(_tempA,influence);_morphB.addScaledVector(_tempB,influence);_morphC.addScaledVector(_tempC,influence);}else {_morphA.addScaledVector(_tempA.sub(_vA),influence);_morphB.addScaledVector(_tempB.sub(_vB),influence);_morphC.addScaledVector(_tempC.sub(_vC),influence);}}_vA.add(_morphA);_vB.add(_morphB);_vC.add(_morphC);}var intersection=checkIntersection(object,material,raycaster,ray,_vA,_vB,_vC,_intersectionPoint);if(intersection){if(uv){_uvA.fromBufferAttribute(uv,a);_uvB.fromBufferAttribute(uv,b);_uvC.fromBufferAttribute(uv,c);intersection.uv=Triangle.getUV(_intersectionPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2());}if(uv2){_uvA.fromBufferAttribute(uv2,a);_uvB.fromBufferAttribute(uv2,b);_uvC.fromBufferAttribute(uv2,c);intersection.uv2=Triangle.getUV(_intersectionPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2());}var face=new Face3(a,b,c);Triangle.getNormal(_vA,_vB,_vC,face.normal);intersection.face=face;}return intersection;}/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://clara.io
 */var _geometryId=0;// Geometry uses even numbers as Id
var _m1$3=new Matrix4();var _obj$1=new Object3D();var _offset$1=new Vector3();function Geometry(){Object.defineProperty(this,'id',{value:_geometryId+=2});this.uuid=MathUtils.generateUUID();this.name='';this.type='Geometry';this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;// update flags
this.elementsNeedUpdate=false;this.verticesNeedUpdate=false;this.uvsNeedUpdate=false;this.normalsNeedUpdate=false;this.colorsNeedUpdate=false;this.lineDistancesNeedUpdate=false;this.groupsNeedUpdate=false;}Geometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Geometry,isGeometry:true,applyMatrix4:function applyMatrix4(matrix){var normalMatrix=new Matrix3().getNormalMatrix(matrix);for(var i=0,il=this.vertices.length;i<il;i++){var vertex=this.vertices[i];vertex.applyMatrix4(matrix);}for(var i=0,il=this.faces.length;i<il;i++){var face=this.faces[i];face.normal.applyMatrix3(normalMatrix).normalize();for(var j=0,jl=face.vertexNormals.length;j<jl;j++){face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();}}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}this.verticesNeedUpdate=true;this.normalsNeedUpdate=true;return this;},rotateX:function rotateX(angle){// rotate geometry around world x-axis
_m1$3.makeRotationX(angle);this.applyMatrix4(_m1$3);return this;},rotateY:function rotateY(angle){// rotate geometry around world y-axis
_m1$3.makeRotationY(angle);this.applyMatrix4(_m1$3);return this;},rotateZ:function rotateZ(angle){// rotate geometry around world z-axis
_m1$3.makeRotationZ(angle);this.applyMatrix4(_m1$3);return this;},translate:function translate(x,y,z){// translate geometry
_m1$3.makeTranslation(x,y,z);this.applyMatrix4(_m1$3);return this;},scale:function scale(x,y,z){// scale geometry
_m1$3.makeScale(x,y,z);this.applyMatrix4(_m1$3);return this;},lookAt:function lookAt(vector){_obj$1.lookAt(vector);_obj$1.updateMatrix();this.applyMatrix4(_obj$1.matrix);return this;},fromBufferGeometry:function fromBufferGeometry(geometry){var scope=this;var indices=geometry.index!==null?geometry.index.array:undefined;var attributes=geometry.attributes;if(attributes.position===undefined){console.error('THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.');return this;}var positions=attributes.position.array;var normals=attributes.normal!==undefined?attributes.normal.array:undefined;var colors=attributes.color!==undefined?attributes.color.array:undefined;var uvs=attributes.uv!==undefined?attributes.uv.array:undefined;var uvs2=attributes.uv2!==undefined?attributes.uv2.array:undefined;if(uvs2!==undefined)this.faceVertexUvs[1]=[];for(var i=0;i<positions.length;i+=3){scope.vertices.push(new Vector3().fromArray(positions,i));if(colors!==undefined){scope.colors.push(new Color().fromArray(colors,i));}}function addFace(a,b,c,materialIndex){var vertexColors=colors===undefined?[]:[scope.colors[a].clone(),scope.colors[b].clone(),scope.colors[c].clone()];var vertexNormals=normals===undefined?[]:[new Vector3().fromArray(normals,a*3),new Vector3().fromArray(normals,b*3),new Vector3().fromArray(normals,c*3)];var face=new Face3(a,b,c,vertexNormals,vertexColors,materialIndex);scope.faces.push(face);if(uvs!==undefined){scope.faceVertexUvs[0].push([new Vector2().fromArray(uvs,a*2),new Vector2().fromArray(uvs,b*2),new Vector2().fromArray(uvs,c*2)]);}if(uvs2!==undefined){scope.faceVertexUvs[1].push([new Vector2().fromArray(uvs2,a*2),new Vector2().fromArray(uvs2,b*2),new Vector2().fromArray(uvs2,c*2)]);}}var groups=geometry.groups;if(groups.length>0){for(var i=0;i<groups.length;i++){var group=groups[i];var start=group.start;var count=group.count;for(var j=start,jl=start+count;j<jl;j+=3){if(indices!==undefined){addFace(indices[j],indices[j+1],indices[j+2],group.materialIndex);}else {addFace(j,j+1,j+2,group.materialIndex);}}}}else {if(indices!==undefined){for(var i=0;i<indices.length;i+=3){addFace(indices[i],indices[i+1],indices[i+2]);}}else {for(var i=0;i<positions.length/3;i+=3){addFace(i,i+1,i+2);}}}this.computeFaceNormals();if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}return this;},center:function center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset$1).negate();this.translate(_offset$1.x,_offset$1.y,_offset$1.z);return this;},normalize:function normalize(){this.computeBoundingSphere();var center=this.boundingSphere.center;var radius=this.boundingSphere.radius;var s=radius===0?1:1.0/radius;var matrix=new Matrix4();matrix.set(s,0,0,-s*center.x,0,s,0,-s*center.y,0,0,s,-s*center.z,0,0,0,1);this.applyMatrix4(matrix);return this;},computeFaceNormals:function computeFaceNormals(){var cb=new Vector3(),ab=new Vector3();for(var f=0,fl=this.faces.length;f<fl;f++){var face=this.faces[f];var vA=this.vertices[face.a];var vB=this.vertices[face.b];var vC=this.vertices[face.c];cb.subVectors(vC,vB);ab.subVectors(vA,vB);cb.cross(ab);cb.normalize();face.normal.copy(cb);}},computeVertexNormals:function computeVertexNormals(areaWeighted){if(areaWeighted===undefined)areaWeighted=true;var v,vl,f,fl,face,vertices;vertices=new Array(this.vertices.length);for(v=0,vl=this.vertices.length;v<vl;v++){vertices[v]=new Vector3();}if(areaWeighted){// vertex normals weighted by triangle areas
// http://www.iquilezles.org/www/articles/normals/normals.htm
var vA,vB,vC;var cb=new Vector3(),ab=new Vector3();for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];vA=this.vertices[face.a];vB=this.vertices[face.b];vC=this.vertices[face.c];cb.subVectors(vC,vB);ab.subVectors(vA,vB);cb.cross(ab);vertices[face.a].add(cb);vertices[face.b].add(cb);vertices[face.c].add(cb);}}else {this.computeFaceNormals();for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];vertices[face.a].add(face.normal);vertices[face.b].add(face.normal);vertices[face.c].add(face.normal);}}for(v=0,vl=this.vertices.length;v<vl;v++){vertices[v].normalize();}for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];var vertexNormals=face.vertexNormals;if(vertexNormals.length===3){vertexNormals[0].copy(vertices[face.a]);vertexNormals[1].copy(vertices[face.b]);vertexNormals[2].copy(vertices[face.c]);}else {vertexNormals[0]=vertices[face.a].clone();vertexNormals[1]=vertices[face.b].clone();vertexNormals[2]=vertices[face.c].clone();}}if(this.faces.length>0){this.normalsNeedUpdate=true;}},computeFlatVertexNormals:function computeFlatVertexNormals(){var f,fl,face;this.computeFaceNormals();for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];var vertexNormals=face.vertexNormals;if(vertexNormals.length===3){vertexNormals[0].copy(face.normal);vertexNormals[1].copy(face.normal);vertexNormals[2].copy(face.normal);}else {vertexNormals[0]=face.normal.clone();vertexNormals[1]=face.normal.clone();vertexNormals[2]=face.normal.clone();}}if(this.faces.length>0){this.normalsNeedUpdate=true;}},computeMorphNormals:function computeMorphNormals(){var i,il,f,fl,face;// save original normals
// - create temp variables on first access
//   otherwise just copy (for faster repeated calls)
for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];if(!face.__originalFaceNormal){face.__originalFaceNormal=face.normal.clone();}else {face.__originalFaceNormal.copy(face.normal);}if(!face.__originalVertexNormals)face.__originalVertexNormals=[];for(i=0,il=face.vertexNormals.length;i<il;i++){if(!face.__originalVertexNormals[i]){face.__originalVertexNormals[i]=face.vertexNormals[i].clone();}else {face.__originalVertexNormals[i].copy(face.vertexNormals[i]);}}}// use temp geometry to compute face and vertex normals for each morph
var tmpGeo=new Geometry();tmpGeo.faces=this.faces;for(i=0,il=this.morphTargets.length;i<il;i++){// create on first access
if(!this.morphNormals[i]){this.morphNormals[i]={};this.morphNormals[i].faceNormals=[];this.morphNormals[i].vertexNormals=[];var dstNormalsFace=this.morphNormals[i].faceNormals;var dstNormalsVertex=this.morphNormals[i].vertexNormals;var faceNormal,vertexNormals;for(f=0,fl=this.faces.length;f<fl;f++){faceNormal=new Vector3();vertexNormals={a:new Vector3(),b:new Vector3(),c:new Vector3()};dstNormalsFace.push(faceNormal);dstNormalsVertex.push(vertexNormals);}}var morphNormals=this.morphNormals[i];// set vertices to morph target
tmpGeo.vertices=this.morphTargets[i].vertices;// compute morph normals
tmpGeo.computeFaceNormals();tmpGeo.computeVertexNormals();// store morph normals
var faceNormal,vertexNormals;for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];faceNormal=morphNormals.faceNormals[f];vertexNormals=morphNormals.vertexNormals[f];faceNormal.copy(face.normal);vertexNormals.a.copy(face.vertexNormals[0]);vertexNormals.b.copy(face.vertexNormals[1]);vertexNormals.c.copy(face.vertexNormals[2]);}}// restore original normals
for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];face.normal=face.__originalFaceNormal;face.vertexNormals=face.__originalVertexNormals;}},computeBoundingBox:function computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}this.boundingBox.setFromPoints(this.vertices);},computeBoundingSphere:function computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}this.boundingSphere.setFromPoints(this.vertices);},merge:function merge(geometry,matrix,materialIndexOffset){if(!(geometry&&geometry.isGeometry)){console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.',geometry);return;}var normalMatrix,vertexOffset=this.vertices.length,vertices1=this.vertices,vertices2=geometry.vertices,faces1=this.faces,faces2=geometry.faces,colors1=this.colors,colors2=geometry.colors;if(materialIndexOffset===undefined)materialIndexOffset=0;if(matrix!==undefined){normalMatrix=new Matrix3().getNormalMatrix(matrix);}// vertices
for(var i=0,il=vertices2.length;i<il;i++){var vertex=vertices2[i];var vertexCopy=vertex.clone();if(matrix!==undefined)vertexCopy.applyMatrix4(matrix);vertices1.push(vertexCopy);}// colors
for(var i=0,il=colors2.length;i<il;i++){colors1.push(colors2[i].clone());}// faces
for(i=0,il=faces2.length;i<il;i++){var face=faces2[i],faceCopy,normal,color,faceVertexNormals=face.vertexNormals,faceVertexColors=face.vertexColors;faceCopy=new Face3(face.a+vertexOffset,face.b+vertexOffset,face.c+vertexOffset);faceCopy.normal.copy(face.normal);if(normalMatrix!==undefined){faceCopy.normal.applyMatrix3(normalMatrix).normalize();}for(var j=0,jl=faceVertexNormals.length;j<jl;j++){normal=faceVertexNormals[j].clone();if(normalMatrix!==undefined){normal.applyMatrix3(normalMatrix).normalize();}faceCopy.vertexNormals.push(normal);}faceCopy.color.copy(face.color);for(var j=0,jl=faceVertexColors.length;j<jl;j++){color=faceVertexColors[j];faceCopy.vertexColors.push(color.clone());}faceCopy.materialIndex=face.materialIndex+materialIndexOffset;faces1.push(faceCopy);}// uvs
for(var i=0,il=geometry.faceVertexUvs.length;i<il;i++){var faceVertexUvs2=geometry.faceVertexUvs[i];if(this.faceVertexUvs[i]===undefined)this.faceVertexUvs[i]=[];for(var j=0,jl=faceVertexUvs2.length;j<jl;j++){var uvs2=faceVertexUvs2[j],uvsCopy=[];for(var k=0,kl=uvs2.length;k<kl;k++){uvsCopy.push(uvs2[k].clone());}this.faceVertexUvs[i].push(uvsCopy);}}},mergeMesh:function mergeMesh(mesh){if(!(mesh&&mesh.isMesh)){console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.',mesh);return;}if(mesh.matrixAutoUpdate)mesh.updateMatrix();this.merge(mesh.geometry,mesh.matrix);},/*
	 * Checks for duplicate vertices with hashmap.
	 * Duplicated vertices are removed
	 * and faces' vertices are updated.
	 */mergeVertices:function mergeVertices(){var verticesMap={};// Hashmap for looking up vertices by position coordinates (and making sure they are unique)
var unique=[],changes=[];var v,key;var precisionPoints=4;// number of decimal points, e.g. 4 for epsilon of 0.0001
var precision=Math.pow(10,precisionPoints);var i,il,face;var indices,j,jl;for(i=0,il=this.vertices.length;i<il;i++){v=this.vertices[i];key=Math.round(v.x*precision)+'_'+Math.round(v.y*precision)+'_'+Math.round(v.z*precision);if(verticesMap[key]===undefined){verticesMap[key]=i;unique.push(this.vertices[i]);changes[i]=unique.length-1;}else {//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
changes[i]=changes[verticesMap[key]];}}// if faces are completely degenerate after merging vertices, we
// have to remove them from the geometry.
var faceIndicesToRemove=[];for(i=0,il=this.faces.length;i<il;i++){face=this.faces[i];face.a=changes[face.a];face.b=changes[face.b];face.c=changes[face.c];indices=[face.a,face.b,face.c];// if any duplicate vertices are found in a Face3
// we have to remove the face as nothing can be saved
for(var n=0;n<3;n++){if(indices[n]===indices[(n+1)%3]){faceIndicesToRemove.push(i);break;}}}for(i=faceIndicesToRemove.length-1;i>=0;i--){var idx=faceIndicesToRemove[i];this.faces.splice(idx,1);for(j=0,jl=this.faceVertexUvs.length;j<jl;j++){this.faceVertexUvs[j].splice(idx,1);}}// Use unique set of vertices
var diff=this.vertices.length-unique.length;this.vertices=unique;return diff;},setFromPoints:function setFromPoints(points){this.vertices=[];for(var i=0,l=points.length;i<l;i++){var point=points[i];this.vertices.push(new Vector3(point.x,point.y,point.z||0));}return this;},sortFacesByMaterialIndex:function sortFacesByMaterialIndex(){var faces=this.faces;var length=faces.length;// tag faces
for(var i=0;i<length;i++){faces[i]._id=i;}// sort faces
function materialIndexSort(a,b){return a.materialIndex-b.materialIndex;}faces.sort(materialIndexSort);// sort uvs
var uvs1=this.faceVertexUvs[0];var uvs2=this.faceVertexUvs[1];var newUvs1,newUvs2;if(uvs1&&uvs1.length===length)newUvs1=[];if(uvs2&&uvs2.length===length)newUvs2=[];for(var i=0;i<length;i++){var id=faces[i]._id;if(newUvs1)newUvs1.push(uvs1[id]);if(newUvs2)newUvs2.push(uvs2[id]);}if(newUvs1)this.faceVertexUvs[0]=newUvs1;if(newUvs2)this.faceVertexUvs[1]=newUvs2;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'Geometry',generator:'Geometry.toJSON'}};// standard Geometry serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.parameters!==undefined){var parameters=this.parameters;for(var key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}var vertices=[];for(var i=0;i<this.vertices.length;i++){var vertex=this.vertices[i];vertices.push(vertex.x,vertex.y,vertex.z);}var faces=[];var normals=[];var normalsHash={};var colors=[];var colorsHash={};var uvs=[];var uvsHash={};for(var i=0;i<this.faces.length;i++){var face=this.faces[i];var hasMaterial=true;var hasFaceUv=false;// deprecated
var hasFaceVertexUv=this.faceVertexUvs[0][i]!==undefined;var hasFaceNormal=face.normal.length()>0;var hasFaceVertexNormal=face.vertexNormals.length>0;var hasFaceColor=face.color.r!==1||face.color.g!==1||face.color.b!==1;var hasFaceVertexColor=face.vertexColors.length>0;var faceType=0;faceType=setBit(faceType,0,0);// isQuad
faceType=setBit(faceType,1,hasMaterial);faceType=setBit(faceType,2,hasFaceUv);faceType=setBit(faceType,3,hasFaceVertexUv);faceType=setBit(faceType,4,hasFaceNormal);faceType=setBit(faceType,5,hasFaceVertexNormal);faceType=setBit(faceType,6,hasFaceColor);faceType=setBit(faceType,7,hasFaceVertexColor);faces.push(faceType);faces.push(face.a,face.b,face.c);faces.push(face.materialIndex);if(hasFaceVertexUv){var faceVertexUvs=this.faceVertexUvs[0][i];faces.push(getUvIndex(faceVertexUvs[0]),getUvIndex(faceVertexUvs[1]),getUvIndex(faceVertexUvs[2]));}if(hasFaceNormal){faces.push(getNormalIndex(face.normal));}if(hasFaceVertexNormal){var vertexNormals=face.vertexNormals;faces.push(getNormalIndex(vertexNormals[0]),getNormalIndex(vertexNormals[1]),getNormalIndex(vertexNormals[2]));}if(hasFaceColor){faces.push(getColorIndex(face.color));}if(hasFaceVertexColor){var vertexColors=face.vertexColors;faces.push(getColorIndex(vertexColors[0]),getColorIndex(vertexColors[1]),getColorIndex(vertexColors[2]));}}function setBit(value,position,enabled){return enabled?value|1<<position:value&~(1<<position);}function getNormalIndex(normal){var hash=normal.x.toString()+normal.y.toString()+normal.z.toString();if(normalsHash[hash]!==undefined){return normalsHash[hash];}normalsHash[hash]=normals.length/3;normals.push(normal.x,normal.y,normal.z);return normalsHash[hash];}function getColorIndex(color){var hash=color.r.toString()+color.g.toString()+color.b.toString();if(colorsHash[hash]!==undefined){return colorsHash[hash];}colorsHash[hash]=colors.length;colors.push(color.getHex());return colorsHash[hash];}function getUvIndex(uv){var hash=uv.x.toString()+uv.y.toString();if(uvsHash[hash]!==undefined){return uvsHash[hash];}uvsHash[hash]=uvs.length/2;uvs.push(uv.x,uv.y);return uvsHash[hash];}data.data={};data.data.vertices=vertices;data.data.normals=normals;if(colors.length>0)data.data.colors=colors;if(uvs.length>0)data.data.uvs=[uvs];// temporal backward compatibility
data.data.faces=faces;return data;},clone:function clone(){/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */return new Geometry().copy(this);},copy:function copy(source){var i,il,j,jl,k,kl;// reset
this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;// name
this.name=source.name;// vertices
var vertices=source.vertices;for(i=0,il=vertices.length;i<il;i++){this.vertices.push(vertices[i].clone());}// colors
var colors=source.colors;for(i=0,il=colors.length;i<il;i++){this.colors.push(colors[i].clone());}// faces
var faces=source.faces;for(i=0,il=faces.length;i<il;i++){this.faces.push(faces[i].clone());}// face vertex uvs
for(i=0,il=source.faceVertexUvs.length;i<il;i++){var faceVertexUvs=source.faceVertexUvs[i];if(this.faceVertexUvs[i]===undefined){this.faceVertexUvs[i]=[];}for(j=0,jl=faceVertexUvs.length;j<jl;j++){var uvs=faceVertexUvs[j],uvsCopy=[];for(k=0,kl=uvs.length;k<kl;k++){var uv=uvs[k];uvsCopy.push(uv.clone());}this.faceVertexUvs[i].push(uvsCopy);}}// morph targets
var morphTargets=source.morphTargets;for(i=0,il=morphTargets.length;i<il;i++){var morphTarget={};morphTarget.name=morphTargets[i].name;// vertices
if(morphTargets[i].vertices!==undefined){morphTarget.vertices=[];for(j=0,jl=morphTargets[i].vertices.length;j<jl;j++){morphTarget.vertices.push(morphTargets[i].vertices[j].clone());}}// normals
if(morphTargets[i].normals!==undefined){morphTarget.normals=[];for(j=0,jl=morphTargets[i].normals.length;j<jl;j++){morphTarget.normals.push(morphTargets[i].normals[j].clone());}}this.morphTargets.push(morphTarget);}// morph normals
var morphNormals=source.morphNormals;for(i=0,il=morphNormals.length;i<il;i++){var morphNormal={};// vertex normals
if(morphNormals[i].vertexNormals!==undefined){morphNormal.vertexNormals=[];for(j=0,jl=morphNormals[i].vertexNormals.length;j<jl;j++){var srcVertexNormal=morphNormals[i].vertexNormals[j];var destVertexNormal={};destVertexNormal.a=srcVertexNormal.a.clone();destVertexNormal.b=srcVertexNormal.b.clone();destVertexNormal.c=srcVertexNormal.c.clone();morphNormal.vertexNormals.push(destVertexNormal);}}// face normals
if(morphNormals[i].faceNormals!==undefined){morphNormal.faceNormals=[];for(j=0,jl=morphNormals[i].faceNormals.length;j<jl;j++){morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());}}this.morphNormals.push(morphNormal);}// skin weights
var skinWeights=source.skinWeights;for(i=0,il=skinWeights.length;i<il;i++){this.skinWeights.push(skinWeights[i].clone());}// skin indices
var skinIndices=source.skinIndices;for(i=0,il=skinIndices.length;i<il;i++){this.skinIndices.push(skinIndices[i].clone());}// line distances
var lineDistances=source.lineDistances;for(i=0,il=lineDistances.length;i<il;i++){this.lineDistances.push(lineDistances[i]);}// bounding box
var boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere
var boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// update flags
this.elementsNeedUpdate=source.elementsNeedUpdate;this.verticesNeedUpdate=source.verticesNeedUpdate;this.uvsNeedUpdate=source.uvsNeedUpdate;this.normalsNeedUpdate=source.normalsNeedUpdate;this.colorsNeedUpdate=source.colorsNeedUpdate;this.lineDistancesNeedUpdate=source.lineDistancesNeedUpdate;this.groupsNeedUpdate=source.groupsNeedUpdate;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */ // BoxGeometry
var BoxGeometry=/*#__PURE__*/function(_Geometry){_inherits$1(BoxGeometry,_Geometry);var _super=_createSuper$1(BoxGeometry);function BoxGeometry(width,height,depth,widthSegments,heightSegments,depthSegments){var _this2;_classCallCheck$1(this,BoxGeometry);_this2=_super.call(this);_this2.type='BoxGeometry';_this2.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};_this2.fromBufferGeometry(new BoxBufferGeometry(width,height,depth,widthSegments,heightSegments,depthSegments));_this2.mergeVertices();return _this2;}return _createClass$1(BoxGeometry);}(Geometry);// BoxBufferGeometry
var BoxBufferGeometry=/*#__PURE__*/function(_BufferGeometry){_inherits$1(BoxBufferGeometry,_BufferGeometry);var _super2=_createSuper$1(BoxBufferGeometry);function BoxBufferGeometry(width,height,depth,widthSegments,heightSegments,depthSegments){var _this3;_classCallCheck$1(this,BoxBufferGeometry);_this3=_super2.call(this);_this3.type='BoxBufferGeometry';_this3.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};var scope=_assertThisInitialized$1(_this3);width=width||1;height=height||1;depth=depth||1;// segments
widthSegments=Math.floor(widthSegments)||1;heightSegments=Math.floor(heightSegments)||1;depthSegments=Math.floor(depthSegments)||1;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var numberOfVertices=0;var groupStart=0;// build each side of the box geometry
buildPlane('z','y','x',-1,-1,depth,height,width,depthSegments,heightSegments,0);// px
buildPlane('z','y','x',1,-1,depth,height,-width,depthSegments,heightSegments,1);// nx
buildPlane('x','z','y',1,1,width,depth,height,widthSegments,depthSegments,2);// py
buildPlane('x','z','y',1,-1,width,depth,-height,widthSegments,depthSegments,3);// ny
buildPlane('x','y','z',1,-1,width,height,depth,widthSegments,heightSegments,4);// pz
buildPlane('x','y','z',-1,-1,width,height,-depth,widthSegments,heightSegments,5);// nz
// build geometry
_this3.setIndex(indices);_this3.setAttribute('position',new Float32BufferAttribute(vertices,3));_this3.setAttribute('normal',new Float32BufferAttribute(normals,3));_this3.setAttribute('uv',new Float32BufferAttribute(uvs,2));function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){var segmentWidth=width/gridX;var segmentHeight=height/gridY;var widthHalf=width/2;var heightHalf=height/2;var depthHalf=depth/2;var gridX1=gridX+1;var gridY1=gridY+1;var vertexCounter=0;var groupCount=0;var ix,iy;var vector=new Vector3();// generate vertices, normals and uvs
for(iy=0;iy<gridY1;iy++){var y=iy*segmentHeight-heightHalf;for(ix=0;ix<gridX1;ix++){var x=ix*segmentWidth-widthHalf;// set values to correct vector component
vector[u]=x*udir;vector[v]=y*vdir;vector[w]=depthHalf;// now apply vector to vertex buffer
vertices.push(vector.x,vector.y,vector.z);// set values to correct vector component
vector[u]=0;vector[v]=0;vector[w]=depth>0?1:-1;// now apply vector to normal buffer
normals.push(vector.x,vector.y,vector.z);// uvs
uvs.push(ix/gridX);uvs.push(1-iy/gridY);// counters
vertexCounter+=1;}}// indices
// 1. you need three indices to draw a single face
// 2. a single segment consists of two faces
// 3. so we need to generate six (2*3) indices per segment
for(iy=0;iy<gridY;iy++){for(ix=0;ix<gridX;ix++){var a=numberOfVertices+ix+gridX1*iy;var b=numberOfVertices+ix+gridX1*(iy+1);var c=numberOfVertices+(ix+1)+gridX1*(iy+1);var d=numberOfVertices+(ix+1)+gridX1*iy;// faces
indices.push(a,b,d);indices.push(b,c,d);// increase counter
groupCount+=6;}}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,materialIndex);// calculate new start value for groups
groupStart+=groupCount;// update total number of vertices
numberOfVertices+=vertexCounter;}return _this3;}return _createClass$1(BoxBufferGeometry);}(BufferGeometry);/**
 * Uniform Utilities
 */function cloneUniforms(src){var dst={};for(var u in src){dst[u]={};for(var p in src[u]){var property=src[u][p];if(property&&(property.isColor||property.isMatrix3||property.isMatrix4||property.isVector2||property.isVector3||property.isVector4||property.isTexture)){dst[u][p]=property.clone();}else if(Array.isArray(property)){dst[u][p]=property.slice();}else {dst[u][p]=property;}}}return dst;}function mergeUniforms(uniforms){var merged={};for(var u=0;u<uniforms.length;u++){var tmp=cloneUniforms(uniforms[u]);for(var p in tmp){merged[p]=tmp[p];}}return merged;}// Legacy
var UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex="void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}";var default_fragment="void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}";/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */function ShaderMaterial(parameters){Material.call(this);this.type='ShaderMaterial';this.defines={};this.uniforms={};this.vertexShader=default_vertex;this.fragmentShader=default_fragment;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;// set to use scene fog
this.lights=false;// set to use scene lights
this.clipping=false;// set to use user-defined clipping planes
this.skinning=false;// set to use skinning attribute streams
this.morphTargets=false;// set to use morph targets
this.morphNormals=false;// set to use morph normals
this.extensions={derivatives:false,// set to use derivatives
fragDepth:false,// set to use fragment depth values
drawBuffers:false,// set to use draw buffers
shaderTextureLOD:false// set to use shader texture LOD
};// When rendered geometry doesn't include these attributes but the material does,
// use these default values in WebGL. This avoids errors when buffer data is missing.
this.defaultAttributeValues={'color':[1,1,1],'uv':[0,0],'uv2':[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;if(parameters!==undefined){if(parameters.attributes!==undefined){console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');}this.setValues(parameters);}}ShaderMaterial.prototype=Object.create(Material.prototype);ShaderMaterial.prototype.constructor=ShaderMaterial;ShaderMaterial.prototype.isShaderMaterial=true;ShaderMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.fragmentShader=source.fragmentShader;this.vertexShader=source.vertexShader;this.uniforms=cloneUniforms(source.uniforms);this.defines=Object.assign({},source.defines);this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.lights=source.lights;this.clipping=source.clipping;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;this.extensions=source.extensions;return this;};ShaderMaterial.prototype.toJSON=function(meta){var data=Material.prototype.toJSON.call(this,meta);data.uniforms={};for(var name in this.uniforms){var uniform=this.uniforms[name];var value=uniform.value;if(value&&value.isTexture){data.uniforms[name]={type:'t',value:value.toJSON(meta).uuid};}else if(value&&value.isColor){data.uniforms[name]={type:'c',value:value.getHex()};}else if(value&&value.isVector2){data.uniforms[name]={type:'v2',value:value.toArray()};}else if(value&&value.isVector3){data.uniforms[name]={type:'v3',value:value.toArray()};}else if(value&&value.isVector4){data.uniforms[name]={type:'v4',value:value.toArray()};}else if(value&&value.isMatrix3){data.uniforms[name]={type:'m3',value:value.toArray()};}else if(value&&value.isMatrix4){data.uniforms[name]={type:'m4',value:value.toArray()};}else {data.uniforms[name]={value:value};// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
}}if(Object.keys(this.defines).length>0)data.defines=this.defines;data.vertexShader=this.vertexShader;data.fragmentShader=this.fragmentShader;var extensions={};for(var key in this.extensions){if(this.extensions[key]===true)extensions[key]=true;}if(Object.keys(extensions).length>0)data.extensions=extensions;return data;};/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/function Camera(){Object3D.call(this);this.type='Camera';this.matrixWorldInverse=new Matrix4();this.projectionMatrix=new Matrix4();this.projectionMatrixInverse=new Matrix4();}Camera.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Camera,isCamera:true,copy:function copy(source,recursive){Object3D.prototype.copy.call(this,source,recursive);this.matrixWorldInverse.copy(source.matrixWorldInverse);this.projectionMatrix.copy(source.projectionMatrix);this.projectionMatrixInverse.copy(source.projectionMatrixInverse);return this;},getWorldDirection:function getWorldDirection(target){if(target===undefined){console.warn('THREE.Camera: .getWorldDirection() target is now required');target=new Vector3();}this.updateMatrixWorld(true);var e=this.matrixWorld.elements;return target.set(-e[8],-e[9],-e[10]).normalize();},updateMatrixWorld:function updateMatrixWorld(force){Object3D.prototype.updateMatrixWorld.call(this,force);this.matrixWorldInverse.getInverse(this.matrixWorld);},updateWorldMatrix:function updateWorldMatrix(updateParents,updateChildren){Object3D.prototype.updateWorldMatrix.call(this,updateParents,updateChildren);this.matrixWorldInverse.getInverse(this.matrixWorld);},clone:function clone(){return new this.constructor().copy(this);}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author tschw
 */function PerspectiveCamera(fov,aspect,near,far){Camera.call(this);this.type='PerspectiveCamera';this.fov=fov!==undefined?fov:50;this.zoom=1;this.near=near!==undefined?near:0.1;this.far=far!==undefined?far:2000;this.focus=10;this.aspect=aspect!==undefined?aspect:1;this.view=null;this.filmGauge=35;// width of the film (default in millimeters)
this.filmOffset=0;// horizontal film offset (same unit as gauge)
this.updateProjectionMatrix();}PerspectiveCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:PerspectiveCamera,isPerspectiveCamera:true,copy:function copy(source,recursive){Camera.prototype.copy.call(this,source,recursive);this.fov=source.fov;this.zoom=source.zoom;this.near=source.near;this.far=source.far;this.focus=source.focus;this.aspect=source.aspect;this.view=source.view===null?null:Object.assign({},source.view);this.filmGauge=source.filmGauge;this.filmOffset=source.filmOffset;return this;},/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */setFocalLength:function setFocalLength(focalLength){// see http://www.bobatkins.com/photography/technical/field_of_view.html
var vExtentSlope=0.5*this.getFilmHeight()/focalLength;this.fov=MathUtils.RAD2DEG*2*Math.atan(vExtentSlope);this.updateProjectionMatrix();},/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */getFocalLength:function getFocalLength(){var vExtentSlope=Math.tan(MathUtils.DEG2RAD*0.5*this.fov);return 0.5*this.getFilmHeight()/vExtentSlope;},getEffectiveFOV:function getEffectiveFOV(){return MathUtils.RAD2DEG*2*Math.atan(Math.tan(MathUtils.DEG2RAD*0.5*this.fov)/this.zoom);},getFilmWidth:function getFilmWidth(){// film not completely covered in portrait format (aspect < 1)
return this.filmGauge*Math.min(this.aspect,1);},getFilmHeight:function getFilmHeight(){// film not completely covered in landscape format (aspect > 1)
return this.filmGauge/Math.max(this.aspect,1);},/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   var w = 1920;
	 *   var h = 1080;
	 *   var fullWidth = w * 3;
	 *   var fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */setViewOffset:function setViewOffset(fullWidth,fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();},clearViewOffset:function clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();},updateProjectionMatrix:function updateProjectionMatrix(){var near=this.near,top=near*Math.tan(MathUtils.DEG2RAD*0.5*this.fov)/this.zoom,height=2*top,width=this.aspect*height,left=-0.5*width,view=this.view;if(this.view!==null&&this.view.enabled){var fullWidth=view.fullWidth,fullHeight=view.fullHeight;left+=view.offsetX*width/fullWidth;top-=view.offsetY*height/fullHeight;width*=view.width/fullWidth;height*=view.height/fullHeight;}var skew=this.filmOffset;if(skew!==0)left+=near*skew/this.getFilmWidth();this.projectionMatrix.makePerspective(left,left+width,top,top-height,near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix);},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.fov=this.fov;data.object.zoom=this.zoom;data.object.near=this.near;data.object.far=this.far;data.object.focus=this.focus;data.object.aspect=this.aspect;if(this.view!==null)data.object.view=Object.assign({},this.view);data.object.filmGauge=this.filmGauge;data.object.filmOffset=this.filmOffset;return data;}});/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */var fov=90,aspect=1;function CubeCamera(near,far,cubeResolution,options){Object3D.call(this);this.type='CubeCamera';var cameraPX=new PerspectiveCamera(fov,aspect,near,far);cameraPX.up.set(0,-1,0);cameraPX.lookAt(new Vector3(1,0,0));this.add(cameraPX);var cameraNX=new PerspectiveCamera(fov,aspect,near,far);cameraNX.up.set(0,-1,0);cameraNX.lookAt(new Vector3(-1,0,0));this.add(cameraNX);var cameraPY=new PerspectiveCamera(fov,aspect,near,far);cameraPY.up.set(0,0,1);cameraPY.lookAt(new Vector3(0,1,0));this.add(cameraPY);var cameraNY=new PerspectiveCamera(fov,aspect,near,far);cameraNY.up.set(0,0,-1);cameraNY.lookAt(new Vector3(0,-1,0));this.add(cameraNY);var cameraPZ=new PerspectiveCamera(fov,aspect,near,far);cameraPZ.up.set(0,-1,0);cameraPZ.lookAt(new Vector3(0,0,1));this.add(cameraPZ);var cameraNZ=new PerspectiveCamera(fov,aspect,near,far);cameraNZ.up.set(0,-1,0);cameraNZ.lookAt(new Vector3(0,0,-1));this.add(cameraNZ);options=options||{format:RGBFormat,magFilter:LinearFilter,minFilter:LinearFilter};this.renderTarget=new WebGLCubeRenderTarget(cubeResolution,options);this.renderTarget.texture.name="CubeCamera";this.update=function(renderer,scene){if(this.parent===null)this.updateMatrixWorld();var currentRenderTarget=renderer.getRenderTarget();var renderTarget=this.renderTarget;var generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=false;renderer.setRenderTarget(renderTarget,0);renderer.render(scene,cameraPX);renderer.setRenderTarget(renderTarget,1);renderer.render(scene,cameraNX);renderer.setRenderTarget(renderTarget,2);renderer.render(scene,cameraPY);renderer.setRenderTarget(renderTarget,3);renderer.render(scene,cameraNY);renderer.setRenderTarget(renderTarget,4);renderer.render(scene,cameraPZ);renderTarget.texture.generateMipmaps=generateMipmaps;renderer.setRenderTarget(renderTarget,5);renderer.render(scene,cameraNZ);renderer.setRenderTarget(currentRenderTarget);};this.clear=function(renderer,color,depth,stencil){var currentRenderTarget=renderer.getRenderTarget();var renderTarget=this.renderTarget;for(var i=0;i<6;i++){renderer.setRenderTarget(renderTarget,i);renderer.clear(color,depth,stencil);}renderer.setRenderTarget(currentRenderTarget);};}CubeCamera.prototype=Object.create(Object3D.prototype);CubeCamera.prototype.constructor=CubeCamera;/**
 * @author alteredq / http://alteredqualia.com
 * @author WestLangley / http://github.com/WestLangley
 */function WebGLCubeRenderTarget(size,options,dummy){if(Number.isInteger(options)){console.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');options=dummy;}WebGLRenderTarget.call(this,size,size,options);}WebGLCubeRenderTarget.prototype=Object.create(WebGLRenderTarget.prototype);WebGLCubeRenderTarget.prototype.constructor=WebGLCubeRenderTarget;WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget=true;WebGLCubeRenderTarget.prototype.fromEquirectangularTexture=function(renderer,texture){this.texture.type=texture.type;this.texture.format=texture.format;this.texture.encoding=texture.encoding;var scene=new Scene();var shader={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","	vWorldDirection = transformDirection( position, modelMatrix );","	#include <begin_vertex>","	#include <project_vertex>","}"].join('\\n'),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","	vec3 direction = normalize( vWorldDirection );","	vec2 sampleUV;","	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","	gl_FragColor = texture2D( tEquirect, sampleUV );","}"].join('\\n')};var material=new ShaderMaterial({type:'CubemapFromEquirect',uniforms:cloneUniforms(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,side:BackSide,blending:NoBlending});material.uniforms.tEquirect.value=texture;var mesh=new Mesh(new BoxBufferGeometry(5,5,5),material);scene.add(mesh);var camera=new CubeCamera(1,10,1);camera.renderTarget=this;camera.renderTarget.texture.name='CubeCameraTexture';camera.update(renderer,scene);mesh.geometry.dispose();mesh.material.dispose();return this;};/**
 * @author alteredq / http://alteredqualia.com/
 */function DataTexture(data,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={data:data||null,width:width||1,height:height||1};this.magFilter=magFilter!==undefined?magFilter:NearestFilter;this.minFilter=minFilter!==undefined?minFilter:NearestFilter;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;this.needsUpdate=true;}DataTexture.prototype=Object.create(Texture.prototype);DataTexture.prototype.constructor=DataTexture;DataTexture.prototype.isDataTexture=true;/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://clara.io
 */var _sphere$1=new Sphere();var _vector$5=new Vector3();function Frustum(p0,p1,p2,p3,p4,p5){this.planes=[p0!==undefined?p0:new Plane(),p1!==undefined?p1:new Plane(),p2!==undefined?p2:new Plane(),p3!==undefined?p3:new Plane(),p4!==undefined?p4:new Plane(),p5!==undefined?p5:new Plane()];}Object.assign(Frustum.prototype,{set:function set(p0,p1,p2,p3,p4,p5){var planes=this.planes;planes[0].copy(p0);planes[1].copy(p1);planes[2].copy(p2);planes[3].copy(p3);planes[4].copy(p4);planes[5].copy(p5);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(frustum){var planes=this.planes;for(var i=0;i<6;i++){planes[i].copy(frustum.planes[i]);}return this;},setFromProjectionMatrix:function setFromProjectionMatrix(m){var planes=this.planes;var me=m.elements;var me0=me[0],me1=me[1],me2=me[2],me3=me[3];var me4=me[4],me5=me[5],me6=me[6],me7=me[7];var me8=me[8],me9=me[9],me10=me[10],me11=me[11];var me12=me[12],me13=me[13],me14=me[14],me15=me[15];planes[0].setComponents(me3-me0,me7-me4,me11-me8,me15-me12).normalize();planes[1].setComponents(me3+me0,me7+me4,me11+me8,me15+me12).normalize();planes[2].setComponents(me3+me1,me7+me5,me11+me9,me15+me13).normalize();planes[3].setComponents(me3-me1,me7-me5,me11-me9,me15-me13).normalize();planes[4].setComponents(me3-me2,me7-me6,me11-me10,me15-me14).normalize();planes[5].setComponents(me3+me2,me7+me6,me11+me10,me15+me14).normalize();return this;},intersectsObject:function intersectsObject(object){var geometry=object.geometry;if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);return this.intersectsSphere(_sphere$1);},intersectsSprite:function intersectsSprite(sprite){_sphere$1.center.set(0,0,0);_sphere$1.radius=0.7071067811865476;_sphere$1.applyMatrix4(sprite.matrixWorld);return this.intersectsSphere(_sphere$1);},intersectsSphere:function intersectsSphere(sphere){var planes=this.planes;var center=sphere.center;var negRadius=-sphere.radius;for(var i=0;i<6;i++){var distance=planes[i].distanceToPoint(center);if(distance<negRadius){return false;}}return true;},intersectsBox:function intersectsBox(box){var planes=this.planes;for(var i=0;i<6;i++){var plane=planes[i];// corner at max distance
_vector$5.x=plane.normal.x>0?box.max.x:box.min.x;_vector$5.y=plane.normal.y>0?box.max.y:box.min.y;_vector$5.z=plane.normal.z>0?box.max.z:box.min.z;if(plane.distanceToPoint(_vector$5)<0){return false;}}return true;},containsPoint:function containsPoint(point){var planes=this.planes;for(var i=0;i<6;i++){if(planes[i].distanceToPoint(point)<0){return false;}}return true;}});/**
 * Uniforms library for shared webgl shaders
 */var UniformsLib={common:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},map:{value:null},uvTransform:{value:new Matrix3()},uv2Transform:{value:new Matrix3()},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1.0},refractionRatio:{value:0.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:0.00025},fogNear:{value:1},fogFar:{value:2000},fogColor:{value:new Color(0xffffff)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},size:{value:1.0},scale:{value:1.0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3()}},sprite:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},center:{value:new Vector2(0.5,0.5)},rotation:{value:0.0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3()}}};/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLAnimation(){var context=null;var isAnimating=false;var animationLoop=null;function onAnimationFrame(time,frame){if(isAnimating===false)return;animationLoop(time,frame);context.requestAnimationFrame(onAnimationFrame);}return {start:function start(){if(isAnimating===true)return;if(animationLoop===null)return;context.requestAnimationFrame(onAnimationFrame);isAnimating=true;},stop:function stop(){isAnimating=false;},setAnimationLoop:function setAnimationLoop(callback){animationLoop=callback;},setContext:function setContext(value){context=value;}};}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLAttributes(gl,capabilities){var isWebGL2=capabilities.isWebGL2;var buffers=new WeakMap();function createBuffer(attribute,bufferType){var array=attribute.array;var usage=attribute.usage;var buffer=gl.createBuffer();gl.bindBuffer(bufferType,buffer);gl.bufferData(bufferType,array,usage);attribute.onUploadCallback();var type=5126;if(array instanceof Float32Array){type=5126;}else if(array instanceof Float64Array){console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');}else if(array instanceof Uint16Array){type=5123;}else if(array instanceof Int16Array){type=5122;}else if(array instanceof Uint32Array){type=5125;}else if(array instanceof Int32Array){type=5124;}else if(array instanceof Int8Array){type=5120;}else if(array instanceof Uint8Array){type=5121;}return {buffer:buffer,type:type,bytesPerElement:array.BYTES_PER_ELEMENT,version:attribute.version};}function updateBuffer(buffer,attribute,bufferType){var array=attribute.array;var updateRange=attribute.updateRange;gl.bindBuffer(bufferType,buffer);if(updateRange.count===-1){// Not using update ranges
gl.bufferSubData(bufferType,0,array);}else {if(isWebGL2){gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array,updateRange.offset,updateRange.count);}else {gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array.subarray(updateRange.offset,updateRange.offset+updateRange.count));}updateRange.count=-1;// reset range
}}//
function get(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;return buffers.get(attribute);}function remove(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;var data=buffers.get(attribute);if(data){gl.deleteBuffer(data.buffer);buffers.delete(attribute);}}function update(attribute,bufferType){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;var data=buffers.get(attribute);if(data===undefined){buffers.set(attribute,createBuffer(attribute,bufferType));}else if(data.version<attribute.version){updateBuffer(data.buffer,attribute,bufferType);data.version=attribute.version;}}return {get:get,remove:remove,update:update};}/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */ // PlaneGeometry
function PlaneGeometry(width,height,widthSegments,heightSegments){Geometry.call(this);this.type='PlaneGeometry';this.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};this.fromBufferGeometry(new PlaneBufferGeometry(width,height,widthSegments,heightSegments));this.mergeVertices();}PlaneGeometry.prototype=Object.create(Geometry.prototype);PlaneGeometry.prototype.constructor=PlaneGeometry;// PlaneBufferGeometry
function PlaneBufferGeometry(width,height,widthSegments,heightSegments){BufferGeometry.call(this);this.type='PlaneBufferGeometry';this.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};width=width||1;height=height||1;var width_half=width/2;var height_half=height/2;var gridX=Math.floor(widthSegments)||1;var gridY=Math.floor(heightSegments)||1;var gridX1=gridX+1;var gridY1=gridY+1;var segment_width=width/gridX;var segment_height=height/gridY;var ix,iy;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// generate vertices, normals and uvs
for(iy=0;iy<gridY1;iy++){var y=iy*segment_height-height_half;for(ix=0;ix<gridX1;ix++){var x=ix*segment_width-width_half;vertices.push(x,-y,0);normals.push(0,0,1);uvs.push(ix/gridX);uvs.push(1-iy/gridY);}}// indices
for(iy=0;iy<gridY;iy++){for(ix=0;ix<gridX;ix++){var a=ix+gridX1*iy;var b=ix+gridX1*(iy+1);var c=ix+1+gridX1*(iy+1);var d=ix+1+gridX1*iy;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}PlaneBufferGeometry.prototype=Object.create(BufferGeometry.prototype);PlaneBufferGeometry.prototype.constructor=PlaneBufferGeometry;var alphamap_fragment="#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif";var alphatest_fragment="#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif";var aomap_fragment="#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif";var aomap_pars_fragment="#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif";var begin_vertex="vec3 transformed = vec3( position );";var beginnormal_vertex="vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif";var bsdfs="vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif";var color_fragment="#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif";var color_pars_fragment="#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif";var color_pars_vertex="#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif";var color_vertex="#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif";var common="#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_maxMipLevel 8.0\\n#define cubeUV_minMipLevel 4.0\\n#define cubeUV_maxTileSize 256.0\\n#define cubeUV_minTileSize 16.0\\nfloat getFace(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    float face = -1.0;\\n    if (absDirection.x > absDirection.z) {\\n      if (absDirection.x > absDirection.y)\\n        face = direction.x > 0.0 ? 0.0 : 3.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    } else {\\n      if (absDirection.z > absDirection.y)\\n        face = direction.z > 0.0 ? 2.0 : 5.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    }\\n    return face;\\n}\\nvec2 getUV(vec3 direction, float face) {\\n    vec2 uv;\\n    if (face == 0.0) {\\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 1.0) {\\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\\n    } else if (face == 2.0) {\\n      uv = direction.xy / abs(direction.z);\\n    } else if (face == 3.0) {\\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 4.0) {\\n      uv = direction.xz / abs(direction.y);\\n    } else {\\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\\n    }\\n    return 0.5 * (uv + 1.0);\\n}\\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\\n  float face = getFace(direction);\\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\\n  mipInt = max(mipInt, cubeUV_minMipLevel);\\n  float faceSize = exp2(mipInt);\\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\\n  vec2 f = fract(uv);\\n  uv += 0.5 - f;\\n  if (face > 2.0) {\\n    uv.y += faceSize;\\n    face -= 3.0;\\n  }\\n  uv.x += face * faceSize;\\n  if(mipInt < cubeUV_maxMipLevel){\\n    uv.y += 2.0 * cubeUV_maxTileSize;\\n  }\\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\\n  uv *= texelSize;\\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x += texelSize;\\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.y += texelSize;\\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x -= texelSize;\\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  vec3 tm = mix(tl, tr, f.x);\\n  vec3 bm = mix(bl, br, f.x);\\n  return mix(tm, bm, f.y);\\n}\\n#define r0 1.0\\n#define v0 0.339\\n#define m0 -2.0\\n#define r1 0.8\\n#define v1 0.276\\n#define m1 -1.0\\n#define r4 0.4\\n#define v4 0.046\\n#define m4 2.0\\n#define r5 0.305\\n#define v5 0.016\\n#define m5 3.0\\n#define r6 0.21\\n#define v6 0.0038\\n#define m6 4.0\\nfloat roughnessToMip(float roughness) {\\n  float mip = 0.0;\\n  if (roughness >= r1) {\\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\\n  } else if (roughness >= r4) {\\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\\n  } else if (roughness >= r5) {\\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\\n  } else if (roughness >= r6) {\\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\\n  } else {\\n    mip = -2.0 * log2(1.16 * roughness);  }\\n  return mip;\\n}\\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\\n  float mipF = fract(mip);\\n  float mipInt = floor(mip);\\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\\n  if (mipF == 0.0) {\\n    return vec4(color0, 1.0);\\n  } else {\\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\\n    return vec4(mix(color0, color1, mipF), 1.0);\\n  }\\n}\\n#endif";var defaultnormal_vertex="vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif";var encodings_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );";var encodings_pars_fragment="\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}";var envmap_fragment="#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif";var envmap_common_pars_fragment="#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif";var envmap_pars_fragment="#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif";var envmap_pars_vertex="#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif";var envmap_vertex="#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif";var fog_vertex="#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif";var fog_pars_vertex="#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif";var fog_fragment="#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif";var fog_pars_fragment="#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif";var gradientmap_pars_fragment="#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}";var lightmap_fragment="#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif";var lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif";var lights_pars_begin="uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif";var envmap_physical_pars_fragment="#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif";var lights_toon_fragment="ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;";var lights_toon_pars_fragment="varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)";var lights_phong_fragment="BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;";var lights_phong_pars_fragment="varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)";var lights_physical_fragment="PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = max( clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif";var lights_physical_pars_fragment="struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}";var lights_fragment_begin="\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif";var map_fragment="#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif";var map_pars_fragment="#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif";var map_particle_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif";var map_particle_pars_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif";var metalnessmap_fragment="float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif";var normal_fragment_begin="#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;";var normal_fragment_maps="#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif";var clearcoat_normal_fragment_begin="#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif";var clearcoat_normal_fragment_maps="#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif";var clearcoat_normalmap_pars_fragment="#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif";var project_vertex="vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;";var dithering_fragment="#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif";var dithering_pars_fragment="#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif";var roughnessmap_fragment="float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif";var shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif";var shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif";var shadowmap_vertex="#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif";var shadowmask_pars_fragment="float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}";var skinbase_vertex="#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif";var skinning_vertex="#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif";var skinnormal_vertex="#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif";var specularmap_fragment="float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif";var tonemapping_pars_fragment="#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}";var uv_pars_fragment="#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif";var uv_pars_vertex="#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif";var uv_vertex="#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif";var uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif";var uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif";var uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif";var background_frag="uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}";var background_vert="varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}";var cube_frag="#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}";var cube_vert="varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}";var depth_frag="#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}";var depth_vert="#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}";var distanceRGBA_frag="#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}";var distanceRGBA_vert="#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}";var equirect_frag="uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}";var equirect_vert="varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}";var linedashed_frag="uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}";var linedashed_vert="uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}";var meshbasic_frag="uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}";var meshbasic_vert="#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}";var meshlambert_frag="uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}";var meshlambert_vert="#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}";var meshmatcap_frag="#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}";var meshmatcap_vert="#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}";var meshtoon_frag="#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}";var meshtoon_vert="#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}";var meshphong_frag="#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}";var meshphong_vert="#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}";var meshphysical_frag="#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}";var meshphysical_vert="#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}";var normal_frag="#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}";var normal_vert="#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}";var points_frag="uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}";var points_vert="uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}";var shadow_frag="uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}";var shadow_vert="#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}";var sprite_frag="uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}";var sprite_vert="uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}";var ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_normalmap_pars_fragment:clearcoat_normalmap_pars_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,background_frag:background_frag,background_vert:background_vert,cube_frag:cube_frag,cube_vert:cube_vert,depth_frag:depth_frag,depth_vert:depth_vert,distanceRGBA_frag:distanceRGBA_frag,distanceRGBA_vert:distanceRGBA_vert,equirect_frag:equirect_frag,equirect_vert:equirect_vert,linedashed_frag:linedashed_frag,linedashed_vert:linedashed_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshlambert_frag:meshlambert_frag,meshlambert_vert:meshlambert_vert,meshmatcap_frag:meshmatcap_frag,meshmatcap_vert:meshmatcap_vert,meshtoon_frag:meshtoon_frag,meshtoon_vert:meshtoon_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert,meshphysical_frag:meshphysical_frag,meshphysical_vert:meshphysical_vert,normal_frag:normal_frag,normal_vert:normal_vert,points_frag:points_frag,points_vert:points_vert,shadow_frag:shadow_frag,shadow_vert:shadow_vert,sprite_frag:sprite_frag,sprite_vert:sprite_vert};/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */var ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},specular:{value:new Color(0x111111)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},roughness:{value:0.5},metalness:{value:0.5},envMapIntensity:{value:1}// temporary
}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},specular:{value:new Color(0x111111)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.normal_vert,fragmentShader:ShaderChunk.normal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3()},t2D:{value:null}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */cube:{uniforms:mergeUniforms([UniformsLib.envmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3()},nearDistance:{value:1},farDistance:{value:1000}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0x00000)},opacity:{value:1.0}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{transparency:{value:0},clearcoat:{value:0},clearcoatRoughness:{value:0},sheen:{value:new Color(0x000000)},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatNormalMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLBackground(renderer,state,objects,premultipliedAlpha){var clearColor=new Color(0x000000);var clearAlpha=0;var planeMesh;var boxMesh;var currentBackground=null;var currentBackgroundVersion=0;var currentTonemapping=null;function render(renderList,scene,camera,forceClear){var background=scene.background;// Ignore background in AR
// TODO: Reconsider this.
var xr=renderer.xr;var session=xr.getSession&&xr.getSession();if(session&&session.environmentBlendMode==='additive'){background=null;}if(background===null){setClear(clearColor,clearAlpha);}else if(background&&background.isColor){setClear(background,1);forceClear=true;}if(renderer.autoClear||forceClear){renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil);}if(background&&(background.isCubeTexture||background.isWebGLCubeRenderTarget||background.mapping===CubeUVReflectionMapping)){if(boxMesh===undefined){boxMesh=new Mesh(new BoxBufferGeometry(1,1,1),new ShaderMaterial({type:'BackgroundCubeMaterial',uniforms:cloneUniforms(ShaderLib.cube.uniforms),vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:false,depthWrite:false,fog:false}));boxMesh.geometry.deleteAttribute('normal');boxMesh.geometry.deleteAttribute('uv');boxMesh.onBeforeRender=function(renderer,scene,camera){this.matrixWorld.copyPosition(camera.matrixWorld);};// enable code injection for non-built-in material
Object.defineProperty(boxMesh.material,'envMap',{get:function get(){return this.uniforms.envMap.value;}});objects.update(boxMesh);}var texture=background.isWebGLCubeRenderTarget?background.texture:background;boxMesh.material.uniforms.envMap.value=texture;boxMesh.material.uniforms.flipEnvMap.value=texture.isCubeTexture?-1:1;if(currentBackground!==background||currentBackgroundVersion!==texture.version||currentTonemapping!==renderer.toneMapping){boxMesh.material.needsUpdate=true;currentBackground=background;currentBackgroundVersion=texture.version;currentTonemapping=renderer.toneMapping;}// push to the pre-sorted opaque render list
renderList.unshift(boxMesh,boxMesh.geometry,boxMesh.material,0,0,null);}else if(background&&background.isTexture){if(planeMesh===undefined){planeMesh=new Mesh(new PlaneBufferGeometry(2,2),new ShaderMaterial({type:'BackgroundMaterial',uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:false,depthWrite:false,fog:false}));planeMesh.geometry.deleteAttribute('normal');// enable code injection for non-built-in material
Object.defineProperty(planeMesh.material,'map',{get:function get(){return this.uniforms.t2D.value;}});objects.update(planeMesh);}planeMesh.material.uniforms.t2D.value=background;if(background.matrixAutoUpdate===true){background.updateMatrix();}planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping){planeMesh.material.needsUpdate=true;currentBackground=background;currentBackgroundVersion=background.version;currentTonemapping=renderer.toneMapping;}// push to the pre-sorted opaque render list
renderList.unshift(planeMesh,planeMesh.geometry,planeMesh.material,0,0,null);}}function setClear(color,alpha){state.buffers.color.setClear(color.r,color.g,color.b,alpha,premultipliedAlpha);}return {getClearColor:function getClearColor(){return clearColor;},setClearColor:function setClearColor(color,alpha){clearColor.set(color);clearAlpha=alpha!==undefined?alpha:1;setClear(clearColor,clearAlpha);},getClearAlpha:function getClearAlpha(){return clearAlpha;},setClearAlpha:function setClearAlpha(alpha){clearAlpha=alpha;setClear(clearColor,clearAlpha);},render:render};}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLBufferRenderer(gl,extensions,info,capabilities){var isWebGL2=capabilities.isWebGL2;var mode;function setMode(value){mode=value;}function render(start,count){gl.drawArrays(mode,start,count);info.update(count,mode);}function renderInstances(geometry,start,count,primcount){if(primcount===0)return;var extension,methodName;if(isWebGL2){extension=gl;methodName='drawArraysInstanced';}else {extension=extensions.get('ANGLE_instanced_arrays');methodName='drawArraysInstancedANGLE';if(extension===null){console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[methodName](mode,start,count,primcount);info.update(count,mode,primcount);}//
this.setMode=setMode;this.render=render;this.renderInstances=renderInstances;}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLCapabilities(gl,extensions,parameters){var maxAnisotropy;function getMaxAnisotropy(){if(maxAnisotropy!==undefined)return maxAnisotropy;var extension=extensions.get('EXT_texture_filter_anisotropic');if(extension!==null){maxAnisotropy=gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);}else {maxAnisotropy=0;}return maxAnisotropy;}function getMaxPrecision(precision){if(precision==='highp'){if(gl.getShaderPrecisionFormat(35633,36338).precision>0&&gl.getShaderPrecisionFormat(35632,36338).precision>0){return 'highp';}precision='mediump';}if(precision==='mediump'){if(gl.getShaderPrecisionFormat(35633,36337).precision>0&&gl.getShaderPrecisionFormat(35632,36337).precision>0){return 'mediump';}}return 'lowp';}/* eslint-disable no-undef */var isWebGL2=typeof WebGL2RenderingContext!=='undefined'&&gl instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!=='undefined'&&gl instanceof WebGL2ComputeRenderingContext;/* eslint-enable no-undef */var precision=parameters.precision!==undefined?parameters.precision:'highp';var maxPrecision=getMaxPrecision(precision);if(maxPrecision!==precision){console.warn('THREE.WebGLRenderer:',precision,'not supported, using',maxPrecision,'instead.');precision=maxPrecision;}var logarithmicDepthBuffer=parameters.logarithmicDepthBuffer===true;var maxTextures=gl.getParameter(34930);var maxVertexTextures=gl.getParameter(35660);var maxTextureSize=gl.getParameter(3379);var maxCubemapSize=gl.getParameter(34076);var maxAttributes=gl.getParameter(34921);var maxVertexUniforms=gl.getParameter(36347);var maxVaryings=gl.getParameter(36348);var maxFragmentUniforms=gl.getParameter(36349);var vertexTextures=maxVertexTextures>0;var floatFragmentTextures=isWebGL2||!!extensions.get('OES_texture_float');var floatVertexTextures=vertexTextures&&floatFragmentTextures;var maxSamples=isWebGL2?gl.getParameter(36183):0;return {isWebGL2:isWebGL2,getMaxAnisotropy:getMaxAnisotropy,getMaxPrecision:getMaxPrecision,precision:precision,logarithmicDepthBuffer:logarithmicDepthBuffer,maxTextures:maxTextures,maxVertexTextures:maxVertexTextures,maxTextureSize:maxTextureSize,maxCubemapSize:maxCubemapSize,maxAttributes:maxAttributes,maxVertexUniforms:maxVertexUniforms,maxVaryings:maxVaryings,maxFragmentUniforms:maxFragmentUniforms,vertexTextures:vertexTextures,floatFragmentTextures:floatFragmentTextures,floatVertexTextures:floatVertexTextures,maxSamples:maxSamples};}/**
 * @author tschw
 */function WebGLClipping(){var scope=this,globalState=null,numGlobalPlanes=0,localClippingEnabled=false,renderingShadows=false,plane=new Plane(),viewNormalMatrix=new Matrix3(),uniform={value:null,needsUpdate:false};this.uniform=uniform;this.numPlanes=0;this.numIntersection=0;this.init=function(planes,enableLocalClipping,camera){var enabled=planes.length!==0||enableLocalClipping||// enable state of previous frame - the clipping code has to
// run another frame in order to reset the state:
numGlobalPlanes!==0||localClippingEnabled;localClippingEnabled=enableLocalClipping;globalState=projectPlanes(planes,camera,0);numGlobalPlanes=planes.length;return enabled;};this.beginShadows=function(){renderingShadows=true;projectPlanes(null);};this.endShadows=function(){renderingShadows=false;resetGlobalState();};this.setState=function(planes,clipIntersection,clipShadows,camera,cache,fromCache){if(!localClippingEnabled||planes===null||planes.length===0||renderingShadows&&!clipShadows){// there's no local clipping
if(renderingShadows){// there's no global clipping
projectPlanes(null);}else {resetGlobalState();}}else {var nGlobal=renderingShadows?0:numGlobalPlanes,lGlobal=nGlobal*4,dstArray=cache.clippingState||null;uniform.value=dstArray;// ensure unique state
dstArray=projectPlanes(planes,camera,lGlobal,fromCache);for(var i=0;i!==lGlobal;++i){dstArray[i]=globalState[i];}cache.clippingState=dstArray;this.numIntersection=clipIntersection?this.numPlanes:0;this.numPlanes+=nGlobal;}};function resetGlobalState(){if(uniform.value!==globalState){uniform.value=globalState;uniform.needsUpdate=numGlobalPlanes>0;}scope.numPlanes=numGlobalPlanes;scope.numIntersection=0;}function projectPlanes(planes,camera,dstOffset,skipTransform){var nPlanes=planes!==null?planes.length:0,dstArray=null;if(nPlanes!==0){dstArray=uniform.value;if(skipTransform!==true||dstArray===null){var flatSize=dstOffset+nPlanes*4,viewMatrix=camera.matrixWorldInverse;viewNormalMatrix.getNormalMatrix(viewMatrix);if(dstArray===null||dstArray.length<flatSize){dstArray=new Float32Array(flatSize);}for(var i=0,i4=dstOffset;i!==nPlanes;++i,i4+=4){plane.copy(planes[i]).applyMatrix4(viewMatrix,viewNormalMatrix);plane.normal.toArray(dstArray,i4);dstArray[i4+3]=plane.constant;}}uniform.value=dstArray;uniform.needsUpdate=true;}scope.numPlanes=nPlanes;return dstArray;}}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLExtensions(gl){var extensions={};return {get:function get(name){if(extensions[name]!==undefined){return extensions[name];}var extension;switch(name){case'WEBGL_depth_texture':extension=gl.getExtension('WEBGL_depth_texture')||gl.getExtension('MOZ_WEBGL_depth_texture')||gl.getExtension('WEBKIT_WEBGL_depth_texture');break;case'EXT_texture_filter_anisotropic':extension=gl.getExtension('EXT_texture_filter_anisotropic')||gl.getExtension('MOZ_EXT_texture_filter_anisotropic')||gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');break;case'WEBGL_compressed_texture_s3tc':extension=gl.getExtension('WEBGL_compressed_texture_s3tc')||gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');break;case'WEBGL_compressed_texture_pvrtc':extension=gl.getExtension('WEBGL_compressed_texture_pvrtc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');break;default:extension=gl.getExtension(name);}if(extension===null){console.warn('THREE.WebGLRenderer: '+name+' extension not supported.');}extensions[name]=extension;return extension;}};}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLGeometries(gl,attributes,info){var geometries=new WeakMap();var wireframeAttributes=new WeakMap();function onGeometryDispose(event){var geometry=event.target;var buffergeometry=geometries.get(geometry);if(buffergeometry.index!==null){attributes.remove(buffergeometry.index);}for(var name in buffergeometry.attributes){attributes.remove(buffergeometry.attributes[name]);}geometry.removeEventListener('dispose',onGeometryDispose);geometries.delete(geometry);var attribute=wireframeAttributes.get(buffergeometry);if(attribute){attributes.remove(attribute);wireframeAttributes.delete(buffergeometry);}//
info.memory.geometries--;}function get(object,geometry){var buffergeometry=geometries.get(geometry);if(buffergeometry)return buffergeometry;geometry.addEventListener('dispose',onGeometryDispose);if(geometry.isBufferGeometry){buffergeometry=geometry;}else if(geometry.isGeometry){if(geometry._bufferGeometry===undefined){geometry._bufferGeometry=new BufferGeometry().setFromObject(object);}buffergeometry=geometry._bufferGeometry;}geometries.set(geometry,buffergeometry);info.memory.geometries++;return buffergeometry;}function update(geometry){var index=geometry.index;var geometryAttributes=geometry.attributes;if(index!==null){attributes.update(index,34963);}for(var name in geometryAttributes){attributes.update(geometryAttributes[name],34962);}// morph targets
var morphAttributes=geometry.morphAttributes;for(var name in morphAttributes){var array=morphAttributes[name];for(var i=0,l=array.length;i<l;i++){attributes.update(array[i],34962);}}}function updateWireframeAttribute(geometry){var indices=[];var geometryIndex=geometry.index;var geometryPosition=geometry.attributes.position;var version=0;if(geometryIndex!==null){var array=geometryIndex.array;version=geometryIndex.version;for(var i=0,l=array.length;i<l;i+=3){var a=array[i+0];var b=array[i+1];var c=array[i+2];indices.push(a,b,b,c,c,a);}}else {var array=geometryPosition.array;version=geometryPosition.version;for(var i=0,l=array.length/3-1;i<l;i+=3){var a=i+0;var b=i+1;var c=i+2;indices.push(a,b,b,c,c,a);}}var attribute=new(arrayMax(indices)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(indices,1);attribute.version=version;attributes.update(attribute,34963);//
var previousAttribute=wireframeAttributes.get(geometry);if(previousAttribute)attributes.remove(previousAttribute);//
wireframeAttributes.set(geometry,attribute);}function getWireframeAttribute(geometry){var currentAttribute=wireframeAttributes.get(geometry);if(currentAttribute){var geometryIndex=geometry.index;if(geometryIndex!==null){// if the attribute is obsolete, create a new one
if(currentAttribute.version<geometryIndex.version){updateWireframeAttribute(geometry);}}}else {updateWireframeAttribute(geometry);}return wireframeAttributes.get(geometry);}return {get:get,update:update,getWireframeAttribute:getWireframeAttribute};}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLIndexedBufferRenderer(gl,extensions,info,capabilities){var isWebGL2=capabilities.isWebGL2;var mode;function setMode(value){mode=value;}var type,bytesPerElement;function setIndex(value){type=value.type;bytesPerElement=value.bytesPerElement;}function render(start,count){gl.drawElements(mode,count,type,start*bytesPerElement);info.update(count,mode);}function renderInstances(geometry,start,count,primcount){if(primcount===0)return;var extension,methodName;if(isWebGL2){extension=gl;methodName='drawElementsInstanced';}else {extension=extensions.get('ANGLE_instanced_arrays');methodName='drawElementsInstancedANGLE';if(extension===null){console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[methodName](mode,count,type,start*bytesPerElement,primcount);info.update(count,mode,primcount);}//
this.setMode=setMode;this.setIndex=setIndex;this.render=render;this.renderInstances=renderInstances;}/**
 * @author Mugen87 / https://github.com/Mugen87
 */function WebGLInfo(gl){var memory={geometries:0,textures:0};var render={frame:0,calls:0,triangles:0,points:0,lines:0};function update(count,mode,instanceCount){instanceCount=instanceCount||1;render.calls++;switch(mode){case 4:render.triangles+=instanceCount*(count/3);break;case 1:render.lines+=instanceCount*(count/2);break;case 3:render.lines+=instanceCount*(count-1);break;case 2:render.lines+=instanceCount*count;break;case 0:render.points+=instanceCount*count;break;default:console.error('THREE.WebGLInfo: Unknown draw mode:',mode);break;}}function reset(){render.frame++;render.calls=0;render.triangles=0;render.points=0;render.lines=0;}return {memory:memory,render:render,programs:null,autoReset:true,reset:reset,update:update};}/**
 * @author mrdoob / http://mrdoob.com/
 */function absNumericalSort(a,b){return Math.abs(b[1])-Math.abs(a[1]);}function WebGLMorphtargets(gl){var influencesList={};var morphInfluences=new Float32Array(8);function update(object,geometry,material,program){var objectInfluences=object.morphTargetInfluences;// When object doesn't have morph target influences defined, we treat it as a 0-length array
// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
var length=objectInfluences===undefined?0:objectInfluences.length;var influences=influencesList[geometry.id];if(influences===undefined){// initialise list
influences=[];for(var i=0;i<length;i++){influences[i]=[i,0];}influencesList[geometry.id]=influences;}var morphTargets=material.morphTargets&&geometry.morphAttributes.position;var morphNormals=material.morphNormals&&geometry.morphAttributes.normal;// Remove current morphAttributes
for(var i=0;i<length;i++){var influence=influences[i];if(influence[1]!==0){if(morphTargets)geometry.deleteAttribute('morphTarget'+i);if(morphNormals)geometry.deleteAttribute('morphNormal'+i);}}// Collect influences
for(var i=0;i<length;i++){var influence=influences[i];influence[0]=i;influence[1]=objectInfluences[i];}influences.sort(absNumericalSort);// Add morphAttributes
var morphInfluencesSum=0;for(var i=0;i<8;i++){var influence=influences[i];if(influence){var index=influence[0];var value=influence[1];if(value){if(morphTargets)geometry.setAttribute('morphTarget'+i,morphTargets[index]);if(morphNormals)geometry.setAttribute('morphNormal'+i,morphNormals[index]);morphInfluences[i]=value;morphInfluencesSum+=value;continue;}}morphInfluences[i]=0;}// GLSL shader uses formula baseinfluence * base + sum(target * influence)
// This allows us to switch between absolute morphs and relative morphs without changing shader code
// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
var morphBaseInfluence=geometry.morphTargetsRelative?1:1-morphInfluencesSum;program.getUniforms().setValue(gl,'morphTargetBaseInfluence',morphBaseInfluence);program.getUniforms().setValue(gl,'morphTargetInfluences',morphInfluences);}return {update:update};}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLObjects(gl,geometries,attributes,info){var updateList={};function update(object){var frame=info.render.frame;var geometry=object.geometry;var buffergeometry=geometries.get(object,geometry);// Update once per frame
if(updateList[buffergeometry.id]!==frame){if(geometry.isGeometry){buffergeometry.updateFromObject(object);}geometries.update(buffergeometry);updateList[buffergeometry.id]=frame;}if(object.isInstancedMesh){attributes.update(object.instanceMatrix,34962);}return buffergeometry;}function dispose(){updateList={};}return {update:update,dispose:dispose};}/**
 * @author mrdoob / http://mrdoob.com/
 */function CubeTexture(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){images=images!==undefined?images:[];mapping=mapping!==undefined?mapping:CubeReflectionMapping;format=format!==undefined?format:RGBFormat;Texture.call(this,images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.flipY=false;}CubeTexture.prototype=Object.create(Texture.prototype);CubeTexture.prototype.constructor=CubeTexture;CubeTexture.prototype.isCubeTexture=true;Object.defineProperty(CubeTexture.prototype,'images',{get:function get(){return this.image;},set:function set(value){this.image=value;}});/**
 * @author Takahiro https://github.com/takahirox
 */function DataTexture2DArray(data,width,height,depth){Texture.call(this,null);this.image={data:data||null,width:width||1,height:height||1,depth:depth||1};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.needsUpdate=true;}DataTexture2DArray.prototype=Object.create(Texture.prototype);DataTexture2DArray.prototype.constructor=DataTexture2DArray;DataTexture2DArray.prototype.isDataTexture2DArray=true;/**
 * @author Artur Trzesiok
 */function DataTexture3D(data,width,height,depth){// We're going to add .setXXX() methods for setting properties later.
// Users can still set in DataTexture3D directly.
//
//	var texture = new THREE.DataTexture3D( data, width, height, depth );
// 	texture.anisotropy = 16;
//
// See #14839
Texture.call(this,null);this.image={data:data||null,width:width||1,height:height||1,depth:depth||1};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.needsUpdate=true;}DataTexture3D.prototype=Object.create(Texture.prototype);DataTexture3D.prototype.constructor=DataTexture3D;DataTexture3D.prototype.isDataTexture3D=true;/**
 * @author tschw
 * @author Mugen87 / https://github.com/Mugen87
 * @author mrdoob / http://mrdoob.com/
 *
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */var emptyTexture=new Texture();var emptyTexture2dArray=new DataTexture2DArray();var emptyTexture3d=new DataTexture3D();var emptyCubeTexture=new CubeTexture();// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
var arrayCacheF32=[];var arrayCacheI32=[];// Float32Array caches used for uploading Matrix uniforms
var mat4array=new Float32Array(16);var mat3array=new Float32Array(9);var mat2array=new Float32Array(4);// Flattening for arrays of vectors and matrices
function flatten(array,nBlocks,blockSize){var firstElem=array[0];if(firstElem<=0||firstElem>0)return array;// unoptimized: ! isNaN( firstElem )
// see http://jacksondunstan.com/articles/983
var n=nBlocks*blockSize,r=arrayCacheF32[n];if(r===undefined){r=new Float32Array(n);arrayCacheF32[n]=r;}if(nBlocks!==0){firstElem.toArray(r,0);for(var i=1,offset=0;i!==nBlocks;++i){offset+=blockSize;array[i].toArray(r,offset);}}return r;}function arraysEqual(a,b){if(a.length!==b.length)return false;for(var i=0,l=a.length;i<l;i++){if(a[i]!==b[i])return false;}return true;}function copyArray(a,b){for(var i=0,l=b.length;i<l;i++){a[i]=b[i];}}// Texture unit allocation
function allocTexUnits(textures,n){var r=arrayCacheI32[n];if(r===undefined){r=new Int32Array(n);arrayCacheI32[n]=r;}for(var i=0;i!==n;++i)r[i]=textures.allocateTextureUnit();return r;}// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function setValueV1f(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1f(this.addr,v);cache[0]=v;}// Single float vector (from flat array or THREE.VectorN)
function setValueV2f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y){gl.uniform2f(this.addr,v.x,v.y);cache[0]=v.x;cache[1]=v.y;}}else {if(arraysEqual(cache,v))return;gl.uniform2fv(this.addr,v);copyArray(cache,v);}}function setValueV3f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z){gl.uniform3f(this.addr,v.x,v.y,v.z);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;}}else if(v.r!==undefined){if(cache[0]!==v.r||cache[1]!==v.g||cache[2]!==v.b){gl.uniform3f(this.addr,v.r,v.g,v.b);cache[0]=v.r;cache[1]=v.g;cache[2]=v.b;}}else {if(arraysEqual(cache,v))return;gl.uniform3fv(this.addr,v);copyArray(cache,v);}}function setValueV4f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z||cache[3]!==v.w){gl.uniform4f(this.addr,v.x,v.y,v.z,v.w);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;cache[3]=v.w;}}else {if(arraysEqual(cache,v))return;gl.uniform4fv(this.addr,v);copyArray(cache,v);}}// Single matrix (from flat array or MatrixN)
function setValueM2(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix2fv(this.addr,false,v);copyArray(cache,v);}else {if(arraysEqual(cache,elements))return;mat2array.set(elements);gl.uniformMatrix2fv(this.addr,false,mat2array);copyArray(cache,elements);}}function setValueM3(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix3fv(this.addr,false,v);copyArray(cache,v);}else {if(arraysEqual(cache,elements))return;mat3array.set(elements);gl.uniformMatrix3fv(this.addr,false,mat3array);copyArray(cache,elements);}}function setValueM4(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix4fv(this.addr,false,v);copyArray(cache,v);}else {if(arraysEqual(cache,elements))return;mat4array.set(elements);gl.uniformMatrix4fv(this.addr,false,mat4array);copyArray(cache,elements);}}// Single texture (2D / Cube)
function setValueT1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.safeSetTexture2D(v||emptyTexture,unit);}function setValueT2DArray1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture2DArray(v||emptyTexture2dArray,unit);}function setValueT3D1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture3D(v||emptyTexture3d,unit);}function setValueT6(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.safeSetTextureCube(v||emptyCubeTexture,unit);}// Integer / Boolean vectors or arrays thereof (always flat arrays)
function setValueV1i(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1i(this.addr,v);cache[0]=v;}function setValueV2i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform2iv(this.addr,v);copyArray(cache,v);}function setValueV3i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform3iv(this.addr,v);copyArray(cache,v);}function setValueV4i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform4iv(this.addr,v);copyArray(cache,v);}// uint
function setValueV1ui(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1ui(this.addr,v);cache[0]=v;}// Helper to pick the right setter for the singular case
function getSingularSetter(type){switch(type){case 0x1406:return setValueV1f;// FLOAT
case 0x8b50:return setValueV2f;// _VEC2
case 0x8b51:return setValueV3f;// _VEC3
case 0x8b52:return setValueV4f;// _VEC4
case 0x8b5a:return setValueM2;// _MAT2
case 0x8b5b:return setValueM3;// _MAT3
case 0x8b5c:return setValueM4;// _MAT4
case 0x1404:case 0x8b56:return setValueV1i;// INT, BOOL
case 0x8b53:case 0x8b57:return setValueV2i;// _VEC2
case 0x8b54:case 0x8b58:return setValueV3i;// _VEC3
case 0x8b55:case 0x8b59:return setValueV4i;// _VEC4
case 0x1405:return setValueV1ui;// UINT
case 0x8b5e:// SAMPLER_2D
case 0x8d66:// SAMPLER_EXTERNAL_OES
case 0x8dca:// INT_SAMPLER_2D
case 0x8dd2:// UNSIGNED_INT_SAMPLER_2D
case 0x8b62:// SAMPLER_2D_SHADOW
return setValueT1;case 0x8b5f:// SAMPLER_3D
case 0x8dcb:// INT_SAMPLER_3D
case 0x8dd3:// UNSIGNED_INT_SAMPLER_3D
return setValueT3D1;case 0x8b60:// SAMPLER_CUBE
case 0x8dcc:// INT_SAMPLER_CUBE
case 0x8dd4:// UNSIGNED_INT_SAMPLER_CUBE
case 0x8dc5:// SAMPLER_CUBE_SHADOW
return setValueT6;case 0x8dc1:// SAMPLER_2D_ARRAY
case 0x8dcf:// INT_SAMPLER_2D_ARRAY
case 0x8dd7:// UNSIGNED_INT_SAMPLER_2D_ARRAY
case 0x8dc4:// SAMPLER_2D_ARRAY_SHADOW
return setValueT2DArray1;}}// Array of scalars
function setValueV1fArray(gl,v){gl.uniform1fv(this.addr,v);}// Integer / Boolean vectors or arrays thereof (always flat arrays)
function setValueV1iArray(gl,v){gl.uniform1iv(this.addr,v);}function setValueV2iArray(gl,v){gl.uniform2iv(this.addr,v);}function setValueV3iArray(gl,v){gl.uniform3iv(this.addr,v);}function setValueV4iArray(gl,v){gl.uniform4iv(this.addr,v);}// Array of vectors (flat or from THREE classes)
function setValueV2fArray(gl,v){var data=flatten(v,this.size,2);gl.uniform2fv(this.addr,data);}function setValueV3fArray(gl,v){var data=flatten(v,this.size,3);gl.uniform3fv(this.addr,data);}function setValueV4fArray(gl,v){var data=flatten(v,this.size,4);gl.uniform4fv(this.addr,data);}// Array of matrices (flat or from THREE clases)
function setValueM2Array(gl,v){var data=flatten(v,this.size,4);gl.uniformMatrix2fv(this.addr,false,data);}function setValueM3Array(gl,v){var data=flatten(v,this.size,9);gl.uniformMatrix3fv(this.addr,false,data);}function setValueM4Array(gl,v){var data=flatten(v,this.size,16);gl.uniformMatrix4fv(this.addr,false,data);}// Array of textures (2D / Cube)
function setValueT1Array(gl,v,textures){var n=v.length;var units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(var i=0;i!==n;++i){textures.safeSetTexture2D(v[i]||emptyTexture,units[i]);}}function setValueT6Array(gl,v,textures){var n=v.length;var units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(var i=0;i!==n;++i){textures.safeSetTextureCube(v[i]||emptyCubeTexture,units[i]);}}// Helper to pick the right setter for a pure (bottom-level) array
function getPureArraySetter(type){switch(type){case 0x1406:return setValueV1fArray;// FLOAT
case 0x8b50:return setValueV2fArray;// _VEC2
case 0x8b51:return setValueV3fArray;// _VEC3
case 0x8b52:return setValueV4fArray;// _VEC4
case 0x8b5a:return setValueM2Array;// _MAT2
case 0x8b5b:return setValueM3Array;// _MAT3
case 0x8b5c:return setValueM4Array;// _MAT4
case 0x1404:case 0x8b56:return setValueV1iArray;// INT, BOOL
case 0x8b53:case 0x8b57:return setValueV2iArray;// _VEC2
case 0x8b54:case 0x8b58:return setValueV3iArray;// _VEC3
case 0x8b55:case 0x8b59:return setValueV4iArray;// _VEC4
case 0x8b5e:// SAMPLER_2D
case 0x8d66:// SAMPLER_EXTERNAL_OES
case 0x8dca:// INT_SAMPLER_2D
case 0x8dd2:// UNSIGNED_INT_SAMPLER_2D
case 0x8b62:// SAMPLER_2D_SHADOW
return setValueT1Array;case 0x8b60:// SAMPLER_CUBE
case 0x8dcc:// INT_SAMPLER_CUBE
case 0x8dd4:// UNSIGNED_INT_SAMPLER_CUBE
case 0x8dc5:// SAMPLER_CUBE_SHADOW
return setValueT6Array;}}// --- Uniform Classes ---
function SingleUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.setValue=getSingularSetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
}function PureArrayUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.size=activeInfo.size;this.setValue=getPureArraySetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
}PureArrayUniform.prototype.updateCache=function(data){var cache=this.cache;if(data instanceof Float32Array&&cache.length!==data.length){this.cache=new Float32Array(data.length);}copyArray(cache,data);};function StructuredUniform(id){this.id=id;this.seq=[];this.map={};}StructuredUniform.prototype.setValue=function(gl,value,textures){var seq=this.seq;for(var i=0,n=seq.length;i!==n;++i){var u=seq[i];u.setValue(gl,value[u.id],textures);}};// --- Top-level ---
// Parser - builds up the property tree from the path strings
var RePathPart=/([\\w\\d_]+)(\\])?(\\[|\\.)?/g;// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function addUniform(container,uniformObject){container.seq.push(uniformObject);container.map[uniformObject.id]=uniformObject;}function parseUniform(activeInfo,addr,container){var path=activeInfo.name,pathLength=path.length;// reset RegExp object, because of the early exit of a previous run
RePathPart.lastIndex=0;while(true){var match=RePathPart.exec(path),matchEnd=RePathPart.lastIndex,id=match[1],idIsIndex=match[2]===']',subscript=match[3];if(idIsIndex)id=id|0;// convert to integer
if(subscript===undefined||subscript==='['&&matchEnd+2===pathLength){// bare name or "pure" bottom-level array "[0]" suffix
addUniform(container,subscript===undefined?new SingleUniform(id,activeInfo,addr):new PureArrayUniform(id,activeInfo,addr));break;}else {// step into inner node / create it in case it doesn't exist
var map=container.map,next=map[id];if(next===undefined){next=new StructuredUniform(id);addUniform(container,next);}container=next;}}}// Root Container
function WebGLUniforms(gl,program){this.seq=[];this.map={};var n=gl.getProgramParameter(program,35718);for(var i=0;i<n;++i){var info=gl.getActiveUniform(program,i),addr=gl.getUniformLocation(program,info.name);parseUniform(info,addr,this);}}WebGLUniforms.prototype.setValue=function(gl,name,value,textures){var u=this.map[name];if(u!==undefined)u.setValue(gl,value,textures);};WebGLUniforms.prototype.setOptional=function(gl,object,name){var v=object[name];if(v!==undefined)this.setValue(gl,name,v);};// Static interface
WebGLUniforms.upload=function(gl,seq,values,textures){for(var i=0,n=seq.length;i!==n;++i){var u=seq[i],v=values[u.id];if(v.needsUpdate!==false){// note: always updating when .needsUpdate is undefined
u.setValue(gl,v.value,textures);}}};WebGLUniforms.seqWithValue=function(seq,values){var r=[];for(var i=0,n=seq.length;i!==n;++i){var u=seq[i];if(u.id in values)r.push(u);}return r;};/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLShader(gl,type,string){var shader=gl.createShader(type);gl.shaderSource(shader,string);gl.compileShader(shader);return shader;}/**
 * @author mrdoob / http://mrdoob.com/
 */var programIdCount=0;function addLineNumbers(string){var lines=string.split('\\n');for(var i=0;i<lines.length;i++){lines[i]=i+1+': '+lines[i];}return lines.join('\\n');}function getEncodingComponents(encoding){switch(encoding){case LinearEncoding:return ['Linear','( value )'];case sRGBEncoding:return ['sRGB','( value )'];case RGBEEncoding:return ['RGBE','( value )'];case RGBM7Encoding:return ['RGBM','( value, 7.0 )'];case RGBM16Encoding:return ['RGBM','( value, 16.0 )'];case RGBDEncoding:return ['RGBD','( value, 256.0 )'];case GammaEncoding:return ['Gamma','( value, float( GAMMA_FACTOR ) )'];case LogLuvEncoding:return ['LogLuv','( value )'];default:throw new Error('unsupported encoding: '+encoding);}}function getShaderErrors(gl,shader,type){var status=gl.getShaderParameter(shader,35713);var log=gl.getShaderInfoLog(shader).trim();if(status&&log==='')return '';// --enable-privileged-webgl-extension
// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
var source=gl.getShaderSource(shader);return 'THREE.WebGLShader: gl.getShaderInfoLog() '+type+'\\n'+log+addLineNumbers(source);}function getTexelDecodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return 'vec4 '+functionName+'( vec4 value ) { return '+components[0]+'ToLinear'+components[1]+'; }';}function getTexelEncodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return 'vec4 '+functionName+'( vec4 value ) { return LinearTo'+components[0]+components[1]+'; }';}function getToneMappingFunction(functionName,toneMapping){var toneMappingName;switch(toneMapping){case LinearToneMapping:toneMappingName='Linear';break;case ReinhardToneMapping:toneMappingName='Reinhard';break;case Uncharted2ToneMapping:toneMappingName='Uncharted2';break;case CineonToneMapping:toneMappingName='OptimizedCineon';break;case ACESFilmicToneMapping:toneMappingName='ACESFilmic';break;default:throw new Error('unsupported toneMapping: '+toneMapping);}return 'vec3 '+functionName+'( vec3 color ) { return '+toneMappingName+'ToneMapping( color ); }';}function generateExtensions(parameters){var chunks=[parameters.extensionDerivatives||parameters.envMapCubeUV||parameters.bumpMap||parameters.tangentSpaceNormalMap||parameters.clearcoatNormalMap||parameters.flatShading||parameters.shaderID==='physical'?'#extension GL_OES_standard_derivatives : enable':'',(parameters.extensionFragDepth||parameters.logarithmicDepthBuffer)&&parameters.rendererExtensionFragDepth?'#extension GL_EXT_frag_depth : enable':'',parameters.extensionDrawBuffers&&parameters.rendererExtensionDrawBuffers?'#extension GL_EXT_draw_buffers : require':'',(parameters.extensionShaderTextureLOD||parameters.envMap)&&parameters.rendererExtensionShaderTextureLod?'#extension GL_EXT_shader_texture_lod : enable':''];return chunks.filter(filterEmptyLine).join('\\n');}function generateDefines(defines){var chunks=[];for(var name in defines){var value=defines[name];if(value===false)continue;chunks.push('#define '+name+' '+value);}return chunks.join('\\n');}function fetchAttributeLocations(gl,program){var attributes={};var n=gl.getProgramParameter(program,35721);for(var i=0;i<n;i++){var info=gl.getActiveAttrib(program,i);var name=info.name;// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
attributes[name]=gl.getAttribLocation(program,name);}return attributes;}function filterEmptyLine(string){return string!=='';}function replaceLightNums(string,parameters){return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,parameters.numPointLightShadows);}function replaceClippingPlaneNums(string,parameters){return string.replace(/NUM_CLIPPING_PLANES/g,parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,parameters.numClippingPlanes-parameters.numClipIntersection);}// Resolve Includes
var includePattern=/^[ \\t]*#include +<([\\w\\d./]+)>/gm;function resolveIncludes(string){return string.replace(includePattern,includeReplacer);}function includeReplacer(match,include){var string=ShaderChunk[include];if(string===undefined){throw new Error('Can not resolve #include <'+include+'>');}return resolveIncludes(string);}// Unroll Loops
var loopPattern=/#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;function unrollLoops(string){return string.replace(loopPattern,loopReplacer);}function loopReplacer(match,start,end,snippet){var string='';for(var i=parseInt(start);i<parseInt(end);i++){string+=snippet.replace(/\\[ i \\]/g,'[ '+i+' ]').replace(/UNROLLED_LOOP_INDEX/g,i);}return string;}//
function generatePrecision(parameters){var precisionstring="precision "+parameters.precision+" float;\\nprecision "+parameters.precision+" int;";if(parameters.precision==="highp"){precisionstring+="\\n#define HIGH_PRECISION";}else if(parameters.precision==="mediump"){precisionstring+="\\n#define MEDIUM_PRECISION";}else if(parameters.precision==="lowp"){precisionstring+="\\n#define LOW_PRECISION";}return precisionstring;}function generateShadowMapTypeDefine(parameters){var shadowMapTypeDefine='SHADOWMAP_TYPE_BASIC';if(parameters.shadowMapType===PCFShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF';}else if(parameters.shadowMapType===PCFSoftShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF_SOFT';}else if(parameters.shadowMapType===VSMShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_VSM';}return shadowMapTypeDefine;}function generateEnvMapTypeDefine(parameters){var envMapTypeDefine='ENVMAP_TYPE_CUBE';if(parameters.envMap){switch(parameters.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE';break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE_UV';break;case EquirectangularReflectionMapping:case EquirectangularRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_EQUIREC';break;case SphericalReflectionMapping:envMapTypeDefine='ENVMAP_TYPE_SPHERE';break;}}return envMapTypeDefine;}function generateEnvMapModeDefine(parameters){var envMapModeDefine='ENVMAP_MODE_REFLECTION';if(parameters.envMap){switch(parameters.envMapMode){case CubeRefractionMapping:case EquirectangularRefractionMapping:envMapModeDefine='ENVMAP_MODE_REFRACTION';break;}}return envMapModeDefine;}function generateEnvMapBlendingDefine(parameters){var envMapBlendingDefine='ENVMAP_BLENDING_NONE';if(parameters.envMap){switch(parameters.combine){case MultiplyOperation:envMapBlendingDefine='ENVMAP_BLENDING_MULTIPLY';break;case MixOperation:envMapBlendingDefine='ENVMAP_BLENDING_MIX';break;case AddOperation:envMapBlendingDefine='ENVMAP_BLENDING_ADD';break;}}return envMapBlendingDefine;}function WebGLProgram(renderer,cacheKey,parameters){var gl=renderer.getContext();var defines=parameters.defines;var vertexShader=parameters.vertexShader;var fragmentShader=parameters.fragmentShader;var shadowMapTypeDefine=generateShadowMapTypeDefine(parameters);var envMapTypeDefine=generateEnvMapTypeDefine(parameters);var envMapModeDefine=generateEnvMapModeDefine(parameters);var envMapBlendingDefine=generateEnvMapBlendingDefine(parameters);var gammaFactorDefine=renderer.gammaFactor>0?renderer.gammaFactor:1.0;var customExtensions=parameters.isWebGL2?'':generateExtensions(parameters);var customDefines=generateDefines(defines);var program=gl.createProgram();var prefixVertex,prefixFragment;var numMultiviewViews=parameters.numMultiviewViews;if(parameters.isRawShaderMaterial){prefixVertex=[customDefines].filter(filterEmptyLine).join('\\n');if(prefixVertex.length>0){prefixVertex+='\\n';}prefixFragment=[customExtensions,customDefines].filter(filterEmptyLine).join('\\n');if(prefixFragment.length>0){prefixFragment+='\\n';}}else {prefixVertex=[generatePrecision(parameters),'#define SHADER_NAME '+parameters.shaderName,customDefines,parameters.instancing?'#define USE_INSTANCING':'',parameters.supportsVertexTextures?'#define VERTEX_TEXTURES':'','#define GAMMA_FACTOR '+gammaFactorDefine,'#define MAX_BONES '+parameters.maxBones,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp2?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.normalMap&&parameters.tangentSpaceNormalMap?'#define TANGENTSPACE_NORMALMAP':'',parameters.clearcoatNormalMap?'#define USE_CLEARCOAT_NORMALMAP':'',parameters.displacementMap&&parameters.supportsVertexTextures?'#define USE_DISPLACEMENTMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.vertexTangents?'#define USE_TANGENT':'',parameters.vertexColors?'#define USE_COLOR':'',parameters.vertexUvs?'#define USE_UV':'',parameters.uvsVertexOnly?'#define UVS_VERTEX_ONLY':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.skinning?'#define USE_SKINNING':'',parameters.useVertexTexture?'#define BONE_TEXTURE':'',parameters.morphTargets?'#define USE_MORPHTARGETS':'',parameters.morphNormals&&parameters.flatShading===false?'#define USE_MORPHNORMALS':'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.sizeAttenuation?'#define USE_SIZEATTENUATION':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?'#define USE_LOGDEPTHBUF_EXT':'','uniform mat4 modelMatrix;','uniform mat4 modelViewMatrix;','uniform mat4 projectionMatrix;','uniform mat4 viewMatrix;','uniform mat3 normalMatrix;','uniform vec3 cameraPosition;','uniform bool isOrthographic;','#ifdef USE_INSTANCING',' attribute mat4 instanceMatrix;','#endif','attribute vec3 position;','attribute vec3 normal;','attribute vec2 uv;','#ifdef USE_TANGENT','	attribute vec4 tangent;','#endif','#ifdef USE_COLOR','	attribute vec3 color;','#endif','#ifdef USE_MORPHTARGETS','	attribute vec3 morphTarget0;','	attribute vec3 morphTarget1;','	attribute vec3 morphTarget2;','	attribute vec3 morphTarget3;','	#ifdef USE_MORPHNORMALS','		attribute vec3 morphNormal0;','		attribute vec3 morphNormal1;','		attribute vec3 morphNormal2;','		attribute vec3 morphNormal3;','	#else','		attribute vec3 morphTarget4;','		attribute vec3 morphTarget5;','		attribute vec3 morphTarget6;','		attribute vec3 morphTarget7;','	#endif','#endif','#ifdef USE_SKINNING','	attribute vec4 skinIndex;','	attribute vec4 skinWeight;','#endif','\\n'].filter(filterEmptyLine).join('\\n');prefixFragment=[customExtensions,generatePrecision(parameters),'#define SHADER_NAME '+parameters.shaderName,customDefines,parameters.alphaTest?'#define ALPHATEST '+parameters.alphaTest+(parameters.alphaTest%1?'':'.0'):'',// add '.0' if integer
'#define GAMMA_FACTOR '+gammaFactorDefine,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp2?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.matcap?'#define USE_MATCAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapTypeDefine:'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.envMap?'#define '+envMapBlendingDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.normalMap&&parameters.tangentSpaceNormalMap?'#define TANGENTSPACE_NORMALMAP':'',parameters.clearcoatNormalMap?'#define USE_CLEARCOAT_NORMALMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.sheen?'#define USE_SHEEN':'',parameters.vertexTangents?'#define USE_TANGENT':'',parameters.vertexColors?'#define USE_COLOR':'',parameters.vertexUvs?'#define USE_UV':'',parameters.uvsVertexOnly?'#define UVS_VERTEX_ONLY':'',parameters.gradientMap?'#define USE_GRADIENTMAP':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.premultipliedAlpha?'#define PREMULTIPLIED_ALPHA':'',parameters.physicallyCorrectLights?'#define PHYSICALLY_CORRECT_LIGHTS':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?'#define USE_LOGDEPTHBUF_EXT':'',(parameters.extensionShaderTextureLOD||parameters.envMap)&&parameters.rendererExtensionShaderTextureLod?'#define TEXTURE_LOD_EXT':'','uniform mat4 viewMatrix;','uniform vec3 cameraPosition;','uniform bool isOrthographic;',parameters.toneMapping!==NoToneMapping?'#define TONE_MAPPING':'',parameters.toneMapping!==NoToneMapping?ShaderChunk['tonemapping_pars_fragment']:'',// this code is required here because it is used by the toneMapping() function defined below
parameters.toneMapping!==NoToneMapping?getToneMappingFunction('toneMapping',parameters.toneMapping):'',parameters.dithering?'#define DITHERING':'',parameters.outputEncoding||parameters.mapEncoding||parameters.matcapEncoding||parameters.envMapEncoding||parameters.emissiveMapEncoding||parameters.lightMapEncoding?ShaderChunk['encodings_pars_fragment']:'',// this code is required here because it is used by the various encoding/decoding function defined below
parameters.mapEncoding?getTexelDecodingFunction('mapTexelToLinear',parameters.mapEncoding):'',parameters.matcapEncoding?getTexelDecodingFunction('matcapTexelToLinear',parameters.matcapEncoding):'',parameters.envMapEncoding?getTexelDecodingFunction('envMapTexelToLinear',parameters.envMapEncoding):'',parameters.emissiveMapEncoding?getTexelDecodingFunction('emissiveMapTexelToLinear',parameters.emissiveMapEncoding):'',parameters.lightMapEncoding?getTexelDecodingFunction('lightMapTexelToLinear',parameters.lightMapEncoding):'',parameters.outputEncoding?getTexelEncodingFunction('linearToOutputTexel',parameters.outputEncoding):'',parameters.depthPacking?'#define DEPTH_PACKING '+parameters.depthPacking:'','\\n'].filter(filterEmptyLine).join('\\n');}vertexShader=resolveIncludes(vertexShader);vertexShader=replaceLightNums(vertexShader,parameters);vertexShader=replaceClippingPlaneNums(vertexShader,parameters);fragmentShader=resolveIncludes(fragmentShader);fragmentShader=replaceLightNums(fragmentShader,parameters);fragmentShader=replaceClippingPlaneNums(fragmentShader,parameters);vertexShader=unrollLoops(vertexShader);fragmentShader=unrollLoops(fragmentShader);if(parameters.isWebGL2&&!parameters.isRawShaderMaterial){var isGLSL3ShaderMaterial=false;var versionRegex=/^\\s*#version\\s+300\\s+es\\s*\\n/;if(parameters.isShaderMaterial&&vertexShader.match(versionRegex)!==null&&fragmentShader.match(versionRegex)!==null){isGLSL3ShaderMaterial=true;vertexShader=vertexShader.replace(versionRegex,'');fragmentShader=fragmentShader.replace(versionRegex,'');}// GLSL 3.0 conversion
prefixVertex=['#version 300 es\\n','#define attribute in','#define varying out','#define texture2D texture'].join('\\n')+'\\n'+prefixVertex;prefixFragment=['#version 300 es\\n','#define varying in',isGLSL3ShaderMaterial?'':'out highp vec4 pc_fragColor;',isGLSL3ShaderMaterial?'':'#define gl_FragColor pc_fragColor','#define gl_FragDepthEXT gl_FragDepth','#define texture2D texture','#define textureCube texture','#define texture2DProj textureProj','#define texture2DLodEXT textureLod','#define texture2DProjLodEXT textureProjLod','#define textureCubeLodEXT textureLod','#define texture2DGradEXT textureGrad','#define texture2DProjGradEXT textureProjGrad','#define textureCubeGradEXT textureGrad'].join('\\n')+'\\n'+prefixFragment;// Multiview
if(numMultiviewViews>0){prefixVertex=prefixVertex.replace('#version 300 es\\n',['#version 300 es\\n','#extension GL_OVR_multiview2 : require','layout(num_views = '+numMultiviewViews+') in;','#define VIEW_ID gl_ViewID_OVR'].join('\\n'));prefixVertex=prefixVertex.replace(['uniform mat4 modelViewMatrix;','uniform mat4 projectionMatrix;','uniform mat4 viewMatrix;','uniform mat3 normalMatrix;'].join('\\n'),['uniform mat4 modelViewMatrices['+numMultiviewViews+'];','uniform mat4 projectionMatrices['+numMultiviewViews+'];','uniform mat4 viewMatrices['+numMultiviewViews+'];','uniform mat3 normalMatrices['+numMultiviewViews+'];','#define modelViewMatrix modelViewMatrices[VIEW_ID]','#define projectionMatrix projectionMatrices[VIEW_ID]','#define viewMatrix viewMatrices[VIEW_ID]','#define normalMatrix normalMatrices[VIEW_ID]'].join('\\n'));prefixFragment=prefixFragment.replace('#version 300 es\\n',['#version 300 es\\n','#extension GL_OVR_multiview2 : require','#define VIEW_ID gl_ViewID_OVR'].join('\\n'));prefixFragment=prefixFragment.replace('uniform mat4 viewMatrix;',['uniform mat4 viewMatrices['+numMultiviewViews+'];','#define viewMatrix viewMatrices[VIEW_ID]'].join('\\n'));}}var vertexGlsl=prefixVertex+vertexShader;var fragmentGlsl=prefixFragment+fragmentShader;// console.log( '*VERTEX*', vertexGlsl );
// console.log( '*FRAGMENT*', fragmentGlsl );
var glVertexShader=WebGLShader(gl,35633,vertexGlsl);var glFragmentShader=WebGLShader(gl,35632,fragmentGlsl);gl.attachShader(program,glVertexShader);gl.attachShader(program,glFragmentShader);// Force a particular attribute to index 0.
if(parameters.index0AttributeName!==undefined){gl.bindAttribLocation(program,0,parameters.index0AttributeName);}else if(parameters.morphTargets===true){// programs with morphTargets displace position out of attribute 0
gl.bindAttribLocation(program,0,'position');}gl.linkProgram(program);// check for link errors
if(renderer.debug.checkShaderErrors){var programLog=gl.getProgramInfoLog(program).trim();var vertexLog=gl.getShaderInfoLog(glVertexShader).trim();var fragmentLog=gl.getShaderInfoLog(glFragmentShader).trim();var runnable=true;var haveDiagnostics=true;if(gl.getProgramParameter(program,35714)===false){runnable=false;var vertexErrors=getShaderErrors(gl,glVertexShader,'vertex');var fragmentErrors=getShaderErrors(gl,glFragmentShader,'fragment');console.error('THREE.WebGLProgram: shader error: ',gl.getError(),'35715',gl.getProgramParameter(program,35715),'gl.getProgramInfoLog',programLog,vertexErrors,fragmentErrors);}else if(programLog!==''){console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()',programLog);}else if(vertexLog===''||fragmentLog===''){haveDiagnostics=false;}if(haveDiagnostics){this.diagnostics={runnable:runnable,programLog:programLog,vertexShader:{log:vertexLog,prefix:prefixVertex},fragmentShader:{log:fragmentLog,prefix:prefixFragment}};}}// clean up
gl.deleteShader(glVertexShader);gl.deleteShader(glFragmentShader);// set up caching for uniform locations
var cachedUniforms;this.getUniforms=function(){if(cachedUniforms===undefined){cachedUniforms=new WebGLUniforms(gl,program);}return cachedUniforms;};// set up caching for attribute locations
var cachedAttributes;this.getAttributes=function(){if(cachedAttributes===undefined){cachedAttributes=fetchAttributeLocations(gl,program);}return cachedAttributes;};// free resource
this.destroy=function(){gl.deleteProgram(program);this.program=undefined;};//
this.name=parameters.shaderName;this.id=programIdCount++;this.cacheKey=cacheKey;this.usedTimes=1;this.program=program;this.vertexShader=glVertexShader;this.fragmentShader=glFragmentShader;this.numMultiviewViews=numMultiviewViews;return this;}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLPrograms(renderer,extensions,capabilities){var programs=[];var isWebGL2=capabilities.isWebGL2;var logarithmicDepthBuffer=capabilities.logarithmicDepthBuffer;var floatVertexTextures=capabilities.floatVertexTextures;var precision=capabilities.precision;var maxVertexUniforms=capabilities.maxVertexUniforms;var vertexTextures=capabilities.vertexTextures;var shaderIDs={MeshDepthMaterial:'depth',MeshDistanceMaterial:'distanceRGBA',MeshNormalMaterial:'normal',MeshBasicMaterial:'basic',MeshLambertMaterial:'lambert',MeshPhongMaterial:'phong',MeshToonMaterial:'toon',MeshStandardMaterial:'physical',MeshPhysicalMaterial:'physical',MeshMatcapMaterial:'matcap',LineBasicMaterial:'basic',LineDashedMaterial:'dashed',PointsMaterial:'points',ShadowMaterial:'shadow',SpriteMaterial:'sprite'};var parameterNames=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","numMultiviewViews","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping",'physicallyCorrectLights',"alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function getShaderObject(material,shaderID){var shaderobject;if(shaderID){var shader=ShaderLib[shaderID];shaderobject={name:material.type,uniforms:UniformsUtils.clone(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader};}else {shaderobject={name:material.type,uniforms:material.uniforms,vertexShader:material.vertexShader,fragmentShader:material.fragmentShader};}return shaderobject;}function allocateBones(object){var skeleton=object.skeleton;var bones=skeleton.bones;if(floatVertexTextures){return 1024;}else {// default for when object is not specified
// ( for example when prebuilding shader to be used with multiple objects )
//
//  - leave some extra space for other uniforms
//  - limit here is ANGLE's 254 max uniform vectors
//    (up to 54 should be safe)
var nVertexUniforms=maxVertexUniforms;var nVertexMatrices=Math.floor((nVertexUniforms-20)/4);var maxBones=Math.min(nVertexMatrices,bones.length);if(maxBones<bones.length){console.warn('THREE.WebGLRenderer: Skeleton has '+bones.length+' bones. This GPU supports '+maxBones+'.');return 0;}return maxBones;}}function getTextureEncodingFromMap(map){var encoding;if(!map){encoding=LinearEncoding;}else if(map.isTexture){encoding=map.encoding;}else if(map.isWebGLRenderTarget){console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");encoding=map.texture.encoding;}return encoding;}this.getParameters=function(material,lights,shadows,scene,nClipPlanes,nClipIntersection,object){var fog=scene.fog;var environment=material.isMeshStandardMaterial?scene.environment:null;var envMap=material.envMap||environment;var shaderID=shaderIDs[material.type];// heuristics to create shader parameters according to lights in the scene
// (not to blow over maxLights budget)
var maxBones=object.isSkinnedMesh?allocateBones(object):0;if(material.precision!==null){precision=capabilities.getMaxPrecision(material.precision);if(precision!==material.precision){console.warn('THREE.WebGLProgram.getParameters:',material.precision,'not supported, using',precision,'instead.');}}var shaderobject=getShaderObject(material,shaderID);material.onBeforeCompile(shaderobject,renderer);var currentRenderTarget=renderer.getRenderTarget();var numMultiviewViews=currentRenderTarget&&currentRenderTarget.isWebGLMultiviewRenderTarget?currentRenderTarget.numViews:0;var parameters={isWebGL2:isWebGL2,shaderID:shaderID,shaderName:shaderobject.name,uniforms:shaderobject.uniforms,vertexShader:shaderobject.vertexShader,fragmentShader:shaderobject.fragmentShader,defines:material.defines,isRawShaderMaterial:material.isRawShaderMaterial,isShaderMaterial:material.isShaderMaterial,precision:precision,instancing:object.isInstancedMesh===true,supportsVertexTextures:vertexTextures,numMultiviewViews:numMultiviewViews,outputEncoding:currentRenderTarget!==null?getTextureEncodingFromMap(currentRenderTarget.texture):renderer.outputEncoding,map:!!material.map,mapEncoding:getTextureEncodingFromMap(material.map),matcap:!!material.matcap,matcapEncoding:getTextureEncodingFromMap(material.matcap),envMap:!!envMap,envMapMode:envMap&&envMap.mapping,envMapEncoding:getTextureEncodingFromMap(envMap),envMapCubeUV:!!envMap&&(envMap.mapping===CubeUVReflectionMapping||envMap.mapping===CubeUVRefractionMapping),lightMap:!!material.lightMap,lightMapEncoding:getTextureEncodingFromMap(material.lightMap),aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,emissiveMapEncoding:getTextureEncodingFromMap(material.emissiveMap),bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,objectSpaceNormalMap:material.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:material.normalMapType===TangentSpaceNormalMap,clearcoatNormalMap:!!material.clearcoatNormalMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,alphaMap:!!material.alphaMap,gradientMap:!!material.gradientMap,sheen:!!material.sheen,combine:material.combine,vertexTangents:material.normalMap&&material.vertexTangents,vertexColors:material.vertexColors,vertexUvs:!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatNormalMap||!!material.displacementMap,uvsVertexOnly:!(!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatNormalMap)&&!!material.displacementMap,fog:!!fog,useFog:material.fog,fogExp2:fog&&fog.isFogExp2,flatShading:material.flatShading,sizeAttenuation:material.sizeAttenuation,logarithmicDepthBuffer:logarithmicDepthBuffer,skinning:material.skinning&&maxBones>0,maxBones:maxBones,useVertexTexture:floatVertexTextures,morphTargets:material.morphTargets,morphNormals:material.morphNormals,maxMorphTargets:renderer.maxMorphTargets,maxMorphNormals:renderer.maxMorphNormals,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numRectAreaLights:lights.rectArea.length,numHemiLights:lights.hemi.length,numDirLightShadows:lights.directionalShadowMap.length,numPointLightShadows:lights.pointShadowMap.length,numSpotLightShadows:lights.spotShadowMap.length,numClippingPlanes:nClipPlanes,numClipIntersection:nClipIntersection,dithering:material.dithering,shadowMapEnabled:renderer.shadowMap.enabled&&shadows.length>0,shadowMapType:renderer.shadowMap.type,toneMapping:material.toneMapped?renderer.toneMapping:NoToneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,alphaTest:material.alphaTest,doubleSided:material.side===DoubleSide,flipSided:material.side===BackSide,depthPacking:material.depthPacking!==undefined?material.depthPacking:false,index0AttributeName:material.index0AttributeName,extensionDerivatives:material.extensions&&material.extensions.derivatives,extensionFragDepth:material.extensions&&material.extensions.frawbuffers,extensionDrawbuffers:material.extensions&&material.extensions.drawbuffers,extensionShaderTextureLOD:material.extensions&&material.extensions.shaderTextureLOD,rendererExtensionFragDepth:isWebGL2||extensions.get('EXT_frag_depth')!==null,rendererExtensionDrawBuffers:isWebGL2||extensions.get('WEBGL_draw_buffers')!==null,rendererExtensionShaderTextureLod:isWebGL2||extensions.get('EXT_shader_texture_lod')!==null,onBeforeCompile:material.onBeforeCompile};return parameters;};this.getProgramCacheKey=function(parameters){var array=[];if(parameters.shaderID){array.push(parameters.shaderID);}else {array.push(parameters.fragmentShader);array.push(parameters.vertexShader);}if(parameters.defines!==undefined){for(var name in parameters.defines){array.push(name);array.push(parameters.defines[name]);}}if(parameters.isRawShaderMaterial===undefined){for(var i=0;i<parameterNames.length;i++){array.push(parameters[parameterNames[i]]);}array.push(renderer.outputEncoding);array.push(renderer.gammaFactor);}array.push(parameters.onBeforeCompile.toString());return array.join();};this.acquireProgram=function(parameters,cacheKey){var program;// Check if code has been already compiled
for(var p=0,pl=programs.length;p<pl;p++){var preexistingProgram=programs[p];if(preexistingProgram.cacheKey===cacheKey){program=preexistingProgram;++program.usedTimes;break;}}if(program===undefined){program=new WebGLProgram(renderer,cacheKey,parameters);programs.push(program);}return program;};this.releaseProgram=function(program){if(--program.usedTimes===0){// Remove from unordered set
var i=programs.indexOf(program);programs[i]=programs[programs.length-1];programs.pop();// Free WebGL resources
program.destroy();}};// Exposed for resource monitoring & error feedback via renderer.info:
this.programs=programs;}/**
 * @author fordacious / fordacious.github.io
 */function WebGLProperties(){var properties=new WeakMap();function get(object){var map=properties.get(object);if(map===undefined){map={};properties.set(object,map);}return map;}function remove(object){properties.delete(object);}function update(object,key,value){properties.get(object)[key]=value;}function dispose(){properties=new WeakMap();}return {get:get,remove:remove,update:update,dispose:dispose};}/**
 * @author mrdoob / http://mrdoob.com/
 */function painterSortStable(a,b){if(a.groupOrder!==b.groupOrder){return a.groupOrder-b.groupOrder;}else if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.program!==b.program){return a.program.id-b.program.id;}else if(a.material.id!==b.material.id){return a.material.id-b.material.id;}else if(a.z!==b.z){return a.z-b.z;}else {return a.id-b.id;}}function reversePainterSortStable(a,b){if(a.groupOrder!==b.groupOrder){return a.groupOrder-b.groupOrder;}else if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.z!==b.z){return b.z-a.z;}else {return a.id-b.id;}}function WebGLRenderList(){var renderItems=[];var renderItemsIndex=0;var opaque=[];var transparent=[];var defaultProgram={id:-1};function init(){renderItemsIndex=0;opaque.length=0;transparent.length=0;}function getNextRenderItem(object,geometry,material,groupOrder,z,group){var renderItem=renderItems[renderItemsIndex];if(renderItem===undefined){renderItem={id:object.id,object:object,geometry:geometry,material:material,program:material.program||defaultProgram,groupOrder:groupOrder,renderOrder:object.renderOrder,z:z,group:group};renderItems[renderItemsIndex]=renderItem;}else {renderItem.id=object.id;renderItem.object=object;renderItem.geometry=geometry;renderItem.material=material;renderItem.program=material.program||defaultProgram;renderItem.groupOrder=groupOrder;renderItem.renderOrder=object.renderOrder;renderItem.z=z;renderItem.group=group;}renderItemsIndex++;return renderItem;}function push(object,geometry,material,groupOrder,z,group){var renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);(material.transparent===true?transparent:opaque).push(renderItem);}function unshift(object,geometry,material,groupOrder,z,group){var renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);(material.transparent===true?transparent:opaque).unshift(renderItem);}function sort(customOpaqueSort,customTransparentSort){if(opaque.length>1)opaque.sort(customOpaqueSort||painterSortStable);if(transparent.length>1)transparent.sort(customTransparentSort||reversePainterSortStable);}return {opaque:opaque,transparent:transparent,init:init,push:push,unshift:unshift,sort:sort};}function WebGLRenderLists(){var lists=new WeakMap();function onSceneDispose(event){var scene=event.target;scene.removeEventListener('dispose',onSceneDispose);lists.delete(scene);}function get(scene,camera){var cameras=lists.get(scene);var list;if(cameras===undefined){list=new WebGLRenderList();lists.set(scene,new WeakMap());lists.get(scene).set(camera,list);scene.addEventListener('dispose',onSceneDispose);}else {list=cameras.get(camera);if(list===undefined){list=new WebGLRenderList();cameras.set(camera,list);}}return list;}function dispose(){lists=new WeakMap();}return {get:get,dispose:dispose};}/**
 * @author mrdoob / http://mrdoob.com/
 */function UniformsCache(){var lights={};return {get:function get(light){if(lights[light.id]!==undefined){return lights[light.id];}var uniforms;switch(light.type){case'DirectionalLight':uniforms={direction:new Vector3(),color:new Color(),shadow:false,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'SpotLight':uniforms={position:new Vector3(),direction:new Vector3(),color:new Color(),distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:false,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'PointLight':uniforms={position:new Vector3(),color:new Color(),distance:0,decay:0,shadow:false,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2(),shadowCameraNear:1,shadowCameraFar:1000};break;case'HemisphereLight':uniforms={direction:new Vector3(),skyColor:new Color(),groundColor:new Color()};break;case'RectAreaLight':uniforms={color:new Color(),position:new Vector3(),halfWidth:new Vector3(),halfHeight:new Vector3()// TODO (abelnation): set RectAreaLight shadow uniforms
};break;}lights[light.id]=uniforms;return uniforms;}};}var nextVersion=0;function shadowCastingLightsFirst(lightA,lightB){return (lightB.castShadow?1:0)-(lightA.castShadow?1:0);}function WebGLLights(){var cache=new UniformsCache();var state={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1};for(var i=0;i<9;i++)state.probe.push(new Vector3());var vector3=new Vector3();var matrix4=new Matrix4();var matrix42=new Matrix4();function setup(lights,shadows,camera){var r=0,g=0,b=0;for(var i=0;i<9;i++)state.probe[i].set(0,0,0);var directionalLength=0;var pointLength=0;var spotLength=0;var rectAreaLength=0;var hemiLength=0;var numDirectionalShadows=0;var numPointShadows=0;var numSpotShadows=0;var viewMatrix=camera.matrixWorldInverse;lights.sort(shadowCastingLightsFirst);for(var i=0,l=lights.length;i<l;i++){var light=lights[i];var color=light.color;var intensity=light.intensity;var distance=light.distance;var shadowMap=light.shadow&&light.shadow.map?light.shadow.map.texture:null;if(light.isAmbientLight){r+=color.r*intensity;g+=color.g*intensity;b+=color.b*intensity;}else if(light.isLightProbe){for(var j=0;j<9;j++){state.probe[j].addScaledVector(light.sh.coefficients[j],intensity);}}else if(light.isDirectionalLight){var uniforms=cache.get(light);uniforms.color.copy(light.color).multiplyScalar(light.intensity);uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);uniforms.direction.sub(vector3);uniforms.direction.transformDirection(viewMatrix);uniforms.shadow=light.castShadow;if(light.castShadow){var shadow=light.shadow;uniforms.shadowBias=shadow.bias;uniforms.shadowRadius=shadow.radius;uniforms.shadowMapSize=shadow.mapSize;state.directionalShadowMap[directionalLength]=shadowMap;state.directionalShadowMatrix[directionalLength]=light.shadow.matrix;numDirectionalShadows++;}state.directional[directionalLength]=uniforms;directionalLength++;}else if(light.isSpotLight){var uniforms=cache.get(light);uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);uniforms.color.copy(color).multiplyScalar(intensity);uniforms.distance=distance;uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);uniforms.direction.sub(vector3);uniforms.direction.transformDirection(viewMatrix);uniforms.coneCos=Math.cos(light.angle);uniforms.penumbraCos=Math.cos(light.angle*(1-light.penumbra));uniforms.decay=light.decay;uniforms.shadow=light.castShadow;if(light.castShadow){var shadow=light.shadow;uniforms.shadowBias=shadow.bias;uniforms.shadowRadius=shadow.radius;uniforms.shadowMapSize=shadow.mapSize;state.spotShadowMap[spotLength]=shadowMap;state.spotShadowMatrix[spotLength]=light.shadow.matrix;numSpotShadows++;}state.spot[spotLength]=uniforms;spotLength++;}else if(light.isRectAreaLight){var uniforms=cache.get(light);// (a) intensity is the total visible light emitted
//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
// (b) intensity is the brightness of the light
uniforms.color.copy(color).multiplyScalar(intensity);uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);// extract local rotation of light to derive width/height half vectors
matrix42.identity();matrix4.copy(light.matrixWorld);matrix4.premultiply(viewMatrix);matrix42.extractRotation(matrix4);uniforms.halfWidth.set(light.width*0.5,0.0,0.0);uniforms.halfHeight.set(0.0,light.height*0.5,0.0);uniforms.halfWidth.applyMatrix4(matrix42);uniforms.halfHeight.applyMatrix4(matrix42);// TODO (abelnation): RectAreaLight distance?
// uniforms.distance = distance;
state.rectArea[rectAreaLength]=uniforms;rectAreaLength++;}else if(light.isPointLight){var uniforms=cache.get(light);uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);uniforms.color.copy(light.color).multiplyScalar(light.intensity);uniforms.distance=light.distance;uniforms.decay=light.decay;uniforms.shadow=light.castShadow;if(light.castShadow){var shadow=light.shadow;uniforms.shadowBias=shadow.bias;uniforms.shadowRadius=shadow.radius;uniforms.shadowMapSize=shadow.mapSize;uniforms.shadowCameraNear=shadow.camera.near;uniforms.shadowCameraFar=shadow.camera.far;state.pointShadowMap[pointLength]=shadowMap;state.pointShadowMatrix[pointLength]=light.shadow.matrix;numPointShadows++;}state.point[pointLength]=uniforms;pointLength++;}else if(light.isHemisphereLight){var uniforms=cache.get(light);uniforms.direction.setFromMatrixPosition(light.matrixWorld);uniforms.direction.transformDirection(viewMatrix);uniforms.direction.normalize();uniforms.skyColor.copy(light.color).multiplyScalar(intensity);uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);state.hemi[hemiLength]=uniforms;hemiLength++;}}state.ambient[0]=r;state.ambient[1]=g;state.ambient[2]=b;var hash=state.hash;if(hash.directionalLength!==directionalLength||hash.pointLength!==pointLength||hash.spotLength!==spotLength||hash.rectAreaLength!==rectAreaLength||hash.hemiLength!==hemiLength||hash.numDirectionalShadows!==numDirectionalShadows||hash.numPointShadows!==numPointShadows||hash.numSpotShadows!==numSpotShadows){state.directional.length=directionalLength;state.spot.length=spotLength;state.rectArea.length=rectAreaLength;state.point.length=pointLength;state.hemi.length=hemiLength;state.directionalShadowMap.length=numDirectionalShadows;state.pointShadowMap.length=numPointShadows;state.spotShadowMap.length=numSpotShadows;state.directionalShadowMatrix.length=numDirectionalShadows;state.pointShadowMatrix.length=numPointShadows;state.spotShadowMatrix.length=numSpotShadows;hash.directionalLength=directionalLength;hash.pointLength=pointLength;hash.spotLength=spotLength;hash.rectAreaLength=rectAreaLength;hash.hemiLength=hemiLength;hash.numDirectionalShadows=numDirectionalShadows;hash.numPointShadows=numPointShadows;hash.numSpotShadows=numSpotShadows;state.version=nextVersion++;}}return {setup:setup,state:state};}/**
 * @author Mugen87 / https://github.com/Mugen87
 */function WebGLRenderState(){var lights=new WebGLLights();var lightsArray=[];var shadowsArray=[];function init(){lightsArray.length=0;shadowsArray.length=0;}function pushLight(light){lightsArray.push(light);}function pushShadow(shadowLight){shadowsArray.push(shadowLight);}function setupLights(camera){lights.setup(lightsArray,shadowsArray,camera);}var state={lightsArray:lightsArray,shadowsArray:shadowsArray,lights:lights};return {init:init,state:state,setupLights:setupLights,pushLight:pushLight,pushShadow:pushShadow};}function WebGLRenderStates(){var renderStates=new WeakMap();function onSceneDispose(event){var scene=event.target;scene.removeEventListener('dispose',onSceneDispose);renderStates.delete(scene);}function get(scene,camera){var renderState;if(renderStates.has(scene)===false){renderState=new WebGLRenderState();renderStates.set(scene,new WeakMap());renderStates.get(scene).set(camera,renderState);scene.addEventListener('dispose',onSceneDispose);}else {if(renderStates.get(scene).has(camera)===false){renderState=new WebGLRenderState();renderStates.get(scene).set(camera,renderState);}else {renderState=renderStates.get(scene).get(camera);}}return renderState;}function dispose(){renderStates=new WeakMap();}return {get:get,dispose:dispose};}/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / https://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */function MeshDepthMaterial(parameters){Material.call(this);this.type='MeshDepthMaterial';this.depthPacking=BasicDepthPacking;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.setValues(parameters);}MeshDepthMaterial.prototype=Object.create(Material.prototype);MeshDepthMaterial.prototype.constructor=MeshDepthMaterial;MeshDepthMaterial.prototype.isMeshDepthMaterial=true;MeshDepthMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.depthPacking=source.depthPacking;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;return this;};/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */function MeshDistanceMaterial(parameters){Material.call(this);this.type='MeshDistanceMaterial';this.referencePosition=new Vector3();this.nearDistance=1;this.farDistance=1000;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.fog=false;this.setValues(parameters);}MeshDistanceMaterial.prototype=Object.create(Material.prototype);MeshDistanceMaterial.prototype.constructor=MeshDistanceMaterial;MeshDistanceMaterial.prototype.isMeshDistanceMaterial=true;MeshDistanceMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.referencePosition.copy(source.referencePosition);this.nearDistance=source.nearDistance;this.farDistance=source.farDistance;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;return this;};var vsm_frag="uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}";var vsm_vert="void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}";/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */function WebGLShadowMap(_renderer,_objects,maxTextureSize){var _frustum=new Frustum(),_shadowMapSize=new Vector2(),_viewportSize=new Vector2(),_viewport=new Vector4(),_depthMaterials=[],_distanceMaterials=[],_materialCache={};var shadowSide={0:BackSide,1:FrontSide,2:DoubleSide};var shadowMaterialVertical=new ShaderMaterial({defines:{SAMPLE_RATE:2.0/8.0,HALF_SAMPLE_RATE:1.0/8.0},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2()},radius:{value:4.0}},vertexShader:vsm_vert,fragmentShader:vsm_frag});var shadowMaterialHorizonal=shadowMaterialVertical.clone();shadowMaterialHorizonal.defines.HORIZONAL_PASS=1;var fullScreenTri=new BufferGeometry();fullScreenTri.setAttribute("position",new BufferAttribute(new Float32Array([-1,-1,0.5,3,-1,0.5,-1,3,0.5]),3));var fullScreenMesh=new Mesh(fullScreenTri,shadowMaterialVertical);var scope=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;this.render=function(lights,scene,camera){if(scope.enabled===false)return;if(scope.autoUpdate===false&&scope.needsUpdate===false)return;if(lights.length===0)return;var currentRenderTarget=_renderer.getRenderTarget();var activeCubeFace=_renderer.getActiveCubeFace();var activeMipmapLevel=_renderer.getActiveMipmapLevel();var _state=_renderer.state;// Set GL state for depth map.
_state.setBlending(NoBlending);_state.buffers.color.setClear(1,1,1,1);_state.buffers.depth.setTest(true);_state.setScissorTest(false);// render depth map
for(var i=0,il=lights.length;i<il;i++){var light=lights[i];var shadow=light.shadow;if(shadow===undefined){console.warn('THREE.WebGLShadowMap:',light,'has no shadow.');continue;}_shadowMapSize.copy(shadow.mapSize);var shadowFrameExtents=shadow.getFrameExtents();_shadowMapSize.multiply(shadowFrameExtents);_viewportSize.copy(shadow.mapSize);if(_shadowMapSize.x>maxTextureSize||_shadowMapSize.y>maxTextureSize){console.warn('THREE.WebGLShadowMap:',light,'has shadow exceeding max texture size, reducing');if(_shadowMapSize.x>maxTextureSize){_viewportSize.x=Math.floor(maxTextureSize/shadowFrameExtents.x);_shadowMapSize.x=_viewportSize.x*shadowFrameExtents.x;shadow.mapSize.x=_viewportSize.x;}if(_shadowMapSize.y>maxTextureSize){_viewportSize.y=Math.floor(maxTextureSize/shadowFrameExtents.y);_shadowMapSize.y=_viewportSize.y*shadowFrameExtents.y;shadow.mapSize.y=_viewportSize.y;}}if(shadow.map===null&&!shadow.isPointLightShadow&&this.type===VSMShadowMap){var pars={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.map.texture.name=light.name+".shadowMap";shadow.mapPass=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.camera.updateProjectionMatrix();}if(shadow.map===null){var pars={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.map.texture.name=light.name+".shadowMap";shadow.camera.updateProjectionMatrix();}_renderer.setRenderTarget(shadow.map);_renderer.clear();var viewportCount=shadow.getViewportCount();for(var vp=0;vp<viewportCount;vp++){var viewport=shadow.getViewport(vp);_viewport.set(_viewportSize.x*viewport.x,_viewportSize.y*viewport.y,_viewportSize.x*viewport.z,_viewportSize.y*viewport.w);_state.viewport(_viewport);shadow.updateMatrices(light,vp);_frustum=shadow.getFrustum();renderObject(scene,camera,shadow.camera,light,this.type);}// do blur pass for VSM
if(!shadow.isPointLightShadow&&this.type===VSMShadowMap){VSMPass(shadow,camera);}}scope.needsUpdate=false;_renderer.setRenderTarget(currentRenderTarget,activeCubeFace,activeMipmapLevel);};function VSMPass(shadow,camera){var geometry=_objects.update(fullScreenMesh);// vertical pass
shadowMaterialVertical.uniforms.shadow_pass.value=shadow.map.texture;shadowMaterialVertical.uniforms.resolution.value=shadow.mapSize;shadowMaterialVertical.uniforms.radius.value=shadow.radius;_renderer.setRenderTarget(shadow.mapPass);_renderer.clear();_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialVertical,fullScreenMesh,null);// horizonal pass
shadowMaterialHorizonal.uniforms.shadow_pass.value=shadow.mapPass.texture;shadowMaterialHorizonal.uniforms.resolution.value=shadow.mapSize;shadowMaterialHorizonal.uniforms.radius.value=shadow.radius;_renderer.setRenderTarget(shadow.map);_renderer.clear();_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialHorizonal,fullScreenMesh,null);}function getDepthMaterialVariant(useMorphing,useSkinning,useInstancing){var index=useMorphing<<0|useSkinning<<1|useInstancing<<2;var material=_depthMaterials[index];if(material===undefined){material=new MeshDepthMaterial({depthPacking:RGBADepthPacking,morphTargets:useMorphing,skinning:useSkinning});_depthMaterials[index]=material;}return material;}function getDistanceMaterialVariant(useMorphing,useSkinning,useInstancing){var index=useMorphing<<0|useSkinning<<1|useInstancing<<2;var material=_distanceMaterials[index];if(material===undefined){material=new MeshDistanceMaterial({morphTargets:useMorphing,skinning:useSkinning});_distanceMaterials[index]=material;}return material;}function getDepthMaterial(object,material,light,shadowCameraNear,shadowCameraFar,type){var geometry=object.geometry;var result=null;var getMaterialVariant=getDepthMaterialVariant;var customMaterial=object.customDepthMaterial;if(light.isPointLight===true){getMaterialVariant=getDistanceMaterialVariant;customMaterial=object.customDistanceMaterial;}if(customMaterial===undefined){var useMorphing=false;if(material.morphTargets===true){if(geometry.isBufferGeometry===true){useMorphing=geometry.morphAttributes&&geometry.morphAttributes.position&&geometry.morphAttributes.position.length>0;}else if(geometry.isGeometry===true){useMorphing=geometry.morphTargets&&geometry.morphTargets.length>0;}}var useSkinning=false;if(object.isSkinnedMesh===true){if(material.skinning===true){useSkinning=true;}else {console.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:',object);}}var useInstancing=object.isInstancedMesh===true;result=getMaterialVariant(useMorphing,useSkinning,useInstancing);}else {result=customMaterial;}if(_renderer.localClippingEnabled&&material.clipShadows===true&&material.clippingPlanes.length!==0){// in this case we need a unique material instance reflecting the
// appropriate state
var keyA=result.uuid,keyB=material.uuid;var materialsForVariant=_materialCache[keyA];if(materialsForVariant===undefined){materialsForVariant={};_materialCache[keyA]=materialsForVariant;}var cachedMaterial=materialsForVariant[keyB];if(cachedMaterial===undefined){cachedMaterial=result.clone();materialsForVariant[keyB]=cachedMaterial;}result=cachedMaterial;}result.visible=material.visible;result.wireframe=material.wireframe;if(type===VSMShadowMap){result.side=material.shadowSide!==null?material.shadowSide:material.side;}else {result.side=material.shadowSide!==null?material.shadowSide:shadowSide[material.side];}result.clipShadows=material.clipShadows;result.clippingPlanes=material.clippingPlanes;result.clipIntersection=material.clipIntersection;result.wireframeLinewidth=material.wireframeLinewidth;result.linewidth=material.linewidth;if(light.isPointLight===true&&result.isMeshDistanceMaterial===true){result.referencePosition.setFromMatrixPosition(light.matrixWorld);result.nearDistance=shadowCameraNear;result.farDistance=shadowCameraFar;}return result;}function renderObject(object,camera,shadowCamera,light,type){if(object.visible===false)return;var visible=object.layers.test(camera.layers);if(visible&&(object.isMesh||object.isLine||object.isPoints)){if((object.castShadow||object.receiveShadow&&type===VSMShadowMap)&&(!object.frustumCulled||_frustum.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse,object.matrixWorld);var geometry=_objects.update(object);var material=object.material;if(Array.isArray(material)){var groups=geometry.groups;for(var k=0,kl=groups.length;k<kl;k++){var group=groups[k];var groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){var depthMaterial=getDepthMaterial(object,groupMaterial,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,group);}}}else if(material.visible){var depthMaterial=getDepthMaterial(object,material,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,null);}}}var children=object.children;for(var i=0,l=children.length;i<l;i++){renderObject(children[i],camera,shadowCamera,light,type);}}}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLState(gl,extensions,capabilities){var _factorToGL;var isWebGL2=capabilities.isWebGL2;function ColorBuffer(){var locked=false;var color=new Vector4();var currentColorMask=null;var currentColorClear=new Vector4(0,0,0,0);return {setMask:function setMask(colorMask){if(currentColorMask!==colorMask&&!locked){gl.colorMask(colorMask,colorMask,colorMask,colorMask);currentColorMask=colorMask;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(r,g,b,a,premultipliedAlpha){if(premultipliedAlpha===true){r*=a;g*=a;b*=a;}color.set(r,g,b,a);if(currentColorClear.equals(color)===false){gl.clearColor(r,g,b,a);currentColorClear.copy(color);}},reset:function reset(){locked=false;currentColorMask=null;currentColorClear.set(-1,0,0,0);// set to invalid state
}};}function DepthBuffer(){var locked=false;var currentDepthMask=null;var currentDepthFunc=null;var currentDepthClear=null;return {setTest:function setTest(depthTest){if(depthTest){enable(2929);}else {disable(2929);}},setMask:function setMask(depthMask){if(currentDepthMask!==depthMask&&!locked){gl.depthMask(depthMask);currentDepthMask=depthMask;}},setFunc:function setFunc(depthFunc){if(currentDepthFunc!==depthFunc){if(depthFunc){switch(depthFunc){case NeverDepth:gl.depthFunc(512);break;case AlwaysDepth:gl.depthFunc(519);break;case LessDepth:gl.depthFunc(513);break;case LessEqualDepth:gl.depthFunc(515);break;case EqualDepth:gl.depthFunc(514);break;case GreaterEqualDepth:gl.depthFunc(518);break;case GreaterDepth:gl.depthFunc(516);break;case NotEqualDepth:gl.depthFunc(517);break;default:gl.depthFunc(515);}}else {gl.depthFunc(515);}currentDepthFunc=depthFunc;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(depth){if(currentDepthClear!==depth){gl.clearDepth(depth);currentDepthClear=depth;}},reset:function reset(){locked=false;currentDepthMask=null;currentDepthFunc=null;currentDepthClear=null;}};}function StencilBuffer(){var locked=false;var currentStencilMask=null;var currentStencilFunc=null;var currentStencilRef=null;var currentStencilFuncMask=null;var currentStencilFail=null;var currentStencilZFail=null;var currentStencilZPass=null;var currentStencilClear=null;return {setTest:function setTest(stencilTest){if(!locked){if(stencilTest){enable(2960);}else {disable(2960);}}},setMask:function setMask(stencilMask){if(currentStencilMask!==stencilMask&&!locked){gl.stencilMask(stencilMask);currentStencilMask=stencilMask;}},setFunc:function setFunc(stencilFunc,stencilRef,stencilMask){if(currentStencilFunc!==stencilFunc||currentStencilRef!==stencilRef||currentStencilFuncMask!==stencilMask){gl.stencilFunc(stencilFunc,stencilRef,stencilMask);currentStencilFunc=stencilFunc;currentStencilRef=stencilRef;currentStencilFuncMask=stencilMask;}},setOp:function setOp(stencilFail,stencilZFail,stencilZPass){if(currentStencilFail!==stencilFail||currentStencilZFail!==stencilZFail||currentStencilZPass!==stencilZPass){gl.stencilOp(stencilFail,stencilZFail,stencilZPass);currentStencilFail=stencilFail;currentStencilZFail=stencilZFail;currentStencilZPass=stencilZPass;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(stencil){if(currentStencilClear!==stencil){gl.clearStencil(stencil);currentStencilClear=stencil;}},reset:function reset(){locked=false;currentStencilMask=null;currentStencilFunc=null;currentStencilRef=null;currentStencilFuncMask=null;currentStencilFail=null;currentStencilZFail=null;currentStencilZPass=null;currentStencilClear=null;}};}//
var colorBuffer=new ColorBuffer();var depthBuffer=new DepthBuffer();var stencilBuffer=new StencilBuffer();var maxVertexAttributes=gl.getParameter(34921);var newAttributes=new Uint8Array(maxVertexAttributes);var enabledAttributes=new Uint8Array(maxVertexAttributes);var attributeDivisors=new Uint8Array(maxVertexAttributes);var enabledCapabilities={};var currentProgram=null;var currentBlendingEnabled=null;var currentBlending=null;var currentBlendEquation=null;var currentBlendSrc=null;var currentBlendDst=null;var currentBlendEquationAlpha=null;var currentBlendSrcAlpha=null;var currentBlendDstAlpha=null;var currentPremultipledAlpha=false;var currentFlipSided=null;var currentCullFace=null;var currentLineWidth=null;var currentPolygonOffsetFactor=null;var currentPolygonOffsetUnits=null;var maxTextures=gl.getParameter(35661);var lineWidthAvailable=false;var version=0;var glVersion=gl.getParameter(7938);if(glVersion.indexOf('WebGL')!==-1){version=parseFloat(/^WebGL\\ ([0-9])/.exec(glVersion)[1]);lineWidthAvailable=version>=1.0;}else if(glVersion.indexOf('OpenGL ES')!==-1){version=parseFloat(/^OpenGL\\ ES\\ ([0-9])/.exec(glVersion)[1]);lineWidthAvailable=version>=2.0;}var currentTextureSlot=null;var currentBoundTextures={};var currentScissor=new Vector4();var currentViewport=new Vector4();function createTexture(type,target,count){var data=new Uint8Array(4);// 4 is required to match default unpack alignment of 4.
var texture=gl.createTexture();gl.bindTexture(type,texture);gl.texParameteri(type,10241,9728);gl.texParameteri(type,10240,9728);for(var i=0;i<count;i++){gl.texImage2D(target+i,0,6408,1,1,0,6408,5121,data);}return texture;}var emptyTextures={};emptyTextures[3553]=createTexture(3553,3553,1);emptyTextures[34067]=createTexture(34067,34069,6);// init
colorBuffer.setClear(0,0,0,1);depthBuffer.setClear(1);stencilBuffer.setClear(0);enable(2929);depthBuffer.setFunc(LessEqualDepth);setFlipSided(false);setCullFace(CullFaceBack);enable(2884);setBlending(NoBlending);//
function initAttributes(){for(var i=0,l=newAttributes.length;i<l;i++){newAttributes[i]=0;}}function enableAttribute(attribute){enableAttributeAndDivisor(attribute,0);}function enableAttributeAndDivisor(attribute,meshPerAttribute){newAttributes[attribute]=1;if(enabledAttributes[attribute]===0){gl.enableVertexAttribArray(attribute);enabledAttributes[attribute]=1;}if(attributeDivisors[attribute]!==meshPerAttribute){var extension=isWebGL2?gl:extensions.get('ANGLE_instanced_arrays');extension[isWebGL2?'vertexAttribDivisor':'vertexAttribDivisorANGLE'](attribute,meshPerAttribute);attributeDivisors[attribute]=meshPerAttribute;}}function disableUnusedAttributes(){for(var i=0,l=enabledAttributes.length;i!==l;++i){if(enabledAttributes[i]!==newAttributes[i]){gl.disableVertexAttribArray(i);enabledAttributes[i]=0;}}}function enable(id){if(enabledCapabilities[id]!==true){gl.enable(id);enabledCapabilities[id]=true;}}function disable(id){if(enabledCapabilities[id]!==false){gl.disable(id);enabledCapabilities[id]=false;}}function useProgram(program){if(currentProgram!==program){gl.useProgram(program);currentProgram=program;return true;}return false;}var equationToGL=_defineProperty(_defineProperty(_defineProperty({},AddEquation,32774),SubtractEquation,32778),ReverseSubtractEquation,32779);if(isWebGL2){equationToGL[MinEquation]=32775;equationToGL[MaxEquation]=32776;}else {var extension=extensions.get('EXT_blend_minmax');if(extension!==null){equationToGL[MinEquation]=extension.MIN_EXT;equationToGL[MaxEquation]=extension.MAX_EXT;}}var factorToGL=(_factorToGL={},_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_factorToGL,ZeroFactor,0),OneFactor,1),SrcColorFactor,768),SrcAlphaFactor,770),SrcAlphaSaturateFactor,776),DstColorFactor,774),DstAlphaFactor,772),OneMinusSrcColorFactor,769),OneMinusSrcAlphaFactor,771),OneMinusDstColorFactor,775),_defineProperty(_factorToGL,OneMinusDstAlphaFactor,773));function setBlending(blending,blendEquation,blendSrc,blendDst,blendEquationAlpha,blendSrcAlpha,blendDstAlpha,premultipliedAlpha){if(blending===NoBlending){if(currentBlendingEnabled){disable(3042);currentBlendingEnabled=false;}return;}if(!currentBlendingEnabled){enable(3042);currentBlendingEnabled=true;}if(blending!==CustomBlending){if(blending!==currentBlending||premultipliedAlpha!==currentPremultipledAlpha){if(currentBlendEquation!==AddEquation||currentBlendEquationAlpha!==AddEquation){gl.blendEquation(32774);currentBlendEquation=AddEquation;currentBlendEquationAlpha=AddEquation;}if(premultipliedAlpha){switch(blending){case NormalBlending:gl.blendFuncSeparate(1,771,1,771);break;case AdditiveBlending:gl.blendFunc(1,1);break;case SubtractiveBlending:gl.blendFuncSeparate(0,0,769,771);break;case MultiplyBlending:gl.blendFuncSeparate(0,768,0,770);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}else {switch(blending){case NormalBlending:gl.blendFuncSeparate(770,771,1,771);break;case AdditiveBlending:gl.blendFunc(770,1);break;case SubtractiveBlending:gl.blendFunc(0,769);break;case MultiplyBlending:gl.blendFunc(0,768);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}currentBlendSrc=null;currentBlendDst=null;currentBlendSrcAlpha=null;currentBlendDstAlpha=null;currentBlending=blending;currentPremultipledAlpha=premultipliedAlpha;}return;}// custom blending
blendEquationAlpha=blendEquationAlpha||blendEquation;blendSrcAlpha=blendSrcAlpha||blendSrc;blendDstAlpha=blendDstAlpha||blendDst;if(blendEquation!==currentBlendEquation||blendEquationAlpha!==currentBlendEquationAlpha){gl.blendEquationSeparate(equationToGL[blendEquation],equationToGL[blendEquationAlpha]);currentBlendEquation=blendEquation;currentBlendEquationAlpha=blendEquationAlpha;}if(blendSrc!==currentBlendSrc||blendDst!==currentBlendDst||blendSrcAlpha!==currentBlendSrcAlpha||blendDstAlpha!==currentBlendDstAlpha){gl.blendFuncSeparate(factorToGL[blendSrc],factorToGL[blendDst],factorToGL[blendSrcAlpha],factorToGL[blendDstAlpha]);currentBlendSrc=blendSrc;currentBlendDst=blendDst;currentBlendSrcAlpha=blendSrcAlpha;currentBlendDstAlpha=blendDstAlpha;}currentBlending=blending;currentPremultipledAlpha=null;}function setMaterial(material,frontFaceCW){material.side===DoubleSide?disable(2884):enable(2884);var flipSided=material.side===BackSide;if(frontFaceCW)flipSided=!flipSided;setFlipSided(flipSided);material.blending===NormalBlending&&material.transparent===false?setBlending(NoBlending):setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha);depthBuffer.setFunc(material.depthFunc);depthBuffer.setTest(material.depthTest);depthBuffer.setMask(material.depthWrite);colorBuffer.setMask(material.colorWrite);var stencilWrite=material.stencilWrite;stencilBuffer.setTest(stencilWrite);if(stencilWrite){stencilBuffer.setMask(material.stencilWriteMask);stencilBuffer.setFunc(material.stencilFunc,material.stencilRef,material.stencilFuncMask);stencilBuffer.setOp(material.stencilFail,material.stencilZFail,material.stencilZPass);}setPolygonOffset(material.polygonOffset,material.polygonOffsetFactor,material.polygonOffsetUnits);}//
function setFlipSided(flipSided){if(currentFlipSided!==flipSided){if(flipSided){gl.frontFace(2304);}else {gl.frontFace(2305);}currentFlipSided=flipSided;}}function setCullFace(cullFace){if(cullFace!==CullFaceNone){enable(2884);if(cullFace!==currentCullFace){if(cullFace===CullFaceBack){gl.cullFace(1029);}else if(cullFace===CullFaceFront){gl.cullFace(1028);}else {gl.cullFace(1032);}}}else {disable(2884);}currentCullFace=cullFace;}function setLineWidth(width){if(width!==currentLineWidth){if(lineWidthAvailable)gl.lineWidth(width);currentLineWidth=width;}}function setPolygonOffset(polygonOffset,factor,units){if(polygonOffset){enable(32823);if(currentPolygonOffsetFactor!==factor||currentPolygonOffsetUnits!==units){gl.polygonOffset(factor,units);currentPolygonOffsetFactor=factor;currentPolygonOffsetUnits=units;}}else {disable(32823);}}function setScissorTest(scissorTest){if(scissorTest){enable(3089);}else {disable(3089);}}// texture
function activeTexture(webglSlot){if(webglSlot===undefined)webglSlot=33984+maxTextures-1;if(currentTextureSlot!==webglSlot){gl.activeTexture(webglSlot);currentTextureSlot=webglSlot;}}function bindTexture(webglType,webglTexture){if(currentTextureSlot===null){activeTexture();}var boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture===undefined){boundTexture={type:undefined,texture:undefined};currentBoundTextures[currentTextureSlot]=boundTexture;}if(boundTexture.type!==webglType||boundTexture.texture!==webglTexture){gl.bindTexture(webglType,webglTexture||emptyTextures[webglType]);boundTexture.type=webglType;boundTexture.texture=webglTexture;}}function unbindTexture(){var boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture!==undefined&&boundTexture.type!==undefined){gl.bindTexture(boundTexture.type,null);boundTexture.type=undefined;boundTexture.texture=undefined;}}function compressedTexImage2D(){try{gl.compressedTexImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage2D(){try{gl.texImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage3D(){try{gl.texImage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}//
function scissor(scissor){if(currentScissor.equals(scissor)===false){gl.scissor(scissor.x,scissor.y,scissor.z,scissor.w);currentScissor.copy(scissor);}}function viewport(viewport){if(currentViewport.equals(viewport)===false){gl.viewport(viewport.x,viewport.y,viewport.z,viewport.w);currentViewport.copy(viewport);}}//
function reset(){for(var i=0;i<enabledAttributes.length;i++){if(enabledAttributes[i]===1){gl.disableVertexAttribArray(i);enabledAttributes[i]=0;}}enabledCapabilities={};currentTextureSlot=null;currentBoundTextures={};currentProgram=null;currentBlending=null;currentFlipSided=null;currentCullFace=null;colorBuffer.reset();depthBuffer.reset();stencilBuffer.reset();}return {buffers:{color:colorBuffer,depth:depthBuffer,stencil:stencilBuffer},initAttributes:initAttributes,enableAttribute:enableAttribute,enableAttributeAndDivisor:enableAttributeAndDivisor,disableUnusedAttributes:disableUnusedAttributes,enable:enable,disable:disable,useProgram:useProgram,setBlending:setBlending,setMaterial:setMaterial,setFlipSided:setFlipSided,setCullFace:setCullFace,setLineWidth:setLineWidth,setPolygonOffset:setPolygonOffset,setScissorTest:setScissorTest,activeTexture:activeTexture,bindTexture:bindTexture,unbindTexture:unbindTexture,compressedTexImage2D:compressedTexImage2D,texImage2D:texImage2D,texImage3D:texImage3D,scissor:scissor,viewport:viewport,reset:reset};}/**
 * @author mrdoob / http://mrdoob.com/
 */function WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info){var isWebGL2=capabilities.isWebGL2;var maxTextures=capabilities.maxTextures;var maxCubemapSize=capabilities.maxCubemapSize;var maxTextureSize=capabilities.maxTextureSize;var maxSamples=capabilities.maxSamples;var _videoTextures=new WeakMap();var _canvas;// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
var useOffscreenCanvas=false;try{useOffscreenCanvas=typeof OffscreenCanvas!=='undefined'&&new OffscreenCanvas(1,1).getContext("2d")!==null;}catch(err){// Ignore any errors
}function createCanvas(width,height){// Use OffscreenCanvas when available. Specially needed in web workers
return useOffscreenCanvas?new OffscreenCanvas(width,height):document.createElementNS('http://www.w3.org/1999/xhtml','canvas');}function resizeImage(image,needsPowerOfTwo,needsNewCanvas,maxSize){var scale=1;// handle case if texture exceeds max size
if(image.width>maxSize||image.height>maxSize){scale=maxSize/Math.max(image.width,image.height);}// only perform resize if necessary
if(scale<1||needsPowerOfTwo===true){// only perform resize for certain image types
if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){var floor=needsPowerOfTwo?MathUtils.floorPowerOfTwo:Math.floor;var width=floor(scale*image.width);var height=floor(scale*image.height);if(_canvas===undefined)_canvas=createCanvas(width,height);// cube textures can't reuse the same canvas
var canvas=needsNewCanvas?createCanvas(width,height):_canvas;canvas.width=width;canvas.height=height;var context=canvas.getContext('2d');context.drawImage(image,0,0,width,height);console.warn('THREE.WebGLRenderer: Texture has been resized from ('+image.width+'x'+image.height+') to ('+width+'x'+height+').');return canvas;}else {if('data'in image){console.warn('THREE.WebGLRenderer: Image in DataTexture is too big ('+image.width+'x'+image.height+').');}return image;}}return image;}function isPowerOfTwo(image){return MathUtils.isPowerOfTwo(image.width)&&MathUtils.isPowerOfTwo(image.height);}function textureNeedsPowerOfTwo(texture){if(isWebGL2)return false;return texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping||texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function textureNeedsGenerateMipmaps(texture,supportsMips){return texture.generateMipmaps&&supportsMips&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function generateMipmap(target,texture,width,height){_gl.generateMipmap(target);var textureProperties=properties.get(texture);// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
textureProperties.__maxMipLevel=Math.log(Math.max(width,height))*Math.LOG2E;}function getInternalFormat(internalFormatName,glFormat,glType){if(isWebGL2===false)return glFormat;if(internalFormatName!==null){if(_gl[internalFormatName]!==undefined)return _gl[internalFormatName];console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\''+internalFormatName+'\\'');}var internalFormat=glFormat;if(glFormat===6403){if(glType===5126)internalFormat=33326;if(glType===5131)internalFormat=33325;if(glType===5121)internalFormat=33321;}if(glFormat===6407){if(glType===5126)internalFormat=34837;if(glType===5131)internalFormat=34843;if(glType===5121)internalFormat=32849;}if(glFormat===6408){if(glType===5126)internalFormat=34836;if(glType===5131)internalFormat=34842;if(glType===5121)internalFormat=32856;}if(internalFormat===33325||internalFormat===33326||internalFormat===34842||internalFormat===34836){extensions.get('EXT_color_buffer_float');}else if(internalFormat===34843||internalFormat===34837){console.warn('THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.');}return internalFormat;}// Fallback filters for non-power-of-2 textures
function filterFallback(f){if(f===NearestFilter||f===NearestMipmapNearestFilter||f===NearestMipmapLinearFilter){return 9728;}return 9729;}//
function onTextureDispose(event){var texture=event.target;texture.removeEventListener('dispose',onTextureDispose);deallocateTexture(texture);if(texture.isVideoTexture){_videoTextures.delete(texture);}info.memory.textures--;}function onRenderTargetDispose(event){var renderTarget=event.target;renderTarget.removeEventListener('dispose',onRenderTargetDispose);deallocateRenderTarget(renderTarget);info.memory.textures--;}//
function deallocateTexture(texture){var textureProperties=properties.get(texture);if(textureProperties.__webglInit===undefined)return;_gl.deleteTexture(textureProperties.__webglTexture);properties.remove(texture);}function deallocateRenderTarget(renderTarget){var renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(renderTarget.texture);if(!renderTarget)return;if(textureProperties.__webglTexture!==undefined){_gl.deleteTexture(textureProperties.__webglTexture);}if(renderTarget.depthTexture){renderTarget.depthTexture.dispose();}if(renderTarget.isWebGLCubeRenderTarget){for(var i=0;i<6;i++){_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);}}else {_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);}if(renderTarget.isWebGLMultiviewRenderTarget){_gl.deleteTexture(renderTargetProperties.__webglColorTexture);_gl.deleteTexture(renderTargetProperties.__webglDepthStencilTexture);info.memory.textures-=2;for(var i=0,il=renderTargetProperties.__webglViewFramebuffers.length;i<il;i++){_gl.deleteFramebuffer(renderTargetProperties.__webglViewFramebuffers[i]);}}properties.remove(renderTarget.texture);properties.remove(renderTarget);}//
var textureUnits=0;function resetTextureUnits(){textureUnits=0;}function allocateTextureUnit(){var textureUnit=textureUnits;if(textureUnit>=maxTextures){console.warn('THREE.WebGLTextures: Trying to use '+textureUnit+' texture units while this GPU supports only '+maxTextures);}textureUnits+=1;return textureUnit;}//
function setTexture2D(texture,slot){var textureProperties=properties.get(texture);if(texture.isVideoTexture)updateVideoTexture(texture);if(texture.version>0&&textureProperties.__version!==texture.version){var image=texture.image;if(image===undefined){console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');}else if(image.complete===false){console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');}else {uploadTexture(textureProperties,texture,slot);return;}}state.activeTexture(33984+slot);state.bindTexture(3553,textureProperties.__webglTexture);}function setTexture2DArray(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(35866,textureProperties.__webglTexture);}function setTexture3D(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(32879,textureProperties.__webglTexture);}function setTextureCube(texture,slot){if(texture.image.length!==6)return;var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){initTexture(textureProperties,texture);state.activeTexture(33984+slot);state.bindTexture(34067,textureProperties.__webglTexture);_gl.pixelStorei(37440,texture.flipY);var isCompressed=texture&&(texture.isCompressedTexture||texture.image[0].isCompressedTexture);var isDataTexture=texture.image[0]&&texture.image[0].isDataTexture;var cubeImage=[];for(var i=0;i<6;i++){if(!isCompressed&&!isDataTexture){cubeImage[i]=resizeImage(texture.image[i],false,true,maxCubemapSize);}else {cubeImage[i]=isDataTexture?texture.image[i].image:texture.image[i];}}var image=cubeImage[0],supportsMips=isPowerOfTwo(image)||isWebGL2,glFormat=utils.convert(texture.format),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType);setTextureParameters(34067,texture,supportsMips);var mipmaps;if(isCompressed){for(var i=0;i<6;i++){mipmaps=cubeImage[i].mipmaps;for(var j=0;j<mipmaps.length;j++){var mipmap=mipmaps[j];if(texture.format!==RGBAFormat&&texture.format!==RGBFormat){if(glFormat!==null){state.compressedTexImage2D(34069+i,j,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}else {console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');}}else {state.texImage2D(34069+i,j,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}}textureProperties.__maxMipLevel=mipmaps.length-1;}else {mipmaps=texture.mipmaps;for(var i=0;i<6;i++){if(isDataTexture){state.texImage2D(34069+i,0,glInternalFormat,cubeImage[i].width,cubeImage[i].height,0,glFormat,glType,cubeImage[i].data);for(var j=0;j<mipmaps.length;j++){var mipmap=mipmaps[j];var mipmapImage=mipmap.image[i].image;state.texImage2D(34069+i,j+1,glInternalFormat,mipmapImage.width,mipmapImage.height,0,glFormat,glType,mipmapImage.data);}}else {state.texImage2D(34069+i,0,glInternalFormat,glFormat,glType,cubeImage[i]);for(var j=0;j<mipmaps.length;j++){var mipmap=mipmaps[j];state.texImage2D(34069+i,j+1,glInternalFormat,glFormat,glType,mipmap.image[i]);}}}textureProperties.__maxMipLevel=mipmaps.length;}if(textureNeedsGenerateMipmaps(texture,supportsMips)){// We assume images for cube map have the same size.
generateMipmap(34067,texture,image.width,image.height);}textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture);}else {state.activeTexture(33984+slot);state.bindTexture(34067,textureProperties.__webglTexture);}}function setTextureCubeDynamic(texture,slot){state.activeTexture(33984+slot);state.bindTexture(34067,properties.get(texture).__webglTexture);}var wrappingToGL=_defineProperty(_defineProperty(_defineProperty({},RepeatWrapping,10497),ClampToEdgeWrapping,33071),MirroredRepeatWrapping,33648);var filterToGL=_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({},NearestFilter,9728),NearestMipmapNearestFilter,9984),NearestMipmapLinearFilter,9986),LinearFilter,9729),LinearMipmapNearestFilter,9985),LinearMipmapLinearFilter,9987);function setTextureParameters(textureType,texture,supportsMips){if(supportsMips){_gl.texParameteri(textureType,10242,wrappingToGL[texture.wrapS]);_gl.texParameteri(textureType,10243,wrappingToGL[texture.wrapT]);if(textureType===32879||textureType===35866){_gl.texParameteri(textureType,32882,wrappingToGL[texture.wrapR]);}_gl.texParameteri(textureType,10240,filterToGL[texture.magFilter]);_gl.texParameteri(textureType,10241,filterToGL[texture.minFilter]);}else {_gl.texParameteri(textureType,10242,33071);_gl.texParameteri(textureType,10243,33071);if(textureType===32879||textureType===35866){_gl.texParameteri(textureType,32882,33071);}if(texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');}_gl.texParameteri(textureType,10240,filterFallback(texture.magFilter));_gl.texParameteri(textureType,10241,filterFallback(texture.minFilter));if(texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');}}var extension=extensions.get('EXT_texture_filter_anisotropic');if(extension){if(texture.type===FloatType&&extensions.get('OES_texture_float_linear')===null)return;if(texture.type===HalfFloatType&&(isWebGL2||extensions.get('OES_texture_half_float_linear'))===null)return;if(texture.anisotropy>1||properties.get(texture).__currentAnisotropy){_gl.texParameterf(textureType,extension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy()));properties.get(texture).__currentAnisotropy=texture.anisotropy;}}}function initTexture(textureProperties,texture){if(textureProperties.__webglInit===undefined){textureProperties.__webglInit=true;texture.addEventListener('dispose',onTextureDispose);textureProperties.__webglTexture=_gl.createTexture();info.memory.textures++;}}function uploadTexture(textureProperties,texture,slot){var textureType=3553;if(texture.isDataTexture2DArray)textureType=35866;if(texture.isDataTexture3D)textureType=32879;initTexture(textureProperties,texture);state.activeTexture(33984+slot);state.bindTexture(textureType,textureProperties.__webglTexture);_gl.pixelStorei(37440,texture.flipY);_gl.pixelStorei(37441,texture.premultiplyAlpha);_gl.pixelStorei(3317,texture.unpackAlignment);var needsPowerOfTwo=textureNeedsPowerOfTwo(texture)&&isPowerOfTwo(texture.image)===false;var image=resizeImage(texture.image,needsPowerOfTwo,false,maxTextureSize);var supportsMips=isPowerOfTwo(image)||isWebGL2,glFormat=utils.convert(texture.format),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType);setTextureParameters(textureType,texture,supportsMips);var mipmap,mipmaps=texture.mipmaps;if(texture.isDepthTexture){// populate depth texture with dummy data
glInternalFormat=6402;if(texture.type===FloatType){if(isWebGL2===false)throw new Error('Float Depth Texture only supported in WebGL2.0');glInternalFormat=36012;}else if(isWebGL2){// WebGL 2.0 requires signed internalformat for glTexImage2D
glInternalFormat=33189;}if(texture.format===DepthFormat&&glInternalFormat===6402){// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.type!==UnsignedShortType&&texture.type!==UnsignedIntType){console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');texture.type=UnsignedShortType;glType=utils.convert(texture.type);}}// Depth stencil textures need the DEPTH_STENCIL internal format
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.format===DepthStencilFormat){glInternalFormat=34041;// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.type!==UnsignedInt248Type){console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');texture.type=UnsignedInt248Type;glType=utils.convert(texture.type);}}state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);}else if(texture.isDataTexture){// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(mipmaps.length>0&&supportsMips){for(var i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];state.texImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}texture.generateMipmaps=false;textureProperties.__maxMipLevel=mipmaps.length-1;}else {state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);textureProperties.__maxMipLevel=0;}}else if(texture.isCompressedTexture){for(var i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];if(texture.format!==RGBAFormat&&texture.format!==RGBFormat){if(glFormat!==null){state.compressedTexImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}else {console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');}}else {state.texImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}textureProperties.__maxMipLevel=mipmaps.length-1;}else if(texture.isDataTexture2DArray){state.texImage3D(35866,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);textureProperties.__maxMipLevel=0;}else if(texture.isDataTexture3D){state.texImage3D(32879,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);textureProperties.__maxMipLevel=0;}else {// regular Texture (image, video, canvas)
// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(mipmaps.length>0&&supportsMips){for(var i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];state.texImage2D(3553,i,glInternalFormat,glFormat,glType,mipmap);}texture.generateMipmaps=false;textureProperties.__maxMipLevel=mipmaps.length-1;}else {state.texImage2D(3553,0,glInternalFormat,glFormat,glType,image);textureProperties.__maxMipLevel=0;}}if(textureNeedsGenerateMipmaps(texture,supportsMips)){generateMipmap(textureType,texture,image.width,image.height);}textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture);}// Render targets
// Setup storage for target texture and bind it to correct framebuffer
function setupFrameBufferTexture(framebuffer,renderTarget,attachment,textureTarget){var glFormat=utils.convert(renderTarget.texture.format);var glType=utils.convert(renderTarget.texture.type);var glInternalFormat=getInternalFormat(renderTarget.texture.internalFormat,glFormat,glType);state.texImage2D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null);_gl.bindFramebuffer(36160,framebuffer);_gl.framebufferTexture2D(36160,attachment,textureTarget,properties.get(renderTarget.texture).__webglTexture,0);_gl.bindFramebuffer(36160,null);}// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
function setupRenderBufferStorage(renderbuffer,renderTarget,isMultisample){_gl.bindRenderbuffer(36161,renderbuffer);if(renderTarget.depthBuffer&&!renderTarget.stencilBuffer){if(isMultisample){var samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,33189,renderTarget.width,renderTarget.height);}else {_gl.renderbufferStorage(36161,33189,renderTarget.width,renderTarget.height);}_gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer);}else if(renderTarget.depthBuffer&&renderTarget.stencilBuffer){if(isMultisample){var samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,35056,renderTarget.width,renderTarget.height);}else {_gl.renderbufferStorage(36161,34041,renderTarget.width,renderTarget.height);}_gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer);}else {var glFormat=utils.convert(renderTarget.texture.format);var glType=utils.convert(renderTarget.texture.type);var glInternalFormat=getInternalFormat(renderTarget.texture.internalFormat,glFormat,glType);if(isMultisample){var samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);}else {_gl.renderbufferStorage(36161,glInternalFormat,renderTarget.width,renderTarget.height);}}_gl.bindRenderbuffer(36161,null);}// Setup resources for a Depth Texture for a FBO (needs an extension)
function setupDepthTexture(framebuffer,renderTarget){var isCube=renderTarget&&renderTarget.isWebGLCubeRenderTarget;if(isCube)throw new Error('Depth Texture with cube render targets is not supported');_gl.bindFramebuffer(36160,framebuffer);if(!(renderTarget.depthTexture&&renderTarget.depthTexture.isDepthTexture)){throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');}// upload an empty depth texture with framebuffer size
if(!properties.get(renderTarget.depthTexture).__webglTexture||renderTarget.depthTexture.image.width!==renderTarget.width||renderTarget.depthTexture.image.height!==renderTarget.height){renderTarget.depthTexture.image.width=renderTarget.width;renderTarget.depthTexture.image.height=renderTarget.height;renderTarget.depthTexture.needsUpdate=true;}setTexture2D(renderTarget.depthTexture,0);var webglDepthTexture=properties.get(renderTarget.depthTexture).__webglTexture;if(renderTarget.depthTexture.format===DepthFormat){_gl.framebufferTexture2D(36160,36096,3553,webglDepthTexture,0);}else if(renderTarget.depthTexture.format===DepthStencilFormat){_gl.framebufferTexture2D(36160,33306,3553,webglDepthTexture,0);}else {throw new Error('Unknown depthTexture format');}}// Setup GL resources for a non-texture depth buffer
function setupDepthRenderbuffer(renderTarget){var renderTargetProperties=properties.get(renderTarget);var isCube=renderTarget.isWebGLCubeRenderTarget===true;if(renderTarget.depthTexture){if(isCube)throw new Error('target.depthTexture not supported in Cube render targets');setupDepthTexture(renderTargetProperties.__webglFramebuffer,renderTarget);}else {if(isCube){renderTargetProperties.__webglDepthbuffer=[];for(var i=0;i<6;i++){_gl.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer[i]);renderTargetProperties.__webglDepthbuffer[i]=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i],renderTarget);}}else {_gl.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer);renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget);}}_gl.bindFramebuffer(36160,null);}// Set up GL resources for the render target
function setupRenderTarget(renderTarget){var renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(renderTarget.texture);renderTarget.addEventListener('dispose',onRenderTargetDispose);textureProperties.__webglTexture=_gl.createTexture();info.memory.textures++;var isCube=renderTarget.isWebGLCubeRenderTarget===true;var isMultisample=renderTarget.isWebGLMultisampleRenderTarget===true;var isMultiview=renderTarget.isWebGLMultiviewRenderTarget===true;var supportsMips=isPowerOfTwo(renderTarget)||isWebGL2;// Setup framebuffer
if(isCube){renderTargetProperties.__webglFramebuffer=[];for(var i=0;i<6;i++){renderTargetProperties.__webglFramebuffer[i]=_gl.createFramebuffer();}}else {renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer();if(isMultisample){if(isWebGL2){renderTargetProperties.__webglMultisampledFramebuffer=_gl.createFramebuffer();renderTargetProperties.__webglColorRenderbuffer=_gl.createRenderbuffer();_gl.bindRenderbuffer(36161,renderTargetProperties.__webglColorRenderbuffer);var glFormat=utils.convert(renderTarget.texture.format);var glType=utils.convert(renderTarget.texture.type);var glInternalFormat=getInternalFormat(renderTarget.texture.internalFormat,glFormat,glType);var samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);_gl.bindFramebuffer(36160,renderTargetProperties.__webglMultisampledFramebuffer);_gl.framebufferRenderbuffer(36160,36064,36161,renderTargetProperties.__webglColorRenderbuffer);_gl.bindRenderbuffer(36161,null);if(renderTarget.depthBuffer){renderTargetProperties.__webglDepthRenderbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer,renderTarget,true);}_gl.bindFramebuffer(36160,null);}else {console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');}}else if(isMultiview){var width=renderTarget.width;var height=renderTarget.height;var numViews=renderTarget.numViews;_gl.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer);var ext=extensions.get('OVR_multiview2');info.memory.textures+=2;var colorTexture=_gl.createTexture();_gl.bindTexture(35866,colorTexture);_gl.texParameteri(35866,10240,9728);_gl.texParameteri(35866,10241,9728);_gl.texImage3D(35866,0,32856,width,height,numViews,0,6408,5121,null);ext.framebufferTextureMultiviewOVR(36160,36064,colorTexture,0,0,numViews);var depthStencilTexture=_gl.createTexture();_gl.bindTexture(35866,depthStencilTexture);_gl.texParameteri(35866,10240,9728);_gl.texParameteri(35866,10241,9728);_gl.texImage3D(35866,0,35056,width,height,numViews,0,34041,34042,null);ext.framebufferTextureMultiviewOVR(36160,33306,depthStencilTexture,0,0,numViews);var viewFramebuffers=new Array(numViews);for(var i=0;i<numViews;++i){viewFramebuffers[i]=_gl.createFramebuffer();_gl.bindFramebuffer(36160,viewFramebuffers[i]);_gl.framebufferTextureLayer(36160,36064,colorTexture,0,i);}renderTargetProperties.__webglColorTexture=colorTexture;renderTargetProperties.__webglDepthStencilTexture=depthStencilTexture;renderTargetProperties.__webglViewFramebuffers=viewFramebuffers;_gl.bindFramebuffer(36160,null);_gl.bindTexture(35866,null);}}// Setup color buffer
if(isCube){state.bindTexture(34067,textureProperties.__webglTexture);setTextureParameters(34067,renderTarget.texture,supportsMips);for(var i=0;i<6;i++){setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i],renderTarget,36064,34069+i);}if(textureNeedsGenerateMipmaps(renderTarget.texture,supportsMips)){generateMipmap(34067,renderTarget.texture,renderTarget.width,renderTarget.height);}state.bindTexture(34067,null);}else if(!isMultiview){state.bindTexture(3553,textureProperties.__webglTexture);setTextureParameters(3553,renderTarget.texture,supportsMips);setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,36064,3553);if(textureNeedsGenerateMipmaps(renderTarget.texture,supportsMips)){generateMipmap(3553,renderTarget.texture,renderTarget.width,renderTarget.height);}state.bindTexture(3553,null);}// Setup depth and stencil buffers
if(renderTarget.depthBuffer){setupDepthRenderbuffer(renderTarget);}}function updateRenderTargetMipmap(renderTarget){var texture=renderTarget.texture;var supportsMips=isPowerOfTwo(renderTarget)||isWebGL2;if(textureNeedsGenerateMipmaps(texture,supportsMips)){var target=renderTarget.isWebGLCubeRenderTarget?34067:3553;var webglTexture=properties.get(texture).__webglTexture;state.bindTexture(target,webglTexture);generateMipmap(target,texture,renderTarget.width,renderTarget.height);state.bindTexture(target,null);}}function updateMultisampleRenderTarget(renderTarget){if(renderTarget.isWebGLMultisampleRenderTarget){if(isWebGL2){var renderTargetProperties=properties.get(renderTarget);_gl.bindFramebuffer(36008,renderTargetProperties.__webglMultisampledFramebuffer);_gl.bindFramebuffer(36009,renderTargetProperties.__webglFramebuffer);var width=renderTarget.width;var height=renderTarget.height;var mask=16384;if(renderTarget.depthBuffer)mask|=256;if(renderTarget.stencilBuffer)mask|=1024;_gl.blitFramebuffer(0,0,width,height,0,0,width,height,mask,9728);}else {console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');}}}function getRenderTargetSamples(renderTarget){return isWebGL2&&renderTarget.isWebGLMultisampleRenderTarget?Math.min(maxSamples,renderTarget.samples):0;}function updateVideoTexture(texture){var frame=info.render.frame;// Check the last frame we updated the VideoTexture
if(_videoTextures.get(texture)!==frame){_videoTextures.set(texture,frame);texture.update();}}// backwards compatibility
var warnedTexture2D=false;var warnedTextureCube=false;function safeSetTexture2D(texture,slot){if(texture&&texture.isWebGLRenderTarget){if(warnedTexture2D===false){console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");warnedTexture2D=true;}texture=texture.texture;}setTexture2D(texture,slot);}function safeSetTextureCube(texture,slot){if(texture&&texture.isWebGLCubeRenderTarget){if(warnedTextureCube===false){console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");warnedTextureCube=true;}texture=texture.texture;}// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture
// TODO: unify these code paths
if(texture&&texture.isCubeTexture||Array.isArray(texture.image)&&texture.image.length===6){// CompressedTexture can have Array in image :/
// this function alone should take care of cube textures
setTextureCube(texture,slot);}else {// assumed: texture property of THREE.WebGLCubeRenderTarget
setTextureCubeDynamic(texture,slot);}}//
this.allocateTextureUnit=allocateTextureUnit;this.resetTextureUnits=resetTextureUnits;this.setTexture2D=setTexture2D;this.setTexture2DArray=setTexture2DArray;this.setTexture3D=setTexture3D;this.setTextureCube=setTextureCube;this.setTextureCubeDynamic=setTextureCubeDynamic;this.setupRenderTarget=setupRenderTarget;this.updateRenderTargetMipmap=updateRenderTargetMipmap;this.updateMultisampleRenderTarget=updateMultisampleRenderTarget;this.safeSetTexture2D=safeSetTexture2D;this.safeSetTextureCube=safeSetTextureCube;}/**
 * @author thespite / http://www.twitter.com/thespite
 */function WebGLUtils(gl,extensions,capabilities){var isWebGL2=capabilities.isWebGL2;function convert(p){var extension;if(p===UnsignedByteType)return 5121;if(p===UnsignedShort4444Type)return 32819;if(p===UnsignedShort5551Type)return 32820;if(p===UnsignedShort565Type)return 33635;if(p===ByteType)return 5120;if(p===ShortType)return 5122;if(p===UnsignedShortType)return 5123;if(p===IntType)return 5124;if(p===UnsignedIntType)return 5125;if(p===FloatType)return 5126;if(p===HalfFloatType){if(isWebGL2)return 5131;extension=extensions.get('OES_texture_half_float');if(extension!==null){return extension.HALF_FLOAT_OES;}else {return null;}}if(p===AlphaFormat)return 6406;if(p===RGBFormat)return 6407;if(p===RGBAFormat)return 6408;if(p===LuminanceFormat)return 6409;if(p===LuminanceAlphaFormat)return 6410;if(p===DepthFormat)return 6402;if(p===DepthStencilFormat)return 34041;if(p===RedFormat)return 6403;// WebGL2 formats.
if(p===RedIntegerFormat)return 36244;if(p===RGFormat)return 33319;if(p===RGIntegerFormat)return 33320;if(p===RGBIntegerFormat)return 36248;if(p===RGBAIntegerFormat)return 36249;if(p===RGB_S3TC_DXT1_Format||p===RGBA_S3TC_DXT1_Format||p===RGBA_S3TC_DXT3_Format||p===RGBA_S3TC_DXT5_Format){extension=extensions.get('WEBGL_compressed_texture_s3tc');if(extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;}else {return null;}}if(p===RGB_PVRTC_4BPPV1_Format||p===RGB_PVRTC_2BPPV1_Format||p===RGBA_PVRTC_4BPPV1_Format||p===RGBA_PVRTC_2BPPV1_Format){extension=extensions.get('WEBGL_compressed_texture_pvrtc');if(extension!==null){if(p===RGB_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===RGB_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===RGBA_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===RGBA_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;}else {return null;}}if(p===RGB_ETC1_Format){extension=extensions.get('WEBGL_compressed_texture_etc1');if(extension!==null){return extension.COMPRESSED_RGB_ETC1_WEBGL;}else {return null;}}if(p===RGBA_ASTC_4x4_Format||p===RGBA_ASTC_5x4_Format||p===RGBA_ASTC_5x5_Format||p===RGBA_ASTC_6x5_Format||p===RGBA_ASTC_6x6_Format||p===RGBA_ASTC_8x5_Format||p===RGBA_ASTC_8x6_Format||p===RGBA_ASTC_8x8_Format||p===RGBA_ASTC_10x5_Format||p===RGBA_ASTC_10x6_Format||p===RGBA_ASTC_10x8_Format||p===RGBA_ASTC_10x10_Format||p===RGBA_ASTC_12x10_Format||p===RGBA_ASTC_12x12_Format){extension=extensions.get('WEBGL_compressed_texture_astc');if(extension!==null){// TODO Complete?
return p;}else {return null;}}if(p===UnsignedInt248Type){if(isWebGL2)return 34042;extension=extensions.get('WEBGL_depth_texture');if(extension!==null){return extension.UNSIGNED_INT_24_8_WEBGL;}else {return null;}}}return {convert:convert};}/**
 * @author fernandojsg / http://fernandojsg.com
 * @author Takahiro https://github.com/takahirox
 */function WebGLMultiviewRenderTarget(width,height,numViews,options){WebGLRenderTarget.call(this,width,height,options);this.depthBuffer=false;this.stencilBuffer=false;this.numViews=numViews;}WebGLMultiviewRenderTarget.prototype=Object.assign(Object.create(WebGLRenderTarget.prototype),{constructor:WebGLMultiviewRenderTarget,isWebGLMultiviewRenderTarget:true,copy:function copy(source){WebGLRenderTarget.prototype.copy.call(this,source);this.numViews=source.numViews;return this;},setNumViews:function setNumViews(numViews){if(this.numViews!==numViews){this.numViews=numViews;this.dispose();}return this;}});/**
 * @author fernandojsg / http://fernandojsg.com
 * @author Takahiro https://github.com/takahirox
 */function WebGLMultiview(renderer,gl){var DEFAULT_NUMVIEWS=2;var extensions=renderer.extensions;var properties=renderer.properties;var renderTarget,currentRenderTarget;var mat3,mat4,cameraArray,renderSize;var available;var maxNumViews=0;//
function isAvailable(){if(available===undefined){var extension=extensions.get('OVR_multiview2');available=extension!==null&&gl.getContextAttributes().antialias===false;if(available){maxNumViews=gl.getParameter(extension.MAX_VIEWS_OVR);renderTarget=new WebGLMultiviewRenderTarget(0,0,DEFAULT_NUMVIEWS);renderSize=new Vector2();mat4=[];mat3=[];cameraArray=[];for(var i=0;i<maxNumViews;i++){mat4[i]=new Matrix4();mat3[i]=new Matrix3();}}}return available;}function getCameraArray(camera){if(camera.isArrayCamera)return camera.cameras;cameraArray[0]=camera;return cameraArray;}function updateCameraProjectionMatricesUniform(camera,uniforms){var cameras=getCameraArray(camera);for(var i=0;i<cameras.length;i++){mat4[i].copy(cameras[i].projectionMatrix);}uniforms.setValue(gl,'projectionMatrices',mat4);}function updateCameraViewMatricesUniform(camera,uniforms){var cameras=getCameraArray(camera);for(var i=0;i<cameras.length;i++){mat4[i].copy(cameras[i].matrixWorldInverse);}uniforms.setValue(gl,'viewMatrices',mat4);}function updateObjectMatricesUniforms(object,camera,uniforms){var cameras=getCameraArray(camera);for(var i=0;i<cameras.length;i++){mat4[i].multiplyMatrices(cameras[i].matrixWorldInverse,object.matrixWorld);mat3[i].getNormalMatrix(mat4[i]);}uniforms.setValue(gl,'modelViewMatrices',mat4);uniforms.setValue(gl,'normalMatrices',mat3);}function isMultiviewCompatible(camera){if(camera.isArrayCamera===undefined)return true;var cameras=camera.cameras;if(cameras.length>maxNumViews)return false;for(var i=1,il=cameras.length;i<il;i++){if(cameras[0].viewport.z!==cameras[i].viewport.z||cameras[0].viewport.w!==cameras[i].viewport.w)return false;}return true;}function resizeRenderTarget(camera){if(currentRenderTarget){renderSize.set(currentRenderTarget.width,currentRenderTarget.height);}else {renderer.getDrawingBufferSize(renderSize);}if(camera.isArrayCamera){var viewport=camera.cameras[0].viewport;renderTarget.setSize(viewport.z,viewport.w);renderTarget.setNumViews(camera.cameras.length);}else {renderTarget.setSize(renderSize.x,renderSize.y);renderTarget.setNumViews(DEFAULT_NUMVIEWS);}}function attachCamera(camera){if(isMultiviewCompatible(camera)===false)return;currentRenderTarget=renderer.getRenderTarget();resizeRenderTarget(camera);renderer.setRenderTarget(renderTarget);}function detachCamera(camera){if(renderTarget!==renderer.getRenderTarget())return;renderer.setRenderTarget(currentRenderTarget);flush(camera);}function flush(camera){var srcRenderTarget=renderTarget;var numViews=srcRenderTarget.numViews;var srcFramebuffers=properties.get(srcRenderTarget).__webglViewFramebuffers;var viewWidth=srcRenderTarget.width;var viewHeight=srcRenderTarget.height;if(camera.isArrayCamera){for(var i=0;i<numViews;i++){var viewport=camera.cameras[i].viewport;var x1=viewport.x;var y1=viewport.y;var x2=x1+viewport.z;var y2=y1+viewport.w;gl.bindFramebuffer(36008,srcFramebuffers[i]);gl.blitFramebuffer(0,0,viewWidth,viewHeight,x1,y1,x2,y2,16384,9728);}}else {gl.bindFramebuffer(36008,srcFramebuffers[0]);gl.blitFramebuffer(0,0,viewWidth,viewHeight,0,0,renderSize.x,renderSize.y,16384,9728);}}this.isAvailable=isAvailable;this.attachCamera=attachCamera;this.detachCamera=detachCamera;this.updateCameraProjectionMatricesUniform=updateCameraProjectionMatricesUniform;this.updateCameraViewMatricesUniform=updateCameraViewMatricesUniform;this.updateObjectMatricesUniforms=updateObjectMatricesUniforms;}/**
 * @author mrdoob / http://mrdoob.com/
 */function ArrayCamera(array){PerspectiveCamera.call(this);this.cameras=array||[];}ArrayCamera.prototype=Object.assign(Object.create(PerspectiveCamera.prototype),{constructor:ArrayCamera,isArrayCamera:true});/**
 * @author mrdoob / http://mrdoob.com/
 */function Group(){Object3D.call(this);this.type='Group';}Group.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Group,isGroup:true});/**
 * @author mrdoob / http://mrdoob.com/
 */function WebXRManager(renderer,gl){var scope=this;var session=null;// var framebufferScaleFactor = 1.0;
var referenceSpace=null;var referenceSpaceType='local-floor';var pose=null;var controllers=[];var inputSourcesMap=new Map();//
var cameraL=new PerspectiveCamera();cameraL.layers.enable(1);cameraL.viewport=new Vector4();var cameraR=new PerspectiveCamera();cameraR.layers.enable(2);cameraR.viewport=new Vector4();var cameraVR=new ArrayCamera([cameraL,cameraR]);cameraVR.layers.enable(1);cameraVR.layers.enable(2);var _currentDepthNear=null;var _currentDepthFar=null;//
this.enabled=false;this.isPresenting=false;this.getController=function(id){var controller=controllers[id];if(controller===undefined){controller={};controllers[id]=controller;}if(controller.targetRay===undefined){controller.targetRay=new Group();controller.targetRay.matrixAutoUpdate=false;controller.targetRay.visible=false;}return controller.targetRay;};this.getControllerGrip=function(id){var controller=controllers[id];if(controller===undefined){controller={};controllers[id]=controller;}if(controller.grip===undefined){controller.grip=new Group();controller.grip.matrixAutoUpdate=false;controller.grip.visible=false;}return controller.grip;};//
function onSessionEvent(event){var controller=inputSourcesMap.get(event.inputSource);if(controller){if(controller.targetRay){controller.targetRay.dispatchEvent({type:event.type});}if(controller.grip){controller.grip.dispatchEvent({type:event.type});}}}function onSessionEnd(){inputSourcesMap.forEach(function(controller,inputSource){if(controller.targetRay){controller.targetRay.dispatchEvent({type:'disconnected',data:inputSource});controller.targetRay.visible=false;}if(controller.grip){controller.grip.dispatchEvent({type:'disconnected',data:inputSource});controller.grip.visible=false;}});inputSourcesMap.clear();//
renderer.setFramebuffer(null);renderer.setRenderTarget(renderer.getRenderTarget());// Hack #15830
animation.stop();scope.isPresenting=false;scope.dispatchEvent({type:'sessionend'});}function onRequestReferenceSpace(value){referenceSpace=value;animation.setContext(session);animation.start();scope.isPresenting=true;scope.dispatchEvent({type:'sessionstart'});}this.setFramebufferScaleFactor=function/* value */(){// framebufferScaleFactor = value;
};this.setReferenceSpaceType=function(value){referenceSpaceType=value;};this.getReferenceSpace=function(){return referenceSpace;};this.getSession=function(){return session;};this.setSession=function(value){session=value;if(session!==null){session.addEventListener('select',onSessionEvent);session.addEventListener('selectstart',onSessionEvent);session.addEventListener('selectend',onSessionEvent);session.addEventListener('squeeze',onSessionEvent);session.addEventListener('squeezestart',onSessionEvent);session.addEventListener('squeezeend',onSessionEvent);session.addEventListener('end',onSessionEnd);var attributes=gl.getContextAttributes();var layerInit={antialias:attributes.antialias,alpha:attributes.alpha,depth:attributes.depth,stencil:attributes.stencil};// eslint-disable-next-line no-undef
var baseLayer=new XRWebGLLayer(session,gl,layerInit);session.updateRenderState({baseLayer:baseLayer});session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace);//
session.addEventListener('inputsourceschange',updateInputSources);}};function updateInputSources(event){var inputSources=session.inputSources;// Assign inputSources to available controllers
for(var i=0;i<controllers.length;i++){inputSourcesMap.set(inputSources[i],controllers[i]);}// Notify disconnected
for(var i=0;i<event.removed.length;i++){var inputSource=event.removed[i];var controller=inputSourcesMap.get(inputSource);if(controller){if(controller.targetRay){controller.targetRay.dispatchEvent({type:'disconnected',data:inputSource});}if(controller.grip){controller.grip.dispatchEvent({type:'disconnected',data:inputSource});}inputSourcesMap.delete(inputSource);}}// Notify connected
for(var i=0;i<event.added.length;i++){var inputSource=event.added[i];var controller=inputSourcesMap.get(inputSource);if(controller){if(controller.targetRay){controller.targetRay.dispatchEvent({type:'connected',data:inputSource});}if(controller.grip){controller.grip.dispatchEvent({type:'connected',data:inputSource});}}}}//
var cameraLPos=new Vector3();var cameraRPos=new Vector3();/**
	 * @author jsantell / https://www.jsantell.com/
	 *
	 * Assumes 2 cameras that are parallel and share an X-axis, and that
	 * the cameras' projection and world matrices have already been set.
	 * And that near and far planes are identical for both cameras.
	 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
	 */function setProjectionFromUnion(camera,cameraL,cameraR){cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);var ipd=cameraLPos.distanceTo(cameraRPos);var projL=cameraL.projectionMatrix.elements;var projR=cameraR.projectionMatrix.elements;// VR systems will have identical far and near planes, and
// most likely identical top and bottom frustum extents.
// Use the left camera for these values.
var near=projL[14]/(projL[10]-1);var far=projL[14]/(projL[10]+1);var topFov=(projL[9]+1)/projL[5];var bottomFov=(projL[9]-1)/projL[5];var leftFov=(projL[8]-1)/projL[0];var rightFov=(projR[8]+1)/projR[0];var left=near*leftFov;var right=near*rightFov;// Calculate the new camera's position offset from the
// left camera. xOffset should be roughly half \`ipd\`.
var zOffset=ipd/(-leftFov+rightFov);var xOffset=zOffset*-leftFov;// TODO: Better way to apply this offset?
cameraL.matrixWorld.decompose(camera.position,camera.quaternion,camera.scale);camera.translateX(xOffset);camera.translateZ(zOffset);camera.matrixWorld.compose(camera.position,camera.quaternion,camera.scale);camera.matrixWorldInverse.getInverse(camera.matrixWorld);// Find the union of the frustum values of the cameras and scale
// the values so that the near plane's position does not change in world space,
// although must now be relative to the new union camera.
var near2=near+zOffset;var far2=far+zOffset;var left2=left-xOffset;var right2=right+(ipd-xOffset);var top2=topFov*far/far2*near2;var bottom2=bottomFov*far/far2*near2;camera.projectionMatrix.makePerspective(left2,right2,top2,bottom2,near2,far2);}function updateCamera(camera,parent){if(parent===null){camera.matrixWorld.copy(camera.matrix);}else {camera.matrixWorld.multiplyMatrices(parent.matrixWorld,camera.matrix);}camera.matrixWorldInverse.getInverse(camera.matrixWorld);}this.getCamera=function(camera){cameraVR.near=cameraR.near=cameraL.near=camera.near;cameraVR.far=cameraR.far=cameraL.far=camera.far;if(_currentDepthNear!==cameraVR.near||_currentDepthFar!==cameraVR.far){// Note that the new renderState won't apply until the next frame. See #18320
session.updateRenderState({depthNear:cameraVR.near,depthFar:cameraVR.far});_currentDepthNear=cameraVR.near;_currentDepthFar=cameraVR.far;}var parent=camera.parent;var cameras=cameraVR.cameras;updateCamera(cameraVR,parent);for(var i=0;i<cameras.length;i++){updateCamera(cameras[i],parent);}// update camera and its children
camera.matrixWorld.copy(cameraVR.matrixWorld);var children=camera.children;for(var i=0,l=children.length;i<l;i++){children[i].updateMatrixWorld(true);}setProjectionFromUnion(cameraVR,cameraL,cameraR);return cameraVR;};// Animation Loop
var onAnimationFrameCallback=null;function onAnimationFrame(time,frame){pose=frame.getViewerPose(referenceSpace);if(pose!==null){var views=pose.views;var baseLayer=session.renderState.baseLayer;renderer.setFramebuffer(baseLayer.framebuffer);for(var i=0;i<views.length;i++){var view=views[i];var viewport=baseLayer.getViewport(view);var camera=cameraVR.cameras[i];camera.matrix.fromArray(view.transform.matrix);camera.projectionMatrix.fromArray(view.projectionMatrix);camera.viewport.set(viewport.x,viewport.y,viewport.width,viewport.height);if(i===0){cameraVR.matrix.copy(camera.matrix);}}}//
var inputSources=session.inputSources;for(var i=0;i<controllers.length;i++){var controller=controllers[i];var inputSource=inputSources[i];var inputPose=null;var gripPose=null;if(inputSource){if(controller.targetRay){inputPose=frame.getPose(inputSource.targetRaySpace,referenceSpace);if(inputPose!==null){controller.targetRay.matrix.fromArray(inputPose.transform.matrix);controller.targetRay.matrix.decompose(controller.targetRay.position,controller.targetRay.rotation,controller.targetRay.scale);}}if(controller.grip&&inputSource.gripSpace){gripPose=frame.getPose(inputSource.gripSpace,referenceSpace);if(gripPose!==null){controller.grip.matrix.fromArray(gripPose.transform.matrix);controller.grip.matrix.decompose(controller.grip.position,controller.grip.rotation,controller.grip.scale);}}}if(controller.targetRay){controller.targetRay.visible=inputPose!==null;}if(controller.grip){controller.grip.visible=gripPose!==null;}}if(onAnimationFrameCallback)onAnimationFrameCallback(time,frame);}var animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;};this.dispose=function(){};}Object.assign(WebXRManager.prototype,EventDispatcher.prototype);/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 * @author tschw
 */function WebGLRenderer(parameters){parameters=parameters||{};var _canvas=parameters.canvas!==undefined?parameters.canvas:document.createElementNS('http://www.w3.org/1999/xhtml','canvas'),_context=parameters.context!==undefined?parameters.context:null,_alpha=parameters.alpha!==undefined?parameters.alpha:false,_depth=parameters.depth!==undefined?parameters.depth:true,_stencil=parameters.stencil!==undefined?parameters.stencil:true,_antialias=parameters.antialias!==undefined?parameters.antialias:false,_premultipliedAlpha=parameters.premultipliedAlpha!==undefined?parameters.premultipliedAlpha:true,_preserveDrawingBuffer=parameters.preserveDrawingBuffer!==undefined?parameters.preserveDrawingBuffer:false,_powerPreference=parameters.powerPreference!==undefined?parameters.powerPreference:'default',_failIfMajorPerformanceCaveat=parameters.failIfMajorPerformanceCaveat!==undefined?parameters.failIfMajorPerformanceCaveat:false;var currentRenderList=null;var currentRenderState=null;// public properties
this.domElement=_canvas;// Debug configuration container
this.debug={/**
		 * Enables error checking and reporting when shader programs are being compiled
		 * @type {boolean}
		 */checkShaderErrors:true};// clearing
this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;// scene graph
this.sortObjects=true;// user-defined clipping
this.clippingPlanes=[];this.localClippingEnabled=false;// physically based shading
this.gammaFactor=2.0;// for backwards compatibility
this.outputEncoding=LinearEncoding;// physical lights
this.physicallyCorrectLights=false;// tone mapping
this.toneMapping=LinearToneMapping;this.toneMappingExposure=1.0;this.toneMappingWhitePoint=1.0;// morphs
this.maxMorphTargets=8;this.maxMorphNormals=4;// internal properties
var _this=this,_isContextLost=false,// internal state cache
_framebuffer=null,_currentActiveCubeFace=0,_currentActiveMipmapLevel=0,_currentRenderTarget=null,_currentFramebuffer=null,_currentMaterialId=-1,// geometry and program caching
_currentGeometryProgram={geometry:null,program:null,wireframe:false},_currentCamera=null,_currentArrayCamera=null,_currentViewport=new Vector4(),_currentScissor=new Vector4(),_currentScissorTest=null,//
_width=_canvas.width,_height=_canvas.height,_pixelRatio=1,_opaqueSort=null,_transparentSort=null,_viewport=new Vector4(0,0,_width,_height),_scissor=new Vector4(0,0,_width,_height),_scissorTest=false,// frustum
_frustum=new Frustum(),// clipping
_clipping=new WebGLClipping(),_clippingEnabled=false,_localClippingEnabled=false,// camera matrices cache
_projScreenMatrix=new Matrix4(),_vector3=new Vector3();function getTargetPixelRatio(){return _currentRenderTarget===null?_pixelRatio:1;}// initialize
var _gl;try{var contextAttributes={alpha:_alpha,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer,powerPreference:_powerPreference,failIfMajorPerformanceCaveat:_failIfMajorPerformanceCaveat,xrCompatible:true};// event listeners must be registered before WebGL context is created, see #12753
_canvas.addEventListener('webglcontextlost',onContextLost,false);_canvas.addEventListener('webglcontextrestored',onContextRestore,false);_gl=_context||_canvas.getContext('webgl',contextAttributes)||_canvas.getContext('experimental-webgl',contextAttributes);if(_gl===null){if(_canvas.getContext('webgl')!==null){throw new Error('Error creating WebGL context with your selected attributes.');}else {throw new Error('Error creating WebGL context.');}}// Some experimental-webgl implementations do not have getShaderPrecisionFormat
if(_gl.getShaderPrecisionFormat===undefined){_gl.getShaderPrecisionFormat=function(){return {'rangeMin':1,'rangeMax':1,'precision':1};};}}catch(error){console.error('THREE.WebGLRenderer: '+error.message);throw error;}var extensions,capabilities,state,info;var properties,textures,attributes,geometries,objects;var programCache,renderLists,renderStates;var background,morphtargets,bufferRenderer,indexedBufferRenderer;var utils;function initGLContext(){extensions=new WebGLExtensions(_gl);capabilities=new WebGLCapabilities(_gl,extensions,parameters);if(capabilities.isWebGL2===false){extensions.get('WEBGL_depth_texture');extensions.get('OES_texture_float');extensions.get('OES_texture_half_float');extensions.get('OES_texture_half_float_linear');extensions.get('OES_standard_derivatives');extensions.get('OES_element_index_uint');extensions.get('ANGLE_instanced_arrays');}extensions.get('OES_texture_float_linear');utils=new WebGLUtils(_gl,extensions,capabilities);state=new WebGLState(_gl,extensions,capabilities);state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());info=new WebGLInfo();properties=new WebGLProperties();textures=new WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info);attributes=new WebGLAttributes(_gl,capabilities);geometries=new WebGLGeometries(_gl,attributes,info);objects=new WebGLObjects(_gl,geometries,attributes,info);morphtargets=new WebGLMorphtargets(_gl);programCache=new WebGLPrograms(_this,extensions,capabilities);renderLists=new WebGLRenderLists();renderStates=new WebGLRenderStates();background=new WebGLBackground(_this,state,objects,_premultipliedAlpha);bufferRenderer=new WebGLBufferRenderer(_gl,extensions,info,capabilities);indexedBufferRenderer=new WebGLIndexedBufferRenderer(_gl,extensions,info,capabilities);info.programs=programCache.programs;_this.capabilities=capabilities;_this.extensions=extensions;_this.properties=properties;_this.renderLists=renderLists;_this.state=state;_this.info=info;}initGLContext();// xr
var xr=new WebXRManager(_this,_gl);this.xr=xr;// Multiview
var multiview=new WebGLMultiview(_this,_gl);// shadow map
var shadowMap=new WebGLShadowMap(_this,objects,capabilities.maxTextureSize);this.shadowMap=shadowMap;// API
this.getContext=function(){return _gl;};this.getContextAttributes=function(){return _gl.getContextAttributes();};this.forceContextLoss=function(){var extension=extensions.get('WEBGL_lose_context');if(extension)extension.loseContext();};this.forceContextRestore=function(){var extension=extensions.get('WEBGL_lose_context');if(extension)extension.restoreContext();};this.getPixelRatio=function(){return _pixelRatio;};this.setPixelRatio=function(value){if(value===undefined)return;_pixelRatio=value;this.setSize(_width,_height,false);};this.getSize=function(target){if(target===undefined){console.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');target=new Vector2();}return target.set(_width,_height);};this.setSize=function(width,height,updateStyle){if(xr.isPresenting){console.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');return;}_width=width;_height=height;_canvas.width=Math.floor(width*_pixelRatio);_canvas.height=Math.floor(height*_pixelRatio);if(updateStyle!==false){_canvas.style.width=width+'px';_canvas.style.height=height+'px';}this.setViewport(0,0,width,height);};this.getDrawingBufferSize=function(target){if(target===undefined){console.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');target=new Vector2();}return target.set(_width*_pixelRatio,_height*_pixelRatio).floor();};this.setDrawingBufferSize=function(width,height,pixelRatio){_width=width;_height=height;_pixelRatio=pixelRatio;_canvas.width=Math.floor(width*pixelRatio);_canvas.height=Math.floor(height*pixelRatio);this.setViewport(0,0,width,height);};this.getCurrentViewport=function(target){if(target===undefined){console.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');target=new Vector4();}return target.copy(_currentViewport);};this.getViewport=function(target){return target.copy(_viewport);};this.setViewport=function(x,y,width,height){if(x.isVector4){_viewport.set(x.x,x.y,x.z,x.w);}else {_viewport.set(x,y,width,height);}state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());};this.getScissor=function(target){return target.copy(_scissor);};this.setScissor=function(x,y,width,height){if(x.isVector4){_scissor.set(x.x,x.y,x.z,x.w);}else {_scissor.set(x,y,width,height);}state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());};this.getScissorTest=function(){return _scissorTest;};this.setScissorTest=function(boolean){state.setScissorTest(_scissorTest=boolean);};this.setOpaqueSort=function(method){_opaqueSort=method;};this.setTransparentSort=function(method){_transparentSort=method;};// Clearing
this.getClearColor=function(){return background.getClearColor();};this.setClearColor=function(){background.setClearColor.apply(background,arguments);};this.getClearAlpha=function(){return background.getClearAlpha();};this.setClearAlpha=function(){background.setClearAlpha.apply(background,arguments);};this.clear=function(color,depth,stencil){var bits=0;if(color===undefined||color)bits|=16384;if(depth===undefined||depth)bits|=256;if(stencil===undefined||stencil)bits|=1024;_gl.clear(bits);};this.clearColor=function(){this.clear(true,false,false);};this.clearDepth=function(){this.clear(false,true,false);};this.clearStencil=function(){this.clear(false,false,true);};//
this.dispose=function(){_canvas.removeEventListener('webglcontextlost',onContextLost,false);_canvas.removeEventListener('webglcontextrestored',onContextRestore,false);renderLists.dispose();renderStates.dispose();properties.dispose();objects.dispose();xr.dispose();animation.stop();};// Events
function onContextLost(event){event.preventDefault();console.log('THREE.WebGLRenderer: Context Lost.');_isContextLost=true;}function onContextRestore(/* event */){console.log('THREE.WebGLRenderer: Context Restored.');_isContextLost=false;initGLContext();}function onMaterialDispose(event){var material=event.target;material.removeEventListener('dispose',onMaterialDispose);deallocateMaterial(material);}// Buffer deallocation
function deallocateMaterial(material){releaseMaterialProgramReference(material);properties.remove(material);}function releaseMaterialProgramReference(material){var programInfo=properties.get(material).program;material.program=undefined;if(programInfo!==undefined){programCache.releaseProgram(programInfo);}}// Buffer rendering
function renderObjectImmediate(object,program){object.render(function(object){_this.renderBufferImmediate(object,program);});}this.renderBufferImmediate=function(object,program){state.initAttributes();var buffers=properties.get(object);if(object.hasPositions&&!buffers.position)buffers.position=_gl.createBuffer();if(object.hasNormals&&!buffers.normal)buffers.normal=_gl.createBuffer();if(object.hasUvs&&!buffers.uv)buffers.uv=_gl.createBuffer();if(object.hasColors&&!buffers.color)buffers.color=_gl.createBuffer();var programAttributes=program.getAttributes();if(object.hasPositions){_gl.bindBuffer(34962,buffers.position);_gl.bufferData(34962,object.positionArray,35048);state.enableAttribute(programAttributes.position);_gl.vertexAttribPointer(programAttributes.position,3,5126,false,0,0);}if(object.hasNormals){_gl.bindBuffer(34962,buffers.normal);_gl.bufferData(34962,object.normalArray,35048);state.enableAttribute(programAttributes.normal);_gl.vertexAttribPointer(programAttributes.normal,3,5126,false,0,0);}if(object.hasUvs){_gl.bindBuffer(34962,buffers.uv);_gl.bufferData(34962,object.uvArray,35048);state.enableAttribute(programAttributes.uv);_gl.vertexAttribPointer(programAttributes.uv,2,5126,false,0,0);}if(object.hasColors){_gl.bindBuffer(34962,buffers.color);_gl.bufferData(34962,object.colorArray,35048);state.enableAttribute(programAttributes.color);_gl.vertexAttribPointer(programAttributes.color,3,5126,false,0,0);}state.disableUnusedAttributes();_gl.drawArrays(4,0,object.count);object.count=0;};var tempScene=new Scene();this.renderBufferDirect=function(camera,scene,geometry,material,object,group){if(scene===null)scene=tempScene;// renderBufferDirect second parameter used to be fog (could be null)
var frontFaceCW=object.isMesh&&object.matrixWorld.determinant()<0;var program=setProgram(camera,scene,material,object);state.setMaterial(material,frontFaceCW);var updateBuffers=false;if(_currentGeometryProgram.geometry!==geometry.id||_currentGeometryProgram.program!==program.id||_currentGeometryProgram.wireframe!==(material.wireframe===true)){_currentGeometryProgram.geometry=geometry.id;_currentGeometryProgram.program=program.id;_currentGeometryProgram.wireframe=material.wireframe===true;updateBuffers=true;}if(material.morphTargets||material.morphNormals){morphtargets.update(object,geometry,material,program);updateBuffers=true;}//
var index=geometry.index;var position=geometry.attributes.position;//
if(index===null){if(position===undefined||position.count===0)return;}else if(index.count===0){return;}//
var rangeFactor=1;if(material.wireframe===true){index=geometries.getWireframeAttribute(geometry);rangeFactor=2;}var attribute;var renderer=bufferRenderer;if(index!==null){attribute=attributes.get(index);renderer=indexedBufferRenderer;renderer.setIndex(attribute);}if(updateBuffers){setupVertexAttributes(object,geometry,material,program);if(index!==null){_gl.bindBuffer(34963,attribute.buffer);}}//
var dataCount=index!==null?index.count:position.count;var rangeStart=geometry.drawRange.start*rangeFactor;var rangeCount=geometry.drawRange.count*rangeFactor;var groupStart=group!==null?group.start*rangeFactor:0;var groupCount=group!==null?group.count*rangeFactor:Infinity;var drawStart=Math.max(rangeStart,groupStart);var drawEnd=Math.min(dataCount,rangeStart+rangeCount,groupStart+groupCount)-1;var drawCount=Math.max(0,drawEnd-drawStart+1);if(drawCount===0)return;//
if(object.isMesh){if(material.wireframe===true){state.setLineWidth(material.wireframeLinewidth*getTargetPixelRatio());renderer.setMode(1);}else {renderer.setMode(4);}}else if(object.isLine){var lineWidth=material.linewidth;if(lineWidth===undefined)lineWidth=1;// Not using Line*Material
state.setLineWidth(lineWidth*getTargetPixelRatio());if(object.isLineSegments){renderer.setMode(1);}else if(object.isLineLoop){renderer.setMode(2);}else {renderer.setMode(3);}}else if(object.isPoints){renderer.setMode(0);}else if(object.isSprite){renderer.setMode(4);}if(object.isInstancedMesh){renderer.renderInstances(geometry,drawStart,drawCount,object.count);}else if(geometry.isInstancedBufferGeometry){renderer.renderInstances(geometry,drawStart,drawCount,geometry.maxInstancedCount);}else {renderer.render(drawStart,drawCount);}};function setupVertexAttributes(object,geometry,material,program){if(capabilities.isWebGL2===false&&(object.isInstancedMesh||geometry.isInstancedBufferGeometry)){if(extensions.get('ANGLE_instanced_arrays')===null)return;}state.initAttributes();var geometryAttributes=geometry.attributes;var programAttributes=program.getAttributes();var materialDefaultAttributeValues=material.defaultAttributeValues;for(var name in programAttributes){var programAttribute=programAttributes[name];if(programAttribute>=0){var geometryAttribute=geometryAttributes[name];if(geometryAttribute!==undefined){var normalized=geometryAttribute.normalized;var size=geometryAttribute.itemSize;var attribute=attributes.get(geometryAttribute);// TODO Attribute may not be available on context restore
if(attribute===undefined)continue;var buffer=attribute.buffer;var type=attribute.type;var bytesPerElement=attribute.bytesPerElement;if(geometryAttribute.isInterleavedBufferAttribute){var data=geometryAttribute.data;var stride=data.stride;var offset=geometryAttribute.offset;if(data&&data.isInstancedInterleavedBuffer){state.enableAttributeAndDivisor(programAttribute,data.meshPerAttribute);if(geometry.maxInstancedCount===undefined){geometry.maxInstancedCount=data.meshPerAttribute*data.count;}}else {state.enableAttribute(programAttribute);}_gl.bindBuffer(34962,buffer);_gl.vertexAttribPointer(programAttribute,size,type,normalized,stride*bytesPerElement,offset*bytesPerElement);}else {if(geometryAttribute.isInstancedBufferAttribute){state.enableAttributeAndDivisor(programAttribute,geometryAttribute.meshPerAttribute);if(geometry.maxInstancedCount===undefined){geometry.maxInstancedCount=geometryAttribute.meshPerAttribute*geometryAttribute.count;}}else {state.enableAttribute(programAttribute);}_gl.bindBuffer(34962,buffer);_gl.vertexAttribPointer(programAttribute,size,type,normalized,0,0);}}else if(name==='instanceMatrix'){var attribute=attributes.get(object.instanceMatrix);// TODO Attribute may not be available on context restore
if(attribute===undefined)continue;var buffer=attribute.buffer;var type=attribute.type;state.enableAttributeAndDivisor(programAttribute+0,1);state.enableAttributeAndDivisor(programAttribute+1,1);state.enableAttributeAndDivisor(programAttribute+2,1);state.enableAttributeAndDivisor(programAttribute+3,1);_gl.bindBuffer(34962,buffer);_gl.vertexAttribPointer(programAttribute+0,4,type,false,64,0);_gl.vertexAttribPointer(programAttribute+1,4,type,false,64,16);_gl.vertexAttribPointer(programAttribute+2,4,type,false,64,32);_gl.vertexAttribPointer(programAttribute+3,4,type,false,64,48);}else if(materialDefaultAttributeValues!==undefined){var value=materialDefaultAttributeValues[name];if(value!==undefined){switch(value.length){case 2:_gl.vertexAttrib2fv(programAttribute,value);break;case 3:_gl.vertexAttrib3fv(programAttribute,value);break;case 4:_gl.vertexAttrib4fv(programAttribute,value);break;default:_gl.vertexAttrib1fv(programAttribute,value);}}}}}state.disableUnusedAttributes();}// Compile
this.compile=function(scene,camera){currentRenderState=renderStates.get(scene,camera);currentRenderState.init();scene.traverse(function(object){if(object.isLight){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}});currentRenderState.setupLights(camera);var compiled={};scene.traverse(function(object){if(object.material){if(Array.isArray(object.material)){for(var i=0;i<object.material.length;i++){if(object.material[i].uuid in compiled===false){initMaterial(object.material[i],scene,object);compiled[object.material[i].uuid]=true;}}}else if(object.material.uuid in compiled===false){initMaterial(object.material,scene,object);compiled[object.material.uuid]=true;}}});};// Animation Loop
var onAnimationFrameCallback=null;function onAnimationFrame(time){if(xr.isPresenting)return;if(onAnimationFrameCallback)onAnimationFrameCallback(time);}var animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);if(typeof window!=='undefined')animation.setContext(window);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;xr.setAnimationLoop(callback);animation.start();};// Rendering
this.render=function(scene,camera){var renderTarget,forceClear;if(arguments[2]!==undefined){console.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');renderTarget=arguments[2];}if(arguments[3]!==undefined){console.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');forceClear=arguments[3];}if(!(camera&&camera.isCamera)){console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');return;}if(_isContextLost)return;// reset caching for this frame
_currentGeometryProgram.geometry=null;_currentGeometryProgram.program=null;_currentGeometryProgram.wireframe=false;_currentMaterialId=-1;_currentCamera=null;// update scene graph
if(scene.autoUpdate===true)scene.updateMatrixWorld();// update camera matrices and frustum
if(camera.parent===null)camera.updateMatrixWorld();if(xr.enabled&&xr.isPresenting){camera=xr.getCamera(camera);}//
currentRenderState=renderStates.get(scene,camera);currentRenderState.init();scene.onBeforeRender(_this,scene,camera,renderTarget||_currentRenderTarget);_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum.setFromProjectionMatrix(_projScreenMatrix);_localClippingEnabled=this.localClippingEnabled;_clippingEnabled=_clipping.init(this.clippingPlanes,_localClippingEnabled,camera);currentRenderList=renderLists.get(scene,camera);currentRenderList.init();projectObject(scene,camera,0,_this.sortObjects);if(_this.sortObjects===true){currentRenderList.sort(_opaqueSort,_transparentSort);}//
if(_clippingEnabled)_clipping.beginShadows();var shadowsArray=currentRenderState.state.shadowsArray;shadowMap.render(shadowsArray,scene,camera);currentRenderState.setupLights(camera);if(_clippingEnabled)_clipping.endShadows();//
if(this.info.autoReset)this.info.reset();if(renderTarget!==undefined){this.setRenderTarget(renderTarget);}if(xr.enabled&&multiview.isAvailable()){multiview.attachCamera(camera);}//
background.render(currentRenderList,scene,camera,forceClear);// render scene
var opaqueObjects=currentRenderList.opaque;var transparentObjects=currentRenderList.transparent;if(scene.overrideMaterial){var overrideMaterial=scene.overrideMaterial;if(opaqueObjects.length)renderObjects(opaqueObjects,scene,camera,overrideMaterial);if(transparentObjects.length)renderObjects(transparentObjects,scene,camera,overrideMaterial);}else {// opaque pass (front-to-back order)
if(opaqueObjects.length)renderObjects(opaqueObjects,scene,camera);// transparent pass (back-to-front order)
if(transparentObjects.length)renderObjects(transparentObjects,scene,camera);}//
scene.onAfterRender(_this,scene,camera);//
if(_currentRenderTarget!==null){// Generate mipmap if we're using any kind of mipmap filtering
textures.updateRenderTargetMipmap(_currentRenderTarget);// resolve multisample renderbuffers to a single-sample texture if necessary
textures.updateMultisampleRenderTarget(_currentRenderTarget);}// Ensure depth buffer writing is enabled so it can be cleared on next render
state.buffers.depth.setTest(true);state.buffers.depth.setMask(true);state.buffers.color.setMask(true);state.setPolygonOffset(false);if(xr.enabled){if(multiview.isAvailable()){multiview.detachCamera(camera);}}// _gl.finish();
currentRenderList=null;currentRenderState=null;};function projectObject(object,camera,groupOrder,sortObjects){if(object.visible===false)return;var visible=object.layers.test(camera.layers);if(visible){if(object.isGroup){groupOrder=object.renderOrder;}else if(object.isLOD){if(object.autoUpdate===true)object.update(camera);}else if(object.isLight){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}else if(object.isSprite){if(!object.frustumCulled||_frustum.intersectsSprite(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}var geometry=objects.update(object);var material=object.material;if(material.visible){currentRenderList.push(object,geometry,material,groupOrder,_vector3.z,null);}}}else if(object.isImmediateRenderObject){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}currentRenderList.push(object,null,object.material,groupOrder,_vector3.z,null);}else if(object.isMesh||object.isLine||object.isPoints){if(object.isSkinnedMesh){// update skeleton only once in a frame
if(object.skeleton.frame!==info.render.frame){object.skeleton.update();object.skeleton.frame=info.render.frame;}}if(!object.frustumCulled||_frustum.intersectsObject(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}var geometry=objects.update(object);var material=object.material;if(Array.isArray(material)){var groups=geometry.groups;for(var i=0,l=groups.length;i<l;i++){var group=groups[i];var groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){currentRenderList.push(object,geometry,groupMaterial,groupOrder,_vector3.z,group);}}}else if(material.visible){currentRenderList.push(object,geometry,material,groupOrder,_vector3.z,null);}}}}var children=object.children;for(var i=0,l=children.length;i<l;i++){projectObject(children[i],camera,groupOrder,sortObjects);}}function renderObjects(renderList,scene,camera,overrideMaterial){for(var i=0,l=renderList.length;i<l;i++){var renderItem=renderList[i];var object=renderItem.object;var geometry=renderItem.geometry;var material=overrideMaterial===undefined?renderItem.material:overrideMaterial;var group=renderItem.group;if(camera.isArrayCamera){_currentArrayCamera=camera;if(xr.enabled&&multiview.isAvailable()){renderObject(object,scene,camera,geometry,material,group);}else {var cameras=camera.cameras;for(var j=0,jl=cameras.length;j<jl;j++){var camera2=cameras[j];if(object.layers.test(camera2.layers)){state.viewport(_currentViewport.copy(camera2.viewport));currentRenderState.setupLights(camera2);renderObject(object,scene,camera2,geometry,material,group);}}}}else {_currentArrayCamera=null;renderObject(object,scene,camera,geometry,material,group);}}}function renderObject(object,scene,camera,geometry,material,group){object.onBeforeRender(_this,scene,camera,geometry,material,group);currentRenderState=renderStates.get(scene,_currentArrayCamera||camera);object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object.matrixWorld);object.normalMatrix.getNormalMatrix(object.modelViewMatrix);if(object.isImmediateRenderObject){var program=setProgram(camera,scene,material,object);state.setMaterial(material);_currentGeometryProgram.geometry=null;_currentGeometryProgram.program=null;_currentGeometryProgram.wireframe=false;renderObjectImmediate(object,program);}else {_this.renderBufferDirect(camera,scene,geometry,material,object,group);}object.onAfterRender(_this,scene,camera,geometry,material,group);currentRenderState=renderStates.get(scene,_currentArrayCamera||camera);}function initMaterial(material,scene,object){var materialProperties=properties.get(material);var lights=currentRenderState.state.lights;var shadowsArray=currentRenderState.state.shadowsArray;var lightsStateVersion=lights.state.version;var parameters=programCache.getParameters(material,lights.state,shadowsArray,scene,_clipping.numPlanes,_clipping.numIntersection,object);var programCacheKey=programCache.getProgramCacheKey(parameters);var program=materialProperties.program;var programChange=true;if(program===undefined){// new material
material.addEventListener('dispose',onMaterialDispose);}else if(program.cacheKey!==programCacheKey){// changed glsl or parameters
releaseMaterialProgramReference(material);}else if(materialProperties.lightsStateVersion!==lightsStateVersion){materialProperties.lightsStateVersion=lightsStateVersion;programChange=false;}else if(parameters.shaderID!==undefined){// same glsl and uniform list
return;}else {// only rebuild uniform list
programChange=false;}if(programChange){program=programCache.acquireProgram(parameters,programCacheKey);materialProperties.program=program;materialProperties.uniforms=parameters.uniforms;materialProperties.environment=material.isMeshStandardMaterial?scene.environment:null;materialProperties.outputEncoding=_this.outputEncoding;material.program=program;}var programAttributes=program.getAttributes();if(material.morphTargets){material.numSupportedMorphTargets=0;for(var i=0;i<_this.maxMorphTargets;i++){if(programAttributes['morphTarget'+i]>=0){material.numSupportedMorphTargets++;}}}if(material.morphNormals){material.numSupportedMorphNormals=0;for(var i=0;i<_this.maxMorphNormals;i++){if(programAttributes['morphNormal'+i]>=0){material.numSupportedMorphNormals++;}}}var uniforms=materialProperties.uniforms;if(!material.isShaderMaterial&&!material.isRawShaderMaterial||material.clipping===true){materialProperties.numClippingPlanes=_clipping.numPlanes;materialProperties.numIntersection=_clipping.numIntersection;uniforms.clippingPlanes=_clipping.uniform;}materialProperties.fog=scene.fog;// store the light setup it was created for
materialProperties.needsLights=materialNeedsLights(material);materialProperties.lightsStateVersion=lightsStateVersion;if(materialProperties.needsLights){// wire up the material to this renderer's lighting state
uniforms.ambientLightColor.value=lights.state.ambient;uniforms.lightProbe.value=lights.state.probe;uniforms.directionalLights.value=lights.state.directional;uniforms.spotLights.value=lights.state.spot;uniforms.rectAreaLights.value=lights.state.rectArea;uniforms.pointLights.value=lights.state.point;uniforms.hemisphereLights.value=lights.state.hemi;uniforms.directionalShadowMap.value=lights.state.directionalShadowMap;uniforms.directionalShadowMatrix.value=lights.state.directionalShadowMatrix;uniforms.spotShadowMap.value=lights.state.spotShadowMap;uniforms.spotShadowMatrix.value=lights.state.spotShadowMatrix;uniforms.pointShadowMap.value=lights.state.pointShadowMap;uniforms.pointShadowMatrix.value=lights.state.pointShadowMatrix;// TODO (abelnation): add area lights shadow info to uniforms
}var progUniforms=materialProperties.program.getUniforms(),uniformsList=WebGLUniforms.seqWithValue(progUniforms.seq,uniforms);materialProperties.uniformsList=uniformsList;}function setProgram(camera,scene,material,object){textures.resetTextureUnits();var fog=scene.fog;var environment=material.isMeshStandardMaterial?scene.environment:null;var materialProperties=properties.get(material);var lights=currentRenderState.state.lights;if(_clippingEnabled){if(_localClippingEnabled||camera!==_currentCamera){var useCache=camera===_currentCamera&&material.id===_currentMaterialId;// we might want to call this function with some ClippingGroup
// object instead of the material, once it becomes feasible
// (#8465, #8379)
_clipping.setState(material.clippingPlanes,material.clipIntersection,material.clipShadows,camera,materialProperties,useCache);}}if(material.version===materialProperties.__version){if(materialProperties.program===undefined){initMaterial(material,scene,object);}else if(material.fog&&materialProperties.fog!==fog){initMaterial(material,scene,object);}else if(materialProperties.environment!==environment){initMaterial(material,scene,object);}else if(materialProperties.needsLights&&materialProperties.lightsStateVersion!==lights.state.version){initMaterial(material,scene,object);}else if(materialProperties.numClippingPlanes!==undefined&&(materialProperties.numClippingPlanes!==_clipping.numPlanes||materialProperties.numIntersection!==_clipping.numIntersection)){initMaterial(material,scene,object);}else if(materialProperties.outputEncoding!==_this.outputEncoding){initMaterial(material,scene,object);}}else {initMaterial(material,scene,object);materialProperties.__version=material.version;}var refreshProgram=false;var refreshMaterial=false;var refreshLights=false;var program=materialProperties.program,p_uniforms=program.getUniforms(),m_uniforms=materialProperties.uniforms;if(state.useProgram(program.program)){refreshProgram=true;refreshMaterial=true;refreshLights=true;}if(material.id!==_currentMaterialId){_currentMaterialId=material.id;refreshMaterial=true;}if(refreshProgram||_currentCamera!==camera){if(program.numMultiviewViews>0){multiview.updateCameraProjectionMatricesUniform(camera,p_uniforms);}else {p_uniforms.setValue(_gl,'projectionMatrix',camera.projectionMatrix);}if(capabilities.logarithmicDepthBuffer){p_uniforms.setValue(_gl,'logDepthBufFC',2.0/(Math.log(camera.far+1.0)/Math.LN2));}if(_currentCamera!==camera){_currentCamera=camera;// lighting uniforms depend on the camera so enforce an update
// now, in case this material supports lights - or later, when
// the next material that does gets activated:
refreshMaterial=true;// set to true on material change
refreshLights=true;// remains set until update done
}// load material specific uniforms
// (shader material also gets them for the sake of genericity)
if(material.isShaderMaterial||material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshStandardMaterial||material.envMap){var uCamPos=p_uniforms.map.cameraPosition;if(uCamPos!==undefined){uCamPos.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld));}}if(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial){p_uniforms.setValue(_gl,'isOrthographic',camera.isOrthographicCamera===true);}if(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial||material.skinning){if(program.numMultiviewViews>0){multiview.updateCameraViewMatricesUniform(camera,p_uniforms);}else {p_uniforms.setValue(_gl,'viewMatrix',camera.matrixWorldInverse);}}}// skinning uniforms must be set even if material didn't change
// auto-setting of texture unit for bone texture must go before other textures
// not sure why, but otherwise weird things happen
if(material.skinning){p_uniforms.setOptional(_gl,object,'bindMatrix');p_uniforms.setOptional(_gl,object,'bindMatrixInverse');var skeleton=object.skeleton;if(skeleton){var bones=skeleton.bones;if(capabilities.floatVertexTextures){if(skeleton.boneTexture===undefined){// layout (1 matrix = 4 pixels)
//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
var size=Math.sqrt(bones.length*4);// 4 pixels needed for 1 matrix
size=MathUtils.ceilPowerOfTwo(size);size=Math.max(size,4);var boneMatrices=new Float32Array(size*size*4);// 4 floats per RGBA pixel
boneMatrices.set(skeleton.boneMatrices);// copy current values
var boneTexture=new DataTexture(boneMatrices,size,size,RGBAFormat,FloatType);skeleton.boneMatrices=boneMatrices;skeleton.boneTexture=boneTexture;skeleton.boneTextureSize=size;}p_uniforms.setValue(_gl,'boneTexture',skeleton.boneTexture,textures);p_uniforms.setValue(_gl,'boneTextureSize',skeleton.boneTextureSize);}else {p_uniforms.setOptional(_gl,skeleton,'boneMatrices');}}}if(refreshMaterial||materialProperties.receiveShadow!==object.receiveShadow){materialProperties.receiveShadow=object.receiveShadow;p_uniforms.setValue(_gl,'receiveShadow',object.receiveShadow);}if(refreshMaterial){p_uniforms.setValue(_gl,'toneMappingExposure',_this.toneMappingExposure);p_uniforms.setValue(_gl,'toneMappingWhitePoint',_this.toneMappingWhitePoint);if(materialProperties.needsLights){// the current material requires lighting info
// note: all lighting uniforms are always set correctly
// they simply reference the renderer's state for their
// values
//
// use the current material's .needsUpdate flags to set
// the GL state when required
markUniformsLightsNeedsUpdate(m_uniforms,refreshLights);}// refresh uniforms common to several materials
if(fog&&material.fog){refreshUniformsFog(m_uniforms,fog);}if(material.isMeshBasicMaterial){refreshUniformsCommon(m_uniforms,material);}else if(material.isMeshLambertMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsLambert(m_uniforms,material);}else if(material.isMeshToonMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsToon(m_uniforms,material);}else if(material.isMeshPhongMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsPhong(m_uniforms,material);}else if(material.isMeshStandardMaterial){refreshUniformsCommon(m_uniforms,material,environment);if(material.isMeshPhysicalMaterial){refreshUniformsPhysical(m_uniforms,material,environment);}else {refreshUniformsStandard(m_uniforms,material,environment);}}else if(material.isMeshMatcapMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsMatcap(m_uniforms,material);}else if(material.isMeshDepthMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsDepth(m_uniforms,material);}else if(material.isMeshDistanceMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsDistance(m_uniforms,material);}else if(material.isMeshNormalMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsNormal(m_uniforms,material);}else if(material.isLineBasicMaterial){refreshUniformsLine(m_uniforms,material);if(material.isLineDashedMaterial){refreshUniformsDash(m_uniforms,material);}}else if(material.isPointsMaterial){refreshUniformsPoints(m_uniforms,material);}else if(material.isSpriteMaterial){refreshUniformsSprites(m_uniforms,material);}else if(material.isShadowMaterial){m_uniforms.color.value.copy(material.color);m_uniforms.opacity.value=material.opacity;}// RectAreaLight Texture
// TODO (mrdoob): Find a nicer implementation
if(m_uniforms.ltc_1!==undefined)m_uniforms.ltc_1.value=UniformsLib.LTC_1;if(m_uniforms.ltc_2!==undefined)m_uniforms.ltc_2.value=UniformsLib.LTC_2;WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures);if(material.isShaderMaterial){material.uniformsNeedUpdate=false;// #15581
}}if(material.isShaderMaterial&&material.uniformsNeedUpdate===true){WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures);material.uniformsNeedUpdate=false;}if(material.isSpriteMaterial){p_uniforms.setValue(_gl,'center',object.center);}// common matrices
if(program.numMultiviewViews>0){multiview.updateObjectMatricesUniforms(object,camera,p_uniforms);}else {p_uniforms.setValue(_gl,'modelViewMatrix',object.modelViewMatrix);p_uniforms.setValue(_gl,'normalMatrix',object.normalMatrix);}p_uniforms.setValue(_gl,'modelMatrix',object.matrixWorld);return program;}// Uniforms (refresh uniforms objects)
function refreshUniformsCommon(uniforms,material,environment){uniforms.opacity.value=material.opacity;if(material.color){uniforms.diffuse.value.copy(material.color);}if(material.emissive){uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);}if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.specularMap){uniforms.specularMap.value=material.specularMap;}var envMap=material.envMap||environment;if(envMap){uniforms.envMap.value=envMap;uniforms.flipEnvMap.value=envMap.isCubeTexture?-1:1;uniforms.reflectivity.value=material.reflectivity;uniforms.refractionRatio.value=material.refractionRatio;uniforms.maxMipLevel.value=properties.get(envMap).__maxMipLevel;}if(material.lightMap){uniforms.lightMap.value=material.lightMap;uniforms.lightMapIntensity.value=material.lightMapIntensity;}if(material.aoMap){uniforms.aoMap.value=material.aoMap;uniforms.aoMapIntensity.value=material.aoMapIntensity;}// uv repeat and offset setting priorities
// 1. color map
// 2. specular map
// 3. normal map
// 4. bump map
// 5. alpha map
// 6. emissive map
var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.specularMap){uvScaleMap=material.specularMap;}else if(material.displacementMap){uvScaleMap=material.displacementMap;}else if(material.normalMap){uvScaleMap=material.normalMap;}else if(material.bumpMap){uvScaleMap=material.bumpMap;}else if(material.roughnessMap){uvScaleMap=material.roughnessMap;}else if(material.metalnessMap){uvScaleMap=material.metalnessMap;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}else if(material.emissiveMap){uvScaleMap=material.emissiveMap;}if(uvScaleMap!==undefined){// backwards compatibility
if(uvScaleMap.isWebGLRenderTarget){uvScaleMap=uvScaleMap.texture;}if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}// uv repeat and offset setting priorities for uv2
// 1. ao map
// 2. light map
var uv2ScaleMap;if(material.aoMap){uv2ScaleMap=material.aoMap;}else if(material.lightMap){uv2ScaleMap=material.lightMap;}if(uv2ScaleMap!==undefined){// backwards compatibility
if(uv2ScaleMap.isWebGLRenderTarget){uv2ScaleMap=uv2ScaleMap.texture;}if(uv2ScaleMap.matrixAutoUpdate===true){uv2ScaleMap.updateMatrix();}uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);}}function refreshUniformsLine(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;}function refreshUniformsDash(uniforms,material){uniforms.dashSize.value=material.dashSize;uniforms.totalSize.value=material.dashSize+material.gapSize;uniforms.scale.value=material.scale;}function refreshUniformsPoints(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.size.value=material.size*_pixelRatio;uniforms.scale.value=_height*0.5;if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}// uv repeat and offset setting priorities
// 1. color map
// 2. alpha map
var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}if(uvScaleMap!==undefined){if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsSprites(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.rotation.value=material.rotation;if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}// uv repeat and offset setting priorities
// 1. color map
// 2. alpha map
var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}if(uvScaleMap!==undefined){if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsFog(uniforms,fog){uniforms.fogColor.value.copy(fog.color);if(fog.isFog){uniforms.fogNear.value=fog.near;uniforms.fogFar.value=fog.far;}else if(fog.isFogExp2){uniforms.fogDensity.value=fog.density;}}function refreshUniformsLambert(uniforms,material){if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}}function refreshUniformsPhong(uniforms,material){uniforms.specular.value.copy(material.specular);uniforms.shininess.value=Math.max(material.shininess,1e-4);// to prevent pow( 0.0, 0.0 )
if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsToon(uniforms,material){uniforms.specular.value.copy(material.specular);uniforms.shininess.value=Math.max(material.shininess,1e-4);// to prevent pow( 0.0, 0.0 )
if(material.gradientMap){uniforms.gradientMap.value=material.gradientMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsStandard(uniforms,material,environment){uniforms.roughness.value=material.roughness;uniforms.metalness.value=material.metalness;if(material.roughnessMap){uniforms.roughnessMap.value=material.roughnessMap;}if(material.metalnessMap){uniforms.metalnessMap.value=material.metalnessMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}if(material.envMap||environment){//uniforms.envMap.value = material.envMap; // part of uniforms common
uniforms.envMapIntensity.value=material.envMapIntensity;}}function refreshUniformsPhysical(uniforms,material,environment){refreshUniformsStandard(uniforms,material,environment);uniforms.reflectivity.value=material.reflectivity;// also part of uniforms common
uniforms.clearcoat.value=material.clearcoat;uniforms.clearcoatRoughness.value=material.clearcoatRoughness;if(material.sheen)uniforms.sheen.value.copy(material.sheen);if(material.clearcoatNormalMap){uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);uniforms.clearcoatNormalMap.value=material.clearcoatNormalMap;if(material.side===BackSide){uniforms.clearcoatNormalScale.value.negate();}}uniforms.transparency.value=material.transparency;}function refreshUniformsMatcap(uniforms,material){if(material.matcap){uniforms.matcap.value=material.matcap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDepth(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDistance(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}uniforms.referencePosition.value.copy(material.referencePosition);uniforms.nearDistance.value=material.nearDistance;uniforms.farDistance.value=material.farDistance;}function refreshUniformsNormal(uniforms,material){if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}// If uniforms are marked as clean, they don't need to be loaded to the GPU.
function markUniformsLightsNeedsUpdate(uniforms,value){uniforms.ambientLightColor.needsUpdate=value;uniforms.lightProbe.needsUpdate=value;uniforms.directionalLights.needsUpdate=value;uniforms.pointLights.needsUpdate=value;uniforms.spotLights.needsUpdate=value;uniforms.rectAreaLights.needsUpdate=value;uniforms.hemisphereLights.needsUpdate=value;}function materialNeedsLights(material){return material.isMeshLambertMaterial||material.isMeshToonMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.isShadowMaterial||material.isShaderMaterial&&material.lights===true;}//
this.setFramebuffer=function(value){if(_framebuffer!==value&&_currentRenderTarget===null)_gl.bindFramebuffer(36160,value);_framebuffer=value;};this.getActiveCubeFace=function(){return _currentActiveCubeFace;};this.getActiveMipmapLevel=function(){return _currentActiveMipmapLevel;};this.getRenderTarget=function(){return _currentRenderTarget;};this.setRenderTarget=function(renderTarget,activeCubeFace,activeMipmapLevel){_currentRenderTarget=renderTarget;_currentActiveCubeFace=activeCubeFace;_currentActiveMipmapLevel=activeMipmapLevel;if(renderTarget&&properties.get(renderTarget).__webglFramebuffer===undefined){textures.setupRenderTarget(renderTarget);}var framebuffer=_framebuffer;var isCube=false;if(renderTarget){var __webglFramebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget){framebuffer=__webglFramebuffer[activeCubeFace||0];isCube=true;}else if(renderTarget.isWebGLMultisampleRenderTarget){framebuffer=properties.get(renderTarget).__webglMultisampledFramebuffer;}else {framebuffer=__webglFramebuffer;}_currentViewport.copy(renderTarget.viewport);_currentScissor.copy(renderTarget.scissor);_currentScissorTest=renderTarget.scissorTest;}else {_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();_currentScissorTest=_scissorTest;}if(_currentFramebuffer!==framebuffer){_gl.bindFramebuffer(36160,framebuffer);_currentFramebuffer=framebuffer;}state.viewport(_currentViewport);state.scissor(_currentScissor);state.setScissorTest(_currentScissorTest);if(isCube){var textureProperties=properties.get(renderTarget.texture);_gl.framebufferTexture2D(36160,36064,34069+(activeCubeFace||0),textureProperties.__webglTexture,activeMipmapLevel||0);}};this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer,activeCubeFaceIndex){if(!(renderTarget&&renderTarget.isWebGLRenderTarget)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');return;}var framebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget&&activeCubeFaceIndex!==undefined){framebuffer=framebuffer[activeCubeFaceIndex];}if(framebuffer){var restore=false;if(framebuffer!==_currentFramebuffer){_gl.bindFramebuffer(36160,framebuffer);restore=true;}try{var texture=renderTarget.texture;var textureFormat=texture.format;var textureType=texture.type;if(textureFormat!==RGBAFormat&&utils.convert(textureFormat)!==_gl.getParameter(35739)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');return;}if(textureType!==UnsignedByteType&&utils.convert(textureType)!==_gl.getParameter(35738)&&// IE11, Edge and Chrome Mac < 52 (#9513)
!(textureType===FloatType&&(capabilities.isWebGL2||extensions.get('OES_texture_float')||extensions.get('WEBGL_color_buffer_float')))&&// Chrome Mac >= 52 and Firefox
!(textureType===HalfFloatType&&(capabilities.isWebGL2?extensions.get('EXT_color_buffer_float'):extensions.get('EXT_color_buffer_half_float')))){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');return;}if(_gl.checkFramebufferStatus(36160)===36053){// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
if(x>=0&&x<=renderTarget.width-width&&y>=0&&y<=renderTarget.height-height){_gl.readPixels(x,y,width,height,utils.convert(textureFormat),utils.convert(textureType),buffer);}}else {console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');}}finally{if(restore){_gl.bindFramebuffer(36160,_currentFramebuffer);}}}};this.copyFramebufferToTexture=function(position,texture,level){if(level===undefined)level=0;var levelScale=Math.pow(2,-level);var width=Math.floor(texture.image.width*levelScale);var height=Math.floor(texture.image.height*levelScale);var glFormat=utils.convert(texture.format);textures.setTexture2D(texture,0);_gl.copyTexImage2D(3553,level,glFormat,position.x,position.y,width,height,0);state.unbindTexture();};this.copyTextureToTexture=function(position,srcTexture,dstTexture,level){var width=srcTexture.image.width;var height=srcTexture.image.height;var glFormat=utils.convert(dstTexture.format);var glType=utils.convert(dstTexture.type);textures.setTexture2D(dstTexture,0);if(srcTexture.isDataTexture){_gl.texSubImage2D(3553,level||0,position.x,position.y,width,height,glFormat,glType,srcTexture.image.data);}else {_gl.texSubImage2D(3553,level||0,position.x,position.y,glFormat,glType,srcTexture.image);}state.unbindTexture();};this.initTexture=function(texture){textures.setTexture2D(texture,0);state.unbindTexture();};if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe',{detail:this}));// eslint-disable-line no-undef
}}/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */function FogExp2(color,density){this.name='';this.color=new Color(color);this.density=density!==undefined?density:0.00025;}Object.assign(FogExp2.prototype,{isFogExp2:true,clone:function clone(){return new FogExp2(this.color,this.density);},toJSON:function toJSON(/* meta */){return {type:'FogExp2',color:this.color.getHex(),density:this.density};}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */function Fog(color,near,far){this.name='';this.color=new Color(color);this.near=near!==undefined?near:1;this.far=far!==undefined?far:1000;}Object.assign(Fog.prototype,{isFog:true,clone:function clone(){return new Fog(this.color,this.near,this.far);},toJSON:function toJSON(/* meta */){return {type:'Fog',color:this.color.getHex(),near:this.near,far:this.far};}});/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */function InterleavedBuffer(array,stride){this.array=array;this.stride=stride;this.count=array!==undefined?array.length/stride:0;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;}Object.defineProperty(InterleavedBuffer.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});Object.assign(InterleavedBuffer.prototype,{isInterleavedBuffer:true,onUploadCallback:function onUploadCallback(){},setUsage:function setUsage(value){this.usage=value;return this;},copy:function copy(source){this.array=new source.array.constructor(source.array);this.count=source.count;this.stride=source.stride;this.usage=source.usage;return this;},copyAt:function copyAt(index1,attribute,index2){index1*=this.stride;index2*=attribute.stride;for(var i=0,l=this.stride;i<l;i++){this.array[index1+i]=attribute.array[index2+i];}return this;},set:function set(value,offset){if(offset===undefined)offset=0;this.array.set(value,offset);return this;},clone:function clone(){return new this.constructor().copy(this);},onUpload:function onUpload(callback){this.onUploadCallback=callback;return this;}});/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */var _vector$6=new Vector3();function InterleavedBufferAttribute(interleavedBuffer,itemSize,offset,normalized){this.data=interleavedBuffer;this.itemSize=itemSize;this.offset=offset;this.normalized=normalized===true;}Object.defineProperties(InterleavedBufferAttribute.prototype,{count:{get:function get(){return this.data.count;}},array:{get:function get(){return this.data.array;}}});Object.assign(InterleavedBufferAttribute.prototype,{isInterleavedBufferAttribute:true,applyMatrix4:function applyMatrix4(m){for(var i=0,l=this.data.count;i<l;i++){_vector$6.x=this.getX(i);_vector$6.y=this.getY(i);_vector$6.z=this.getZ(i);_vector$6.applyMatrix4(m);this.setXYZ(i,_vector$6.x,_vector$6.y,_vector$6.z);}return this;},setX:function setX(index,x){this.data.array[index*this.data.stride+this.offset]=x;return this;},setY:function setY(index,y){this.data.array[index*this.data.stride+this.offset+1]=y;return this;},setZ:function setZ(index,z){this.data.array[index*this.data.stride+this.offset+2]=z;return this;},setW:function setW(index,w){this.data.array[index*this.data.stride+this.offset+3]=w;return this;},getX:function getX(index){return this.data.array[index*this.data.stride+this.offset];},getY:function getY(index){return this.data.array[index*this.data.stride+this.offset+1];},getZ:function getZ(index){return this.data.array[index*this.data.stride+this.offset+2];},getW:function getW(index){return this.data.array[index*this.data.stride+this.offset+3];},setXY:function setXY(index,x,y){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;return this;},setXYZ:function setXYZ(index,x,y,z){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;return this;},setXYZW:function setXYZW(index,x,y,z,w){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;this.data.array[index+3]=w;return this;}});/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *  rotation: <float>,
 *  sizeAttenuation: <bool>
 * }
 */function SpriteMaterial(parameters){Material.call(this);this.type='SpriteMaterial';this.color=new Color(0xffffff);this.map=null;this.alphaMap=null;this.rotation=0;this.sizeAttenuation=true;this.transparent=true;this.setValues(parameters);}SpriteMaterial.prototype=Object.create(Material.prototype);SpriteMaterial.prototype.constructor=SpriteMaterial;SpriteMaterial.prototype.isSpriteMaterial=true;SpriteMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.rotation=source.rotation;this.sizeAttenuation=source.sizeAttenuation;return this;};/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */var _geometry;var _intersectPoint=new Vector3();var _worldScale=new Vector3();var _mvPosition=new Vector3();var _alignedPosition=new Vector2();var _rotatedPosition=new Vector2();var _viewWorldMatrix=new Matrix4();var _vA$1=new Vector3();var _vB$1=new Vector3();var _vC$1=new Vector3();var _uvA$1=new Vector2();var _uvB$1=new Vector2();var _uvC$1=new Vector2();function Sprite(material){Object3D.call(this);this.type='Sprite';if(_geometry===undefined){_geometry=new BufferGeometry();var float32Array=new Float32Array([-0.5,-0.5,0,0,0,0.5,-0.5,0,1,0,0.5,0.5,0,1,1,-0.5,0.5,0,0,1]);var interleavedBuffer=new InterleavedBuffer(float32Array,5);_geometry.setIndex([0,1,2,0,2,3]);_geometry.setAttribute('position',new InterleavedBufferAttribute(interleavedBuffer,3,0,false));_geometry.setAttribute('uv',new InterleavedBufferAttribute(interleavedBuffer,2,3,false));}this.geometry=_geometry;this.material=material!==undefined?material:new SpriteMaterial();this.center=new Vector2(0.5,0.5);}Sprite.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Sprite,isSprite:true,raycast:function raycast(raycaster,intersects){if(raycaster.camera===null){console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');}_worldScale.setFromMatrixScale(this.matrixWorld);_viewWorldMatrix.copy(raycaster.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse,this.matrixWorld);_mvPosition.setFromMatrixPosition(this.modelViewMatrix);if(raycaster.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){_worldScale.multiplyScalar(-_mvPosition.z);}var rotation=this.material.rotation;var sin,cos;if(rotation!==0){cos=Math.cos(rotation);sin=Math.sin(rotation);}var center=this.center;transformVertex(_vA$1.set(-0.5,-0.5,0),_mvPosition,center,_worldScale,sin,cos);transformVertex(_vB$1.set(0.5,-0.5,0),_mvPosition,center,_worldScale,sin,cos);transformVertex(_vC$1.set(0.5,0.5,0),_mvPosition,center,_worldScale,sin,cos);_uvA$1.set(0,0);_uvB$1.set(1,0);_uvC$1.set(1,1);// check first triangle
var intersect=raycaster.ray.intersectTriangle(_vA$1,_vB$1,_vC$1,false,_intersectPoint);if(intersect===null){// check second triangle
transformVertex(_vB$1.set(-0.5,0.5,0),_mvPosition,center,_worldScale,sin,cos);_uvB$1.set(0,1);intersect=raycaster.ray.intersectTriangle(_vA$1,_vC$1,_vB$1,false,_intersectPoint);if(intersect===null){return;}}var distance=raycaster.ray.origin.distanceTo(_intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,point:_intersectPoint.clone(),uv:Triangle.getUV(_intersectPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2()),face:null,object:this});},clone:function clone(){return new this.constructor(this.material).copy(this);},copy:function copy(source){Object3D.prototype.copy.call(this,source);if(source.center!==undefined)this.center.copy(source.center);return this;}});function transformVertex(vertexPosition,mvPosition,center,scale,sin,cos){// compute position in camera space
_alignedPosition.subVectors(vertexPosition,center).addScalar(0.5).multiply(scale);// to check if rotation is not zero
if(sin!==undefined){_rotatedPosition.x=cos*_alignedPosition.x-sin*_alignedPosition.y;_rotatedPosition.y=sin*_alignedPosition.x+cos*_alignedPosition.y;}else {_rotatedPosition.copy(_alignedPosition);}vertexPosition.copy(mvPosition);vertexPosition.x+=_rotatedPosition.x;vertexPosition.y+=_rotatedPosition.y;// transform to world space
vertexPosition.applyMatrix4(_viewWorldMatrix);}/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */var _v1$4=new Vector3();var _v2$2=new Vector3();function LOD(){Object3D.call(this);this.type='LOD';Object.defineProperties(this,{levels:{enumerable:true,value:[]}});this.autoUpdate=true;}LOD.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:LOD,isLOD:true,copy:function copy(source){Object3D.prototype.copy.call(this,source,false);var levels=source.levels;for(var i=0,l=levels.length;i<l;i++){var level=levels[i];this.addLevel(level.object.clone(),level.distance);}this.autoUpdate=source.autoUpdate;return this;},addLevel:function addLevel(object,distance){if(distance===undefined)distance=0;distance=Math.abs(distance);var levels=this.levels;for(var l=0;l<levels.length;l++){if(distance<levels[l].distance){break;}}levels.splice(l,0,{distance:distance,object:object});this.add(object);return this;},getObjectForDistance:function getObjectForDistance(distance){var levels=this.levels;if(levels.length>0){for(var i=1,l=levels.length;i<l;i++){if(distance<levels[i].distance){break;}}return levels[i-1].object;}return null;},raycast:function raycast(raycaster,intersects){var levels=this.levels;if(levels.length>0){_v1$4.setFromMatrixPosition(this.matrixWorld);var distance=raycaster.ray.origin.distanceTo(_v1$4);this.getObjectForDistance(distance).raycast(raycaster,intersects);}},update:function update(camera){var levels=this.levels;if(levels.length>1){_v1$4.setFromMatrixPosition(camera.matrixWorld);_v2$2.setFromMatrixPosition(this.matrixWorld);var distance=_v1$4.distanceTo(_v2$2);levels[0].object.visible=true;for(var i=1,l=levels.length;i<l;i++){if(distance>=levels[i].distance){levels[i-1].object.visible=false;levels[i].object.visible=true;}else {break;}}for(;i<l;i++){levels[i].object.visible=false;}}},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);if(this.autoUpdate===false)data.object.autoUpdate=false;data.object.levels=[];var levels=this.levels;for(var i=0,l=levels.length;i<l;i++){var level=levels[i];data.object.levels.push({object:level.object.uuid,distance:level.distance});}return data;}});/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */function SkinnedMesh(geometry,material){if(geometry&&geometry.isGeometry){console.error('THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}Mesh.call(this,geometry,material);this.type='SkinnedMesh';this.bindMode='attached';this.bindMatrix=new Matrix4();this.bindMatrixInverse=new Matrix4();}SkinnedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:SkinnedMesh,isSkinnedMesh:true,bind:function bind(skeleton,bindMatrix){this.skeleton=skeleton;if(bindMatrix===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();bindMatrix=this.matrixWorld;}this.bindMatrix.copy(bindMatrix);this.bindMatrixInverse.getInverse(bindMatrix);},pose:function pose(){this.skeleton.pose();},normalizeSkinWeights:function normalizeSkinWeights(){var vector=new Vector4();var skinWeight=this.geometry.attributes.skinWeight;for(var i=0,l=skinWeight.count;i<l;i++){vector.x=skinWeight.getX(i);vector.y=skinWeight.getY(i);vector.z=skinWeight.getZ(i);vector.w=skinWeight.getW(i);var scale=1.0/vector.manhattanLength();if(scale!==Infinity){vector.multiplyScalar(scale);}else {vector.set(1,0,0,0);// do something reasonable
}skinWeight.setXYZW(i,vector.x,vector.y,vector.z,vector.w);}},updateMatrixWorld:function updateMatrixWorld(force){Mesh.prototype.updateMatrixWorld.call(this,force);if(this.bindMode==='attached'){this.bindMatrixInverse.getInverse(this.matrixWorld);}else if(this.bindMode==='detached'){this.bindMatrixInverse.getInverse(this.bindMatrix);}else {console.warn('THREE.SkinnedMesh: Unrecognized bindMode: '+this.bindMode);}},clone:function clone(){return new this.constructor(this.geometry,this.material).copy(this);}});/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author michael guerrero / http://realitymeltdown.com
 * @author ikerr / http://verold.com
 */var _offsetMatrix=new Matrix4();var _identityMatrix=new Matrix4();function Skeleton(bones,boneInverses){// copy the bone array
bones=bones||[];this.bones=bones.slice(0);this.boneMatrices=new Float32Array(this.bones.length*16);this.frame=-1;// use the supplied bone inverses or calculate the inverses
if(boneInverses===undefined){this.calculateInverses();}else {if(this.bones.length===boneInverses.length){this.boneInverses=boneInverses.slice(0);}else {console.warn('THREE.Skeleton boneInverses is the wrong length.');this.boneInverses=[];for(var i=0,il=this.bones.length;i<il;i++){this.boneInverses.push(new Matrix4());}}}}Object.assign(Skeleton.prototype,{calculateInverses:function calculateInverses(){this.boneInverses=[];for(var i=0,il=this.bones.length;i<il;i++){var inverse=new Matrix4();if(this.bones[i]){inverse.getInverse(this.bones[i].matrixWorld);}this.boneInverses.push(inverse);}},pose:function pose(){var bone,i,il;// recover the bind-time world matrices
for(i=0,il=this.bones.length;i<il;i++){bone=this.bones[i];if(bone){bone.matrixWorld.getInverse(this.boneInverses[i]);}}// compute the local matrices, positions, rotations and scales
for(i=0,il=this.bones.length;i<il;i++){bone=this.bones[i];if(bone){if(bone.parent&&bone.parent.isBone){bone.matrix.getInverse(bone.parent.matrixWorld);bone.matrix.multiply(bone.matrixWorld);}else {bone.matrix.copy(bone.matrixWorld);}bone.matrix.decompose(bone.position,bone.quaternion,bone.scale);}}},update:function update(){var bones=this.bones;var boneInverses=this.boneInverses;var boneMatrices=this.boneMatrices;var boneTexture=this.boneTexture;// flatten bone matrices to array
for(var i=0,il=bones.length;i<il;i++){// compute the offset between the current and the original transform
var matrix=bones[i]?bones[i].matrixWorld:_identityMatrix;_offsetMatrix.multiplyMatrices(matrix,boneInverses[i]);_offsetMatrix.toArray(boneMatrices,i*16);}if(boneTexture!==undefined){boneTexture.needsUpdate=true;}},clone:function clone(){return new Skeleton(this.bones,this.boneInverses);},getBoneByName:function getBoneByName(name){for(var i=0,il=this.bones.length;i<il;i++){var bone=this.bones[i];if(bone.name===name){return bone;}}return undefined;}});/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */function Bone(){Object3D.call(this);this.type='Bone';}Bone.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Bone,isBone:true});/**
 * @author mrdoob / http://mrdoob.com/
 */var _instanceLocalMatrix=new Matrix4();var _instanceWorldMatrix=new Matrix4();var _instanceIntersects=[];var _mesh=new Mesh();function InstancedMesh(geometry,material,count){Mesh.call(this,geometry,material);this.instanceMatrix=new BufferAttribute(new Float32Array(count*16),16);this.count=count;this.frustumCulled=false;}InstancedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:InstancedMesh,isInstancedMesh:true,getMatrixAt:function getMatrixAt(index,matrix){matrix.fromArray(this.instanceMatrix.array,index*16);},raycast:function raycast(raycaster,intersects){var matrixWorld=this.matrixWorld;var raycastTimes=this.count;_mesh.geometry=this.geometry;_mesh.material=this.material;if(_mesh.material===undefined)return;for(var instanceId=0;instanceId<raycastTimes;instanceId++){// calculate the world matrix for each instance
this.getMatrixAt(instanceId,_instanceLocalMatrix);_instanceWorldMatrix.multiplyMatrices(matrixWorld,_instanceLocalMatrix);// the mesh represents this single instance
_mesh.matrixWorld=_instanceWorldMatrix;_mesh.raycast(raycaster,_instanceIntersects);// process the result of raycast
if(_instanceIntersects.length>0){_instanceIntersects[0].instanceId=instanceId;_instanceIntersects[0].object=this;intersects.push(_instanceIntersects[0]);_instanceIntersects.length=0;}}},setMatrixAt:function setMatrixAt(index,matrix){matrix.toArray(this.instanceMatrix.array,index*16);},updateMorphTargets:function updateMorphTargets(){}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */function LineBasicMaterial(parameters){Material.call(this);this.type='LineBasicMaterial';this.color=new Color(0xffffff);this.linewidth=1;this.linecap='round';this.linejoin='round';this.setValues(parameters);}LineBasicMaterial.prototype=Object.create(Material.prototype);LineBasicMaterial.prototype.constructor=LineBasicMaterial;LineBasicMaterial.prototype.isLineBasicMaterial=true;LineBasicMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.linewidth=source.linewidth;this.linecap=source.linecap;this.linejoin=source.linejoin;return this;};/**
 * @author mrdoob / http://mrdoob.com/
 */var _start=new Vector3();var _end=new Vector3();var _inverseMatrix$1=new Matrix4();var _ray$1=new Ray();var _sphere$2=new Sphere();function Line(geometry,material,mode){if(mode===1){console.error('THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.');}Object3D.call(this);this.type='Line';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new LineBasicMaterial();}Line.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Line,isLine:true,computeLineDistances:function computeLineDistances(){var geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
if(geometry.index===null){var positionAttribute=geometry.attributes.position;var lineDistances=[0];for(var i=1,l=positionAttribute.count;i<l;i++){_start.fromBufferAttribute(positionAttribute,i-1);_end.fromBufferAttribute(positionAttribute,i);lineDistances[i]=lineDistances[i-1];lineDistances[i]+=_start.distanceTo(_end);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else {console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){var vertices=geometry.vertices;var lineDistances=geometry.lineDistances;lineDistances[0]=0;for(var i=1,l=vertices.length;i<l;i++){lineDistances[i]=lineDistances[i-1];lineDistances[i]+=vertices[i-1].distanceTo(vertices[i]);}}return this;},raycast:function raycast(raycaster,intersects){var precision=raycaster.linePrecision;var geometry=this.geometry;var matrixWorld=this.matrixWorld;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$2.copy(geometry.boundingSphere);_sphere$2.applyMatrix4(matrixWorld);_sphere$2.radius+=precision;if(raycaster.ray.intersectsSphere(_sphere$2)===false)return;//
_inverseMatrix$1.getInverse(matrixWorld);_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);var localPrecision=precision/((this.scale.x+this.scale.y+this.scale.z)/3);var localPrecisionSq=localPrecision*localPrecision;var vStart=new Vector3();var vEnd=new Vector3();var interSegment=new Vector3();var interRay=new Vector3();var step=this&&this.isLineSegments?2:1;if(geometry.isBufferGeometry){var index=geometry.index;var attributes=geometry.attributes;var positions=attributes.position.array;if(index!==null){var indices=index.array;for(var i=0,l=indices.length-1;i<l;i+=step){var a=indices[i];var b=indices[i+1];vStart.fromArray(positions,a*3);vEnd.fromArray(positions,b*3);var distSq=_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(distSq>localPrecisionSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
var distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this});}}else {for(var i=0,l=positions.length/3-1;i<l;i+=step){vStart.fromArray(positions,3*i);vEnd.fromArray(positions,3*i+3);var distSq=_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(distSq>localPrecisionSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
var distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this});}}}else if(geometry.isGeometry){var vertices=geometry.vertices;var nbVertices=vertices.length;for(var i=0;i<nbVertices-1;i+=step){var distSq=_ray$1.distanceSqToSegment(vertices[i],vertices[i+1],interRay,interSegment);if(distSq>localPrecisionSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
var distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this});}}},clone:function clone(){return new this.constructor(this.geometry,this.material).copy(this);}});/**
 * @author mrdoob / http://mrdoob.com/
 */var _start$1=new Vector3();var _end$1=new Vector3();function LineSegments(geometry,material){Line.call(this,geometry,material);this.type='LineSegments';}LineSegments.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineSegments,isLineSegments:true,computeLineDistances:function computeLineDistances(){var geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
if(geometry.index===null){var positionAttribute=geometry.attributes.position;var lineDistances=[];for(var i=0,l=positionAttribute.count;i<l;i+=2){_start$1.fromBufferAttribute(positionAttribute,i);_end$1.fromBufferAttribute(positionAttribute,i+1);lineDistances[i]=i===0?0:lineDistances[i-1];lineDistances[i+1]=lineDistances[i]+_start$1.distanceTo(_end$1);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else {console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){var vertices=geometry.vertices;var lineDistances=geometry.lineDistances;for(var i=0,l=vertices.length;i<l;i+=2){_start$1.copy(vertices[i]);_end$1.copy(vertices[i+1]);lineDistances[i]=i===0?0:lineDistances[i-1];lineDistances[i+1]=lineDistances[i]+_start$1.distanceTo(_end$1);}}return this;}});/**
 * @author mgreter / http://github.com/mgreter
 */function LineLoop(geometry,material){Line.call(this,geometry,material);this.type='LineLoop';}LineLoop.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineLoop,isLineLoop:true});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 *
 *  morphTargets: <bool>
 * }
 */function PointsMaterial(parameters){Material.call(this);this.type='PointsMaterial';this.color=new Color(0xffffff);this.map=null;this.alphaMap=null;this.size=1;this.sizeAttenuation=true;this.morphTargets=false;this.setValues(parameters);}PointsMaterial.prototype=Object.create(Material.prototype);PointsMaterial.prototype.constructor=PointsMaterial;PointsMaterial.prototype.isPointsMaterial=true;PointsMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.size=source.size;this.sizeAttenuation=source.sizeAttenuation;this.morphTargets=source.morphTargets;return this;};/**
 * @author alteredq / http://alteredqualia.com/
 */var _inverseMatrix$2=new Matrix4();var _ray$2=new Ray();var _sphere$3=new Sphere();var _position$1=new Vector3();function Points(geometry,material){Object3D.call(this);this.type='Points';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new PointsMaterial();this.updateMorphTargets();}Points.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Points,isPoints:true,raycast:function raycast(raycaster,intersects){var geometry=this.geometry;var matrixWorld=this.matrixWorld;var threshold=raycaster.params.Points.threshold;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$3.copy(geometry.boundingSphere);_sphere$3.applyMatrix4(matrixWorld);_sphere$3.radius+=threshold;if(raycaster.ray.intersectsSphere(_sphere$3)===false)return;//
_inverseMatrix$2.getInverse(matrixWorld);_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);var localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);var localThresholdSq=localThreshold*localThreshold;if(geometry.isBufferGeometry){var index=geometry.index;var attributes=geometry.attributes;var positions=attributes.position.array;if(index!==null){var indices=index.array;for(var i=0,il=indices.length;i<il;i++){var a=indices[i];_position$1.fromArray(positions,a*3);testPoint(_position$1,a,localThresholdSq,matrixWorld,raycaster,intersects,this);}}else {for(var i=0,l=positions.length/3;i<l;i++){_position$1.fromArray(positions,i*3);testPoint(_position$1,i,localThresholdSq,matrixWorld,raycaster,intersects,this);}}}else {var vertices=geometry.vertices;for(var i=0,l=vertices.length;i<l;i++){testPoint(vertices[i],i,localThresholdSq,matrixWorld,raycaster,intersects,this);}}},updateMorphTargets:function updateMorphTargets(){var geometry=this.geometry;var m,ml,name;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes;var keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(m=0,ml=morphAttribute.length;m<ml;m++){name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else {var morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');}}},clone:function clone(){return new this.constructor(this.geometry,this.material).copy(this);}});function testPoint(point,index,localThresholdSq,matrixWorld,raycaster,intersects,object){var rayPointDistanceSq=_ray$2.distanceSqToPoint(point);if(rayPointDistanceSq<localThresholdSq){var intersectPoint=new Vector3();_ray$2.closestPointToPoint(point,intersectPoint);intersectPoint.applyMatrix4(matrixWorld);var distance=raycaster.ray.origin.distanceTo(intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,distanceToRay:Math.sqrt(rayPointDistanceSq),point:intersectPoint,index:index,face:null,object:object});}}/**
 * @author mrdoob / http://mrdoob.com/
 */function VideoTexture(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){Texture.call(this,video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.format=format!==undefined?format:RGBFormat;this.minFilter=minFilter!==undefined?minFilter:LinearFilter;this.magFilter=magFilter!==undefined?magFilter:LinearFilter;this.generateMipmaps=false;}VideoTexture.prototype=Object.assign(Object.create(Texture.prototype),{constructor:VideoTexture,isVideoTexture:true,update:function update(){var video=this.image;if(video.readyState>=video.HAVE_CURRENT_DATA){this.needsUpdate=true;}}});/**
 * @author alteredq / http://alteredqualia.com/
 */function CompressedTexture(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={width:width,height:height};this.mipmaps=mipmaps;// no flipping for cube textures
// (also flipping doesn't work for compressed textures )
this.flipY=false;// can't generate mipmaps for compressed textures
// mips must be embedded in DDS files
this.generateMipmaps=false;}CompressedTexture.prototype=Object.create(Texture.prototype);CompressedTexture.prototype.constructor=CompressedTexture;CompressedTexture.prototype.isCompressedTexture=true;/**
 * @author mrdoob / http://mrdoob.com/
 */function CanvasTexture(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){Texture.call(this,canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.needsUpdate=true;}CanvasTexture.prototype=Object.create(Texture.prototype);CanvasTexture.prototype.constructor=CanvasTexture;CanvasTexture.prototype.isCanvasTexture=true;/**
 * @author Matt DesLauriers / @mattdesl
 * @author atix / arthursilber.de
 */function DepthTexture(width,height,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,format){format=format!==undefined?format:DepthFormat;if(format!==DepthFormat&&format!==DepthStencilFormat){throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');}if(type===undefined&&format===DepthFormat)type=UnsignedShortType;if(type===undefined&&format===DepthStencilFormat)type=UnsignedInt248Type;Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.image={width:width,height:height};this.magFilter=magFilter!==undefined?magFilter:NearestFilter;this.minFilter=minFilter!==undefined?minFilter:NearestFilter;this.flipY=false;this.generateMipmaps=false;}DepthTexture.prototype=Object.create(Texture.prototype);DepthTexture.prototype.constructor=DepthTexture;DepthTexture.prototype.isDepthTexture=true;/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */function WireframeGeometry(geometry){BufferGeometry.call(this);this.type='WireframeGeometry';// buffer
var vertices=[];// helper variables
var i,j,l,o,ol;var edge=[0,0],edges={},e,edge1,edge2;var key,keys=['a','b','c'];var vertex;// different logic for Geometry and BufferGeometry
if(geometry&&geometry.isGeometry){// create a data structure that contains all edges without duplicates
var faces=geometry.faces;for(i=0,l=faces.length;i<l;i++){var face=faces[i];for(j=0;j<3;j++){edge1=face[keys[j]];edge2=face[keys[(j+1)%3]];edge[0]=Math.min(edge1,edge2);// sorting prevents duplicates
edge[1]=Math.max(edge1,edge2);key=edge[0]+','+edge[1];if(edges[key]===undefined){edges[key]={index1:edge[0],index2:edge[1]};}}}// generate vertices
for(key in edges){e=edges[key];vertex=geometry.vertices[e.index1];vertices.push(vertex.x,vertex.y,vertex.z);vertex=geometry.vertices[e.index2];vertices.push(vertex.x,vertex.y,vertex.z);}}else if(geometry&&geometry.isBufferGeometry){var position,indices,groups;var group,start,count;var index1,index2;vertex=new Vector3();if(geometry.index!==null){// indexed BufferGeometry
position=geometry.attributes.position;indices=geometry.index;groups=geometry.groups;if(groups.length===0){groups=[{start:0,count:indices.count,materialIndex:0}];}// create a data structure that contains all eges without duplicates
for(o=0,ol=groups.length;o<ol;++o){group=groups[o];start=group.start;count=group.count;for(i=start,l=start+count;i<l;i+=3){for(j=0;j<3;j++){edge1=indices.getX(i+j);edge2=indices.getX(i+(j+1)%3);edge[0]=Math.min(edge1,edge2);// sorting prevents duplicates
edge[1]=Math.max(edge1,edge2);key=edge[0]+','+edge[1];if(edges[key]===undefined){edges[key]={index1:edge[0],index2:edge[1]};}}}}// generate vertices
for(key in edges){e=edges[key];vertex.fromBufferAttribute(position,e.index1);vertices.push(vertex.x,vertex.y,vertex.z);vertex.fromBufferAttribute(position,e.index2);vertices.push(vertex.x,vertex.y,vertex.z);}}else {// non-indexed BufferGeometry
position=geometry.attributes.position;for(i=0,l=position.count/3;i<l;i++){for(j=0;j<3;j++){// three edges per triangle, an edge is represented as (index1, index2)
// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
index1=3*i+j;vertex.fromBufferAttribute(position,index1);vertices.push(vertex.x,vertex.y,vertex.z);index2=3*i+(j+1)%3;vertex.fromBufferAttribute(position,index2);vertices.push(vertex.x,vertex.y,vertex.z);}}}}// build geometry
this.setAttribute('position',new Float32BufferAttribute(vertices,3));}WireframeGeometry.prototype=Object.create(BufferGeometry.prototype);WireframeGeometry.prototype.constructor=WireframeGeometry;/**
 * @author zz85 / https://github.com/zz85
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
 */ // ParametricGeometry
function ParametricGeometry(func,slices,stacks){Geometry.call(this);this.type='ParametricGeometry';this.parameters={func:func,slices:slices,stacks:stacks};this.fromBufferGeometry(new ParametricBufferGeometry(func,slices,stacks));this.mergeVertices();}ParametricGeometry.prototype=Object.create(Geometry.prototype);ParametricGeometry.prototype.constructor=ParametricGeometry;// ParametricBufferGeometry
function ParametricBufferGeometry(func,slices,stacks){BufferGeometry.call(this);this.type='ParametricBufferGeometry';this.parameters={func:func,slices:slices,stacks:stacks};// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];var EPS=0.00001;var normal=new Vector3();var p0=new Vector3(),p1=new Vector3();var pu=new Vector3(),pv=new Vector3();var i,j;if(func.length<3){console.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');}// generate vertices, normals and uvs
var sliceCount=slices+1;for(i=0;i<=stacks;i++){var v=i/stacks;for(j=0;j<=slices;j++){var u=j/slices;// vertex
func(u,v,p0);vertices.push(p0.x,p0.y,p0.z);// normal
// approximate tangent vectors via finite differences
if(u-EPS>=0){func(u-EPS,v,p1);pu.subVectors(p0,p1);}else {func(u+EPS,v,p1);pu.subVectors(p1,p0);}if(v-EPS>=0){func(u,v-EPS,p1);pv.subVectors(p0,p1);}else {func(u,v+EPS,p1);pv.subVectors(p1,p0);}// cross product of tangent vectors returns surface normal
normal.crossVectors(pu,pv).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(u,v);}}// generate indices
for(i=0;i<stacks;i++){for(j=0;j<slices;j++){var a=i*sliceCount+j;var b=i*sliceCount+j+1;var c=(i+1)*sliceCount+j+1;var d=(i+1)*sliceCount+j;// faces one and two
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}ParametricBufferGeometry.prototype=Object.create(BufferGeometry.prototype);ParametricBufferGeometry.prototype.constructor=ParametricBufferGeometry;/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */ // PolyhedronGeometry
function PolyhedronGeometry(vertices,indices,radius,detail){Geometry.call(this);this.type='PolyhedronGeometry';this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail};this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices,indices,radius,detail));this.mergeVertices();}PolyhedronGeometry.prototype=Object.create(Geometry.prototype);PolyhedronGeometry.prototype.constructor=PolyhedronGeometry;// PolyhedronBufferGeometry
function PolyhedronBufferGeometry(vertices,indices,radius,detail){BufferGeometry.call(this);this.type='PolyhedronBufferGeometry';this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail};radius=radius||1;detail=detail||0;// default buffer data
var vertexBuffer=[];var uvBuffer=[];// the subdivision creates the vertex buffer data
subdivide(detail);// all vertices should lie on a conceptual sphere with a given radius
applyRadius(radius);// finally, create the uv data
generateUVs();// build non-indexed geometry
this.setAttribute('position',new Float32BufferAttribute(vertexBuffer,3));this.setAttribute('normal',new Float32BufferAttribute(vertexBuffer.slice(),3));this.setAttribute('uv',new Float32BufferAttribute(uvBuffer,2));if(detail===0){this.computeVertexNormals();// flat normals
}else {this.normalizeNormals();// smooth normals
}// helper functions
function subdivide(detail){var a=new Vector3();var b=new Vector3();var c=new Vector3();// iterate over all faces and apply a subdivison with the given detail value
for(var i=0;i<indices.length;i+=3){// get the vertices of the face
getVertexByIndex(indices[i+0],a);getVertexByIndex(indices[i+1],b);getVertexByIndex(indices[i+2],c);// perform subdivision
subdivideFace(a,b,c,detail);}}function subdivideFace(a,b,c,detail){var cols=Math.pow(2,detail);// we use this multidimensional array as a data structure for creating the subdivision
var v=[];var i,j;// construct all of the vertices for this subdivision
for(i=0;i<=cols;i++){v[i]=[];var aj=a.clone().lerp(c,i/cols);var bj=b.clone().lerp(c,i/cols);var rows=cols-i;for(j=0;j<=rows;j++){if(j===0&&i===cols){v[i][j]=aj;}else {v[i][j]=aj.clone().lerp(bj,j/rows);}}}// construct all of the faces
for(i=0;i<cols;i++){for(j=0;j<2*(cols-i)-1;j++){var k=Math.floor(j/2);if(j%2===0){pushVertex(v[i][k+1]);pushVertex(v[i+1][k]);pushVertex(v[i][k]);}else {pushVertex(v[i][k+1]);pushVertex(v[i+1][k+1]);pushVertex(v[i+1][k]);}}}}function applyRadius(radius){var vertex=new Vector3();// iterate over the entire buffer and apply the radius to each vertex
for(var i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];vertex.normalize().multiplyScalar(radius);vertexBuffer[i+0]=vertex.x;vertexBuffer[i+1]=vertex.y;vertexBuffer[i+2]=vertex.z;}}function generateUVs(){var vertex=new Vector3();for(var i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];var u=azimuth(vertex)/2/Math.PI+0.5;var v=inclination(vertex)/Math.PI+0.5;uvBuffer.push(u,1-v);}correctUVs();correctSeam();}function correctSeam(){// handle case when face straddles the seam, see #3269
for(var i=0;i<uvBuffer.length;i+=6){// uv data of a single face
var x0=uvBuffer[i+0];var x1=uvBuffer[i+2];var x2=uvBuffer[i+4];var max=Math.max(x0,x1,x2);var min=Math.min(x0,x1,x2);// 0.9 is somewhat arbitrary
if(max>0.9&&min<0.1){if(x0<0.2)uvBuffer[i+0]+=1;if(x1<0.2)uvBuffer[i+2]+=1;if(x2<0.2)uvBuffer[i+4]+=1;}}}function pushVertex(vertex){vertexBuffer.push(vertex.x,vertex.y,vertex.z);}function getVertexByIndex(index,vertex){var stride=index*3;vertex.x=vertices[stride+0];vertex.y=vertices[stride+1];vertex.z=vertices[stride+2];}function correctUVs(){var a=new Vector3();var b=new Vector3();var c=new Vector3();var centroid=new Vector3();var uvA=new Vector2();var uvB=new Vector2();var uvC=new Vector2();for(var i=0,j=0;i<vertexBuffer.length;i+=9,j+=6){a.set(vertexBuffer[i+0],vertexBuffer[i+1],vertexBuffer[i+2]);b.set(vertexBuffer[i+3],vertexBuffer[i+4],vertexBuffer[i+5]);c.set(vertexBuffer[i+6],vertexBuffer[i+7],vertexBuffer[i+8]);uvA.set(uvBuffer[j+0],uvBuffer[j+1]);uvB.set(uvBuffer[j+2],uvBuffer[j+3]);uvC.set(uvBuffer[j+4],uvBuffer[j+5]);centroid.copy(a).add(b).add(c).divideScalar(3);var azi=azimuth(centroid);correctUV(uvA,j+0,a,azi);correctUV(uvB,j+2,b,azi);correctUV(uvC,j+4,c,azi);}}function correctUV(uv,stride,vector,azimuth){if(azimuth<0&&uv.x===1){uvBuffer[stride]=uv.x-1;}if(vector.x===0&&vector.z===0){uvBuffer[stride]=azimuth/2/Math.PI+0.5;}}// Angle around the Y axis, counter-clockwise when looking from above.
function azimuth(vector){return Math.atan2(vector.z,-vector.x);}// Angle above the XZ plane.
function inclination(vector){return Math.atan2(-vector.y,Math.sqrt(vector.x*vector.x+vector.z*vector.z));}}PolyhedronBufferGeometry.prototype=Object.create(BufferGeometry.prototype);PolyhedronBufferGeometry.prototype.constructor=PolyhedronBufferGeometry;/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */ // TetrahedronGeometry
function TetrahedronGeometry(radius,detail){Geometry.call(this);this.type='TetrahedronGeometry';this.parameters={radius:radius,detail:detail};this.fromBufferGeometry(new TetrahedronBufferGeometry(radius,detail));this.mergeVertices();}TetrahedronGeometry.prototype=Object.create(Geometry.prototype);TetrahedronGeometry.prototype.constructor=TetrahedronGeometry;// TetrahedronBufferGeometry
function TetrahedronBufferGeometry(radius,detail){var vertices=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];var indices=[2,1,0,0,3,2,1,3,0,2,3,1];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail);this.type='TetrahedronBufferGeometry';this.parameters={radius:radius,detail:detail};}TetrahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype);TetrahedronBufferGeometry.prototype.constructor=TetrahedronBufferGeometry;/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */ // OctahedronGeometry
function OctahedronGeometry(radius,detail){Geometry.call(this);this.type='OctahedronGeometry';this.parameters={radius:radius,detail:detail};this.fromBufferGeometry(new OctahedronBufferGeometry(radius,detail));this.mergeVertices();}OctahedronGeometry.prototype=Object.create(Geometry.prototype);OctahedronGeometry.prototype.constructor=OctahedronGeometry;// OctahedronBufferGeometry
function OctahedronBufferGeometry(radius,detail){var vertices=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];var indices=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail);this.type='OctahedronBufferGeometry';this.parameters={radius:radius,detail:detail};}OctahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype);OctahedronBufferGeometry.prototype.constructor=OctahedronBufferGeometry;/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */ // IcosahedronGeometry
function IcosahedronGeometry(radius,detail){Geometry.call(this);this.type='IcosahedronGeometry';this.parameters={radius:radius,detail:detail};this.fromBufferGeometry(new IcosahedronBufferGeometry(radius,detail));this.mergeVertices();}IcosahedronGeometry.prototype=Object.create(Geometry.prototype);IcosahedronGeometry.prototype.constructor=IcosahedronGeometry;// IcosahedronBufferGeometry
function IcosahedronBufferGeometry(radius,detail){var t=(1+Math.sqrt(5))/2;var vertices=[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1];var indices=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail);this.type='IcosahedronBufferGeometry';this.parameters={radius:radius,detail:detail};}IcosahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype);IcosahedronBufferGeometry.prototype.constructor=IcosahedronBufferGeometry;/**
 * @author Abe Pazos / https://hamoid.com
 * @author Mugen87 / https://github.com/Mugen87
 */ // DodecahedronGeometry
function DodecahedronGeometry(radius,detail){Geometry.call(this);this.type='DodecahedronGeometry';this.parameters={radius:radius,detail:detail};this.fromBufferGeometry(new DodecahedronBufferGeometry(radius,detail));this.mergeVertices();}DodecahedronGeometry.prototype=Object.create(Geometry.prototype);DodecahedronGeometry.prototype.constructor=DodecahedronGeometry;// DodecahedronBufferGeometry
function DodecahedronBufferGeometry(radius,detail){var t=(1+Math.sqrt(5))/2;var r=1/t;var vertices=[// (±1, ±1, ±1)
-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,// (0, ±1/φ, ±φ)
0,-r,-t,0,-r,t,0,r,-t,0,r,t,// (±1/φ, ±φ, 0)
-r,-t,0,-r,t,0,r,-t,0,r,t,0,// (±φ, 0, ±1/φ)
-t,0,-r,t,0,-r,-t,0,r,t,0,r];var indices=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail);this.type='DodecahedronBufferGeometry';this.parameters={radius:radius,detail:detail};}DodecahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype);DodecahedronBufferGeometry.prototype.constructor=DodecahedronBufferGeometry;/**
 * @author oosmoxiecode / https://github.com/oosmoxiecode
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 * @author jonobr1 / https://github.com/jonobr1
 * @author Mugen87 / https://github.com/Mugen87
 *
 */ // TubeGeometry
function TubeGeometry(path,tubularSegments,radius,radialSegments,closed,taper){Geometry.call(this);this.type='TubeGeometry';this.parameters={path:path,tubularSegments:tubularSegments,radius:radius,radialSegments:radialSegments,closed:closed};if(taper!==undefined)console.warn('THREE.TubeGeometry: taper has been removed.');var bufferGeometry=new TubeBufferGeometry(path,tubularSegments,radius,radialSegments,closed);// expose internals
this.tangents=bufferGeometry.tangents;this.normals=bufferGeometry.normals;this.binormals=bufferGeometry.binormals;// create geometry
this.fromBufferGeometry(bufferGeometry);this.mergeVertices();}TubeGeometry.prototype=Object.create(Geometry.prototype);TubeGeometry.prototype.constructor=TubeGeometry;// TubeBufferGeometry
function TubeBufferGeometry(path,tubularSegments,radius,radialSegments,closed){BufferGeometry.call(this);this.type='TubeBufferGeometry';this.parameters={path:path,tubularSegments:tubularSegments,radius:radius,radialSegments:radialSegments,closed:closed};tubularSegments=tubularSegments||64;radius=radius||1;radialSegments=radialSegments||8;closed=closed||false;var frames=path.computeFrenetFrames(tubularSegments,closed);// expose internals
this.tangents=frames.tangents;this.normals=frames.normals;this.binormals=frames.binormals;// helper variables
var vertex=new Vector3();var normal=new Vector3();var uv=new Vector2();var P=new Vector3();var i,j;// buffer
var vertices=[];var normals=[];var uvs=[];var indices=[];// create buffer data
generateBufferData();// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// functions
function generateBufferData(){for(i=0;i<tubularSegments;i++){generateSegment(i);}// if the geometry is not closed, generate the last row of vertices and normals
// at the regular position on the given path
//
// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
generateSegment(closed===false?tubularSegments:0);// uvs are generated in a separate function.
// this makes it easy compute correct values for closed geometries
generateUVs();// finally create faces
generateIndices();}function generateSegment(i){// we use getPointAt to sample evenly distributed points from the given path
P=path.getPointAt(i/tubularSegments,P);// retrieve corresponding normal and binormal
var N=frames.normals[i];var B=frames.binormals[i];// generate normals and vertices for the current segment
for(j=0;j<=radialSegments;j++){var v=j/radialSegments*Math.PI*2;var sin=Math.sin(v);var cos=-Math.cos(v);// normal
normal.x=cos*N.x+sin*B.x;normal.y=cos*N.y+sin*B.y;normal.z=cos*N.z+sin*B.z;normal.normalize();normals.push(normal.x,normal.y,normal.z);// vertex
vertex.x=P.x+radius*normal.x;vertex.y=P.y+radius*normal.y;vertex.z=P.z+radius*normal.z;vertices.push(vertex.x,vertex.y,vertex.z);}}function generateIndices(){for(j=1;j<=tubularSegments;j++){for(i=1;i<=radialSegments;i++){var a=(radialSegments+1)*(j-1)+(i-1);var b=(radialSegments+1)*j+(i-1);var c=(radialSegments+1)*j+i;var d=(radialSegments+1)*(j-1)+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}}function generateUVs(){for(i=0;i<=tubularSegments;i++){for(j=0;j<=radialSegments;j++){uv.x=i/tubularSegments;uv.y=j/radialSegments;uvs.push(uv.x,uv.y);}}}}TubeBufferGeometry.prototype=Object.create(BufferGeometry.prototype);TubeBufferGeometry.prototype.constructor=TubeBufferGeometry;TubeBufferGeometry.prototype.toJSON=function(){var data=BufferGeometry.prototype.toJSON.call(this);data.path=this.parameters.path.toJSON();return data;};/**
 * @author oosmoxiecode
 * @author Mugen87 / https://github.com/Mugen87
 *
 * based on http://www.blackpawn.com/texts/pqtorus/
 */ // TorusKnotGeometry
function TorusKnotGeometry(radius,tube,tubularSegments,radialSegments,p,q,heightScale){Geometry.call(this);this.type='TorusKnotGeometry';this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q};if(heightScale!==undefined)console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');this.fromBufferGeometry(new TorusKnotBufferGeometry(radius,tube,tubularSegments,radialSegments,p,q));this.mergeVertices();}TorusKnotGeometry.prototype=Object.create(Geometry.prototype);TorusKnotGeometry.prototype.constructor=TorusKnotGeometry;// TorusKnotBufferGeometry
function TorusKnotBufferGeometry(radius,tube,tubularSegments,radialSegments,p,q){BufferGeometry.call(this);this.type='TorusKnotBufferGeometry';this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q};radius=radius||1;tube=tube||0.4;tubularSegments=Math.floor(tubularSegments)||64;radialSegments=Math.floor(radialSegments)||8;p=p||2;q=q||3;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var i,j;var vertex=new Vector3();var normal=new Vector3();var P1=new Vector3();var P2=new Vector3();var B=new Vector3();var T=new Vector3();var N=new Vector3();// generate vertices, normals and uvs
for(i=0;i<=tubularSegments;++i){// the radian "u" is used to calculate the position on the torus curve of the current tubular segement
var u=i/tubularSegments*p*Math.PI*2;// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
calculatePositionOnCurve(u,p,q,radius,P1);calculatePositionOnCurve(u+0.01,p,q,radius,P2);// calculate orthonormal basis
T.subVectors(P2,P1);N.addVectors(P2,P1);B.crossVectors(T,N);N.crossVectors(B,T);// normalize B, N. T can be ignored, we don't use it
B.normalize();N.normalize();for(j=0;j<=radialSegments;++j){// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
var v=j/radialSegments*Math.PI*2;var cx=-tube*Math.cos(v);var cy=tube*Math.sin(v);// now calculate the final vertex position.
// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
vertex.x=P1.x+(cx*N.x+cy*B.x);vertex.y=P1.y+(cx*N.y+cy*B.y);vertex.z=P1.z+(cx*N.z+cy*B.z);vertices.push(vertex.x,vertex.y,vertex.z);// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
normal.subVectors(vertex,P1).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(i/tubularSegments);uvs.push(j/radialSegments);}}// generate indices
for(j=1;j<=tubularSegments;j++){for(i=1;i<=radialSegments;i++){// indices
var a=(radialSegments+1)*(j-1)+(i-1);var b=(radialSegments+1)*j+(i-1);var c=(radialSegments+1)*j+i;var d=(radialSegments+1)*(j-1)+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// this function calculates the current position on the torus curve
function calculatePositionOnCurve(u,p,q,radius,position){var cu=Math.cos(u);var su=Math.sin(u);var quOverP=q/p*u;var cs=Math.cos(quOverP);position.x=radius*(2+cs)*0.5*cu;position.y=radius*(2+cs)*su*0.5;position.z=radius*Math.sin(quOverP)*0.5;}}TorusKnotBufferGeometry.prototype=Object.create(BufferGeometry.prototype);TorusKnotBufferGeometry.prototype.constructor=TorusKnotBufferGeometry;/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */ // TorusGeometry
function TorusGeometry(radius,tube,radialSegments,tubularSegments,arc){Geometry.call(this);this.type='TorusGeometry';this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc};this.fromBufferGeometry(new TorusBufferGeometry(radius,tube,radialSegments,tubularSegments,arc));this.mergeVertices();}TorusGeometry.prototype=Object.create(Geometry.prototype);TorusGeometry.prototype.constructor=TorusGeometry;// TorusBufferGeometry
function TorusBufferGeometry(radius,tube,radialSegments,tubularSegments,arc){BufferGeometry.call(this);this.type='TorusBufferGeometry';this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc};radius=radius||1;tube=tube||0.4;radialSegments=Math.floor(radialSegments)||8;tubularSegments=Math.floor(tubularSegments)||6;arc=arc||Math.PI*2;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var center=new Vector3();var vertex=new Vector3();var normal=new Vector3();var j,i;// generate vertices, normals and uvs
for(j=0;j<=radialSegments;j++){for(i=0;i<=tubularSegments;i++){var u=i/tubularSegments*arc;var v=j/radialSegments*Math.PI*2;// vertex
vertex.x=(radius+tube*Math.cos(v))*Math.cos(u);vertex.y=(radius+tube*Math.cos(v))*Math.sin(u);vertex.z=tube*Math.sin(v);vertices.push(vertex.x,vertex.y,vertex.z);// normal
center.x=radius*Math.cos(u);center.y=radius*Math.sin(u);normal.subVectors(vertex,center).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(i/tubularSegments);uvs.push(j/radialSegments);}}// generate indices
for(j=1;j<=radialSegments;j++){for(i=1;i<=tubularSegments;i++){// indices
var a=(tubularSegments+1)*j+i-1;var b=(tubularSegments+1)*(j-1)+i-1;var c=(tubularSegments+1)*(j-1)+i;var d=(tubularSegments+1)*j+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}TorusBufferGeometry.prototype=Object.create(BufferGeometry.prototype);TorusBufferGeometry.prototype.constructor=TorusBufferGeometry;/**
 * @author Mugen87 / https://github.com/Mugen87
 * Port from https://github.com/mapbox/earcut (v2.1.5)
 */var Earcut={triangulate:function triangulate(data,holeIndices,dim){dim=dim||2;var hasHoles=holeIndices&&holeIndices.length,outerLen=hasHoles?holeIndices[0]*dim:data.length,outerNode=linkedList(data,0,outerLen,dim,true),triangles=[];if(!outerNode||outerNode.next===outerNode.prev)return triangles;var minX,minY,maxX,maxY,x,y,invSize;if(hasHoles)outerNode=eliminateHoles(data,holeIndices,outerNode,dim);// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
if(data.length>80*dim){minX=maxX=data[0];minY=maxY=data[1];for(var i=dim;i<outerLen;i+=dim){x=data[i];y=data[i+1];if(x<minX)minX=x;if(y<minY)minY=y;if(x>maxX)maxX=x;if(y>maxY)maxY=y;}// minX, minY and invSize are later used to transform coords into integers for z-order calculation
invSize=Math.max(maxX-minX,maxY-minY);invSize=invSize!==0?1/invSize:0;}earcutLinked(outerNode,triangles,dim,minX,minY,invSize);return triangles;}};// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data,start,end,dim,clockwise){var i,last;if(clockwise===signedArea(data,start,end,dim)>0){for(i=start;i<end;i+=dim)last=insertNode(i,data[i],data[i+1],last);}else {for(i=end-dim;i>=start;i-=dim)last=insertNode(i,data[i],data[i+1],last);}if(last&&equals(last,last.next)){removeNode(last);last=last.next;}return last;}// eliminate colinear or duplicate points
function filterPoints(start,end){if(!start)return start;if(!end)end=start;var p=start,again;do{again=false;if(!p.steiner&&(equals(p,p.next)||area(p.prev,p,p.next)===0)){removeNode(p);p=end=p.prev;if(p===p.next)break;again=true;}else {p=p.next;}}while(again||p!==end);return end;}// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear,triangles,dim,minX,minY,invSize,pass){if(!ear)return;// interlink polygon nodes in z-order
if(!pass&&invSize)indexCurve(ear,minX,minY,invSize);var stop=ear,prev,next;// iterate through ears, slicing them one by one
while(ear.prev!==ear.next){prev=ear.prev;next=ear.next;if(invSize?isEarHashed(ear,minX,minY,invSize):isEar(ear)){// cut off the triangle
triangles.push(prev.i/dim);triangles.push(ear.i/dim);triangles.push(next.i/dim);removeNode(ear);// skipping the next vertex leads to less sliver triangles
ear=next.next;stop=next.next;continue;}ear=next;// if we looped through the whole remaining polygon and can't find any more ears
if(ear===stop){// try filtering points and slicing again
if(!pass){earcutLinked(filterPoints(ear),triangles,dim,minX,minY,invSize,1);// if this didn't work, try curing all small self-intersections locally
}else if(pass===1){ear=cureLocalIntersections(ear,triangles,dim);earcutLinked(ear,triangles,dim,minX,minY,invSize,2);// as a last resort, try splitting the remaining polygon into two
}else if(pass===2){splitEarcut(ear,triangles,dim,minX,minY,invSize);}break;}}}// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear){var a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
// now make sure we don't have other points inside the potential ear
var p=ear.next.next;while(p!==ear.prev){if(pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.next;}return true;}function isEarHashed(ear,minX,minY,invSize){var a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
// triangle bbox; min & max are calculated like this for speed
var minTX=a.x<b.x?a.x<c.x?a.x:c.x:b.x<c.x?b.x:c.x,minTY=a.y<b.y?a.y<c.y?a.y:c.y:b.y<c.y?b.y:c.y,maxTX=a.x>b.x?a.x>c.x?a.x:c.x:b.x>c.x?b.x:c.x,maxTY=a.y>b.y?a.y>c.y?a.y:c.y:b.y>c.y?b.y:c.y;// z-order range for the current triangle bbox;
var minZ=zOrder(minTX,minTY,minX,minY,invSize),maxZ=zOrder(maxTX,maxTY,minX,minY,invSize);var p=ear.prevZ,n=ear.nextZ;// look for points inside the triangle in both directions
while(p&&p.z>=minZ&&n&&n.z<=maxZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;if(n!==ear.prev&&n!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}// look for remaining points in decreasing z-order
while(p&&p.z>=minZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;}// look for remaining points in increasing z-order
while(n&&n.z<=maxZ){if(n!==ear.prev&&n!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}return true;}// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start,triangles,dim){var p=start;do{var a=p.prev,b=p.next.next;if(!equals(a,b)&&intersects(a,p,p.next,b)&&locallyInside(a,b)&&locallyInside(b,a)){triangles.push(a.i/dim);triangles.push(p.i/dim);triangles.push(b.i/dim);// remove two nodes involved
removeNode(p);removeNode(p.next);p=start=b;}p=p.next;}while(p!==start);return p;}// try splitting polygon into two and triangulate them independently
function splitEarcut(start,triangles,dim,minX,minY,invSize){// look for a valid diagonal that divides the polygon into two
var a=start;do{var b=a.next.next;while(b!==a.prev){if(a.i!==b.i&&isValidDiagonal(a,b)){// split the polygon in two by the diagonal
var c=splitPolygon(a,b);// filter colinear points around the cuts
a=filterPoints(a,a.next);c=filterPoints(c,c.next);// run earcut on each half
earcutLinked(a,triangles,dim,minX,minY,invSize);earcutLinked(c,triangles,dim,minX,minY,invSize);return;}b=b.next;}a=a.next;}while(a!==start);}// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data,holeIndices,outerNode,dim){var queue=[],i,len,start,end,list;for(i=0,len=holeIndices.length;i<len;i++){start=holeIndices[i]*dim;end=i<len-1?holeIndices[i+1]*dim:data.length;list=linkedList(data,start,end,dim,false);if(list===list.next)list.steiner=true;queue.push(getLeftmost(list));}queue.sort(compareX);// process holes from left to right
for(i=0;i<queue.length;i++){eliminateHole(queue[i],outerNode);outerNode=filterPoints(outerNode,outerNode.next);}return outerNode;}function compareX(a,b){return a.x-b.x;}// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole,outerNode){outerNode=findHoleBridge(hole,outerNode);if(outerNode){var b=splitPolygon(outerNode,hole);filterPoints(b,b.next);}}// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole,outerNode){var p=outerNode,hx=hole.x,hy=hole.y,qx=-Infinity,m;// find a segment intersected by a ray from the hole's leftmost point to the left;
// segment's endpoint with lesser x will be potential connection point
do{if(hy<=p.y&&hy>=p.next.y&&p.next.y!==p.y){var x=p.x+(hy-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(x<=hx&&x>qx){qx=x;if(x===hx){if(hy===p.y)return p;if(hy===p.next.y)return p.next;}m=p.x<p.next.x?p:p.next;}}p=p.next;}while(p!==outerNode);if(!m)return null;if(hx===qx)return m.prev;// hole touches outer segment; pick lower endpoint
// look for points inside the triangle of hole point, segment intersection and endpoint;
// if there are no points found, we have a valid connection;
// otherwise choose the point of the minimum angle with the ray as connection point
var stop=m,mx=m.x,my=m.y,tanMin=Infinity,tan;p=m.next;while(p!==stop){if(hx>=p.x&&p.x>=mx&&hx!==p.x&&pointInTriangle(hy<my?hx:qx,hy,mx,my,hy<my?qx:hx,hy,p.x,p.y)){tan=Math.abs(hy-p.y)/(hx-p.x);// tangential
if((tan<tanMin||tan===tanMin&&p.x>m.x)&&locallyInside(p,hole)){m=p;tanMin=tan;}}p=p.next;}return m;}// interlink polygon nodes in z-order
function indexCurve(start,minX,minY,invSize){var p=start;do{if(p.z===null)p.z=zOrder(p.x,p.y,minX,minY,invSize);p.prevZ=p.prev;p.nextZ=p.next;p=p.next;}while(p!==start);p.prevZ.nextZ=null;p.prevZ=null;sortLinked(p);}// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list){var i,p,q,e,tail,numMerges,pSize,qSize,inSize=1;do{p=list;list=null;tail=null;numMerges=0;while(p){numMerges++;q=p;pSize=0;for(i=0;i<inSize;i++){pSize++;q=q.nextZ;if(!q)break;}qSize=inSize;while(pSize>0||qSize>0&&q){if(pSize!==0&&(qSize===0||!q||p.z<=q.z)){e=p;p=p.nextZ;pSize--;}else {e=q;q=q.nextZ;qSize--;}if(tail)tail.nextZ=e;else list=e;e.prevZ=tail;tail=e;}p=q;}tail.nextZ=null;inSize*=2;}while(numMerges>1);return list;}// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x,y,minX,minY,invSize){// coords are transformed into non-negative 15-bit integer range
x=32767*(x-minX)*invSize;y=32767*(y-minY)*invSize;x=(x|x<<8)&0x00FF00FF;x=(x|x<<4)&0x0F0F0F0F;x=(x|x<<2)&0x33333333;x=(x|x<<1)&0x55555555;y=(y|y<<8)&0x00FF00FF;y=(y|y<<4)&0x0F0F0F0F;y=(y|y<<2)&0x33333333;y=(y|y<<1)&0x55555555;return x|y<<1;}// find the leftmost node of a polygon ring
function getLeftmost(start){var p=start,leftmost=start;do{if(p.x<leftmost.x||p.x===leftmost.x&&p.y<leftmost.y)leftmost=p;p=p.next;}while(p!==start);return leftmost;}// check if a point lies within a convex triangle
function pointInTriangle(ax,ay,bx,by,cx,cy,px,py){return (cx-px)*(ay-py)-(ax-px)*(cy-py)>=0&&(ax-px)*(by-py)-(bx-px)*(ay-py)>=0&&(bx-px)*(cy-py)-(cx-px)*(by-py)>=0;}// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!intersectsPolygon(a,b)&&locallyInside(a,b)&&locallyInside(b,a)&&middleInside(a,b);}// signed area of a triangle
function area(p,q,r){return (q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);}// check if two points are equal
function equals(p1,p2){return p1.x===p2.x&&p1.y===p2.y;}// check if two segments intersect
function intersects(p1,q1,p2,q2){if(equals(p1,p2)&&equals(q1,q2)||equals(p1,q2)&&equals(p2,q1))return true;return area(p1,q1,p2)>0!==area(p1,q1,q2)>0&&area(p2,q2,p1)>0!==area(p2,q2,q1)>0;}// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a,b){var p=a;do{if(p.i!==a.i&&p.next.i!==a.i&&p.i!==b.i&&p.next.i!==b.i&&intersects(p,p.next,a,b))return true;p=p.next;}while(p!==a);return false;}// check if a polygon diagonal is locally inside the polygon
function locallyInside(a,b){return area(a.prev,a,a.next)<0?area(a,b,a.next)>=0&&area(a,a.prev,b)>=0:area(a,b,a.prev)<0||area(a,a.next,b)<0;}// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a,b){var p=a,inside=false,px=(a.x+b.x)/2,py=(a.y+b.y)/2;do{if(p.y>py!==p.next.y>py&&p.next.y!==p.y&&px<(p.next.x-p.x)*(py-p.y)/(p.next.y-p.y)+p.x)inside=!inside;p=p.next;}while(p!==a);return inside;}// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a,b){var a2=new Node(a.i,a.x,a.y),b2=new Node(b.i,b.x,b.y),an=a.next,bp=b.prev;a.next=b;b.prev=a;a2.next=an;an.prev=a2;b2.next=a2;a2.prev=b2;bp.next=b2;b2.prev=bp;return b2;}// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i,x,y,last){var p=new Node(i,x,y);if(!last){p.prev=p;p.next=p;}else {p.next=last.next;p.prev=last;last.next.prev=p;last.next=p;}return p;}function removeNode(p){p.next.prev=p.prev;p.prev.next=p.next;if(p.prevZ)p.prevZ.nextZ=p.nextZ;if(p.nextZ)p.nextZ.prevZ=p.prevZ;}function Node(i,x,y){// vertex index in coordinates array
this.i=i;// vertex coordinates
this.x=x;this.y=y;// previous and next vertex nodes in a polygon ring
this.prev=null;this.next=null;// z-order curve value
this.z=null;// previous and next nodes in z-order
this.prevZ=null;this.nextZ=null;// indicates whether this is a steiner point
this.steiner=false;}function signedArea(data,start,end,dim){var sum=0;for(var i=start,j=end-dim;i<end;i+=dim){sum+=(data[j]-data[i])*(data[i+1]+data[j+1]);j=i;}return sum;}/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */var ShapeUtils={// calculate area of the contour polygon
area:function area(contour){var n=contour.length;var a=0.0;for(var p=n-1,q=0;q<n;p=q++){a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;}return a*0.5;},isClockWise:function isClockWise(pts){return ShapeUtils.area(pts)<0;},triangulateShape:function triangulateShape(contour,holes){var vertices=[];// flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
var holeIndices=[];// array of hole indices
var faces=[];// final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
removeDupEndPts(contour);addContour(vertices,contour);//
var holeIndex=contour.length;holes.forEach(removeDupEndPts);for(var i=0;i<holes.length;i++){holeIndices.push(holeIndex);holeIndex+=holes[i].length;addContour(vertices,holes[i]);}//
var triangles=Earcut.triangulate(vertices,holeIndices);//
for(var i=0;i<triangles.length;i+=3){faces.push(triangles.slice(i,i+3));}return faces;}};function removeDupEndPts(points){var l=points.length;if(l>2&&points[l-1].equals(points[0])){points.pop();}}function addContour(vertices,contour){for(var i=0;i<contour.length;i++){vertices.push(contour[i].x);vertices.push(contour[i].y);}}/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */ // ExtrudeGeometry
function ExtrudeGeometry(shapes,options){Geometry.call(this);this.type='ExtrudeGeometry';this.parameters={shapes:shapes,options:options};this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes,options));this.mergeVertices();}ExtrudeGeometry.prototype=Object.create(Geometry.prototype);ExtrudeGeometry.prototype.constructor=ExtrudeGeometry;ExtrudeGeometry.prototype.toJSON=function(){var data=Geometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;var options=this.parameters.options;return toJSON(shapes,options,data);};// ExtrudeBufferGeometry
function ExtrudeBufferGeometry(shapes,options){BufferGeometry.call(this);this.type='ExtrudeBufferGeometry';this.parameters={shapes:shapes,options:options};shapes=Array.isArray(shapes)?shapes:[shapes];var scope=this;var verticesArray=[];var uvArray=[];for(var i=0,l=shapes.length;i<l;i++){var shape=shapes[i];addShape(shape);}// build geometry
this.setAttribute('position',new Float32BufferAttribute(verticesArray,3));this.setAttribute('uv',new Float32BufferAttribute(uvArray,2));this.computeVertexNormals();// functions
function addShape(shape){var placeholder=[];// options
var curveSegments=options.curveSegments!==undefined?options.curveSegments:12;var steps=options.steps!==undefined?options.steps:1;var depth=options.depth!==undefined?options.depth:100;var bevelEnabled=options.bevelEnabled!==undefined?options.bevelEnabled:true;var bevelThickness=options.bevelThickness!==undefined?options.bevelThickness:6;var bevelSize=options.bevelSize!==undefined?options.bevelSize:bevelThickness-2;var bevelOffset=options.bevelOffset!==undefined?options.bevelOffset:0;var bevelSegments=options.bevelSegments!==undefined?options.bevelSegments:3;var extrudePath=options.extrudePath;var uvgen=options.UVGenerator!==undefined?options.UVGenerator:WorldUVGenerator;// deprecated options
if(options.amount!==undefined){console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');depth=options.amount;}//
var extrudePts,extrudeByPath=false;var splineTube,binormal,normal,position2;if(extrudePath){extrudePts=extrudePath.getSpacedPoints(steps);extrudeByPath=true;bevelEnabled=false;// bevels not supported for path extrusion
// SETUP TNB variables
// TODO1 - have a .isClosed in spline?
splineTube=extrudePath.computeFrenetFrames(steps,false);// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
binormal=new Vector3();normal=new Vector3();position2=new Vector3();}// Safeguards if bevels are not enabled
if(!bevelEnabled){bevelSegments=0;bevelThickness=0;bevelSize=0;bevelOffset=0;}// Variables initialization
var ahole,h,hl;// looping of holes
var shapePoints=shape.extractPoints(curveSegments);var vertices=shapePoints.shape;var holes=shapePoints.holes;var reverse=!ShapeUtils.isClockWise(vertices);if(reverse){vertices=vertices.reverse();// Maybe we should also check if holes are in the opposite direction, just to be safe ...
for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];if(ShapeUtils.isClockWise(ahole)){holes[h]=ahole.reverse();}}}var faces=ShapeUtils.triangulateShape(vertices,holes);/* Vertices */var contour=vertices;// vertices has all points but contour has only points of circumference
for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];vertices=vertices.concat(ahole);}function scalePt2(pt,vec,size){if(!vec)console.error("THREE.ExtrudeGeometry: vec does not exist");return vec.clone().multiplyScalar(size).add(pt);}var b,bs,t,z,vert,vlen=vertices.length,face,flen=faces.length;// Find directions for point movement
function getBevelVec(inPt,inPrev,inNext){// computes for inPt the corresponding point inPt' on a new contour
//   shifted by 1 unit (length of normalized vector) to the left
// if we walk along contour clockwise, this new contour is outside the old one
//
// inPt' is the intersection of the two lines parallel to the two
//  adjacent edges of inPt at a distance of 1 unit on the left side.
var v_trans_x,v_trans_y,shrink_by;// resulting translation vector for inPt
// good reading for geometry algorithms (here: line-line intersection)
// http://geomalgorithms.com/a05-_intersect-1.html
var v_prev_x=inPt.x-inPrev.x,v_prev_y=inPt.y-inPrev.y;var v_next_x=inNext.x-inPt.x,v_next_y=inNext.y-inPt.y;var v_prev_lensq=v_prev_x*v_prev_x+v_prev_y*v_prev_y;// check for collinear edges
var collinear0=v_prev_x*v_next_y-v_prev_y*v_next_x;if(Math.abs(collinear0)>Number.EPSILON){// not collinear
// length of vectors for normalizing
var v_prev_len=Math.sqrt(v_prev_lensq);var v_next_len=Math.sqrt(v_next_x*v_next_x+v_next_y*v_next_y);// shift adjacent points by unit vectors to the left
var ptPrevShift_x=inPrev.x-v_prev_y/v_prev_len;var ptPrevShift_y=inPrev.y+v_prev_x/v_prev_len;var ptNextShift_x=inNext.x-v_next_y/v_next_len;var ptNextShift_y=inNext.y+v_next_x/v_next_len;// scaling factor for v_prev to intersection point
var sf=((ptNextShift_x-ptPrevShift_x)*v_next_y-(ptNextShift_y-ptPrevShift_y)*v_next_x)/(v_prev_x*v_next_y-v_prev_y*v_next_x);// vector from inPt to intersection point
v_trans_x=ptPrevShift_x+v_prev_x*sf-inPt.x;v_trans_y=ptPrevShift_y+v_prev_y*sf-inPt.y;// Don't normalize!, otherwise sharp corners become ugly
//  but prevent crazy spikes
var v_trans_lensq=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(v_trans_lensq<=2){return new Vector2(v_trans_x,v_trans_y);}else {shrink_by=Math.sqrt(v_trans_lensq/2);}}else {// handle special case of collinear edges
var direction_eq=false;// assumes: opposite
if(v_prev_x>Number.EPSILON){if(v_next_x>Number.EPSILON){direction_eq=true;}}else {if(v_prev_x<-Number.EPSILON){if(v_next_x<-Number.EPSILON){direction_eq=true;}}else {if(Math.sign(v_prev_y)===Math.sign(v_next_y)){direction_eq=true;}}}if(direction_eq){// console.log("Warning: lines are a straight sequence");
v_trans_x=-v_prev_y;v_trans_y=v_prev_x;shrink_by=Math.sqrt(v_prev_lensq);}else {// console.log("Warning: lines are a straight spike");
v_trans_x=v_prev_x;v_trans_y=v_prev_y;shrink_by=Math.sqrt(v_prev_lensq/2);}}return new Vector2(v_trans_x/shrink_by,v_trans_y/shrink_by);}var contourMovements=[];for(var i=0,il=contour.length,j=il-1,k=i+1;i<il;i++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)
// console.log('i,j,k', i, j , k)
contourMovements[i]=getBevelVec(contour[i],contour[j],contour[k]);}var holesMovements=[],oneHoleMovements,verticesMovements=contourMovements.concat();for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];oneHoleMovements=[];for(i=0,il=ahole.length,j=il-1,k=i+1;i<il;i++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)
oneHoleMovements[i]=getBevelVec(ahole[i],ahole[j],ahole[k]);}holesMovements.push(oneHoleMovements);verticesMovements=verticesMovements.concat(oneHoleMovements);}// Loop bevelSegments, 1 for the front, 1 for the back
for(b=0;b<bevelSegments;b++){//for ( b = bevelSegments; b > 0; b -- ) {
t=b/bevelSegments;z=bevelThickness*Math.cos(t*Math.PI/2);bs=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;// contract shape
for(i=0,il=contour.length;i<il;i++){vert=scalePt2(contour[i],contourMovements[i],bs);v(vert.x,vert.y,-z);}// expand holes
for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];oneHoleMovements=holesMovements[h];for(i=0,il=ahole.length;i<il;i++){vert=scalePt2(ahole[i],oneHoleMovements[i],bs);v(vert.x,vert.y,-z);}}}bs=bevelSize+bevelOffset;// Back facing vertices
for(i=0;i<vlen;i++){vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];if(!extrudeByPath){v(vert.x,vert.y,0);}else {// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);position2.copy(extrudePts[0]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}// Add stepped vertices...
// Including front facing vertices
var s;for(s=1;s<=steps;s++){for(i=0;i<vlen;i++){vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];if(!extrudeByPath){v(vert.x,vert.y,depth/steps*s);}else {// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);position2.copy(extrudePts[s]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}}// Add bevel segments planes
//for ( b = 1; b <= bevelSegments; b ++ ) {
for(b=bevelSegments-1;b>=0;b--){t=b/bevelSegments;z=bevelThickness*Math.cos(t*Math.PI/2);bs=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;// contract shape
for(i=0,il=contour.length;i<il;i++){vert=scalePt2(contour[i],contourMovements[i],bs);v(vert.x,vert.y,depth+z);}// expand holes
for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];oneHoleMovements=holesMovements[h];for(i=0,il=ahole.length;i<il;i++){vert=scalePt2(ahole[i],oneHoleMovements[i],bs);if(!extrudeByPath){v(vert.x,vert.y,depth+z);}else {v(vert.x,vert.y+extrudePts[steps-1].y,extrudePts[steps-1].x+z);}}}}/* Faces */ // Top and bottom faces
buildLidFaces();// Sides faces
buildSideFaces();/////  Internal functions
function buildLidFaces(){var start=verticesArray.length/3;if(bevelEnabled){var layer=0;// steps + 1
var offset=vlen*layer;// Bottom faces
for(i=0;i<flen;i++){face=faces[i];f3(face[2]+offset,face[1]+offset,face[0]+offset);}layer=steps+bevelSegments*2;offset=vlen*layer;// Top faces
for(i=0;i<flen;i++){face=faces[i];f3(face[0]+offset,face[1]+offset,face[2]+offset);}}else {// Bottom faces
for(i=0;i<flen;i++){face=faces[i];f3(face[2],face[1],face[0]);}// Top faces
for(i=0;i<flen;i++){face=faces[i];f3(face[0]+vlen*steps,face[1]+vlen*steps,face[2]+vlen*steps);}}scope.addGroup(start,verticesArray.length/3-start,0);}// Create faces for the z-sides of the shape
function buildSideFaces(){var start=verticesArray.length/3;var layeroffset=0;sidewalls(contour,layeroffset);layeroffset+=contour.length;for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];sidewalls(ahole,layeroffset);//, true
layeroffset+=ahole.length;}scope.addGroup(start,verticesArray.length/3-start,1);}function sidewalls(contour,layeroffset){var j,k;i=contour.length;while(--i>=0){j=i;k=i-1;if(k<0)k=contour.length-1;//console.log('b', i,j, i-1, k,vertices.length);
var s=0,sl=steps+bevelSegments*2;for(s=0;s<sl;s++){var slen1=vlen*s;var slen2=vlen*(s+1);var a=layeroffset+j+slen1,b=layeroffset+k+slen1,c=layeroffset+k+slen2,d=layeroffset+j+slen2;f4(a,b,c,d);}}}function v(x,y,z){placeholder.push(x);placeholder.push(y);placeholder.push(z);}function f3(a,b,c){addVertex(a);addVertex(b);addVertex(c);var nextIndex=verticesArray.length/3;var uvs=uvgen.generateTopUV(scope,verticesArray,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[2]);}function f4(a,b,c,d){addVertex(a);addVertex(b);addVertex(d);addVertex(b);addVertex(c);addVertex(d);var nextIndex=verticesArray.length/3;var uvs=uvgen.generateSideWallUV(scope,verticesArray,nextIndex-6,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[3]);addUV(uvs[1]);addUV(uvs[2]);addUV(uvs[3]);}function addVertex(index){verticesArray.push(placeholder[index*3+0]);verticesArray.push(placeholder[index*3+1]);verticesArray.push(placeholder[index*3+2]);}function addUV(vector2){uvArray.push(vector2.x);uvArray.push(vector2.y);}}}ExtrudeBufferGeometry.prototype=Object.create(BufferGeometry.prototype);ExtrudeBufferGeometry.prototype.constructor=ExtrudeBufferGeometry;ExtrudeBufferGeometry.prototype.toJSON=function(){var data=BufferGeometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;var options=this.parameters.options;return toJSON(shapes,options,data);};//
var WorldUVGenerator={generateTopUV:function generateTopUV(geometry,vertices,indexA,indexB,indexC){var a_x=vertices[indexA*3];var a_y=vertices[indexA*3+1];var b_x=vertices[indexB*3];var b_y=vertices[indexB*3+1];var c_x=vertices[indexC*3];var c_y=vertices[indexC*3+1];return [new Vector2(a_x,a_y),new Vector2(b_x,b_y),new Vector2(c_x,c_y)];},generateSideWallUV:function generateSideWallUV(geometry,vertices,indexA,indexB,indexC,indexD){var a_x=vertices[indexA*3];var a_y=vertices[indexA*3+1];var a_z=vertices[indexA*3+2];var b_x=vertices[indexB*3];var b_y=vertices[indexB*3+1];var b_z=vertices[indexB*3+2];var c_x=vertices[indexC*3];var c_y=vertices[indexC*3+1];var c_z=vertices[indexC*3+2];var d_x=vertices[indexD*3];var d_y=vertices[indexD*3+1];var d_z=vertices[indexD*3+2];if(Math.abs(a_y-b_y)<0.01){return [new Vector2(a_x,1-a_z),new Vector2(b_x,1-b_z),new Vector2(c_x,1-c_z),new Vector2(d_x,1-d_z)];}else {return [new Vector2(a_y,1-a_z),new Vector2(b_y,1-b_z),new Vector2(c_y,1-c_z),new Vector2(d_y,1-d_z)];}}};function toJSON(shapes,options,data){//
data.shapes=[];if(Array.isArray(shapes)){for(var i=0,l=shapes.length;i<l;i++){var shape=shapes[i];data.shapes.push(shape.uuid);}}else {data.shapes.push(shapes.uuid);}//
if(options.extrudePath!==undefined)data.options.extrudePath=options.extrudePath.toJSON();return data;}/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
 *  bevelOffset: <float> // how far from text outline does bevel start
 * }
 */ // TextGeometry
function TextGeometry(text,parameters){Geometry.call(this);this.type='TextGeometry';this.parameters={text:text,parameters:parameters};this.fromBufferGeometry(new TextBufferGeometry(text,parameters));this.mergeVertices();}TextGeometry.prototype=Object.create(Geometry.prototype);TextGeometry.prototype.constructor=TextGeometry;// TextBufferGeometry
function TextBufferGeometry(text,parameters){parameters=parameters||{};var font=parameters.font;if(!(font&&font.isFont)){console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');return new Geometry();}var shapes=font.generateShapes(text,parameters.size);// translate parameters to ExtrudeGeometry API
parameters.depth=parameters.height!==undefined?parameters.height:50;// defaults
if(parameters.bevelThickness===undefined)parameters.bevelThickness=10;if(parameters.bevelSize===undefined)parameters.bevelSize=8;if(parameters.bevelEnabled===undefined)parameters.bevelEnabled=false;ExtrudeBufferGeometry.call(this,shapes,parameters);this.type='TextBufferGeometry';}TextBufferGeometry.prototype=Object.create(ExtrudeBufferGeometry.prototype);TextBufferGeometry.prototype.constructor=TextBufferGeometry;/**
 * @author mrdoob / http://mrdoob.com/
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 */ // SphereGeometry
function SphereGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength){Geometry.call(this);this.type='SphereGeometry';this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new SphereBufferGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength));this.mergeVertices();}SphereGeometry.prototype=Object.create(Geometry.prototype);SphereGeometry.prototype.constructor=SphereGeometry;// SphereBufferGeometry
function SphereBufferGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength){BufferGeometry.call(this);this.type='SphereBufferGeometry';this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength};radius=radius||1;widthSegments=Math.max(3,Math.floor(widthSegments)||8);heightSegments=Math.max(2,Math.floor(heightSegments)||6);phiStart=phiStart!==undefined?phiStart:0;phiLength=phiLength!==undefined?phiLength:Math.PI*2;thetaStart=thetaStart!==undefined?thetaStart:0;thetaLength=thetaLength!==undefined?thetaLength:Math.PI;var thetaEnd=Math.min(thetaStart+thetaLength,Math.PI);var ix,iy;var index=0;var grid=[];var vertex=new Vector3();var normal=new Vector3();// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// generate vertices, normals and uvs
for(iy=0;iy<=heightSegments;iy++){var verticesRow=[];var v=iy/heightSegments;// special case for the poles
var uOffset=0;if(iy==0&&thetaStart==0){uOffset=0.5/widthSegments;}else if(iy==heightSegments&&thetaEnd==Math.PI){uOffset=-0.5/widthSegments;}for(ix=0;ix<=widthSegments;ix++){var u=ix/widthSegments;// vertex
vertex.x=-radius*Math.cos(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);vertex.y=radius*Math.cos(thetaStart+v*thetaLength);vertex.z=radius*Math.sin(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normal.copy(vertex).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(u+uOffset,1-v);verticesRow.push(index++);}grid.push(verticesRow);}// indices
for(iy=0;iy<heightSegments;iy++){for(ix=0;ix<widthSegments;ix++){var a=grid[iy][ix+1];var b=grid[iy][ix];var c=grid[iy+1][ix];var d=grid[iy+1][ix+1];if(iy!==0||thetaStart>0)indices.push(a,b,d);if(iy!==heightSegments-1||thetaEnd<Math.PI)indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}SphereBufferGeometry.prototype=Object.create(BufferGeometry.prototype);SphereBufferGeometry.prototype.constructor=SphereBufferGeometry;/**
 * @author Kaleb Murphy
 * @author Mugen87 / https://github.com/Mugen87
 */ // RingGeometry
function RingGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){Geometry.call(this);this.type='RingGeometry';this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new RingBufferGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength));this.mergeVertices();}RingGeometry.prototype=Object.create(Geometry.prototype);RingGeometry.prototype.constructor=RingGeometry;// RingBufferGeometry
function RingBufferGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){BufferGeometry.call(this);this.type='RingBufferGeometry';this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength};innerRadius=innerRadius||0.5;outerRadius=outerRadius||1;thetaStart=thetaStart!==undefined?thetaStart:0;thetaLength=thetaLength!==undefined?thetaLength:Math.PI*2;thetaSegments=thetaSegments!==undefined?Math.max(3,thetaSegments):8;phiSegments=phiSegments!==undefined?Math.max(1,phiSegments):1;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// some helper variables
var segment;var radius=innerRadius;var radiusStep=(outerRadius-innerRadius)/phiSegments;var vertex=new Vector3();var uv=new Vector2();var j,i;// generate vertices, normals and uvs
for(j=0;j<=phiSegments;j++){for(i=0;i<=thetaSegments;i++){// values are generate from the inside of the ring to the outside
segment=thetaStart+i/thetaSegments*thetaLength;// vertex
vertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,0,1);// uv
uv.x=(vertex.x/outerRadius+1)/2;uv.y=(vertex.y/outerRadius+1)/2;uvs.push(uv.x,uv.y);}// increase the radius for next row of vertices
radius+=radiusStep;}// indices
for(j=0;j<phiSegments;j++){var thetaSegmentLevel=j*(thetaSegments+1);for(i=0;i<thetaSegments;i++){segment=i+thetaSegmentLevel;var a=segment;var b=segment+thetaSegments+1;var c=segment+thetaSegments+2;var d=segment+1;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}RingBufferGeometry.prototype=Object.create(BufferGeometry.prototype);RingBufferGeometry.prototype.constructor=RingBufferGeometry;/**
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://clara.io
 * @author Mugen87 / https://github.com/Mugen87
 */ // LatheGeometry
function LatheGeometry(points,segments,phiStart,phiLength){Geometry.call(this);this.type='LatheGeometry';this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength};this.fromBufferGeometry(new LatheBufferGeometry(points,segments,phiStart,phiLength));this.mergeVertices();}LatheGeometry.prototype=Object.create(Geometry.prototype);LatheGeometry.prototype.constructor=LatheGeometry;// LatheBufferGeometry
function LatheBufferGeometry(points,segments,phiStart,phiLength){BufferGeometry.call(this);this.type='LatheBufferGeometry';this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength};segments=Math.floor(segments)||12;phiStart=phiStart||0;phiLength=phiLength||Math.PI*2;// clamp phiLength so it's in range of [ 0, 2PI ]
phiLength=MathUtils.clamp(phiLength,0,Math.PI*2);// buffers
var indices=[];var vertices=[];var uvs=[];// helper variables
var base;var inverseSegments=1.0/segments;var vertex=new Vector3();var uv=new Vector2();var i,j;// generate vertices and uvs
for(i=0;i<=segments;i++){var phi=phiStart+i*inverseSegments*phiLength;var sin=Math.sin(phi);var cos=Math.cos(phi);for(j=0;j<=points.length-1;j++){// vertex
vertex.x=points[j].x*sin;vertex.y=points[j].y;vertex.z=points[j].x*cos;vertices.push(vertex.x,vertex.y,vertex.z);// uv
uv.x=i/segments;uv.y=j/(points.length-1);uvs.push(uv.x,uv.y);}}// indices
for(i=0;i<segments;i++){for(j=0;j<points.length-1;j++){base=j+i*points.length;var a=base;var b=base+points.length;var c=base+points.length+1;var d=base+1;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// generate normals
this.computeVertexNormals();// if the geometry is closed, we need to average the normals along the seam.
// because the corresponding vertices are identical (but still have different UVs).
if(phiLength===Math.PI*2){var normals=this.attributes.normal.array;var n1=new Vector3();var n2=new Vector3();var n=new Vector3();// this is the buffer offset for the last line of vertices
base=segments*points.length*3;for(i=0,j=0;i<points.length;i++,j+=3){// select the normal of the vertex in the first line
n1.x=normals[j+0];n1.y=normals[j+1];n1.z=normals[j+2];// select the normal of the vertex in the last line
n2.x=normals[base+j+0];n2.y=normals[base+j+1];n2.z=normals[base+j+2];// average normals
n.addVectors(n1,n2).normalize();// assign the new values to both normals
normals[j+0]=normals[base+j+0]=n.x;normals[j+1]=normals[base+j+1]=n.y;normals[j+2]=normals[base+j+2]=n.z;}}}LatheBufferGeometry.prototype=Object.create(BufferGeometry.prototype);LatheBufferGeometry.prototype.constructor=LatheBufferGeometry;/**
 * @author jonobr1 / http://jonobr1.com
 * @author Mugen87 / https://github.com/Mugen87
 */ // ShapeGeometry
function ShapeGeometry(shapes,curveSegments){Geometry.call(this);this.type='ShapeGeometry';if(_typeof$2(curveSegments)==='object'){console.warn('THREE.ShapeGeometry: Options parameter has been removed.');curveSegments=curveSegments.curveSegments;}this.parameters={shapes:shapes,curveSegments:curveSegments};this.fromBufferGeometry(new ShapeBufferGeometry(shapes,curveSegments));this.mergeVertices();}ShapeGeometry.prototype=Object.create(Geometry.prototype);ShapeGeometry.prototype.constructor=ShapeGeometry;ShapeGeometry.prototype.toJSON=function(){var data=Geometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;return toJSON$1(shapes,data);};// ShapeBufferGeometry
function ShapeBufferGeometry(shapes,curveSegments){BufferGeometry.call(this);this.type='ShapeBufferGeometry';this.parameters={shapes:shapes,curveSegments:curveSegments};curveSegments=curveSegments||12;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var groupStart=0;var groupCount=0;// allow single and array values for "shapes" parameter
if(Array.isArray(shapes)===false){addShape(shapes);}else {for(var i=0;i<shapes.length;i++){addShape(shapes[i]);this.addGroup(groupStart,groupCount,i);// enables MultiMaterial support
groupStart+=groupCount;groupCount=0;}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// helper functions
function addShape(shape){var i,l,shapeHole;var indexOffset=vertices.length/3;var points=shape.extractPoints(curveSegments);var shapeVertices=points.shape;var shapeHoles=points.holes;// check direction of vertices
if(ShapeUtils.isClockWise(shapeVertices)===false){shapeVertices=shapeVertices.reverse();}for(i=0,l=shapeHoles.length;i<l;i++){shapeHole=shapeHoles[i];if(ShapeUtils.isClockWise(shapeHole)===true){shapeHoles[i]=shapeHole.reverse();}}var faces=ShapeUtils.triangulateShape(shapeVertices,shapeHoles);// join vertices of inner and outer paths to a single array
for(i=0,l=shapeHoles.length;i<l;i++){shapeHole=shapeHoles[i];shapeVertices=shapeVertices.concat(shapeHole);}// vertices, normals, uvs
for(i=0,l=shapeVertices.length;i<l;i++){var vertex=shapeVertices[i];vertices.push(vertex.x,vertex.y,0);normals.push(0,0,1);uvs.push(vertex.x,vertex.y);// world uvs
}// incides
for(i=0,l=faces.length;i<l;i++){var face=faces[i];var a=face[0]+indexOffset;var b=face[1]+indexOffset;var c=face[2]+indexOffset;indices.push(a,b,c);groupCount+=3;}}}ShapeBufferGeometry.prototype=Object.create(BufferGeometry.prototype);ShapeBufferGeometry.prototype.constructor=ShapeBufferGeometry;ShapeBufferGeometry.prototype.toJSON=function(){var data=BufferGeometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;return toJSON$1(shapes,data);};//
function toJSON$1(shapes,data){data.shapes=[];if(Array.isArray(shapes)){for(var i=0,l=shapes.length;i<l;i++){var shape=shapes[i];data.shapes.push(shape.uuid);}}else {data.shapes.push(shapes.uuid);}return data;}/**
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */function EdgesGeometry(geometry,thresholdAngle){BufferGeometry.call(this);this.type='EdgesGeometry';this.parameters={thresholdAngle:thresholdAngle};thresholdAngle=thresholdAngle!==undefined?thresholdAngle:1;// buffer
var vertices=[];// helper variables
var thresholdDot=Math.cos(MathUtils.DEG2RAD*thresholdAngle);var edge=[0,0],edges={},edge1,edge2;var key,keys=['a','b','c'];// prepare source geometry
var geometry2;if(geometry.isBufferGeometry){geometry2=new Geometry();geometry2.fromBufferGeometry(geometry);}else {geometry2=geometry.clone();}geometry2.mergeVertices();geometry2.computeFaceNormals();var sourceVertices=geometry2.vertices;var faces=geometry2.faces;// now create a data structure where each entry represents an edge with its adjoining faces
for(var i=0,l=faces.length;i<l;i++){var face=faces[i];for(var j=0;j<3;j++){edge1=face[keys[j]];edge2=face[keys[(j+1)%3]];edge[0]=Math.min(edge1,edge2);edge[1]=Math.max(edge1,edge2);key=edge[0]+','+edge[1];if(edges[key]===undefined){edges[key]={index1:edge[0],index2:edge[1],face1:i,face2:undefined};}else {edges[key].face2=i;}}}// generate vertices
for(key in edges){var e=edges[key];// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.
if(e.face2===undefined||faces[e.face1].normal.dot(faces[e.face2].normal)<=thresholdDot){var vertex=sourceVertices[e.index1];vertices.push(vertex.x,vertex.y,vertex.z);vertex=sourceVertices[e.index2];vertices.push(vertex.x,vertex.y,vertex.z);}}// build geometry
this.setAttribute('position',new Float32BufferAttribute(vertices,3));}EdgesGeometry.prototype=Object.create(BufferGeometry.prototype);EdgesGeometry.prototype.constructor=EdgesGeometry;/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */ // CylinderGeometry
function CylinderGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){Geometry.call(this);this.type='CylinderGeometry';this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength));this.mergeVertices();}CylinderGeometry.prototype=Object.create(Geometry.prototype);CylinderGeometry.prototype.constructor=CylinderGeometry;// CylinderBufferGeometry
function CylinderBufferGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){BufferGeometry.call(this);this.type='CylinderBufferGeometry';this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};var scope=this;radiusTop=radiusTop!==undefined?radiusTop:1;radiusBottom=radiusBottom!==undefined?radiusBottom:1;height=height||1;radialSegments=Math.floor(radialSegments)||8;heightSegments=Math.floor(heightSegments)||1;openEnded=openEnded!==undefined?openEnded:false;thetaStart=thetaStart!==undefined?thetaStart:0.0;thetaLength=thetaLength!==undefined?thetaLength:Math.PI*2;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var index=0;var indexArray=[];var halfHeight=height/2;var groupStart=0;// generate geometry
generateTorso();if(openEnded===false){if(radiusTop>0)generateCap(true);if(radiusBottom>0)generateCap(false);}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));function generateTorso(){var x,y;var normal=new Vector3();var vertex=new Vector3();var groupCount=0;// this will be used to calculate the normal
var slope=(radiusBottom-radiusTop)/height;// generate vertices, normals and uvs
for(y=0;y<=heightSegments;y++){var indexRow=[];var v=y/heightSegments;// calculate the radius of the current row
var radius=v*(radiusBottom-radiusTop)+radiusTop;for(x=0;x<=radialSegments;x++){var u=x/radialSegments;var theta=u*thetaLength+thetaStart;var sinTheta=Math.sin(theta);var cosTheta=Math.cos(theta);// vertex
vertex.x=radius*sinTheta;vertex.y=-v*height+halfHeight;vertex.z=radius*cosTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal
normal.set(sinTheta,slope,cosTheta).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(u,1-v);// save index of vertex in respective row
indexRow.push(index++);}// now save vertices of the row in our index array
indexArray.push(indexRow);}// generate indices
for(x=0;x<radialSegments;x++){for(y=0;y<heightSegments;y++){// we use the index array to access the correct indices
var a=indexArray[y][x];var b=indexArray[y+1][x];var c=indexArray[y+1][x+1];var d=indexArray[y][x+1];// faces
indices.push(a,b,d);indices.push(b,c,d);// update group counter
groupCount+=6;}}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,0);// calculate new start value for groups
groupStart+=groupCount;}function generateCap(top){var x,centerIndexStart,centerIndexEnd;var uv=new Vector2();var vertex=new Vector3();var groupCount=0;var radius=top===true?radiusTop:radiusBottom;var sign=top===true?1:-1;// save the index of the first center vertex
centerIndexStart=index;// first we generate the center vertex data of the cap.
// because the geometry needs one set of uvs per face,
// we must generate a center vertex per face/segment
for(x=1;x<=radialSegments;x++){// vertex
vertices.push(0,halfHeight*sign,0);// normal
normals.push(0,sign,0);// uv
uvs.push(0.5,0.5);// increase index
index++;}// save the index of the last center vertex
centerIndexEnd=index;// now we generate the surrounding vertices, normals and uvs
for(x=0;x<=radialSegments;x++){var u=x/radialSegments;var theta=u*thetaLength+thetaStart;var cosTheta=Math.cos(theta);var sinTheta=Math.sin(theta);// vertex
vertex.x=radius*sinTheta;vertex.y=halfHeight*sign;vertex.z=radius*cosTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,sign,0);// uv
uv.x=cosTheta*0.5+0.5;uv.y=sinTheta*0.5*sign+0.5;uvs.push(uv.x,uv.y);// increase index
index++;}// generate indices
for(x=0;x<radialSegments;x++){var c=centerIndexStart+x;var i=centerIndexEnd+x;if(top===true){// face top
indices.push(i,i+1,c);}else {// face bottom
indices.push(i+1,i,c);}groupCount+=3;}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,top===true?1:2);// calculate new start value for groups
groupStart+=groupCount;}}CylinderBufferGeometry.prototype=Object.create(BufferGeometry.prototype);CylinderBufferGeometry.prototype.constructor=CylinderBufferGeometry;/**
 * @author abelnation / http://github.com/abelnation
 */ // ConeGeometry
function ConeGeometry(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){CylinderGeometry.call(this,0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength);this.type='ConeGeometry';this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};}ConeGeometry.prototype=Object.create(CylinderGeometry.prototype);ConeGeometry.prototype.constructor=ConeGeometry;// ConeBufferGeometry
function ConeBufferGeometry(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){CylinderBufferGeometry.call(this,0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength);this.type='ConeBufferGeometry';this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};}ConeBufferGeometry.prototype=Object.create(CylinderBufferGeometry.prototype);ConeBufferGeometry.prototype.constructor=ConeBufferGeometry;/**
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 * @author hughes
 */ // CircleGeometry
function CircleGeometry(radius,segments,thetaStart,thetaLength){Geometry.call(this);this.type='CircleGeometry';this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new CircleBufferGeometry(radius,segments,thetaStart,thetaLength));this.mergeVertices();}CircleGeometry.prototype=Object.create(Geometry.prototype);CircleGeometry.prototype.constructor=CircleGeometry;// CircleBufferGeometry
function CircleBufferGeometry(radius,segments,thetaStart,thetaLength){BufferGeometry.call(this);this.type='CircleBufferGeometry';this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength};radius=radius||1;segments=segments!==undefined?Math.max(3,segments):8;thetaStart=thetaStart!==undefined?thetaStart:0;thetaLength=thetaLength!==undefined?thetaLength:Math.PI*2;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var i,s;var vertex=new Vector3();var uv=new Vector2();// center point
vertices.push(0,0,0);normals.push(0,0,1);uvs.push(0.5,0.5);for(s=0,i=3;s<=segments;s++,i+=3){var segment=thetaStart+s/segments*thetaLength;// vertex
vertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,0,1);// uvs
uv.x=(vertices[i]/radius+1)/2;uv.y=(vertices[i+1]/radius+1)/2;uvs.push(uv.x,uv.y);}// indices
for(i=1;i<=segments;i++){indices.push(i,i+1,0);}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}CircleBufferGeometry.prototype=Object.create(BufferGeometry.prototype);CircleBufferGeometry.prototype.constructor=CircleBufferGeometry;var Geometries=/*#__PURE__*/Object.freeze({__proto__:null,WireframeGeometry:WireframeGeometry,ParametricGeometry:ParametricGeometry,ParametricBufferGeometry:ParametricBufferGeometry,TetrahedronGeometry:TetrahedronGeometry,TetrahedronBufferGeometry:TetrahedronBufferGeometry,OctahedronGeometry:OctahedronGeometry,OctahedronBufferGeometry:OctahedronBufferGeometry,IcosahedronGeometry:IcosahedronGeometry,IcosahedronBufferGeometry:IcosahedronBufferGeometry,DodecahedronGeometry:DodecahedronGeometry,DodecahedronBufferGeometry:DodecahedronBufferGeometry,PolyhedronGeometry:PolyhedronGeometry,PolyhedronBufferGeometry:PolyhedronBufferGeometry,TubeGeometry:TubeGeometry,TubeBufferGeometry:TubeBufferGeometry,TorusKnotGeometry:TorusKnotGeometry,TorusKnotBufferGeometry:TorusKnotBufferGeometry,TorusGeometry:TorusGeometry,TorusBufferGeometry:TorusBufferGeometry,TextGeometry:TextGeometry,TextBufferGeometry:TextBufferGeometry,SphereGeometry:SphereGeometry,SphereBufferGeometry:SphereBufferGeometry,RingGeometry:RingGeometry,RingBufferGeometry:RingBufferGeometry,PlaneGeometry:PlaneGeometry,PlaneBufferGeometry:PlaneBufferGeometry,LatheGeometry:LatheGeometry,LatheBufferGeometry:LatheBufferGeometry,ShapeGeometry:ShapeGeometry,ShapeBufferGeometry:ShapeBufferGeometry,ExtrudeGeometry:ExtrudeGeometry,ExtrudeBufferGeometry:ExtrudeBufferGeometry,EdgesGeometry:EdgesGeometry,ConeGeometry:ConeGeometry,ConeBufferGeometry:ConeBufferGeometry,CylinderGeometry:CylinderGeometry,CylinderBufferGeometry:CylinderBufferGeometry,CircleGeometry:CircleGeometry,CircleBufferGeometry:CircleBufferGeometry,BoxGeometry:BoxGeometry,BoxBufferGeometry:BoxBufferGeometry});/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  color: <THREE.Color>
 * }
 */function ShadowMaterial(parameters){Material.call(this);this.type='ShadowMaterial';this.color=new Color(0x000000);this.transparent=true;this.setValues(parameters);}ShadowMaterial.prototype=Object.create(Material.prototype);ShadowMaterial.prototype.constructor=ShadowMaterial;ShadowMaterial.prototype.isShadowMaterial=true;ShadowMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);return this;};/**
 * @author mrdoob / http://mrdoob.com/
 */function RawShaderMaterial(parameters){ShaderMaterial.call(this,parameters);this.type='RawShaderMaterial';}RawShaderMaterial.prototype=Object.create(ShaderMaterial.prototype);RawShaderMaterial.prototype.constructor=RawShaderMaterial;RawShaderMaterial.prototype.isRawShaderMaterial=true;/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */function MeshStandardMaterial(parameters){Material.call(this);this.defines={'STANDARD':''};this.type='MeshStandardMaterial';this.color=new Color(0xffffff);// diffuse
this.roughness=1.0;this.metalness=0.0;this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapIntensity=1.0;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshStandardMaterial.prototype=Object.create(Material.prototype);MeshStandardMaterial.prototype.constructor=MeshStandardMaterial;MeshStandardMaterial.prototype.isMeshStandardMaterial=true;MeshStandardMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.defines={'STANDARD':''};this.color.copy(source.color);this.roughness=source.roughness;this.metalness=source.metalness;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.roughnessMap=source.roughnessMap;this.metalnessMap=source.metalnessMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapIntensity=source.envMapIntensity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  reflectivity: <float>
 *  clearcoat: <float>
 *  clearcoatRoughness: <float>
 *
 *  sheen: <Color>
 *
 *  clearcoatNormalScale: <Vector2>,
 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
 * }
 */function MeshPhysicalMaterial(parameters){MeshStandardMaterial.call(this);this.defines={'STANDARD':'','PHYSICAL':''};this.type='MeshPhysicalMaterial';this.reflectivity=0.5;// maps to F0 = 0.04
this.clearcoat=0.0;this.clearcoatRoughness=0.0;this.sheen=null;// null will disable sheen bsdf
this.clearcoatNormalScale=new Vector2(1,1);this.clearcoatNormalMap=null;this.transparency=0.0;this.setValues(parameters);}MeshPhysicalMaterial.prototype=Object.create(MeshStandardMaterial.prototype);MeshPhysicalMaterial.prototype.constructor=MeshPhysicalMaterial;MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=true;MeshPhysicalMaterial.prototype.copy=function(source){MeshStandardMaterial.prototype.copy.call(this,source);this.defines={'STANDARD':'','PHYSICAL':''};this.reflectivity=source.reflectivity;this.clearcoat=source.clearcoat;this.clearcoatRoughness=source.clearcoatRoughness;if(source.sheen)this.sheen=(this.sheen||new Color()).copy(source.sheen);else this.sheen=null;this.clearcoatNormalMap=source.clearcoatNormalMap;this.clearcoatNormalScale.copy(source.clearcoatNormalScale);this.transparency=source.transparency;return this;};/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.MultiplyOperation,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */function MeshPhongMaterial(parameters){Material.call(this);this.type='MeshPhongMaterial';this.color=new Color(0xffffff);// diffuse
this.specular=new Color(0x111111);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshPhongMaterial.prototype=Object.create(Material.prototype);MeshPhongMaterial.prototype.constructor=MeshPhongMaterial;MeshPhongMaterial.prototype.isMeshPhongMaterial=true;MeshPhongMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.specular.copy(source.specular);this.shininess=source.shininess;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
 * @author takahirox / http://github.com/takahirox
 *
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *  gradientMap: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */function MeshToonMaterial(parameters){Material.call(this);this.defines={'TOON':''};this.type='MeshToonMaterial';this.color=new Color(0xffffff);this.specular=new Color(0x111111);this.shininess=30;this.map=null;this.gradientMap=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshToonMaterial.prototype=Object.create(Material.prototype);MeshToonMaterial.prototype.constructor=MeshToonMaterial;MeshToonMaterial.prototype.isMeshToonMaterial=true;MeshToonMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.specular.copy(source.specular);this.shininess=source.shininess;this.map=source.map;this.gradientMap=source.gradientMap;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */function MeshNormalMaterial(parameters){Material.call(this);this.type='MeshNormalMaterial';this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshNormalMaterial.prototype=Object.create(Material.prototype);MeshNormalMaterial.prototype.constructor=MeshNormalMaterial;MeshNormalMaterial.prototype.isMeshNormalMaterial=true;MeshNormalMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */function MeshLambertMaterial(parameters){Material.call(this);this.type='MeshLambertMaterial';this.color=new Color(0xffffff);// diffuse
this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshLambertMaterial.prototype=Object.create(Material.prototype);MeshLambertMaterial.prototype.constructor=MeshLambertMaterial;MeshLambertMaterial.prototype.isMeshLambertMaterial=true;MeshLambertMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  matcap: new THREE.Texture( <Image> ),
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */function MeshMatcapMaterial(parameters){Material.call(this);this.defines={'MATCAP':''};this.type='MeshMatcapMaterial';this.color=new Color(0xffffff);// diffuse
this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshMatcapMaterial.prototype=Object.create(Material.prototype);MeshMatcapMaterial.prototype.constructor=MeshMatcapMaterial;MeshMatcapMaterial.prototype.isMeshMatcapMaterial=true;MeshMatcapMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.defines={'MATCAP':''};this.color.copy(source.color);this.matcap=source.matcap;this.map=source.map;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */function LineDashedMaterial(parameters){LineBasicMaterial.call(this);this.type='LineDashedMaterial';this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(parameters);}LineDashedMaterial.prototype=Object.create(LineBasicMaterial.prototype);LineDashedMaterial.prototype.constructor=LineDashedMaterial;LineDashedMaterial.prototype.isLineDashedMaterial=true;LineDashedMaterial.prototype.copy=function(source){LineBasicMaterial.prototype.copy.call(this,source);this.scale=source.scale;this.dashSize=source.dashSize;this.gapSize=source.gapSize;return this;};var Materials=/*#__PURE__*/Object.freeze({__proto__:null,ShadowMaterial:ShadowMaterial,SpriteMaterial:SpriteMaterial,RawShaderMaterial:RawShaderMaterial,ShaderMaterial:ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:MeshToonMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshBasicMaterial:MeshBasicMaterial,MeshMatcapMaterial:MeshMatcapMaterial,LineDashedMaterial:LineDashedMaterial,LineBasicMaterial:LineBasicMaterial,Material:Material});/**
 * @author tschw
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */var AnimationUtils={// same as Array.prototype.slice, but also works on typed arrays
arraySlice:function arraySlice(array,from,to){if(AnimationUtils.isTypedArray(array)){// in ios9 array.subarray(from, undefined) will return empty array
// but array.subarray(from) or array.subarray(from, len) is correct
return new array.constructor(array.subarray(from,to!==undefined?to:array.length));}return array.slice(from,to);},// converts an array to a specific type
convertArray:function convertArray(array,type,forceClone){if(!array||// let 'undefined' and 'null' pass
!forceClone&&array.constructor===type)return array;if(typeof type.BYTES_PER_ELEMENT==='number'){return new type(array);// create typed array
}return Array.prototype.slice.call(array);// create Array
},isTypedArray:function isTypedArray(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView);},// returns an array by which times and values can be sorted
getKeyframeOrder:function getKeyframeOrder(times){function compareTime(i,j){return times[i]-times[j];}var n=times.length;var result=new Array(n);for(var i=0;i!==n;++i)result[i]=i;result.sort(compareTime);return result;},// uses the array previously returned by 'getKeyframeOrder' to sort data
sortedArray:function sortedArray(values,stride,order){var nValues=values.length;var result=new values.constructor(nValues);for(var i=0,dstOffset=0;dstOffset!==nValues;++i){var srcOffset=order[i]*stride;for(var j=0;j!==stride;++j){result[dstOffset++]=values[srcOffset+j];}}return result;},// function for parsing AOS keyframe formats
flattenJSON:function flattenJSON(jsonKeys,times,values,valuePropertyName){var i=1,key=jsonKeys[0];while(key!==undefined&&key[valuePropertyName]===undefined){key=jsonKeys[i++];}if(key===undefined)return;// no data
var value=key[valuePropertyName];if(value===undefined)return;// no data
if(Array.isArray(value)){do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push.apply(values,value);// push all elements
}key=jsonKeys[i++];}while(key!==undefined);}else if(value.toArray!==undefined){// ...assume THREE.Math-ish
do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);value.toArray(values,values.length);}key=jsonKeys[i++];}while(key!==undefined);}else {// otherwise push as-is
do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push(value);}key=jsonKeys[i++];}while(key!==undefined);}},subclip:function subclip(sourceClip,name,startFrame,endFrame,fps){fps=fps||30;var clip=sourceClip.clone();clip.name=name;var tracks=[];for(var i=0;i<clip.tracks.length;++i){var track=clip.tracks[i];var valueSize=track.getValueSize();var times=[];var values=[];for(var j=0;j<track.times.length;++j){var frame=track.times[j]*fps;if(frame<startFrame||frame>=endFrame)continue;times.push(track.times[j]);for(var k=0;k<valueSize;++k){values.push(track.values[j*valueSize+k]);}}if(times.length===0)continue;track.times=AnimationUtils.convertArray(times,track.times.constructor);track.values=AnimationUtils.convertArray(values,track.values.constructor);tracks.push(track);}clip.tracks=tracks;// find minimum .times value across all tracks in the trimmed clip
var minStartTime=Infinity;for(var i=0;i<clip.tracks.length;++i){if(minStartTime>clip.tracks[i].times[0]){minStartTime=clip.tracks[i].times[0];}}// shift all tracks such that clip begins at t=0
for(var i=0;i<clip.tracks.length;++i){clip.tracks[i].shift(-1*minStartTime);}clip.resetDuration();return clip;}};/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 * @author tschw
 */function Interpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){this.parameterPositions=parameterPositions;this._cachedIndex=0;this.resultBuffer=resultBuffer!==undefined?resultBuffer:new sampleValues.constructor(sampleSize);this.sampleValues=sampleValues;this.valueSize=sampleSize;}Object.assign(Interpolant.prototype,{evaluate:function evaluate(t){var pp=this.parameterPositions,i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];validate_interval:{seek:{var right;linear_scan:{//- See http://jsperf.com/comparison-to-undefined/3
//- slower code:
//-
//- 				if ( t >= t1 || t1 === undefined ) {
forward_scan:if(!(t<t1)){for(var giveUpAt=i1+2;;){if(t1===undefined){if(t<t0)break forward_scan;// after end
i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t,t0);}if(i1===giveUpAt)break;// this loop
t0=t1;t1=pp[++i1];if(t<t1){// we have arrived at the sought interval
break seek;}}// prepare binary search on the right side of the index
right=pp.length;break linear_scan;}//- slower code:
//-					if ( t < t0 || t0 === undefined ) {
if(!(t>=t0)){// looping?
var t1global=pp[1];if(t<t1global){i1=2;// + 1, using the scan for the details
t0=t1global;}// linear reverse scan
for(var giveUpAt=i1-2;;){if(t0===undefined){// before start
this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(i1===giveUpAt)break;// this loop
t1=t0;t0=pp[--i1-1];if(t>=t0){// we have arrived at the sought interval
break seek;}}// prepare binary search on the left side of the index
right=i1;i1=0;break linear_scan;}// the interval is valid
break validate_interval;}// linear scan
// binary search
while(i1<right){var mid=i1+right>>>1;if(t<pp[mid]){right=mid;}else {i1=mid+1;}}t1=pp[i1];t0=pp[i1-1];// check boundary cases, again
if(t0===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(t1===undefined){i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t0,t);}}// seek
this._cachedIndex=i1;this.intervalChanged_(i1,t0,t1);}// validate_interval
return this.interpolate_(i1,t0,t,t1);},settings:null,// optional, subclass-specific settings structure
// Note: The indirection allows central control of many interpolants.
// --- Protected interface
DefaultSettings_:{},getSettings_:function getSettings_(){return this.settings||this.DefaultSettings_;},copySampleValue_:function copySampleValue_(index){// copies a sample value to the result buffer
var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=index*stride;for(var i=0;i!==stride;++i){result[i]=values[offset+i];}return result;},// Template methods for derived classes:
interpolate_:function interpolate_(/* i1, t0, t, t1 */){throw new Error('call to abstract method');// implementations shall return this.resultBuffer
},intervalChanged_:function intervalChanged_(/* i1, t0, t1 */){// empty
}});//!\\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Interpolant.prototype,{//( 0, t, t0 ), returns this.resultBuffer
beforeStart_:Interpolant.prototype.copySampleValue_,//( N-1, tN-1, t ), returns this.resultBuffer
afterEnd_:Interpolant.prototype.copySampleValue_});/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 *
 * @author tschw
 */function CubicInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0;}CubicInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:CubicInterpolant,DefaultSettings_:{endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding},intervalChanged_:function intervalChanged_(i1,t0,t1){var pp=this.parameterPositions,iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(tPrev===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:// f'(t0) = 0
iPrev=i1;tPrev=2*t0-t1;break;case WrapAroundEnding:// use the other end of the curve
iPrev=pp.length-2;tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:// ZeroCurvatureEnding
// f''(t0) = 0 a.k.a. Natural Spline
iPrev=i1;tPrev=t1;}}if(tNext===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:// f'(tN) = 0
iNext=i1;tNext=2*t1-t0;break;case WrapAroundEnding:// use the other end of the curve
iNext=1;tNext=t1+pp[1]-pp[0];break;default:// ZeroCurvatureEnding
// f''(tN) = 0, a.k.a. Natural Spline
iNext=i1-1;tNext=t0;}}var halfDt=(t1-t0)*0.5,stride=this.valueSize;this._weightPrev=halfDt/(t0-tPrev);this._weightNext=halfDt/(tNext-t1);this._offsetPrev=iPrev*stride;this._offsetNext=iNext*stride;},interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,o1=i1*stride,o0=o1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0),pp=p*p,ppp=pp*p;// evaluate polynomials
var sP=-wP*ppp+2*wP*pp-wP*p;var s0=(1+wP)*ppp+(-1.5-2*wP)*pp+(-0.5+wP)*p+1;var s1=(-1-wN)*ppp+(1.5+wN)*pp+0.5*p;var sN=wN*ppp-wN*pp;// combine data linearly
for(var i=0;i!==stride;++i){result[i]=sP*values[oP+i]+s0*values[o0+i]+s1*values[o1+i]+sN*values[oN+i];}return result;}});/**
 * @author tschw
 */function LinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}LinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:LinearInterpolant,interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset1=i1*stride,offset0=offset1-stride,weight1=(t-t0)/(t1-t0),weight0=1-weight1;for(var i=0;i!==stride;++i){result[i]=values[offset0+i]*weight0+values[offset1+i]*weight1;}return result;}});/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 *
 * @author tschw
 */function DiscreteInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}DiscreteInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:DiscreteInterpolant,interpolate_:function interpolate_(i1/*, t0, t, t1 */){return this.copySampleValue_(i1-1);}});/**
 *
 * A timed sequence of keyframes for a specific property.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function KeyframeTrack(name,times,values,interpolation){if(name===undefined)throw new Error('THREE.KeyframeTrack: track name is undefined');if(times===undefined||times.length===0)throw new Error('THREE.KeyframeTrack: no keyframes in track named '+name);this.name=name;this.times=AnimationUtils.convertArray(times,this.TimeBufferType);this.values=AnimationUtils.convertArray(values,this.ValueBufferType);this.setInterpolation(interpolation||this.DefaultInterpolation);}// Static methods
Object.assign(KeyframeTrack,{// Serialization (in static context, because of constructor invocation
// and automatic invocation of .toJSON):
toJSON:function toJSON(track){var trackType=track.constructor;var json;// derived classes can define a static toJSON method
if(trackType.toJSON!==undefined){json=trackType.toJSON(track);}else {// by default, we assume the data can be serialized as-is
json={'name':track.name,'times':AnimationUtils.convertArray(track.times,Array),'values':AnimationUtils.convertArray(track.values,Array)};var interpolation=track.getInterpolation();if(interpolation!==track.DefaultInterpolation){json.interpolation=interpolation;}}json.type=track.ValueTypeName;// mandatory
return json;}});Object.assign(KeyframeTrack.prototype,{constructor:KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodDiscrete:function InterpolantFactoryMethodDiscrete(result){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodLinear:function InterpolantFactoryMethodLinear(result){return new LinearInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodSmooth:function InterpolantFactoryMethodSmooth(result){return new CubicInterpolant(this.times,this.values,this.getValueSize(),result);},setInterpolation:function setInterpolation(interpolation){var factoryMethod;switch(interpolation){case InterpolateDiscrete:factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth;break;}if(factoryMethod===undefined){var message="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===undefined){// fall back to default, unless the default itself is messed up
if(interpolation!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation);}else {throw new Error(message);// fatal, in this case
}}console.warn('THREE.KeyframeTrack:',message);return this;}this.createInterpolant=factoryMethod;return this;},getInterpolation:function getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth;}},getValueSize:function getValueSize(){return this.values.length/this.times.length;},// move all keyframes either forwards or backwards in time
shift:function shift(timeOffset){if(timeOffset!==0.0){var times=this.times;for(var i=0,n=times.length;i!==n;++i){times[i]+=timeOffset;}}return this;},// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
scale:function scale(timeScale){if(timeScale!==1.0){var times=this.times;for(var i=0,n=times.length;i!==n;++i){times[i]*=timeScale;}}return this;},// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
trim:function trim(startTime,endTime){var times=this.times,nKeys=times.length,from=0,to=nKeys-1;while(from!==nKeys&&times[from]<startTime){++from;}while(to!==-1&&times[to]>endTime){--to;}++to;// inclusive -> exclusive bound
if(from!==0||to!==nKeys){// empty tracks are forbidden, so keep at least one keyframe
if(from>=to)to=Math.max(to,1),from=to-1;var stride=this.getValueSize();this.times=AnimationUtils.arraySlice(times,from,to);this.values=AnimationUtils.arraySlice(this.values,from*stride,to*stride);}return this;},// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
validate:function validate(){var valid=true;var valueSize=this.getValueSize();if(valueSize-Math.floor(valueSize)!==0){console.error('THREE.KeyframeTrack: Invalid value size in track.',this);valid=false;}var times=this.times,values=this.values,nKeys=times.length;if(nKeys===0){console.error('THREE.KeyframeTrack: Track is empty.',this);valid=false;}var prevTime=null;for(var i=0;i!==nKeys;i++){var currTime=times[i];if(typeof currTime==='number'&&isNaN(currTime)){console.error('THREE.KeyframeTrack: Time is not a valid number.',this,i,currTime);valid=false;break;}if(prevTime!==null&&prevTime>currTime){console.error('THREE.KeyframeTrack: Out of order keys.',this,i,currTime,prevTime);valid=false;break;}prevTime=currTime;}if(values!==undefined){if(AnimationUtils.isTypedArray(values)){for(var i=0,n=values.length;i!==n;++i){var value=values[i];if(isNaN(value)){console.error('THREE.KeyframeTrack: Value is not a valid number.',this,i,value);valid=false;break;}}}}return valid;},// removes equivalent sequential keys as common in morph target sequences
// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
optimize:function optimize(){// times or values may be shared with other tracks, so overwriting is unsafe
var times=AnimationUtils.arraySlice(this.times),values=AnimationUtils.arraySlice(this.values),stride=this.getValueSize(),smoothInterpolation=this.getInterpolation()===InterpolateSmooth,writeIndex=1,lastIndex=times.length-1;for(var i=1;i<lastIndex;++i){var keep=false;var time=times[i];var timeNext=times[i+1];// remove adjacent keyframes scheduled at the same time
if(time!==timeNext&&(i!==1||time!==time[0])){if(!smoothInterpolation){// remove unnecessary keyframes same as their neighbors
var offset=i*stride,offsetP=offset-stride,offsetN=offset+stride;for(var j=0;j!==stride;++j){var value=values[offset+j];if(value!==values[offsetP+j]||value!==values[offsetN+j]){keep=true;break;}}}else {keep=true;}}// in-place compaction
if(keep){if(i!==writeIndex){times[writeIndex]=times[i];var readOffset=i*stride,writeOffset=writeIndex*stride;for(var j=0;j!==stride;++j){values[writeOffset+j]=values[readOffset+j];}}++writeIndex;}}// flush last keyframe (compaction looks ahead)
if(lastIndex>0){times[writeIndex]=times[lastIndex];for(var readOffset=lastIndex*stride,writeOffset=writeIndex*stride,j=0;j!==stride;++j){values[writeOffset+j]=values[readOffset+j];}++writeIndex;}if(writeIndex!==times.length){this.times=AnimationUtils.arraySlice(times,0,writeIndex);this.values=AnimationUtils.arraySlice(values,0,writeIndex*stride);}else {this.times=times;this.values=values;}return this;},clone:function clone(){var times=AnimationUtils.arraySlice(this.times,0);var values=AnimationUtils.arraySlice(this.values,0);var TypedKeyframeTrack=this.constructor;var track=new TypedKeyframeTrack(this.name,times,values);// Interpolant argument to constructor is not saved, so copy the factory method directly.
track.createInterpolant=this.createInterpolant;return track;}});/**
 *
 * A Track of Boolean keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function BooleanKeyframeTrack(name,times,values){KeyframeTrack.call(this,name,times,values);}BooleanKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:BooleanKeyframeTrack,ValueTypeName:'bool',ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:undefined,InterpolantFactoryMethodSmooth:undefined// Note: Actually this track could have a optimized / compressed
// representation of a single value and a custom interpolant that
// computes "firstValue ^ isOdd( index )".
});/**
 *
 * A Track of keyframe values that represent color.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function ColorKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}ColorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:ColorKeyframeTrack,ValueTypeName:'color'// ValueBufferType is inherited
// DefaultInterpolation is inherited
// Note: Very basic implementation and nothing special yet.
// However, this is the place for color space parameterization.
});/**
 *
 * A Track of numeric keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function NumberKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}NumberKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:NumberKeyframeTrack,ValueTypeName:'number'// ValueBufferType is inherited
// DefaultInterpolation is inherited
});/**
 * Spherical linear unit quaternion interpolant.
 *
 * @author tschw
 */function QuaternionLinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}QuaternionLinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:QuaternionLinearInterpolant,interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=i1*stride,alpha=(t-t0)/(t1-t0);for(var end=offset+stride;offset!==end;offset+=4){Quaternion.slerpFlat(result,0,values,offset-stride,values,offset,alpha);}return result;}});/**
 *
 * A Track of quaternion keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function QuaternionKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}QuaternionKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:QuaternionKeyframeTrack,ValueTypeName:'quaternion',// ValueBufferType is inherited
DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodLinear:function InterpolantFactoryMethodLinear(result){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodSmooth:undefined// not yet implemented
});/**
 *
 * A Track that interpolates Strings
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function StringKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}StringKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:StringKeyframeTrack,ValueTypeName:'string',ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:undefined,InterpolantFactoryMethodSmooth:undefined});/**
 *
 * A Track of vectored keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function VectorKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}VectorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:VectorKeyframeTrack,ValueTypeName:'vector'// ValueBufferType is inherited
// DefaultInterpolation is inherited
});/**
 *
 * Reusable set of Tracks that represent an animation.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */function AnimationClip(name,duration,tracks){this.name=name;this.tracks=tracks;this.duration=duration!==undefined?duration:-1;this.uuid=MathUtils.generateUUID();// this means it should figure out its duration by scanning the tracks
if(this.duration<0){this.resetDuration();}}function getTrackTypeForValueTypeName(typeName){switch(typeName.toLowerCase()){case'scalar':case'double':case'float':case'number':case'integer':return NumberKeyframeTrack;case'vector':case'vector2':case'vector3':case'vector4':return VectorKeyframeTrack;case'color':return ColorKeyframeTrack;case'quaternion':return QuaternionKeyframeTrack;case'bool':case'boolean':return BooleanKeyframeTrack;case'string':return StringKeyframeTrack;}throw new Error('THREE.KeyframeTrack: Unsupported typeName: '+typeName);}function parseKeyframeTrack(json){if(json.type===undefined){throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');}var trackType=getTrackTypeForValueTypeName(json.type);if(json.times===undefined){var times=[],values=[];AnimationUtils.flattenJSON(json.keys,times,values,'value');json.times=times;json.values=values;}// derived classes can define a static parse method
if(trackType.parse!==undefined){return trackType.parse(json);}else {// by default, we assume a constructor compatible with the base
return new trackType(json.name,json.times,json.values,json.interpolation);}}Object.assign(AnimationClip,{parse:function parse(json){var tracks=[],jsonTracks=json.tracks,frameTime=1.0/(json.fps||1.0);for(var i=0,n=jsonTracks.length;i!==n;++i){tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));}return new AnimationClip(json.name,json.duration,tracks);},toJSON:function toJSON(clip){var tracks=[],clipTracks=clip.tracks;var json={'name':clip.name,'duration':clip.duration,'tracks':tracks,'uuid':clip.uuid};for(var i=0,n=clipTracks.length;i!==n;++i){tracks.push(KeyframeTrack.toJSON(clipTracks[i]));}return json;},CreateFromMorphTargetSequence:function CreateFromMorphTargetSequence(name,morphTargetSequence,fps,noLoop){var numMorphTargets=morphTargetSequence.length;var tracks=[];for(var i=0;i<numMorphTargets;i++){var times=[];var values=[];times.push((i+numMorphTargets-1)%numMorphTargets,i,(i+1)%numMorphTargets);values.push(0,1,0);var order=AnimationUtils.getKeyframeOrder(times);times=AnimationUtils.sortedArray(times,1,order);values=AnimationUtils.sortedArray(values,1,order);// if there is a key at the first frame, duplicate it as the
// last frame as well for perfect loop.
if(!noLoop&&times[0]===0){times.push(numMorphTargets);values.push(values[0]);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluences['+morphTargetSequence[i].name+']',times,values).scale(1.0/fps));}return new AnimationClip(name,-1,tracks);},findByName:function findByName(objectOrClipArray,name){var clipArray=objectOrClipArray;if(!Array.isArray(objectOrClipArray)){var o=objectOrClipArray;clipArray=o.geometry&&o.geometry.animations||o.animations;}for(var i=0;i<clipArray.length;i++){if(clipArray[i].name===name){return clipArray[i];}}return null;},CreateClipsFromMorphTargetSequences:function CreateClipsFromMorphTargetSequences(morphTargets,fps,noLoop){var animationToMorphTargets={};// tested with https://regex101.com/ on trick sequences
// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
var pattern=/^([\\w-]*?)([\\d]+)$/;// sort morph target names into animation groups based
// patterns like Walk_001, Walk_002, Run_001, Run_002
for(var i=0,il=morphTargets.length;i<il;i++){var morphTarget=morphTargets[i];var parts=morphTarget.name.match(pattern);if(parts&&parts.length>1){var name=parts[1];var animationMorphTargets=animationToMorphTargets[name];if(!animationMorphTargets){animationToMorphTargets[name]=animationMorphTargets=[];}animationMorphTargets.push(morphTarget);}}var clips=[];for(var name in animationToMorphTargets){clips.push(AnimationClip.CreateFromMorphTargetSequence(name,animationToMorphTargets[name],fps,noLoop));}return clips;},// parse the animation.hierarchy format
parseAnimation:function parseAnimation(animation,bones){if(!animation){console.error('THREE.AnimationClip: No animation in JSONLoader data.');return null;}var addNonemptyTrack=function addNonemptyTrack(trackType,trackName,animationKeys,propertyName,destTracks){// only return track if there are actually keys.
if(animationKeys.length!==0){var times=[];var values=[];AnimationUtils.flattenJSON(animationKeys,times,values,propertyName);// empty keys are filtered out, so check again
if(times.length!==0){destTracks.push(new trackType(trackName,times,values));}}};var tracks=[];var clipName=animation.name||'default';// automatic length determination in AnimationClip.
var duration=animation.length||-1;var fps=animation.fps||30;var hierarchyTracks=animation.hierarchy||[];for(var h=0;h<hierarchyTracks.length;h++){var animationKeys=hierarchyTracks[h].keys;// skip empty tracks
if(!animationKeys||animationKeys.length===0)continue;// process morph targets
if(animationKeys[0].morphTargets){// figure out all morph targets used in this track
var morphTargetNames={};for(var k=0;k<animationKeys.length;k++){if(animationKeys[k].morphTargets){for(var m=0;m<animationKeys[k].morphTargets.length;m++){morphTargetNames[animationKeys[k].morphTargets[m]]=-1;}}}// create a track for each morph target with all zero
// morphTargetInfluences except for the keys in which
// the morphTarget is named.
for(var morphTargetName in morphTargetNames){var times=[];var values=[];for(var m=0;m!==animationKeys[k].morphTargets.length;++m){var animationKey=animationKeys[k];times.push(animationKey.time);values.push(animationKey.morphTarget===morphTargetName?1:0);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluence['+morphTargetName+']',times,values));}duration=morphTargetNames.length*(fps||1.0);}else {// ...assume skeletal animation
var boneName='.bones['+bones[h].name+']';addNonemptyTrack(VectorKeyframeTrack,boneName+'.position',animationKeys,'pos',tracks);addNonemptyTrack(QuaternionKeyframeTrack,boneName+'.quaternion',animationKeys,'rot',tracks);addNonemptyTrack(VectorKeyframeTrack,boneName+'.scale',animationKeys,'scl',tracks);}}if(tracks.length===0){return null;}var clip=new AnimationClip(clipName,duration,tracks);return clip;}});Object.assign(AnimationClip.prototype,{resetDuration:function resetDuration(){var tracks=this.tracks,duration=0;for(var i=0,n=tracks.length;i!==n;++i){var track=this.tracks[i];duration=Math.max(duration,track.times[track.times.length-1]);}this.duration=duration;return this;},trim:function trim(){for(var i=0;i<this.tracks.length;i++){this.tracks[i].trim(0,this.duration);}return this;},validate:function validate(){var valid=true;for(var i=0;i<this.tracks.length;i++){valid=valid&&this.tracks[i].validate();}return valid;},optimize:function optimize(){for(var i=0;i<this.tracks.length;i++){this.tracks[i].optimize();}return this;},clone:function clone(){var tracks=[];for(var i=0;i<this.tracks.length;i++){tracks.push(this.tracks[i].clone());}return new AnimationClip(this.name,this.duration,tracks);}});/**
 * @author mrdoob / http://mrdoob.com/
 */var Cache={enabled:false,files:{},add:function add(key,file){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Adding key:', key );
this.files[key]=file;},get:function get(key){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Checking key:', key );
return this.files[key];},remove:function remove(key){delete this.files[key];},clear:function clear(){this.files={};}};/**
 * @author mrdoob / http://mrdoob.com/
 */function LoadingManager(onLoad,onProgress,onError){var scope=this;var isLoading=false;var itemsLoaded=0;var itemsTotal=0;var urlModifier=undefined;var handlers=[];// Refer to #5689 for the reason why we don't set .onStart
// in the constructor
this.onStart=undefined;this.onLoad=onLoad;this.onProgress=onProgress;this.onError=onError;this.itemStart=function(url){itemsTotal++;if(isLoading===false){if(scope.onStart!==undefined){scope.onStart(url,itemsLoaded,itemsTotal);}}isLoading=true;};this.itemEnd=function(url){itemsLoaded++;if(scope.onProgress!==undefined){scope.onProgress(url,itemsLoaded,itemsTotal);}if(itemsLoaded===itemsTotal){isLoading=false;if(scope.onLoad!==undefined){scope.onLoad();}}};this.itemError=function(url){if(scope.onError!==undefined){scope.onError(url);}};this.resolveURL=function(url){if(urlModifier){return urlModifier(url);}return url;};this.setURLModifier=function(transform){urlModifier=transform;return this;};this.addHandler=function(regex,loader){handlers.push(regex,loader);return this;};this.removeHandler=function(regex){var index=handlers.indexOf(regex);if(index!==-1){handlers.splice(index,2);}return this;};this.getHandler=function(file){for(var i=0,l=handlers.length;i<l;i+=2){var regex=handlers[i];var loader=handlers[i+1];if(regex.global)regex.lastIndex=0;// see #17920
if(regex.test(file)){return loader;}}return null;};}var DefaultLoadingManager=new LoadingManager();/**
 * @author alteredq / http://alteredqualia.com/
 */function Loader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;this.crossOrigin='anonymous';this.path='';this.resourcePath='';}Object.assign(Loader.prototype,{load:function load(/* url, onLoad, onProgress, onError */){},parse:function parse(/* data */){},setCrossOrigin:function setCrossOrigin(crossOrigin){this.crossOrigin=crossOrigin;return this;},setPath:function setPath(path){this.path=path;return this;},setResourcePath:function setResourcePath(resourcePath){this.resourcePath=resourcePath;return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 */var loading={};function FileLoader(manager){Loader.call(this,manager);}FileLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:FileLoader,load:function load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}// Check if request is duplicate
if(loading[url]!==undefined){loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});return;}// Check for data: URI
var dataUriRegex=/^data:(.*?)(;base64)?,(.*)$/;var dataUriRegexResult=url.match(dataUriRegex);// Safari can not handle Data URIs through XMLHttpRequest so process manually
if(dataUriRegexResult){var mimeType=dataUriRegexResult[1];var isBase64=!!dataUriRegexResult[2];var data=dataUriRegexResult[3];data=decodeURIComponent(data);if(isBase64)data=atob(data);try{var response;var responseType=(this.responseType||'').toLowerCase();switch(responseType){case'arraybuffer':case'blob':var view=new Uint8Array(data.length);for(var i=0;i<data.length;i++){view[i]=data.charCodeAt(i);}if(responseType==='blob'){response=new Blob([view.buffer],{type:mimeType});}else {response=view.buffer;}break;case'document':var parser=new DOMParser();response=parser.parseFromString(data,mimeType);break;case'json':response=JSON.parse(data);break;default:// 'text' or other
response=data;break;}// Wait for next browser tick like standard XMLHttpRequest event dispatching does
setTimeout(function(){if(onLoad)onLoad(response);scope.manager.itemEnd(url);},0);}catch(error){// Wait for next browser tick like standard XMLHttpRequest event dispatching does
setTimeout(function(){if(onError)onError(error);scope.manager.itemError(url);scope.manager.itemEnd(url);},0);}}else {// Initialise array for duplicate requests
loading[url]=[];loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});var request=new XMLHttpRequest();request.open('GET',url,true);request.addEventListener('load',function(event){var response=this.response;var callbacks=loading[url];delete loading[url];if(this.status===200||this.status===0){// Some browsers return HTTP Status 0 when using non-http protocol
// e.g. 'file://' or 'data://'. Handle as success.
if(this.status===0)console.warn('THREE.FileLoader: HTTP Status 0 received.');// Add to cache only on HTTP success, so that we do not cache
// error response bodies as proper responses to requests.
Cache.add(url,response);for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onLoad)callback.onLoad(response);}scope.manager.itemEnd(url);}else {for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onError)callback.onError(event);}scope.manager.itemError(url);scope.manager.itemEnd(url);}},false);request.addEventListener('progress',function(event){var callbacks=loading[url];for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onProgress)callback.onProgress(event);}},false);request.addEventListener('error',function(event){var callbacks=loading[url];delete loading[url];for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onError)callback.onError(event);}scope.manager.itemError(url);scope.manager.itemEnd(url);},false);request.addEventListener('abort',function(event){var callbacks=loading[url];delete loading[url];for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onError)callback.onError(event);}scope.manager.itemError(url);scope.manager.itemEnd(url);},false);if(this.responseType!==undefined)request.responseType=this.responseType;if(this.withCredentials!==undefined)request.withCredentials=this.withCredentials;if(request.overrideMimeType)request.overrideMimeType(this.mimeType!==undefined?this.mimeType:'text/plain');for(var header in this.requestHeader){request.setRequestHeader(header,this.requestHeader[header]);}request.send(null);}scope.manager.itemStart(url);return request;},setResponseType:function setResponseType(value){this.responseType=value;return this;},setWithCredentials:function setWithCredentials(value){this.withCredentials=value;return this;},setMimeType:function setMimeType(value){this.mimeType=value;return this;},setRequestHeader:function setRequestHeader(value){this.requestHeader=value;return this;}});/**
 * @author bhouston / http://clara.io/
 */function AnimationLoader(manager){Loader.call(this,manager);}AnimationLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:AnimationLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)));},onProgress,onError);},parse:function parse(json){var animations=[];for(var i=0;i<json.length;i++){var clip=AnimationClip.parse(json[i]);animations.push(clip);}return animations;}});/**
 * @author mrdoob / http://mrdoob.com/
 *
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */function CompressedTextureLoader(manager){Loader.call(this,manager);}CompressedTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:CompressedTextureLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var images=[];var texture=new CompressedTexture();texture.image=images;var loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType('arraybuffer');function loadTexture(i){loader.load(url[i],function(buffer){var texDatas=scope.parse(buffer,true);images[i]={width:texDatas.width,height:texDatas.height,format:texDatas.format,mipmaps:texDatas.mipmaps};loaded+=1;if(loaded===6){if(texDatas.mipmapCount===1)texture.minFilter=LinearFilter;texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);}},onProgress,onError);}if(Array.isArray(url)){var loaded=0;for(var i=0,il=url.length;i<il;++i){loadTexture(i);}}else {// compressed cubemap texture stored in a single DDS file
loader.load(url,function(buffer){var texDatas=scope.parse(buffer,true);if(texDatas.isCubemap){var faces=texDatas.mipmaps.length/texDatas.mipmapCount;for(var f=0;f<faces;f++){images[f]={mipmaps:[]};for(var i=0;i<texDatas.mipmapCount;i++){images[f].mipmaps.push(texDatas.mipmaps[f*texDatas.mipmapCount+i]);images[f].format=texDatas.format;images[f].width=texDatas.width;images[f].height=texDatas.height;}}}else {texture.image.width=texDatas.width;texture.image.height=texDatas.height;texture.mipmaps=texDatas.mipmaps;}if(texDatas.mipmapCount===1){texture.minFilter=LinearFilter;}texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);},onProgress,onError);}return texture;}});/**
 * @author Nikos M. / https://github.com/foo123/
 *
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */function DataTextureLoader(manager){Loader.call(this,manager);}DataTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:DataTextureLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var texture=new DataTexture();var loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.setPath(this.path);loader.load(url,function(buffer){var texData=scope.parse(buffer);if(!texData)return;if(texData.image!==undefined){texture.image=texData.image;}else if(texData.data!==undefined){texture.image.width=texData.width;texture.image.height=texData.height;texture.image.data=texData.data;}texture.wrapS=texData.wrapS!==undefined?texData.wrapS:ClampToEdgeWrapping;texture.wrapT=texData.wrapT!==undefined?texData.wrapT:ClampToEdgeWrapping;texture.magFilter=texData.magFilter!==undefined?texData.magFilter:LinearFilter;texture.minFilter=texData.minFilter!==undefined?texData.minFilter:LinearFilter;texture.anisotropy=texData.anisotropy!==undefined?texData.anisotropy:1;if(texData.format!==undefined){texture.format=texData.format;}if(texData.type!==undefined){texture.type=texData.type;}if(texData.mipmaps!==undefined){texture.mipmaps=texData.mipmaps;texture.minFilter=LinearMipmapLinearFilter;// presumably...
}if(texData.mipmapCount===1){texture.minFilter=LinearFilter;}texture.needsUpdate=true;if(onLoad)onLoad(texture,texData);},onProgress,onError);return texture;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function ImageLoader(manager){Loader.call(this,manager);}ImageLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:ImageLoader,load:function load(url,onLoad,onProgress,onError){if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}var image=document.createElementNS('http://www.w3.org/1999/xhtml','img');function onImageLoad(){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);Cache.add(url,this);if(onLoad)onLoad(this);scope.manager.itemEnd(url);}function onImageError(event){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);if(onError)onError(event);scope.manager.itemError(url);scope.manager.itemEnd(url);}image.addEventListener('load',onImageLoad,false);image.addEventListener('error',onImageError,false);if(url.substr(0,5)!=='data:'){if(this.crossOrigin!==undefined)image.crossOrigin=this.crossOrigin;}scope.manager.itemStart(url);image.src=url;return image;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function CubeTextureLoader(manager){Loader.call(this,manager);}CubeTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:CubeTextureLoader,load:function load(urls,onLoad,onProgress,onError){var texture=new CubeTexture();var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);var loaded=0;function loadTexture(i){loader.load(urls[i],function(image){texture.images[i]=image;loaded++;if(loaded===6){texture.needsUpdate=true;if(onLoad)onLoad(texture);}},undefined,onError);}for(var i=0;i<urls.length;++i){loadTexture(i);}return texture;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function TextureLoader(manager){Loader.call(this,manager);}TextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:TextureLoader,load:function load(url,onLoad,onProgress,onError){var texture=new Texture();var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);loader.load(url,function(image){texture.image=image;// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
var isJPEG=url.search(/\\.jpe?g($|\\?)/i)>0||url.search(/^data\\:image\\/jpeg/)===0;texture.format=isJPEG?RGBFormat:RGBAFormat;texture.needsUpdate=true;if(onLoad!==undefined){onLoad(texture);}},onProgress,onError);return texture;}});/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/ /**************************************************************
 *	Abstract Curve base class
 **************************************************************/function Curve(){this.type='Curve';this.arcLengthDivisions=200;}Object.assign(Curve.prototype,{// Virtual base class method to overwrite and implement in subclasses
//	- t [0 .. 1]
getPoint:function getPoint(/* t, optionalTarget */){console.warn('THREE.Curve: .getPoint() not implemented.');return null;},// Get point at relative position in curve according to arc length
// - u [0 .. 1]
getPointAt:function getPointAt(u,optionalTarget){var t=this.getUtoTmapping(u);return this.getPoint(t,optionalTarget);},// Get sequence of points using getPoint( t )
getPoints:function getPoints(divisions){if(divisions===undefined)divisions=5;var points=[];for(var d=0;d<=divisions;d++){points.push(this.getPoint(d/divisions));}return points;},// Get sequence of points using getPointAt( u )
getSpacedPoints:function getSpacedPoints(divisions){if(divisions===undefined)divisions=5;var points=[];for(var d=0;d<=divisions;d++){points.push(this.getPointAt(d/divisions));}return points;},// Get total curve arc length
getLength:function getLength(){var lengths=this.getLengths();return lengths[lengths.length-1];},// Get list of cumulative segment lengths
getLengths:function getLengths(divisions){if(divisions===undefined)divisions=this.arcLengthDivisions;if(this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate){return this.cacheArcLengths;}this.needsUpdate=false;var cache=[];var current,last=this.getPoint(0);var p,sum=0;cache.push(0);for(p=1;p<=divisions;p++){current=this.getPoint(p/divisions);sum+=current.distanceTo(last);cache.push(sum);last=current;}this.cacheArcLengths=cache;return cache;// { sums: cache, sum: sum }; Sum is in the last element.
},updateArcLengths:function updateArcLengths(){this.needsUpdate=true;this.getLengths();},// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
getUtoTmapping:function getUtoTmapping(u,distance){var arcLengths=this.getLengths();var i=0,il=arcLengths.length;var targetArcLength;// The targeted u distance value to get
if(distance){targetArcLength=distance;}else {targetArcLength=u*arcLengths[il-1];}// binary search for the index with largest value smaller than target u distance
var low=0,high=il-1,comparison;while(low<=high){i=Math.floor(low+(high-low)/2);// less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
comparison=arcLengths[i]-targetArcLength;if(comparison<0){low=i+1;}else if(comparison>0){high=i-1;}else {high=i;break;// DONE
}}i=high;if(arcLengths[i]===targetArcLength){return i/(il-1);}// we could get finer grain at lengths, or use simple interpolation between two points
var lengthBefore=arcLengths[i];var lengthAfter=arcLengths[i+1];var segmentLength=lengthAfter-lengthBefore;// determine where we are between the 'before' and 'after' points
var segmentFraction=(targetArcLength-lengthBefore)/segmentLength;// add that fractional amount to t
var t=(i+segmentFraction)/(il-1);return t;},// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation
getTangent:function getTangent(t){var delta=0.0001;var t1=t-delta;var t2=t+delta;// Capping in case of danger
if(t1<0)t1=0;if(t2>1)t2=1;var pt1=this.getPoint(t1);var pt2=this.getPoint(t2);var vec=pt2.clone().sub(pt1);return vec.normalize();},getTangentAt:function getTangentAt(u){var t=this.getUtoTmapping(u);return this.getTangent(t);},computeFrenetFrames:function computeFrenetFrames(segments,closed){// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
var normal=new Vector3();var tangents=[];var normals=[];var binormals=[];var vec=new Vector3();var mat=new Matrix4();var i,u,theta;// compute the tangent vectors for each segment on the curve
for(i=0;i<=segments;i++){u=i/segments;tangents[i]=this.getTangentAt(u);tangents[i].normalize();}// select an initial normal vector perpendicular to the first tangent vector,
// and in the direction of the minimum tangent xyz component
normals[0]=new Vector3();binormals[0]=new Vector3();var min=Number.MAX_VALUE;var tx=Math.abs(tangents[0].x);var ty=Math.abs(tangents[0].y);var tz=Math.abs(tangents[0].z);if(tx<=min){min=tx;normal.set(1,0,0);}if(ty<=min){min=ty;normal.set(0,1,0);}if(tz<=min){normal.set(0,0,1);}vec.crossVectors(tangents[0],normal).normalize();normals[0].crossVectors(tangents[0],vec);binormals[0].crossVectors(tangents[0],normals[0]);// compute the slowly-varying normal and binormal vectors for each segment on the curve
for(i=1;i<=segments;i++){normals[i]=normals[i-1].clone();binormals[i]=binormals[i-1].clone();vec.crossVectors(tangents[i-1],tangents[i]);if(vec.length()>Number.EPSILON){vec.normalize();theta=Math.acos(MathUtils.clamp(tangents[i-1].dot(tangents[i]),-1,1));// clamp for floating pt errors
normals[i].applyMatrix4(mat.makeRotationAxis(vec,theta));}binormals[i].crossVectors(tangents[i],normals[i]);}// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
if(closed===true){theta=Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]),-1,1));theta/=segments;if(tangents[0].dot(vec.crossVectors(normals[0],normals[segments]))>0){theta=-theta;}for(i=1;i<=segments;i++){// twist a little...
normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i],theta*i));binormals[i].crossVectors(tangents[i],normals[i]);}}return {tangents:tangents,normals:normals,binormals:binormals};},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.arcLengthDivisions=source.arcLengthDivisions;return this;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'Curve',generator:'Curve.toJSON'}};data.arcLengthDivisions=this.arcLengthDivisions;data.type=this.type;return data;},fromJSON:function fromJSON(json){this.arcLengthDivisions=json.arcLengthDivisions;return this;}});function EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){Curve.call(this);this.type='EllipseCurve';this.aX=aX||0;this.aY=aY||0;this.xRadius=xRadius||1;this.yRadius=yRadius||1;this.aStartAngle=aStartAngle||0;this.aEndAngle=aEndAngle||2*Math.PI;this.aClockwise=aClockwise||false;this.aRotation=aRotation||0;}EllipseCurve.prototype=Object.create(Curve.prototype);EllipseCurve.prototype.constructor=EllipseCurve;EllipseCurve.prototype.isEllipseCurve=true;EllipseCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var twoPi=Math.PI*2;var deltaAngle=this.aEndAngle-this.aStartAngle;var samePoints=Math.abs(deltaAngle)<Number.EPSILON;// ensures that deltaAngle is 0 .. 2 PI
while(deltaAngle<0)deltaAngle+=twoPi;while(deltaAngle>twoPi)deltaAngle-=twoPi;if(deltaAngle<Number.EPSILON){if(samePoints){deltaAngle=0;}else {deltaAngle=twoPi;}}if(this.aClockwise===true&&!samePoints){if(deltaAngle===twoPi){deltaAngle=-twoPi;}else {deltaAngle=deltaAngle-twoPi;}}var angle=this.aStartAngle+t*deltaAngle;var x=this.aX+this.xRadius*Math.cos(angle);var y=this.aY+this.yRadius*Math.sin(angle);if(this.aRotation!==0){var cos=Math.cos(this.aRotation);var sin=Math.sin(this.aRotation);var tx=x-this.aX;var ty=y-this.aY;// Rotate the point about the center of the ellipse.
x=tx*cos-ty*sin+this.aX;y=tx*sin+ty*cos+this.aY;}return point.set(x,y);};EllipseCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.aX=source.aX;this.aY=source.aY;this.xRadius=source.xRadius;this.yRadius=source.yRadius;this.aStartAngle=source.aStartAngle;this.aEndAngle=source.aEndAngle;this.aClockwise=source.aClockwise;this.aRotation=source.aRotation;return this;};EllipseCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.aX=this.aX;data.aY=this.aY;data.xRadius=this.xRadius;data.yRadius=this.yRadius;data.aStartAngle=this.aStartAngle;data.aEndAngle=this.aEndAngle;data.aClockwise=this.aClockwise;data.aRotation=this.aRotation;return data;};EllipseCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.aX=json.aX;this.aY=json.aY;this.xRadius=json.xRadius;this.yRadius=json.yRadius;this.aStartAngle=json.aStartAngle;this.aEndAngle=json.aEndAngle;this.aClockwise=json.aClockwise;this.aRotation=json.aRotation;return this;};function ArcCurve(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){EllipseCurve.call(this,aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);this.type='ArcCurve';}ArcCurve.prototype=Object.create(EllipseCurve.prototype);ArcCurve.prototype.constructor=ArcCurve;ArcCurve.prototype.isArcCurve=true;/**
 * @author zz85 https://github.com/zz85
 *
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */ /*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/function CubicPoly(){var c0=0,c1=0,c2=0,c3=0;/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */function init(x0,x1,t0,t1){c0=x0;c1=t0;c2=-3*x0+3*x1-2*t0-t1;c3=2*x0-2*x1+t0+t1;}return {initCatmullRom:function initCatmullRom(x0,x1,x2,x3,tension){init(x1,x2,tension*(x2-x0),tension*(x3-x1));},initNonuniformCatmullRom:function initNonuniformCatmullRom(x0,x1,x2,x3,dt0,dt1,dt2){// compute tangents when parameterized in [t1,t2]
var t1=(x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1;var t2=(x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2;// rescale tangents for parametrization in [0,1]
t1*=dt1;t2*=dt1;init(x1,x2,t1,t2);},calc:function calc(t){var t2=t*t;var t3=t2*t;return c0+c1*t+c2*t2+c3*t3;}};}//
var tmp=new Vector3();var px=new CubicPoly(),py=new CubicPoly(),pz=new CubicPoly();function CatmullRomCurve3(points,closed,curveType,tension){Curve.call(this);this.type='CatmullRomCurve3';this.points=points||[];this.closed=closed||false;this.curveType=curveType||'centripetal';this.tension=tension||0.5;}CatmullRomCurve3.prototype=Object.create(Curve.prototype);CatmullRomCurve3.prototype.constructor=CatmullRomCurve3;CatmullRomCurve3.prototype.isCatmullRomCurve3=true;CatmullRomCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var points=this.points;var l=points.length;var p=(l-(this.closed?0:1))*t;var intPoint=Math.floor(p);var weight=p-intPoint;if(this.closed){intPoint+=intPoint>0?0:(Math.floor(Math.abs(intPoint)/l)+1)*l;}else if(weight===0&&intPoint===l-1){intPoint=l-2;weight=1;}var p0,p1,p2,p3;// 4 points
if(this.closed||intPoint>0){p0=points[(intPoint-1)%l];}else {// extrapolate first point
tmp.subVectors(points[0],points[1]).add(points[0]);p0=tmp;}p1=points[intPoint%l];p2=points[(intPoint+1)%l];if(this.closed||intPoint+2<l){p3=points[(intPoint+2)%l];}else {// extrapolate last point
tmp.subVectors(points[l-1],points[l-2]).add(points[l-1]);p3=tmp;}if(this.curveType==='centripetal'||this.curveType==='chordal'){// init Centripetal / Chordal Catmull-Rom
var pow=this.curveType==='chordal'?0.5:0.25;var dt0=Math.pow(p0.distanceToSquared(p1),pow);var dt1=Math.pow(p1.distanceToSquared(p2),pow);var dt2=Math.pow(p2.distanceToSquared(p3),pow);// safety check for repeated points
if(dt1<1e-4)dt1=1.0;if(dt0<1e-4)dt0=dt1;if(dt2<1e-4)dt2=dt1;px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,p3.x,dt0,dt1,dt2);py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,p3.y,dt0,dt1,dt2);pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,p3.z,dt0,dt1,dt2);}else if(this.curveType==='catmullrom'){px.initCatmullRom(p0.x,p1.x,p2.x,p3.x,this.tension);py.initCatmullRom(p0.y,p1.y,p2.y,p3.y,this.tension);pz.initCatmullRom(p0.z,p1.z,p2.z,p3.z,this.tension);}point.set(px.calc(weight),py.calc(weight),pz.calc(weight));return point;};CatmullRomCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.points=[];for(var i=0,l=source.points.length;i<l;i++){var point=source.points[i];this.points.push(point.clone());}this.closed=source.closed;this.curveType=source.curveType;this.tension=source.tension;return this;};CatmullRomCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.points=[];for(var i=0,l=this.points.length;i<l;i++){var point=this.points[i];data.points.push(point.toArray());}data.closed=this.closed;data.curveType=this.curveType;data.tension=this.tension;return data;};CatmullRomCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.points=[];for(var i=0,l=json.points.length;i<l;i++){var point=json.points[i];this.points.push(new Vector3().fromArray(point));}this.closed=json.closed;this.curveType=json.curveType;this.tension=json.tension;return this;};/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Bezier Curves formulas obtained from
 * http://en.wikipedia.org/wiki/Bézier_curve
 */function CatmullRom(t,p0,p1,p2,p3){var v0=(p2-p0)*0.5;var v1=(p3-p1)*0.5;var t2=t*t;var t3=t*t2;return (2*p1-2*p2+v0+v1)*t3+(-3*p1+3*p2-2*v0-v1)*t2+v0*t+p1;}//
function QuadraticBezierP0(t,p){var k=1-t;return k*k*p;}function QuadraticBezierP1(t,p){return 2*(1-t)*t*p;}function QuadraticBezierP2(t,p){return t*t*p;}function QuadraticBezier(t,p0,p1,p2){return QuadraticBezierP0(t,p0)+QuadraticBezierP1(t,p1)+QuadraticBezierP2(t,p2);}//
function CubicBezierP0(t,p){var k=1-t;return k*k*k*p;}function CubicBezierP1(t,p){var k=1-t;return 3*k*k*t*p;}function CubicBezierP2(t,p){return 3*(1-t)*t*t*p;}function CubicBezierP3(t,p){return t*t*t*p;}function CubicBezier(t,p0,p1,p2,p3){return CubicBezierP0(t,p0)+CubicBezierP1(t,p1)+CubicBezierP2(t,p2)+CubicBezierP3(t,p3);}function CubicBezierCurve(v0,v1,v2,v3){Curve.call(this);this.type='CubicBezierCurve';this.v0=v0||new Vector2();this.v1=v1||new Vector2();this.v2=v2||new Vector2();this.v3=v3||new Vector2();}CubicBezierCurve.prototype=Object.create(Curve.prototype);CubicBezierCurve.prototype.constructor=CubicBezierCurve;CubicBezierCurve.prototype.isCubicBezierCurve=true;CubicBezierCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y));return point;};CubicBezierCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;};CubicBezierCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;};CubicBezierCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;};function CubicBezierCurve3(v0,v1,v2,v3){Curve.call(this);this.type='CubicBezierCurve3';this.v0=v0||new Vector3();this.v1=v1||new Vector3();this.v2=v2||new Vector3();this.v3=v3||new Vector3();}CubicBezierCurve3.prototype=Object.create(Curve.prototype);CubicBezierCurve3.prototype.constructor=CubicBezierCurve3;CubicBezierCurve3.prototype.isCubicBezierCurve3=true;CubicBezierCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y),CubicBezier(t,v0.z,v1.z,v2.z,v3.z));return point;};CubicBezierCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;};CubicBezierCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;};CubicBezierCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;};function LineCurve(v1,v2){Curve.call(this);this.type='LineCurve';this.v1=v1||new Vector2();this.v2=v2||new Vector2();}LineCurve.prototype=Object.create(Curve.prototype);LineCurve.prototype.constructor=LineCurve;LineCurve.prototype.isLineCurve=true;LineCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();if(t===1){point.copy(this.v2);}else {point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;};// Line curve is linear, so we can overwrite default getPointAt
LineCurve.prototype.getPointAt=function(u,optionalTarget){return this.getPoint(u,optionalTarget);};LineCurve.prototype.getTangent=function/* t */(){var tangent=this.v2.clone().sub(this.v1);return tangent.normalize();};LineCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};LineCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};LineCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function LineCurve3(v1,v2){Curve.call(this);this.type='LineCurve3';this.v1=v1||new Vector3();this.v2=v2||new Vector3();}LineCurve3.prototype=Object.create(Curve.prototype);LineCurve3.prototype.constructor=LineCurve3;LineCurve3.prototype.isLineCurve3=true;LineCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();if(t===1){point.copy(this.v2);}else {point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;};// Line curve is linear, so we can overwrite default getPointAt
LineCurve3.prototype.getPointAt=function(u,optionalTarget){return this.getPoint(u,optionalTarget);};LineCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};LineCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};LineCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function QuadraticBezierCurve(v0,v1,v2){Curve.call(this);this.type='QuadraticBezierCurve';this.v0=v0||new Vector2();this.v1=v1||new Vector2();this.v2=v2||new Vector2();}QuadraticBezierCurve.prototype=Object.create(Curve.prototype);QuadraticBezierCurve.prototype.constructor=QuadraticBezierCurve;QuadraticBezierCurve.prototype.isQuadraticBezierCurve=true;QuadraticBezierCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y));return point;};QuadraticBezierCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};QuadraticBezierCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};QuadraticBezierCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function QuadraticBezierCurve3(v0,v1,v2){Curve.call(this);this.type='QuadraticBezierCurve3';this.v0=v0||new Vector3();this.v1=v1||new Vector3();this.v2=v2||new Vector3();}QuadraticBezierCurve3.prototype=Object.create(Curve.prototype);QuadraticBezierCurve3.prototype.constructor=QuadraticBezierCurve3;QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3=true;QuadraticBezierCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y),QuadraticBezier(t,v0.z,v1.z,v2.z));return point;};QuadraticBezierCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};QuadraticBezierCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};QuadraticBezierCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function SplineCurve(points/* array of Vector2 */){Curve.call(this);this.type='SplineCurve';this.points=points||[];}SplineCurve.prototype=Object.create(Curve.prototype);SplineCurve.prototype.constructor=SplineCurve;SplineCurve.prototype.isSplineCurve=true;SplineCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var points=this.points;var p=(points.length-1)*t;var intPoint=Math.floor(p);var weight=p-intPoint;var p0=points[intPoint===0?intPoint:intPoint-1];var p1=points[intPoint];var p2=points[intPoint>points.length-2?points.length-1:intPoint+1];var p3=points[intPoint>points.length-3?points.length-1:intPoint+2];point.set(CatmullRom(weight,p0.x,p1.x,p2.x,p3.x),CatmullRom(weight,p0.y,p1.y,p2.y,p3.y));return point;};SplineCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.points=[];for(var i=0,l=source.points.length;i<l;i++){var point=source.points[i];this.points.push(point.clone());}return this;};SplineCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.points=[];for(var i=0,l=this.points.length;i<l;i++){var point=this.points[i];data.points.push(point.toArray());}return data;};SplineCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.points=[];for(var i=0,l=json.points.length;i<l;i++){var point=json.points[i];this.points.push(new Vector2().fromArray(point));}return this;};var Curves=/*#__PURE__*/Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/ /**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/function CurvePath(){Curve.call(this);this.type='CurvePath';this.curves=[];this.autoClose=false;// Automatically closes the path
}CurvePath.prototype=Object.assign(Object.create(Curve.prototype),{constructor:CurvePath,add:function add(curve){this.curves.push(curve);},closePath:function closePath(){// Add a line curve if start and end of lines are not connected
var startPoint=this.curves[0].getPoint(0);var endPoint=this.curves[this.curves.length-1].getPoint(1);if(!startPoint.equals(endPoint)){this.curves.push(new LineCurve(endPoint,startPoint));}},// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:
// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')
getPoint:function getPoint(t){var d=t*this.getLength();var curveLengths=this.getCurveLengths();var i=0;// To think about boundaries points.
while(i<curveLengths.length){if(curveLengths[i]>=d){var diff=curveLengths[i]-d;var curve=this.curves[i];var segmentLength=curve.getLength();var u=segmentLength===0?0:1-diff/segmentLength;return curve.getPointAt(u);}i++;}return null;// loop where sum != 0, sum > d , sum+1 <d
},// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength
getLength:function getLength(){var lens=this.getCurveLengths();return lens[lens.length-1];},// cacheLengths must be recalculated.
updateArcLengths:function updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths();},// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.
getCurveLengths:function getCurveLengths(){// We use cache values if curves and cache array are same length
if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths;}// Get length of sub-curve
// Push sums into cached array
var lengths=[],sums=0;for(var i=0,l=this.curves.length;i<l;i++){sums+=this.curves[i].getLength();lengths.push(sums);}this.cacheLengths=lengths;return lengths;},getSpacedPoints:function getSpacedPoints(divisions){if(divisions===undefined)divisions=40;var points=[];for(var i=0;i<=divisions;i++){points.push(this.getPoint(i/divisions));}if(this.autoClose){points.push(points[0]);}return points;},getPoints:function getPoints(divisions){divisions=divisions||12;var points=[],last;for(var i=0,curves=this.curves;i<curves.length;i++){var curve=curves[i];var resolution=curve&&curve.isEllipseCurve?divisions*2:curve&&(curve.isLineCurve||curve.isLineCurve3)?1:curve&&curve.isSplineCurve?divisions*curve.points.length:divisions;var pts=curve.getPoints(resolution);for(var j=0;j<pts.length;j++){var point=pts[j];if(last&&last.equals(point))continue;// ensures no consecutive points are duplicates
points.push(point);last=point;}}if(this.autoClose&&points.length>1&&!points[points.length-1].equals(points[0])){points.push(points[0]);}return points;},copy:function copy(source){Curve.prototype.copy.call(this,source);this.curves=[];for(var i=0,l=source.curves.length;i<l;i++){var curve=source.curves[i];this.curves.push(curve.clone());}this.autoClose=source.autoClose;return this;},toJSON:function toJSON(){var data=Curve.prototype.toJSON.call(this);data.autoClose=this.autoClose;data.curves=[];for(var i=0,l=this.curves.length;i<l;i++){var curve=this.curves[i];data.curves.push(curve.toJSON());}return data;},fromJSON:function fromJSON(json){Curve.prototype.fromJSON.call(this,json);this.autoClose=json.autoClose;this.curves=[];for(var i=0,l=json.curves.length;i<l;i++){var curve=json.curves[i];this.curves.push(new Curves[curve.type]().fromJSON(curve));}return this;}});/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 **/function Path(points){CurvePath.call(this);this.type='Path';this.currentPoint=new Vector2();if(points){this.setFromPoints(points);}}Path.prototype=Object.assign(Object.create(CurvePath.prototype),{constructor:Path,setFromPoints:function setFromPoints(points){this.moveTo(points[0].x,points[0].y);for(var i=1,l=points.length;i<l;i++){this.lineTo(points[i].x,points[i].y);}return this;},moveTo:function moveTo(x,y){this.currentPoint.set(x,y);// TODO consider referencing vectors instead of copying?
return this;},lineTo:function lineTo(x,y){var curve=new LineCurve(this.currentPoint.clone(),new Vector2(x,y));this.curves.push(curve);this.currentPoint.set(x,y);return this;},quadraticCurveTo:function quadraticCurveTo(aCPx,aCPy,aX,aY){var curve=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(aCPx,aCPy),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;},bezierCurveTo:function bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){var curve=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(aCP1x,aCP1y),new Vector2(aCP2x,aCP2y),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;},splineThru:function splineThru(pts/*Array of Vector*/){var npts=[this.currentPoint.clone()].concat(pts);var curve=new SplineCurve(npts);this.curves.push(curve);this.currentPoint.copy(pts[pts.length-1]);return this;},arc:function arc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){var x0=this.currentPoint.x;var y0=this.currentPoint.y;this.absarc(aX+x0,aY+y0,aRadius,aStartAngle,aEndAngle,aClockwise);return this;},absarc:function absarc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);return this;},ellipse:function ellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var x0=this.currentPoint.x;var y0=this.currentPoint.y;this.absellipse(aX+x0,aY+y0,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);return this;},absellipse:function absellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var curve=new EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);if(this.curves.length>0){// if a previous curve is present, attempt to join
var firstPoint=curve.getPoint(0);if(!firstPoint.equals(this.currentPoint)){this.lineTo(firstPoint.x,firstPoint.y);}}this.curves.push(curve);var lastPoint=curve.getPoint(1);this.currentPoint.copy(lastPoint);return this;},copy:function copy(source){CurvePath.prototype.copy.call(this,source);this.currentPoint.copy(source.currentPoint);return this;},toJSON:function toJSON(){var data=CurvePath.prototype.toJSON.call(this);data.currentPoint=this.currentPoint.toArray();return data;},fromJSON:function fromJSON(json){CurvePath.prototype.fromJSON.call(this,json);this.currentPoint.fromArray(json.currentPoint);return this;}});/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/ // STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.
function Shape(points){Path.call(this,points);this.uuid=MathUtils.generateUUID();this.type='Shape';this.holes=[];}Shape.prototype=Object.assign(Object.create(Path.prototype),{constructor:Shape,getPointsHoles:function getPointsHoles(divisions){var holesPts=[];for(var i=0,l=this.holes.length;i<l;i++){holesPts[i]=this.holes[i].getPoints(divisions);}return holesPts;},// get points of shape and holes (keypoints based on segments parameter)
extractPoints:function extractPoints(divisions){return {shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)};},copy:function copy(source){Path.prototype.copy.call(this,source);this.holes=[];for(var i=0,l=source.holes.length;i<l;i++){var hole=source.holes[i];this.holes.push(hole.clone());}return this;},toJSON:function toJSON(){var data=Path.prototype.toJSON.call(this);data.uuid=this.uuid;data.holes=[];for(var i=0,l=this.holes.length;i<l;i++){var hole=this.holes[i];data.holes.push(hole.toJSON());}return data;},fromJSON:function fromJSON(json){Path.prototype.fromJSON.call(this,json);this.uuid=json.uuid;this.holes=[];for(var i=0,l=json.holes.length;i<l;i++){var hole=json.holes[i];this.holes.push(new Path().fromJSON(hole));}return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */function Light(color,intensity){Object3D.call(this);this.type='Light';this.color=new Color(color);this.intensity=intensity!==undefined?intensity:1;this.receiveShadow=undefined;}Light.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Light,isLight:true,copy:function copy(source){Object3D.prototype.copy.call(this,source);this.color.copy(source.color);this.intensity=source.intensity;return this;},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.color=this.color.getHex();data.object.intensity=this.intensity;if(this.groundColor!==undefined)data.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)data.object.distance=this.distance;if(this.angle!==undefined)data.object.angle=this.angle;if(this.decay!==undefined)data.object.decay=this.decay;if(this.penumbra!==undefined)data.object.penumbra=this.penumbra;if(this.shadow!==undefined)data.object.shadow=this.shadow.toJSON();return data;}});/**
 * @author alteredq / http://alteredqualia.com/
 */function HemisphereLight(skyColor,groundColor,intensity){Light.call(this,skyColor,intensity);this.type='HemisphereLight';this.castShadow=undefined;this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.groundColor=new Color(groundColor);}HemisphereLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:HemisphereLight,isHemisphereLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.groundColor.copy(source.groundColor);return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function LightShadow(camera){this.camera=camera;this.bias=0;this.radius=1;this.mapSize=new Vector2(512,512);this.map=null;this.mapPass=null;this.matrix=new Matrix4();this._frustum=new Frustum();this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)];}Object.assign(LightShadow.prototype,{_projScreenMatrix:new Matrix4(),_lightPositionWorld:new Vector3(),_lookTarget:new Vector3(),getViewportCount:function getViewportCount(){return this._viewportCount;},getFrustum:function getFrustum(){return this._frustum;},updateMatrices:function updateMatrices(light){var shadowCamera=this.camera,shadowMatrix=this.matrix,projScreenMatrix=this._projScreenMatrix,lookTarget=this._lookTarget,lightPositionWorld=this._lightPositionWorld;lightPositionWorld.setFromMatrixPosition(light.matrixWorld);shadowCamera.position.copy(lightPositionWorld);lookTarget.setFromMatrixPosition(light.target.matrixWorld);shadowCamera.lookAt(lookTarget);shadowCamera.updateMatrixWorld();projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(projScreenMatrix);shadowMatrix.set(0.5,0.0,0.0,0.5,0.0,0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);shadowMatrix.multiply(shadowCamera.projectionMatrix);shadowMatrix.multiply(shadowCamera.matrixWorldInverse);},getViewport:function getViewport(viewportIndex){return this._viewports[viewportIndex];},getFrameExtents:function getFrameExtents(){return this._frameExtents;},copy:function copy(source){this.camera=source.camera.clone();this.bias=source.bias;this.radius=source.radius;this.mapSize.copy(source.mapSize);return this;},clone:function clone(){return new this.constructor().copy(this);},toJSON:function toJSON(){var object={};if(this.bias!==0)object.bias=this.bias;if(this.radius!==1)object.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)object.mapSize=this.mapSize.toArray();object.camera=this.camera.toJSON(false).object;delete object.camera.matrix;return object;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function SpotLightShadow(){LightShadow.call(this,new PerspectiveCamera(50,1,0.5,500));}SpotLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:SpotLightShadow,isSpotLightShadow:true,updateMatrices:function updateMatrices(light){var camera=this.camera;var fov=MathUtils.RAD2DEG*2*light.angle;var aspect=this.mapSize.width/this.mapSize.height;var far=light.distance||camera.far;if(fov!==camera.fov||aspect!==camera.aspect||far!==camera.far){camera.fov=fov;camera.aspect=aspect;camera.far=far;camera.updateProjectionMatrix();}LightShadow.prototype.updateMatrices.call(this,light);}});/**
 * @author alteredq / http://alteredqualia.com/
 */function SpotLight(color,intensity,distance,angle,penumbra,decay){Light.call(this,color,intensity);this.type='SpotLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D();Object.defineProperty(this,'power',{get:function get(){// intensity = power per solid angle.
// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
return this.intensity*Math.PI;},set:function set(power){// intensity = power per solid angle.
// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
this.intensity=power/Math.PI;}});this.distance=distance!==undefined?distance:0;this.angle=angle!==undefined?angle:Math.PI/3;this.penumbra=penumbra!==undefined?penumbra:0;this.decay=decay!==undefined?decay:1;// for physically correct lights, should be 2.
this.shadow=new SpotLightShadow();}SpotLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:SpotLight,isSpotLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.distance=source.distance;this.angle=source.angle;this.penumbra=source.penumbra;this.decay=source.decay;this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}});function PointLightShadow(){LightShadow.call(this,new PerspectiveCamera(90,1,0.5,500));this._frameExtents=new Vector2(4,2);this._viewportCount=6;this._viewports=[// These viewports map a cube-map onto a 2D texture with the
// following orientation:
//
//  xzXZ
//   y Y
//
// X - Positive x direction
// x - Negative x direction
// Y - Positive y direction
// y - Negative y direction
// Z - Positive z direction
// z - Negative z direction
// positive X
new Vector4(2,1,1,1),// negative X
new Vector4(0,1,1,1),// positive Z
new Vector4(3,1,1,1),// negative Z
new Vector4(1,1,1,1),// positive Y
new Vector4(3,0,1,1),// negative Y
new Vector4(1,0,1,1)];this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)];this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)];}PointLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:PointLightShadow,isPointLightShadow:true,updateMatrices:function updateMatrices(light,viewportIndex){if(viewportIndex===undefined)viewportIndex=0;var camera=this.camera,shadowMatrix=this.matrix,lightPositionWorld=this._lightPositionWorld,lookTarget=this._lookTarget,projScreenMatrix=this._projScreenMatrix;lightPositionWorld.setFromMatrixPosition(light.matrixWorld);camera.position.copy(lightPositionWorld);lookTarget.copy(camera.position);lookTarget.add(this._cubeDirections[viewportIndex]);camera.up.copy(this._cubeUps[viewportIndex]);camera.lookAt(lookTarget);camera.updateMatrixWorld();shadowMatrix.makeTranslation(-lightPositionWorld.x,-lightPositionWorld.y,-lightPositionWorld.z);projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(projScreenMatrix);}});/**
 * @author mrdoob / http://mrdoob.com/
 */function PointLight(color,intensity,distance,decay){Light.call(this,color,intensity);this.type='PointLight';Object.defineProperty(this,'power',{get:function get(){// intensity = power per solid angle.
// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
return this.intensity*4*Math.PI;},set:function set(power){// intensity = power per solid angle.
// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
this.intensity=power/(4*Math.PI);}});this.distance=distance!==undefined?distance:0;this.decay=decay!==undefined?decay:1;// for physically correct lights, should be 2.
this.shadow=new PointLightShadow();}PointLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:PointLight,isPointLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.distance=source.distance;this.decay=source.decay;this.shadow=source.shadow.clone();return this;}});/**
 * @author alteredq / http://alteredqualia.com/
 * @author arose / http://github.com/arose
 */function OrthographicCamera(left,right,top,bottom,near,far){Camera.call(this);this.type='OrthographicCamera';this.zoom=1;this.view=null;this.left=left!==undefined?left:-1;this.right=right!==undefined?right:1;this.top=top!==undefined?top:1;this.bottom=bottom!==undefined?bottom:-1;this.near=near!==undefined?near:0.1;this.far=far!==undefined?far:2000;this.updateProjectionMatrix();}OrthographicCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:OrthographicCamera,isOrthographicCamera:true,copy:function copy(source,recursive){Camera.prototype.copy.call(this,source,recursive);this.left=source.left;this.right=source.right;this.top=source.top;this.bottom=source.bottom;this.near=source.near;this.far=source.far;this.zoom=source.zoom;this.view=source.view===null?null:Object.assign({},source.view);return this;},setViewOffset:function setViewOffset(fullWidth,fullHeight,x,y,width,height){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();},clearViewOffset:function clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();},updateProjectionMatrix:function updateProjectionMatrix(){var dx=(this.right-this.left)/(2*this.zoom);var dy=(this.top-this.bottom)/(2*this.zoom);var cx=(this.right+this.left)/2;var cy=(this.top+this.bottom)/2;var left=cx-dx;var right=cx+dx;var top=cy+dy;var bottom=cy-dy;if(this.view!==null&&this.view.enabled){var scaleW=(this.right-this.left)/this.view.fullWidth/this.zoom;var scaleH=(this.top-this.bottom)/this.view.fullHeight/this.zoom;left+=scaleW*this.view.offsetX;right=left+scaleW*this.view.width;top-=scaleH*this.view.offsetY;bottom=top-scaleH*this.view.height;}this.projectionMatrix.makeOrthographic(left,right,top,bottom,this.near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix);},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.zoom=this.zoom;data.object.left=this.left;data.object.right=this.right;data.object.top=this.top;data.object.bottom=this.bottom;data.object.near=this.near;data.object.far=this.far;if(this.view!==null)data.object.view=Object.assign({},this.view);return data;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function DirectionalLightShadow(){LightShadow.call(this,new OrthographicCamera(-5,5,5,-5,0.5,500));}DirectionalLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:DirectionalLightShadow,isDirectionalLightShadow:true,updateMatrices:function updateMatrices(light){LightShadow.prototype.updateMatrices.call(this,light);}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */function DirectionalLight(color,intensity){Light.call(this,color,intensity);this.type='DirectionalLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D();this.shadow=new DirectionalLightShadow();}DirectionalLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:DirectionalLight,isDirectionalLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function AmbientLight(color,intensity){Light.call(this,color,intensity);this.type='AmbientLight';this.castShadow=undefined;}AmbientLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:AmbientLight,isAmbientLight:true});/**
 * @author abelnation / http://github.com/abelnation
 */function RectAreaLight(color,intensity,width,height){Light.call(this,color,intensity);this.type='RectAreaLight';this.width=width!==undefined?width:10;this.height=height!==undefined?height:10;}RectAreaLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:RectAreaLight,isRectAreaLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.width=source.width;this.height=source.height;return this;},toJSON:function toJSON(meta){var data=Light.prototype.toJSON.call(this,meta);data.object.width=this.width;data.object.height=this.height;return data;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function MaterialLoader(manager){Loader.call(this,manager);this.textures={};}MaterialLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:MaterialLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)));},onProgress,onError);},parse:function parse(json){var textures=this.textures;function getTexture(name){if(textures[name]===undefined){console.warn('THREE.MaterialLoader: Undefined texture',name);}return textures[name];}var material=new Materials[json.type]();if(json.uuid!==undefined)material.uuid=json.uuid;if(json.name!==undefined)material.name=json.name;if(json.color!==undefined)material.color.setHex(json.color);if(json.roughness!==undefined)material.roughness=json.roughness;if(json.metalness!==undefined)material.metalness=json.metalness;if(json.sheen!==undefined)material.sheen=new Color().setHex(json.sheen);if(json.emissive!==undefined)material.emissive.setHex(json.emissive);if(json.specular!==undefined)material.specular.setHex(json.specular);if(json.shininess!==undefined)material.shininess=json.shininess;if(json.clearcoat!==undefined)material.clearcoat=json.clearcoat;if(json.clearcoatRoughness!==undefined)material.clearcoatRoughness=json.clearcoatRoughness;if(json.vertexColors!==undefined)material.vertexColors=json.vertexColors;if(json.fog!==undefined)material.fog=json.fog;if(json.flatShading!==undefined)material.flatShading=json.flatShading;if(json.blending!==undefined)material.blending=json.blending;if(json.combine!==undefined)material.combine=json.combine;if(json.side!==undefined)material.side=json.side;if(json.opacity!==undefined)material.opacity=json.opacity;if(json.transparent!==undefined)material.transparent=json.transparent;if(json.alphaTest!==undefined)material.alphaTest=json.alphaTest;if(json.depthTest!==undefined)material.depthTest=json.depthTest;if(json.depthWrite!==undefined)material.depthWrite=json.depthWrite;if(json.colorWrite!==undefined)material.colorWrite=json.colorWrite;if(json.stencilWrite!==undefined)material.stencilWrite=json.stencilWrite;if(json.stencilWriteMask!==undefined)material.stencilWriteMask=json.stencilWriteMask;if(json.stencilFunc!==undefined)material.stencilFunc=json.stencilFunc;if(json.stencilRef!==undefined)material.stencilRef=json.stencilRef;if(json.stencilFuncMask!==undefined)material.stencilFuncMask=json.stencilFuncMask;if(json.stencilFail!==undefined)material.stencilFail=json.stencilFail;if(json.stencilZFail!==undefined)material.stencilZFail=json.stencilZFail;if(json.stencilZPass!==undefined)material.stencilZPass=json.stencilZPass;if(json.wireframe!==undefined)material.wireframe=json.wireframe;if(json.wireframeLinewidth!==undefined)material.wireframeLinewidth=json.wireframeLinewidth;if(json.wireframeLinecap!==undefined)material.wireframeLinecap=json.wireframeLinecap;if(json.wireframeLinejoin!==undefined)material.wireframeLinejoin=json.wireframeLinejoin;if(json.rotation!==undefined)material.rotation=json.rotation;if(json.linewidth!==1)material.linewidth=json.linewidth;if(json.dashSize!==undefined)material.dashSize=json.dashSize;if(json.gapSize!==undefined)material.gapSize=json.gapSize;if(json.scale!==undefined)material.scale=json.scale;if(json.polygonOffset!==undefined)material.polygonOffset=json.polygonOffset;if(json.polygonOffsetFactor!==undefined)material.polygonOffsetFactor=json.polygonOffsetFactor;if(json.polygonOffsetUnits!==undefined)material.polygonOffsetUnits=json.polygonOffsetUnits;if(json.skinning!==undefined)material.skinning=json.skinning;if(json.morphTargets!==undefined)material.morphTargets=json.morphTargets;if(json.morphNormals!==undefined)material.morphNormals=json.morphNormals;if(json.dithering!==undefined)material.dithering=json.dithering;if(json.visible!==undefined)material.visible=json.visible;if(json.toneMapped!==undefined)material.toneMapped=json.toneMapped;if(json.userData!==undefined)material.userData=json.userData;// Shader Material
if(json.uniforms!==undefined){for(var name in json.uniforms){var uniform=json.uniforms[name];material.uniforms[name]={};switch(uniform.type){case't':material.uniforms[name].value=getTexture(uniform.value);break;case'c':material.uniforms[name].value=new Color().setHex(uniform.value);break;case'v2':material.uniforms[name].value=new Vector2().fromArray(uniform.value);break;case'v3':material.uniforms[name].value=new Vector3().fromArray(uniform.value);break;case'v4':material.uniforms[name].value=new Vector4().fromArray(uniform.value);break;case'm3':material.uniforms[name].value=new Matrix3().fromArray(uniform.value);case'm4':material.uniforms[name].value=new Matrix4().fromArray(uniform.value);break;default:material.uniforms[name].value=uniform.value;}}}if(json.defines!==undefined)material.defines=json.defines;if(json.vertexShader!==undefined)material.vertexShader=json.vertexShader;if(json.fragmentShader!==undefined)material.fragmentShader=json.fragmentShader;if(json.extensions!==undefined){for(var key in json.extensions){material.extensions[key]=json.extensions[key];}}// Deprecated
if(json.shading!==undefined)material.flatShading=json.shading===1;// THREE.FlatShading
// for PointsMaterial
if(json.size!==undefined)material.size=json.size;if(json.sizeAttenuation!==undefined)material.sizeAttenuation=json.sizeAttenuation;// maps
if(json.map!==undefined)material.map=getTexture(json.map);if(json.matcap!==undefined)material.matcap=getTexture(json.matcap);if(json.alphaMap!==undefined){material.alphaMap=getTexture(json.alphaMap);material.transparent=true;}if(json.bumpMap!==undefined)material.bumpMap=getTexture(json.bumpMap);if(json.bumpScale!==undefined)material.bumpScale=json.bumpScale;if(json.normalMap!==undefined)material.normalMap=getTexture(json.normalMap);if(json.normalMapType!==undefined)material.normalMapType=json.normalMapType;if(json.normalScale!==undefined){var normalScale=json.normalScale;if(Array.isArray(normalScale)===false){// Blender exporter used to export a scalar. See #7459
normalScale=[normalScale,normalScale];}material.normalScale=new Vector2().fromArray(normalScale);}if(json.displacementMap!==undefined)material.displacementMap=getTexture(json.displacementMap);if(json.displacementScale!==undefined)material.displacementScale=json.displacementScale;if(json.displacementBias!==undefined)material.displacementBias=json.displacementBias;if(json.roughnessMap!==undefined)material.roughnessMap=getTexture(json.roughnessMap);if(json.metalnessMap!==undefined)material.metalnessMap=getTexture(json.metalnessMap);if(json.emissiveMap!==undefined)material.emissiveMap=getTexture(json.emissiveMap);if(json.emissiveIntensity!==undefined)material.emissiveIntensity=json.emissiveIntensity;if(json.specularMap!==undefined)material.specularMap=getTexture(json.specularMap);if(json.envMap!==undefined)material.envMap=getTexture(json.envMap);if(json.envMapIntensity!==undefined)material.envMapIntensity=json.envMapIntensity;if(json.reflectivity!==undefined)material.reflectivity=json.reflectivity;if(json.refractionRatio!==undefined)material.refractionRatio=json.refractionRatio;if(json.lightMap!==undefined)material.lightMap=getTexture(json.lightMap);if(json.lightMapIntensity!==undefined)material.lightMapIntensity=json.lightMapIntensity;if(json.aoMap!==undefined)material.aoMap=getTexture(json.aoMap);if(json.aoMapIntensity!==undefined)material.aoMapIntensity=json.aoMapIntensity;if(json.gradientMap!==undefined)material.gradientMap=getTexture(json.gradientMap);if(json.clearcoatNormalMap!==undefined)material.clearcoatNormalMap=getTexture(json.clearcoatNormalMap);if(json.clearcoatNormalScale!==undefined)material.clearcoatNormalScale=new Vector2().fromArray(json.clearcoatNormalScale);return material;},setTextures:function setTextures(value){this.textures=value;return this;}});/**
 * @author Don McCurdy / https://www.donmccurdy.com
 */var LoaderUtils={decodeText:function decodeText(array){if(typeof TextDecoder!=='undefined'){return new TextDecoder().decode(array);}// Avoid the String.fromCharCode.apply(null, array) shortcut, which
// throws a "maximum call stack size exceeded" error for large arrays.
var s='';for(var i=0,il=array.length;i<il;i++){// Implicitly assumes little-endian.
s+=String.fromCharCode(array[i]);}try{// merges multi-byte utf-8 characters.
return decodeURIComponent(escape(s));}catch(e){// see #16358
return s;}},extractUrlBase:function extractUrlBase(url){var index=url.lastIndexOf('/');if(index===-1)return './';return url.substr(0,index+1);}};/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */function InstancedBufferGeometry(){BufferGeometry.call(this);this.type='InstancedBufferGeometry';this.maxInstancedCount=undefined;}InstancedBufferGeometry.prototype=Object.assign(Object.create(BufferGeometry.prototype),{constructor:InstancedBufferGeometry,isInstancedBufferGeometry:true,copy:function copy(source){BufferGeometry.prototype.copy.call(this,source);this.maxInstancedCount=source.maxInstancedCount;return this;},clone:function clone(){return new this.constructor().copy(this);},toJSON:function toJSON(){var data=BufferGeometry.prototype.toJSON.call(this);data.maxInstancedCount=this.maxInstancedCount;data.isInstancedBufferGeometry=true;return data;}});/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */function InstancedBufferAttribute(array,itemSize,normalized,meshPerAttribute){if(typeof normalized==='number'){meshPerAttribute=normalized;normalized=false;console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');}BufferAttribute.call(this,array,itemSize,normalized);this.meshPerAttribute=meshPerAttribute||1;}InstancedBufferAttribute.prototype=Object.assign(Object.create(BufferAttribute.prototype),{constructor:InstancedBufferAttribute,isInstancedBufferAttribute:true,copy:function copy(source){BufferAttribute.prototype.copy.call(this,source);this.meshPerAttribute=source.meshPerAttribute;return this;},toJSON:function toJSON(){var data=BufferAttribute.prototype.toJSON.call(this);data.meshPerAttribute=this.meshPerAttribute;data.isInstancedBufferAttribute=true;return data;}});/**
 * @author mrdoob / http://mrdoob.com/
 */function BufferGeometryLoader(manager){Loader.call(this,manager);}BufferGeometryLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:BufferGeometryLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)));},onProgress,onError);},parse:function parse(json){var geometry=json.isInstancedBufferGeometry?new InstancedBufferGeometry():new BufferGeometry();var index=json.data.index;if(index!==undefined){var typedArray=new TYPED_ARRAYS[index.type](index.array);geometry.setIndex(new BufferAttribute(typedArray,1));}var attributes=json.data.attributes;for(var key in attributes){var attribute=attributes[key];var typedArray=new TYPED_ARRAYS[attribute.type](attribute.array);var bufferAttributeConstr=attribute.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;var bufferAttribute=new bufferAttributeConstr(typedArray,attribute.itemSize,attribute.normalized);if(attribute.name!==undefined)bufferAttribute.name=attribute.name;geometry.setAttribute(key,bufferAttribute);}var morphAttributes=json.data.morphAttributes;if(morphAttributes){for(var key in morphAttributes){var attributeArray=morphAttributes[key];var array=[];for(var i=0,il=attributeArray.length;i<il;i++){var attribute=attributeArray[i];var typedArray=new TYPED_ARRAYS[attribute.type](attribute.array);var bufferAttribute=new BufferAttribute(typedArray,attribute.itemSize,attribute.normalized);if(attribute.name!==undefined)bufferAttribute.name=attribute.name;array.push(bufferAttribute);}geometry.morphAttributes[key]=array;}}var morphTargetsRelative=json.data.morphTargetsRelative;if(morphTargetsRelative){geometry.morphTargetsRelative=true;}var groups=json.data.groups||json.data.drawcalls||json.data.offsets;if(groups!==undefined){for(var i=0,n=groups.length;i!==n;++i){var group=groups[i];geometry.addGroup(group.start,group.count,group.materialIndex);}}var boundingSphere=json.data.boundingSphere;if(boundingSphere!==undefined){var center=new Vector3();if(boundingSphere.center!==undefined){center.fromArray(boundingSphere.center);}geometry.boundingSphere=new Sphere(center,boundingSphere.radius);}if(json.name)geometry.name=json.name;if(json.userData)geometry.userData=json.userData;return geometry;}});var TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,// Workaround for IE11 pre KB2929437. See #11440
Uint8ClampedArray:typeof Uint8ClampedArray!=='undefined'?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};/**
 * @author mrdoob / http://mrdoob.com/
 */function ObjectLoader(manager){Loader.call(this,manager);}ObjectLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:ObjectLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var path=this.path===''?LoaderUtils.extractUrlBase(url):this.path;this.resourcePath=this.resourcePath||path;var loader=new FileLoader(scope.manager);loader.setPath(this.path);loader.load(url,function(text){var json=null;try{json=JSON.parse(text);}catch(error){if(onError!==undefined)onError(error);console.error('THREE:ObjectLoader: Can\\'t parse '+url+'.',error.message);return;}var metadata=json.metadata;if(metadata===undefined||metadata.type===undefined||metadata.type.toLowerCase()==='geometry'){console.error('THREE.ObjectLoader: Can\\'t load '+url);return;}scope.parse(json,onLoad);},onProgress,onError);},parse:function parse(json,onLoad){var shapes=this.parseShape(json.shapes);var geometries=this.parseGeometries(json.geometries,shapes);var images=this.parseImages(json.images,function(){if(onLoad!==undefined)onLoad(object);});var textures=this.parseTextures(json.textures,images);var materials=this.parseMaterials(json.materials,textures);var object=this.parseObject(json.object,geometries,materials);if(json.animations){object.animations=this.parseAnimations(json.animations);}if(json.images===undefined||json.images.length===0){if(onLoad!==undefined)onLoad(object);}return object;},parseShape:function parseShape(json){var shapes={};if(json!==undefined){for(var i=0,l=json.length;i<l;i++){var shape=new Shape().fromJSON(json[i]);shapes[shape.uuid]=shape;}}return shapes;},parseGeometries:function parseGeometries(json,shapes){var geometries={};if(json!==undefined){var bufferGeometryLoader=new BufferGeometryLoader();for(var i=0,l=json.length;i<l;i++){var geometry;var data=json[i];switch(data.type){case'PlaneGeometry':case'PlaneBufferGeometry':geometry=new Geometries[data.type](data.width,data.height,data.widthSegments,data.heightSegments);break;case'BoxGeometry':case'BoxBufferGeometry':case'CubeGeometry':// backwards compatible
geometry=new Geometries[data.type](data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments);break;case'CircleGeometry':case'CircleBufferGeometry':geometry=new Geometries[data.type](data.radius,data.segments,data.thetaStart,data.thetaLength);break;case'CylinderGeometry':case'CylinderBufferGeometry':geometry=new Geometries[data.type](data.radiusTop,data.radiusBottom,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);break;case'ConeGeometry':case'ConeBufferGeometry':geometry=new Geometries[data.type](data.radius,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);break;case'SphereGeometry':case'SphereBufferGeometry':geometry=new Geometries[data.type](data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength);break;case'DodecahedronGeometry':case'DodecahedronBufferGeometry':case'IcosahedronGeometry':case'IcosahedronBufferGeometry':case'OctahedronGeometry':case'OctahedronBufferGeometry':case'TetrahedronGeometry':case'TetrahedronBufferGeometry':geometry=new Geometries[data.type](data.radius,data.detail);break;case'RingGeometry':case'RingBufferGeometry':geometry=new Geometries[data.type](data.innerRadius,data.outerRadius,data.thetaSegments,data.phiSegments,data.thetaStart,data.thetaLength);break;case'TorusGeometry':case'TorusBufferGeometry':geometry=new Geometries[data.type](data.radius,data.tube,data.radialSegments,data.tubularSegments,data.arc);break;case'TorusKnotGeometry':case'TorusKnotBufferGeometry':geometry=new Geometries[data.type](data.radius,data.tube,data.tubularSegments,data.radialSegments,data.p,data.q);break;case'TubeGeometry':case'TubeBufferGeometry':// This only works for built-in curves (e.g. CatmullRomCurve3).
// User defined curves or instances of CurvePath will not be deserialized.
geometry=new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path),data.tubularSegments,data.radius,data.radialSegments,data.closed);break;case'LatheGeometry':case'LatheBufferGeometry':geometry=new Geometries[data.type](data.points,data.segments,data.phiStart,data.phiLength);break;case'PolyhedronGeometry':case'PolyhedronBufferGeometry':geometry=new Geometries[data.type](data.vertices,data.indices,data.radius,data.details);break;case'ShapeGeometry':case'ShapeBufferGeometry':var geometryShapes=[];for(var j=0,jl=data.shapes.length;j<jl;j++){var shape=shapes[data.shapes[j]];geometryShapes.push(shape);}geometry=new Geometries[data.type](geometryShapes,data.curveSegments);break;case'ExtrudeGeometry':case'ExtrudeBufferGeometry':var geometryShapes=[];for(var j=0,jl=data.shapes.length;j<jl;j++){var shape=shapes[data.shapes[j]];geometryShapes.push(shape);}var extrudePath=data.options.extrudePath;if(extrudePath!==undefined){data.options.extrudePath=new Curves[extrudePath.type]().fromJSON(extrudePath);}geometry=new Geometries[data.type](geometryShapes,data.options);break;case'BufferGeometry':case'InstancedBufferGeometry':geometry=bufferGeometryLoader.parse(data);break;case'Geometry':if('THREE'in window&&'LegacyJSONLoader'in THREE){var geometryLoader=new THREE.LegacyJSONLoader();geometry=geometryLoader.parse(data,this.resourcePath).geometry;}else {console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');}break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+data.type+'"');continue;}geometry.uuid=data.uuid;if(data.name!==undefined)geometry.name=data.name;if(geometry.isBufferGeometry===true&&data.userData!==undefined)geometry.userData=data.userData;geometries[data.uuid]=geometry;}}return geometries;},parseMaterials:function parseMaterials(json,textures){var cache={};// MultiMaterial
var materials={};if(json!==undefined){var loader=new MaterialLoader();loader.setTextures(textures);for(var i=0,l=json.length;i<l;i++){var data=json[i];if(data.type==='MultiMaterial'){// Deprecated
var array=[];for(var j=0;j<data.materials.length;j++){var material=data.materials[j];if(cache[material.uuid]===undefined){cache[material.uuid]=loader.parse(material);}array.push(cache[material.uuid]);}materials[data.uuid]=array;}else {if(cache[data.uuid]===undefined){cache[data.uuid]=loader.parse(data);}materials[data.uuid]=cache[data.uuid];}}}return materials;},parseAnimations:function parseAnimations(json){var animations=[];for(var i=0;i<json.length;i++){var data=json[i];var clip=AnimationClip.parse(data);if(data.uuid!==undefined)clip.uuid=data.uuid;animations.push(clip);}return animations;},parseImages:function parseImages(json,onLoad){var scope=this;var images={};function loadImage(url){scope.manager.itemStart(url);return loader.load(url,function(){scope.manager.itemEnd(url);},undefined,function(){scope.manager.itemError(url);scope.manager.itemEnd(url);});}if(json!==undefined&&json.length>0){var manager=new LoadingManager(onLoad);var loader=new ImageLoader(manager);loader.setCrossOrigin(this.crossOrigin);for(var i=0,il=json.length;i<il;i++){var image=json[i];var url=image.url;if(Array.isArray(url)){// load array of images e.g CubeTexture
images[image.uuid]=[];for(var j=0,jl=url.length;j<jl;j++){var currentUrl=url[j];var path=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(currentUrl)?currentUrl:scope.resourcePath+currentUrl;images[image.uuid].push(loadImage(path));}}else {// load single image
var path=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(image.url)?image.url:scope.resourcePath+image.url;images[image.uuid]=loadImage(path);}}}return images;},parseTextures:function parseTextures(json,images){function parseConstant(value,type){if(typeof value==='number')return value;console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.',value);return type[value];}var textures={};if(json!==undefined){for(var i=0,l=json.length;i<l;i++){var data=json[i];if(data.image===undefined){console.warn('THREE.ObjectLoader: No "image" specified for',data.uuid);}if(images[data.image]===undefined){console.warn('THREE.ObjectLoader: Undefined image',data.image);}var texture;if(Array.isArray(images[data.image])){texture=new CubeTexture(images[data.image]);}else {texture=new Texture(images[data.image]);}texture.needsUpdate=true;texture.uuid=data.uuid;if(data.name!==undefined)texture.name=data.name;if(data.mapping!==undefined)texture.mapping=parseConstant(data.mapping,TEXTURE_MAPPING);if(data.offset!==undefined)texture.offset.fromArray(data.offset);if(data.repeat!==undefined)texture.repeat.fromArray(data.repeat);if(data.center!==undefined)texture.center.fromArray(data.center);if(data.rotation!==undefined)texture.rotation=data.rotation;if(data.wrap!==undefined){texture.wrapS=parseConstant(data.wrap[0],TEXTURE_WRAPPING);texture.wrapT=parseConstant(data.wrap[1],TEXTURE_WRAPPING);}if(data.format!==undefined)texture.format=data.format;if(data.type!==undefined)texture.type=data.type;if(data.encoding!==undefined)texture.encoding=data.encoding;if(data.minFilter!==undefined)texture.minFilter=parseConstant(data.minFilter,TEXTURE_FILTER);if(data.magFilter!==undefined)texture.magFilter=parseConstant(data.magFilter,TEXTURE_FILTER);if(data.anisotropy!==undefined)texture.anisotropy=data.anisotropy;if(data.flipY!==undefined)texture.flipY=data.flipY;if(data.premultiplyAlpha!==undefined)texture.premultiplyAlpha=data.premultiplyAlpha;if(data.unpackAlignment!==undefined)texture.unpackAlignment=data.unpackAlignment;textures[data.uuid]=texture;}}return textures;},parseObject:function parseObject(data,geometries,materials){var object;function getGeometry(name){if(geometries[name]===undefined){console.warn('THREE.ObjectLoader: Undefined geometry',name);}return geometries[name];}function getMaterial(name){if(name===undefined)return undefined;if(Array.isArray(name)){var array=[];for(var i=0,l=name.length;i<l;i++){var uuid=name[i];if(materials[uuid]===undefined){console.warn('THREE.ObjectLoader: Undefined material',uuid);}array.push(materials[uuid]);}return array;}if(materials[name]===undefined){console.warn('THREE.ObjectLoader: Undefined material',name);}return materials[name];}switch(data.type){case'Scene':object=new Scene();if(data.background!==undefined){if(Number.isInteger(data.background)){object.background=new Color(data.background);}}if(data.fog!==undefined){if(data.fog.type==='Fog'){object.fog=new Fog(data.fog.color,data.fog.near,data.fog.far);}else if(data.fog.type==='FogExp2'){object.fog=new FogExp2(data.fog.color,data.fog.density);}}break;case'PerspectiveCamera':object=new PerspectiveCamera(data.fov,data.aspect,data.near,data.far);if(data.focus!==undefined)object.focus=data.focus;if(data.zoom!==undefined)object.zoom=data.zoom;if(data.filmGauge!==undefined)object.filmGauge=data.filmGauge;if(data.filmOffset!==undefined)object.filmOffset=data.filmOffset;if(data.view!==undefined)object.view=Object.assign({},data.view);break;case'OrthographicCamera':object=new OrthographicCamera(data.left,data.right,data.top,data.bottom,data.near,data.far);if(data.zoom!==undefined)object.zoom=data.zoom;if(data.view!==undefined)object.view=Object.assign({},data.view);break;case'AmbientLight':object=new AmbientLight(data.color,data.intensity);break;case'DirectionalLight':object=new DirectionalLight(data.color,data.intensity);break;case'PointLight':object=new PointLight(data.color,data.intensity,data.distance,data.decay);break;case'RectAreaLight':object=new RectAreaLight(data.color,data.intensity,data.width,data.height);break;case'SpotLight':object=new SpotLight(data.color,data.intensity,data.distance,data.angle,data.penumbra,data.decay);break;case'HemisphereLight':object=new HemisphereLight(data.color,data.groundColor,data.intensity);break;case'SkinnedMesh':console.warn('THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.');case'Mesh':var geometry=getGeometry(data.geometry);var material=getMaterial(data.material);if(geometry.bones&&geometry.bones.length>0){object=new SkinnedMesh(geometry,material);}else {object=new Mesh(geometry,material);}break;case'InstancedMesh':var geometry=getGeometry(data.geometry);var material=getMaterial(data.material);var count=data.count;var instanceMatrix=data.instanceMatrix;object=new InstancedMesh(geometry,material,count);object.instanceMatrix=new BufferAttribute(new Float32Array(instanceMatrix.array),16);break;case'LOD':object=new LOD();break;case'Line':object=new Line(getGeometry(data.geometry),getMaterial(data.material),data.mode);break;case'LineLoop':object=new LineLoop(getGeometry(data.geometry),getMaterial(data.material));break;case'LineSegments':object=new LineSegments(getGeometry(data.geometry),getMaterial(data.material));break;case'PointCloud':case'Points':object=new Points(getGeometry(data.geometry),getMaterial(data.material));break;case'Sprite':object=new Sprite(getMaterial(data.material));break;case'Group':object=new Group();break;default:object=new Object3D();}object.uuid=data.uuid;if(data.name!==undefined)object.name=data.name;if(data.matrix!==undefined){object.matrix.fromArray(data.matrix);if(data.matrixAutoUpdate!==undefined)object.matrixAutoUpdate=data.matrixAutoUpdate;if(object.matrixAutoUpdate)object.matrix.decompose(object.position,object.quaternion,object.scale);}else {if(data.position!==undefined)object.position.fromArray(data.position);if(data.rotation!==undefined)object.rotation.fromArray(data.rotation);if(data.quaternion!==undefined)object.quaternion.fromArray(data.quaternion);if(data.scale!==undefined)object.scale.fromArray(data.scale);}if(data.castShadow!==undefined)object.castShadow=data.castShadow;if(data.receiveShadow!==undefined)object.receiveShadow=data.receiveShadow;if(data.shadow){if(data.shadow.bias!==undefined)object.shadow.bias=data.shadow.bias;if(data.shadow.radius!==undefined)object.shadow.radius=data.shadow.radius;if(data.shadow.mapSize!==undefined)object.shadow.mapSize.fromArray(data.shadow.mapSize);if(data.shadow.camera!==undefined)object.shadow.camera=this.parseObject(data.shadow.camera);}if(data.visible!==undefined)object.visible=data.visible;if(data.frustumCulled!==undefined)object.frustumCulled=data.frustumCulled;if(data.renderOrder!==undefined)object.renderOrder=data.renderOrder;if(data.userData!==undefined)object.userData=data.userData;if(data.layers!==undefined)object.layers.mask=data.layers;if(data.children!==undefined){var children=data.children;for(var i=0;i<children.length;i++){object.add(this.parseObject(children[i],geometries,materials));}}if(data.type==='LOD'){if(data.autoUpdate!==undefined)object.autoUpdate=data.autoUpdate;var levels=data.levels;for(var l=0;l<levels.length;l++){var level=levels[l];var child=object.getObjectByProperty('uuid',level.object);if(child!==undefined){object.addLevel(child,level.distance);}}}return object;}});var TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,SphericalReflectionMapping:SphericalReflectionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping};var TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping};var TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,LinearFilter:LinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter};/**
 * @author thespite / http://clicktorelease.com/
 */function ImageBitmapLoader(manager){if(typeof createImageBitmap==='undefined'){console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');}if(typeof fetch==='undefined'){console.warn('THREE.ImageBitmapLoader: fetch() not supported.');}Loader.call(this,manager);this.options=undefined;}ImageBitmapLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:ImageBitmapLoader,setOptions:function setOptions(options){this.options=options;return this;},load:function load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}fetch(url).then(function(res){return res.blob();}).then(function(blob){if(scope.options===undefined){// Workaround for FireFox. It causes an error if you pass options.
return createImageBitmap(blob);}else {return createImageBitmap(blob,scope.options);}}).then(function(imageBitmap){Cache.add(url,imageBitmap);if(onLoad)onLoad(imageBitmap);scope.manager.itemEnd(url);}).catch(function(e){if(onError)onError(e);scope.manager.itemError(url);scope.manager.itemEnd(url);});scope.manager.itemStart(url);}});/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
 **/function ShapePath(){this.type='ShapePath';this.color=new Color();this.subPaths=[];this.currentPath=null;}Object.assign(ShapePath.prototype,{moveTo:function moveTo(x,y){this.currentPath=new Path();this.subPaths.push(this.currentPath);this.currentPath.moveTo(x,y);return this;},lineTo:function lineTo(x,y){this.currentPath.lineTo(x,y);return this;},quadraticCurveTo:function quadraticCurveTo(aCPx,aCPy,aX,aY){this.currentPath.quadraticCurveTo(aCPx,aCPy,aX,aY);return this;},bezierCurveTo:function bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){this.currentPath.bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY);return this;},splineThru:function splineThru(pts){this.currentPath.splineThru(pts);return this;},toShapes:function toShapes(isCCW,noHoles){function toShapesNoHoles(inSubpaths){var shapes=[];for(var i=0,l=inSubpaths.length;i<l;i++){var tmpPath=inSubpaths[i];var tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);}return shapes;}function isPointInsidePolygon(inPt,inPolygon){var polyLen=inPolygon.length;// inPt on polygon contour => immediate success    or
// toggling of inside/outside at every single! intersection point of an edge
//  with the horizontal line through inPt, left of inPt
//  not counting lowerY endpoints of edges and whole edges on that line
var inside=false;for(var p=polyLen-1,q=0;q<polyLen;p=q++){var edgeLowPt=inPolygon[p];var edgeHighPt=inPolygon[q];var edgeDx=edgeHighPt.x-edgeLowPt.x;var edgeDy=edgeHighPt.y-edgeLowPt.y;if(Math.abs(edgeDy)>Number.EPSILON){// not parallel
if(edgeDy<0){edgeLowPt=inPolygon[q];edgeDx=-edgeDx;edgeHighPt=inPolygon[p];edgeDy=-edgeDy;}if(inPt.y<edgeLowPt.y||inPt.y>edgeHighPt.y)continue;if(inPt.y===edgeLowPt.y){if(inPt.x===edgeLowPt.x)return true;// inPt is on contour ?
// continue;				// no intersection or edgeLowPt => doesn't count !!!
}else {var perpEdge=edgeDy*(inPt.x-edgeLowPt.x)-edgeDx*(inPt.y-edgeLowPt.y);if(perpEdge===0)return true;// inPt is on contour ?
if(perpEdge<0)continue;inside=!inside;// true intersection left of inPt
}}else {// parallel or collinear
if(inPt.y!==edgeLowPt.y)continue;// parallel
// edge lies on the same horizontal line as inPt
if(edgeHighPt.x<=inPt.x&&inPt.x<=edgeLowPt.x||edgeLowPt.x<=inPt.x&&inPt.x<=edgeHighPt.x)return true;// inPt: Point on contour !
// continue;
}}return inside;}var isClockWise=ShapeUtils.isClockWise;var subPaths=this.subPaths;if(subPaths.length===0)return [];if(noHoles===true)return toShapesNoHoles(subPaths);var solid,tmpPath,tmpShape,shapes=[];if(subPaths.length===1){tmpPath=subPaths[0];tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);return shapes;}var holesFirst=!isClockWise(subPaths[0].getPoints());holesFirst=isCCW?!holesFirst:holesFirst;// console.log("Holes first", holesFirst);
var betterShapeHoles=[];var newShapes=[];var newShapeHoles=[];var mainIdx=0;var tmpPoints;newShapes[mainIdx]=undefined;newShapeHoles[mainIdx]=[];for(var i=0,l=subPaths.length;i<l;i++){tmpPath=subPaths[i];tmpPoints=tmpPath.getPoints();solid=isClockWise(tmpPoints);solid=isCCW?!solid:solid;if(solid){if(!holesFirst&&newShapes[mainIdx])mainIdx++;newShapes[mainIdx]={s:new Shape(),p:tmpPoints};newShapes[mainIdx].s.curves=tmpPath.curves;if(holesFirst)mainIdx++;newShapeHoles[mainIdx]=[];//console.log('cw', i);
}else {newShapeHoles[mainIdx].push({h:tmpPath,p:tmpPoints[0]});//console.log('ccw', i);
}}// only Holes? -> probably all Shapes with wrong orientation
if(!newShapes[0])return toShapesNoHoles(subPaths);if(newShapes.length>1){var ambiguous=false;var toChange=[];for(var sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){betterShapeHoles[sIdx]=[];}for(var sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){var sho=newShapeHoles[sIdx];for(var hIdx=0;hIdx<sho.length;hIdx++){var ho=sho[hIdx];var hole_unassigned=true;for(var s2Idx=0;s2Idx<newShapes.length;s2Idx++){if(isPointInsidePolygon(ho.p,newShapes[s2Idx].p)){if(sIdx!==s2Idx)toChange.push({froms:sIdx,tos:s2Idx,hole:hIdx});if(hole_unassigned){hole_unassigned=false;betterShapeHoles[s2Idx].push(ho);}else {ambiguous=true;}}}if(hole_unassigned){betterShapeHoles[sIdx].push(ho);}}}// console.log("ambiguous: ", ambiguous);
if(toChange.length>0){// console.log("to change: ", toChange);
if(!ambiguous)newShapeHoles=betterShapeHoles;}}var tmpHoles;for(var i=0,il=newShapes.length;i<il;i++){tmpShape=newShapes[i].s;shapes.push(tmpShape);tmpHoles=newShapeHoles[i];for(var j=0,jl=tmpHoles.length;j<jl;j++){tmpShape.holes.push(tmpHoles[j].h);}}//console.log("shape", shapes);
return shapes;}});/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author mrdoob / http://mrdoob.com/
 */function Font(data){this.type='Font';this.data=data;}Object.assign(Font.prototype,{isFont:true,generateShapes:function generateShapes(text,size){if(size===undefined)size=100;var shapes=[];var paths=createPaths(text,size,this.data);for(var p=0,pl=paths.length;p<pl;p++){Array.prototype.push.apply(shapes,paths[p].toShapes());}return shapes;}});function createPaths(text,size,data){var chars=Array.from?Array.from(text):String(text).split('');// workaround for IE11, see #13988
var scale=size/data.resolution;var line_height=(data.boundingBox.yMax-data.boundingBox.yMin+data.underlineThickness)*scale;var paths=[];var offsetX=0,offsetY=0;for(var i=0;i<chars.length;i++){var char=chars[i];if(char==='\\n'){offsetX=0;offsetY-=line_height;}else {var ret=createPath(char,scale,offsetX,offsetY,data);offsetX+=ret.offsetX;paths.push(ret.path);}}return paths;}function createPath(char,scale,offsetX,offsetY,data){var glyph=data.glyphs[char]||data.glyphs['?'];if(!glyph){console.error('THREE.Font: character "'+char+'" does not exists in font family '+data.familyName+'.');return;}var path=new ShapePath();var x,y,cpx,cpy,cpx1,cpy1,cpx2,cpy2;if(glyph.o){var outline=glyph._cachedOutline||(glyph._cachedOutline=glyph.o.split(' '));for(var i=0,l=outline.length;i<l;){var action=outline[i++];switch(action){case'm':// moveTo
x=outline[i++]*scale+offsetX;y=outline[i++]*scale+offsetY;path.moveTo(x,y);break;case'l':// lineTo
x=outline[i++]*scale+offsetX;y=outline[i++]*scale+offsetY;path.lineTo(x,y);break;case'q':// quadraticCurveTo
cpx=outline[i++]*scale+offsetX;cpy=outline[i++]*scale+offsetY;cpx1=outline[i++]*scale+offsetX;cpy1=outline[i++]*scale+offsetY;path.quadraticCurveTo(cpx1,cpy1,cpx,cpy);break;case'b':// bezierCurveTo
cpx=outline[i++]*scale+offsetX;cpy=outline[i++]*scale+offsetY;cpx1=outline[i++]*scale+offsetX;cpy1=outline[i++]*scale+offsetY;cpx2=outline[i++]*scale+offsetX;cpy2=outline[i++]*scale+offsetY;path.bezierCurveTo(cpx1,cpy1,cpx2,cpy2,cpx,cpy);break;}}}return {offsetX:glyph.ha*scale,path:path};}/**
 * @author mrdoob / http://mrdoob.com/
 */function FontLoader(manager){Loader.call(this,manager);}FontLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:FontLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(this.manager);loader.setPath(this.path);loader.load(url,function(text){var json;try{json=JSON.parse(text);}catch(e){console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');json=JSON.parse(text.substring(65,text.length-2));}var font=scope.parse(json);if(onLoad)onLoad(font);},onProgress,onError);},parse:function parse(json){return new Font(json);}});/**
 * @author mrdoob / http://mrdoob.com/
 */var _context;var AudioContext$1={getContext:function getContext(){if(_context===undefined){_context=new(window.AudioContext||window.webkitAudioContext)();}return _context;},setContext:function setContext(value){_context=value;}};/**
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */function AudioLoader(manager){Loader.call(this,manager);}AudioLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:AudioLoader,load:function load(url,onLoad,onProgress,onError){var loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.setPath(this.path);loader.load(url,function(buffer){// Create a copy of the buffer. The \`decodeAudioData\` method
// detaches the buffer when complete, preventing reuse.
var bufferCopy=buffer.slice(0);var context=AudioContext$1.getContext();context.decodeAudioData(bufferCopy,function(audioBuffer){onLoad(audioBuffer);});},onProgress,onError);}});/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */ // 3-band SH defined by 9 coefficients
function SphericalHarmonics3(){this.coefficients=[];for(var i=0;i<9;i++){this.coefficients.push(new Vector3());}}Object.assign(SphericalHarmonics3.prototype,{isSphericalHarmonics3:true,set:function set(coefficients){for(var i=0;i<9;i++){this.coefficients[i].copy(coefficients[i]);}return this;},zero:function zero(){for(var i=0;i<9;i++){this.coefficients[i].set(0,0,0);}return this;},// get the radiance in the direction of the normal
// target is a Vector3
getAt:function getAt(normal,target){// normal is assumed to be unit length
var x=normal.x,y=normal.y,z=normal.z;var coeff=this.coefficients;// band 0
target.copy(coeff[0]).multiplyScalar(0.282095);// band 1
target.addScale(coeff[1],0.488603*y);target.addScale(coeff[2],0.488603*z);target.addScale(coeff[3],0.488603*x);// band 2
target.addScale(coeff[4],1.092548*(x*y));target.addScale(coeff[5],1.092548*(y*z));target.addScale(coeff[6],0.315392*(3.0*z*z-1.0));target.addScale(coeff[7],1.092548*(x*z));target.addScale(coeff[8],0.546274*(x*x-y*y));return target;},// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
// target is a Vector3
// https://graphics.stanford.edu/papers/envmap/envmap.pdf
getIrradianceAt:function getIrradianceAt(normal,target){// normal is assumed to be unit length
var x=normal.x,y=normal.y,z=normal.z;var coeff=this.coefficients;// band 0
target.copy(coeff[0]).multiplyScalar(0.886227);// π * 0.282095
// band 1
target.addScale(coeff[1],2.0*0.511664*y);// ( 2 * π / 3 ) * 0.488603
target.addScale(coeff[2],2.0*0.511664*z);target.addScale(coeff[3],2.0*0.511664*x);// band 2
target.addScale(coeff[4],2.0*0.429043*x*y);// ( π / 4 ) * 1.092548
target.addScale(coeff[5],2.0*0.429043*y*z);target.addScale(coeff[6],0.743125*z*z-0.247708);// ( π / 4 ) * 0.315392 * 3
target.addScale(coeff[7],2.0*0.429043*x*z);target.addScale(coeff[8],0.429043*(x*x-y*y));// ( π / 4 ) * 0.546274
return target;},add:function add(sh){for(var i=0;i<9;i++){this.coefficients[i].add(sh.coefficients[i]);}return this;},scale:function scale(s){for(var i=0;i<9;i++){this.coefficients[i].multiplyScalar(s);}return this;},lerp:function lerp(sh,alpha){for(var i=0;i<9;i++){this.coefficients[i].lerp(sh.coefficients[i],alpha);}return this;},equals:function equals(sh){for(var i=0;i<9;i++){if(!this.coefficients[i].equals(sh.coefficients[i])){return false;}}return true;},copy:function copy(sh){return this.set(sh.coefficients);},clone:function clone(){return new this.constructor().copy(this);},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;var coefficients=this.coefficients;for(var i=0;i<9;i++){coefficients[i].fromArray(array,offset+i*3);}return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;var coefficients=this.coefficients;for(var i=0;i<9;i++){coefficients[i].toArray(array,offset+i*3);}return array;}});Object.assign(SphericalHarmonics3,{// evaluate the basis functions
// shBasis is an Array[ 9 ]
getBasisAt:function getBasisAt(normal,shBasis){// normal is assumed to be unit length
var x=normal.x,y=normal.y,z=normal.z;// band 0
shBasis[0]=0.282095;// band 1
shBasis[1]=0.488603*y;shBasis[2]=0.488603*z;shBasis[3]=0.488603*x;// band 2
shBasis[4]=1.092548*x*y;shBasis[5]=1.092548*y*z;shBasis[6]=0.315392*(3*z*z-1);shBasis[7]=1.092548*x*z;shBasis[8]=0.546274*(x*x-y*y);}});/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * A LightProbe is a source of indirect-diffuse light
 */function LightProbe(sh,intensity){Light.call(this,undefined,intensity);this.sh=sh!==undefined?sh:new SphericalHarmonics3();}LightProbe.prototype=Object.assign(Object.create(Light.prototype),{constructor:LightProbe,isLightProbe:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.sh.copy(source.sh);this.intensity=source.intensity;return this;},toJSON:function toJSON(meta){var data=Light.prototype.toJSON.call(this,meta);// data.sh = this.sh.toArray(); // todo
return data;}});/**
 * @author WestLangley / http://github.com/WestLangley
 */function HemisphereLightProbe(skyColor,groundColor,intensity){LightProbe.call(this,undefined,intensity);var color1=new Color().set(skyColor);var color2=new Color().set(groundColor);var sky=new Vector3(color1.r,color1.g,color1.b);var ground=new Vector3(color2.r,color2.g,color2.b);// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
var c0=Math.sqrt(Math.PI);var c1=c0*Math.sqrt(0.75);this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);}HemisphereLightProbe.prototype=Object.assign(Object.create(LightProbe.prototype),{constructor:HemisphereLightProbe,isHemisphereLightProbe:true,copy:function copy(source){// modifying colors not currently supported
LightProbe.prototype.copy.call(this,source);return this;},toJSON:function toJSON(meta){var data=LightProbe.prototype.toJSON.call(this,meta);// data.sh = this.sh.toArray(); // todo
return data;}});/**
 * @author WestLangley / http://github.com/WestLangley
 */function AmbientLightProbe(color,intensity){LightProbe.call(this,undefined,intensity);var color1=new Color().set(color);// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
this.sh.coefficients[0].set(color1.r,color1.g,color1.b).multiplyScalar(2*Math.sqrt(Math.PI));}AmbientLightProbe.prototype=Object.assign(Object.create(LightProbe.prototype),{constructor:AmbientLightProbe,isAmbientLightProbe:true,copy:function copy(source){// modifying color not currently supported
LightProbe.prototype.copy.call(this,source);return this;},toJSON:function toJSON(meta){var data=LightProbe.prototype.toJSON.call(this,meta);// data.sh = this.sh.toArray(); // todo
return data;}});var _eyeRight=new Matrix4();var _eyeLeft=new Matrix4();/**
 * @author mrdoob / http://mrdoob.com/
 */function StereoCamera(){this.type='StereoCamera';this.aspect=1;this.eyeSep=0.064;this.cameraL=new PerspectiveCamera();this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new PerspectiveCamera();this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null};}Object.assign(StereoCamera.prototype,{update:function update(camera){var cache=this._cache;var needsUpdate=cache.focus!==camera.focus||cache.fov!==camera.fov||cache.aspect!==camera.aspect*this.aspect||cache.near!==camera.near||cache.far!==camera.far||cache.zoom!==camera.zoom||cache.eyeSep!==this.eyeSep;if(needsUpdate){cache.focus=camera.focus;cache.fov=camera.fov;cache.aspect=camera.aspect*this.aspect;cache.near=camera.near;cache.far=camera.far;cache.zoom=camera.zoom;cache.eyeSep=this.eyeSep;// Off-axis stereoscopic effect based on
// http://paulbourke.net/stereographics/stereorender/
var projectionMatrix=camera.projectionMatrix.clone();var eyeSepHalf=cache.eyeSep/2;var eyeSepOnProjection=eyeSepHalf*cache.near/cache.focus;var ymax=cache.near*Math.tan(MathUtils.DEG2RAD*cache.fov*0.5)/cache.zoom;var xmin,xmax;// translate xOffset
_eyeLeft.elements[12]=-eyeSepHalf;_eyeRight.elements[12]=eyeSepHalf;// for left eye
xmin=-ymax*cache.aspect+eyeSepOnProjection;xmax=ymax*cache.aspect+eyeSepOnProjection;projectionMatrix.elements[0]=2*cache.near/(xmax-xmin);projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraL.projectionMatrix.copy(projectionMatrix);// for right eye
xmin=-ymax*cache.aspect-eyeSepOnProjection;xmax=ymax*cache.aspect-eyeSepOnProjection;projectionMatrix.elements[0]=2*cache.near/(xmax-xmin);projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraR.projectionMatrix.copy(projectionMatrix);}this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);}});/**
 * @author alteredq / http://alteredqualia.com/
 */function Clock(autoStart){this.autoStart=autoStart!==undefined?autoStart:true;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false;}Object.assign(Clock.prototype,{start:function start(){this.startTime=(typeof performance==='undefined'?Date:performance).now();// see #10732
this.oldTime=this.startTime;this.elapsedTime=0;this.running=true;},stop:function stop(){this.getElapsedTime();this.running=false;this.autoStart=false;},getElapsedTime:function getElapsedTime(){this.getDelta();return this.elapsedTime;},getDelta:function getDelta(){var diff=0;if(this.autoStart&&!this.running){this.start();return 0;}if(this.running){var newTime=(typeof performance==='undefined'?Date:performance).now();diff=(newTime-this.oldTime)/1000;this.oldTime=newTime;this.elapsedTime+=diff;}return diff;}});/**
 * @author mrdoob / http://mrdoob.com/
 */var _position$2=new Vector3();var _quaternion$3=new Quaternion();var _scale$1=new Vector3();var _orientation=new Vector3();function AudioListener(){Object3D.call(this);this.type='AudioListener';this.context=AudioContext$1.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;this.timeDelta=0;// private
this._clock=new Clock();}AudioListener.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:AudioListener,getInput:function getInput(){return this.gain;},removeFilter:function removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null;}return this;},getFilter:function getFilter(){return this.filter;},setFilter:function setFilter(value){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);}else {this.gain.disconnect(this.context.destination);}this.filter=value;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this;},getMasterVolume:function getMasterVolume(){return this.gain.gain.value;},setMasterVolume:function setMasterVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;},updateMatrixWorld:function updateMatrixWorld(force){Object3D.prototype.updateMatrixWorld.call(this,force);var listener=this.context.listener;var up=this.up;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(_position$2,_quaternion$3,_scale$1);_orientation.set(0,0,-1).applyQuaternion(_quaternion$3);if(listener.positionX){// code path for Chrome (see #14393)
var endTime=this.context.currentTime+this.timeDelta;listener.positionX.linearRampToValueAtTime(_position$2.x,endTime);listener.positionY.linearRampToValueAtTime(_position$2.y,endTime);listener.positionZ.linearRampToValueAtTime(_position$2.z,endTime);listener.forwardX.linearRampToValueAtTime(_orientation.x,endTime);listener.forwardY.linearRampToValueAtTime(_orientation.y,endTime);listener.forwardZ.linearRampToValueAtTime(_orientation.z,endTime);listener.upX.linearRampToValueAtTime(up.x,endTime);listener.upY.linearRampToValueAtTime(up.y,endTime);listener.upZ.linearRampToValueAtTime(up.z,endTime);}else {listener.setPosition(_position$2.x,_position$2.y,_position$2.z);listener.setOrientation(_orientation.x,_orientation.y,_orientation.z,up.x,up.y,up.z);}}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */function Audio(listener){Object3D.call(this);this.type='Audio';this.listener=listener;this.context=listener.context;this.gain=this.context.createGain();this.gain.connect(listener.getInput());this.autoplay=false;this.buffer=null;this.detune=0;this.loop=false;this.loopStart=0;this.loopEnd=0;this.offset=0;this.duration=undefined;this.playbackRate=1;this.isPlaying=false;this.hasPlaybackControl=true;this.sourceType='empty';this._startedAt=0;this._pausedAt=0;this.filters=[];}Audio.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Audio,getOutput:function getOutput(){return this.gain;},setNodeSource:function setNodeSource(audioNode){this.hasPlaybackControl=false;this.sourceType='audioNode';this.source=audioNode;this.connect();return this;},setMediaElementSource:function setMediaElementSource(mediaElement){this.hasPlaybackControl=false;this.sourceType='mediaNode';this.source=this.context.createMediaElementSource(mediaElement);this.connect();return this;},setMediaStreamSource:function setMediaStreamSource(mediaStream){this.hasPlaybackControl=false;this.sourceType='mediaStreamNode';this.source=this.context.createMediaStreamSource(mediaStream);this.connect();return this;},setBuffer:function setBuffer(audioBuffer){this.buffer=audioBuffer;this.sourceType='buffer';if(this.autoplay)this.play();return this;},play:function play(delay){if(delay===undefined)delay=0;if(this.isPlaying===true){console.warn('THREE.Audio: Audio is already playing.');return;}if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this._startedAt=this.context.currentTime+delay;var source=this.context.createBufferSource();source.buffer=this.buffer;source.loop=this.loop;source.loopStart=this.loopStart;source.loopEnd=this.loopEnd;source.onended=this.onEnded.bind(this);source.start(this._startedAt,this._pausedAt+this.offset,this.duration);this.isPlaying=true;this.source=source;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect();},pause:function pause(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}if(this.isPlaying===true){this._pausedAt=(this.context.currentTime-this._startedAt)*this.playbackRate;this.source.stop();this.source.onended=null;this.isPlaying=false;}return this;},stop:function stop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this._pausedAt=0;this.source.stop();this.source.onended=null;this.isPlaying=false;return this;},connect:function connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var i=1,l=this.filters.length;i<l;i++){this.filters[i-1].connect(this.filters[i]);}this.filters[this.filters.length-1].connect(this.getOutput());}else {this.source.connect(this.getOutput());}return this;},disconnect:function disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var i=1,l=this.filters.length;i<l;i++){this.filters[i-1].disconnect(this.filters[i]);}this.filters[this.filters.length-1].disconnect(this.getOutput());}else {this.source.disconnect(this.getOutput());}return this;},getFilters:function getFilters(){return this.filters;},setFilters:function setFilters(value){if(!value)value=[];if(this.isPlaying===true){this.disconnect();this.filters=value;this.connect();}else {this.filters=value;}return this;},setDetune:function setDetune(value){this.detune=value;if(this.source.detune===undefined)return;// only set detune when available
if(this.isPlaying===true){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,0.01);}return this;},getDetune:function getDetune(){return this.detune;},getFilter:function getFilter(){return this.getFilters()[0];},setFilter:function setFilter(filter){return this.setFilters(filter?[filter]:[]);},setPlaybackRate:function setPlaybackRate(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.playbackRate=value;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,0.01);}return this;},getPlaybackRate:function getPlaybackRate(){return this.playbackRate;},onEnded:function onEnded(){this.isPlaying=false;},getLoop:function getLoop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return false;}return this.loop;},setLoop:function setLoop(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.loop=value;if(this.isPlaying===true){this.source.loop=this.loop;}return this;},setLoopStart:function setLoopStart(value){this.loopStart=value;return this;},setLoopEnd:function setLoopEnd(value){this.loopEnd=value;return this;},getVolume:function getVolume(){return this.gain.gain.value;},setVolume:function setVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 */var _position$3=new Vector3();var _quaternion$4=new Quaternion();var _scale$2=new Vector3();var _orientation$1=new Vector3();function PositionalAudio(listener){Audio.call(this,listener);this.panner=this.context.createPanner();this.panner.panningModel='HRTF';this.panner.connect(this.gain);}PositionalAudio.prototype=Object.assign(Object.create(Audio.prototype),{constructor:PositionalAudio,getOutput:function getOutput(){return this.panner;},getRefDistance:function getRefDistance(){return this.panner.refDistance;},setRefDistance:function setRefDistance(value){this.panner.refDistance=value;return this;},getRolloffFactor:function getRolloffFactor(){return this.panner.rolloffFactor;},setRolloffFactor:function setRolloffFactor(value){this.panner.rolloffFactor=value;return this;},getDistanceModel:function getDistanceModel(){return this.panner.distanceModel;},setDistanceModel:function setDistanceModel(value){this.panner.distanceModel=value;return this;},getMaxDistance:function getMaxDistance(){return this.panner.maxDistance;},setMaxDistance:function setMaxDistance(value){this.panner.maxDistance=value;return this;},setDirectionalCone:function setDirectionalCone(coneInnerAngle,coneOuterAngle,coneOuterGain){this.panner.coneInnerAngle=coneInnerAngle;this.panner.coneOuterAngle=coneOuterAngle;this.panner.coneOuterGain=coneOuterGain;return this;},updateMatrixWorld:function updateMatrixWorld(force){Object3D.prototype.updateMatrixWorld.call(this,force);if(this.hasPlaybackControl===true&&this.isPlaying===false)return;this.matrixWorld.decompose(_position$3,_quaternion$4,_scale$2);_orientation$1.set(0,0,1).applyQuaternion(_quaternion$4);var panner=this.panner;if(panner.positionX){// code path for Chrome and Firefox (see #14393)
var endTime=this.context.currentTime+this.listener.timeDelta;panner.positionX.linearRampToValueAtTime(_position$3.x,endTime);panner.positionY.linearRampToValueAtTime(_position$3.y,endTime);panner.positionZ.linearRampToValueAtTime(_position$3.z,endTime);panner.orientationX.linearRampToValueAtTime(_orientation$1.x,endTime);panner.orientationY.linearRampToValueAtTime(_orientation$1.y,endTime);panner.orientationZ.linearRampToValueAtTime(_orientation$1.z,endTime);}else {panner.setPosition(_position$3.x,_position$3.y,_position$3.z);panner.setOrientation(_orientation$1.x,_orientation$1.y,_orientation$1.z);}}});/**
 * @author mrdoob / http://mrdoob.com/
 */function AudioAnalyser(audio,fftSize){this.analyser=audio.context.createAnalyser();this.analyser.fftSize=fftSize!==undefined?fftSize:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);audio.getOutput().connect(this.analyser);}Object.assign(AudioAnalyser.prototype,{getFrequencyData:function getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data;},getAverageFrequency:function getAverageFrequency(){var value=0,data=this.getFrequencyData();for(var i=0;i<data.length;i++){value+=data[i];}return value/data.length;}});/**
 *
 * Buffered scene graph property that allows weighted accumulation.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function PropertyMixer(binding,typeName,valueSize){this.binding=binding;this.valueSize=valueSize;var bufferType=Float64Array,mixFunction;switch(typeName){case'quaternion':mixFunction=this._slerp;break;case'string':case'bool':bufferType=Array;mixFunction=this._select;break;default:mixFunction=this._lerp;}this.buffer=new bufferType(valueSize*4);// layout: [ incoming | accu0 | accu1 | orig ]
//
// interpolators can use .buffer as their .result
// the data then goes to 'incoming'
//
// 'accu0' and 'accu1' are used frame-interleaved for
// the cumulative result and are compared to detect
// changes
//
// 'orig' stores the original state of the property
this._mixBufferRegion=mixFunction;this.cumulativeWeight=0;this.useCount=0;this.referenceCount=0;}Object.assign(PropertyMixer.prototype,{// accumulate data in the 'incoming' region into 'accu<i>'
accumulate:function accumulate(accuIndex,weight){// note: happily accumulating nothing when weight = 0, the caller knows
// the weight and shouldn't have made the call in the first place
var buffer=this.buffer,stride=this.valueSize,offset=accuIndex*stride+stride,currentWeight=this.cumulativeWeight;if(currentWeight===0){// accuN := incoming * weight
for(var i=0;i!==stride;++i){buffer[offset+i]=buffer[i];}currentWeight=weight;}else {// accuN := accuN + incoming * weight
currentWeight+=weight;var mix=weight/currentWeight;this._mixBufferRegion(buffer,offset,0,mix,stride);}this.cumulativeWeight=currentWeight;},// apply the state of 'accu<i>' to the binding when accus differ
apply:function apply(accuIndex){var stride=this.valueSize,buffer=this.buffer,offset=accuIndex*stride+stride,weight=this.cumulativeWeight,binding=this.binding;this.cumulativeWeight=0;if(weight<1){// accuN := accuN + original * ( 1 - cumulativeWeight )
var originalValueOffset=stride*3;this._mixBufferRegion(buffer,offset,originalValueOffset,1-weight,stride);}for(var i=stride,e=stride+stride;i!==e;++i){if(buffer[i]!==buffer[i+stride]){// value has changed -> update scene graph
binding.setValue(buffer,offset);break;}}},// remember the state of the bound property and copy it to both accus
saveOriginalState:function saveOriginalState(){var binding=this.binding;var buffer=this.buffer,stride=this.valueSize,originalValueOffset=stride*3;binding.getValue(buffer,originalValueOffset);// accu[0..1] := orig -- initially detect changes against the original
for(var i=stride,e=originalValueOffset;i!==e;++i){buffer[i]=buffer[originalValueOffset+i%stride];}this.cumulativeWeight=0;},// apply the state previously taken via 'saveOriginalState' to the binding
restoreOriginalState:function restoreOriginalState(){var originalValueOffset=this.valueSize*3;this.binding.setValue(this.buffer,originalValueOffset);},// mix functions
_select:function _select(buffer,dstOffset,srcOffset,t,stride){if(t>=0.5){for(var i=0;i!==stride;++i){buffer[dstOffset+i]=buffer[srcOffset+i];}}},_slerp:function _slerp(buffer,dstOffset,srcOffset,t){Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,srcOffset,t);},_lerp:function _lerp(buffer,dstOffset,srcOffset,t,stride){var s=1-t;for(var i=0;i!==stride;++i){var j=dstOffset+i;buffer[j]=buffer[j]*s+buffer[srcOffset+i]*t;}}});/**
 *
 * A reference to a real property in the scene graph.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */ // Characters [].:/ are reserved for track binding syntax.
var _RESERVED_CHARS_RE='\\\\[\\\\]\\\\.:\\\\/';var _reservedRe=new RegExp('['+_RESERVED_CHARS_RE+']','g');// Attempts to allow node names from any language. ES5's \`\\w\` regexp matches
// only latin characters, and the unicode \\p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
var _wordChar='[^'+_RESERVED_CHARS_RE+']';var _wordCharOrDot='[^'+_RESERVED_CHARS_RE.replace('\\\\.','')+']';// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
var _directoryRe=/((?:WC+[\\/:])*)/.source.replace('WC',_wordChar);// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
var _nodeRe=/(WCOD+)?/.source.replace('WCOD',_wordCharOrDot);// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
var _objectRe=/(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC',_wordChar);// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
var _propertyRe=/\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC',_wordChar);var _trackRe=new RegExp(''+'^'+_directoryRe+_nodeRe+_objectRe+_propertyRe+'$');var _supportedObjectNames=['material','materials','bones'];function Composite(targetGroup,path,optionalParsedPath){var parsedPath=optionalParsedPath||PropertyBinding.parseTrackName(path);this._targetGroup=targetGroup;this._bindings=targetGroup.subscribe_(path,parsedPath);}Object.assign(Composite.prototype,{getValue:function getValue(array,offset){this.bind();// bind all binding
var firstValidIndex=this._targetGroup.nCachedObjects_,binding=this._bindings[firstValidIndex];// and only call .getValue on the first
if(binding!==undefined)binding.getValue(array,offset);},setValue:function setValue(array,offset){var bindings=this._bindings;for(var i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].setValue(array,offset);}},bind:function bind(){var bindings=this._bindings;for(var i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].bind();}},unbind:function unbind(){var bindings=this._bindings;for(var i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].unbind();}}});function PropertyBinding(rootNode,path,parsedPath){this.path=path;this.parsedPath=parsedPath||PropertyBinding.parseTrackName(path);this.node=PropertyBinding.findNode(rootNode,this.parsedPath.nodeName)||rootNode;this.rootNode=rootNode;}Object.assign(PropertyBinding,{Composite:Composite,create:function create(root,path,parsedPath){if(!(root&&root.isAnimationObjectGroup)){return new PropertyBinding(root,path,parsedPath);}else {return new PropertyBinding.Composite(root,path,parsedPath);}},/**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */sanitizeNodeName:function sanitizeNodeName(name){return name.replace(/\\s/g,'_').replace(_reservedRe,'');},parseTrackName:function parseTrackName(trackName){var matches=_trackRe.exec(trackName);if(!matches){throw new Error('PropertyBinding: Cannot parse trackName: '+trackName);}var results={// directoryName: matches[ 1 ], // (tschw) currently unused
nodeName:matches[2],objectName:matches[3],objectIndex:matches[4],propertyName:matches[5],// required
propertyIndex:matches[6]};var lastDot=results.nodeName&&results.nodeName.lastIndexOf('.');if(lastDot!==undefined&&lastDot!==-1){var objectName=results.nodeName.substring(lastDot+1);// Object names must be checked against a whitelist. Otherwise, there
// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
// 'bar' could be the objectName, or part of a nodeName (which can
// include '.' characters).
if(_supportedObjectNames.indexOf(objectName)!==-1){results.nodeName=results.nodeName.substring(0,lastDot);results.objectName=objectName;}}if(results.propertyName===null||results.propertyName.length===0){throw new Error('PropertyBinding: can not parse propertyName from trackName: '+trackName);}return results;},findNode:function findNode(root,nodeName){if(!nodeName||nodeName===""||nodeName==="root"||nodeName==="."||nodeName===-1||nodeName===root.name||nodeName===root.uuid){return root;}// search into skeleton bones.
if(root.skeleton){var bone=root.skeleton.getBoneByName(nodeName);if(bone!==undefined){return bone;}}// search into node subtree.
if(root.children){var searchNodeSubtree=function searchNodeSubtree(children){for(var i=0;i<children.length;i++){var childNode=children[i];if(childNode.name===nodeName||childNode.uuid===nodeName){return childNode;}var result=searchNodeSubtree(childNode.children);if(result)return result;}return null;};var subTreeNode=searchNodeSubtree(root.children);if(subTreeNode){return subTreeNode;}}return null;}});Object.assign(PropertyBinding.prototype,{// prototype, continued
// these are used to "bind" a nonexistent property
_getValue_unavailable:function _getValue_unavailable(){},_setValue_unavailable:function _setValue_unavailable(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function getValue_direct(buffer,offset){buffer[offset]=this.node[this.propertyName];},function getValue_array(buffer,offset){var source=this.resolvedProperty;for(var i=0,n=source.length;i!==n;++i){buffer[offset++]=source[i];}},function getValue_arrayElement(buffer,offset){buffer[offset]=this.resolvedProperty[this.propertyIndex];},function getValue_toArray(buffer,offset){this.resolvedProperty.toArray(buffer,offset);}],SetterByBindingTypeAndVersioning:[[// Direct
function setValue_direct(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];},function setValue_direct_setNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.needsUpdate=true;},function setValue_direct_setMatrixWorldNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}],[// EntireArray
function setValue_array(buffer,offset){var dest=this.resolvedProperty;for(var i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}},function setValue_array_setNeedsUpdate(buffer,offset){var dest=this.resolvedProperty;for(var i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}this.targetObject.needsUpdate=true;},function setValue_array_setMatrixWorldNeedsUpdate(buffer,offset){var dest=this.resolvedProperty;for(var i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}this.targetObject.matrixWorldNeedsUpdate=true;}],[// ArrayElement
function setValue_arrayElement(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];},function setValue_arrayElement_setNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.needsUpdate=true;},function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}],[// HasToFromArray
function setValue_fromArray(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);},function setValue_fromArray_setNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.needsUpdate=true;},function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.matrixWorldNeedsUpdate=true;}]],getValue:function getValue_unbound(targetArray,offset){this.bind();this.getValue(targetArray,offset);// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
},setValue:function getValue_unbound(sourceArray,offset){this.bind();this.setValue(sourceArray,offset);},// create getter / setter pair for a property in the scene graph
bind:function bind(){var targetObject=this.node,parsedPath=this.parsedPath,objectName=parsedPath.objectName,propertyName=parsedPath.propertyName,propertyIndex=parsedPath.propertyIndex;if(!targetObject){targetObject=PropertyBinding.findNode(this.rootNode,parsedPath.nodeName)||this.rootNode;this.node=targetObject;}// set fail state so we can just 'return' on error
this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;// ensure there is a value node
if(!targetObject){console.error('THREE.PropertyBinding: Trying to update node for track: '+this.path+' but it wasn\\'t found.');return;}if(objectName){var objectIndex=parsedPath.objectIndex;// special cases were we need to reach deeper into the hierarchy to get the face materials....
switch(objectName){case'materials':if(!targetObject.material){console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.',this);return;}if(!targetObject.material.materials){console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.',this);return;}targetObject=targetObject.material.materials;break;case'bones':if(!targetObject.skeleton){console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.',this);return;}// potential future optimization: skip this if propertyIndex is already an integer
// and convert the integer string to a true integer.
targetObject=targetObject.skeleton.bones;// support resolving morphTarget names into indices.
for(var i=0;i<targetObject.length;i++){if(targetObject[i].name===objectIndex){objectIndex=i;break;}}break;default:if(targetObject[objectName]===undefined){console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.',this);return;}targetObject=targetObject[objectName];}if(objectIndex!==undefined){if(targetObject[objectIndex]===undefined){console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.',this,targetObject);return;}targetObject=targetObject[objectIndex];}}// resolve property
var nodeProperty=targetObject[propertyName];if(nodeProperty===undefined){var nodeName=parsedPath.nodeName;console.error('THREE.PropertyBinding: Trying to update property for track: '+nodeName+'.'+propertyName+' but it wasn\\'t found.',targetObject);return;}// determine versioning scheme
var versioning=this.Versioning.None;this.targetObject=targetObject;if(targetObject.needsUpdate!==undefined){// material
versioning=this.Versioning.NeedsUpdate;}else if(targetObject.matrixWorldNeedsUpdate!==undefined){// node transform
versioning=this.Versioning.MatrixWorldNeedsUpdate;}// determine how the property gets bound
var bindingType=this.BindingType.Direct;if(propertyIndex!==undefined){// access a sub element of the property array (only primitives are supported right now)
if(propertyName==="morphTargetInfluences"){// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
// support resolving morphTarget names into indices.
if(!targetObject.geometry){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.',this);return;}if(targetObject.geometry.isBufferGeometry){if(!targetObject.geometry.morphAttributes){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.',this);return;}for(var i=0;i<this.node.geometry.morphAttributes.position.length;i++){if(targetObject.geometry.morphAttributes.position[i].name===propertyIndex){propertyIndex=i;break;}}}else {if(!targetObject.geometry.morphTargets){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.',this);return;}for(var i=0;i<this.node.geometry.morphTargets.length;i++){if(targetObject.geometry.morphTargets[i].name===propertyIndex){propertyIndex=i;break;}}}}bindingType=this.BindingType.ArrayElement;this.resolvedProperty=nodeProperty;this.propertyIndex=propertyIndex;}else if(nodeProperty.fromArray!==undefined&&nodeProperty.toArray!==undefined){// must use copy for Object3D.Euler/Quaternion
bindingType=this.BindingType.HasFromToArray;this.resolvedProperty=nodeProperty;}else if(Array.isArray(nodeProperty)){bindingType=this.BindingType.EntireArray;this.resolvedProperty=nodeProperty;}else {this.propertyName=propertyName;}// select getter / setter
this.getValue=this.GetterByBindingType[bindingType];this.setValue=this.SetterByBindingTypeAndVersioning[bindingType][versioning];},unbind:function unbind(){this.node=null;// back to the prototype version of getValue / setValue
// note: avoiding to mutate the shape of 'this' via 'delete'
this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound;}});//!\\ DECLARE ALIAS AFTER assign prototype !
Object.assign(PropertyBinding.prototype,{// initial state of these methods that calls 'bind'
_getValue_unbound:PropertyBinding.prototype.getValue,_setValue_unbound:PropertyBinding.prototype.setValue});/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 *
 * @author tschw
 */function AnimationObjectGroup(){this.uuid=MathUtils.generateUUID();// cached objects followed by the active ones
this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;// threshold
// note: read by PropertyBinding.Composite
var indices={};this._indicesByUUID=indices;// for bookkeeping
for(var i=0,n=arguments.length;i!==n;++i){indices[arguments[i].uuid]=i;}this._paths=[];// inside: string
this._parsedPaths=[];// inside: { we don't care, here }
this._bindings=[];// inside: Array< PropertyBinding >
this._bindingsIndicesByPath={};// inside: indices in these arrays
var scope=this;this.stats={objects:{get total(){return scope._objects.length;},get inUse(){return this.total-scope.nCachedObjects_;}},get bindingsPerObject(){return scope._bindings.length;}};}Object.assign(AnimationObjectGroup.prototype,{isAnimationObjectGroup:true,add:function add(){var objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,nBindings=bindings.length,knownObject=undefined;for(var i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index===undefined){// unknown object -> add it to the ACTIVE region
index=nObjects++;indicesByUUID[uuid]=index;objects.push(object);// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){bindings[j].push(new PropertyBinding(object,paths[j],parsedPaths[j]));}}else if(index<nCachedObjects){knownObject=objects[index];// move existing object to the ACTIVE region
var firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex];indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;indicesByUUID[uuid]=firstActiveIndex;objects[firstActiveIndex]=object;// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],binding=bindingsForPath[index];bindingsForPath[index]=lastCached;if(binding===undefined){// since we do not bother to create new bindings
// for objects that are cached, the binding may
// or may not exist
binding=new PropertyBinding(object,paths[j],parsedPaths[j]);}bindingsForPath[firstActiveIndex]=binding;}}else if(objects[index]!==knownObject){console.error('THREE.AnimationObjectGroup: Different objects with the same UUID '+'detected. Clean the caches or recreate your infrastructure when reloading scenes.');}// else the object is already where we want it to be
}// for arguments
this.nCachedObjects_=nCachedObjects;},remove:function remove(){var objects=this._objects,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;for(var i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined&&index>=nCachedObjects){// move existing object into the CACHED region
var lastCachedIndex=nCachedObjects++,firstActiveObject=objects[lastCachedIndex];indicesByUUID[firstActiveObject.uuid]=index;objects[index]=firstActiveObject;indicesByUUID[uuid]=lastCachedIndex;objects[lastCachedIndex]=object;// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],firstActive=bindingsForPath[lastCachedIndex],binding=bindingsForPath[index];bindingsForPath[index]=firstActive;bindingsForPath[lastCachedIndex]=binding;}}}// for arguments
this.nCachedObjects_=nCachedObjects;},// remove & forget
uncache:function uncache(){var objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;for(var i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined){delete indicesByUUID[uuid];if(index<nCachedObjects){// object is cached, shrink the CACHED region
var firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex],lastIndex=--nObjects,lastObject=objects[lastIndex];// last cached object takes this object's place
indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;// last object goes to the activated slot and pop
indicesByUUID[lastObject.uuid]=firstActiveIndex;objects[firstActiveIndex]=lastObject;objects.pop();// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],last=bindingsForPath[lastIndex];bindingsForPath[index]=lastCached;bindingsForPath[firstActiveIndex]=last;bindingsForPath.pop();}}else {// object is active, just swap with the last and pop
var lastIndex=--nObjects,lastObject=objects[lastIndex];indicesByUUID[lastObject.uuid]=index;objects[index]=lastObject;objects.pop();// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j];bindingsForPath[index]=bindingsForPath[lastIndex];bindingsForPath.pop();}}// cached or active
}// if object is known
}// for arguments
this.nCachedObjects_=nCachedObjects;},// Internal interface used by befriended PropertyBinding.Composite:
subscribe_:function subscribe_(path,parsedPath){// returns an array of bindings for the given path that is changed
// according to the contained objects in the group
var indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path],bindings=this._bindings;if(index!==undefined)return bindings[index];var paths=this._paths,parsedPaths=this._parsedPaths,objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,bindingsForPath=new Array(nObjects);index=bindings.length;indicesByPath[path]=index;paths.push(path);parsedPaths.push(parsedPath);bindings.push(bindingsForPath);for(var i=nCachedObjects,n=objects.length;i!==n;++i){var object=objects[i];bindingsForPath[i]=new PropertyBinding(object,path,parsedPath);}return bindingsForPath;},unsubscribe_:function unsubscribe_(path){// tells the group to forget about a property path and no longer
// update the array previously obtained with 'subscribe_'
var indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path];if(index!==undefined){var paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,lastBindingsIndex=bindings.length-1,lastBindings=bindings[lastBindingsIndex],lastBindingsPath=path[lastBindingsIndex];indicesByPath[lastBindingsPath]=index;bindings[index]=lastBindings;bindings.pop();parsedPaths[index]=parsedPaths[lastBindingsIndex];parsedPaths.pop();paths[index]=paths[lastBindingsIndex];paths.pop();}}});/**
 *
 * Action provided by AnimationMixer for scheduling clip playback on specific
 * objects.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 *
 */function AnimationAction(mixer,clip,localRoot){this._mixer=mixer;this._clip=clip;this._localRoot=localRoot||null;var tracks=clip.tracks,nTracks=tracks.length,interpolants=new Array(nTracks);var interpolantSettings={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(var i=0;i!==nTracks;++i){var interpolant=tracks[i].createInterpolant(null);interpolants[i]=interpolant;interpolant.settings=interpolantSettings;}this._interpolantSettings=interpolantSettings;this._interpolants=interpolants;// bound by the mixer
// inside: PropertyMixer (managed by the mixer)
this._propertyBindings=new Array(nTracks);this._cacheIndex=null;// for the memory manager
this._byClipCacheIndex=null;// for the memory manager
this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=LoopRepeat;this._loopCount=-1;// global mixer time when the action is to be started
// it's set back to 'null' upon start of the action
this._startTime=null;// scaled local time of the action
// gets clamped or wrapped to 0..clip.duration according to loop
this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;// no. of repetitions when looping
this.paused=false;// true -> zero effective time scale
this.enabled=true;// false -> zero effective weight
this.clampWhenFinished=false;// keep feeding the last frame?
this.zeroSlopeAtStart=true;// for smooth interpolation w/o separate
this.zeroSlopeAtEnd=true;// clips for start, loop and end
}Object.assign(AnimationAction.prototype,{// State & Scheduling
play:function play(){this._mixer._activateAction(this);return this;},stop:function stop(){this._mixer._deactivateAction(this);return this.reset();},reset:function reset(){this.paused=false;this.enabled=true;this.time=0;// restart clip
this._loopCount=-1;// forget previous loops
this._startTime=null;// forget scheduling
return this.stopFading().stopWarping();},isRunning:function isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this);},// return true when play has been called
isScheduled:function isScheduled(){return this._mixer._isActiveAction(this);},startAt:function startAt(time){this._startTime=time;return this;},setLoop:function setLoop(mode,repetitions){this.loop=mode;this.repetitions=repetitions;return this;},// Weight
// set the weight stopping any scheduled fading
// although .enabled = false yields an effective weight of zero, this
// method does *not* change .enabled, because it would be confusing
setEffectiveWeight:function setEffectiveWeight(weight){this.weight=weight;// note: same logic as when updated at runtime
this._effectiveWeight=this.enabled?weight:0;return this.stopFading();},// return the weight considering fading and .enabled
getEffectiveWeight:function getEffectiveWeight(){return this._effectiveWeight;},fadeIn:function fadeIn(duration){return this._scheduleFading(duration,0,1);},fadeOut:function fadeOut(duration){return this._scheduleFading(duration,1,0);},crossFadeFrom:function crossFadeFrom(fadeOutAction,duration,warp){fadeOutAction.fadeOut(duration);this.fadeIn(duration);if(warp){var fadeInDuration=this._clip.duration,fadeOutDuration=fadeOutAction._clip.duration,startEndRatio=fadeOutDuration/fadeInDuration,endStartRatio=fadeInDuration/fadeOutDuration;fadeOutAction.warp(1.0,startEndRatio,duration);this.warp(endStartRatio,1.0,duration);}return this;},crossFadeTo:function crossFadeTo(fadeInAction,duration,warp){return fadeInAction.crossFadeFrom(this,duration,warp);},stopFading:function stopFading(){var weightInterpolant=this._weightInterpolant;if(weightInterpolant!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(weightInterpolant);}return this;},// Time Scale Control
// set the time scale stopping any scheduled warping
// although .paused = true yields an effective time scale of zero, this
// method does *not* change .paused, because it would be confusing
setEffectiveTimeScale:function setEffectiveTimeScale(timeScale){this.timeScale=timeScale;this._effectiveTimeScale=this.paused?0:timeScale;return this.stopWarping();},// return the time scale considering warping and .paused
getEffectiveTimeScale:function getEffectiveTimeScale(){return this._effectiveTimeScale;},setDuration:function setDuration(duration){this.timeScale=this._clip.duration/duration;return this.stopWarping();},syncWith:function syncWith(action){this.time=action.time;this.timeScale=action.timeScale;return this.stopWarping();},halt:function halt(duration){return this.warp(this._effectiveTimeScale,0,duration);},warp:function warp(startTimeScale,endTimeScale,duration){var mixer=this._mixer,now=mixer.time,interpolant=this._timeScaleInterpolant,timeScale=this.timeScale;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._timeScaleInterpolant=interpolant;}var times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;times[1]=now+duration;values[0]=startTimeScale/timeScale;values[1]=endTimeScale/timeScale;return this;},stopWarping:function stopWarping(){var timeScaleInterpolant=this._timeScaleInterpolant;if(timeScaleInterpolant!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(timeScaleInterpolant);}return this;},// Object Accessors
getMixer:function getMixer(){return this._mixer;},getClip:function getClip(){return this._clip;},getRoot:function getRoot(){return this._localRoot||this._mixer._root;},// Interna
_update:function _update(time,deltaTime,timeDirection,accuIndex){// called by the mixer
if(!this.enabled){// call ._updateWeight() to update ._effectiveWeight
this._updateWeight(time);return;}var startTime=this._startTime;if(startTime!==null){// check for scheduled start of action
var timeRunning=(time-startTime)*timeDirection;if(timeRunning<0||timeDirection===0){return;// yet to come / don't decide when delta = 0
}// start
this._startTime=null;// unschedule
deltaTime=timeDirection*timeRunning;}// apply time scale and advance time
deltaTime*=this._updateTimeScale(time);var clipTime=this._updateTime(deltaTime);// note: _updateTime may disable the action resulting in
// an effective weight of 0
var weight=this._updateWeight(time);if(weight>0){var interpolants=this._interpolants;var propertyMixers=this._propertyBindings;for(var j=0,m=interpolants.length;j!==m;++j){interpolants[j].evaluate(clipTime);propertyMixers[j].accumulate(accuIndex,weight);}}},_updateWeight:function _updateWeight(time){var weight=0;if(this.enabled){weight=this.weight;var interpolant=this._weightInterpolant;if(interpolant!==null){var interpolantValue=interpolant.evaluate(time)[0];weight*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopFading();if(interpolantValue===0){// faded out, disable
this.enabled=false;}}}}this._effectiveWeight=weight;return weight;},_updateTimeScale:function _updateTimeScale(time){var timeScale=0;if(!this.paused){timeScale=this.timeScale;var interpolant=this._timeScaleInterpolant;if(interpolant!==null){var interpolantValue=interpolant.evaluate(time)[0];timeScale*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopWarping();if(timeScale===0){// motion has halted, pause
this.paused=true;}else {// warp done - apply final time scale
this.timeScale=timeScale;}}}}this._effectiveTimeScale=timeScale;return timeScale;},_updateTime:function _updateTime(deltaTime){var time=this.time+deltaTime;var duration=this._clip.duration;var loop=this.loop;var loopCount=this._loopCount;var pingPong=loop===LoopPingPong;if(deltaTime===0){if(loopCount===-1)return time;return pingPong&&(loopCount&1)===1?duration-time:time;}if(loop===LoopOnce){if(loopCount===-1){// just started
this._loopCount=0;this._setEndings(true,true,false);}handle_stop:{if(time>=duration){time=duration;}else if(time<0){time=0;}else {this.time=time;break handle_stop;}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=time;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime<0?-1:1});}}else {// repetitive Repeat or PingPong
if(loopCount===-1){// just started
if(deltaTime>=0){loopCount=0;this._setEndings(true,this.repetitions===0,pingPong);}else {// when looping in reverse direction, the initial
// transition through zero counts as a repetition,
// so leave loopCount at -1
this._setEndings(this.repetitions===0,true,pingPong);}}if(time>=duration||time<0){// wrap around
var loopDelta=Math.floor(time/duration);// signed
time-=duration*loopDelta;loopCount+=Math.abs(loopDelta);var pending=this.repetitions-loopCount;if(pending<=0){// have to stop (switch state, clamp time, fire event)
if(this.clampWhenFinished)this.paused=true;else this.enabled=false;time=deltaTime>0?duration:0;this.time=time;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime>0?1:-1});}else {// keep running
if(pending===1){// entering the last round
var atStart=deltaTime<0;this._setEndings(atStart,!atStart,pingPong);}else {this._setEndings(false,false,pingPong);}this._loopCount=loopCount;this.time=time;this._mixer.dispatchEvent({type:'loop',action:this,loopDelta:loopDelta});}}else {this.time=time;}if(pingPong&&(loopCount&1)===1){// invert time for the "pong round"
return duration-time;}}return time;},_setEndings:function _setEndings(atStart,atEnd,pingPong){var settings=this._interpolantSettings;if(pingPong){settings.endingStart=ZeroSlopeEnding;settings.endingEnd=ZeroSlopeEnding;}else {// assuming for LoopOnce atStart == atEnd == true
if(atStart){settings.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding;}else {settings.endingStart=WrapAroundEnding;}if(atEnd){settings.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding;}else {settings.endingEnd=WrapAroundEnding;}}},_scheduleFading:function _scheduleFading(duration,weightNow,weightThen){var mixer=this._mixer,now=mixer.time,interpolant=this._weightInterpolant;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._weightInterpolant=interpolant;}var times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;values[0]=weightNow;times[1]=now+duration;values[1]=weightThen;return this;}});/**
 *
 * Player for AnimationClips.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */function AnimationMixer(root){this._root=root;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1.0;}AnimationMixer.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:AnimationMixer,_bindAction:function _bindAction(action,prototypeAction){var root=action._localRoot||this._root,tracks=action._clip.tracks,nTracks=tracks.length,bindings=action._propertyBindings,interpolants=action._interpolants,rootUuid=root.uuid,bindingsByRoot=this._bindingsByRootAndName,bindingsByName=bindingsByRoot[rootUuid];if(bindingsByName===undefined){bindingsByName={};bindingsByRoot[rootUuid]=bindingsByName;}for(var i=0;i!==nTracks;++i){var track=tracks[i],trackName=track.name,binding=bindingsByName[trackName];if(binding!==undefined){bindings[i]=binding;}else {binding=bindings[i];if(binding!==undefined){// existing binding, make sure the cache knows
if(binding._cacheIndex===null){++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);}continue;}var path=prototypeAction&&prototypeAction._propertyBindings[i].binding.parsedPath;binding=new PropertyMixer(PropertyBinding.create(root,trackName,path),track.ValueTypeName,track.getValueSize());++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);bindings[i]=binding;}interpolants[i].resultBuffer=binding.buffer;}},_activateAction:function _activateAction(action){if(!this._isActiveAction(action)){if(action._cacheIndex===null){// this action has been forgotten by the cache, but the user
// appears to be still using it -> rebind
var rootUuid=(action._localRoot||this._root).uuid,clipUuid=action._clip.uuid,actionsForClip=this._actionsByClip[clipUuid];this._bindAction(action,actionsForClip&&actionsForClip.knownActions[0]);this._addInactiveAction(action,clipUuid,rootUuid);}var bindings=action._propertyBindings;// increment reference counts / sort out state
for(var i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];if(binding.useCount++===0){this._lendBinding(binding);binding.saveOriginalState();}}this._lendAction(action);}},_deactivateAction:function _deactivateAction(action){if(this._isActiveAction(action)){var bindings=action._propertyBindings;// decrement reference counts / sort out state
for(var i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];if(--binding.useCount===0){binding.restoreOriginalState();this._takeBackBinding(binding);}}this._takeBackAction(action);}},// Memory manager
_initMemoryManager:function _initMemoryManager(){this._actions=[];// 'nActiveActions' followed by inactive ones
this._nActiveActions=0;this._actionsByClip={};// inside:
// {
// 	knownActions: Array< AnimationAction > - used as prototypes
// 	actionByRoot: AnimationAction - lookup
// }
this._bindings=[];// 'nActiveBindings' followed by inactive ones
this._nActiveBindings=0;this._bindingsByRootAndName={};// inside: Map< name, PropertyMixer >
this._controlInterpolants=[];// same game as above
this._nActiveControlInterpolants=0;var scope=this;this.stats={actions:{get total(){return scope._actions.length;},get inUse(){return scope._nActiveActions;}},bindings:{get total(){return scope._bindings.length;},get inUse(){return scope._nActiveBindings;}},controlInterpolants:{get total(){return scope._controlInterpolants.length;},get inUse(){return scope._nActiveControlInterpolants;}}};},// Memory management for AnimationAction objects
_isActiveAction:function _isActiveAction(action){var index=action._cacheIndex;return index!==null&&index<this._nActiveActions;},_addInactiveAction:function _addInactiveAction(action,clipUuid,rootUuid){var actions=this._actions,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip===undefined){actionsForClip={knownActions:[action],actionByRoot:{}};action._byClipCacheIndex=0;actionsByClip[clipUuid]=actionsForClip;}else {var knownActions=actionsForClip.knownActions;action._byClipCacheIndex=knownActions.length;knownActions.push(action);}action._cacheIndex=actions.length;actions.push(action);actionsForClip.actionByRoot[rootUuid]=action;},_removeInactiveAction:function _removeInactiveAction(action){var actions=this._actions,lastInactiveAction=actions[actions.length-1],cacheIndex=action._cacheIndex;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();action._cacheIndex=null;var clipUuid=action._clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid],knownActionsForClip=actionsForClip.knownActions,lastKnownAction=knownActionsForClip[knownActionsForClip.length-1],byClipCacheIndex=action._byClipCacheIndex;lastKnownAction._byClipCacheIndex=byClipCacheIndex;knownActionsForClip[byClipCacheIndex]=lastKnownAction;knownActionsForClip.pop();action._byClipCacheIndex=null;var actionByRoot=actionsForClip.actionByRoot,rootUuid=(action._localRoot||this._root).uuid;delete actionByRoot[rootUuid];if(knownActionsForClip.length===0){delete actionsByClip[clipUuid];}this._removeInactiveBindingsForAction(action);},_removeInactiveBindingsForAction:function _removeInactiveBindingsForAction(action){var bindings=action._propertyBindings;for(var i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];if(--binding.referenceCount===0){this._removeInactiveBinding(binding);}}},_lendAction:function _lendAction(action){// [ active actions |  inactive actions  ]
// [  active actions >| inactive actions ]
//                 s        a
//                  <-swap->
//                 a        s
var actions=this._actions,prevIndex=action._cacheIndex,lastActiveIndex=this._nActiveActions++,firstInactiveAction=actions[lastActiveIndex];action._cacheIndex=lastActiveIndex;actions[lastActiveIndex]=action;firstInactiveAction._cacheIndex=prevIndex;actions[prevIndex]=firstInactiveAction;},_takeBackAction:function _takeBackAction(action){// [  active actions  | inactive actions ]
// [ active actions |< inactive actions  ]
//        a        s
//         <-swap->
//        s        a
var actions=this._actions,prevIndex=action._cacheIndex,firstInactiveIndex=--this._nActiveActions,lastActiveAction=actions[firstInactiveIndex];action._cacheIndex=firstInactiveIndex;actions[firstInactiveIndex]=action;lastActiveAction._cacheIndex=prevIndex;actions[prevIndex]=lastActiveAction;},// Memory management for PropertyMixer objects
_addInactiveBinding:function _addInactiveBinding(binding,rootUuid,trackName){var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],bindings=this._bindings;if(bindingByName===undefined){bindingByName={};bindingsByRoot[rootUuid]=bindingByName;}bindingByName[trackName]=binding;binding._cacheIndex=bindings.length;bindings.push(binding);},_removeInactiveBinding:function _removeInactiveBinding(binding){var bindings=this._bindings,propBinding=binding.binding,rootUuid=propBinding.rootNode.uuid,trackName=propBinding.path,bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],lastInactiveBinding=bindings[bindings.length-1],cacheIndex=binding._cacheIndex;lastInactiveBinding._cacheIndex=cacheIndex;bindings[cacheIndex]=lastInactiveBinding;bindings.pop();delete bindingByName[trackName];if(Object.keys(bindingByName).length===0){delete bindingsByRoot[rootUuid];}},_lendBinding:function _lendBinding(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,lastActiveIndex=this._nActiveBindings++,firstInactiveBinding=bindings[lastActiveIndex];binding._cacheIndex=lastActiveIndex;bindings[lastActiveIndex]=binding;firstInactiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=firstInactiveBinding;},_takeBackBinding:function _takeBackBinding(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,firstInactiveIndex=--this._nActiveBindings,lastActiveBinding=bindings[firstInactiveIndex];binding._cacheIndex=firstInactiveIndex;bindings[firstInactiveIndex]=binding;lastActiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=lastActiveBinding;},// Memory management of Interpolants for weight and time scale
_lendControlInterpolant:function _lendControlInterpolant(){var interpolants=this._controlInterpolants,lastActiveIndex=this._nActiveControlInterpolants++,interpolant=interpolants[lastActiveIndex];if(interpolant===undefined){interpolant=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer);interpolant.__cacheIndex=lastActiveIndex;interpolants[lastActiveIndex]=interpolant;}return interpolant;},_takeBackControlInterpolant:function _takeBackControlInterpolant(interpolant){var interpolants=this._controlInterpolants,prevIndex=interpolant.__cacheIndex,firstInactiveIndex=--this._nActiveControlInterpolants,lastActiveInterpolant=interpolants[firstInactiveIndex];interpolant.__cacheIndex=firstInactiveIndex;interpolants[firstInactiveIndex]=interpolant;lastActiveInterpolant.__cacheIndex=prevIndex;interpolants[prevIndex]=lastActiveInterpolant;},_controlInterpolantsResultBuffer:new Float32Array(1),// return an action for a clip optionally using a custom root target
// object (this method allocates a lot of dynamic memory in case a
// previously unknown clip/root combination is specified)
clipAction:function clipAction(clip,optionalRoot){var root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject!==null?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid],prototypeAction=null;if(actionsForClip!==undefined){var existingAction=actionsForClip.actionByRoot[rootUuid];if(existingAction!==undefined){return existingAction;}// we know the clip, so we don't have to parse all
// the bindings again but can just copy
prototypeAction=actionsForClip.knownActions[0];// also, take the clip from the prototype action
if(clipObject===null)clipObject=prototypeAction._clip;}// clip must be known when specified via string
if(clipObject===null)return null;// allocate all resources required to run it
var newAction=new AnimationAction(this,clipObject,optionalRoot);this._bindAction(newAction,prototypeAction);// and make the action known to the memory manager
this._addInactiveAction(newAction,clipUuid,rootUuid);return newAction;},// get an existing action
existingAction:function existingAction(clip,optionalRoot){var root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid];if(actionsForClip!==undefined){return actionsForClip.actionByRoot[rootUuid]||null;}return null;},// deactivates all previously scheduled actions
stopAllAction:function stopAllAction(){var actions=this._actions,nActions=this._nActiveActions,bindings=this._bindings,nBindings=this._nActiveBindings;this._nActiveActions=0;this._nActiveBindings=0;for(var i=0;i!==nActions;++i){actions[i].reset();}for(var i=0;i!==nBindings;++i){bindings[i].useCount=0;}return this;},// advance the time and update apply the animation
update:function update(deltaTime){deltaTime*=this.timeScale;var actions=this._actions,nActions=this._nActiveActions,time=this.time+=deltaTime,timeDirection=Math.sign(deltaTime),accuIndex=this._accuIndex^=1;// run active actions
for(var i=0;i!==nActions;++i){var action=actions[i];action._update(time,deltaTime,timeDirection,accuIndex);}// update scene graph
var bindings=this._bindings,nBindings=this._nActiveBindings;for(var i=0;i!==nBindings;++i){bindings[i].apply(accuIndex);}return this;},// Allows you to seek to a specific time in an animation.
setTime:function setTime(timeInSeconds){this.time=0;// Zero out time attribute for AnimationMixer object;
for(var i=0;i<this._actions.length;i++){this._actions[i].time=0;// Zero out time attribute for all associated AnimationAction objects.
}return this.update(timeInSeconds);// Update used to set exact time. Returns "this" AnimationMixer object.
},// return this mixer's root target object
getRoot:function getRoot(){return this._root;},// free all resources specific to a particular clip
uncacheClip:function uncacheClip(clip){var actions=this._actions,clipUuid=clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip!==undefined){// note: just calling _removeInactiveAction would mess up the
// iteration state and also require updating the state we can
// just throw away
var actionsToRemove=actionsForClip.knownActions;for(var i=0,n=actionsToRemove.length;i!==n;++i){var action=actionsToRemove[i];this._deactivateAction(action);var cacheIndex=action._cacheIndex,lastInactiveAction=actions[actions.length-1];action._cacheIndex=null;action._byClipCacheIndex=null;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();this._removeInactiveBindingsForAction(action);}delete actionsByClip[clipUuid];}},// free all resources specific to a particular root target object
uncacheRoot:function uncacheRoot(root){var rootUuid=root.uuid,actionsByClip=this._actionsByClip;for(var clipUuid in actionsByClip){var actionByRoot=actionsByClip[clipUuid].actionByRoot,action=actionByRoot[rootUuid];if(action!==undefined){this._deactivateAction(action);this._removeInactiveAction(action);}}var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid];if(bindingByName!==undefined){for(var trackName in bindingByName){var binding=bindingByName[trackName];binding.restoreOriginalState();this._removeInactiveBinding(binding);}}},// remove a targeted clip from the cache
uncacheAction:function uncacheAction(clip,optionalRoot){var action=this.existingAction(clip,optionalRoot);if(action!==null){this._deactivateAction(action);this._removeInactiveAction(action);}}});/**
 * @author mrdoob / http://mrdoob.com/
 */function Uniform(value){if(typeof value==='string'){console.warn('THREE.Uniform: Type parameter is no longer needed.');value=arguments[1];}this.value=value;}Uniform.prototype.clone=function(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone());};/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */function InstancedInterleavedBuffer(array,stride,meshPerAttribute){InterleavedBuffer.call(this,array,stride);this.meshPerAttribute=meshPerAttribute||1;}InstancedInterleavedBuffer.prototype=Object.assign(Object.create(InterleavedBuffer.prototype),{constructor:InstancedInterleavedBuffer,isInstancedInterleavedBuffer:true,copy:function copy(source){InterleavedBuffer.prototype.copy.call(this,source);this.meshPerAttribute=source.meshPerAttribute;return this;}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://clara.io/
 * @author stephomi / http://stephaneginier.com/
 */function Raycaster(origin,direction,near,far){this.ray=new Ray(origin,direction);// direction is assumed to be normalized (for accurate distance calculations)
this.near=near||0;this.far=far||Infinity;this.camera=null;this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function get(){console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');return this.Points;}}});}function ascSort(a,b){return a.distance-b.distance;}function _intersectObject(object,raycaster,intersects,recursive){if(object.visible===false)return;object.raycast(raycaster,intersects);if(recursive===true){var children=object.children;for(var i=0,l=children.length;i<l;i++){_intersectObject(children[i],raycaster,intersects,true);}}}Object.assign(Raycaster.prototype,{linePrecision:1,set:function set(origin,direction){// direction is assumed to be normalized (for accurate distance calculations)
this.ray.set(origin,direction);},setFromCamera:function setFromCamera(coords,camera){if(camera&&camera.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(camera.matrixWorld);this.ray.direction.set(coords.x,coords.y,0.5).unproject(camera).sub(this.ray.origin).normalize();this.camera=camera;}else if(camera&&camera.isOrthographicCamera){this.ray.origin.set(coords.x,coords.y,(camera.near+camera.far)/(camera.near-camera.far)).unproject(camera);// set origin in plane of camera
this.ray.direction.set(0,0,-1).transformDirection(camera.matrixWorld);this.camera=camera;}else {console.error('THREE.Raycaster: Unsupported camera type.');}},intersectObject:function intersectObject(object,recursive,optionalTarget){var intersects=optionalTarget||[];_intersectObject(object,this,intersects,recursive);intersects.sort(ascSort);return intersects;},intersectObjects:function intersectObjects(objects,recursive,optionalTarget){var intersects=optionalTarget||[];if(Array.isArray(objects)===false){console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');return intersects;}for(var i=0,l=objects.length;i<l;i++){_intersectObject(objects[i],this,intersects,recursive);}intersects.sort(ascSort);return intersects;}});/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */function Spherical(radius,phi,theta){this.radius=radius!==undefined?radius:1.0;this.phi=phi!==undefined?phi:0;// polar angle
this.theta=theta!==undefined?theta:0;// azimuthal angle
return this;}Object.assign(Spherical.prototype,{set:function set(radius,phi,theta){this.radius=radius;this.phi=phi;this.theta=theta;return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(other){this.radius=other.radius;this.phi=other.phi;this.theta=other.theta;return this;},// restrict phi to be betwee EPS and PI-EPS
makeSafe:function makeSafe(){var EPS=0.000001;this.phi=Math.max(EPS,Math.min(Math.PI-EPS,this.phi));return this;},setFromVector3:function setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);},setFromCartesianCoords:function setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+y*y+z*z);if(this.radius===0){this.theta=0;this.phi=0;}else {this.theta=Math.atan2(x,z);this.phi=Math.acos(MathUtils.clamp(y/this.radius,-1,1));}return this;}});/**
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 *
 */function Cylindrical(radius,theta,y){this.radius=radius!==undefined?radius:1.0;// distance from the origin to a point in the x-z plane
this.theta=theta!==undefined?theta:0;// counterclockwise angle in the x-z plane measured in radians from the positive z-axis
this.y=y!==undefined?y:0;// height above the x-z plane
return this;}Object.assign(Cylindrical.prototype,{set:function set(radius,theta,y){this.radius=radius;this.theta=theta;this.y=y;return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(other){this.radius=other.radius;this.theta=other.theta;this.y=other.y;return this;},setFromVector3:function setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);},setFromCartesianCoords:function setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+z*z);this.theta=Math.atan2(x,z);this.y=y;return this;}});/**
 * @author bhouston / http://clara.io
 */var _vector$7=new Vector2();function Box2(min,max){this.min=min!==undefined?min:new Vector2(+Infinity,+Infinity);this.max=max!==undefined?max:new Vector2(-Infinity,-Infinity);}Object.assign(Box2.prototype,{set:function set(min,max){this.min.copy(min);this.max.copy(max);return this;},setFromPoints:function setFromPoints(points){this.makeEmpty();for(var i=0,il=points.length;i<il;i++){this.expandByPoint(points[i]);}return this;},setFromCenterAndSize:function setFromCenterAndSize(center,size){var halfSize=_vector$7.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;},makeEmpty:function makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this;},isEmpty:function isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
return this.max.x<this.min.x||this.max.y<this.min.y;},getCenter:function getCenter(target){if(target===undefined){console.warn('THREE.Box2: .getCenter() target is now required');target=new Vector2();}return this.isEmpty()?target.set(0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);},getSize:function getSize(target){if(target===undefined){console.warn('THREE.Box2: .getSize() target is now required');target=new Vector2();}return this.isEmpty()?target.set(0,0):target.subVectors(this.max,this.min);},expandByPoint:function expandByPoint(point){this.min.min(point);this.max.max(point);return this;},expandByVector:function expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;},expandByScalar:function expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;},containsPoint:function containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y?false:true;},containsBox:function containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y;},getParameter:function getParameter(point,target){// This can potentially have a divide by zero if the box
// has a size dimension of 0.
if(target===undefined){console.warn('THREE.Box2: .getParameter() target is now required');target=new Vector2();}return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y));},intersectsBox:function intersectsBox(box){// using 4 splitting planes to rule out intersections
return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y?false:true;},clampPoint:function clampPoint(point,target){if(target===undefined){console.warn('THREE.Box2: .clampPoint() target is now required');target=new Vector2();}return target.copy(point).clamp(this.min,this.max);},distanceToPoint:function distanceToPoint(point){var clampedPoint=_vector$7.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();},intersect:function intersect(box){this.min.max(box.min);this.max.min(box.max);return this;},union:function union(box){this.min.min(box.min);this.max.max(box.max);return this;},translate:function translate(offset){this.min.add(offset);this.max.add(offset);return this;},equals:function equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}});/**
 * @author bhouston / http://clara.io
 */var _startP=new Vector3();var _startEnd=new Vector3();function Line3(start,end){this.start=start!==undefined?start:new Vector3();this.end=end!==undefined?end:new Vector3();}Object.assign(Line3.prototype,{set:function set(start,end){this.start.copy(start);this.end.copy(end);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(line){this.start.copy(line.start);this.end.copy(line.end);return this;},getCenter:function getCenter(target){if(target===undefined){console.warn('THREE.Line3: .getCenter() target is now required');target=new Vector3();}return target.addVectors(this.start,this.end).multiplyScalar(0.5);},delta:function delta(target){if(target===undefined){console.warn('THREE.Line3: .delta() target is now required');target=new Vector3();}return target.subVectors(this.end,this.start);},distanceSq:function distanceSq(){return this.start.distanceToSquared(this.end);},distance:function distance(){return this.start.distanceTo(this.end);},at:function at(t,target){if(target===undefined){console.warn('THREE.Line3: .at() target is now required');target=new Vector3();}return this.delta(target).multiplyScalar(t).add(this.start);},closestPointToPointParameter:function closestPointToPointParameter(point,clampToLine){_startP.subVectors(point,this.start);_startEnd.subVectors(this.end,this.start);var startEnd2=_startEnd.dot(_startEnd);var startEnd_startP=_startEnd.dot(_startP);var t=startEnd_startP/startEnd2;if(clampToLine){t=MathUtils.clamp(t,0,1);}return t;},closestPointToPoint:function closestPointToPoint(point,clampToLine,target){var t=this.closestPointToPointParameter(point,clampToLine);if(target===undefined){console.warn('THREE.Line3: .closestPointToPoint() target is now required');target=new Vector3();}return this.delta(target).multiplyScalar(t).add(this.start);},applyMatrix4:function applyMatrix4(matrix){this.start.applyMatrix4(matrix);this.end.applyMatrix4(matrix);return this;},equals:function equals(line){return line.start.equals(this.start)&&line.end.equals(this.end);}});/**
 * @author alteredq / http://alteredqualia.com/
 */function ImmediateRenderObject(material){Object3D.call(this);this.material=material;this.render=function/* renderCallback */(){};}ImmediateRenderObject.prototype=Object.create(Object3D.prototype);ImmediateRenderObject.prototype.constructor=ImmediateRenderObject;ImmediateRenderObject.prototype.isImmediateRenderObject=true;/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */var _vector$8=new Vector3();function SpotLightHelper(light,color){Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;var geometry=new BufferGeometry();var positions=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(var i=0,j=1,l=32;i<l;i++,j++){var p1=i/l*Math.PI*2;var p2=j/l*Math.PI*2;positions.push(Math.cos(p1),Math.sin(p1),1,Math.cos(p2),Math.sin(p2),1);}geometry.setAttribute('position',new Float32BufferAttribute(positions,3));var material=new LineBasicMaterial({fog:false});this.cone=new LineSegments(geometry,material);this.add(this.cone);this.update();}SpotLightHelper.prototype=Object.create(Object3D.prototype);SpotLightHelper.prototype.constructor=SpotLightHelper;SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose();};SpotLightHelper.prototype.update=function(){this.light.updateMatrixWorld();var coneLength=this.light.distance?this.light.distance:1000;var coneWidth=coneLength*Math.tan(this.light.angle);this.cone.scale.set(coneWidth,coneWidth,coneLength);_vector$8.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(_vector$8);if(this.color!==undefined){this.cone.material.color.set(this.color);}else {this.cone.material.color.copy(this.light.color);}};/**
 * @author Sean Griffin / http://twitter.com/sgrif
 * @author Michael Guerrero / http://realitymeltdown.com
 * @author mrdoob / http://mrdoob.com/
 * @author ikerr / http://verold.com
 * @author Mugen87 / https://github.com/Mugen87
 */var _vector$9=new Vector3();var _boneMatrix=new Matrix4();var _matrixWorldInv=new Matrix4();function getBoneList(object){var boneList=[];if(object&&object.isBone){boneList.push(object);}for(var i=0;i<object.children.length;i++){boneList.push.apply(boneList,getBoneList(object.children[i]));}return boneList;}function SkeletonHelper(object){var bones=getBoneList(object);var geometry=new BufferGeometry();var vertices=[];var colors=[];var color1=new Color(0,0,1);var color2=new Color(0,1,0);for(var i=0;i<bones.length;i++){var bone=bones[i];if(bone.parent&&bone.parent.isBone){vertices.push(0,0,0);vertices.push(0,0,0);colors.push(color1.r,color1.g,color1.b);colors.push(color2.r,color2.g,color2.b);}}geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors,depthTest:false,depthWrite:false,transparent:true});LineSegments.call(this,geometry,material);this.root=object;this.bones=bones;this.matrix=object.matrixWorld;this.matrixAutoUpdate=false;}SkeletonHelper.prototype=Object.create(LineSegments.prototype);SkeletonHelper.prototype.constructor=SkeletonHelper;SkeletonHelper.prototype.updateMatrixWorld=function(force){var bones=this.bones;var geometry=this.geometry;var position=geometry.getAttribute('position');_matrixWorldInv.getInverse(this.root.matrixWorld);for(var i=0,j=0;i<bones.length;i++){var bone=bones[i];if(bone.parent&&bone.parent.isBone){_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.matrixWorld);_vector$9.setFromMatrixPosition(_boneMatrix);position.setXYZ(j,_vector$9.x,_vector$9.y,_vector$9.z);_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.parent.matrixWorld);_vector$9.setFromMatrixPosition(_boneMatrix);position.setXYZ(j+1,_vector$9.x,_vector$9.y,_vector$9.z);j+=2;}}geometry.getAttribute('position').needsUpdate=true;Object3D.prototype.updateMatrixWorld.call(this,force);};/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */function PointLightHelper(light,sphereSize,color){this.light=light;this.light.updateMatrixWorld();this.color=color;var geometry=new SphereBufferGeometry(sphereSize,4,2);var material=new MeshBasicMaterial({wireframe:true,fog:false});Mesh.call(this,geometry,material);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update();/*
	var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	var d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/}PointLightHelper.prototype=Object.create(Mesh.prototype);PointLightHelper.prototype.constructor=PointLightHelper;PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose();};PointLightHelper.prototype.update=function(){if(this.color!==undefined){this.material.color.set(this.color);}else {this.material.color.copy(this.light.color);}/*
	var d = this.light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.visible = true;
		this.lightDistance.scale.set( d, d, d );

	}
	*/};/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */var _vector$a=new Vector3();var _color1=new Color();var _color2=new Color();function HemisphereLightHelper(light,size,color){Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;var geometry=new OctahedronBufferGeometry(size);geometry.rotateY(Math.PI*0.5);this.material=new MeshBasicMaterial({wireframe:true,fog:false});if(this.color===undefined)this.material.vertexColors=VertexColors;var position=geometry.getAttribute('position');var colors=new Float32Array(position.count*3);geometry.setAttribute('color',new BufferAttribute(colors,3));this.add(new Mesh(geometry,this.material));this.update();}HemisphereLightHelper.prototype=Object.create(Object3D.prototype);HemisphereLightHelper.prototype.constructor=HemisphereLightHelper;HemisphereLightHelper.prototype.dispose=function(){this.children[0].geometry.dispose();this.children[0].material.dispose();};HemisphereLightHelper.prototype.update=function(){var mesh=this.children[0];if(this.color!==undefined){this.material.color.set(this.color);}else {var colors=mesh.geometry.getAttribute('color');_color1.copy(this.light.color);_color2.copy(this.light.groundColor);for(var i=0,l=colors.count;i<l;i++){var color=i<l/2?_color1:_color2;colors.setXYZ(i,color.r,color.g,color.b);}colors.needsUpdate=true;}mesh.lookAt(_vector$a.setFromMatrixPosition(this.light.matrixWorld).negate());};/**
 * @author mrdoob / http://mrdoob.com/
 */function GridHelper(size,divisions,color1,color2){size=size||10;divisions=divisions||10;color1=new Color(color1!==undefined?color1:0x444444);color2=new Color(color2!==undefined?color2:0x888888);var center=divisions/2;var step=size/divisions;var halfSize=size/2;var vertices=[],colors=[];for(var i=0,j=0,k=-halfSize;i<=divisions;i++,k+=step){vertices.push(-halfSize,0,k,halfSize,0,k);vertices.push(k,0,-halfSize,k,0,halfSize);var color=i===center?color1:color2;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;}var geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material);}GridHelper.prototype=Object.assign(Object.create(LineSegments.prototype),{constructor:GridHelper,copy:function copy(source){LineSegments.prototype.copy.call(this,source);this.geometry.copy(source.geometry);this.material.copy(source.material);return this;},clone:function clone(){return new this.constructor().copy(this);}});/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 * @author Hectate / http://www.github.com/Hectate
 */function PolarGridHelper(radius,radials,circles,divisions,color1,color2){radius=radius||10;radials=radials||16;circles=circles||8;divisions=divisions||64;color1=new Color(color1!==undefined?color1:0x444444);color2=new Color(color2!==undefined?color2:0x888888);var vertices=[];var colors=[];var x,z;var v,i,j,r,color;// create the radials
for(i=0;i<=radials;i++){v=i/radials*(Math.PI*2);x=Math.sin(v)*radius;z=Math.cos(v)*radius;vertices.push(0,0,0);vertices.push(x,0,z);color=i&1?color1:color2;colors.push(color.r,color.g,color.b);colors.push(color.r,color.g,color.b);}// create the circles
for(i=0;i<=circles;i++){color=i&1?color1:color2;r=radius-radius/circles*i;for(j=0;j<divisions;j++){// first vertex
v=j/divisions*(Math.PI*2);x=Math.sin(v)*r;z=Math.cos(v)*r;vertices.push(x,0,z);colors.push(color.r,color.g,color.b);// second vertex
v=(j+1)/divisions*(Math.PI*2);x=Math.sin(v)*r;z=Math.cos(v)*r;vertices.push(x,0,z);colors.push(color.r,color.g,color.b);}}var geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material);}PolarGridHelper.prototype=Object.create(LineSegments.prototype);PolarGridHelper.prototype.constructor=PolarGridHelper;/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */var _v1$5=new Vector3();var _v2$3=new Vector3();var _v3$1=new Vector3();function DirectionalLightHelper(light,size,color){Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;if(size===undefined)size=1;var geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute([-size,size,0,size,size,0,size,-size,0,-size,-size,0,-size,size,0],3));var material=new LineBasicMaterial({fog:false});this.lightPlane=new Line(geometry,material);this.add(this.lightPlane);geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute([0,0,0,0,0,1],3));this.targetLine=new Line(geometry,material);this.add(this.targetLine);this.update();}DirectionalLightHelper.prototype=Object.create(Object3D.prototype);DirectionalLightHelper.prototype.constructor=DirectionalLightHelper;DirectionalLightHelper.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose();};DirectionalLightHelper.prototype.update=function(){_v1$5.setFromMatrixPosition(this.light.matrixWorld);_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);_v3$1.subVectors(_v2$3,_v1$5);this.lightPlane.lookAt(_v2$3);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color);}else {this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color);}this.targetLine.lookAt(_v2$3);this.targetLine.scale.z=_v3$1.length();};/**
 * @author alteredq / http://alteredqualia.com/
 * @author Mugen87 / https://github.com/Mugen87
 *
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */var _vector$b=new Vector3();var _camera=new Camera();function CameraHelper(camera){var geometry=new BufferGeometry();var material=new LineBasicMaterial({color:0xffffff,vertexColors:FaceColors});var vertices=[];var colors=[];var pointMap={};// colors
var colorFrustum=new Color(0xffaa00);var colorCone=new Color(0xff0000);var colorUp=new Color(0x00aaff);var colorTarget=new Color(0xffffff);var colorCross=new Color(0x333333);// near
addLine('n1','n2',colorFrustum);addLine('n2','n4',colorFrustum);addLine('n4','n3',colorFrustum);addLine('n3','n1',colorFrustum);// far
addLine('f1','f2',colorFrustum);addLine('f2','f4',colorFrustum);addLine('f4','f3',colorFrustum);addLine('f3','f1',colorFrustum);// sides
addLine('n1','f1',colorFrustum);addLine('n2','f2',colorFrustum);addLine('n3','f3',colorFrustum);addLine('n4','f4',colorFrustum);// cone
addLine('p','n1',colorCone);addLine('p','n2',colorCone);addLine('p','n3',colorCone);addLine('p','n4',colorCone);// up
addLine('u1','u2',colorUp);addLine('u2','u3',colorUp);addLine('u3','u1',colorUp);// target
addLine('c','t',colorTarget);addLine('p','c',colorCross);// cross
addLine('cn1','cn2',colorCross);addLine('cn3','cn4',colorCross);addLine('cf1','cf2',colorCross);addLine('cf3','cf4',colorCross);function addLine(a,b,color){addPoint(a,color);addPoint(b,color);}function addPoint(id,color){vertices.push(0,0,0);colors.push(color.r,color.g,color.b);if(pointMap[id]===undefined){pointMap[id]=[];}pointMap[id].push(vertices.length/3-1);}geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));LineSegments.call(this,geometry,material);this.camera=camera;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=camera.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=pointMap;this.update();}CameraHelper.prototype=Object.create(LineSegments.prototype);CameraHelper.prototype.constructor=CameraHelper;CameraHelper.prototype.update=function(){var geometry=this.geometry;var pointMap=this.pointMap;var w=1,h=1;// we need just camera projection matrix inverse
// world matrix must be identity
_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);// center / target
setPoint('c',pointMap,geometry,_camera,0,0,-1);setPoint('t',pointMap,geometry,_camera,0,0,1);// near
setPoint('n1',pointMap,geometry,_camera,-w,-h,-1);setPoint('n2',pointMap,geometry,_camera,w,-h,-1);setPoint('n3',pointMap,geometry,_camera,-w,h,-1);setPoint('n4',pointMap,geometry,_camera,w,h,-1);// far
setPoint('f1',pointMap,geometry,_camera,-w,-h,1);setPoint('f2',pointMap,geometry,_camera,w,-h,1);setPoint('f3',pointMap,geometry,_camera,-w,h,1);setPoint('f4',pointMap,geometry,_camera,w,h,1);// up
setPoint('u1',pointMap,geometry,_camera,w*0.7,h*1.1,-1);setPoint('u2',pointMap,geometry,_camera,-w*0.7,h*1.1,-1);setPoint('u3',pointMap,geometry,_camera,0,h*2,-1);// cross
setPoint('cf1',pointMap,geometry,_camera,-w,0,1);setPoint('cf2',pointMap,geometry,_camera,w,0,1);setPoint('cf3',pointMap,geometry,_camera,0,-h,1);setPoint('cf4',pointMap,geometry,_camera,0,h,1);setPoint('cn1',pointMap,geometry,_camera,-w,0,-1);setPoint('cn2',pointMap,geometry,_camera,w,0,-1);setPoint('cn3',pointMap,geometry,_camera,0,-h,-1);setPoint('cn4',pointMap,geometry,_camera,0,h,-1);geometry.getAttribute('position').needsUpdate=true;};function setPoint(point,pointMap,geometry,camera,x,y,z){_vector$b.set(x,y,z).unproject(camera);var points=pointMap[point];if(points!==undefined){var position=geometry.getAttribute('position');for(var i=0,l=points.length;i<l;i++){position.setXYZ(points[i],_vector$b.x,_vector$b.y,_vector$b.z);}}}/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 */var _box$3=new Box3();function BoxHelper(object,color){this.object=object;if(color===undefined)color=0xffff00;var indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);var positions=new Float32Array(8*3);var geometry=new BufferGeometry();geometry.setIndex(new BufferAttribute(indices,1));geometry.setAttribute('position',new BufferAttribute(positions,3));LineSegments.call(this,geometry,new LineBasicMaterial({color:color}));this.matrixAutoUpdate=false;this.update();}BoxHelper.prototype=Object.create(LineSegments.prototype);BoxHelper.prototype.constructor=BoxHelper;BoxHelper.prototype.update=function(object){if(object!==undefined){console.warn('THREE.BoxHelper: .update() has no longer arguments.');}if(this.object!==undefined){_box$3.setFromObject(this.object);}if(_box$3.isEmpty())return;var min=_box$3.min;var max=_box$3.max;/*
	  5____4
	1/___0/|
	| 6__|_7
	2/___3/

	0: max.x, max.y, max.z
	1: min.x, max.y, max.z
	2: min.x, min.y, max.z
	3: max.x, min.y, max.z
	4: max.x, max.y, min.z
	5: min.x, max.y, min.z
	6: min.x, min.y, min.z
	7: max.x, min.y, min.z
	*/var position=this.geometry.attributes.position;var array=position.array;array[0]=max.x;array[1]=max.y;array[2]=max.z;array[3]=min.x;array[4]=max.y;array[5]=max.z;array[6]=min.x;array[7]=min.y;array[8]=max.z;array[9]=max.x;array[10]=min.y;array[11]=max.z;array[12]=max.x;array[13]=max.y;array[14]=min.z;array[15]=min.x;array[16]=max.y;array[17]=min.z;array[18]=min.x;array[19]=min.y;array[20]=min.z;array[21]=max.x;array[22]=min.y;array[23]=min.z;position.needsUpdate=true;this.geometry.computeBoundingSphere();};BoxHelper.prototype.setFromObject=function(object){this.object=object;this.update();return this;};BoxHelper.prototype.copy=function(source){LineSegments.prototype.copy.call(this,source);this.object=source.object;return this;};BoxHelper.prototype.clone=function(){return new this.constructor().copy(this);};/**
 * @author WestLangley / http://github.com/WestLangley
 */function Box3Helper(box,color){this.type='Box3Helper';this.box=box;color=color||0xffff00;var indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);var positions=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];var geometry=new BufferGeometry();geometry.setIndex(new BufferAttribute(indices,1));geometry.setAttribute('position',new Float32BufferAttribute(positions,3));LineSegments.call(this,geometry,new LineBasicMaterial({color:color}));this.geometry.computeBoundingSphere();}Box3Helper.prototype=Object.create(LineSegments.prototype);Box3Helper.prototype.constructor=Box3Helper;Box3Helper.prototype.updateMatrixWorld=function(force){var box=this.box;if(box.isEmpty())return;box.getCenter(this.position);box.getSize(this.scale);this.scale.multiplyScalar(0.5);Object3D.prototype.updateMatrixWorld.call(this,force);};/**
 * @author WestLangley / http://github.com/WestLangley
 */function PlaneHelper(plane,size,hex){this.type='PlaneHelper';this.plane=plane;this.size=size===undefined?1:size;var color=hex!==undefined?hex:0xffff00;var positions=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0];var geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(positions,3));geometry.computeBoundingSphere();Line.call(this,geometry,new LineBasicMaterial({color:color}));//
var positions2=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1];var geometry2=new BufferGeometry();geometry2.setAttribute('position',new Float32BufferAttribute(positions2,3));geometry2.computeBoundingSphere();this.add(new Mesh(geometry2,new MeshBasicMaterial({color:color,opacity:0.2,transparent:true,depthWrite:false})));}PlaneHelper.prototype=Object.create(Line.prototype);PlaneHelper.prototype.constructor=PlaneHelper;PlaneHelper.prototype.updateMatrixWorld=function(force){var scale=-this.plane.constant;if(Math.abs(scale)<1e-8)scale=1e-8;// sign does not matter
this.scale.set(0.5*this.size,0.5*this.size,scale);this.children[0].material.side=scale<0?BackSide:FrontSide;// renderer flips side when determinant < 0; flipping not wanted here
this.lookAt(this.plane.normal);Object3D.prototype.updateMatrixWorld.call(this,force);};/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / http://github.com/zz85
 * @author bhouston / http://clara.io
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  color - color in hex value
 *  headLength - Number
 *  headWidth - Number
 */var _axis=new Vector3();var _lineGeometry,_coneGeometry;function ArrowHelper(dir,origin,length,color,headLength,headWidth){// dir is assumed to be normalized
Object3D.call(this);if(dir===undefined)dir=new Vector3(0,0,1);if(origin===undefined)origin=new Vector3(0,0,0);if(length===undefined)length=1;if(color===undefined)color=0xffff00;if(headLength===undefined)headLength=0.2*length;if(headWidth===undefined)headWidth=0.2*headLength;if(_lineGeometry===undefined){_lineGeometry=new BufferGeometry();_lineGeometry.setAttribute('position',new Float32BufferAttribute([0,0,0,0,1,0],3));_coneGeometry=new CylinderBufferGeometry(0,0.5,1,5,1);_coneGeometry.translate(0,-0.5,0);}this.position.copy(origin);this.line=new Line(_lineGeometry,new LineBasicMaterial({color:color}));this.line.matrixAutoUpdate=false;this.add(this.line);this.cone=new Mesh(_coneGeometry,new MeshBasicMaterial({color:color}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(dir);this.setLength(length,headLength,headWidth);}ArrowHelper.prototype=Object.create(Object3D.prototype);ArrowHelper.prototype.constructor=ArrowHelper;ArrowHelper.prototype.setDirection=function(dir){// dir is assumed to be normalized
if(dir.y>0.99999){this.quaternion.set(0,0,0,1);}else if(dir.y<-0.99999){this.quaternion.set(1,0,0,0);}else {_axis.set(dir.z,0,-dir.x).normalize();var radians=Math.acos(dir.y);this.quaternion.setFromAxisAngle(_axis,radians);}};ArrowHelper.prototype.setLength=function(length,headLength,headWidth){if(headLength===undefined)headLength=0.2*length;if(headWidth===undefined)headWidth=0.2*headLength;this.line.scale.set(1,Math.max(0.0001,length-headLength),1);// see #17458
this.line.updateMatrix();this.cone.scale.set(headWidth,headLength,headWidth);this.cone.position.y=length;this.cone.updateMatrix();};ArrowHelper.prototype.setColor=function(color){this.line.material.color.set(color);this.cone.material.color.set(color);};ArrowHelper.prototype.copy=function(source){Object3D.prototype.copy.call(this,source,false);this.line.copy(source.line);this.cone.copy(source.cone);return this;};ArrowHelper.prototype.clone=function(){return new this.constructor().copy(this);};/**
 * @author sroucheray / http://sroucheray.org/
 * @author mrdoob / http://mrdoob.com/
 */function AxesHelper(size){size=size||1;var vertices=[0,0,0,size,0,0,0,0,0,0,size,0,0,0,0,0,0,size];var colors=[1,0,0,1,0.6,0,0,1,0,0.6,1,0,0,0,1,0,0.6,1];var geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material);}AxesHelper.prototype=Object.create(LineSegments.prototype);AxesHelper.prototype.constructor=AxesHelper;/**
 * @author Emmett Lalish / elalish
 *
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 */var LOD_MIN=4;var LOD_MAX=8;var SIZE_MAX=Math.pow(2,LOD_MAX);// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
var EXTRA_LOD_SIGMA=[0.125,0.215,0.35,0.446,0.526,0.582];var TOTAL_LODS=LOD_MAX-LOD_MIN+1+EXTRA_LOD_SIGMA.length;// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
var MAX_SAMPLES=20;var ENCODINGS=_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({},LinearEncoding,0),sRGBEncoding,1),RGBEEncoding,2),RGBM7Encoding,3),RGBM16Encoding,4),RGBDEncoding,5),GammaEncoding,6);var _flatCamera=new OrthographicCamera();var _blurMaterial=_getBlurShader(MAX_SAMPLES);var _equirectShader=null;var _cubemapShader=null;var _createPlanes2=_createPlanes(),_lodPlanes=_createPlanes2._lodPlanes,_sizeLods=_createPlanes2._sizeLods,_sigmas=_createPlanes2._sigmas;var _pingPongRenderTarget=null;var _renderer=null;var _oldTarget=null;// Golden Ratio
var PHI=(1+Math.sqrt(5))/2;var INV_PHI=1/PHI;// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
var _axisDirections=[new Vector3(1,1,1),new Vector3(-1,1,1),new Vector3(1,1,-1),new Vector3(-1,1,-1),new Vector3(0,PHI,INV_PHI),new Vector3(0,PHI,-INV_PHI),new Vector3(INV_PHI,0,PHI),new Vector3(-INV_PHI,0,PHI),new Vector3(PHI,INV_PHI,0),new Vector3(-PHI,INV_PHI,0)];function PMREMGenerator(renderer){_renderer=renderer;_compileMaterial(_blurMaterial);}PMREMGenerator.prototype={constructor:PMREMGenerator,/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */fromScene:function fromScene(scene){var sigma=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var near=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.1;var far=arguments.length>3&&arguments[3]!==undefined?arguments[3]:100;_oldTarget=_renderer.getRenderTarget();var cubeUVRenderTarget=_allocateTargets();_sceneToCubeUV(scene,near,far,cubeUVRenderTarget);if(sigma>0){_blur(cubeUVRenderTarget,0,0,sigma);}_applyPMREM(cubeUVRenderTarget);_cleanup(cubeUVRenderTarget);return cubeUVRenderTarget;},/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */fromEquirectangular:function fromEquirectangular(equirectangular){equirectangular.magFilter=NearestFilter;equirectangular.minFilter=NearestFilter;equirectangular.generateMipmaps=false;return this.fromCubemap(equirectangular);},/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */fromCubemap:function fromCubemap(cubemap){_oldTarget=_renderer.getRenderTarget();var cubeUVRenderTarget=_allocateTargets(cubemap);_textureToCubeUV(cubemap,cubeUVRenderTarget);_applyPMREM(cubeUVRenderTarget);_cleanup(cubeUVRenderTarget);return cubeUVRenderTarget;},/**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */compileCubemapShader:function compileCubemapShader(){if(_cubemapShader==null){_cubemapShader=_getCubemapShader();_compileMaterial(_cubemapShader);}},/**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */compileEquirectangularShader:function compileEquirectangularShader(){if(_equirectShader==null){_equirectShader=_getEquirectShader();_compileMaterial(_equirectShader);}},/**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */dispose:function dispose(){_blurMaterial.dispose();if(_cubemapShader!=null)_cubemapShader.dispose();if(_equirectShader!=null)_equirectShader.dispose();for(var i=0;i<_lodPlanes.length;i++){_lodPlanes[i].dispose();}}};function _createPlanes(){var _lodPlanes=[];var _sizeLods=[];var _sigmas=[];var lod=LOD_MAX;for(var i=0;i<TOTAL_LODS;i++){var sizeLod=Math.pow(2,lod);_sizeLods.push(sizeLod);var sigma=1.0/sizeLod;if(i>LOD_MAX-LOD_MIN){sigma=EXTRA_LOD_SIGMA[i-LOD_MAX+LOD_MIN-1];}else if(i==0){sigma=0;}_sigmas.push(sigma);var texelSize=1.0/(sizeLod-1);var min=-texelSize/2;var max=1+texelSize/2;var uv1=[min,min,max,min,max,max,min,min,max,max,min,max];var cubeFaces=6;var vertices=6;var positionSize=3;var uvSize=2;var faceIndexSize=1;var position=new Float32Array(positionSize*vertices*cubeFaces);var uv=new Float32Array(uvSize*vertices*cubeFaces);var faceIndex=new Float32Array(faceIndexSize*vertices*cubeFaces);for(var face=0;face<cubeFaces;face++){var x=face%3*2/3-1;var y=face>2?0:-1;var coordinates=[x,y,0,x+2/3,y,0,x+2/3,y+1,0,x,y,0,x+2/3,y+1,0,x,y+1,0];position.set(coordinates,positionSize*vertices*face);uv.set(uv1,uvSize*vertices*face);var fill=[face,face,face,face,face,face];faceIndex.set(fill,faceIndexSize*vertices*face);}var planes=new BufferGeometry();planes.setAttribute('position',new BufferAttribute(position,positionSize));planes.setAttribute('uv',new BufferAttribute(uv,uvSize));planes.setAttribute('faceIndex',new BufferAttribute(faceIndex,faceIndexSize));_lodPlanes.push(planes);if(lod>LOD_MIN){lod--;}}return {_lodPlanes:_lodPlanes,_sizeLods:_sizeLods,_sigmas:_sigmas};}function _allocateTargets(equirectangular){var params={magFilter:NearestFilter,minFilter:NearestFilter,generateMipmaps:false,type:equirectangular?equirectangular.type:UnsignedByteType,format:equirectangular?equirectangular.format:RGBEFormat,encoding:equirectangular?equirectangular.encoding:RGBEEncoding,depthBuffer:false,stencilBuffer:false};var cubeUVRenderTarget=_createRenderTarget(params);cubeUVRenderTarget.depthBuffer=equirectangular?false:true;_pingPongRenderTarget=_createRenderTarget(params);return cubeUVRenderTarget;}function _cleanup(outputTarget){_pingPongRenderTarget.dispose();_renderer.setRenderTarget(_oldTarget);outputTarget.scissorTest=false;// reset viewport and scissor
outputTarget.setSize(outputTarget.width,outputTarget.height);}function _sceneToCubeUV(scene,near,far,cubeUVRenderTarget){var fov=90;var aspect=1;var cubeCamera=new PerspectiveCamera(fov,aspect,near,far);var upSign=[1,1,1,1,-1,1];var forwardSign=[1,1,-1,-1,-1,1];var outputEncoding=_renderer.outputEncoding;var toneMapping=_renderer.toneMapping;var toneMappingExposure=_renderer.toneMappingExposure;var clearColor=_renderer.getClearColor();var clearAlpha=_renderer.getClearAlpha();_renderer.toneMapping=LinearToneMapping;_renderer.toneMappingExposure=1.0;_renderer.outputEncoding=LinearEncoding;scene.scale.z*=-1;var background=scene.background;if(background&&background.isColor){background.convertSRGBToLinear();// Convert linear to RGBE
var maxComponent=Math.max(background.r,background.g,background.b);var fExp=Math.min(Math.max(Math.ceil(Math.log2(maxComponent)),-128.0),127.0);background=background.multiplyScalar(Math.pow(2.0,-fExp));var alpha=(fExp+128.0)/255.0;_renderer.setClearColor(background,alpha);scene.background=null;}for(var i=0;i<6;i++){var col=i%3;if(col==0){cubeCamera.up.set(0,upSign[i],0);cubeCamera.lookAt(forwardSign[i],0,0);}else if(col==1){cubeCamera.up.set(0,0,upSign[i]);cubeCamera.lookAt(0,forwardSign[i],0);}else {cubeCamera.up.set(0,upSign[i],0);cubeCamera.lookAt(0,0,forwardSign[i]);}_setViewport(cubeUVRenderTarget,col*SIZE_MAX,i>2?SIZE_MAX:0,SIZE_MAX,SIZE_MAX);_renderer.setRenderTarget(cubeUVRenderTarget);_renderer.render(scene,cubeCamera);}_renderer.toneMapping=toneMapping;_renderer.toneMappingExposure=toneMappingExposure;_renderer.outputEncoding=outputEncoding;_renderer.setClearColor(clearColor,clearAlpha);scene.scale.z*=-1;}function _textureToCubeUV(texture,cubeUVRenderTarget){var scene=new Scene();if(texture.isCubeTexture){if(_cubemapShader==null){_cubemapShader=_getCubemapShader();}}else {if(_equirectShader==null){_equirectShader=_getEquirectShader();}}var material=texture.isCubeTexture?_cubemapShader:_equirectShader;scene.add(new Mesh(_lodPlanes[0],material));var uniforms=material.uniforms;uniforms['envMap'].value=texture;if(!texture.isCubeTexture){uniforms['texelSize'].value.set(1.0/texture.image.width,1.0/texture.image.height);}uniforms['inputEncoding'].value=ENCODINGS[texture.encoding];uniforms['outputEncoding'].value=ENCODINGS[texture.encoding];_setViewport(cubeUVRenderTarget,0,0,3*SIZE_MAX,2*SIZE_MAX);_renderer.setRenderTarget(cubeUVRenderTarget);_renderer.render(scene,_flatCamera);}function _compileMaterial(material){var tmpScene=new Scene();tmpScene.add(new Mesh(_lodPlanes[0],material));_renderer.compile(tmpScene,_flatCamera);}function _createRenderTarget(params){var cubeUVRenderTarget=new WebGLRenderTarget(3*SIZE_MAX,3*SIZE_MAX,params);cubeUVRenderTarget.texture.mapping=CubeUVReflectionMapping;cubeUVRenderTarget.texture.name='PMREM.cubeUv';cubeUVRenderTarget.scissorTest=true;return cubeUVRenderTarget;}function _setViewport(target,x,y,width,height){target.viewport.set(x,y,width,height);target.scissor.set(x,y,width,height);}function _applyPMREM(cubeUVRenderTarget){var autoClear=_renderer.autoClear;_renderer.autoClear=false;for(var i=1;i<TOTAL_LODS;i++){var sigma=Math.sqrt(_sigmas[i]*_sigmas[i]-_sigmas[i-1]*_sigmas[i-1]);var poleAxis=_axisDirections[(i-1)%_axisDirections.length];_blur(cubeUVRenderTarget,i-1,i,sigma,poleAxis);}_renderer.autoClear=autoClear;}/**
 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
 * vertically and horizontally, but this breaks down on a cube. Here we apply
 * the blur latitudinally (around the poles), and then longitudinally (towards
 * the poles) to approximate the orthogonally-separable blur. It is least
 * accurate at the poles, but still does a decent job.
 */function _blur(cubeUVRenderTarget,lodIn,lodOut,sigma,poleAxis){_halfBlur(cubeUVRenderTarget,_pingPongRenderTarget,lodIn,lodOut,sigma,'latitudinal',poleAxis);_halfBlur(_pingPongRenderTarget,cubeUVRenderTarget,lodOut,lodOut,sigma,'longitudinal',poleAxis);}function _halfBlur(targetIn,targetOut,lodIn,lodOut,sigmaRadians,direction,poleAxis){if(direction!=='latitudinal'&&direction!=='longitudinal'){console.error('blur direction must be either latitudinal or longitudinal!');}// Number of standard deviations at which to cut off the discrete approximation.
var STANDARD_DEVIATIONS=3;var blurScene=new Scene();blurScene.add(new Mesh(_lodPlanes[lodOut],_blurMaterial));var blurUniforms=_blurMaterial.uniforms;var pixels=_sizeLods[lodIn]-1;var radiansPerPixel=isFinite(sigmaRadians)?Math.PI/(2*pixels):2*Math.PI/(2*MAX_SAMPLES-1);var sigmaPixels=sigmaRadians/radiansPerPixel;var samples=isFinite(sigmaRadians)?1+Math.floor(STANDARD_DEVIATIONS*sigmaPixels):MAX_SAMPLES;if(samples>MAX_SAMPLES){console.warn("sigmaRadians, ".concat(sigmaRadians,", is too large and will clip, as it requested ").concat(samples," samples when the maximum is set to ").concat(MAX_SAMPLES));}var weights=[];var sum=0;for(var i=0;i<MAX_SAMPLES;++i){var x=i/sigmaPixels;var weight=Math.exp(-x*x/2);weights.push(weight);if(i==0){sum+=weight;}else if(i<samples){sum+=2*weight;}}for(var i=0;i<weights.length;i++){weights[i]=weights[i]/sum;}blurUniforms['envMap'].value=targetIn.texture;blurUniforms['samples'].value=samples;blurUniforms['weights'].value=weights;blurUniforms['latitudinal'].value=direction==='latitudinal';if(poleAxis){blurUniforms['poleAxis'].value=poleAxis;}blurUniforms['dTheta'].value=radiansPerPixel;blurUniforms['mipInt'].value=LOD_MAX-lodIn;blurUniforms['inputEncoding'].value=ENCODINGS[targetIn.texture.encoding];blurUniforms['outputEncoding'].value=ENCODINGS[targetIn.texture.encoding];var outputSize=_sizeLods[lodOut];var x=3*Math.max(0,SIZE_MAX-2*outputSize);var y=(lodOut===0?0:2*SIZE_MAX)+2*outputSize*(lodOut>LOD_MAX-LOD_MIN?lodOut-LOD_MAX+LOD_MIN:0);_setViewport(targetOut,x,y,3*outputSize,2*outputSize);_renderer.setRenderTarget(targetOut);_renderer.render(blurScene,_flatCamera);}function _getBlurShader(maxSamples){var weights=new Float32Array(maxSamples);var poleAxis=new Vector3(0,1,0);var shaderMaterial=new RawShaderMaterial({defines:{'n':maxSamples},uniforms:{'envMap':{value:null},'samples':{value:1},'weights':{value:weights},'latitudinal':{value:false},'dTheta':{value:0},'mipInt':{value:0},'poleAxis':{value:poleAxis},'inputEncoding':{value:ENCODINGS[LinearEncoding]},'outputEncoding':{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform int samples;\\nuniform float weights[n];\\nuniform bool latitudinal;\\nuniform float dTheta;\\nuniform float mipInt;\\nuniform vec3 poleAxis;\\n\\n".concat(_getEncodings(),"\\n\\n#define ENVMAP_TYPE_CUBE_UV\\n#include <cube_uv_reflection_fragment>\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tfor (int i = 0; i < n; i++) {\\n\\t\\tif (i >= samples)\\n\\t\\t\\tbreak;\\n\\t\\tfor (int dir = -1; dir < 2; dir += 2) {\\n\\t\\t\\tif (i == 0 && dir == 1)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\\n\\t\\t\\tif (all(equal(axis, vec3(0.0))))\\n\\t\\t\\t\\taxis = cross(vec3(0.0, 1.0, 0.0), vOutputDirection);\\n\\t\\t\\taxis = normalize(axis);\\n\\t\\t\\tfloat theta = dTheta * float(dir * i);\\n\\t\\t\\tfloat cosTheta = cos(theta);\\n\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross(axis, vOutputDirection) * sin(theta)\\n\\t\\t\\t\\t\\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\\n\\t\\t\\tgl_FragColor.rgb +=\\n\\t\\t\\t\\t\\tweights[i] * bilinearCubeUV(envMap, sampleDirection, mipInt);\\n\\t\\t}\\n\\t}\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t"),blending:NoBlending,depthTest:false,depthWrite:false});shaderMaterial.type='SphericalGaussianBlur';return shaderMaterial;}function _getEquirectShader(){var texelSize=new Vector2(1,1);var shaderMaterial=new RawShaderMaterial({uniforms:{'envMap':{value:null},'texelSize':{value:texelSize},'inputEncoding':{value:ENCODINGS[LinearEncoding]},'outputEncoding':{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform vec2 texelSize;\\n\\n".concat(_getEncodings(),"\\n\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tvec3 outputDirection = normalize(vOutputDirection);\\n\\tvec2 uv;\\n\\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\\n\\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\\n\\tvec2 f = fract(uv / texelSize - 0.5);\\n\\tuv -= f * texelSize;\\n\\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x += texelSize.x;\\n\\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.y += texelSize.y;\\n\\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x -= texelSize.x;\\n\\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tvec3 tm = mix(tl, tr, f.x);\\n\\tvec3 bm = mix(bl, br, f.x);\\n\\tgl_FragColor.rgb = mix(tm, bm, f.y);\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t"),blending:NoBlending,depthTest:false,depthWrite:false});shaderMaterial.type='EquirectangularToCubeUV';return shaderMaterial;}function _getCubemapShader(){var shaderMaterial=new RawShaderMaterial({uniforms:{'envMap':{value:null},'inputEncoding':{value:ENCODINGS[LinearEncoding]},'outputEncoding':{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform samplerCube envMap;\\n\\n".concat(_getEncodings(),"\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t"),blending:NoBlending,depthTest:false,depthWrite:false});shaderMaterial.type='CubemapToCubeUV';return shaderMaterial;}function _getCommonVertexShader(){return "\\nprecision mediump float;\\nprecision mediump int;\\nattribute vec3 position;\\nattribute vec2 uv;\\nattribute float faceIndex;\\nvarying vec3 vOutputDirection;\\nvec3 getDirection(vec2 uv, float face) {\\n\\tuv = 2.0 * uv - 1.0;\\n\\tvec3 direction = vec3(uv, 1.0);\\n\\tif (face == 0.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 1.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 3.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.x *= -1.0;\\n\\t} else if (face == 4.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.y *= -1.0;\\n\\t} else if (face == 5.0) {\\n\\t\\tdirection.xz *= -1.0;\\n\\t}\\n\\treturn direction;\\n}\\nvoid main() {\\n\\tvOutputDirection = getDirection(uv, faceIndex);\\n\\tgl_Position = vec4( position, 1.0 );\\n}\\n\\t";}function _getEncodings(){return "\\nuniform int inputEncoding;\\nuniform int outputEncoding;\\n\\n#include <encodings_pars_fragment>\\n\\nvec4 inputTexelToLinear(vec4 value){\\n\\tif(inputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(inputEncoding == 1){\\n\\t\\treturn sRGBToLinear(value);\\n\\t}else if(inputEncoding == 2){\\n\\t\\treturn RGBEToLinear(value);\\n\\t}else if(inputEncoding == 3){\\n\\t\\treturn RGBMToLinear(value, 7.0);\\n\\t}else if(inputEncoding == 4){\\n\\t\\treturn RGBMToLinear(value, 16.0);\\n\\t}else if(inputEncoding == 5){\\n\\t\\treturn RGBDToLinear(value, 256.0);\\n\\t}else{\\n\\t\\treturn GammaToLinear(value, 2.2);\\n\\t}\\n}\\n\\nvec4 linearToOutputTexel(vec4 value){\\n\\tif(outputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(outputEncoding == 1){\\n\\t\\treturn LinearTosRGB(value);\\n\\t}else if(outputEncoding == 2){\\n\\t\\treturn LinearToRGBE(value);\\n\\t}else if(outputEncoding == 3){\\n\\t\\treturn LinearToRGBM(value, 7.0);\\n\\t}else if(outputEncoding == 4){\\n\\t\\treturn LinearToRGBM(value, 16.0);\\n\\t}else if(outputEncoding == 5){\\n\\t\\treturn LinearToRGBD(value, 256.0);\\n\\t}else{\\n\\t\\treturn LinearToGamma(value, 2.2);\\n\\t}\\n}\\n\\nvec4 envMapTexelToLinear(vec4 color) {\\n\\treturn inputTexelToLinear(color);\\n}\\n\\t";}Curve.create=function(construct,getPoint){console.log('THREE.Curve.create() has been deprecated');construct.prototype=Object.create(Curve.prototype);construct.prototype.constructor=construct;construct.prototype.getPoint=getPoint;return construct;};//
Object.assign(CurvePath.prototype,{createPointsGeometry:function createPointsGeometry(divisions){console.warn('THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');// generate geometry from path points (for Line or Points objects)
var pts=this.getPoints(divisions);return this.createGeometry(pts);},createSpacedPointsGeometry:function createSpacedPointsGeometry(divisions){console.warn('THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');// generate geometry from equidistant sampling along the path
var pts=this.getSpacedPoints(divisions);return this.createGeometry(pts);},createGeometry:function createGeometry(points){console.warn('THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');var geometry=new Geometry();for(var i=0,l=points.length;i<l;i++){var point=points[i];geometry.vertices.push(new Vector3(point.x,point.y,point.z||0));}return geometry;}});//
Object.assign(Path.prototype,{fromPoints:function fromPoints(points){console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');return this.setFromPoints(points);}});//
Object.create(CatmullRomCurve3.prototype);//
Object.create(CatmullRomCurve3.prototype);//
function Spline(points){console.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');CatmullRomCurve3.call(this,points);this.type='catmullrom';}Spline.prototype=Object.create(CatmullRomCurve3.prototype);Object.assign(Spline.prototype,{initFromArray:function initFromArray(/* a */){console.error('THREE.Spline: .initFromArray() has been removed.');},getControlPointsArray:function getControlPointsArray(/* optionalTarget */){console.error('THREE.Spline: .getControlPointsArray() has been removed.');},reparametrizeByArcLength:function reparametrizeByArcLength(/* samplingCoef */){console.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');}});//
GridHelper.prototype.setColors=function(){console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');};SkeletonHelper.prototype.update=function(){console.error('THREE.SkeletonHelper: update() no longer needs to be called.');};Object.assign(Loader.prototype,{extractUrlBase:function extractUrlBase(url){console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');return LoaderUtils.extractUrlBase(url);}});Loader.Handlers={add:function add(/* regex, loader */){console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');},get:function get(/* file */){console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');}};Object.assign(ObjectLoader.prototype,{setTexturePath:function setTexturePath(value){console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');return this.setResourcePath(value);}});//
Object.assign(Box2.prototype,{center:function center(optionalTarget){console.warn('THREE.Box2: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);},empty:function empty(){console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');return this.isEmpty();},isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},size:function size(optionalTarget){console.warn('THREE.Box2: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);}});Object.assign(Box3.prototype,{center:function center(optionalTarget){console.warn('THREE.Box3: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);},empty:function empty(){console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');return this.isEmpty();},isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},isIntersectionSphere:function isIntersectionSphere(sphere){console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);},size:function size(optionalTarget){console.warn('THREE.Box3: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);}});Frustum.prototype.setFromMatrix=function(m){console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');return this.setFromProjectionMatrix(m);};Line3.prototype.center=function(optionalTarget){console.warn('THREE.Line3: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);};Object.assign(MathUtils,{random16:function random16(){console.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');return Math.random();},nearestPowerOfTwo:function nearestPowerOfTwo(value){console.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');return MathUtils.floorPowerOfTwo(value);},nextPowerOfTwo:function nextPowerOfTwo(value){console.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');return MathUtils.ceilPowerOfTwo(value);}});Object.assign(Matrix3.prototype,{flattenToArrayOffset:function flattenToArrayOffset(array,offset){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(array,offset);},multiplyVector3:function multiplyVector3(vector){console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');return vector.applyMatrix3(this);},multiplyVector3Array:function multiplyVector3Array(/* a */){console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');},applyToBufferAttribute:function applyToBufferAttribute(attribute){console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');return attribute.applyMatrix3(this);},applyToVector3Array:function applyToVector3Array(/* array, offset, length */){console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');}});Object.assign(Matrix4.prototype,{extractPosition:function extractPosition(m){console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');return this.copyPosition(m);},flattenToArrayOffset:function flattenToArrayOffset(array,offset){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(array,offset);},getPosition:function getPosition(){console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');return new Vector3().setFromMatrixColumn(this,3);},setRotationFromQuaternion:function setRotationFromQuaternion(q){console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');return this.makeRotationFromQuaternion(q);},multiplyToArray:function multiplyToArray(){console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');},multiplyVector3:function multiplyVector3(vector){console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},multiplyVector4:function multiplyVector4(vector){console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},multiplyVector3Array:function multiplyVector3Array(/* a */){console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');},rotateAxis:function rotateAxis(v){console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');v.transformDirection(this);},crossVector:function crossVector(vector){console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},translate:function translate(){console.error('THREE.Matrix4: .translate() has been removed.');},rotateX:function rotateX(){console.error('THREE.Matrix4: .rotateX() has been removed.');},rotateY:function rotateY(){console.error('THREE.Matrix4: .rotateY() has been removed.');},rotateZ:function rotateZ(){console.error('THREE.Matrix4: .rotateZ() has been removed.');},rotateByAxis:function rotateByAxis(){console.error('THREE.Matrix4: .rotateByAxis() has been removed.');},applyToBufferAttribute:function applyToBufferAttribute(attribute){console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');return attribute.applyMatrix4(this);},applyToVector3Array:function applyToVector3Array(/* array, offset, length */){console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');},makeFrustum:function makeFrustum(left,right,bottom,top,near,far){console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');return this.makePerspective(left,right,top,bottom,near,far);}});Plane.prototype.isIntersectionLine=function(line){console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');return this.intersectsLine(line);};Quaternion.prototype.multiplyVector3=function(vector){console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');return vector.applyQuaternion(this);};Object.assign(Ray.prototype,{isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},isIntersectionPlane:function isIntersectionPlane(plane){console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');return this.intersectsPlane(plane);},isIntersectionSphere:function isIntersectionSphere(sphere){console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);}});Object.assign(Triangle.prototype,{area:function area(){console.warn('THREE.Triangle: .area() has been renamed to .getArea().');return this.getArea();},barycoordFromPoint:function barycoordFromPoint(point,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return this.getBarycoord(point,target);},midpoint:function midpoint(target){console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');return this.getMidpoint(target);},normal:function normal(target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return this.getNormal(target);},plane:function plane(target){console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');return this.getPlane(target);}});Object.assign(Triangle,{barycoordFromPoint:function barycoordFromPoint(point,a,b,c,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return Triangle.getBarycoord(point,a,b,c,target);},normal:function normal(a,b,c,target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return Triangle.getNormal(a,b,c,target);}});Object.assign(Shape.prototype,{extractAllPoints:function extractAllPoints(divisions){console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');return this.extractPoints(divisions);},extrude:function extrude(options){console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');return new ExtrudeGeometry(this,options);},makeGeometry:function makeGeometry(options){console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');return new ShapeGeometry(this,options);}});Object.assign(Vector2.prototype,{fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},distanceToManhattan:function distanceToManhattan(v){console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});Object.assign(Vector3.prototype,{setEulerFromRotationMatrix:function setEulerFromRotationMatrix(){console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');},setEulerFromQuaternion:function setEulerFromQuaternion(){console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');},getPositionFromMatrix:function getPositionFromMatrix(m){console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');return this.setFromMatrixPosition(m);},getScaleFromMatrix:function getScaleFromMatrix(m){console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');return this.setFromMatrixScale(m);},getColumnFromMatrix:function getColumnFromMatrix(index,matrix){console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');return this.setFromMatrixColumn(matrix,index);},applyProjection:function applyProjection(m){console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');return this.applyMatrix4(m);},fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},distanceToManhattan:function distanceToManhattan(v){console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});Object.assign(Vector4.prototype,{fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});//
Object.assign(Geometry.prototype,{computeTangents:function computeTangents(){console.error('THREE.Geometry: .computeTangents() has been removed.');},computeLineDistances:function computeLineDistances(){console.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');},applyMatrix:function applyMatrix(matrix){console.warn('THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);}});Object.assign(Object3D.prototype,{getChildByName:function getChildByName(name){console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');return this.getObjectByName(name);},renderDepth:function renderDepth(){console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');},translate:function translate(distance,axis){console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');return this.translateOnAxis(axis,distance);},getWorldRotation:function getWorldRotation(){console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');},applyMatrix:function applyMatrix(matrix){console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);}});Object.defineProperties(Object3D.prototype,{eulerOrder:{get:function get(){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');return this.rotation.order;},set:function set(value){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');this.rotation.order=value;}},useQuaternion:{get:function get(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');},set:function set(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');}}});Object.assign(Mesh.prototype,{setDrawMode:function setDrawMode(){console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');}});Object.defineProperties(Mesh.prototype,{drawMode:{get:function get(){console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');return TrianglesDrawMode;},set:function set(){console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');}}});Object.defineProperties(LOD.prototype,{objects:{get:function get(){console.warn('THREE.LOD: .objects has been renamed to .levels.');return this.levels;}}});Object.defineProperty(Skeleton.prototype,'useVertexTexture',{get:function get(){console.warn('THREE.Skeleton: useVertexTexture has been removed.');},set:function set(){console.warn('THREE.Skeleton: useVertexTexture has been removed.');}});SkinnedMesh.prototype.initBones=function(){console.error('THREE.SkinnedMesh: initBones() has been removed.');};Object.defineProperty(Curve.prototype,'__arcLengthDivisions',{get:function get(){console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');return this.arcLengthDivisions;},set:function set(value){console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');this.arcLengthDivisions=value;}});//
PerspectiveCamera.prototype.setLens=function(focalLength,filmGauge){console.warn("THREE.PerspectiveCamera.setLens is deprecated. "+"Use .setFocalLength and .filmGauge for a photographic setup.");if(filmGauge!==undefined)this.filmGauge=filmGauge;this.setFocalLength(focalLength);};//
Object.defineProperties(Light.prototype,{onlyShadow:{set:function set(){console.warn('THREE.Light: .onlyShadow has been removed.');}},shadowCameraFov:{set:function set(value){console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');this.shadow.camera.fov=value;}},shadowCameraLeft:{set:function set(value){console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');this.shadow.camera.left=value;}},shadowCameraRight:{set:function set(value){console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');this.shadow.camera.right=value;}},shadowCameraTop:{set:function set(value){console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');this.shadow.camera.top=value;}},shadowCameraBottom:{set:function set(value){console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');this.shadow.camera.bottom=value;}},shadowCameraNear:{set:function set(value){console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');this.shadow.camera.near=value;}},shadowCameraFar:{set:function set(value){console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');this.shadow.camera.far=value;}},shadowCameraVisible:{set:function set(){console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');}},shadowBias:{set:function set(value){console.warn('THREE.Light: .shadowBias is now .shadow.bias.');this.shadow.bias=value;}},shadowDarkness:{set:function set(){console.warn('THREE.Light: .shadowDarkness has been removed.');}},shadowMapWidth:{set:function set(value){console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');this.shadow.mapSize.width=value;}},shadowMapHeight:{set:function set(value){console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');this.shadow.mapSize.height=value;}}});//
Object.defineProperties(BufferAttribute.prototype,{length:{get:function get(){console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');return this.array.length;}},dynamic:{get:function get(){console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');return this.usage===DynamicDrawUsage;},set:function set(/* value */){console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');this.setUsage(DynamicDrawUsage);}}});Object.assign(BufferAttribute.prototype,{setDynamic:function setDynamic(value){console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');this.setUsage(value===true?DynamicDrawUsage:StaticDrawUsage);return this;},copyIndicesArray:function copyIndicesArray(/* indices */){console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');},setArray:function setArray(/* array */){console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');}});Object.assign(BufferGeometry.prototype,{addIndex:function addIndex(index){console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');this.setIndex(index);},addAttribute:function addAttribute(name,attribute){console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');if(!(attribute&&attribute.isBufferAttribute)&&!(attribute&&attribute.isInterleavedBufferAttribute)){console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');return this.setAttribute(name,new BufferAttribute(arguments[1],arguments[2]));}if(name==='index'){console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');this.setIndex(attribute);return this;}return this.setAttribute(name,attribute);},addDrawCall:function addDrawCall(start,count,indexOffset){if(indexOffset!==undefined){console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');}console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');this.addGroup(start,count);},clearDrawCalls:function clearDrawCalls(){console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');this.clearGroups();},computeTangents:function computeTangents(){console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');},computeOffsets:function computeOffsets(){console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');},removeAttribute:function removeAttribute(name){console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');return this.deleteAttribute(name);},applyMatrix:function applyMatrix(matrix){console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);}});Object.defineProperties(BufferGeometry.prototype,{drawcalls:{get:function get(){console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');return this.groups;}},offsets:{get:function get(){console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');return this.groups;}}});Object.defineProperties(InterleavedBuffer.prototype,{dynamic:{get:function get(){console.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');return this.usage===DynamicDrawUsage;},set:function set(value){console.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');this.setUsage(value);}}});Object.assign(InterleavedBuffer.prototype,{setDynamic:function setDynamic(value){console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');this.setUsage(value===true?DynamicDrawUsage:StaticDrawUsage);return this;},setArray:function setArray(/* array */){console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');}});//
Object.assign(ExtrudeBufferGeometry.prototype,{getArrays:function getArrays(){console.error('THREE.ExtrudeBufferGeometry: .getArrays() has been removed.');},addShapeList:function addShapeList(){console.error('THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.');},addShape:function addShape(){console.error('THREE.ExtrudeBufferGeometry: .addShape() has been removed.');}});//
Object.defineProperties(Uniform.prototype,{dynamic:{set:function set(){console.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');}},onUpdate:{value:function value(){console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');return this;}}});//
Object.defineProperties(Material.prototype,{wrapAround:{get:function get(){console.warn('THREE.Material: .wrapAround has been removed.');},set:function set(){console.warn('THREE.Material: .wrapAround has been removed.');}},overdraw:{get:function get(){console.warn('THREE.Material: .overdraw has been removed.');},set:function set(){console.warn('THREE.Material: .overdraw has been removed.');}},wrapRGB:{get:function get(){console.warn('THREE.Material: .wrapRGB has been removed.');return new Color();}},shading:{get:function get(){console.error('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');},set:function set(value){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=value===FlatShading;}},stencilMask:{get:function get(){console.warn('THREE.'+this.type+': .stencilMask has been removed. Use .stencilFuncMask instead.');return this.stencilFuncMask;},set:function set(value){console.warn('THREE.'+this.type+': .stencilMask has been removed. Use .stencilFuncMask instead.');this.stencilFuncMask=value;}}});Object.defineProperties(MeshPhongMaterial.prototype,{metal:{get:function get(){console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');return false;},set:function set(){console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');}}});Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function get(){console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');return this.extensions.derivatives;},set:function set(value){console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');this.extensions.derivatives=value;}}});//
Object.assign(WebGLRenderer.prototype,{clearTarget:function clearTarget(renderTarget,color,depth,stencil){console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');this.setRenderTarget(renderTarget);this.clear(color,depth,stencil);},animate:function animate(callback){console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');this.setAnimationLoop(callback);},getCurrentRenderTarget:function getCurrentRenderTarget(){console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');return this.getRenderTarget();},getMaxAnisotropy:function getMaxAnisotropy(){console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');return this.capabilities.getMaxAnisotropy();},getPrecision:function getPrecision(){console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');return this.capabilities.precision;},resetGLState:function resetGLState(){console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');return this.state.reset();},supportsFloatTextures:function supportsFloatTextures(){console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');return this.extensions.get('OES_texture_float');},supportsHalfFloatTextures:function supportsHalfFloatTextures(){console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');return this.extensions.get('OES_texture_half_float');},supportsStandardDerivatives:function supportsStandardDerivatives(){console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');return this.extensions.get('OES_standard_derivatives');},supportsCompressedTextureS3TC:function supportsCompressedTextureS3TC(){console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');return this.extensions.get('WEBGL_compressed_texture_s3tc');},supportsCompressedTexturePVRTC:function supportsCompressedTexturePVRTC(){console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');return this.extensions.get('WEBGL_compressed_texture_pvrtc');},supportsBlendMinMax:function supportsBlendMinMax(){console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');return this.extensions.get('EXT_blend_minmax');},supportsVertexTextures:function supportsVertexTextures(){console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');return this.capabilities.vertexTextures;},supportsInstancedArrays:function supportsInstancedArrays(){console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');return this.extensions.get('ANGLE_instanced_arrays');},enableScissorTest:function enableScissorTest(boolean){console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');this.setScissorTest(boolean);},initMaterial:function initMaterial(){console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');},addPrePlugin:function addPrePlugin(){console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');},addPostPlugin:function addPostPlugin(){console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');},updateShadowMap:function updateShadowMap(){console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');},setFaceCulling:function setFaceCulling(){console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');},allocTextureUnit:function allocTextureUnit(){console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');},setTexture:function setTexture(){console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');},setTexture2D:function setTexture2D(){console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');},setTextureCube:function setTextureCube(){console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');},getActiveMipMapLevel:function getActiveMipMapLevel(){console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');return this.getActiveMipmapLevel();}});Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function get(){return this.shadowMap.enabled;},set:function set(value){console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');this.shadowMap.enabled=value;}},shadowMapType:{get:function get(){return this.shadowMap.type;},set:function set(value){console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');this.shadowMap.type=value;}},shadowMapCullFace:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(/* value */){console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');}},context:{get:function get(){console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');return this.getContext();}},vr:{get:function get(){console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');return this.xr;}},gammaInput:{get:function get(){console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');return false;},set:function set(){console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');}},gammaOutput:{get:function get(){console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');return false;},set:function set(value){console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');this.outputEncoding=value===true?sRGBEncoding:LinearEncoding;}}});Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(/* cullFace */){console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');}},renderReverseSided:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');}},renderSingleSided:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');}}});Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function get(){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');return this.texture.wrapS;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');this.texture.wrapS=value;}},wrapT:{get:function get(){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');return this.texture.wrapT;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');this.texture.wrapT=value;}},magFilter:{get:function get(){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');return this.texture.magFilter;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');this.texture.magFilter=value;}},minFilter:{get:function get(){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');return this.texture.minFilter;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');this.texture.minFilter=value;}},anisotropy:{get:function get(){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');return this.texture.anisotropy;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');this.texture.anisotropy=value;}},offset:{get:function get(){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');return this.texture.offset;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');this.texture.offset=value;}},repeat:{get:function get(){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');return this.texture.repeat;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');this.texture.repeat=value;}},format:{get:function get(){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');return this.texture.format;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');this.texture.format=value;}},type:{get:function get(){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');return this.texture.type;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');this.texture.type=value;}},generateMipmaps:{get:function get(){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');return this.texture.generateMipmaps;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');this.texture.generateMipmaps=value;}}});//
Object.defineProperties(Audio.prototype,{load:{value:function value(file){console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');var scope=this;var audioLoader=new AudioLoader();audioLoader.load(file,function(buffer){scope.setBuffer(buffer);});return this;}},startTime:{set:function set(){console.warn('THREE.Audio: .startTime is now .play( delay ).');}}});AudioAnalyser.prototype.getData=function(){console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');return this.getFrequencyData();};//
CubeCamera.prototype.updateCubeMap=function(renderer,scene){console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');return this.update(renderer,scene);};//
ImageUtils.crossOrigin=undefined;ImageUtils.loadTexture=function(url,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');var loader=new TextureLoader();loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(url,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadTextureCube=function(urls,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');var loader=new CubeTextureLoader();loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(urls,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadCompressedTexture=function(){console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');};ImageUtils.loadCompressedTextureCube=function(){console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');};//
if(typeof __THREE_DEVTOOLS__!=='undefined'){/* eslint-disable no-undef */__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register',{detail:{revision:REVISION}}));/* eslint-enable no-undef */}

var UTIF = {};

// Following lines add a JPEG decoder  to UTIF.JpegDecoder
(function () {

  var W = function a1() {
      function W(p) {
        this.message = "JPEG error: " + p;
      }
      W.prototype = new Error();
      W.prototype.name = "JpegError";
      W.constructor = W;
      return W;
    }(),
    ak = function ag() {
      var p = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]),
        t = 4017,
        ac = 799,
        ah = 3406,
        ao = 2276,
        ar = 1567,
        ai = 3784,
        s = 5793,
        ad = 2896;
      function ak(Q) {
        if (Q == null) Q = {};
        if (Q.w == null) Q.w = -1;
        this.V = Q.n;
        this.N = Q.w;
      }
      function a5(Q, h) {
        var f = 0,
          G = [],
          n,
          E,
          a = 16,
          F;
        while (a > 0 && !Q[a - 1]) {
          a--;
        }
        G.push({
          children: [],
          index: 0
        });
        var C = G[0];
        for (n = 0; n < a; n++) {
          for (E = 0; E < Q[n]; E++) {
            C = G.pop();
            C.children[C.index] = h[f];
            while (C.index > 0) {
              C = G.pop();
            }
            C.index++;
            G.push(C);
            while (G.length <= n) {
              G.push(F = {
                children: [],
                index: 0
              });
              C.children[C.index] = F.children;
              C = F;
            }
            f++;
          }
          if (n + 1 < a) {
            G.push(F = {
              children: [],
              index: 0
            });
            C.children[C.index] = F.children;
            C = F;
          }
        }
        return G[0].children;
      }
      function a2(Q, h, f) {
        return 64 * ((Q.P + 1) * h + f);
      }
      function a7(Q, h, f, G, n, E, a, C, F, d) {
        if (d == null) d = !1;
        var T = f.m,
          U = f.Z,
          z = h,
          J = 0,
          V = 0,
          r = 0,
          D = 0,
          a8,
          q = 0,
          X,
          O,
          _,
          N,
          e,
          K,
          x = 0,
          k,
          g,
          R,
          c;
        function Y() {
          if (V > 0) {
            V--;
            return J >> V & 1;
          }
          J = Q[h++];
          if (J === 255) {
            var I = Q[h++];
            if (I) {
              if (I === 220 && d) {
                h += 2;
                var l = Z(Q, h);
                h += 2;
                if (l > 0 && l !== f.s) {
                  throw new DNLMarkerError("Found DNL marker (0xFFDC) while parsing scan data", l);
                }
              } else if (I === 217) {
                if (d) {
                  var M = q * 8;
                  if (M > 0 && M < f.s / 10) {
                    throw new DNLMarkerError("Found EOI marker (0xFFD9) while parsing scan data, " + "possibly caused by incorrect \`scanLines\` parameter", M);
                  }
                }
                throw new EOIMarkerError("Found EOI marker (0xFFD9) while parsing scan data");
              }
              throw new W("unexpected marker");
            }
          }
          V = 7;
          return J >>> 7;
        }
        function u(I) {
          var l = I;
          while (!0) {
            l = l[Y()];
            switch (_typeof$2(l)) {
              case "number":
                return l;
              case "object":
                continue;
            }
            throw new W("invalid huffman sequence");
          }
        }
        function m(I) {
          var e = 0;
          while (I > 0) {
            e = e << 1 | Y();
            I--;
          }
          return e;
        }
        function j(I) {
          if (I === 1) {
            return Y() === 1 ? 1 : -1;
          }
          var e = m(I);
          if (e >= 1 << I - 1) {
            return e;
          }
          return e + (-1 << I) + 1;
        }
        function v(X, I) {
          var l = u(X.J),
            M = l === 0 ? 0 : j(l),
            N = 1;
          X.D[I] = X.Q += M;
          while (N < 64) {
            var S = u(X.i),
              i = S & 15,
              A = S >> 4;
            if (i === 0) {
              if (A < 15) {
                break;
              }
              N += 16;
              continue;
            }
            N += A;
            var o = p[N];
            X.D[I + o] = j(i);
            N++;
          }
        }
        function $(X, I) {
          var l = u(X.J),
            M = l === 0 ? 0 : j(l) << F;
          X.D[I] = X.Q += M;
        }
        function b(X, I) {
          X.D[I] |= Y() << F;
        }
        function P(X, I) {
          if (r > 0) {
            r--;
            return;
          }
          var N = E,
            l = a;
          while (N <= l) {
            var M = u(X.i),
              S = M & 15,
              i = M >> 4;
            if (S === 0) {
              if (i < 15) {
                r = m(i) + (1 << i) - 1;
                break;
              }
              N += 16;
              continue;
            }
            N += i;
            var A = p[N];
            X.D[I + A] = j(S) * (1 << F);
            N++;
          }
        }
        function a4(X, I) {
          var N = E,
            l = a,
            M = 0,
            S,
            i;
          while (N <= l) {
            var A = I + p[N],
              o = X.D[A] < 0 ? -1 : 1;
            switch (D) {
              case 0:
                i = u(X.i);
                S = i & 15;
                M = i >> 4;
                if (S === 0) {
                  if (M < 15) {
                    r = m(M) + (1 << M);
                    D = 4;
                  } else {
                    M = 16;
                    D = 1;
                  }
                } else {
                  if (S !== 1) {
                    throw new W("invalid ACn encoding");
                  }
                  a8 = j(S);
                  D = M ? 2 : 3;
                }
                continue;
              case 1:
              case 2:
                if (X.D[A]) {
                  X.D[A] += o * (Y() << F);
                } else {
                  M--;
                  if (M === 0) {
                    D = D === 2 ? 3 : 0;
                  }
                }
                break;
              case 3:
                if (X.D[A]) {
                  X.D[A] += o * (Y() << F);
                } else {
                  X.D[A] = a8 << F;
                  D = 0;
                }
                break;
              case 4:
                if (X.D[A]) {
                  X.D[A] += o * (Y() << F);
                }
                break;
            }
            N++;
          }
          if (D === 4) {
            r--;
            if (r === 0) {
              D = 0;
            }
          }
        }
        function H(X, I, x, l, M) {
          var S = x / T | 0,
            i = x % T;
          q = S * X.A + l;
          var A = i * X.h + M,
            o = a2(X, q, A);
          I(X, o);
        }
        function w(X, I, x) {
          q = x / X.P | 0;
          var l = x % X.P,
            M = a2(X, q, l);
          I(X, M);
        }
        var y = G.length;
        if (U) {
          if (E === 0) {
            K = C === 0 ? $ : b;
          } else {
            K = C === 0 ? P : a4;
          }
        } else {
          K = v;
        }
        if (y === 1) {
          g = G[0].P * G[0].c;
        } else {
          g = T * f.R;
        }
        while (x <= g) {
          var L = n ? Math.min(g - x, n) : g;
          if (L > 0) {
            for (O = 0; O < y; O++) {
              G[O].Q = 0;
            }
            r = 0;
            if (y === 1) {
              X = G[0];
              for (e = 0; e < L; e++) {
                w(X, K, x);
                x++;
              }
            } else {
              for (e = 0; e < L; e++) {
                for (O = 0; O < y; O++) {
                  X = G[O];
                  R = X.h;
                  c = X.A;
                  for (_ = 0; _ < c; _++) {
                    for (N = 0; N < R; N++) {
                      H(X, K, x, _, N);
                    }
                  }
                }
                x++;
              }
            }
          }
          V = 0;
          k = an(Q, h);
          if (!k) {
            break;
          }
          if (k.u) {
            h = k.offset;
          }
          if (k.M >= 65488 && k.M <= 65495) {
            h += 2;
          } else {
            break;
          }
        }
        return h - z;
      }
      function al(Q, h, f) {
        var G = Q.$,
          n = Q.D,
          E,
          a,
          C,
          F,
          d,
          T,
          U,
          z,
          J,
          V,
          Y,
          u,
          m,
          j,
          v,
          $,
          b;
        if (!G) {
          throw new W("missing required Quantization Table.");
        }
        for (var r = 0; r < 64; r += 8) {
          J = n[h + r];
          V = n[h + r + 1];
          Y = n[h + r + 2];
          u = n[h + r + 3];
          m = n[h + r + 4];
          j = n[h + r + 5];
          v = n[h + r + 6];
          $ = n[h + r + 7];
          J *= G[r];
          if ((V | Y | u | m | j | v | $) === 0) {
            b = s * J + 512 >> 10;
            f[r] = b;
            f[r + 1] = b;
            f[r + 2] = b;
            f[r + 3] = b;
            f[r + 4] = b;
            f[r + 5] = b;
            f[r + 6] = b;
            f[r + 7] = b;
            continue;
          }
          V *= G[r + 1];
          Y *= G[r + 2];
          u *= G[r + 3];
          m *= G[r + 4];
          j *= G[r + 5];
          v *= G[r + 6];
          $ *= G[r + 7];
          E = s * J + 128 >> 8;
          a = s * m + 128 >> 8;
          C = Y;
          F = v;
          d = ad * (V - $) + 128 >> 8;
          z = ad * (V + $) + 128 >> 8;
          T = u << 4;
          U = j << 4;
          E = E + a + 1 >> 1;
          a = E - a;
          b = C * ai + F * ar + 128 >> 8;
          C = C * ar - F * ai + 128 >> 8;
          F = b;
          d = d + U + 1 >> 1;
          U = d - U;
          z = z + T + 1 >> 1;
          T = z - T;
          E = E + F + 1 >> 1;
          F = E - F;
          a = a + C + 1 >> 1;
          C = a - C;
          b = d * ao + z * ah + 2048 >> 12;
          d = d * ah - z * ao + 2048 >> 12;
          z = b;
          b = T * ac + U * t + 2048 >> 12;
          T = T * t - U * ac + 2048 >> 12;
          U = b;
          f[r] = E + z;
          f[r + 7] = E - z;
          f[r + 1] = a + U;
          f[r + 6] = a - U;
          f[r + 2] = C + T;
          f[r + 5] = C - T;
          f[r + 3] = F + d;
          f[r + 4] = F - d;
        }
        for (var P = 0; P < 8; ++P) {
          J = f[P];
          V = f[P + 8];
          Y = f[P + 16];
          u = f[P + 24];
          m = f[P + 32];
          j = f[P + 40];
          v = f[P + 48];
          $ = f[P + 56];
          if ((V | Y | u | m | j | v | $) === 0) {
            b = s * J + 8192 >> 14;
            if (b < -2040) {
              b = 0;
            } else if (b >= 2024) {
              b = 255;
            } else {
              b = b + 2056 >> 4;
            }
            n[h + P] = b;
            n[h + P + 8] = b;
            n[h + P + 16] = b;
            n[h + P + 24] = b;
            n[h + P + 32] = b;
            n[h + P + 40] = b;
            n[h + P + 48] = b;
            n[h + P + 56] = b;
            continue;
          }
          E = s * J + 2048 >> 12;
          a = s * m + 2048 >> 12;
          C = Y;
          F = v;
          d = ad * (V - $) + 2048 >> 12;
          z = ad * (V + $) + 2048 >> 12;
          T = u;
          U = j;
          E = (E + a + 1 >> 1) + 4112;
          a = E - a;
          b = C * ai + F * ar + 2048 >> 12;
          C = C * ar - F * ai + 2048 >> 12;
          F = b;
          d = d + U + 1 >> 1;
          U = d - U;
          z = z + T + 1 >> 1;
          T = z - T;
          E = E + F + 1 >> 1;
          F = E - F;
          a = a + C + 1 >> 1;
          C = a - C;
          b = d * ao + z * ah + 2048 >> 12;
          d = d * ah - z * ao + 2048 >> 12;
          z = b;
          b = T * ac + U * t + 2048 >> 12;
          T = T * t - U * ac + 2048 >> 12;
          U = b;
          J = E + z;
          $ = E - z;
          V = a + U;
          v = a - U;
          Y = C + T;
          j = C - T;
          u = F + d;
          m = F - d;
          if (J < 16) {
            J = 0;
          } else if (J >= 4080) {
            J = 255;
          } else {
            J >>= 4;
          }
          if (V < 16) {
            V = 0;
          } else if (V >= 4080) {
            V = 255;
          } else {
            V >>= 4;
          }
          if (Y < 16) {
            Y = 0;
          } else if (Y >= 4080) {
            Y = 255;
          } else {
            Y >>= 4;
          }
          if (u < 16) {
            u = 0;
          } else if (u >= 4080) {
            u = 255;
          } else {
            u >>= 4;
          }
          if (m < 16) {
            m = 0;
          } else if (m >= 4080) {
            m = 255;
          } else {
            m >>= 4;
          }
          if (j < 16) {
            j = 0;
          } else if (j >= 4080) {
            j = 255;
          } else {
            j >>= 4;
          }
          if (v < 16) {
            v = 0;
          } else if (v >= 4080) {
            v = 255;
          } else {
            v >>= 4;
          }
          if ($ < 16) {
            $ = 0;
          } else if ($ >= 4080) {
            $ = 255;
          } else {
            $ >>= 4;
          }
          n[h + P] = J;
          n[h + P + 8] = V;
          n[h + P + 16] = Y;
          n[h + P + 24] = u;
          n[h + P + 32] = m;
          n[h + P + 40] = j;
          n[h + P + 48] = v;
          n[h + P + 56] = $;
        }
      }
      function a0(Q, h) {
        var f = h.P,
          G = h.c,
          n = new Int16Array(64);
        for (var E = 0; E < G; E++) {
          for (var a = 0; a < f; a++) {
            var C = a2(h, E, a);
            al(h, C, n);
          }
        }
        return h.D;
      }
      function an(Q, h, f) {
        if (f == null) f = h;
        var G = Q.length - 1,
          n = f < h ? f : h;
        if (h >= G) {
          return null;
        }
        var E = Z(Q, h);
        if (E >= 65472 && E <= 65534) {
          return {
            u: null,
            M: E,
            offset: h
          };
        }
        var a = Z(Q, n);
        while (!(a >= 65472 && a <= 65534)) {
          if (++n >= G) {
            return null;
          }
          a = Z(Q, n);
        }
        return {
          u: E.toString(16),
          M: a,
          offset: n
        };
      }
      ak.prototype = {
        parse: function parse(Q, h) {
          if (h == null) h = {};
          var f = h.F,
            E = 0,
            a = null,
            C = null,
            F,
            d,
            T = 0;
          function G() {
            var o = Z(Q, E);
            E += 2;
            var B = E + o - 2,
              V = an(Q, B, E);
            if (V && V.u) {
              B = V.offset;
            }
            var ab = Q.subarray(E, B);
            E += ab.length;
            return ab;
          }
          function n(F) {
            var o = Math.ceil(F.o / 8 / F.X),
              B = Math.ceil(F.s / 8 / F.B);
            for (var Y = 0; Y < F.W.length; Y++) {
              R = F.W[Y];
              var ab = Math.ceil(Math.ceil(F.o / 8) * R.h / F.X),
                af = Math.ceil(Math.ceil(F.s / 8) * R.A / F.B),
                ap = o * R.h,
                aq = B * R.A,
                ae = 64 * aq * (ap + 1);
              R.D = new Int16Array(ae);
              R.P = ab;
              R.c = af;
            }
            F.m = o;
            F.R = B;
          }
          var U = [],
            z = [],
            J = [],
            V = Z(Q, E);
          E += 2;
          if (V !== 65496) {
            throw new W("SOI not found");
          }
          V = Z(Q, E);
          E += 2;
          markerLoop: while (V !== 65497) {
            var Y, u, m;
            switch (V) {
              case 65504:
              case 65505:
              case 65506:
              case 65507:
              case 65508:
              case 65509:
              case 65510:
              case 65511:
              case 65512:
              case 65513:
              case 65514:
              case 65515:
              case 65516:
              case 65517:
              case 65518:
              case 65519:
              case 65534:
                var j = G();
                if (V === 65504) {
                  if (j[0] === 74 && j[1] === 70 && j[2] === 73 && j[3] === 70 && j[4] === 0) {
                    a = {
                      version: {
                        d: j[5],
                        T: j[6]
                      },
                      K: j[7],
                      j: j[8] << 8 | j[9],
                      H: j[10] << 8 | j[11],
                      S: j[12],
                      I: j[13],
                      C: j.subarray(14, 14 + 3 * j[12] * j[13])
                    };
                  }
                }
                if (V === 65518) {
                  if (j[0] === 65 && j[1] === 100 && j[2] === 111 && j[3] === 98 && j[4] === 101) {
                    C = {
                      version: j[5] << 8 | j[6],
                      k: j[7] << 8 | j[8],
                      q: j[9] << 8 | j[10],
                      a: j[11]
                    };
                  }
                }
                break;
              case 65499:
                var v = Z(Q, E),
                  b;
                E += 2;
                var $ = v + E - 2;
                while (E < $) {
                  var r = Q[E++],
                    P = new Uint16Array(64);
                  if (r >> 4 === 0) {
                    for (u = 0; u < 64; u++) {
                      b = p[u];
                      P[b] = Q[E++];
                    }
                  } else if (r >> 4 === 1) {
                    for (u = 0; u < 64; u++) {
                      b = p[u];
                      P[b] = Z(Q, E);
                      E += 2;
                    }
                  } else {
                    throw new W("DQT - invalid table spec");
                  }
                  U[r & 15] = P;
                }
                break;
              case 65472:
              case 65473:
              case 65474:
                if (F) {
                  throw new W("Only single frame JPEGs supported");
                }
                E += 2;
                F = {};
                F.G = V === 65473;
                F.Z = V === 65474;
                F.precision = Q[E++];
                var D = Z(Q, E),
                  a4,
                  q = 0,
                  H = 0;
                E += 2;
                F.s = f || D;
                F.o = Z(Q, E);
                E += 2;
                F.W = [];
                F._ = {};
                var a8 = Q[E++];
                for (Y = 0; Y < a8; Y++) {
                  a4 = Q[E];
                  var w = Q[E + 1] >> 4,
                    y = Q[E + 1] & 15;
                  if (q < w) {
                    q = w;
                  }
                  if (H < y) {
                    H = y;
                  }
                  var X = Q[E + 2];
                  m = F.W.push({
                    h: w,
                    A: y,
                    L: X,
                    $: null
                  });
                  F._[a4] = m - 1;
                  E += 3;
                }
                F.X = q;
                F.B = H;
                n(F);
                break;
              case 65476:
                var O = Z(Q, E);
                E += 2;
                for (Y = 2; Y < O;) {
                  var _ = Q[E++],
                    N = new Uint8Array(16),
                    e = 0;
                  for (u = 0; u < 16; u++, E++) {
                    e += N[u] = Q[E];
                  }
                  var K = new Uint8Array(e);
                  for (u = 0; u < e; u++, E++) {
                    K[u] = Q[E];
                  }
                  Y += 17 + e;
                  (_ >> 4 === 0 ? J : z)[_ & 15] = a5(N, K);
                }
                break;
              case 65501:
                E += 2;
                d = Z(Q, E);
                E += 2;
                break;
              case 65498:
                var x = ++T === 1 && !f,
                  R;
                E += 2;
                var k = Q[E++],
                  g = [];
                for (Y = 0; Y < k; Y++) {
                  var c = Q[E++],
                    L = F._[c];
                  R = F.W[L];
                  R.index = c;
                  var a6 = Q[E++];
                  R.J = J[a6 >> 4];
                  R.i = z[a6 & 15];
                  g.push(R);
                }
                var I = Q[E++],
                  l = Q[E++],
                  M = Q[E++];
                try {
                  var S = a7(Q, E, F, g, d, I, l, M >> 4, M & 15, x);
                  E += S;
                } catch (ex) {
                  if (ex instanceof DNLMarkerError) {
                    return this.parse(Q, {
                      F: ex.s
                    });
                  } else if (ex instanceof EOIMarkerError) {
                    break markerLoop;
                  }
                  throw ex;
                }
                break;
              case 65500:
                E += 4;
                break;
              case 65535:
                if (Q[E] !== 255) {
                  E--;
                }
                break;
              default:
                var i = an(Q, E - 2, E - 3);
                if (i && i.u) {
                  E = i.offset;
                  break;
                }
                if (E >= Q.length - 1) {
                  break markerLoop;
                }
                throw new W("JpegImage.parse - unknown marker: " + V.toString(16));
            }
            V = Z(Q, E);
            E += 2;
          }
          this.width = F.o;
          this.height = F.s;
          this.g = a;
          this.b = C;
          this.W = [];
          for (Y = 0; Y < F.W.length; Y++) {
            R = F.W[Y];
            var A = U[R.L];
            if (A) {
              R.$ = A;
            }
            this.W.push({
              index: R.index,
              e: a0(F, R),
              l: R.h / F.X,
              t: R.A / F.B,
              P: R.P,
              c: R.c
            });
          }
          this.p = this.W.length;
          return undefined;
        },
        Y: function Y(Q, h, f) {
          if (f == null) f = !1;
          var G = this.width / Q,
            n = this.height / h,
            E,
            a,
            C,
            F,
            d,
            T,
            U,
            z,
            J,
            V,
            Y = 0,
            u,
            m = this.W.length,
            j = Q * h * m,
            v = new Uint8ClampedArray(j),
            $ = new Uint32Array(Q),
            b = 4294967288,
            r;
          for (U = 0; U < m; U++) {
            E = this.W[U];
            a = E.l * G;
            C = E.t * n;
            Y = U;
            u = E.e;
            F = E.P + 1 << 3;
            if (a !== r) {
              for (d = 0; d < Q; d++) {
                z = 0 | d * a;
                $[d] = (z & b) << 3 | z & 7;
              }
              r = a;
            }
            for (T = 0; T < h; T++) {
              z = 0 | T * C;
              V = F * (z & b) | (z & 7) << 3;
              for (d = 0; d < Q; d++) {
                v[Y] = u[V + $[d]];
                Y += m;
              }
            }
          }
          var P = this.V;
          if (!f && m === 4 && !P) {
            P = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);
          }
          if (P) {
            for (U = 0; U < j;) {
              for (z = 0, J = 0; z < m; z++, U++, J += 2) {
                v[U] = (v[U] * P[J] >> 8) + P[J + 1];
              }
            }
          }
          return v;
        },
        get f() {
          if (this.b) {
            return !!this.b.a;
          }
          if (this.p === 3) {
            if (this.N === 0) {
              return !1;
            } else if (this.W[0].index === 82 && this.W[1].index === 71 && this.W[2].index === 66) {
              return !1;
            }
            return !0;
          }
          if (this.N === 1) {
            return !0;
          }
          return !1;
        },
        z: function aj(Q) {
          var h, f, G;
          for (var n = 0, E = Q.length; n < E; n += 3) {
            h = Q[n];
            f = Q[n + 1];
            G = Q[n + 2];
            Q[n] = h - 179.456 + 1.402 * G;
            Q[n + 1] = h + 135.459 - .344 * f - .714 * G;
            Q[n + 2] = h - 226.816 + 1.772 * f;
          }
          return Q;
        },
        O: function aa(Q) {
          var h,
            f,
            G,
            n,
            E = 0;
          for (var a = 0, C = Q.length; a < C; a += 4) {
            h = Q[a];
            f = Q[a + 1];
            G = Q[a + 2];
            n = Q[a + 3];
            Q[E++] = -122.67195406894 + f * (-660635669420364e-19 * f + .000437130475926232 * G - 54080610064599e-18 * h + .00048449797120281 * n - .154362151871126) + G * (-.000957964378445773 * G + .000817076911346625 * h - .00477271405408747 * n + 1.53380253221734) + h * (.000961250184130688 * h - .00266257332283933 * n + .48357088451265) + n * (-.000336197177618394 * n + .484791561490776);
            Q[E++] = 107.268039397724 + f * (219927104525741e-19 * f - .000640992018297945 * G + .000659397001245577 * h + .000426105652938837 * n - .176491792462875) + G * (-.000778269941513683 * G + .00130872261408275 * h + .000770482631801132 * n - .151051492775562) + h * (.00126935368114843 * h - .00265090189010898 * n + .25802910206845) + n * (-.000318913117588328 * n - .213742400323665);
            Q[E++] = -20.810012546947 + f * (-.000570115196973677 * f - 263409051004589e-19 * G + .0020741088115012 * h - .00288260236853442 * n + .814272968359295) + G * (-153496057440975e-19 * G - .000132689043961446 * h + .000560833691242812 * n - .195152027534049) + h * (.00174418132927582 * h - .00255243321439347 * n + .116935020465145) + n * (-.000343531996510555 * n + .24165260232407);
          }
          return Q.subarray(0, E);
        },
        r: function a3(Q) {
          var h, f, G;
          for (var n = 0, E = Q.length; n < E; n += 4) {
            h = Q[n];
            f = Q[n + 1];
            G = Q[n + 2];
            Q[n] = 434.456 - h - 1.402 * G;
            Q[n + 1] = 119.541 - h + .344 * f + .714 * G;
            Q[n + 2] = 481.816 - h - 1.772 * f;
          }
          return Q;
        },
        U: function as(Q) {
          var h,
            f,
            G,
            n,
            E = 0;
          for (var a = 0, C = Q.length; a < C; a += 4) {
            h = Q[a];
            f = Q[a + 1];
            G = Q[a + 2];
            n = Q[a + 3];
            Q[E++] = 255 + h * (-6747147073602441e-20 * h + .0008379262121013727 * f + .0002894718188643294 * G + .003264231057537806 * n - 1.1185611867203937) + f * (26374107616089404e-21 * f - 8626949158638572e-20 * G - .0002748769067499491 * n - .02155688794978967) + G * (-3878099212869363e-20 * G - .0003267808279485286 * n + .0686742238595345) - n * (.0003361971776183937 * n + .7430659151342254);
            Q[E++] = 255 + h * (.00013596372813588848 * h + .000924537132573585 * f + .00010567359618683593 * G + .0004791864687436512 * n - .3109689587515875) + f * (-.00023545346108370344 * f + .0002702845253534714 * G + .0020200308977307156 * n - .7488052167015494) + G * (6834815998235662e-20 * G + .00015168452363460973 * n - .09751927774728933) - n * (.0003189131175883281 * n + .7364883807733168);
            Q[E++] = 255 + h * (13598650411385308e-21 * h + .00012423956175490851 * f + .0004751985097583589 * G - 36729317476630424e-22 * n - .05562186980264034) + f * (.00016141380598724676 * f + .0009692239130725186 * G + .0007782692450036253 * n - .44015232367526463) + G * (5.068882914068769e-7 * G + .0017778369011375071 * n - .7591454649749609) - n * (.0003435319965105553 * n + .7063770186160144);
          }
          return Q.subarray(0, E);
        },
        getData: function getData(Q) {
          var h = Q.width,
            f = Q.height,
            G = Q.forceRGB,
            n = Q.isSourcePDF;
          if (this.p > 4) {
            throw new W("Unsupported color mode");
          }
          var E = this.Y(h, f, n);
          if (this.p === 1 && G) {
            var a = E.length,
              C = new Uint8ClampedArray(a * 3),
              F = 0;
            for (var d = 0; d < a; d++) {
              var T = E[d];
              C[F++] = T;
              C[F++] = T;
              C[F++] = T;
            }
            return C;
          } else if (this.p === 3 && this.f) {
            return this.z(E);
          } else if (this.p === 4) {
            if (this.f) {
              if (G) {
                return this.O(E);
              }
              return this.r(E);
            } else if (G) {
              return this.U(E);
            }
          }
          return E;
        }
      };
      return ak;
    }();
  function Z(p, t) {
    return p[t] << 8 | p[t + 1];
  }
  UTIF.JpegDecoder = ak;
})();

//UTIF.JpegDecoder = PDFJS.JpegImage;

UTIF.encodeImage = function (rgba, w, h, metadata) {
  var idf = {
    "t256": [w],
    "t257": [h],
    "t258": [8, 8, 8, 8],
    "t259": [1],
    "t262": [2],
    "t273": [1000],
    // strips offset
    "t277": [4],
    "t278": [h],
    /* rows per strip */"t279": [w * h * 4],
    // strip byte counts
    "t282": [[72, 1]],
    "t283": [[72, 1]],
    "t284": [1],
    "t286": [[0, 1]],
    "t287": [[0, 1]],
    "t296": [1],
    "t305": ["Photopea (UTIF.js)"],
    "t338": [1]
  };
  if (metadata) for (var i in metadata) idf[i] = metadata[i];
  var prfx = new Uint8Array(UTIF.encode([idf]));
  var img = new Uint8Array(rgba);
  var data = new Uint8Array(1000 + w * h * 4);
  for (var i = 0; i < prfx.length; i++) data[i] = prfx[i];
  for (var i = 0; i < img.length; i++) data[1000 + i] = img[i];
  return data.buffer;
};
UTIF.encode = function (ifds) {
  var data = new Uint8Array(20000),
    offset = 4,
    bin = UTIF._binBE;
  data[0] = data[1] = 77;
  bin.writeUshort(data, 2, 42);
  var ifdo = 8;
  bin.writeUint(data, offset, ifdo);
  offset += 4;
  for (var i = 0; i < ifds.length; i++) {
    var noffs = UTIF._writeIFD(bin, UTIF._types.basic, data, ifdo, ifds[i]);
    ifdo = noffs[1];
    if (i < ifds.length - 1) {
      if ((ifdo & 3) != 0) ifdo += 4 - (ifdo & 3); // make each IFD start at multiple of 4
      bin.writeUint(data, noffs[0], ifdo);
    }
  }
  return data.slice(0, ifdo).buffer;
};
UTIF.decode = function (buff, prm) {
  if (prm == null) prm = {
    parseMN: true,
    debug: false
  }; // read MakerNote, debug
  var data = new Uint8Array(buff),
    offset = 0;
  var id = UTIF._binBE.readASCII(data, offset, 2);
  offset += 2;
  var bin = id == "II" ? UTIF._binLE : UTIF._binBE;
  bin.readUshort(data, offset);
  offset += 2;
  var ifdo = bin.readUint(data, offset);
  offset += 4;
  var ifds = [];
  while (true) {
    var cnt = bin.readUshort(data, ifdo),
      typ = bin.readUshort(data, ifdo + 4);
    if (cnt != 0) if (typ < 1 || 13 < typ) {
      log("error in TIFF");
      break;
    }
    UTIF._readIFD(bin, data, ifdo, ifds, 0, prm);
    ifdo = bin.readUint(data, ifdo + 2 + cnt * 12);
    if (ifdo == 0) break;
  }
  return ifds;
};
UTIF.decodeImage = function (buff, img, ifds) {
  if (img.data) return;
  var data = new Uint8Array(buff);
  var id = UTIF._binBE.readASCII(data, 0, 2);
  if (img["t256"] == null) return; // No width => probably not an image
  img.isLE = id == "II";
  img.width = img["t256"][0]; //delete img["t256"];
  img.height = img["t257"][0]; //delete img["t257"];

  var cmpr = img["t259"] ? img["t259"][0] : 1; //delete img["t259"];
  var fo = img["t266"] ? img["t266"][0] : 1; //delete img["t266"];
  if (img["t284"] && img["t284"][0] == 2) log("PlanarConfiguration 2 should not be used!");
  if (cmpr == 7 && img["t258"] && img["t258"].length > 3) img["t258"] = img["t258"].slice(0, 3);
  var spp = img["t277"] ? img["t277"][0] : 1;
  var bps = img["t258"] ? img["t258"][0] : 1;
  var bipp = bps * spp; // bits per pixel
  /*
  var bipp;  // bits per pixel
  if(img["t258"]) bipp = Math.min(32,img["t258"][0])*img["t258"].length;
  else            bipp = (img["t277"]?img["t277"][0]:1);  
  */
  // Some .NEF files have t258==14, even though they use 16 bits per pixel
  if (cmpr == 1 && img["t279"] != null && img["t278"] && img["t262"][0] == 32803) {
    bipp = Math.round(img["t279"][0] * 8 / (img.width * img["t278"][0]));
  }
  if (img["t50885"] && img["t50885"][0] == 4) bipp = img["t258"][0] * 3; // RAW_CANON_40D_SRAW_V103.CR2
  var bipl = Math.ceil(img.width * bipp / 8) * 8;
  var soff = img["t273"];
  if (soff == null || img["t322"]) soff = img["t324"];
  var bcnt = img["t279"];
  if (cmpr == 1 && soff.length == 1) bcnt = [img.height * (bipl >>> 3)];
  if (bcnt == null || img["t322"]) bcnt = img["t325"];
  //bcnt[0] = Math.min(bcnt[0], data.length);  // Hasselblad, "RAW_HASSELBLAD_H3D39II.3FR"
  var bytes = new Uint8Array(img.height * (bipl >>> 3)),
    bilen = 0;
  if (img["t322"] != null)
    // tiled
    {
      var tw = img["t322"][0],
        th = img["t323"][0];
      var tx = Math.floor((img.width + tw - 1) / tw);
      var ty = Math.floor((img.height + th - 1) / th);
      var tbuff = new Uint8Array(Math.ceil(tw * th * bipp / 8) | 0);
      console.log("====", tx, ty);
      for (var y = 0; y < ty; y++) for (var x = 0; x < tx; x++) {
        var i = y * tx + x;
        tbuff.fill(0);
        UTIF.decode._decompress(img, ifds, data, soff[i], bcnt[i], cmpr, tbuff, 0, fo, tw, th);
        // Might be required for 7 too. Need to check
        if (cmpr == 6) bytes = tbuff;else UTIF._copyTile(tbuff, Math.ceil(tw * bipp / 8) | 0, th, bytes, Math.ceil(img.width * bipp / 8) | 0, img.height, Math.ceil(x * tw * bipp / 8) | 0, y * th);
      }
      bilen = bytes.length * 8;
    } else
    // stripped
    {
      if (soff == null) return;
      var rps = img["t278"] ? img["t278"][0] : img.height;
      rps = Math.min(rps, img.height);
      //console.log("====", img.width, rps);
      for (var i = 0; i < soff.length; i++) {
        UTIF.decode._decompress(img, ifds, data, soff[i], bcnt[i], cmpr, bytes, Math.ceil(bilen / 8) | 0, fo, img.width, rps);
        bilen += bipl * rps;
      }
      bilen = Math.min(bilen, bytes.length * 8);
    }
  img.data = new Uint8Array(bytes.buffer, 0, Math.ceil(bilen / 8) | 0);
};
UTIF.decode._decompress = function (img, ifds, data, off, len, cmpr, tgt, toff, fo, w, h)
// fill order
{
  if (img["t271"] && img["t271"][0] == "Panasonic" && img["t45"] && img["t45"][0] == 6) cmpr = 34316;
  //console.log("compression", cmpr);
  //var time = Date.now();
  if (cmpr == 1 /* || (len==tgt.length && cmpr!=32767)*/) for (var j = 0; j < len; j++) tgt[toff + j] = data[off + j];else if (cmpr == 2) UTIF.decode._decodeG2(data, off, len, tgt, toff, w, fo);else if (cmpr == 3) UTIF.decode._decodeG3(data, off, len, tgt, toff, w, fo, img["t292"] ? (img["t292"][0] & 1) == 1 : false);else if (cmpr == 4) UTIF.decode._decodeG4(data, off, len, tgt, toff, w, fo);else if (cmpr == 5) UTIF.decode._decodeLZW(data, off, len, tgt, toff, 8);else if (cmpr == 6) UTIF.decode._decodeOldJPEG(img, data, off, len, tgt, toff);else if (cmpr == 7 || cmpr == 34892) UTIF.decode._decodeNewJPEG(img, data, off, len, tgt, toff);else if (cmpr == 8 || cmpr == 32946) {
    var src = new Uint8Array(data.buffer, off + 2, len - 6);
    var bin = UTIF._inflateRaw(src);
    if (toff + bin.length <= tgt.length) tgt.set(bin, toff);
  } else if (cmpr == 9) UTIF.decode._decodeVC5(data, off, len, tgt, toff, img["t33422"]);else if (cmpr == 32767) UTIF.decode._decodeARW(img, data, off, len, tgt, toff);else if (cmpr == 32773) UTIF.decode._decodePackBits(data, off, len, tgt, toff);else if (cmpr == 32809) UTIF.decode._decodeThunder(data, off, len, tgt, toff);else if (cmpr == 34316) UTIF.decode._decodePanasonic(img, data, off, len, tgt, toff);else if (cmpr == 34713)
    //for(var j=0; j<len; j++) tgt[toff+j] = data[off+j];
    UTIF.decode._decodeNikon(img, ifds, data, off, len, tgt, toff);else if (cmpr == 34676) UTIF.decode._decodeLogLuv32(img, data, off, len, tgt, toff);else log("Unknown compression", cmpr);

  //console.log(Date.now()-time);

  var bps = img["t258"] ? Math.min(32, img["t258"][0]) : 1;
  var noc = img["t277"] ? img["t277"][0] : 1,
    bpp = bps * noc >>> 3,
    bpl = Math.ceil(bps * noc * w / 8);

  // convert to Little Endian  /*
  if (bps == 16 && !img.isLE && img["t33422"] == null)
    // not DNG
    for (var y = 0; y < h; y++) {
      //console.log("fixing endianity");
      var roff = toff + y * bpl;
      for (var x = 1; x < bpl; x += 2) {
        var t = tgt[roff + x];
        tgt[roff + x] = tgt[roff + x - 1];
        tgt[roff + x - 1] = t;
      }
    } //*/

  if (img["t317"] && img["t317"][0] == 2) {
    for (var y = 0; y < h; y++) {
      var ntoff = toff + y * bpl;
      if (bps == 16) for (var j = bpp; j < bpl; j += 2) {
        var nv = (tgt[ntoff + j + 1] << 8 | tgt[ntoff + j]) + (tgt[ntoff + j - bpp + 1] << 8 | tgt[ntoff + j - bpp]);
        tgt[ntoff + j] = nv & 255;
        tgt[ntoff + j + 1] = nv >>> 8 & 255;
      } else if (noc == 3) for (var j = 3; j < bpl; j += 3) {
        tgt[ntoff + j] = tgt[ntoff + j] + tgt[ntoff + j - 3] & 255;
        tgt[ntoff + j + 1] = tgt[ntoff + j + 1] + tgt[ntoff + j - 2] & 255;
        tgt[ntoff + j + 2] = tgt[ntoff + j + 2] + tgt[ntoff + j - 1] & 255;
      } else for (var j = bpp; j < bpl; j++) tgt[ntoff + j] = tgt[ntoff + j] + tgt[ntoff + j - bpp] & 255;
    }
  }
};
UTIF.decode._decodePanasonic = function (img, data, off, len, tgt, toff) {
  var img_buffer = data.buffer;
  var rawWidth = img["t2"][0];
  var rawHeight = img["t3"][0];
  var bitsPerSample = img["t10"][0];
  var RW2_Format = img["t45"][0];
  var bidx = 0;
  var imageIndex = 0;
  var vpos = 0;
  var byte = 0;
  var bytes = RW2_Format == 6 ? new Uint32Array(18) : new Uint8Array(16);
  var i,
    j,
    sh,
    pred = [0, 0],
    nonz = [0, 0],
    isOdd,
    idx = 0,
    pixel_base;
  var row, col, crow;
  var buffer = new Uint8Array(0x4000);
  var result = new Uint16Array(tgt.buffer);
  function getDataRaw(bits) {
    if (vpos == 0) {
      var arr_a = new Uint8Array(img_buffer, off + imageIndex + 0x1ff8, 0x4000 - 0x1ff8);
      var arr_b = new Uint8Array(img_buffer, off + imageIndex, 0x1ff8);
      buffer.set(arr_a);
      buffer.set(arr_b, arr_a.length);
      imageIndex += 0x4000;
    }
    if (RW2_Format == 5) {
      for (i = 0; i < 16; i++) {
        bytes[i] = buffer[vpos++];
        vpos &= 0x3FFF;
      }
    } else {
      vpos = vpos - bits & 0x1ffff;
      byte = vpos >> 3 ^ 0x3ff0;
      return (buffer[byte] | buffer[byte + 1] << 8) >> (vpos & 7) & ~(-1 << bits);
    }
  }
  // Raw Format 6
  function getBufferDataRW6(i) {
    return buffer[vpos + 15 - i];
  }
  function readPageRW6() {
    bytes[0] = getBufferDataRW6(0) << 6 | getBufferDataRW6(1) >> 2; // 14 bit
    bytes[1] = ((getBufferDataRW6(1) & 0x3) << 12 | getBufferDataRW6(2) << 4 | getBufferDataRW6(3) >> 4) & 0x3fff;
    bytes[2] = getBufferDataRW6(3) >> 2 & 0x3;
    bytes[3] = (getBufferDataRW6(3) & 0x3) << 8 | getBufferDataRW6(4);
    bytes[4] = getBufferDataRW6(5) << 2 | getBufferDataRW6(6) >> 6;
    bytes[5] = (getBufferDataRW6(6) & 0x3f) << 4 | getBufferDataRW6(7) >> 4;
    bytes[6] = getBufferDataRW6(7) >> 2 & 0x3;
    bytes[7] = (getBufferDataRW6(7) & 0x3) << 8 | getBufferDataRW6(8);
    bytes[8] = getBufferDataRW6(9) << 2 & 0x3fc | getBufferDataRW6(10) >> 6;
    bytes[9] = (getBufferDataRW6(10) << 4 | getBufferDataRW6(11) >> 4) & 0x3ff;
    bytes[10] = getBufferDataRW6(11) >> 2 & 0x3;
    bytes[11] = (getBufferDataRW6(11) & 0x3) << 8 | getBufferDataRW6(12);
    bytes[12] = (getBufferDataRW6(13) << 2 & 0x3fc | getBufferDataRW6(14) >> 6) & 0x3ff;
    bytes[13] = (getBufferDataRW6(14) << 4 | getBufferDataRW6(15) >> 4) & 0x3ff;
    vpos += 16;
    byte = 0;
  }
  function readPageRw6_bps12() {
    bytes[0] = getBufferDataRW6(0) << 4 | getBufferDataRW6(1) >> 4;
    bytes[1] = ((getBufferDataRW6(1) & 0xf) << 8 | getBufferDataRW6(2)) & 0xfff;
    bytes[2] = getBufferDataRW6(3) >> 6 & 0x3;
    bytes[3] = (getBufferDataRW6(3) & 0x3f) << 2 | getBufferDataRW6(4) >> 6;
    bytes[4] = (getBufferDataRW6(4) & 0x3f) << 2 | getBufferDataRW6(5) >> 6;
    bytes[5] = (getBufferDataRW6(5) & 0x3f) << 2 | getBufferDataRW6(6) >> 6;
    bytes[6] = getBufferDataRW6(6) >> 4 & 0x3;
    bytes[7] = (getBufferDataRW6(6) & 0xf) << 4 | getBufferDataRW6(7) >> 4;
    bytes[8] = (getBufferDataRW6(7) & 0xf) << 4 | getBufferDataRW6(8) >> 4;
    bytes[9] = (getBufferDataRW6(8) & 0xf) << 4 | getBufferDataRW6(9) >> 4;
    bytes[10] = getBufferDataRW6(9) >> 2 & 0x3;
    bytes[11] = (getBufferDataRW6(9) & 0x3) << 6 | getBufferDataRW6(10) >> 2;
    bytes[12] = (getBufferDataRW6(10) & 0x3) << 6 | getBufferDataRW6(11) >> 2;
    bytes[13] = (getBufferDataRW6(11) & 0x3) << 6 | getBufferDataRW6(12) >> 2;
    bytes[14] = getBufferDataRW6(12) & 0x3;
    bytes[15] = getBufferDataRW6(13);
    bytes[16] = getBufferDataRW6(14);
    bytes[17] = getBufferDataRW6(15);
    vpos += 16;
    byte = 0;
  }
  // Main loop
  function resetPredNonzeros() {
    pred[0] = 0;
    pred[1] = 0;
    nonz[0] = 0;
    nonz[1] = 0;
  }
  if (RW2_Format == 7) {
    throw RW2_Format;

    // Skatch of version 7 
    /*
    var pixels_per_block = bitsPerSample == 14 ? 9 : 10;
        rowbytes = 0|(rawWidth / pixels_per_block * 16);
    for (row = 0; row < rawHeight - 15; row += 16) {
        var rowstoread = Math.min(16, rawHeight - row);
        var readlen = rowbytes*rowstoread;
        buffer = new Uint8Array(image.slice(bidx, bidx+readlen));
        vpos = 0;
        bidx += readlen; 
        i = 0;
        for (crow = 0; crow < rowstoread; crow++) {
            idx = (row + crow) * rawWidth;
            for (col = 0; col <= rawWidth - pixels_per_block; col += pixels_per_block) {
                for(j=0; j < pixels_per_block; j++) bytes[j] = buffer[i++];
                if (bitsPerSample == 12) {
                    result[idx ] = ((bytes[1] & 0xF) << 8) + bytes[0];
                    result[idx + 1] = 16 * bytes[2] + (bytes[1] >> 4);
                    result[idx + 2] = ((bytes[4] & 0xF) << 8) + bytes[3];
                    result[idx + 3] = 16 * bytes[5] + (bytes[4] >> 4);
                    result[idx + 4] = ((bytes[7] & 0xF) << 8) + bytes[6];
                    result[idx + 5] = 16 * bytes[8] + (bytes[7] >> 4);
                    result[idx + 6] = ((bytes[10] & 0xF) << 8) + bytes[9];
                    result[idx + 7] = 16 * bytes[11] + (bytes[10] >> 4);
                    result[idx + 8] = ((bytes[13] & 0xF) << 8) + bytes[12];
                    result[idx + 9] = 16 * bytes[14] + (bytes[13] >> 4);
                } else if (bitsPerSample == 14) {
                    result[idx] = bytes[0] + ((bytes[1] & 0x3F) << 8);
                    result[idx + 1] = (bytes[1] >> 6) + 4 * (bytes[2]) + ((bytes[3] & 0xF) << 10);
                    result[idx + 2] = (bytes[3] >> 4) + 16 * (bytes[4]) + ((bytes[5] & 3) << 12);
                    result[idx + 3] = ((bytes[5] & 0xFC) >> 2) + (bytes[6] << 6);
                    result[idx + 4] = bytes[7] + ((bytes[8] & 0x3F) << 8);
                    result[idx + 5] = (bytes[8] >> 6) + 4 * bytes[9] + ((bytes[10] & 0xF) << 10);
                    result[idx + 6] = (bytes[10] >> 4) + 16 * bytes[11] + ((bytes[12] & 3) << 12);
                    result[idx + 7] = ((bytes[12] & 0xFC) >> 2) + (bytes[13] << 6);
                    result[idx + 8] = bytes[14] + ((bytes[15] & 0x3F) << 8);
                }
            }
        }
    }
    */
  } else if (RW2_Format == 6) {
    var is12bit = bitsPerSample == 12,
      readPageRw6Fn = is12bit ? readPageRw6_bps12 : readPageRW6,
      pixelsPerBlock = is12bit ? 14 : 11,
      pixelbase0 = is12bit ? 0x80 : 0x200,
      pixelbase_compare = is12bit ? 0x800 : 0x2000,
      spix_compare = is12bit ? 0x3fff : 0xffff,
      pixel_mask = is12bit ? 0xfff : 0x3fff,
      blocksperrow = rawWidth / pixelsPerBlock,
      rowbytes = blocksperrow * 16,
      bufferSize = is12bit ? 18 : 14;
    for (row = 0; row < rawHeight - 15; row += 16) {
      var rowstoread = Math.min(16, rawHeight - row);
      var readlen = rowbytes * rowstoread;
      buffer = new Uint8Array(img_buffer, off + bidx, readlen); //new Uint8Array(image.slice(bidx, bidx+readlen));
      vpos = 0;
      bidx += readlen;
      for (crow = 0, col = 0; crow < rowstoread; crow++, col = 0) {
        idx = (row + crow) * rawWidth;
        for (var rblock = 0; rblock < blocksperrow; rblock++) {
          readPageRw6Fn();
          resetPredNonzeros();
          sh = 0;
          pixel_base = 0;
          for (i = 0; i < pixelsPerBlock; i++) {
            isOdd = i & 1;
            if (i % 3 == 2) {
              var base = byte < bufferSize ? bytes[byte++] : 0;
              if (base == 3) base = 4;
              pixel_base = pixelbase0 << base;
              sh = 1 << base;
            }
            var epixel = byte < bufferSize ? bytes[byte++] : 0;
            if (pred[isOdd]) {
              epixel *= sh;
              if (pixel_base < pixelbase_compare && nonz[isOdd] > pixel_base) epixel += nonz[isOdd] - pixel_base;
              nonz[isOdd] = epixel;
            } else {
              pred[isOdd] = epixel;
              if (epixel) nonz[isOdd] = epixel;else epixel = nonz[isOdd];
            }
            result[idx + col++] = epixel - 0xf <= spix_compare ? epixel - 0xf & spix_compare : epixel + 0x7ffffff1 >> 0x1f & pixel_mask;
          }
        }
      }
    }
  } else if (RW2_Format == 5) {
    var blockSize = bitsPerSample == 12 ? 10 : 9;
    for (row = 0; row < rawHeight; row++) {
      for (col = 0; col < rawWidth; col += blockSize) {
        getDataRaw(0);
        // Tuhle podminku pouziva i RW2_Format 7 
        if (bitsPerSample == 12) {
          result[idx++] = ((bytes[1] & 0xF) << 8) + bytes[0];
          result[idx++] = 16 * bytes[2] + (bytes[1] >> 4);
          result[idx++] = ((bytes[4] & 0xF) << 8) + bytes[3];
          result[idx++] = 16 * bytes[5] + (bytes[4] >> 4);
          result[idx++] = ((bytes[7] & 0xF) << 8) + bytes[6];
          result[idx++] = 16 * bytes[8] + (bytes[7] >> 4);
          result[idx++] = ((bytes[10] & 0xF) << 8) + bytes[9];
          result[idx++] = 16 * bytes[11] + (bytes[10] >> 4);
          result[idx++] = ((bytes[13] & 0xF) << 8) + bytes[12];
          result[idx++] = 16 * bytes[14] + (bytes[13] >> 4);
        } else if (bitsPerSample == 14) {
          result[idx++] = bytes[0] + ((bytes[1] & 0x3F) << 8);
          result[idx++] = (bytes[1] >> 6) + 4 * bytes[2] + ((bytes[3] & 0xF) << 10);
          result[idx++] = (bytes[3] >> 4) + 16 * bytes[4] + ((bytes[5] & 3) << 12);
          result[idx++] = ((bytes[5] & 0xFC) >> 2) + (bytes[6] << 6);
          result[idx++] = bytes[7] + ((bytes[8] & 0x3F) << 8);
          result[idx++] = (bytes[8] >> 6) + 4 * bytes[9] + ((bytes[10] & 0xF) << 10);
          result[idx++] = (bytes[10] >> 4) + 16 * bytes[11] + ((bytes[12] & 3) << 12);
          result[idx++] = ((bytes[12] & 0xFC) >> 2) + (bytes[13] << 6);
          result[idx++] = bytes[14] + ((bytes[15] & 0x3F) << 8);
        }
      }
    }
    //console.log(result[1000000 - 1])
  } else if (RW2_Format == 4) {
    for (row = 0; row < rawHeight; row++) {
      for (col = 0; col < rawWidth; col++) {
        i = col % 14;
        isOdd = i & 1;
        if (i == 0) resetPredNonzeros();
        if (i % 3 == 2) sh = 4 >> 3 - getDataRaw(2);
        if (nonz[isOdd]) {
          j = getDataRaw(8);
          if (j != 0) {
            pred[isOdd] -= 0x80 << sh;
            if (pred[isOdd] < 0 || sh == 4) pred[isOdd] &= ~(-1 << sh);
            pred[isOdd] += j << sh;
          }
        } else {
          nonz[isOdd] = getDataRaw(8);
          if (nonz[isOdd] || i > 11) pred[isOdd] = nonz[isOdd] << 4 | getDataRaw(4);
        }
        result[idx++] = pred[col & 1];
      }
    }
  } else throw RW2_Format;
};
UTIF.decode._decodeVC5 = function () {
  var x = [1, 0, 1, 0, 2, 2, 1, 1, 3, 7, 1, 2, 5, 25, 1, 3, 6, 48, 1, 4, 6, 54, 1, 5, 7, 111, 1, 8, 7, 99, 1, 6, 7, 105, 12, 0, 7, 107, 1, 7, 8, 209, 20, 0, 8, 212, 1, 9, 8, 220, 1, 10, 9, 393, 1, 11, 9, 394, 32, 0, 9, 416, 1, 12, 9, 427, 1, 13, 10, 887, 1, 18, 10, 784, 1, 14, 10, 790, 1, 15, 10, 835, 60, 0, 10, 852, 1, 16, 10, 885, 1, 17, 11, 1571, 1, 19, 11, 1668, 1, 20, 11, 1669, 100, 0, 11, 1707, 1, 21, 11, 1772, 1, 22, 12, 3547, 1, 29, 12, 3164, 1, 24, 12, 3166, 1, 25, 12, 3140, 1, 23, 12, 3413, 1, 26, 12, 3537, 1, 27, 12, 3539, 1, 28, 13, 7093, 1, 35, 13, 6283, 1, 30, 13, 6331, 1, 31, 13, 6335, 180, 0, 13, 6824, 1, 32, 13, 7072, 1, 33, 13, 7077, 320, 0, 13, 7076, 1, 34, 14, 12565, 1, 36, 14, 12661, 1, 37, 14, 12669, 1, 38, 14, 13651, 1, 39, 14, 14184, 1, 40, 15, 28295, 1, 46, 15, 28371, 1, 47, 15, 25320, 1, 42, 15, 25336, 1, 43, 15, 25128, 1, 41, 15, 27300, 1, 44, 15, 28293, 1, 45, 16, 50259, 1, 48, 16, 50643, 1, 49, 16, 50675, 1, 50, 16, 56740, 1, 53, 16, 56584, 1, 51, 16, 56588, 1, 52, 17, 113483, 1, 61, 17, 113482, 1, 60, 17, 101285, 1, 55, 17, 101349, 1, 56, 17, 109205, 1, 57, 17, 109207, 1, 58, 17, 100516, 1, 54, 17, 113171, 1, 59, 18, 202568, 1, 62, 18, 202696, 1, 63, 18, 218408, 1, 64, 18, 218412, 1, 65, 18, 226340, 1, 66, 18, 226356, 1, 67, 18, 226358, 1, 68, 19, 402068, 1, 69, 19, 405138, 1, 70, 19, 405394, 1, 71, 19, 436818, 1, 72, 19, 436826, 1, 73, 19, 452714, 1, 75, 19, 452718, 1, 76, 19, 452682, 1, 74, 20, 804138, 1, 77, 20, 810279, 1, 78, 20, 810790, 1, 79, 20, 873638, 1, 80, 20, 873654, 1, 81, 20, 905366, 1, 82, 20, 905430, 1, 83, 20, 905438, 1, 84, 21, 1608278, 1, 85, 21, 1620557, 1, 86, 21, 1621582, 1, 87, 21, 1621583, 1, 88, 21, 1747310, 1, 89, 21, 1810734, 1, 90, 21, 1810735, 1, 91, 21, 1810863, 1, 92, 21, 1810879, 1, 93, 22, 3621725, 1, 99, 22, 3621757, 1, 100, 22, 3241112, 1, 94, 22, 3494556, 1, 95, 22, 3494557, 1, 96, 22, 3494622, 1, 97, 22, 3494623, 1, 98, 23, 6482227, 1, 102, 23, 6433117, 1, 101, 23, 6989117, 1, 103, 23, 6989119, 1, 105, 23, 6989118, 1, 104, 23, 7243449, 1, 106, 23, 7243512, 1, 107, 24, 13978233, 1, 111, 24, 12964453, 1, 109, 24, 12866232, 1, 108, 24, 14486897, 1, 113, 24, 13978232, 1, 110, 24, 14486896, 1, 112, 24, 14487026, 1, 114, 24, 14487027, 1, 115, 25, 25732598, 1, 225, 25, 25732597, 1, 189, 25, 25732596, 1, 188, 25, 25732595, 1, 203, 25, 25732594, 1, 202, 25, 25732593, 1, 197, 25, 25732592, 1, 207, 25, 25732591, 1, 169, 25, 25732590, 1, 223, 25, 25732589, 1, 159, 25, 25732522, 1, 235, 25, 25732579, 1, 152, 25, 25732575, 1, 192, 25, 25732489, 1, 179, 25, 25732573, 1, 201, 25, 25732472, 1, 172, 25, 25732576, 1, 149, 25, 25732488, 1, 178, 25, 25732566, 1, 120, 25, 25732571, 1, 219, 25, 25732577, 1, 150, 25, 25732487, 1, 127, 25, 25732506, 1, 211, 25, 25732548, 1, 125, 25, 25732588, 1, 158, 25, 25732486, 1, 247, 25, 25732467, 1, 238, 25, 25732508, 1, 163, 25, 25732552, 1, 228, 25, 25732603, 1, 183, 25, 25732513, 1, 217, 25, 25732587, 1, 168, 25, 25732520, 1, 122, 25, 25732484, 1, 128, 25, 25732562, 1, 249, 25, 25732505, 1, 187, 25, 25732504, 1, 186, 25, 25732483, 1, 136, 25, 25928905, 1, 181, 25, 25732560, 1, 255, 25, 25732500, 1, 230, 25, 25732482, 1, 135, 25, 25732555, 1, 233, 25, 25732568, 1, 222, 25, 25732583, 1, 145, 25, 25732481, 1, 134, 25, 25732586, 1, 167, 25, 25732521, 1, 248, 25, 25732518, 1, 209, 25, 25732480, 1, 243, 25, 25732512, 1, 216, 25, 25732509, 1, 164, 25, 25732547, 1, 140, 25, 25732479, 1, 157, 25, 25732544, 1, 239, 25, 25732574, 1, 191, 25, 25732564, 1, 251, 25, 25732478, 1, 156, 25, 25732546, 1, 139, 25, 25732498, 1, 242, 25, 25732557, 1, 133, 25, 25732477, 1, 162, 25, 25732515, 1, 213, 25, 25732584, 1, 165, 25, 25732514, 1, 212, 25, 25732476, 1, 227, 25, 25732494, 1, 198, 25, 25732531, 1, 236, 25, 25732530, 1, 234, 25, 25732529, 1, 117, 25, 25732528, 1, 215, 25, 25732527, 1, 124, 25, 25732526, 1, 123, 25, 25732525, 1, 254, 25, 25732524, 1, 253, 25, 25732523, 1, 148, 25, 25732570, 1, 218, 25, 25732580, 1, 146, 25, 25732581, 1, 147, 25, 25732569, 1, 224, 25, 25732533, 1, 143, 25, 25732540, 1, 184, 25, 25732541, 1, 185, 25, 25732585, 1, 166, 25, 25732556, 1, 132, 25, 25732485, 1, 129, 25, 25732563, 1, 250, 25, 25732578, 1, 151, 25, 25732501, 1, 119, 25, 25732502, 1, 193, 25, 25732536, 1, 176, 25, 25732496, 1, 245, 25, 25732553, 1, 229, 25, 25732516, 1, 206, 25, 25732582, 1, 144, 25, 25732517, 1, 208, 25, 25732558, 1, 137, 25, 25732543, 1, 241, 25, 25732466, 1, 237, 25, 25732507, 1, 190, 25, 25732542, 1, 240, 25, 25732551, 1, 131, 25, 25732554, 1, 232, 25, 25732565, 1, 252, 25, 25732475, 1, 171, 25, 25732493, 1, 205, 25, 25732492, 1, 204, 25, 25732491, 1, 118, 25, 25732490, 1, 214, 25, 25928904, 1, 180, 25, 25732549, 1, 126, 25, 25732602, 1, 182, 25, 25732539, 1, 175, 25, 25732545, 1, 141, 25, 25732559, 1, 138, 25, 25732537, 1, 177, 25, 25732534, 1, 153, 25, 25732503, 1, 194, 25, 25732606, 1, 160, 25, 25732567, 1, 121, 25, 25732538, 1, 174, 25, 25732497, 1, 246, 25, 25732550, 1, 130, 25, 25732572, 1, 200, 25, 25732474, 1, 170, 25, 25732511, 1, 221, 25, 25732601, 1, 196, 25, 25732532, 1, 142, 25, 25732519, 1, 210, 25, 25732495, 1, 199, 25, 25732605, 1, 155, 25, 25732535, 1, 154, 25, 25732499, 1, 244, 25, 25732510, 1, 220, 25, 25732600, 1, 195, 25, 25732607, 1, 161, 25, 25732604, 1, 231, 25, 25732473, 1, 173, 25, 25732599, 1, 226, 26, 51465122, 1, 116, 26, 51465123, 0, 1],
    o,
    C,
    k,
    P = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1],
    V = 24576,
    ar = 16384,
    H = 8192,
    az = ar | H;
  function d(t) {
    var E = t[1],
      h = t[0][E >>> 3] >>> 7 - (E & 7) & 1;
    t[1]++;
    return h;
  }
  function ag(t, E) {
    if (o == null) {
      o = {};
      for (var h = 0; h < x.length; h += 4) o[x[h + 1]] = x.slice(h, h + 4);
    }
    var L = d(t),
      g = o[L];
    while (g == null) {
      L = L << 1 | d(t);
      g = o[L];
    }
    var n = g[3];
    if (n != 0) n = d(t) == 0 ? n : -n;
    E[0] = g[2];
    E[1] = n;
  }
  function m(t, E) {
    for (var h = 0; h < E; h++) {
      if ((t & 1) == 1) t++;
      t = t >>> 1;
    }
    return t;
  }
  function A(t, E) {
    return t >> E;
  }
  function O(t, E, h, L, g, n) {
    E[h] = A(A(11 * t[g] - 4 * t[g + n] + t[g + n + n] + 4, 3) + t[L], 1);
    E[h + n] = A(A(5 * t[g] + 4 * t[g + n] - t[g + n + n] + 4, 3) - t[L], 1);
  }
  function J(t, E, h, L, g, n) {
    var W = t[g - n] - t[g + n],
      j = t[g],
      $ = t[L];
    E[h] = A(A(W + 4, 3) + j + $, 1);
    E[h + n] = A(A(-W + 4, 3) + j - $, 1);
  }
  function y(t, E, h, L, g, n) {
    E[h] = A(A(5 * t[g] + 4 * t[g - n] - t[g - n - n] + 4, 3) + t[L], 1);
    E[h + n] = A(A(11 * t[g] - 4 * t[g - n] + t[g - n - n] + 4, 3) - t[L], 1);
  }
  function q(t) {
    t = t < 0 ? 0 : t > 4095 ? 4095 : t;
    t = k[t] >>> 2;
    return t;
  }
  function av(t, E, h, L, g, n) {
    L = new Uint16Array(L.buffer);
    var W = Date.now(),
      j = UTIF._binBE,
      $ = E + h,
      r,
      u,
      X,
      I,
      ax,
      R,
      aa,
      i,
      T,
      B;
    E += 4;
    var a5 = n[0] == 1;
    while (E < $) {
      var S = j.readShort(t, E),
        s = j.readUshort(t, E + 2);
      E += 4;
      if (S == 12) r = s;else if (S == 20) u = s;else if (S == 21) X = s;else if (S == 48) I = s;else if (S == 53) ax = s;else if (S == 35) ;else if (S == 62) R = s;else if (S == 101) ;else if (S == 109) aa = s;else if (S == 84) ;else if (S == 106) ;else if (S == 107) ;else if (S == 108) ;else if (S == 102) ;else if (S == 104) i = s;else if (S == 105) ;else {
        var F = S < 0 ? -S : S,
          D = F & 65280,
          _ = 0;
        if (F & az) {
          if (F & H) {
            _ = s & 65535;
            _ += (F & 255) << 16;
          } else {
            _ = s & 65535;
          }
        }
        if ((F & V) == V) {
          if (T == null) {
            T = [];
            for (var M = 0; M < 4; M++) T[M] = new Int16Array((u >>> 1) * (X >>> 1));
            B = new Int16Array((u >>> 1) * (X >>> 1));
            C = new Int16Array(1024);
            for (var M = 0; M < 1024; M++) {
              var aG = M - 512,
                p = Math.abs(aG),
                r = Math.floor(768 * p * p * p / (255 * 255 * 255)) + p;
              C[M] = Math.sign(aG) * r;
            }
            k = new Uint16Array(4096);
            var aA = (1 << 16) - 1;
            for (var M = 0; M < 4096; M++) {
              var at = M,
                a1 = aA * (Math.pow(113, at / 4095) - 1) / 112;
              k[M] = Math.min(a1, aA);
            }
          }
          var w = T[R],
            v = m(u, 1 + P[I]),
            N = m(X, 1 + P[I]);
          if (I == 0) {
            for (var b = 0; b < N; b++) for (var G = 0; G < v; G++) {
              var c = E + (b * v + G) * 2;
              w[b * (u >>> 1) + G] = t[c] << 8 | t[c + 1];
            }
          } else {
            var a7 = [t, E * 8],
              a4 = [],
              ay = 0,
              aw = v * N,
              f = [0, 0],
              Q = 0,
              s = 0;
            while (ay < aw) {
              ag(a7, f);
              Q = f[0];
              s = f[1];
              while (Q > 0) {
                a4[ay++] = s;
                Q--;
              }
            }
            var l = (I - 1) % 3,
              aF = l != 1 ? v : 0,
              a2 = l != 0 ? N : 0;
            for (var b = 0; b < N; b++) {
              var af = (b + a2) * (u >>> 1) + aF,
                au = b * v;
              for (var G = 0; G < v; G++) w[af + G] = C[a4[au + G] + 512] * ax;
            }
            if (l == 2) {
              var i = u >>> 1,
                an = v * 2,
                a9 = N * 2;
              for (var b = 0; b < N; b++) {
                for (var G = 0; G < an; G++) {
                  var M = b * 2 * i + G,
                    a = b * i + G,
                    e = N * i + a;
                  if (b == 0) O(w, B, M, e, a, i);else if (b == N - 1) y(w, B, M, e, a, i);else J(w, B, M, e, a, i);
                }
              }
              var Z = w;
              w = B;
              B = Z;
              for (var b = 0; b < a9; b++) {
                for (var G = 0; G < v; G++) {
                  var M = b * i + 2 * G,
                    a = b * i + G,
                    e = v + a;
                  if (G == 0) O(w, B, M, e, a, 1);else if (G == v - 1) y(w, B, M, e, a, 1);else J(w, B, M, e, a, 1);
                }
              }
              var Z = w;
              w = B;
              B = Z;
              var aC = [],
                aB = 2 - ~~((I - 1) / 3);
              for (var K = 0; K < 3; K++) aC[K] = aa >> 14 - K * 2 & 3;
              var a6 = aC[aB];
              if (a6 != 0) for (var b = 0; b < a9; b++) for (var G = 0; G < an; G++) {
                var M = b * i + G;
                w[M] = w[M] << a6;
              }
            }
          }
          if (I == 9 && R == 3) {
            var a8 = T[0],
              ab = T[1],
              aq = T[2],
              as = T[3];
            for (var b = 0; b < X; b += 2) for (var G = 0; G < u; G += 2) {
              var U = b * u + G,
                c = (b >>> 1) * (u >>> 1) + (G >>> 1),
                z = a8[c],
                ao = ab[c] - 2048,
                ak = aq[c] - 2048,
                ad = as[c] - 2048,
                aj = (ao << 1) + z,
                a0 = (ak << 1) + z,
                aH = z + ad,
                am = z - ad;
              if (a5) {
                L[U] = q(aH);
                L[U + 1] = q(a0);
                L[U + u] = q(aj);
                L[U + u + 1] = q(am);
              } else {
                L[U] = q(aj);
                L[U + 1] = q(aH);
                L[U + u] = q(am);
                L[U + u + 1] = q(a0);
              }
            }
          }
          E += _ * 4;
        } else if (F == 16388) {
          E += _ * 4;
        } else if (D == 8192 || D == 8448 || D == 9216) ; else throw F.toString(16);
      }
    }
    console.log(Date.now() - W);
  }
  return av;
}();
UTIF.decode._decodeLogLuv32 = function (img, data, off, len, tgt, toff) {
  var w = img.width,
    qw = w * 4;
  var io = 0,
    out = new Uint8Array(qw);
  while (io < len) {
    var oo = 0;
    while (oo < qw) {
      var c = data[off + io];
      io++;
      if (c < 128) {
        for (var j = 0; j < c; j++) out[oo + j] = data[off + io + j];
        oo += c;
        io += c;
      } else {
        c = c - 126;
        for (var j = 0; j < c; j++) out[oo + j] = data[off + io];
        oo += c;
        io++;
      }
    }
    for (var x = 0; x < w; x++) {
      tgt[toff + 0] = out[x];
      tgt[toff + 1] = out[x + w];
      tgt[toff + 2] = out[x + w * 2];
      tgt[toff + 4] = out[x + w * 3];
      toff += 6;
    }
  }
};
UTIF.decode._ljpeg_diff = function (data, prm, huff) {
  var getbithuff = UTIF.decode._getbithuff;
  var len, diff;
  len = getbithuff(data, prm, huff[0], huff);
  diff = getbithuff(data, prm, len, 0);
  if ((diff & 1 << len - 1) == 0) diff -= (1 << len) - 1;
  return diff;
};
UTIF.decode._decodeARW = function (img, inp, off, src_length, tgt, toff) {
  var raw_width = img["t256"][0],
    height = img["t257"][0],
    tiff_bps = img["t258"][0];
  var bin = img.isLE ? UTIF._binLE : UTIF._binBE;
  //console.log(raw_width, height, tiff_bps, raw_width*height, src_length);
  var arw2 = raw_width * height == src_length || raw_width * height * 1.5 == src_length;
  //arw2 = true;
  //console.log("ARW2: ", arw2, raw_width*height, src_length, tgt.length);
  if (!arw2) {
    //"sony_arw_load_raw"; // not arw2
    height += 8;
    var prm = [off, 0, 0, 0];
    var huff = new Uint16Array(32770);
    var tab = [0xf11, 0xf10, 0xe0f, 0xd0e, 0xc0d, 0xb0c, 0xa0b, 0x90a, 0x809, 0x708, 0x607, 0x506, 0x405, 0x304, 0x303, 0x300, 0x202, 0x201];
    var i,
      c,
      n,
      col,
      row,
      sum = 0;
    var ljpeg_diff = UTIF.decode._ljpeg_diff;
    huff[0] = 15;
    for (n = i = 0; i < 18; i++) {
      var lim = 32768 >>> (tab[i] >>> 8);
      for (var c = 0; c < lim; c++) huff[++n] = tab[i];
    }
    for (col = raw_width; col--;) for (row = 0; row < height + 1; row += 2) {
      if (row == height) row = 1;
      sum += ljpeg_diff(inp, prm, huff);
      if (row < height) {
        var clr = sum & 4095;
        UTIF.decode._putsF(tgt, (row * raw_width + col) * tiff_bps, clr << 16 - tiff_bps);
      }
    }
    return;
  }
  if (raw_width * height * 1.5 == src_length) {
    //console.log("weird compression");
    for (var i = 0; i < src_length; i += 3) {
      var b0 = inp[off + i + 0],
        b1 = inp[off + i + 1],
        b2 = inp[off + i + 2];
      tgt[toff + i] = b1 << 4 | b0 >>> 4;
      tgt[toff + i + 1] = b0 << 4 | b2 >>> 4;
      tgt[toff + i + 2] = b2 << 4 | b1 >>> 4;
    }
    return;
  }
  var pix = new Uint16Array(16);
  var row, col, val, max, min, imax, imin, sh, bit, i, dp;
  var data = new Uint8Array(raw_width + 1);
  for (row = 0; row < height; row++) {
    //fread (data, 1, raw_width, ifp);
    for (var j = 0; j < raw_width; j++) data[j] = inp[off++];
    for (dp = 0, col = 0; col < raw_width - 30; dp += 16) {
      max = 0x7ff & (val = bin.readUint(data, dp));
      min = 0x7ff & val >>> 11;
      imax = 0x0f & val >>> 22;
      imin = 0x0f & val >>> 26;
      for (sh = 0; sh < 4 && 0x80 << sh <= max - min; sh++);
      for (bit = 30, i = 0; i < 16; i++) if (i == imax) pix[i] = max;else if (i == imin) pix[i] = min;else {
        pix[i] = ((bin.readUshort(data, dp + (bit >> 3)) >>> (bit & 7) & 0x7f) << sh) + min;
        if (pix[i] > 0x7ff) pix[i] = 0x7ff;
        bit += 7;
      }
      for (i = 0; i < 16; i++, col += 2) {
        //RAW(row,col) = curve[pix[i] << 1] >> 2;
        var clr = pix[i] << 1; //clr = 0xffff;
        UTIF.decode._putsF(tgt, (row * raw_width + col) * tiff_bps, clr << 16 - tiff_bps);
      }
      col -= col & 1 ? 1 : 31;
    }
  }
};
UTIF.decode._decodeNikon = function (img, imgs, data, off, src_length, tgt, toff) {
  var nikon_tree = [[0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, /* 12-bit lossy */
  5, 4, 3, 6, 2, 7, 1, 0, 8, 9, 11, 10, 12], [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, /* 12-bit lossy after split */
  0x39, 0x5a, 0x38, 0x27, 0x16, 5, 4, 3, 2, 1, 0, 11, 12, 12], [0, 0, 1, 4, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* 12-bit lossless */
  5, 4, 6, 3, 7, 2, 8, 1, 9, 0, 10, 11, 12], [0, 0, 1, 4, 3, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, /* 14-bit lossy */
  5, 6, 4, 7, 8, 3, 9, 2, 1, 0, 10, 11, 12, 13, 14], [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, /* 14-bit lossy after split */
  8, 0x5c, 0x4b, 0x3a, 0x29, 7, 6, 5, 4, 3, 2, 1, 0, 13, 14], [0, 0, 1, 4, 2, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, /* 14-bit lossless */
  7, 6, 8, 5, 9, 4, 10, 3, 11, 12, 2, 0, 1, 13, 14]];
  var raw_width = img["t256"][0],
    height = img["t257"][0],
    tiff_bps = img["t258"][0];
  var tree = 0,
    split = 0;
  var make_decoder = UTIF.decode._make_decoder;
  var getbithuff = UTIF.decode._getbithuff;
  var mn = imgs[0].exifIFD.makerNote,
    md = mn["t150"] ? mn["t150"] : mn["t140"],
    mdo = 0; //console.log(mn,md);
  //console.log(md[0].toString(16), md[1].toString(16), tiff_bps);
  var ver0 = md[mdo++],
    ver1 = md[mdo++];
  if (ver0 == 0x49 || ver1 == 0x58) mdo += 2110;
  if (ver0 == 0x46) tree = 2;
  if (tiff_bps == 14) tree += 3;
  var vpred = [[0, 0], [0, 0]],
    bin = img.isLE ? UTIF._binLE : UTIF._binBE;
  for (var i = 0; i < 2; i++) for (var j = 0; j < 2; j++) {
    vpred[i][j] = bin.readShort(md, mdo);
    mdo += 2;
  } // not sure here ... [i][j] or [j][i]
  //console.log(vpred);

  var max = 1 << tiff_bps & 0x7fff,
    step = 0;
  var csize = bin.readShort(md, mdo);
  mdo += 2;
  if (csize > 1) step = Math.floor(max / (csize - 1));
  if (ver0 == 0x44 && ver1 == 0x20 && step > 0) split = bin.readShort(md, 562);
  var i;
  var row, col;
  var len, shl, diff;
  var hpred = [0, 0];
  var huff = make_decoder(nikon_tree[tree]);

  //var g_input_offset=0, bitbuf=0, vbits=0, reset=0;
  var prm = [off, 0, 0, 0];
  //console.log(split);  split = 170;

  for (row = 0; row < height; row++) {
    if (split && row == split) {
      //free (huff);
      huff = make_decoder(nikon_tree[tree + 1]);
      //max_v += (min_v = 16) << 1;
    }

    for (col = 0; col < raw_width; col++) {
      i = getbithuff(data, prm, huff[0], huff);
      len = i & 15;
      shl = i >>> 4;
      diff = (getbithuff(data, prm, len - shl, 0) << 1) + 1 << shl >>> 1;
      if ((diff & 1 << len - 1) == 0) diff -= (1 << len) - (shl == 0 ? 1 : 0);
      if (col < 2) hpred[col] = vpred[row & 1][col] += diff;else hpred[col & 1] += diff;
      var clr = Math.min(Math.max(hpred[col & 1], 0), (1 << tiff_bps) - 1);
      var bti = (row * raw_width + col) * tiff_bps;
      UTIF.decode._putsF(tgt, bti, clr << 16 - tiff_bps);
    }
  }
};
// put 16 bits
UTIF.decode._putsF = function (dt, pos, val) {
  val = val << 8 - (pos & 7);
  var o = pos >>> 3;
  dt[o] |= val >>> 16;
  dt[o + 1] |= val >>> 8;
  dt[o + 2] |= val;
};
UTIF.decode._getbithuff = function (data, prm, nbits, huff) {
  var zero_after_ff = 0;
  UTIF.decode._get_byte;
  var c;
  var off = prm[0],
    bitbuf = prm[1],
    vbits = prm[2],
    reset = prm[3];

  //if (nbits > 25) return 0;
  //if (nbits <  0) return bitbuf = vbits = reset = 0;
  if (nbits == 0 || vbits < 0) return 0;
  while (!reset && vbits < nbits && (c = data[off++]) != -1 && !(reset = zero_after_ff  )) {
    //console.log("byte read into c");
    bitbuf = (bitbuf << 8) + c;
    vbits += 8;
  }
  c = bitbuf << 32 - vbits >>> 32 - nbits;
  if (huff) {
    vbits -= huff[c + 1] >>> 8; //console.log(c, huff[c]>>8);
    c = huff[c + 1] & 255;
  } else vbits -= nbits;
  if (vbits < 0) throw "e";
  prm[0] = off;
  prm[1] = bitbuf;
  prm[2] = vbits;
  prm[3] = reset;
  return c;
};
UTIF.decode._make_decoder = function (source) {
  var max, len, h, i, j;
  var huff = [];
  for (max = 16; max != 0 && !source[max]; max--);
  var si = 17;
  huff[0] = max;
  for (h = len = 1; len <= max; len++) for (i = 0; i < source[len]; i++, ++si) for (j = 0; j < 1 << max - len; j++) if (h <= 1 << max) huff[h++] = len << 8 | source[si];
  return huff;
};
UTIF.decode._decodeNewJPEG = function (img, data, off, len, tgt, toff) {
  len = Math.min(len, data.length - off);
  var tables = img["t347"],
    tlen = tables ? tables.length : 0,
    buff = new Uint8Array(tlen + len);
  if (tables) {
    var SOI = 216,
      EOI = 217,
      boff = 0;
    for (var i = 0; i < tlen - 1; i++) {
      // Skip EOI marker from JPEGTables
      if (tables[i] == 255 && tables[i + 1] == EOI) break;
      buff[boff++] = tables[i];
    }

    // Skip SOI marker from data
    var byte1 = data[off],
      byte2 = data[off + 1];
    if (byte1 != 255 || byte2 != SOI) {
      buff[boff++] = byte1;
      buff[boff++] = byte2;
    }
    for (var i = 2; i < len; i++) buff[boff++] = data[off + i];
  } else for (var i = 0; i < len; i++) buff[i] = data[off + i];
  if (img["t262"][0] == 32803 || img["t259"][0] == 7 && img["t262"][0] == 34892)
    // lossless JPEG (used in DNG files)
    {
      var bps = img["t258"][0]; //, dcdr = new LosslessJpegDecoder();
      //var time = Date.now();
      var out = UTIF.LosslessJpegDecode(buff),
        olen = out.length; //console.log(olen);
      //var out = ULLJPG(buff), olen=out.length;  //console.log(olen);
      //console.log(Date.now()-time);

      if (bps == 16) {
        if (img.isLE) for (var i = 0; i < olen; i++) {
          tgt[toff + (i << 1)] = out[i] & 255;
          tgt[toff + (i << 1) + 1] = out[i] >>> 8;
        } else for (var i = 0; i < olen; i++) {
          tgt[toff + (i << 1)] = out[i] >>> 8;
          tgt[toff + (i << 1) + 1] = out[i] & 255;
        }
      } else if (bps == 14 || bps == 12 || bps == 10) {
        // 4 * 14 == 56 == 7 * 8
        var rst = 16 - bps;
        for (var i = 0; i < olen; i++) UTIF.decode._putsF(tgt, i * bps, out[i] << rst);
      } else if (bps == 8) {
        for (var i = 0; i < olen; i++) tgt[toff + i] = out[i];
      } else throw new Error("unsupported bit depth " + bps);
    } else {
    var parser = new UTIF.JpegDecoder();
    parser.parse(buff);
    var decoded = parser.getData({
      "width": parser.width,
      "height": parser.height,
      "forceRGB": true,
      "isSourcePDF": false
    });
    for (var i = 0; i < decoded.length; i++) tgt[toff + i] = decoded[i];
  }

  // PhotometricInterpretation is 6 (YCbCr) for JPEG, but after decoding we populate data in
  // RGB format, so updating the tag value
  if (img["t262"][0] == 6) img["t262"][0] = 2;
};
UTIF.decode._decodeOldJPEGInit = function (img, data, off, len) {
  var SOI = 216,
    DQT = 219,
    DHT = 196,
    DRI = 221,
    SOF0 = 192,
    SOS = 218;
  var joff = 0,
    soff = 0,
    tables,
    sosMarker,
    isTiled = false,
    i,
    j,
    k;
  var jpgIchgFmt = img["t513"],
    jifoff = jpgIchgFmt ? jpgIchgFmt[0] : 0;
  var jpgIchgFmtLen = img["t514"],
    jiflen = jpgIchgFmtLen ? jpgIchgFmtLen[0] : 0;
  var soffTag = img["t324"] || img["t273"] || jpgIchgFmt;
  var ycbcrss = img["t530"],
    ssx = 0,
    ssy = 0;
  var spp = img["t277"] ? img["t277"][0] : 1;
  var jpgresint = img["t515"];
  if (soffTag) {
    soff = soffTag[0];
    isTiled = soffTag.length > 1;
  }
  if (!isTiled) {
    if (data[off] == 255 && data[off + 1] == SOI) return {
      jpegOffset: off
    };
    if (jpgIchgFmt != null) {
      if (data[off + jifoff] == 255 && data[off + jifoff + 1] == SOI) joff = off + jifoff;else log("JPEGInterchangeFormat does not point to SOI");
      if (jpgIchgFmtLen == null) log("JPEGInterchangeFormatLength field is missing");else if (jifoff >= soff || jifoff + jiflen <= soff) log("JPEGInterchangeFormatLength field value is invalid");
      if (joff != null) return {
        jpegOffset: joff
      };
    }
  }
  if (ycbcrss != null) {
    ssx = ycbcrss[0];
    ssy = ycbcrss[1];
  }
  if (jpgIchgFmt != null) if (jpgIchgFmtLen != null) if (jiflen >= 2 && jifoff + jiflen <= soff) {
    if (data[off + jifoff + jiflen - 2] == 255 && data[off + jifoff + jiflen - 1] == SOI) tables = new Uint8Array(jiflen - 2);else tables = new Uint8Array(jiflen);
    for (i = 0; i < tables.length; i++) tables[i] = data[off + jifoff + i];
    log("Incorrect JPEG interchange format: using JPEGInterchangeFormat offset to derive tables");
  } else log("JPEGInterchangeFormat+JPEGInterchangeFormatLength > offset to first strip or tile");
  if (tables == null) {
    var ooff = 0,
      out = [];
    out[ooff++] = 255;
    out[ooff++] = SOI;
    var qtables = img["t519"];
    if (qtables == null) throw new Error("JPEGQTables tag is missing");
    for (i = 0; i < qtables.length; i++) {
      out[ooff++] = 255;
      out[ooff++] = DQT;
      out[ooff++] = 0;
      out[ooff++] = 67;
      out[ooff++] = i;
      for (j = 0; j < 64; j++) out[ooff++] = data[off + qtables[i] + j];
    }
    for (k = 0; k < 2; k++) {
      var htables = img[k == 0 ? "t520" : "t521"];
      if (htables == null) throw new Error((k == 0 ? "JPEGDCTables" : "JPEGACTables") + " tag is missing");
      for (i = 0; i < htables.length; i++) {
        out[ooff++] = 255;
        out[ooff++] = DHT;
        //out[ooff++] = 0; out[ooff++] = 67; out[ooff++] = i;
        var nc = 19;
        for (j = 0; j < 16; j++) nc += data[off + htables[i] + j];
        out[ooff++] = nc >>> 8;
        out[ooff++] = nc & 255;
        out[ooff++] = i | k << 4;
        for (j = 0; j < 16; j++) out[ooff++] = data[off + htables[i] + j];
        for (j = 0; j < nc; j++) out[ooff++] = data[off + htables[i] + 16 + j];
      }
    }
    out[ooff++] = 255;
    out[ooff++] = SOF0;
    out[ooff++] = 0;
    out[ooff++] = 8 + 3 * spp;
    out[ooff++] = 8;
    out[ooff++] = img.height >>> 8 & 255;
    out[ooff++] = img.height & 255;
    out[ooff++] = img.width >>> 8 & 255;
    out[ooff++] = img.width & 255;
    out[ooff++] = spp;
    if (spp == 1) {
      out[ooff++] = 1;
      out[ooff++] = 17;
      out[ooff++] = 0;
    } else for (i = 0; i < 3; i++) {
      out[ooff++] = i + 1;
      out[ooff++] = i != 0 ? 17 : (ssx & 15) << 4 | ssy & 15;
      out[ooff++] = i;
    }
    if (jpgresint != null && jpgresint[0] != 0) {
      out[ooff++] = 255;
      out[ooff++] = DRI;
      out[ooff++] = 0;
      out[ooff++] = 4;
      out[ooff++] = jpgresint[0] >>> 8 & 255;
      out[ooff++] = jpgresint[0] & 255;
    }
    tables = new Uint8Array(out);
  }
  var sofpos = -1;
  i = 0;
  while (i < tables.length - 1) {
    if (tables[i] == 255 && tables[i + 1] == SOF0) {
      sofpos = i;
      break;
    }
    i++;
  }
  if (sofpos == -1) {
    var tmptab = new Uint8Array(tables.length + 10 + 3 * spp);
    tmptab.set(tables);
    var tmpoff = tables.length;
    sofpos = tables.length;
    tables = tmptab;
    tables[tmpoff++] = 255;
    tables[tmpoff++] = SOF0;
    tables[tmpoff++] = 0;
    tables[tmpoff++] = 8 + 3 * spp;
    tables[tmpoff++] = 8;
    tables[tmpoff++] = img.height >>> 8 & 255;
    tables[tmpoff++] = img.height & 255;
    tables[tmpoff++] = img.width >>> 8 & 255;
    tables[tmpoff++] = img.width & 255;
    tables[tmpoff++] = spp;
    if (spp == 1) {
      tables[tmpoff++] = 1;
      tables[tmpoff++] = 17;
      tables[tmpoff++] = 0;
    } else for (i = 0; i < 3; i++) {
      tables[tmpoff++] = i + 1;
      tables[tmpoff++] = i != 0 ? 17 : (ssx & 15) << 4 | ssy & 15;
      tables[tmpoff++] = i;
    }
  }
  if (data[soff] == 255 && data[soff + 1] == SOS) {
    var soslen = data[soff + 2] << 8 | data[soff + 3];
    sosMarker = new Uint8Array(soslen + 2);
    sosMarker[0] = data[soff];
    sosMarker[1] = data[soff + 1];
    sosMarker[2] = data[soff + 2];
    sosMarker[3] = data[soff + 3];
    for (i = 0; i < soslen - 2; i++) sosMarker[i + 4] = data[soff + i + 4];
  } else {
    sosMarker = new Uint8Array(2 + 6 + 2 * spp);
    var sosoff = 0;
    sosMarker[sosoff++] = 255;
    sosMarker[sosoff++] = SOS;
    sosMarker[sosoff++] = 0;
    sosMarker[sosoff++] = 6 + 2 * spp;
    sosMarker[sosoff++] = spp;
    if (spp == 1) {
      sosMarker[sosoff++] = 1;
      sosMarker[sosoff++] = 0;
    } else for (i = 0; i < 3; i++) {
      sosMarker[sosoff++] = i + 1;
      sosMarker[sosoff++] = i << 4 | i;
    }
    sosMarker[sosoff++] = 0;
    sosMarker[sosoff++] = 63;
    sosMarker[sosoff++] = 0;
  }
  return {
    jpegOffset: off,
    tables: tables,
    sosMarker: sosMarker,
    sofPosition: sofpos
  };
};
UTIF.decode._decodeOldJPEG = function (img, data, off, len, tgt, toff) {
  var i, dlen, tlen, buff, buffoff;
  var jpegData = UTIF.decode._decodeOldJPEGInit(img, data, off, len);
  if (jpegData.jpegOffset != null) {
    dlen = off + len - jpegData.jpegOffset;
    buff = new Uint8Array(dlen);
    for (i = 0; i < dlen; i++) buff[i] = data[jpegData.jpegOffset + i];
  } else {
    tlen = jpegData.tables.length;
    buff = new Uint8Array(tlen + jpegData.sosMarker.length + len + 2);
    buff.set(jpegData.tables);
    buffoff = tlen;
    buff[jpegData.sofPosition + 5] = img.height >>> 8 & 255;
    buff[jpegData.sofPosition + 6] = img.height & 255;
    buff[jpegData.sofPosition + 7] = img.width >>> 8 & 255;
    buff[jpegData.sofPosition + 8] = img.width & 255;
    if (data[off] != 255 || data[off + 1] != SOS) {
      buff.set(jpegData.sosMarker, buffoff);
      buffoff += sosMarker.length;
    }
    for (i = 0; i < len; i++) buff[buffoff++] = data[off + i];
    buff[buffoff++] = 255;
    buff[buffoff++] = EOI;
  }
  var parser = new UTIF.JpegDecoder();
  parser.parse(buff);
  var decoded = parser.getData({
    "width": parser.width,
    "height": parser.height,
    "forceRGB": true,
    "isSourcePDF": false
  });
  for (var i = 0; i < decoded.length; i++) tgt[toff + i] = decoded[i];

  // PhotometricInterpretation is 6 (YCbCr) for JPEG, but after decoding we populate data in
  // RGB format, so updating the tag value
  if (img["t262"] && img["t262"][0] == 6) img["t262"][0] = 2;
};
UTIF.decode._decodePackBits = function (data, off, len, tgt, toff) {
  var sa = new Int8Array(data.buffer),
    ta = new Int8Array(tgt.buffer),
    lim = off + len;
  while (off < lim) {
    var n = sa[off];
    off++;
    if (n >= 0 && n < 128) for (var i = 0; i < n + 1; i++) {
      ta[toff] = sa[off];
      toff++;
      off++;
    }
    if (n >= -127 && n < 0) {
      for (var i = 0; i < -n + 1; i++) {
        ta[toff] = sa[off];
        toff++;
      }
      off++;
    }
  }
  return toff;
};
UTIF.decode._decodeThunder = function (data, off, len, tgt, toff) {
  var d2 = [0, 1, 0, -1],
    d3 = [0, 1, 2, 3, 0, -3, -2, -1];
  var lim = off + len,
    qoff = toff * 2,
    px = 0;
  while (off < lim) {
    var b = data[off],
      msk = b >>> 6,
      n = b & 63;
    off++;
    if (msk == 3) {
      px = n & 15;
      tgt[qoff >>> 1] |= px << 4 * (1 - qoff & 1);
      qoff++;
    }
    if (msk == 0) for (var i = 0; i < n; i++) {
      tgt[qoff >>> 1] |= px << 4 * (1 - qoff & 1);
      qoff++;
    }
    if (msk == 2) for (var i = 0; i < 2; i++) {
      var d = n >>> 3 * (1 - i) & 7;
      if (d != 4) {
        px += d3[d];
        tgt[qoff >>> 1] |= px << 4 * (1 - qoff & 1);
        qoff++;
      }
    }
    if (msk == 1) for (var i = 0; i < 3; i++) {
      var d = n >>> 2 * (2 - i) & 3;
      if (d != 2) {
        px += d2[d];
        tgt[qoff >>> 1] |= px << 4 * (1 - qoff & 1);
        qoff++;
      }
    }
  }
};
UTIF.decode._dmap = {
  "1": 0,
  "011": 1,
  "000011": 2,
  "0000011": 3,
  "010": -1,
  "000010": -2,
  "0000010": -3
};
UTIF.decode._lens = function () {
  var addKeys = function addKeys(lens, arr, i0, inc) {
    for (var i = 0; i < arr.length; i++) lens[arr[i]] = i0 + i * inc;
  };
  var termW = "00110101,000111,0111,1000,1011,1100,1110,1111,10011,10100,00111,01000,001000,000011,110100,110101," // 15
  + "101010,101011,0100111,0001100,0001000,0010111,0000011,0000100,0101000,0101011,0010011,0100100,0011000,00000010,00000011,00011010," // 31
  + "00011011,00010010,00010011,00010100,00010101,00010110,00010111,00101000,00101001,00101010,00101011,00101100,00101101,00000100,00000101,00001010," // 47
  + "00001011,01010010,01010011,01010100,01010101,00100100,00100101,01011000,01011001,01011010,01011011,01001010,01001011,00110010,00110011,00110100";
  var termB = "0000110111,010,11,10,011,0011,0010,00011,000101,000100,0000100,0000101,0000111,00000100,00000111,000011000," // 15
  + "0000010111,0000011000,0000001000,00001100111,00001101000,00001101100,00000110111,00000101000,00000010111,00000011000,000011001010,000011001011,000011001100,000011001101,000001101000,000001101001," // 31
  + "000001101010,000001101011,000011010010,000011010011,000011010100,000011010101,000011010110,000011010111,000001101100,000001101101,000011011010,000011011011,000001010100,000001010101,000001010110,000001010111," // 47
  + "000001100100,000001100101,000001010010,000001010011,000000100100,000000110111,000000111000,000000100111,000000101000,000001011000,000001011001,000000101011,000000101100,000001011010,000001100110,000001100111";
  var makeW = "11011,10010,010111,0110111,00110110,00110111,01100100,01100101,01101000,01100111,011001100,011001101,011010010,011010011,011010100,011010101,011010110," + "011010111,011011000,011011001,011011010,011011011,010011000,010011001,010011010,011000,010011011";
  var makeB = "0000001111,000011001000,000011001001,000001011011,000000110011,000000110100,000000110101,0000001101100,0000001101101,0000001001010,0000001001011,0000001001100," + "0000001001101,0000001110010,0000001110011,0000001110100,0000001110101,0000001110110,0000001110111,0000001010010,0000001010011,0000001010100,0000001010101,0000001011010," + "0000001011011,0000001100100,0000001100101";
  var makeA = "00000001000,00000001100,00000001101,000000010010,000000010011,000000010100,000000010101,000000010110,000000010111,000000011100,000000011101,000000011110,000000011111";
  termW = termW.split(",");
  termB = termB.split(",");
  makeW = makeW.split(",");
  makeB = makeB.split(",");
  makeA = makeA.split(",");
  var lensW = {},
    lensB = {};
  addKeys(lensW, termW, 0, 1);
  addKeys(lensW, makeW, 64, 64);
  addKeys(lensW, makeA, 1792, 64);
  addKeys(lensB, termB, 0, 1);
  addKeys(lensB, makeB, 64, 64);
  addKeys(lensB, makeA, 1792, 64);
  return [lensW, lensB];
}();
UTIF.decode._decodeG4 = function (data, off, slen, tgt, toff, w, fo) {
  var U = UTIF.decode,
    boff = off << 3,
    len = 0,
    wrd = ""; // previous starts with 1
  var line = [],
    pline = [];
  for (var i = 0; i < w; i++) pline.push(0);
  pline = U._makeDiff(pline);
  var a0 = 0,
    a1 = 0,
    b1 = 0,
    b2 = 0,
    clr = 0;
  var y = 0,
    mode = "",
    toRead = 0;
  var bipl = Math.ceil(w / 8) * 8;
  while (boff >>> 3 < off + slen) {
    b1 = U._findDiff(pline, a0 + (a0 == 0 ? 0 : 1), 1 - clr), b2 = U._findDiff(pline, b1, clr); // could be precomputed
    var bit = 0;
    if (fo == 1) bit = data[boff >>> 3] >>> 7 - (boff & 7) & 1;
    if (fo == 2) bit = data[boff >>> 3] >>> (boff & 7) & 1;
    boff++;
    wrd += bit;
    if (mode == "H") {
      if (U._lens[clr][wrd] != null) {
        var dl = U._lens[clr][wrd];
        wrd = "";
        len += dl;
        if (dl < 64) {
          U._addNtimes(line, len, clr);
          a0 += len;
          clr = 1 - clr;
          len = 0;
          toRead--;
          if (toRead == 0) mode = "";
        }
      }
    } else {
      if (wrd == "0001") {
        wrd = "";
        U._addNtimes(line, b2 - a0, clr);
        a0 = b2;
      }
      if (wrd == "001") {
        wrd = "";
        mode = "H";
        toRead = 2;
      }
      if (U._dmap[wrd] != null) {
        a1 = b1 + U._dmap[wrd];
        U._addNtimes(line, a1 - a0, clr);
        a0 = a1;
        wrd = "";
        clr = 1 - clr;
      }
    }
    if (line.length == w && mode == "") {
      U._writeBits(line, tgt, toff * 8 + y * bipl);
      clr = 0;
      y++;
      a0 = 0;
      pline = U._makeDiff(line);
      line = [];
    }
    //if(wrd.length>150) {  log(wrd);  break;  throw "e";  }
  }
};

UTIF.decode._findDiff = function (line, x, clr) {
  for (var i = 0; i < line.length; i += 2) if (line[i] >= x && line[i + 1] == clr) return line[i];
};
UTIF.decode._makeDiff = function (line) {
  var out = [];
  if (line[0] == 1) out.push(0, 1);
  for (var i = 1; i < line.length; i++) if (line[i - 1] != line[i]) out.push(i, line[i]);
  out.push(line.length, 0, line.length, 1);
  return out;
};
UTIF.decode._decodeG2 = function (data, off, slen, tgt, toff, w, fo) {
  var U = UTIF.decode,
    boff = off << 3,
    len = 0,
    wrd = "";
  var line = [];
  var clr = 0;
  var y = 0;
  var bipl = Math.ceil(w / 8) * 8;
  while (boff >>> 3 < off + slen) {
    var bit = 0;
    if (fo == 1) bit = data[boff >>> 3] >>> 7 - (boff & 7) & 1;
    if (fo == 2) bit = data[boff >>> 3] >>> (boff & 7) & 1;
    boff++;
    wrd += bit;
    len = U._lens[clr][wrd];
    if (len != null) {
      U._addNtimes(line, len, clr);
      wrd = "";
      if (len < 64) clr = 1 - clr;
      if (line.length == w) {
        U._writeBits(line, tgt, toff * 8 + y * bipl);
        line = [];
        y++;
        clr = 0;
        if ((boff & 7) != 0) boff += 8 - (boff & 7);
        if (len >= 64) boff += 8;
      }
    }
  }
};
UTIF.decode._decodeG3 = function (data, off, slen, tgt, toff, w, fo, twoDim) {
  var U = UTIF.decode,
    boff = off << 3,
    len = 0,
    wrd = "";
  var line = [],
    pline = [];
  for (var i = 0; i < w; i++) line.push(0);
  var a0 = 0,
    a1 = 0,
    b1 = 0,
    b2 = 0,
    clr = 0;
  var y = -1,
    mode = "",
    toRead = 0,
    is1D = true;
  var bipl = Math.ceil(w / 8) * 8;
  while (boff >>> 3 < off + slen) {
    b1 = U._findDiff(pline, a0 + (a0 == 0 ? 0 : 1), 1 - clr), b2 = U._findDiff(pline, b1, clr); // could be precomputed
    var bit = 0;
    if (fo == 1) bit = data[boff >>> 3] >>> 7 - (boff & 7) & 1;
    if (fo == 2) bit = data[boff >>> 3] >>> (boff & 7) & 1;
    boff++;
    wrd += bit;
    if (is1D) {
      if (U._lens[clr][wrd] != null) {
        var dl = U._lens[clr][wrd];
        wrd = "";
        len += dl;
        if (dl < 64) {
          U._addNtimes(line, len, clr);
          clr = 1 - clr;
          len = 0;
        }
      }
    } else {
      if (mode == "H") {
        if (U._lens[clr][wrd] != null) {
          var dl = U._lens[clr][wrd];
          wrd = "";
          len += dl;
          if (dl < 64) {
            U._addNtimes(line, len, clr);
            a0 += len;
            clr = 1 - clr;
            len = 0;
            toRead--;
            if (toRead == 0) mode = "";
          }
        }
      } else {
        if (wrd == "0001") {
          wrd = "";
          U._addNtimes(line, b2 - a0, clr);
          a0 = b2;
        }
        if (wrd == "001") {
          wrd = "";
          mode = "H";
          toRead = 2;
        }
        if (U._dmap[wrd] != null) {
          a1 = b1 + U._dmap[wrd];
          U._addNtimes(line, a1 - a0, clr);
          a0 = a1;
          wrd = "";
          clr = 1 - clr;
        }
      }
    }
    if (wrd.endsWith("000000000001"))
      // needed for some files
      {
        if (y >= 0) U._writeBits(line, tgt, toff * 8 + y * bipl);
        if (twoDim) {
          if (fo == 1) is1D = (data[boff >>> 3] >>> 7 - (boff & 7) & 1) == 1;
          if (fo == 2) is1D = (data[boff >>> 3] >>> (boff & 7) & 1) == 1;
          boff++;
        }
        //log("EOL",y, "next 1D:", is1D);
        wrd = "";
        clr = 0;
        y++;
        a0 = 0;
        pline = U._makeDiff(line);
        line = [];
      }
  }
  if (line.length == w) U._writeBits(line, tgt, toff * 8 + y * bipl);
};
UTIF.decode._addNtimes = function (arr, n, val) {
  for (var i = 0; i < n; i++) arr.push(val);
};
UTIF.decode._writeBits = function (bits, tgt, boff) {
  for (var i = 0; i < bits.length; i++) tgt[boff + i >>> 3] |= bits[i] << 7 - (boff + i & 7);
};
UTIF.decode._decodeLZW = UTIF.decode._decodeLZW = function () {
  var e,
    U,
    Z,
    u,
    K = 0,
    V = 0,
    g = 0,
    N = 0,
    O = function O() {
      var S = e >>> 3,
        A = U[S] << 16 | U[S + 1] << 8 | U[S + 2],
        j = A >>> 24 - (e & 7) - V & (1 << V) - 1;
      e += V;
      return j;
    },
    h = new Uint32Array(4096 * 4),
    w = 0,
    m = function m(S) {
      if (S == w) return;
      w = S;
      g = 1 << S;
      N = g + 1;
      for (var A = 0; A < N + 1; A++) {
        h[4 * A] = h[4 * A + 3] = A;
        h[4 * A + 1] = 65535;
        h[4 * A + 2] = 1;
      }
    },
    i = function i(S) {
      V = S + 1;
      K = N + 1;
    },
    D = function D(S) {
      var A = S << 2,
        j = h[A + 2],
        a = u + j - 1;
      while (A != 65535) {
        Z[a--] = h[A];
        A = h[A + 1];
      }
      u += j;
    },
    L = function L(S, A) {
      var j = K << 2,
        a = S << 2;
      h[j] = h[(A << 2) + 3];
      h[j + 1] = a;
      h[j + 2] = h[a + 2] + 1;
      h[j + 3] = h[a + 3];
      K++;
      if (K + 1 == 1 << V && V != 12) V++;
    },
    T = function T(S, A, j, a, n, q) {
      e = A << 3;
      U = S;
      Z = a;
      u = n;
      var B = A + j << 3,
        _ = 0,
        t = 0;
      m(q);
      i(q);
      while (e < B && (_ = O()) != N) {
        if (_ == g) {
          i(q);
          _ = O();
          if (_ == N) break;
          D(_);
        } else {
          if (_ < K) {
            D(_);
            L(t, _);
          } else {
            L(t, t);
            D(K - 1);
          }
        }
        t = _;
      }
      return u;
    };
  return T;
}();
UTIF.tags = {};
//UTIF.ttypes = {  256:3,257:3,258:3,   259:3, 262:3,  273:4,  274:3, 277:3,278:4,279:4, 282:5, 283:5, 284:3, 286:5,287:5, 296:3, 305:2, 306:2, 338:3, 513:4, 514:4, 34665:4  };
// start at tag 250
UTIF._types = function () {
  var main = new Array(250);
  main.fill(0);
  main = main.concat([0, 0, 0, 0, 4, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 3, 0, 0, 2, 2, 2, 2, 4, 3, 0, 0, 3, 4, 4, 3, 3, 5, 5, 3, 2, 5, 5, 0, 0, 0, 0, 4, 4, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 5, 5, 3, 0, 3, 3, 4, 4, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
  var rest = {
    33432: 2,
    33434: 5,
    33437: 5,
    34665: 4,
    34850: 3,
    34853: 4,
    34855: 3,
    34864: 3,
    34866: 4,
    36864: 7,
    36867: 2,
    36868: 2,
    37121: 7,
    37377: 10,
    37378: 5,
    37380: 10,
    37381: 5,
    37383: 3,
    37384: 3,
    37385: 3,
    37386: 5,
    37510: 7,
    37520: 2,
    37521: 2,
    37522: 2,
    40960: 7,
    40961: 3,
    40962: 4,
    40963: 4,
    40965: 4,
    41486: 5,
    41487: 5,
    41488: 3,
    41985: 3,
    41986: 3,
    41987: 3,
    41988: 5,
    41989: 3,
    41990: 3,
    41993: 3,
    41994: 3,
    41995: 7,
    41996: 3,
    42032: 2,
    42033: 2,
    42034: 5,
    42036: 2,
    42037: 2,
    59932: 7
  };
  return {
    basic: {
      main: main,
      rest: rest
    },
    gps: {
      main: [1, 2, 5, 2, 5, 1, 5, 5, 0, 9],
      rest: {
        18: 2,
        29: 2
      }
    }
  };
}();
UTIF._readIFD = function (bin, data, offset, ifds, depth, prm) {
  var cnt = bin.readUshort(data, offset);
  offset += 2;
  var ifd = {};
  if (prm.debug) log("   ".repeat(depth), ifds.length - 1, ">>>----------------");
  for (var i = 0; i < cnt; i++) {
    var tag = bin.readUshort(data, offset);
    offset += 2;
    var type = bin.readUshort(data, offset);
    offset += 2;
    var num = bin.readUint(data, offset);
    offset += 4;
    var voff = bin.readUint(data, offset);
    offset += 4;
    var arr = [];
    //ifd["t"+tag+"-"+UTIF.tags[tag]] = arr;
    if (type == 1 || type == 7) {
      var no = num < 5 ? offset - 4 : voff;
      if (no + num > data.buffer.byteLength) num = data.buffer.byteLength - no;
      arr = new Uint8Array(data.buffer, no, num);
    }
    if (type == 2) {
      var o0 = num < 5 ? offset - 4 : voff,
        c = data[o0],
        len = Math.max(0, Math.min(num - 1, data.length - o0));
      if (c < 128 || len == 0) arr.push(bin.readASCII(data, o0, len));else arr = new Uint8Array(data.buffer, o0, len);
    }
    if (type == 3) {
      for (var j = 0; j < num; j++) arr.push(bin.readUshort(data, (num < 3 ? offset - 4 : voff) + 2 * j));
    }
    if (type == 4 || type == 13) {
      for (var j = 0; j < num; j++) arr.push(bin.readUint(data, (num < 2 ? offset - 4 : voff) + 4 * j));
    }
    if (type == 5 || type == 10) {
      var ri = type == 5 ? bin.readUint : bin.readInt;
      for (var j = 0; j < num; j++) arr.push([ri(data, voff + j * 8), ri(data, voff + j * 8 + 4)]);
    }
    if (type == 8) {
      for (var j = 0; j < num; j++) arr.push(bin.readShort(data, (num < 3 ? offset - 4 : voff) + 2 * j));
    }
    if (type == 9) {
      for (var j = 0; j < num; j++) arr.push(bin.readInt(data, (num < 2 ? offset - 4 : voff) + 4 * j));
    }
    if (type == 11) {
      for (var j = 0; j < num; j++) arr.push(bin.readFloat(data, voff + j * 4));
    }
    if (type == 12) {
      for (var j = 0; j < num; j++) arr.push(bin.readDouble(data, voff + j * 8));
    }
    if (num != 0 && arr.length == 0) {
      log(tag, "unknown TIFF tag type: ", type, "num:", num);
      if (i == 0) return;
      continue;
    }
    if (prm.debug) log("   ".repeat(depth), tag, type, UTIF.tags[tag], arr);
    ifd["t" + tag] = arr;
    if (tag == 330 && ifd["t272"] && ifd["t272"][0] == "DSLR-A100") ; else if (tag == 330 || tag == 34665 || tag == 34853 || tag == 50740 && bin.readUshort(data, bin.readUint(arr, 0)) < 300 || tag == 61440) {
      var oarr = tag == 50740 ? [bin.readUint(arr, 0)] : arr;
      var subfd = [];
      for (var j = 0; j < oarr.length; j++) UTIF._readIFD(bin, data, oarr[j], subfd, depth + 1, prm);
      if (tag == 330) ifd.subIFD = subfd;
      if (tag == 34665) ifd.exifIFD = subfd[0];
      if (tag == 34853) ifd.gpsiIFD = subfd[0]; //console.log("gps", subfd[0]);  }
      if (tag == 50740) ifd.dngPrvt = subfd[0];
      if (tag == 61440) ifd.fujiIFD = subfd[0];
    }
    if (tag == 37500 && prm.parseMN) {
      var mn = arr;
      //console.log(bin.readASCII(mn,0,mn.length), mn);
      if (bin.readASCII(mn, 0, 5) == "Nikon") ifd.makerNote = UTIF["decode"](mn.slice(10).buffer)[0];else if (bin.readASCII(mn, 0, 5) == "OLYMP" || bin.readASCII(mn, 0, 9) == "OM SYSTEM") {
        // ???
        var inds = [8208, 8224, 8240, 8256, 8272];
        var subsub = [];
        UTIF._readIFD(bin, mn, mn[1] == 77 ? 16 : mn[5] == 85 ? 12 : 8, subsub, depth + 1, prm);
        var obj = ifd.makerNote = subsub.pop();
        for (var j = 0; j < inds.length; j++) {
          var k = "t" + inds[j];
          if (obj[k] == null) continue;
          UTIF._readIFD(bin, mn, obj[k][0], subsub, depth + 1, prm);
          obj[k] = subsub.pop();
        }
        if (obj["t12288"]) {
          UTIF._readIFD(bin, obj["t12288"], 0, subsub, depth + 1, prm);
          obj["t12288"] = subsub.pop();
        }
      } else if (bin.readUshort(data, voff) < 300 && bin.readUshort(data, voff + 4) <= 12) {
        var subsub = [];
        UTIF._readIFD(bin, data, voff, subsub, depth + 1, prm);
        ifd.makerNote = subsub[0];
      }
    }
  }
  ifds.push(ifd);
  if (prm.debug) log("   ".repeat(depth), "<<<---------------");
  return offset;
};
UTIF._writeIFD = function (bin, types, data, offset, ifd) {
  var keys = Object.keys(ifd),
    knum = keys.length;
  if (ifd["exifIFD"]) knum--;
  if (ifd["gpsiIFD"]) knum--;
  bin.writeUshort(data, offset, knum);
  offset += 2;
  var eoff = offset + knum * 12 + 4;
  for (var ki = 0; ki < keys.length; ki++) {
    var key = keys[ki];
    if (key == "t34665" || key == "t34853") continue;
    if (key == "exifIFD") key = "t34665";
    if (key == "gpsiIFD") key = "t34853";
    var tag = parseInt(key.slice(1)),
      type = types.main[tag];
    if (type == null) type = types.rest[tag];
    if (type == null || type == 0) throw new Error("unknown type of tag: " + tag);
    //console.log(offset+":", tag, type, eoff);
    var val = ifd[key];
    if (tag == 34665) {
      var outp = UTIF._writeIFD(bin, types, data, eoff, ifd["exifIFD"]);
      val = [eoff];
      eoff = outp[1];
    }
    if (tag == 34853) {
      var outp = UTIF._writeIFD(bin, UTIF._types.gps, data, eoff, ifd["gpsiIFD"]);
      val = [eoff];
      eoff = outp[1];
    }
    if (type == 2) val = val[0] + "\\0";
    var num = val.length;
    bin.writeUshort(data, offset, tag);
    offset += 2;
    bin.writeUshort(data, offset, type);
    offset += 2;
    bin.writeUint(data, offset, num);
    offset += 4;
    var dlen = [-1, 1, 1, 2, 4, 8, 0, 1, 0, 4, 8, 0, 8][type] * num; //if(dlen<1) throw "e";
    var toff = offset;
    if (dlen > 4) {
      bin.writeUint(data, offset, eoff);
      toff = eoff;
    }
    if (type == 1 || type == 7) {
      for (var i = 0; i < num; i++) data[toff + i] = val[i];
    } else if (type == 2) {
      bin.writeASCII(data, toff, val);
    } else if (type == 3) {
      for (var i = 0; i < num; i++) bin.writeUshort(data, toff + 2 * i, val[i]);
    } else if (type == 4) {
      for (var i = 0; i < num; i++) bin.writeUint(data, toff + 4 * i, val[i]);
    } else if (type == 5 || type == 10) {
      var wr = type == 5 ? bin.writeUint : bin.writeInt;
      for (var i = 0; i < num; i++) {
        var v = val[i],
          nu = v[0],
          de = v[1];
        if (nu == null) throw "e";
        wr(data, toff + 8 * i, nu);
        wr(data, toff + 8 * i + 4, de);
      }
    } else if (type == 9) {
      for (var i = 0; i < num; i++) bin.writeInt(data, toff + 4 * i, val[i]);
    } else if (type == 12) {
      for (var i = 0; i < num; i++) bin.writeDouble(data, toff + 8 * i, val[i]);
    } else throw type;
    if (dlen > 4) {
      dlen += dlen & 1;
      eoff += dlen;
    }
    offset += 4;
  }
  return [offset, eoff];
};
UTIF.toRGBA8 = function (out, scl) {
  function gamma(x) {
    return x < 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1.0 / 2.4) - 0.055;
  }
  var w = out.width,
    h = out.height,
    area = w * h,
    data = out.data;
  var img = new Uint8Array(area * 4);
  //console.log(out);
  // 0: WhiteIsZero, 1: BlackIsZero, 2: RGB, 3: Palette color, 4: Transparency mask, 5: CMYK
  var intp = out["t262"] ? out["t262"][0] : 2,
    bps = out["t258"] ? Math.min(32, out["t258"][0]) : 1;
  if (out["t262"] == null && bps == 1) intp = 0;
  var smpls = out["t277"] ? out["t277"][0] : out["t258"] ? out["t258"].length : [1, 1, 3, 1, 1, 4, 3][intp];
  var sfmt = out["t339"] ? out["t339"][0] : null;
  if (intp == 1 && bps == 32 && sfmt != 3) throw "e"; // sample format
  var bpl = Math.ceil(smpls * bps * w / 8);

  //log("interpretation: ", intp, "smpls", smpls, "bps", bps, "sample format",sfmt, out);

  if (intp == 0) {
    scl = 1 / 256; // "Photopeatest.tif"
    for (var y = 0; y < h; y++) {
      var off = y * bpl,
        io = y * w;
      if (bps == 1) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          px = data[off + (i >> 3)] >> 7 - (i & 7) & 1;
        img[qi] = img[qi + 1] = img[qi + 2] = (1 - px) * 255;
        img[qi + 3] = 255;
      }
      if (bps == 4) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          px = data[off + (i >> 1)] >> 4 - 4 * (i & 1) & 15;
        img[qi] = img[qi + 1] = img[qi + 2] = (15 - px) * 17;
        img[qi + 3] = 255;
      }
      if (bps == 8) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          px = data[off + i];
        img[qi] = img[qi + 1] = img[qi + 2] = 255 - px;
        img[qi + 3] = 255;
      }
      if (bps == 16) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          o = off + 2 * i,
          px = data[o + 1] << 8 | data[o];
        img[qi] = img[qi + 1] = img[qi + 2] = Math.min(255, 255 - ~~(px * scl));
        img[qi + 3] = 255;
      } // ladoga.tif
    }
  } else if (intp == 1) {
    if (scl == null) scl = 1 / 256;
    var f32 = (data.length & 3) == 0 ? new Float32Array(data.buffer) : null;
    for (var y = 0; y < h; y++) {
      var off = y * bpl,
        io = y * w;
      if (bps == 1) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          px = data[off + (i >> 3)] >> 7 - (i & 7) & 1;
        img[qi] = img[qi + 1] = img[qi + 2] = px * 255;
        img[qi + 3] = 255;
      }
      if (bps == 2) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          px = data[off + (i >> 2)] >> 6 - 2 * (i & 3) & 3;
        img[qi] = img[qi + 1] = img[qi + 2] = px * 85;
        img[qi + 3] = 255;
      }
      if (bps == 8) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          px = data[off + i * smpls];
        img[qi] = img[qi + 1] = img[qi + 2] = px;
        img[qi + 3] = 255;
      }
      if (bps == 16) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          o = off + 2 * i,
          px = data[o + 1] << 8 | data[o];
        img[qi] = img[qi + 1] = img[qi + 2] = Math.min(255, ~~(px * scl));
        img[qi + 3] = 255;
      } // ladoga.tif
      if (bps == 32) for (var i = 0; i < w; i++) {
        var qi = io + i << 2,
          o = (off >>> 2) + i,
          px = f32[o];
        img[qi] = img[qi + 1] = img[qi + 2] = ~~(0.5 + 255 * px);
        img[qi + 3] = 255;
      }
    }
  } else if (intp == 2) {
    if (bps == 8) {
      if (smpls == 1) for (var i = 0; i < area; i++) {
        img[4 * i] = img[4 * i + 1] = img[4 * i + 2] = data[i];
        img[4 * i + 3] = 255;
      }
      if (smpls == 3) for (var i = 0; i < area; i++) {
        var qi = i << 2,
          ti = i * 3;
        img[qi] = data[ti];
        img[qi + 1] = data[ti + 1];
        img[qi + 2] = data[ti + 2];
        img[qi + 3] = 255;
      }
      if (smpls >= 4) for (var i = 0; i < area; i++) {
        var qi = i << 2,
          ti = i * smpls;
        img[qi] = data[ti];
        img[qi + 1] = data[ti + 1];
        img[qi + 2] = data[ti + 2];
        img[qi + 3] = data[ti + 3];
      }
    } else if (bps == 16) {
      // 3x 16-bit channel
      if (smpls == 4) for (var i = 0; i < area; i++) {
        var qi = i << 2,
          ti = i * 8 + 1;
        img[qi] = data[ti];
        img[qi + 1] = data[ti + 2];
        img[qi + 2] = data[ti + 4];
        img[qi + 3] = data[ti + 6];
      }
      if (smpls == 3) for (var i = 0; i < area; i++) {
        var qi = i << 2,
          ti = i * 6 + 1;
        img[qi] = data[ti];
        img[qi + 1] = data[ti + 2];
        img[qi + 2] = data[ti + 4];
        img[qi + 3] = 255;
      }
    } else if (bps == 32) {
      var ndt = new Float32Array(data.buffer); // t339 is [3,3,3]
      // check the endianity
      var min = 0;
      for (var i = 0; i < ndt.length; i++) min = Math.min(min, ndt[i]);
      if (min < 0) for (var i = 0; i < data.length; i += 4) {
        var t = data[i];
        data[i] = data[i + 3];
        data[i + 3] = t;
        t = data[i + 1];
        data[i + 1] = data[i + 2];
        data[i + 2] = t;
      }
      // gamma correction
      var pmap = [];
      for (var i = 0; i < 65536; i++) pmap.push(gamma(i / 65535));
      for (var i = 0; i < ndt.length; i++) {
        var cv = Math.max(0, Math.min(1, ndt[i]));
        ndt[i] = pmap[~~(0.5 + cv * 65535)];
      }
      if (smpls == 3) for (var i = 0; i < area; i++) {
        var qi = i << 2,
          ti = i * 3;
        img[qi] = ~~(0.5 + ndt[ti] * 255);
        img[qi + 1] = ~~(0.5 + ndt[ti + 1] * 255);
        img[qi + 2] = ~~(0.5 + ndt[ti + 2] * 255);
        img[qi + 3] = 255;
      } else if (smpls == 4) for (var i = 0; i < area; i++) {
        var qi = i << 2,
          ti = i * 4;
        img[qi] = ~~(0.5 + ndt[ti] * 255);
        img[qi + 1] = ~~(0.5 + ndt[ti + 1] * 255);
        img[qi + 2] = ~~(0.5 + ndt[ti + 2] * 255);
        img[qi + 3] = ~~(0.5 + ndt[ti + 3] * 255);
      } else throw smpls;
    } else throw bps;
  } else if (intp == 3) {
    var map = out["t320"];
    var cn = 1 << bps;
    var nexta = bps == 8 && smpls > 1 && out["t338"] && out["t338"][0] != 0;
    for (var y = 0; y < h; y++) for (var x = 0; x < w; x++) {
      var i = y * w + x;
      var qi = i << 2,
        mi = 0;
      var dof = y * bpl;
      if (bps == 1) mi = data[dof + (x >>> 3)] >>> 7 - (x & 7) & 1;else if (bps == 2) mi = data[dof + (x >>> 2)] >>> 6 - 2 * (x & 3) & 3;else if (bps == 4) mi = data[dof + (x >>> 1)] >>> 4 - 4 * (x & 1) & 15;else if (bps == 8) mi = data[dof + x * smpls];else throw bps;
      img[qi] = map[mi] >> 8;
      img[qi + 1] = map[cn + mi] >> 8;
      img[qi + 2] = map[cn + cn + mi] >> 8;
      img[qi + 3] = nexta ? data[dof + x * smpls + 1] : 255;
    }
  } else if (intp == 5) {
    var gotAlpha = smpls > 4 ? 1 : 0;
    for (var i = 0; i < area; i++) {
      var qi = i << 2,
        si = i * smpls;
      if (window.UDOC) {
        var C = data[si],
          M = data[si + 1],
          Y = data[si + 2],
          K = data[si + 3];
        var c = UDOC.C.cmykToRgb([C * (1 / 255), M * (1 / 255), Y * (1 / 255), K * (1 / 255)]);
        img[qi] = ~~(0.5 + 255 * c[0]);
        img[qi + 1] = ~~(0.5 + 255 * c[1]);
        img[qi + 2] = ~~(0.5 + 255 * c[2]);
      } else {
        var C = 255 - data[si],
          M = 255 - data[si + 1],
          Y = 255 - data[si + 2],
          K = (255 - data[si + 3]) * (1 / 255);
        img[qi] = ~~(C * K + 0.5);
        img[qi + 1] = ~~(M * K + 0.5);
        img[qi + 2] = ~~(Y * K + 0.5);
      }
      img[qi + 3] = 255 * (1 - gotAlpha) + data[si + 4] * gotAlpha;
    }
  } else if (intp == 6 && out["t278"]) {
    // only for DSC_1538.TIF
    var rps = out["t278"][0];
    for (var y = 0; y < h; y += rps) {
      var i = y * w,
        len = rps * w;
      for (var j = 0; j < len; j++) {
        var qi = 4 * (i + j),
          si = 3 * i + 4 * (j >>> 1);
        var Y = data[si + (j & 1)],
          Cb = data[si + 2] - 128,
          Cr = data[si + 3] - 128;
        var r = Y + ((Cr >> 2) + (Cr >> 3) + (Cr >> 5));
        var g = Y - ((Cb >> 2) + (Cb >> 4) + (Cb >> 5)) - ((Cr >> 1) + (Cr >> 3) + (Cr >> 4) + (Cr >> 5));
        var b = Y + (Cb + (Cb >> 1) + (Cb >> 2) + (Cb >> 6));
        img[qi] = Math.max(0, Math.min(255, r));
        img[qi + 1] = Math.max(0, Math.min(255, g));
        img[qi + 2] = Math.max(0, Math.min(255, b));
        img[qi + 3] = 255;
      }
    }
  } else if (intp == 32845) {
    for (var y = 0; y < h; y++) for (var x = 0; x < w; x++) {
      var si = (y * w + x) * 6,
        qi = (y * w + x) * 4;
      var L = data[si + 1] << 8 | data[si];
      var L = Math.pow(2, (L + 0.5) / 256 - 64);
      var u = (data[si + 3] + 0.5) / 410;
      var v = (data[si + 5] + 0.5) / 410;

      // Luv to xyY
      var sX = 9 * u / (6 * u - 16 * v + 12);
      var sY = 4 * v / (6 * u - 16 * v + 12);
      var bY = L;

      // xyY to XYZ
      var X = sX * bY / sY,
        Y = bY,
        Z = (1 - sX - sY) * bY / sY;
      var r = 2.690 * X - 1.276 * Y - 0.414 * Z;
      var g = -1.022 * X + 1.978 * Y + 0.044 * Z;
      var b = 0.061 * X - 0.224 * Y + 1.163 * Z;
      img[qi] = gamma(Math.min(r, 1)) * 255;
      img[qi + 1] = gamma(Math.min(g, 1)) * 255;
      img[qi + 2] = gamma(Math.min(b, 1)) * 255;
      img[qi + 3] = 255;
    }
  } else log("Unknown Photometric interpretation: " + intp);
  return img;
};
UTIF.replaceIMG = function (imgs) {
  if (imgs == null) imgs = document.getElementsByTagName("img");
  var sufs = ["tif", "tiff", "dng", "cr2", "nef"];
  for (var i = 0; i < imgs.length; i++) {
    var img = imgs[i],
      src = img.getAttribute("src");
    if (src == null) continue;
    var suff = src.split(".").pop().toLowerCase();
    if (sufs.indexOf(suff) == -1) continue;
    var xhr = new XMLHttpRequest();
    UTIF._xhrs.push(xhr);
    UTIF._imgs.push(img);
    xhr.open("GET", src);
    xhr.responseType = "arraybuffer";
    xhr.onload = UTIF._imgLoaded;
    xhr.send();
  }
};
UTIF._xhrs = [];
UTIF._imgs = [];
UTIF._imgLoaded = function (e) {
  var ind = UTIF._xhrs.indexOf(e.target),
    img = UTIF._imgs[ind];
  UTIF._xhrs.splice(ind, 1);
  UTIF._imgs.splice(ind, 1);
  img.setAttribute("src", UTIF.bufferToURI(e.target.response));
};
UTIF.bufferToURI = function (buff) {
  var ifds = UTIF.decode(buff); //console.log(ifds);
  var vsns = ifds,
    ma = 0,
    page = vsns[0];
  if (ifds[0].subIFD) vsns = vsns.concat(ifds[0].subIFD);
  for (var i = 0; i < vsns.length; i++) {
    var img = vsns[i];
    if (img["t258"] == null || img["t258"].length < 3) continue;
    var ar = img["t256"] * img["t257"];
    if (ar > ma) {
      ma = ar;
      page = img;
    }
  }
  UTIF.decodeImage(buff, page, ifds);
  var rgba = UTIF.toRGBA8(page),
    w = page.width,
    h = page.height;
  var cnv = document.createElement("canvas");
  cnv.width = w;
  cnv.height = h;
  var ctx = cnv.getContext("2d");
  var imgd = new ImageData(new Uint8ClampedArray(rgba.buffer), w, h);
  ctx.putImageData(imgd, 0, 0);
  return cnv.toDataURL();
};
UTIF._binBE = {
  nextZero: function nextZero(data, o) {
    while (data[o] != 0) o++;
    return o;
  },
  readUshort: function readUshort(buff, p) {
    return buff[p] << 8 | buff[p + 1];
  },
  readShort: function readShort(buff, p) {
    var a = UTIF._binBE.ui8;
    a[0] = buff[p + 1];
    a[1] = buff[p + 0];
    return UTIF._binBE.i16[0];
  },
  readInt: function readInt(buff, p) {
    var a = UTIF._binBE.ui8;
    a[0] = buff[p + 3];
    a[1] = buff[p + 2];
    a[2] = buff[p + 1];
    a[3] = buff[p + 0];
    return UTIF._binBE.i32[0];
  },
  readUint: function readUint(buff, p) {
    var a = UTIF._binBE.ui8;
    a[0] = buff[p + 3];
    a[1] = buff[p + 2];
    a[2] = buff[p + 1];
    a[3] = buff[p + 0];
    return UTIF._binBE.ui32[0];
  },
  readASCII: function readASCII(buff, p, l) {
    var s = "";
    for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);
    return s;
  },
  readFloat: function readFloat(buff, p) {
    var a = UTIF._binBE.ui8;
    for (var i = 0; i < 4; i++) a[i] = buff[p + 3 - i];
    return UTIF._binBE.fl32[0];
  },
  readDouble: function readDouble(buff, p) {
    var a = UTIF._binBE.ui8;
    for (var i = 0; i < 8; i++) a[i] = buff[p + 7 - i];
    return UTIF._binBE.fl64[0];
  },
  writeUshort: function writeUshort(buff, p, n) {
    buff[p] = n >> 8 & 255;
    buff[p + 1] = n & 255;
  },
  writeInt: function writeInt(buff, p, n) {
    var a = UTIF._binBE.ui8;
    UTIF._binBE.i32[0] = n;
    buff[p + 3] = a[0];
    buff[p + 2] = a[1];
    buff[p + 1] = a[2];
    buff[p + 0] = a[3];
  },
  writeUint: function writeUint(buff, p, n) {
    buff[p] = n >> 24 & 255;
    buff[p + 1] = n >> 16 & 255;
    buff[p + 2] = n >> 8 & 255;
    buff[p + 3] = n >> 0 & 255;
  },
  writeASCII: function writeASCII(buff, p, s) {
    for (var i = 0; i < s.length; i++) buff[p + i] = s.charCodeAt(i);
  },
  writeDouble: function writeDouble(buff, p, n) {
    UTIF._binBE.fl64[0] = n;
    for (var i = 0; i < 8; i++) buff[p + i] = UTIF._binBE.ui8[7 - i];
  }
};
UTIF._binBE.ui8 = new Uint8Array(8);
UTIF._binBE.i16 = new Int16Array(UTIF._binBE.ui8.buffer);
UTIF._binBE.i32 = new Int32Array(UTIF._binBE.ui8.buffer);
UTIF._binBE.ui32 = new Uint32Array(UTIF._binBE.ui8.buffer);
UTIF._binBE.fl32 = new Float32Array(UTIF._binBE.ui8.buffer);
UTIF._binBE.fl64 = new Float64Array(UTIF._binBE.ui8.buffer);
UTIF._binLE = {
  nextZero: UTIF._binBE.nextZero,
  readUshort: function readUshort(buff, p) {
    return buff[p + 1] << 8 | buff[p];
  },
  readShort: function readShort(buff, p) {
    var a = UTIF._binBE.ui8;
    a[0] = buff[p + 0];
    a[1] = buff[p + 1];
    return UTIF._binBE.i16[0];
  },
  readInt: function readInt(buff, p) {
    var a = UTIF._binBE.ui8;
    a[0] = buff[p + 0];
    a[1] = buff[p + 1];
    a[2] = buff[p + 2];
    a[3] = buff[p + 3];
    return UTIF._binBE.i32[0];
  },
  readUint: function readUint(buff, p) {
    var a = UTIF._binBE.ui8;
    a[0] = buff[p + 0];
    a[1] = buff[p + 1];
    a[2] = buff[p + 2];
    a[3] = buff[p + 3];
    return UTIF._binBE.ui32[0];
  },
  readASCII: UTIF._binBE.readASCII,
  readFloat: function readFloat(buff, p) {
    var a = UTIF._binBE.ui8;
    for (var i = 0; i < 4; i++) a[i] = buff[p + i];
    return UTIF._binBE.fl32[0];
  },
  readDouble: function readDouble(buff, p) {
    var a = UTIF._binBE.ui8;
    for (var i = 0; i < 8; i++) a[i] = buff[p + i];
    return UTIF._binBE.fl64[0];
  },
  writeUshort: function writeUshort(buff, p, n) {
    buff[p] = n & 255;
    buff[p + 1] = n >> 8 & 255;
  },
  writeInt: function writeInt(buff, p, n) {
    var a = UTIF._binBE.ui8;
    UTIF._binBE.i32[0] = n;
    buff[p + 0] = a[0];
    buff[p + 1] = a[1];
    buff[p + 2] = a[2];
    buff[p + 3] = a[3];
  },
  writeUint: function writeUint(buff, p, n) {
    buff[p] = n >>> 0 & 255;
    buff[p + 1] = n >>> 8 & 255;
    buff[p + 2] = n >>> 16 & 255;
    buff[p + 3] = n >>> 24 & 255;
  },
  writeASCII: UTIF._binBE.writeASCII
};
UTIF._copyTile = function (tb, tw, th, b, w, h, xoff, yoff) {
  //log("copyTile", tw, th,  w, h, xoff, yoff);
  var xlim = Math.min(tw, w - xoff);
  var ylim = Math.min(th, h - yoff);
  for (var y = 0; y < ylim; y++) {
    var tof = (yoff + y) * w + xoff;
    var sof = y * tw;
    for (var x = 0; x < xlim; x++) b[tof + x] = tb[sof + x];
  }
};
UTIF._inflateRaw = function () {
  var H = {};
  H.H = {};
  H.H.N = function (N, W) {
    var R = Uint8Array,
      i = 0,
      m = 0,
      J = 0,
      h = 0,
      Q = 0,
      X = 0,
      u = 0,
      w = 0,
      d = 0,
      v,
      C;
    if (N[0] == 3 && N[1] == 0) return W ? W : new R(0);
    var V = H.H,
      n = V.b,
      A = V.e,
      l = V.R,
      M = V.n,
      I = V.A,
      e = V.Z,
      b = V.m,
      Z = W == null;
    if (Z) W = new R(N.length >>> 2 << 5);
    while (i == 0) {
      i = n(N, d, 1);
      m = n(N, d + 1, 2);
      d += 3;
      if (m == 0) {
        if ((d & 7) != 0) d += 8 - (d & 7);
        var D = (d >>> 3) + 4,
          q = N[D - 4] | N[D - 3] << 8;
        if (Z) W = H.H.W(W, w + q);
        W.set(new R(N.buffer, N.byteOffset + D, q), w);
        d = D + q << 3;
        w += q;
        continue;
      }
      if (Z) W = H.H.W(W, w + (1 << 17));
      if (m == 1) {
        v = b.J;
        C = b.h;
        X = (1 << 9) - 1;
        u = (1 << 5) - 1;
      }
      if (m == 2) {
        J = A(N, d, 5) + 257;
        h = A(N, d + 5, 5) + 1;
        Q = A(N, d + 10, 4) + 4;
        d += 14;
        var j = 1;
        for (var c = 0; c < 38; c += 2) {
          b.Q[c] = 0;
          b.Q[c + 1] = 0;
        }
        for (var c = 0; c < Q; c++) {
          var K = A(N, d + c * 3, 3);
          b.Q[(b.X[c] << 1) + 1] = K;
          if (K > j) j = K;
        }
        d += 3 * Q;
        M(b.Q, j);
        I(b.Q, j, b.u);
        v = b.w;
        C = b.d;
        d = l(b.u, (1 << j) - 1, J + h, N, d, b.v);
        var r = V.V(b.v, 0, J, b.C);
        X = (1 << r) - 1;
        var S = V.V(b.v, J, h, b.D);
        u = (1 << S) - 1;
        M(b.C, r);
        I(b.C, r, v);
        M(b.D, S);
        I(b.D, S, C);
      }
      while (!0) {
        var T = v[e(N, d) & X];
        d += T & 15;
        var p = T >>> 4;
        if (p >>> 8 == 0) {
          W[w++] = p;
        } else if (p == 256) {
          break;
        } else {
          var z = w + p - 254;
          if (p > 264) {
            var _ = b.q[p - 257];
            z = w + (_ >>> 3) + A(N, d, _ & 7);
            d += _ & 7;
          }
          var $ = C[e(N, d) & u];
          d += $ & 15;
          var s = $ >>> 4,
            Y = b.c[s],
            a = (Y >>> 4) + n(N, d, Y & 15);
          d += Y & 15;
          while (w < z) {
            W[w] = W[w++ - a];
            W[w] = W[w++ - a];
            W[w] = W[w++ - a];
            W[w] = W[w++ - a];
          }
          w = z;
        }
      }
    }
    return W.length == w ? W : W.slice(0, w);
  };
  H.H.W = function (N, W) {
    var R = N.length;
    if (W <= R) return N;
    var V = new Uint8Array(R << 1);
    V.set(N, 0);
    return V;
  };
  H.H.R = function (N, W, R, V, n, A) {
    var l = H.H.e,
      M = H.H.Z,
      I = 0;
    while (I < R) {
      var e = N[M(V, n) & W];
      n += e & 15;
      var b = e >>> 4;
      if (b <= 15) {
        A[I] = b;
        I++;
      } else {
        var Z = 0,
          m = 0;
        if (b == 16) {
          m = 3 + l(V, n, 2);
          n += 2;
          Z = A[I - 1];
        } else if (b == 17) {
          m = 3 + l(V, n, 3);
          n += 3;
        } else if (b == 18) {
          m = 11 + l(V, n, 7);
          n += 7;
        }
        var J = I + m;
        while (I < J) {
          A[I] = Z;
          I++;
        }
      }
    }
    return n;
  };
  H.H.V = function (N, W, R, V) {
    var n = 0,
      A = 0,
      l = V.length >>> 1;
    while (A < R) {
      var M = N[A + W];
      V[A << 1] = 0;
      V[(A << 1) + 1] = M;
      if (M > n) n = M;
      A++;
    }
    while (A < l) {
      V[A << 1] = 0;
      V[(A << 1) + 1] = 0;
      A++;
    }
    return n;
  };
  H.H.n = function (N, W) {
    var R = H.H.m,
      V = N.length,
      n,
      A,
      l,
      M,
      I,
      e = R.j;
    for (var M = 0; M <= W; M++) e[M] = 0;
    for (M = 1; M < V; M += 2) e[N[M]]++;
    var b = R.K;
    n = 0;
    e[0] = 0;
    for (A = 1; A <= W; A++) {
      n = n + e[A - 1] << 1;
      b[A] = n;
    }
    for (l = 0; l < V; l += 2) {
      I = N[l + 1];
      if (I != 0) {
        N[l] = b[I];
        b[I]++;
      }
    }
  };
  H.H.A = function (N, W, R) {
    var V = N.length,
      n = H.H.m,
      A = n.r;
    for (var l = 0; l < V; l += 2) if (N[l + 1] != 0) {
      var M = l >> 1,
        I = N[l + 1],
        e = M << 4 | I,
        b = W - I,
        Z = N[l] << b,
        m = Z + (1 << b);
      while (Z != m) {
        var J = A[Z] >>> 15 - W;
        R[J] = e;
        Z++;
      }
    }
  };
  H.H.l = function (N, W) {
    var R = H.H.m.r,
      V = 15 - W;
    for (var n = 0; n < N.length; n += 2) {
      var A = N[n] << W - N[n + 1];
      N[n] = R[A] >>> V;
    }
  };
  H.H.M = function (N, W, R) {
    R = R << (W & 7);
    var V = W >>> 3;
    N[V] |= R;
    N[V + 1] |= R >>> 8;
  };
  H.H.I = function (N, W, R) {
    R = R << (W & 7);
    var V = W >>> 3;
    N[V] |= R;
    N[V + 1] |= R >>> 8;
    N[V + 2] |= R >>> 16;
  };
  H.H.e = function (N, W, R) {
    return (N[W >>> 3] | N[(W >>> 3) + 1] << 8) >>> (W & 7) & (1 << R) - 1;
  };
  H.H.b = function (N, W, R) {
    return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7) & (1 << R) - 1;
  };
  H.H.Z = function (N, W) {
    return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7);
  };
  H.H.i = function (N, W) {
    return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16 | N[(W >>> 3) + 3] << 24) >>> (W & 7);
  };
  H.H.m = function () {
    var N = Uint16Array,
      W = Uint32Array;
    return {
      K: new N(16),
      j: new N(16),
      X: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
      S: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],
      T: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],
      q: new N(32),
      p: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],
      z: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],
      c: new W(32),
      J: new N(512),
      _: [],
      h: new N(32),
      $: [],
      w: new N(32768),
      C: [],
      v: [],
      d: new N(32768),
      D: [],
      u: new N(512),
      Q: [],
      r: new N(1 << 15),
      s: new W(286),
      Y: new W(30),
      a: new W(19),
      t: new W(15e3),
      k: new N(1 << 16),
      g: new N(1 << 15)
    };
  }();
  (function () {
    var N = H.H.m,
      W = 1 << 15;
    for (var R = 0; R < W; R++) {
      var V = R;
      V = (V & 2863311530) >>> 1 | (V & 1431655765) << 1;
      V = (V & 3435973836) >>> 2 | (V & 858993459) << 2;
      V = (V & 4042322160) >>> 4 | (V & 252645135) << 4;
      V = (V & 4278255360) >>> 8 | (V & 16711935) << 8;
      N.r[R] = (V >>> 16 | V << 16) >>> 17;
    }
    function n(A, l, M) {
      while (l-- != 0) A.push(0, M);
    }
    for (var R = 0; R < 32; R++) {
      N.q[R] = N.S[R] << 3 | N.T[R];
      N.c[R] = N.p[R] << 4 | N.z[R];
    }
    n(N._, 144, 8);
    n(N._, 255 - 143, 9);
    n(N._, 279 - 255, 7);
    n(N._, 287 - 279, 8);
    H.H.n(N._, 9);
    H.H.A(N._, 9, N.J);
    H.H.l(N._, 9);
    n(N.$, 32, 5);
    H.H.n(N.$, 5);
    H.H.A(N.$, 5, N.h);
    H.H.l(N.$, 5);
    n(N.Q, 19, 0);
    n(N.C, 286, 0);
    n(N.D, 30, 0);
    n(N.v, 320, 0);
  })();
  return H.H.N;
}();
UTIF.LosslessJpegDecode = function () {
  var b, O;
  function l() {
    return b[O++];
  }
  function m() {
    return b[O++] << 8 | b[O++];
  }
  function a0(h) {
    var V = l(),
      I = [0, 0, 0, 255],
      f = [],
      G = 8;
    for (var w = 0; w < 16; w++) f[w] = l();
    for (var w = 0; w < 16; w++) {
      for (var x = 0; x < f[w]; x++) {
        var T = z(I, 0, w + 1, 1);
        I[T + 3] = l();
      }
    }
    var E = new Uint8Array(1 << G);
    h[V] = [new Uint8Array(I), E];
    for (var w = 0; w < 1 << G; w++) {
      var s = G,
        _ = w,
        Y = 0,
        F = 0;
      while (I[Y + 3] == 255 && s != 0) {
        F = _ >> --s & 1;
        Y = I[Y + F];
      }
      E[w] = Y;
    }
  }
  function z(h, V, I, f) {
    if (h[V + 3] != 255) return 0;
    if (I == 0) return V;
    for (var w = 0; w < 2; w++) {
      if (h[V + w] == 0) {
        h[V + w] = h.length;
        h.push(0, 0, f, 255);
      }
      var x = z(h, h[V + w], I - 1, f + 1);
      if (x != 0) return x;
    }
    return 0;
  }
  function i(h) {
    var V = h.b,
      I = h.f;
    while (V < 25 && h.a < h.d) {
      var f = h.data[h.a++];
      if (f == 255 && !h.c) h.a++;
      I = I << 8 | f;
      V += 8;
    }
    if (V < 0) throw "e";
    h.b = V;
    h.f = I;
  }
  function H(h, V) {
    if (V.b < h) i(V);
    return V.f >> (V.b -= h) & 65535 >> 16 - h;
  }
  function g(h, V) {
    var I = h[0],
      f = 0,
      w = 255,
      x = 0;
    if (V.b < 16) i(V);
    var T = V.f >> V.b - 8 & 255;
    f = h[1][T];
    w = I[f + 3];
    V.b -= I[f + 2];
    while (w == 255) {
      x = V.f >> --V.b & 1;
      f = I[f + x];
      w = I[f + 3];
    }
    return w;
  }
  function P(h, V) {
    if (h < 32768 >> 16 - V) h += -(1 << V) + 1;
    return h;
  }
  function a2(h, V) {
    var I = g(h, V);
    if (I == 0) return 0;
    if (I == 16) return -32768;
    var f = H(I, V);
    return P(f, I);
  }
  function X(h, V, I, f, w, x) {
    var T = 0;
    for (var G = 0; G < x; G++) {
      var s = G * V;
      for (var _ = 0; _ < V; _ += w) {
        T++;
        for (var Y = 0; Y < w; Y++) h[s + _ + Y] = a2(f[Y], I);
      }
      if (I.e != 0 && T % I.e == 0 && G != 0) {
        var F = I.a,
          t = I.data;
        while (t[F] != 255 || !(208 <= t[F + 1] && t[F + 1] <= 215)) F--;
        I.a = F + 2;
        I.f = 0;
        I.b = 0;
      }
    }
  }
  function o(h, V) {
    return P(H(h, V), h);
  }
  function a1(h, V, I, f, w) {
    var x = b.length - O;
    for (var T = 0; T < x; T += 4) {
      var G = b[O + T];
      b[O + T] = b[O + T + 3];
      b[O + T + 3] = G;
      var G = b[O + T + 1];
      b[O + T + 1] = b[O + T + 2];
      b[O + T + 2] = G;
    }
    for (var E = 0; E < w; E++) {
      var s = 32768,
        _ = 32768;
      for (var Y = 0; Y < V; Y += 2) {
        var F = g(f, I),
          t = g(f, I);
        if (F != 0) s += o(F, I);
        if (t != 0) _ += o(t, I);
        h[E * V + Y] = s & 65535;
        h[E * V + Y + 1] = _ & 65535;
      }
    }
  }
  function C(h) {
    b = h;
    O = 0;
    if (m() != 65496) throw "e";
    var V = [],
      I = 0,
      f = 0,
      w = 0,
      x = [],
      T = [],
      G = [],
      E = 0,
      s = 0,
      _ = 0;
    while (!0) {
      var Y = m();
      if (Y == 65535) {
        O--;
        continue;
      }
      var F = m();
      if (Y == 65475) {
        f = l();
        s = m();
        _ = m();
        E = l();
        for (var t = 0; t < E; t++) {
          var a = l(),
            J = l(),
            r = l();
          if (r != 0) throw "e";
          V[a] = [t, J >> 4, J & 15];
        }
      } else if (Y == 65476) {
        var a3 = O + F - 2;
        while (O < a3) a0(T);
      } else if (Y == 65498) {
        O++;
        for (var t = 0; t < E; t++) {
          var a5 = l(),
            v = V[a5];
          G[v[0]] = T[l() >>> 4];
          x[v[0]] = v.slice(1);
        }
        I = l();
        O += 2;
        break;
      } else if (Y == 65501) {
        w = m();
      } else {
        O += F - 2;
      }
    }
    var a4 = f > 8 ? Uint16Array : Uint8Array,
      $ = new a4(s * _ * E),
      M = {
        b: 0,
        f: 0,
        c: I == 8,
        a: O,
        data: b,
        d: b.length,
        e: w
      };
    if (M.c) a1($, _ * E, M, G[0], s);else {
      var c = [],
        p = 0,
        D = 0;
      for (var t = 0; t < E; t++) {
        var N = x[t],
          S = N[0],
          K = N[1];
        if (S > p) p = S;
        if (K > D) D = K;
        c.push(S * K);
      }
      if (p != 1 || D != 1) {
        if (E != 3 || c[1] != 1 || c[2] != 1) throw "e";
        if (p != 2 || D != 1 && D != 2) throw "e";
        var u = [],
          Z = 0;
        for (var t = 0; t < E; t++) {
          for (var R = 0; R < c[t]; R++) u.push(G[t]);
          Z += c[t];
        }
        var B = _ / p,
          e = s / D,
          d = B * e;
        X($, B * Z, M, u, Z, e);
        j($, I, B, e, Z - 2, Z, Z, f);
        var A = new Uint16Array(d * c[0]);
        if (p == 2 && D == 2) {
          for (var t = 0; t < d; t++) {
            A[4 * t] = $[6 * t];
            A[4 * t + 1] = $[6 * t + 1];
            A[4 * t + 2] = $[6 * t + 2];
            A[4 * t + 3] = $[6 * t + 3];
          }
          j(A, I, B * 4, e, 0, 1, 1, f);
          for (var t = 0; t < d; t++) {
            $[6 * t] = A[4 * t];
            $[6 * t + 1] = A[4 * t + 1];
            $[6 * t + 2] = A[4 * t + 2];
            $[6 * t + 3] = A[4 * t + 3];
          }
        }
        if (p == 2 && D == 1) {
          for (var t = 0; t < d; t++) {
            A[2 * t] = $[4 * t];
            A[2 * t + 1] = $[4 * t + 1];
          }
          j(A, I, B * 2, e, 0, 1, 1, f);
          for (var t = 0; t < d; t++) {
            $[4 * t] = A[2 * t];
            $[4 * t + 1] = A[2 * t + 1];
          }
        }
        var n = $.slice(0);
        for (var K = 0; K < s; K++) {
          if (D == 2) for (var S = 0; S < _; S++) {
            var q = (K * _ + S) * E,
              k = ((K >>> 1) * B + (S >>> 1)) * Z,
              y = (K & 1) * 2 + (S & 1);
            $[q] = n[k + y];
            $[q + 1] = n[k + 4];
            $[q + 2] = n[k + 5];
          } else for (var S = 0; S < _; S++) {
            var q = (K * _ + S) * E,
              k = (K * B + (S >>> 1)) * Z,
              y = S & 1;
            $[q] = n[k + y];
            $[q + 1] = n[k + 2];
            $[q + 2] = n[k + 3];
          }
        }
      } else {
        X($, _ * E, M, G, E, s);
        if (w == 0) j($, I, _, s, 0, E, E, f);else {
          var U = Math.floor(w / _);
          for (var K = 0; K < s; K += U) {
            var L = $.slice(K * _ * E, (K + U) * _ * E);
            j(L, I, _, U, 0, E, E, f);
            $.set(L, K * _ * E);
          }
        }
      }
    }
    return $;
  }
  function j(h, V, I, f, w, x, G, E) {
    var s = I * G;
    for (var _ = w; _ < x; _++) h[_] += 1 << E - 1;
    for (var Y = G; Y < s; Y += G) for (var _ = w; _ < x; _++) h[Y + _] += h[Y + _ - G];
    for (var F = 1; F < f; F++) {
      var t = F * s;
      for (var _ = w; _ < x; _++) h[t + _] += h[t + _ - s];
      for (var Y = G; Y < s; Y += G) {
        for (var _ = w; _ < x; _++) {
          var a = t + Y + _,
            J = a - s,
            r = h[a - G],
            Q = 0;
          if (V == 0) Q = 0;else if (V == 1) Q = r;else if (V == 2) Q = h[J];else if (V == 3) Q = h[J - G];else if (V == 4) Q = r + (h[J] - h[J - G]);else if (V == 5) Q = r + (h[J] - h[J - G] >>> 1);else if (V == 6) Q = h[J] + (r - h[J - G] >>> 1);else if (V == 7) Q = r + h[J] >>> 1;else throw V;
          h[a] += Q;
        }
      }
    }
  }
  return C;
}();
(function () {
  var G = 0,
    F = 1,
    i = 2,
    b = 3,
    J = 4,
    N = 5,
    E = 6,
    s = 7,
    c = 8,
    T = 9,
    a3 = 10,
    f = 11,
    q = 12,
    M = 13,
    m = 14,
    x = 15,
    L = 16,
    $ = 17,
    p = 18;
  function a5(t) {
    var Z = UTIF._binBE.readUshort,
      u = {
        b: Z(t, 0),
        i: t[2],
        C: t[3],
        u: t[4],
        q: Z(t, 5),
        k: Z(t, 7),
        e: Z(t, 9),
        l: Z(t, 11),
        s: t[13],
        d: Z(t, 14)
      };
    if (u.b != 18771 || u.i > 1 || u.q < 6 || u.q % 6 || u.e < 768 || u.e % 24 || u.l != 768 || u.k < u.l || u.k % u.l || u.k - u.e >= u.l || u.s > 16 || u.s != u.k / u.l || u.s != Math.ceil(u.e / u.l) || u.d != u.q / 6 || u.u != 12 && u.u != 14 && u.u != 16 || u.C != 16 && u.C != 0) {
      throw "Invalid data";
    }
    if (u.i == 0) {
      throw "Not implemented. We need this file!";
    }
    u.h = u.C == 16;
    u.m = (u.h ? u.l * 2 / 3 : u.l >>> 1) | 0;
    u.A = u.m + 2;
    u.f = 64;
    u.g = (1 << u.u) - 1;
    u.n = 4 * u.u;
    return u;
  }
  function a7(t, Z) {
    var u = new Array(Z.s),
      e = 4 * Z.s,
      Q = 16 + e;
    if (e & 12) Q += 16 - (e & 12);
    for (var V = 0, O = 16; V < Z.s; O += 4) {
      var o = UTIF._binBE.readUint(t, O);
      u[V] = t.slice(Q, Q + o);
      u[V].j = 0;
      u[V].a = 0;
      Q += o;
      V++;
    }
    if (Q != t.length) throw "Invalid data";
    return u;
  }
  function a6(t, Z) {
    for (var u = -Z[4], e = 0; u <= Z[4]; e++, u++) {
      t[e] = u <= -Z[3] ? -4 : u <= -Z[2] ? -3 : u <= -Z[1] ? -2 : u < -Z[0] ? -1 : u <= Z[0] ? 0 : u < Z[1] ? 1 : u < Z[2] ? 2 : u < Z[3] ? 3 : 4;
    }
  }
  function a1(t, Z, u) {
    var e = [Z, 3 * Z + 18, 5 * Z + 67, 7 * Z + 276, u];
    t.o = Z;
    t.w = (e[4] + 2 * Z) / (2 * Z + 1) + 1 | 0;
    t.v = Math.ceil(Math.log2(t.w));
    t.t = 9;
    a6(t.c, e);
  }
  function a2(t) {
    var Z = {
      c: new Int8Array(2 << t.u)
    };
    a1(Z, 0, t.g);
    return Z;
  }
  function D(t) {
    var Z = [[], [], []],
      u = Math.max(2, t.w + 32 >>> 6);
    for (var e = 0; e < 3; e++) {
      for (var Q = 0; Q < 41; Q++) {
        Z[e][Q] = [u, 1];
      }
    }
    return Z;
  }
  function a4(t) {
    for (var Z = -1, u = 0; !u; Z++) {
      u = t[t.j] >>> 7 - t.a & 1;
      t.a++;
      t.a &= 7;
      if (!t.a) t.j++;
    }
    return Z;
  }
  function K(t, Z) {
    var u = 0,
      e = 8 - t.a;
      t.j;
      t.a;
    if (Z) {
      if (Z >= e) {
        do {
          u <<= e;
          Z -= e;
          u |= t[t.j] & (1 << e) - 1;
          t.j++;
          e = 8;
        } while (Z >= 8);
      }
      if (Z) {
        u <<= Z;
        e -= Z;
        u |= t[t.j] >>> e & (1 << Z) - 1;
      }
      t.a = 8 - e;
    }
    return u;
  }
  function a0(t, Z) {
    var u = 0;
    if (Z < t) {
      while (u <= 14 && Z << ++u < t);
    }
    return u;
  }
  function r(t, Z, u, e, Q, V, O, o) {
    if (o == null) o = 0;
    var X = V + 1,
      k = X % 2,
      a = 0,
      l,
      R,
      w = e[Q],
      S = e[Q - 1],
      H = e[Q - 2][X],
      g = S[X - 1],
      Y = S[X],
      P = S[X + 1],
      A = w[X - 1],
      v = w[X + 1],
      y = Math.abs,
      d,
      C,
      n,
      h;
    if (k) {
      d = y(P - Y);
      C = y(H - Y);
      n = y(g - Y);
    }
    if (k) {
      h = d > n && C < d ? H + g : d < n && C < n ? H + P : P + g;
      h = h + 2 * Y >>> 2;
      if (o) {
        w[X] = h;
        return;
      }
      l = Z.t * Z.c[t.g + Y - H] + Z.c[t.g + g - Y];
    } else {
      h = Y > g && Y > P || Y < g && Y < P ? v + A + 2 * Y >>> 2 : A + v >>> 1;
      l = Z.t * Z.c[t.g + Y - g] + Z.c[t.g + g - A];
    }
    R = y(l);
    var W = a4(u);
    if (W < t.n - Z.v - 1) {
      var z = a0(O[R][0], O[R][1]);
      a = K(u, z) + (W << z);
    } else {
      a = K(u, Z.v) + 1;
    }
    a = a & 1 ? -1 - (a >>> 1) : a >>> 1;
    O[R][0] += y(a);
    if (O[R][1] == t.f) {
      O[R][0] >>>= 1;
      O[R][1] >>>= 1;
    }
    O[R][1]++;
    h = l < 0 ? h - a : h + a;
    if (t.i) {
      if (h < 0) h += Z.w;else if (h > t.g) h -= Z.w;
    }
    w[X] = h >= 0 ? Math.min(h, t.g) : 0;
  }
  function U(t, Z, u) {
    var e = t[0].length;
    for (var Q = Z; Q <= u; Q++) {
      t[Q][0] = t[Q - 1][1];
      t[Q][e - 1] = t[Q - 1][e - 2];
    }
  }
  function B(t) {
    U(t, s, q);
    U(t, i, J);
    U(t, x, $);
  }
  function _(t, Z, u, e, Q, V, O, o, X, k, j, I, a) {
    var l = 0,
      R = 1,
      w = Q < M && Q > J;
    while (R < t.m) {
      if (l < t.m) {
        r(t, Z, u, e, Q, l, O[X], t.h && (w && k || !w && (j || (l & I) == a)));
        r(t, Z, u, e, V, l, O[X], t.h && (!w && k || w && (j || (l & I) == a)));
        l += 2;
      }
      if (l > 8) {
        r(t, Z, u, e, Q, R, o[X]);
        r(t, Z, u, e, V, R, o[X]);
        R += 2;
      }
    }
    B(e);
  }
  function a8(t, Z, u, e, Q, V) {
    _(t, Z, u, e, i, s, Q, V, 0, 0, 1, 0, 8);
    _(t, Z, u, e, c, x, Q, V, 1, 0, 1, 0, 8);
    _(t, Z, u, e, b, T, Q, V, 2, 1, 0, 3, 0);
    _(t, Z, u, e, a3, L, Q, V, 0, 0, 0, 3, 2);
    _(t, Z, u, e, J, f, Q, V, 1, 0, 0, 3, 2);
    _(t, Z, u, e, q, $, Q, V, 2, 1, 0, 3, 0);
  }
  function a9(t, Z, u, e, Q, V) {
    var O = V.length,
      o = t.l;
    if (Q + 1 == t.s) o = t.e - Q * t.l;
    var X = 6 * t.e * e + Q * t.l;
    for (var k = 0; k < 6; k++) {
      for (var j = 0; j < o; j++) {
        var I = V[k % O][j % O],
          a;
        if (I == 0) {
          a = i + (k >>> 1);
        } else if (I == 2) {
          a = x + (k >>> 1);
        } else {
          a = s + k;
        }
        var l = t.h ? (j * 2 / 3 & 2147483646 | j % 3 & 1) + (j % 3 >>> 1) : j >>> 1;
        Z[X + j] = u[a][l + 1];
      }
      X += t.e;
    }
  }
  UTIF._decompressRAF = function (t, Z) {
    var u = a5(t),
      e = a7(t, u),
      Q = a2(u),
      V = new Int16Array(u.e * u.q);
    if (Z == null) {
      Z = u.h ? [[1, 1, 0, 1, 1, 2], [1, 1, 2, 1, 1, 0], [2, 0, 1, 0, 2, 1], [1, 1, 2, 1, 1, 0], [1, 1, 0, 1, 1, 2], [0, 2, 1, 2, 0, 1]] : [[0, 1], [3, 2]];
    }
    var O = [[G, b], [F, J], [N, f], [E, q], [M, L], [m, $]],
      o = [];
    for (var X = 0; X < p; X++) {
      o[X] = new Uint16Array(u.A);
    }
    for (var k = 0; k < u.s; k++) {
      var j = D(Q),
        I = D(Q);
      for (var X = 0; X < p; X++) {
        for (var a = 0; a < u.A; a++) {
          o[X][a] = 0;
        }
      }
      for (var l = 0; l < u.d; l++) {
        a8(u, Q, e[k], o, j, I);
        for (var X = 0; X < 6; X++) {
          for (var a = 0; a < u.A; a++) {
            o[O[X][0]][a] = o[O[X][1]][a];
          }
        }
        a9(u, V, o, l, k, Z);
        for (var X = i; X < p; X++) {
          if ([N, E, M, m].indexOf(X) == -1) {
            for (var a = 0; a < u.A; a++) {
              o[X][a] = 0;
            }
          }
        }
        B(o);
      }
    }
    return V;
  };
})();

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var TIFFLoader = /*#__PURE__*/function (_DataTextureLoader) {
  _inherits$1(TIFFLoader, _DataTextureLoader);
  var _super = _createSuper(TIFFLoader);
  function TIFFLoader(manager) {
    _classCallCheck$1(this, TIFFLoader);
    return _super.call(this, manager);
  }
  _createClass$1(TIFFLoader, [{
    key: "parse",
    value: function parse(buffer) {
      var ifds = UTIF.decode(buffer);
      UTIF.decodeImage(buffer, ifds[0]);
      var rgba = UTIF.toRGBA8(ifds[0]);
      return {
        width: ifds[0].width,
        height: ifds[0].height,
        data: rgba,
        flipY: true,
        magFilter: LinearFilter,
        minFilter: LinearMipmapLinearFilter
      };
    }
  }]);
  return TIFFLoader;
}(DataTextureLoader);

var MxTIFFLoader = /*#__PURE__*/function () {
  function MxTIFFLoader() {
    _classCallCheck$1(this, MxTIFFLoader);
    _defineProperty(this, "imp", new TIFFLoader());
  }
  _createClass$1(MxTIFFLoader, [{
    key: "load",
    value: function load(url, onLoad, onError) {
      this.imp.load(url, onLoad, void 0, onError);
    }
  }]);
  return MxTIFFLoader;
}();

const mxcad = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  b64Encode,
  b64Decode,
  saveAsFileDialog,
  downloadFile,
  downloadFileFromUrl,
  getJsonFromUrl,
  getFileFromUrl,
  _ML_String,
  IsZero,
  postMemoryFile,
  postEmscriptenIndexedDBFile,
  createCursor,
  MxTools,
  McGePoint3d,
  McGeVector3d,
  McGeMatrix3d,
  McGeLongArray,
  McGeStringArray,
  McGePoint3dArray,
  McGeDoubleArray,
  McGeBound,
  MxCoordConvertType,
  get MxCoordConvert () { return MxCoordConvert; },
  getFilterImp,
  MxCADResbuf,
  MxCADUtilityClass,
  MxCADUtility,
  MxCADSelectionSetStatus,
  MxCADSelectionSet,
  MxCADUiPrBase,
  MxCADUiPrPoint,
  MxCADUiPrDist,
  MxCADUiPrAngle,
  MxCADUiPrInt,
  MxCADUiPrKeyWord,
  MxCADUiPrString,
  MxCADUiPrEntity,
  McRxObject,
  McObjectIdType,
  McObjectId,
  McDbObject,
  McDbObjectArray,
  DxfCode,
  get McDb () { return McDb; },
  McCmColor,
  McDbLinetypeTableRecord,
  McDbDimStyleTableRecord,
  McDbTextStyleTableRecord,
  McDbLayerTableRecord,
  McDbLayerTable,
  McDbLinetypeTable,
  McDbDimStyleTable,
  McDbTextStyleTable,
  McDbDatabase,
  McDbBlockTableRecord,
  McDbBlockTable,
  McDbRasterImageDef,
  McDbDictionary,
  McDbXrecord,
  McDbGroup,
  McDbEntity,
  McDbCurve,
  McDbLine,
  McDbText,
  McDbAttribute,
  McDbAttributeDefinition,
  McDbMText,
  McDbCircle,
  McDbPolyline,
  McDbBlockReference,
  McDbSpatialFilter,
  McDbDimension,
  McDbAlignedDimension,
  McDbRotatedDimension,
  McDb2LineAngularDimension,
  McDbArc,
  McDbEllipse,
  McDbPoint,
  McDbHatch,
  McDbProxyEntity,
  McDbRasterImage,
  McDbWipeout,
  McDbBackgroundEntity,
  McDbSpline,
  FetchAttributes,
  McObject,
  McAppType,
  MxCppType,
  MxCADPluginMapDefaultData,
  MxCADPluginSampleCode,
  MxCADPluginBase,
  MxPropertiesWindowCustomValueType,
  MxPropertiesWindowCustomValue,
  MxPropertiesWindowCustom,
  MxCompare,
  MxModifyColor,
  MxCADTempForbiddenIntelliSelect,
  MxCADCloneType,
  MxCADWorldDrawType,
  IMcDbDwgFiler,
  MxCADWorldDraw,
  McDbCustomEntity,
  MxCADMText,
  get MxCpp () { return MxCpp; },
  loadMxCADassembly,
  MxCheckTheBrowser,
  Mx_About,
  createMxCad,
  ColorMethod,
  ColorIndexType,
  getColorUtils,
  createMcCmColor,
  setMcCmColor,
  drawText,
  drawCircle,
  drawLine,
  drawMText,
  drawPolyLine,
  drawPolygon,
  drawArc,
  drawEllipticalArc,
  Mx_Erase,
  drawRectang,
  get MdGe () { return MdGe; },
  MxApp3D,
  MxCAD3DObject,
  Mx3dApplication,
  Mx3dBaseObject,
  Mx3dDimObject,
  Mx3dSymbolObject,
  Mx3dAlgoObject,
  Mx3dAspectObject,
  Mx3dGeObject,
  Mx3dGeCurve,
  Mx3dGeConic,
  Mx3dGePoint,
  Mx3dGeTrsf,
  Mx3dGeAxis,
  Mx3dGeDir,
  Mx3dGeEllipse,
  Mx3dGeHyperbola,
  Mx3dGeVec,
  Mx3dGeBndBox,
  Mx3dGeCircle,
  Mx3dShapeObject,
  Mx3dShapeFace,
  Mx3dShapeVertex,
  Mx3dShapeEdge,
  Mx3dShapeWire,
  Mx3dShapeShell,
  Mx3dShapeSolid,
  Mx3dShapeCompSolid,
  Mx3dShapeCompound,
  Mx3dAlgoFillet,
  Mx3dAlgoChamfer,
  Mx3dAlgoFillet2d,
  Mx3dDbObject,
  Mx3dView,
  Mx3dGeColor,
  Mx3dGeCSYS,
  Mx3dGeCSYSR,
  Mx3dGeCylinder,
  Mx3dDbDocument,
  Mx3dDbLabel,
  Mx3dGeLocation,
  Mx3dGePlane,
  Mx3dSymbolText,
  Mx3dShapeDownCast,
  Mx3dBrepCastGeom,
  Mx3dUtils,
  Mx3dGeLine,
  Mx3dGeomObject,
  Mx3dGeomCurve,
  Mx3dGeomConic,
  Mx3dGeomCircle,
  Mx3dGeomLine,
  Mx3dGeomEllipse,
  Mx3dGeomHyperbola,
  Mx3dGeomParabola,
  Mx3dMkObject,
  Mx3dMkBox,
  Mx3dMkCone,
  Mx3dMkCylinder,
  Mx3dMkRevol,
  Mx3dMkSphere,
  Mx3dMkTorus,
  Mx3dMkPipe,
  Mx3dMkPipeShell,
  Mx3dMkPrism,
  Mx3dMkWedge,
  Mx3dMkLoft,
  Mx3dMkPolygon,
  Mx3dMkFace,
  Mx3dMkThickSolid,
  Mx3dWireTool,
  Mx3dGeomBoundedCurve,
  Mx3dGeomBSplineCurve,
  Mx3dGeomBezierCurve,
  Mx3dGeomSurface,
  Mx3dGeomElementarySurface,
  Mx3dGeomPlane,
  Mx3dGeomConicalSurface,
  Mx3dGeomCylindricalSurface,
  Mx3dGeomSphericalSurface,
  Mx3dGeomToroidalSurface,
  Mx3dGeomBoundedSurface,
  Mx3dGeomBSplineSurface,
  Mx3dGeomBezierSurface,
  Mx3dGeMaterial,
  Mx3dAspectLine,
  Mx3dAspectText,
  Mx3dAspectArrow,
  Mx3dAspectDim,
  Mx3dDimDiameter,
  Mx3dDimRadius,
  Mx3dDimAngle,
  Mx3dDimLength,
  Mx3dInterpolateBSplineCurve,
  MxMap,
  MxMapAddRasterTileLayer,
  MxMapAddGoogleCnLayer,
  mx_gps84_To_gcj02,
  mx_gcj02_To_gps84,
  MxTIFFLoader
}, Symbol.toStringTag, { value: 'Module' }));

globalThis.Buffer = buffer$1.Buffer;
globalThis.Buffer.alloc = buffer$1.Buffer.alloc;
globalThis.Buffer.from = buffer$1.Buffer.from;

export { ColorIndexType, ColorMethod, DxfCode, FetchAttributes, IMcDbDwgFiler, IsZero, McAppType, McCmColor, McDb, McDb2LineAngularDimension, McDbAlignedDimension, McDbArc, McDbAttribute, McDbAttributeDefinition, McDbBackgroundEntity, McDbBlockReference, McDbBlockTable, McDbBlockTableRecord, McDbCircle, McDbCurve, McDbCustomEntity, McDbDatabase, McDbDictionary, McDbDimStyleTable, McDbDimStyleTableRecord, McDbDimension, McDbEllipse, McDbEntity, McDbGroup, McDbHatch, McDbLayerTable, McDbLayerTableRecord, McDbLine, McDbLinetypeTable, McDbLinetypeTableRecord, McDbMText, McDbObject, McDbObjectArray, McDbPoint, McDbPolyline, McDbProxyEntity, McDbRasterImage, McDbRasterImageDef, McDbRotatedDimension, McDbSpatialFilter, McDbSpline, McDbText, McDbTextStyleTable, McDbTextStyleTableRecord, McDbWipeout, McDbXrecord, McGeBound, McGeDoubleArray, McGeLongArray, McGeMatrix3d, McGePoint3d, McGePoint3dArray, McGeStringArray, McGeVector3d, McObject, McObjectId, McObjectIdType, McRxObject, MdGe, Mx3dAlgoChamfer, Mx3dAlgoFillet, Mx3dAlgoFillet2d, Mx3dAlgoObject, Mx3dApplication, Mx3dAspectArrow, Mx3dAspectDim, Mx3dAspectLine, Mx3dAspectObject, Mx3dAspectText, Mx3dBaseObject, Mx3dBrepCastGeom, Mx3dDbDocument, Mx3dDbLabel, Mx3dDbObject, Mx3dDimAngle, Mx3dDimDiameter, Mx3dDimLength, Mx3dDimObject, Mx3dDimRadius, Mx3dGeAxis, Mx3dGeBndBox, Mx3dGeCSYS, Mx3dGeCSYSR, Mx3dGeCircle, Mx3dGeColor, Mx3dGeConic, Mx3dGeCurve, Mx3dGeCylinder, Mx3dGeDir, Mx3dGeEllipse, Mx3dGeHyperbola, Mx3dGeLine, Mx3dGeLocation, Mx3dGeMaterial, Mx3dGeObject, Mx3dGePlane, Mx3dGePoint, Mx3dGeTrsf, Mx3dGeVec, Mx3dGeomBSplineCurve, Mx3dGeomBSplineSurface, Mx3dGeomBezierCurve, Mx3dGeomBezierSurface, Mx3dGeomBoundedCurve, Mx3dGeomBoundedSurface, Mx3dGeomCircle, Mx3dGeomConic, Mx3dGeomConicalSurface, Mx3dGeomCurve, Mx3dGeomCylindricalSurface, Mx3dGeomElementarySurface, Mx3dGeomEllipse, Mx3dGeomHyperbola, Mx3dGeomLine, Mx3dGeomObject, Mx3dGeomParabola, Mx3dGeomPlane, Mx3dGeomSphericalSurface, Mx3dGeomSurface, Mx3dGeomToroidalSurface, Mx3dInterpolateBSplineCurve, Mx3dMkBox, Mx3dMkCone, Mx3dMkCylinder, Mx3dMkFace, Mx3dMkLoft, Mx3dMkObject, Mx3dMkPipe, Mx3dMkPipeShell, Mx3dMkPolygon, Mx3dMkPrism, Mx3dMkRevol, Mx3dMkSphere, Mx3dMkThickSolid, Mx3dMkTorus, Mx3dMkWedge, Mx3dShapeCompSolid, Mx3dShapeCompound, Mx3dShapeDownCast, Mx3dShapeEdge, Mx3dShapeFace, Mx3dShapeObject, Mx3dShapeShell, Mx3dShapeSolid, Mx3dShapeVertex, Mx3dShapeWire, Mx3dSymbolObject, Mx3dSymbolText, Mx3dUtils, Mx3dView, Mx3dWireTool, MxApp3D, MxCAD3DObject, MxCADCloneType, MxCADMText, MxCADPluginBase, MxCADPluginMapDefaultData, MxCADPluginSampleCode, MxCADResbuf, MxCADSelectionSet, MxCADSelectionSetStatus, MxCADTempForbiddenIntelliSelect, MxCADUiPrAngle, MxCADUiPrBase, MxCADUiPrDist, MxCADUiPrEntity, MxCADUiPrInt, MxCADUiPrKeyWord, MxCADUiPrPoint, MxCADUiPrString, MxCADUtility, MxCADUtilityClass, MxCADWorldDraw, MxCADWorldDrawType, MxCheckTheBrowser, MxCompare, MxCoordConvert, MxCoordConvertType, MxCpp, MxCppType, MxMap, MxMapAddGoogleCnLayer, MxMapAddRasterTileLayer, MxModifyColor, MxPropertiesWindowCustom, MxPropertiesWindowCustomValue, MxPropertiesWindowCustomValueType, MxTIFFLoader, MxTools, Mx_About, Mx_Erase, _ML_String, b64Decode, b64Encode, createCursor, createMcCmColor, createMxCad, mxcad as default, downloadFile, downloadFileFromUrl, drawArc, drawCircle, drawEllipticalArc, drawLine, drawMText, drawPolyLine, drawPolygon, drawRectang, drawText, getColorUtils, getFileFromUrl, getFilterImp, getJsonFromUrl, loadMxCADassembly, mx_gcj02_To_gps84, mx_gps84_To_gcj02, postEmscriptenIndexedDBFile, postMemoryFile, saveAsFileDialog, setMcCmColor };
`;const ae="/mxcad_docs/assets/WX-Two-dimensional-code.5d33a7bd.png";const oe={},se={class:"side-bar"},le=l("a",{href:"#",class:"icon-chat"},[P("WECHAT"),l("div",{class:"chat-tips"},[l("i"),l("img",{style:{width:"138px",height:"138px"},src:ae,alt:"微信"})])],-1),ce=l("a",{href:"mailto:710714273@qq.com",class:"icon-mail"},"mail",-1),ue=[le,ce];function de(e,n){return T(),D("div",se,ue)}const v=w(oe,[["render",de]]);let y=!0;const pe={...u,Layout(){return d(u.Layout,null,{"layout-top":()=>d(v)})},enhanceApp(e){const{app:n}=e;n.component("ContactWidget",v),u.enhanceApp(e),n.mixin({async mounted(){y&&(y=!1,await a(()=>import("./chunks/mxdraw.esm.a82b6cab.js"),[]).then(t=>{x("mxdraw",t.default||t)}),await a(()=>import("./chunks/index.3d67f580.js"),["assets/chunks/index.3d67f580.js","assets/chunks/mxdraw.esm.a82b6cab.js","assets/chunks/commonjsHelpers.edff4021.js"]).then(t=>{x("mxcad",t.default||t)}))}}),n.use(te,{defaultDirection:"column",ms:300,handleError(t){},onMonacoCreated(t){t.languages.typescript.typescriptDefaults.addExtraLib(`
          declare module 'mxdraw' { 
            ${re} 
          }
          `,"mxdraw"),t.languages.typescript.typescriptDefaults.addExtraLib(`
          declare module 'mxcad' { 
            ${ie} 
          }
          `,"mxcad")}})}};function M(e){if(e.extends){const n=M(e.extends);return{...n,...e,async enhanceApp(t){n.enhanceApp&&await n.enhanceApp(t),e.enhanceApp&&await e.enhanceApp(t)}}}return e}const o=M(pe),fe=B({name:"VitePressApp",setup(){const{site:e}=j();return G(()=>{V(()=>{document.documentElement.lang=e.value.lang,document.documentElement.dir=e.value.dir})}),U(),z(),W(),o.setup&&o.setup(),()=>d(o.Layout)}});async function me(){const e=ge(),n=he();n.provide(A,e);const t=E(e.route);return n.provide(O,t),n.component("Content",I),n.component("ClientOnly",k),Object.defineProperties(n.config.globalProperties,{$frontmatter:{get(){return t.frontmatter.value}},$params:{get(){return t.page.value.params}}}),o.enhanceApp&&await o.enhanceApp({app:n,router:e,siteData:R}),{app:n,router:e,data:t}}function he(){return L(fe)}function ge(){let e=p,n;return N(t=>{let r=F(t);return e&&(n=r),(e||n===r)&&(r=r.replace(/\.js$/,".lean.js")),p&&(e=!1),a(()=>import(r),[])},o.NotFound)}p&&me().then(({app:e,router:n,data:t})=>{n.go().then(()=>{S(n.route,t.site),e.mount("#app")})});export{ye as A,be as O,Me as P,_e as R,me as createApp,J as v};
