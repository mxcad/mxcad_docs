import{_ as e,o as t,c as o,V as n}from"./chunks/framework.24f0af87.js";const i="/mxcad_docs/assets/image-24.a94d2d0b.png",f=JSON.parse('{"title":"Package desktop MxCAD APP","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/7.BestPractice/2.PackageDesktopMxCADAPP.md","filePath":"en/docs/7.BestPractice/2.PackageDesktopMxCADAPP.md"}'),r={name:"en/docs/7.BestPractice/2.PackageDesktopMxCADAPP.md"},a=n('<h1 id="package-desktop-mxcad-app" tabindex="-1">Package desktop MxCAD APP <a class="header-anchor" href="#package-desktop-mxcad-app" aria-label="Permalink to &quot;Package desktop MxCAD APP&quot;">â€‹</a></h1><p>We offer electron version to implement the desktop application. For the electron version, There is no change in the front-end secondary development plug-in (that is, the js file generated by the above MxCAD directory), we only need to copy the corresponding js script under dist/plugins to the dist/2d/dist/plugins directory of the electron project now downloaded and decompressed to cover it.</p><p>In addition, the electron version adds a new MxElectronAPI object to the window, providing the ability to communicate with the main thread, and we can use MxElectronAPI to determine whether it is an electron environment when writing front-end plugins. We can also write our own plug-in for the electron project based on vite packaging with ts files for some secondary development needs of the electron main thread.</p><ol><li><p>Click on the download electron [project](<a href="https://gitee.com/mxcadx/mxdraw-article/blob/master/MxCad" target="_blank" rel="noreferrer">https://gitee.com/mxcadx/mxdraw-article/blob/master/MxCad</a> project plug-in integrated secondary development/MxCADAppElectron. Zip)</p></li><li><p>After unzip, install dependency <code>npm install</code> and run <code>npm run dev</code> to start electron project</p></li><li><p>Create the src/plugins directory. If it exists, do not create it</p></li><li><p>Create a plug-in directory, such as the testPlugin directory, and then create an index.ts file in the directory as the plug-in entry file</p></li><li><p>vite.plugins.config.ts new plug-in inlet configuration pluginEntryFileName:[&quot;plugins/testPlugin/index.ts&quot;]</p></li><li><p>Run the command to debug: <code>dev:plugins</code></p></li><li><p>Run the package command: <code>build:plugins</code></p></li></ol><p>If you create preload.ts in testPlugin and export an object by default, this object holds the API that is used to communicate with the page. Here preload.ts is a preloaded script, if it is difficult to understand you can refer to the preloaded script: &lt; <a href="https://www.electronjs.org/zh/docs/latest/tutorial/tutorial-preload" target="_blank" rel="noreferrer">https://www.electronjs.org/zh/docs/latest/tutorial/tutorial-preload</a> &gt;, Its default object is derived through <code>contextBridge. ExposeInMainWorld</code> define the front end of the window. The MxElectronAPi. Plug-in directory name (namespace) objects, such as now create testPlugin directory, then the front window. Access is MxElectronAPi. TestPlugin is that the exported object by default.</p><p>In the same way, the object exported by preload2d.ts overwrites the value of the same attribute in the object exported by preload2d.ts, but preload2d.ts is only valid in the page that displays 2d drawings. preload3d.ts differs from preload2d.ts in that it only works on 3d displayed pages.</p><p>Among them, plugins can exist many plug-ins, each directory under it is a plug-in, the plug-in directory name is the namespace name. The object accessed by the front page is also the name of the <code>window.MxElectronAPI.</code> namespace.</p><p>In the ts file of the electron project plugin, we keep the mxAppContext context, which you can access through <code>glob.mxappContext</code>, and currently mount several properties and methods: getMainWindow, showMessage, showMessageBoxSync, MainTabs. They have their corresponding type hints and descriptions in ts.</p><p>The following description of the corresponding directory in the electron project:</p><table><thead><tr><th>Path</th><th>Description</th><th>Reminders</th></tr></thead><tbody><tr><td>dist</td><td>there are 2d, 3d and other directories in the</td><td>directory of the front-end packaged project resources. Among them, there is also a dist directory in 2d and 3d. This dist directory is the front-end resource after packaging mentioned above. It is electron version, but the directory structure is exactly the same. We just need to overlay the generated dist/plugins/test.js above with corresponding dist/plugins/test.js in electron version and check if the corresponding configuration exists in config.json</td></tr><tr><td>dist-electron</td><td>The code packed in the main thread</td><td>is not recommended to change the code directly here, because</td></tr><tr><td>rendererTypes</td><td>window.MxElectronAPI The ts type definition</td><td>is available on the front-end, providing the type definition and description</td></tr><tr><td>src/plugins</td><td>plugin directory</td><td>each directory contains the index.ts entry</td></tr><tr><td>vite.plugins.config.ts</td><td>vite packaging configuration</td><td>for each new creation directory will be recorded here, if you know a little about vite packaging then you can adjust according to your needs, but the final output file structure must not change the location, otherwise the plugin will not load</td></tr></tbody></table><p>For secondary development requirements existing configuration or plug-ins can not meet, you can give us feedback, and then gradually improve.</p><p>electron desktop app screenshot:</p><p><img src="'+i+'" alt="Alt text"></p>',13),d=[a];function s(c,p,l,h,g,u){return t(),o("div",null,d)}const y=e(r,[["render",s]]);export{f as __pageData,y as default};
