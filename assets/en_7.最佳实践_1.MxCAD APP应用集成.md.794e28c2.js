import{_ as e,a as t,b as i,c as o,d as a,e as r,f as n,g as s,h as l,i as c,j as p,k as d,l as m,m as h,n as u,o as f,p as g}from"./chunks/image-14.e8ec3505.js";import{_ as x,o as A,c as b,V as v}from"./chunks/framework.24f0af87.js";const B=JSON.parse('{"title":"MxCAD APP application integration","description":"","frontmatter":{},"headers":[],"relativePath":"en/7.最佳实践/1.MxCAD APP应用集成.md","filePath":"en/7.最佳实践/1.MxCAD APP应用集成.md"}'),w={name:"en/7.最佳实践/1.MxCAD APP应用集成.md"},_=v('<h1 id="mxcad-app-application-integration" tabindex="-1">MxCAD APP application integration <a class="header-anchor" href="#mxcad-app-application-integration" aria-label="Permalink to &quot;MxCAD APP application integration&quot;">​</a></h1><p>We have developed a complete online CAD application according to mxcad development kit, which includes the realization of drawing, editing, text style setting, layer setting, line setting and other functions.</p><p>At the same time, we provide a plug-in development interface, users can carry out secondary development on the basis of the interface, so that users can reduce the workload of scratch development, and can quickly integrate a complete CAD project into the project that users need.</p><p>We recommend using iframe technology to integrate the functionality of our MxCAD App into the target project.</p><p>Click on the <a href="https://demo.mxdraw3d.com:3562/MxCADCode.7z" target="_blank" rel="noreferrer">download the sample demo source</a></p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>After downloading and unziving the demo source code, we need to go to the &#39;Edit\\2d&#39; directory, where our target projects are stored, and its structure is as follows:</p><ul><li><p>dist: Front-end resources after MxCAD APP is packaged online</p></li><li><p>MxCAD: Secondary development project of MxCAD APPP plug-in (users can develop functions on this basis)</p></li><li><p>MxCADiframe: A sample demo of embedding MxCAD APP via iframe</p></li></ul></div><h2 id="run-the-demo-description" tabindex="-1">Run the Demo description <a class="header-anchor" href="#run-the-demo-description" aria-label="Permalink to &quot;Run the Demo description&quot;">​</a></h2><ol><li><p>Go to the MxCAD directory and run npm install to install the dependency.</p></li><li><p>run the &#39;npm run dev&#39; command to run MxCAD APP online CAD.</p></li></ol><p>After running, visit <a href="http://localhost:3366/" target="_blank" rel="noreferrer">http://localhost:3366/</a>, and the effect is as follows:</p><p><img src="'+e+'" alt="Alt text"></p><ol start="3"><li><p>run the &#39;npm run build&#39; command to package the demo.</p></li><li><p>Go to the MxCADiframe directory and run npm install to install the dependency.</p></li><li><p>In its src/components/Home.vue, set the src attribute of iframe to the URL just visited by MxCAD :<a href="http://localhost:3366/" target="_blank" rel="noreferrer">http://localhost:3366/</a></p></li><li><p>run the debugging MxCADiframe project command: &#39;npm run serve&#39;.</p></li></ol><p>The effect after operation is as follows:</p><p><img src="'+t+'" alt="Alt text"></p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If you open the MxCADiframe project directly, the drawing cannot be obtained or the iframe message localhost has rejected the connection, because the project in the MxCAD directory has not been started.</p></div><p>Users can refer to the above MxCADiframe project implementation, in their own front-end project with iframe embedded MxCad online editing project.</p><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>MxCAD directory Description:</p><ul><li><p>Based on vite, you can directly run the startup server through npm run dev to browse the page of dist directory, and modify the.ts and.vue files in MxCAD will be automatically compiled and automatically refresh the page.</p></li><li><p>Based on vite, you need to manually run &#39;npm run build&#39; to package the dist directory, and after packaging the dist directory is directly placed in dist/plugins.</p></li><li><p><code>import</code> The import of mxcad, mxdraw, and vue is actually used in the front-end resources of dist packaging, not a new mxcad, mxdraw, and vue.</p></li><li><p>The configuration of plugins in vite.config.ts and dist/plugins/config.json in the MxCAD directory must correspond.</p></li></ul></div><h2 id="description-of-back-end-services" tabindex="-1">Description of back-end services <a class="header-anchor" href="#description-of-back-end-services" aria-label="Permalink to &quot;Description of back-end services&quot;">​</a></h2><p>MxCAD APP online CAD when running, will access the following service interface, such as save, open DWG file interface, we need to start MxDraw cloud image development kit in the background service program, So we need to <a href="https://www.mxdraw.com/download.html" target="_blank" rel="noreferrer">first download MxDraw cloud development kit</a>, Learn how to use the MxDraw Cloud Graphics Development Kit from the Getting Started Documentation (<a href="https://help.mxdraw.com/?pid=32" target="_blank" rel="noreferrer">https://help.mxdraw.com/?pid=32</a>).</p><ol><li><p>Download the MxDraw cloud image development package and decompress it to the target directory.</p></li><li><p>Double-click the Mx3dServer.exe application <img src="'+i+'" alt="Alt text"></p></li><li><p>Click Start web Service <img src="'+o+'" alt="Alt text"></p></li></ol><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>To realize the service interface of uploading drawings and saving drawings, you need to read the related documents of MxDraw cloud diagram development kit in detail :<a href="https://help.mxdraw.com/?pid=32" target="_blank" rel="noreferrer">https://help.mxdraw.com/?pid=32</a>, and then refer to the corresponding interface source code of MxDraw cloud diagram development kit to implement it according to your own needs. Or directly reuse MxDraw cloud image development kit to provide a good interface.</p></div><h2 id="mxcad-app-online-cad-preparation-instructions" tabindex="-1">MxCAD APP online CAD preparation instructions <a class="header-anchor" href="#mxcad-app-online-cad-preparation-instructions" aria-label="Permalink to &quot;MxCAD APP online CAD preparation instructions&quot;">​</a></h2><p>dist directory of online CAD is the front-end resource after packaging. We can prepare MxCAD APP by modifying the configuration file in this directory.</p><p>dist directory several important configuration files:</p><ol><li>mxUiConfig.json: UI configuration file. Some configuration attributes are described as follows (See the configuration file for details).</li></ol><ul><li><p>title: browser title <img src="'+a+'" alt="Alt text"></p></li><li><p>headerTitle: Add <code>&lt;version&gt;</code> to automatically replace the version number <img src="'+r+'" alt="Alt text"></p></li><li><p>mTitleButtonBarData: prompt in the array element, cmd represents a command, clicking the button will execute a command <img src="'+n+'" alt="Alt text"></p></li><li><p>mRightButtonBarData and mLeftButtonBarData: isShow indicates whether it is displayed <img src="'+s+'" alt="Alt text"></p></li><li><p>mMenuBarData: list Menu list can always be nested in the list to form a multi-level menu <img src="'+l+'" alt="Alt text"></p></li><li><p>footerRightBtnSwitchData: [&quot;grid&quot;, &quot;orthogonal&quot;, &quot;pole&quot;, &quot;object capture&quot;, &quot;tracking&quot;, &quot;DYN&quot;] shows that correspond to the name of the button, an empty array will not display <img src="'+c+'" alt="Alt text"></p></li></ul><ol start="2"><li>mxServerConfig.json: service configuration file. Some configuration attributes are described as follows.</li></ol><ul><li><p>uploadFileConfig: is based on the [WebUploader] (<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="noreferrer">http://fex.baidu.com/webuploader/</a>) to realize the file upload, it is part of the configuration parameters, upload the backend interface specifications are as follows:</p></li><li><p>baseUrl: indicates the same background server address. The following relative interfaces are based on the same server address The default background service source location is in the cloud map development package: windows: <img src="'+p+'" alt="Alt text"> linux: <img src="'+d+'" alt="Alt text"></p></li><li><p>saveDwgUrl: Save DWG file service address, how to implement the interface can provide subsequent development kit Default file saving Node service location:<img src="'+m+'" alt="Alt text"></p></li><li><p>wasmConfig: The configuration here distinguishes which WASM-related file to use, and see the configuration file in dist for details</p></li></ul><p>plugins/config.json: plug-in configuration file. Some of its properties are described as follows.</p><ul><li>plugins: Is the file that stores the name of the plug-in, it will load the script corresponding to the js corresponding name in the current directory in order, such as a plugins/test.js to fill in a test, you can write your own need to extend the function in these js files, you can ask mxcad globally in the window petition, It is not good to write js directly, and the MxCAD directory is used to package the js project and create the corresponding js file in dist/plugins, as shown in the figure:</li></ul><p><img src="'+h+'" alt="Alt text"></p><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>The MxCAD and vue introduced in the mxcad project are actually mxcad and vue in the cadDemo, and this js file is a secondary development extension for cadDemo. The MxCADiframe project demonstrates how to integrate cadDemo packaged resources into an iframe.</p></div><h2 id="test-demo-use-cases" tabindex="-1">Test Demo use cases <a class="header-anchor" href="#test-demo-use-cases" aria-label="Permalink to &quot;Test Demo use cases&quot;">​</a></h2><p>In the src folder under the MxCAD directory, we provide some of the functional test cases implemented through the mxcad library, and users can run these functions from the test button on the page or from the command line.</p><p><img src="'+u+'" alt="Alt text"></p><p>The corresponding code of the function can also be searched in the source code through the command to find the corresponding implementation</p><p><img src="'+f+'" alt="Alt text"></p><p>Once the plug-in is developed, run &#39;npm run build&#39; to package it into the dist/plugins directory.</p><p>In addition, there is a &#39;ifame.ts&#39; file in the src directory, which corresponds to postMessage in the MxCADiframe project.</p><p><img src="'+g+'" alt="Alt text"></p>',39),D=[_];function y(k,C,M,P,j,q){return A(),b("div",null,D)}const I=x(w,[["render",y]]);export{B as __pageData,I as default};
